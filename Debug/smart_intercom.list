
smart_intercom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000261c0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004f5bc  080263a0  080263a0  000363a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807595c  0807595c  00090084  2**0
                  CONTENTS
  4 .ARM          00000008  0807595c  0807595c  0008595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08075964  08075964  00090084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08075964  08075964  00085964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08075968  08075968  00085968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0807596c  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004a4b8  20000084  080759f0  00090084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2004a53c  080759f0  0009a53c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00090084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00346811  00000000  00000000  000900b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000222e5  00000000  00000000  003d68c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00009fa0  00000000  00000000  003f8bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00009af8  00000000  00000000  00402b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004134e  00000000  00000000  0040c648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000895a3  00000000  00000000  0044d996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b4c7c  00000000  00000000  004d6f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0068bbb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0002df6c  00000000  00000000  0068bc08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	08026388 	.word	0x08026388

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	08026388 	.word	0x08026388

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <strlen>:
 80002d4:	4603      	mov	r3, r0
 80002d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d1fb      	bne.n	80002d6 <strlen+0x2>
 80002de:	1a18      	subs	r0, r3, r0
 80002e0:	3801      	subs	r0, #1
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_drsub>:
 80002e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__adddf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_dsub>:
 80002ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f0 <__adddf3>:
 80002f0:	b530      	push	{r4, r5, lr}
 80002f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fa:	ea94 0f05 	teq	r4, r5
 80002fe:	bf08      	it	eq
 8000300:	ea90 0f02 	teqeq	r0, r2
 8000304:	bf1f      	itttt	ne
 8000306:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000316:	f000 80e2 	beq.w	80004de <__adddf3+0x1ee>
 800031a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000322:	bfb8      	it	lt
 8000324:	426d      	neglt	r5, r5
 8000326:	dd0c      	ble.n	8000342 <__adddf3+0x52>
 8000328:	442c      	add	r4, r5
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	ea82 0000 	eor.w	r0, r2, r0
 8000336:	ea83 0101 	eor.w	r1, r3, r1
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	2d36      	cmp	r5, #54	; 0x36
 8000344:	bf88      	it	hi
 8000346:	bd30      	pophi	{r4, r5, pc}
 8000348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800034c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x70>
 800035a:	4240      	negs	r0, r0
 800035c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000364:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x84>
 800036e:	4252      	negs	r2, r2
 8000370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000374:	ea94 0f05 	teq	r4, r5
 8000378:	f000 80a7 	beq.w	80004ca <__adddf3+0x1da>
 800037c:	f1a4 0401 	sub.w	r4, r4, #1
 8000380:	f1d5 0e20 	rsbs	lr, r5, #32
 8000384:	db0d      	blt.n	80003a2 <__adddf3+0xb2>
 8000386:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038a:	fa22 f205 	lsr.w	r2, r2, r5
 800038e:	1880      	adds	r0, r0, r2
 8000390:	f141 0100 	adc.w	r1, r1, #0
 8000394:	fa03 f20e 	lsl.w	r2, r3, lr
 8000398:	1880      	adds	r0, r0, r2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	4159      	adcs	r1, r3
 80003a0:	e00e      	b.n	80003c0 <__adddf3+0xd0>
 80003a2:	f1a5 0520 	sub.w	r5, r5, #32
 80003a6:	f10e 0e20 	add.w	lr, lr, #32
 80003aa:	2a01      	cmp	r2, #1
 80003ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b0:	bf28      	it	cs
 80003b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	18c0      	adds	r0, r0, r3
 80003bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	d507      	bpl.n	80003d6 <__adddf3+0xe6>
 80003c6:	f04f 0e00 	mov.w	lr, #0
 80003ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003da:	d31b      	bcc.n	8000414 <__adddf3+0x124>
 80003dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e0:	d30c      	bcc.n	80003fc <__adddf3+0x10c>
 80003e2:	0849      	lsrs	r1, r1, #1
 80003e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ec:	f104 0401 	add.w	r4, r4, #1
 80003f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f8:	f080 809a 	bcs.w	8000530 <__adddf3+0x240>
 80003fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000400:	bf08      	it	eq
 8000402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000406:	f150 0000 	adcs.w	r0, r0, #0
 800040a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040e:	ea41 0105 	orr.w	r1, r1, r5
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000418:	4140      	adcs	r0, r0
 800041a:	eb41 0101 	adc.w	r1, r1, r1
 800041e:	3c01      	subs	r4, #1
 8000420:	bf28      	it	cs
 8000422:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000426:	d2e9      	bcs.n	80003fc <__adddf3+0x10c>
 8000428:	f091 0f00 	teq	r1, #0
 800042c:	bf04      	itt	eq
 800042e:	4601      	moveq	r1, r0
 8000430:	2000      	moveq	r0, #0
 8000432:	fab1 f381 	clz	r3, r1
 8000436:	bf08      	it	eq
 8000438:	3320      	addeq	r3, #32
 800043a:	f1a3 030b 	sub.w	r3, r3, #11
 800043e:	f1b3 0220 	subs.w	r2, r3, #32
 8000442:	da0c      	bge.n	800045e <__adddf3+0x16e>
 8000444:	320c      	adds	r2, #12
 8000446:	dd08      	ble.n	800045a <__adddf3+0x16a>
 8000448:	f102 0c14 	add.w	ip, r2, #20
 800044c:	f1c2 020c 	rsb	r2, r2, #12
 8000450:	fa01 f00c 	lsl.w	r0, r1, ip
 8000454:	fa21 f102 	lsr.w	r1, r1, r2
 8000458:	e00c      	b.n	8000474 <__adddf3+0x184>
 800045a:	f102 0214 	add.w	r2, r2, #20
 800045e:	bfd8      	it	le
 8000460:	f1c2 0c20 	rsble	ip, r2, #32
 8000464:	fa01 f102 	lsl.w	r1, r1, r2
 8000468:	fa20 fc0c 	lsr.w	ip, r0, ip
 800046c:	bfdc      	itt	le
 800046e:	ea41 010c 	orrle.w	r1, r1, ip
 8000472:	4090      	lslle	r0, r2
 8000474:	1ae4      	subs	r4, r4, r3
 8000476:	bfa2      	ittt	ge
 8000478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800047c:	4329      	orrge	r1, r5
 800047e:	bd30      	popge	{r4, r5, pc}
 8000480:	ea6f 0404 	mvn.w	r4, r4
 8000484:	3c1f      	subs	r4, #31
 8000486:	da1c      	bge.n	80004c2 <__adddf3+0x1d2>
 8000488:	340c      	adds	r4, #12
 800048a:	dc0e      	bgt.n	80004aa <__adddf3+0x1ba>
 800048c:	f104 0414 	add.w	r4, r4, #20
 8000490:	f1c4 0220 	rsb	r2, r4, #32
 8000494:	fa20 f004 	lsr.w	r0, r0, r4
 8000498:	fa01 f302 	lsl.w	r3, r1, r2
 800049c:	ea40 0003 	orr.w	r0, r0, r3
 80004a0:	fa21 f304 	lsr.w	r3, r1, r4
 80004a4:	ea45 0103 	orr.w	r1, r5, r3
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f1c4 040c 	rsb	r4, r4, #12
 80004ae:	f1c4 0220 	rsb	r2, r4, #32
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ba:	ea40 0003 	orr.w	r0, r0, r3
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	fa21 f004 	lsr.w	r0, r1, r4
 80004c6:	4629      	mov	r1, r5
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f094 0f00 	teq	r4, #0
 80004ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d2:	bf06      	itte	eq
 80004d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d8:	3401      	addeq	r4, #1
 80004da:	3d01      	subne	r5, #1
 80004dc:	e74e      	b.n	800037c <__adddf3+0x8c>
 80004de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e2:	bf18      	it	ne
 80004e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e8:	d029      	beq.n	800053e <__adddf3+0x24e>
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	d005      	beq.n	8000502 <__adddf3+0x212>
 80004f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fa:	bf04      	itt	eq
 80004fc:	4619      	moveq	r1, r3
 80004fe:	4610      	moveq	r0, r2
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea91 0f03 	teq	r1, r3
 8000506:	bf1e      	ittt	ne
 8000508:	2100      	movne	r1, #0
 800050a:	2000      	movne	r0, #0
 800050c:	bd30      	popne	{r4, r5, pc}
 800050e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000512:	d105      	bne.n	8000520 <__adddf3+0x230>
 8000514:	0040      	lsls	r0, r0, #1
 8000516:	4149      	adcs	r1, r1
 8000518:	bf28      	it	cs
 800051a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051e:	bd30      	pop	{r4, r5, pc}
 8000520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000524:	bf3c      	itt	cc
 8000526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052a:	bd30      	popcc	{r4, r5, pc}
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000538:	f04f 0000 	mov.w	r0, #0
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000542:	bf1a      	itte	ne
 8000544:	4619      	movne	r1, r3
 8000546:	4610      	movne	r0, r2
 8000548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800054c:	bf1c      	itt	ne
 800054e:	460b      	movne	r3, r1
 8000550:	4602      	movne	r2, r0
 8000552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000556:	bf06      	itte	eq
 8000558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800055c:	ea91 0f03 	teqeq	r1, r3
 8000560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	bf00      	nop

08000568 <__aeabi_ui2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f04f 0500 	mov.w	r5, #0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e750      	b.n	8000428 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_i2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a0:	bf48      	it	mi
 80005a2:	4240      	negmi	r0, r0
 80005a4:	f04f 0100 	mov.w	r1, #0
 80005a8:	e73e      	b.n	8000428 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_f2d>:
 80005ac:	0042      	lsls	r2, r0, #1
 80005ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ba:	bf1f      	itttt	ne
 80005bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c8:	4770      	bxne	lr
 80005ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ce:	bf08      	it	eq
 80005d0:	4770      	bxeq	lr
 80005d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d6:	bf04      	itt	eq
 80005d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	e71c      	b.n	8000428 <__adddf3+0x138>
 80005ee:	bf00      	nop

080005f0 <__aeabi_ul2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	e00a      	b.n	8000616 <__aeabi_l2d+0x16>

08000600 <__aeabi_l2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060e:	d502      	bpl.n	8000616 <__aeabi_l2d+0x16>
 8000610:	4240      	negs	r0, r0
 8000612:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000616:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000622:	f43f aed8 	beq.w	80003d6 <__adddf3+0xe6>
 8000626:	f04f 0203 	mov.w	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000636:	bf18      	it	ne
 8000638:	3203      	addne	r2, #3
 800063a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	fa00 fc03 	lsl.w	ip, r0, r3
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 fe03 	lsl.w	lr, r1, r3
 800064e:	ea40 000e 	orr.w	r0, r0, lr
 8000652:	fa21 f102 	lsr.w	r1, r1, r2
 8000656:	4414      	add	r4, r2
 8000658:	e6bd      	b.n	80003d6 <__adddf3+0xe6>
 800065a:	bf00      	nop

0800065c <__aeabi_dmul>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066a:	bf1d      	ittte	ne
 800066c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000670:	ea94 0f0c 	teqne	r4, ip
 8000674:	ea95 0f0c 	teqne	r5, ip
 8000678:	f000 f8de 	bleq	8000838 <__aeabi_dmul+0x1dc>
 800067c:	442c      	add	r4, r5
 800067e:	ea81 0603 	eor.w	r6, r1, r3
 8000682:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000686:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068e:	bf18      	it	ne
 8000690:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069c:	d038      	beq.n	8000710 <__aeabi_dmul+0xb4>
 800069e:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a2:	f04f 0500 	mov.w	r5, #0
 80006a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b2:	f04f 0600 	mov.w	r6, #0
 80006b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ba:	f09c 0f00 	teq	ip, #0
 80006be:	bf18      	it	ne
 80006c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d0:	d204      	bcs.n	80006dc <__aeabi_dmul+0x80>
 80006d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d6:	416d      	adcs	r5, r5
 80006d8:	eb46 0606 	adc.w	r6, r6, r6
 80006dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f4:	bf88      	it	hi
 80006f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fa:	d81e      	bhi.n	800073a <__aeabi_dmul+0xde>
 80006fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000700:	bf08      	it	eq
 8000702:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000714:	ea46 0101 	orr.w	r1, r6, r1
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000724:	bfc2      	ittt	gt
 8000726:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072e:	bd70      	popgt	{r4, r5, r6, pc}
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f04f 0e00 	mov.w	lr, #0
 8000738:	3c01      	subs	r4, #1
 800073a:	f300 80ab 	bgt.w	8000894 <__aeabi_dmul+0x238>
 800073e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000742:	bfde      	ittt	le
 8000744:	2000      	movle	r0, #0
 8000746:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074a:	bd70      	pople	{r4, r5, r6, pc}
 800074c:	f1c4 0400 	rsb	r4, r4, #0
 8000750:	3c20      	subs	r4, #32
 8000752:	da35      	bge.n	80007c0 <__aeabi_dmul+0x164>
 8000754:	340c      	adds	r4, #12
 8000756:	dc1b      	bgt.n	8000790 <__aeabi_dmul+0x134>
 8000758:	f104 0414 	add.w	r4, r4, #20
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f305 	lsl.w	r3, r0, r5
 8000764:	fa20 f004 	lsr.w	r0, r0, r4
 8000768:	fa01 f205 	lsl.w	r2, r1, r5
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	fa21 f604 	lsr.w	r6, r1, r4
 8000780:	eb42 0106 	adc.w	r1, r2, r6
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 040c 	rsb	r4, r4, #12
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f304 	lsl.w	r3, r0, r4
 800079c:	fa20 f005 	lsr.w	r0, r0, r5
 80007a0:	fa01 f204 	lsl.w	r2, r1, r4
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b0:	f141 0100 	adc.w	r1, r1, #0
 80007b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b8:	bf08      	it	eq
 80007ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f205 	lsl.w	r2, r0, r5
 80007c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007cc:	fa20 f304 	lsr.w	r3, r0, r4
 80007d0:	fa01 f205 	lsl.w	r2, r1, r5
 80007d4:	ea43 0302 	orr.w	r3, r3, r2
 80007d8:	fa21 f004 	lsr.w	r0, r1, r4
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	fa21 f204 	lsr.w	r2, r1, r4
 80007e4:	ea20 0002 	bic.w	r0, r0, r2
 80007e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f0:	bf08      	it	eq
 80007f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f094 0f00 	teq	r4, #0
 80007fc:	d10f      	bne.n	800081e <__aeabi_dmul+0x1c2>
 80007fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000802:	0040      	lsls	r0, r0, #1
 8000804:	eb41 0101 	adc.w	r1, r1, r1
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3c01      	subeq	r4, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1a6>
 8000812:	ea41 0106 	orr.w	r1, r1, r6
 8000816:	f095 0f00 	teq	r5, #0
 800081a:	bf18      	it	ne
 800081c:	4770      	bxne	lr
 800081e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	eb43 0303 	adc.w	r3, r3, r3
 8000828:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800082c:	bf08      	it	eq
 800082e:	3d01      	subeq	r5, #1
 8000830:	d0f7      	beq.n	8000822 <__aeabi_dmul+0x1c6>
 8000832:	ea43 0306 	orr.w	r3, r3, r6
 8000836:	4770      	bx	lr
 8000838:	ea94 0f0c 	teq	r4, ip
 800083c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000840:	bf18      	it	ne
 8000842:	ea95 0f0c 	teqne	r5, ip
 8000846:	d00c      	beq.n	8000862 <__aeabi_dmul+0x206>
 8000848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084c:	bf18      	it	ne
 800084e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000852:	d1d1      	bne.n	80007f8 <__aeabi_dmul+0x19c>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000866:	bf06      	itte	eq
 8000868:	4610      	moveq	r0, r2
 800086a:	4619      	moveq	r1, r3
 800086c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000870:	d019      	beq.n	80008a6 <__aeabi_dmul+0x24a>
 8000872:	ea94 0f0c 	teq	r4, ip
 8000876:	d102      	bne.n	800087e <__aeabi_dmul+0x222>
 8000878:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800087c:	d113      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 800087e:	ea95 0f0c 	teq	r5, ip
 8000882:	d105      	bne.n	8000890 <__aeabi_dmul+0x234>
 8000884:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000888:	bf1c      	itt	ne
 800088a:	4610      	movne	r0, r2
 800088c:	4619      	movne	r1, r3
 800088e:	d10a      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a0:	f04f 0000 	mov.w	r0, #0
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <__aeabi_ddiv>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008be:	bf1d      	ittte	ne
 80008c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c4:	ea94 0f0c 	teqne	r4, ip
 80008c8:	ea95 0f0c 	teqne	r5, ip
 80008cc:	f000 f8a7 	bleq	8000a1e <__aeabi_ddiv+0x16e>
 80008d0:	eba4 0405 	sub.w	r4, r4, r5
 80008d4:	ea81 0e03 	eor.w	lr, r1, r3
 80008d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e0:	f000 8088 	beq.w	80009f4 <__aeabi_ddiv+0x144>
 80008e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000900:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000904:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000908:	429d      	cmp	r5, r3
 800090a:	bf08      	it	eq
 800090c:	4296      	cmpeq	r6, r2
 800090e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000912:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000916:	d202      	bcs.n	800091e <__aeabi_ddiv+0x6e>
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	1ab6      	subs	r6, r6, r2
 8000920:	eb65 0503 	sbc.w	r5, r5, r3
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 000c 	orrcs.w	r0, r0, ip
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	ebb6 0e02 	subs.w	lr, r6, r2
 800097e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000982:	bf22      	ittt	cs
 8000984:	1ab6      	subcs	r6, r6, r2
 8000986:	4675      	movcs	r5, lr
 8000988:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800098c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000990:	d018      	beq.n	80009c4 <__aeabi_ddiv+0x114>
 8000992:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000996:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ae:	d1c0      	bne.n	8000932 <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	d10b      	bne.n	80009ce <__aeabi_ddiv+0x11e>
 80009b6:	ea41 0100 	orr.w	r1, r1, r0
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c2:	e7b6      	b.n	8000932 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	bf04      	itt	eq
 80009ca:	4301      	orreq	r1, r0
 80009cc:	2000      	moveq	r0, #0
 80009ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d2:	bf88      	it	hi
 80009d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d8:	f63f aeaf 	bhi.w	800073a <__aeabi_dmul+0xde>
 80009dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e0:	bf04      	itt	eq
 80009e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ea:	f150 0000 	adcs.w	r0, r0, #0
 80009ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a00:	bfc2      	ittt	gt
 8000a02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a10:	f04f 0e00 	mov.w	lr, #0
 8000a14:	3c01      	subs	r4, #1
 8000a16:	e690      	b.n	800073a <__aeabi_dmul+0xde>
 8000a18:	ea45 0e06 	orr.w	lr, r5, r6
 8000a1c:	e68d      	b.n	800073a <__aeabi_dmul+0xde>
 8000a1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	bf08      	it	eq
 8000a28:	ea95 0f0c 	teqeq	r5, ip
 8000a2c:	f43f af3b 	beq.w	80008a6 <__aeabi_dmul+0x24a>
 8000a30:	ea94 0f0c 	teq	r4, ip
 8000a34:	d10a      	bne.n	8000a4c <__aeabi_ddiv+0x19c>
 8000a36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3a:	f47f af34 	bne.w	80008a6 <__aeabi_dmul+0x24a>
 8000a3e:	ea95 0f0c 	teq	r5, ip
 8000a42:	f47f af25 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e72c      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a4c:	ea95 0f0c 	teq	r5, ip
 8000a50:	d106      	bne.n	8000a60 <__aeabi_ddiv+0x1b0>
 8000a52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a56:	f43f aefd 	beq.w	8000854 <__aeabi_dmul+0x1f8>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e722      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6a:	f47f aec5 	bne.w	80007f8 <__aeabi_dmul+0x19c>
 8000a6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a72:	f47f af0d 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7a:	f47f aeeb 	bne.w	8000854 <__aeabi_dmul+0x1f8>
 8000a7e:	e712      	b.n	80008a6 <__aeabi_dmul+0x24a>

08000a80 <__gedf2>:
 8000a80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a84:	e006      	b.n	8000a94 <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__ledf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	e002      	b.n	8000a94 <__cmpdf2+0x4>
 8000a8e:	bf00      	nop

08000a90 <__cmpdf2>:
 8000a90:	f04f 0c01 	mov.w	ip, #1
 8000a94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aaa:	d01b      	beq.n	8000ae4 <__cmpdf2+0x54>
 8000aac:	b001      	add	sp, #4
 8000aae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ab2:	bf0c      	ite	eq
 8000ab4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab8:	ea91 0f03 	teqne	r1, r3
 8000abc:	bf02      	ittt	eq
 8000abe:	ea90 0f02 	teqeq	r0, r2
 8000ac2:	2000      	moveq	r0, #0
 8000ac4:	4770      	bxeq	lr
 8000ac6:	f110 0f00 	cmn.w	r0, #0
 8000aca:	ea91 0f03 	teq	r1, r3
 8000ace:	bf58      	it	pl
 8000ad0:	4299      	cmppl	r1, r3
 8000ad2:	bf08      	it	eq
 8000ad4:	4290      	cmpeq	r0, r2
 8000ad6:	bf2c      	ite	cs
 8000ad8:	17d8      	asrcs	r0, r3, #31
 8000ada:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ade:	f040 0001 	orr.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__cmpdf2+0x64>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d107      	bne.n	8000b04 <__cmpdf2+0x74>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d1d6      	bne.n	8000aac <__cmpdf2+0x1c>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d0d3      	beq.n	8000aac <__cmpdf2+0x1c>
 8000b04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdrcmple>:
 8000b0c:	4684      	mov	ip, r0
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4662      	mov	r2, ip
 8000b12:	468c      	mov	ip, r1
 8000b14:	4619      	mov	r1, r3
 8000b16:	4663      	mov	r3, ip
 8000b18:	e000      	b.n	8000b1c <__aeabi_cdcmpeq>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdcmpeq>:
 8000b1c:	b501      	push	{r0, lr}
 8000b1e:	f7ff ffb7 	bl	8000a90 <__cmpdf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	bf48      	it	mi
 8000b26:	f110 0f00 	cmnmi.w	r0, #0
 8000b2a:	bd01      	pop	{r0, pc}

08000b2c <__aeabi_dcmpeq>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff fff4 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b34:	bf0c      	ite	eq
 8000b36:	2001      	moveq	r0, #1
 8000b38:	2000      	movne	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmplt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffea 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmple>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffe0 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpge>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffce 	bl	8000b0c <__aeabi_cdrcmple>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpgt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffc4 	bl	8000b0c <__aeabi_cdrcmple>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c94:	f000 b9a4 	b.w	8000fe0 <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f83c 	bl	8000d1c <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_d2lz>:
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	460d      	mov	r5, r1
 8000cba:	f7ff ff41 	bl	8000b40 <__aeabi_dcmplt>
 8000cbe:	b928      	cbnz	r0, 8000ccc <__aeabi_d2lz+0x1c>
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	4629      	mov	r1, r5
 8000cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc8:	f000 b80a 	b.w	8000ce0 <__aeabi_d2ulz>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cd2:	f000 f805 	bl	8000ce0 <__aeabi_d2ulz>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	bd38      	pop	{r3, r4, r5, pc}
 8000cde:	bf00      	nop

08000ce0 <__aeabi_d2ulz>:
 8000ce0:	b5d0      	push	{r4, r6, r7, lr}
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__aeabi_d2ulz+0x34>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	4606      	mov	r6, r0
 8000ce8:	460f      	mov	r7, r1
 8000cea:	f7ff fcb7 	bl	800065c <__aeabi_dmul>
 8000cee:	f000 f979 	bl	8000fe4 <__aeabi_d2uiz>
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	f7ff fc38 	bl	8000568 <__aeabi_ui2d>
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <__aeabi_d2ulz+0x38>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f7ff fcae 	bl	800065c <__aeabi_dmul>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	4630      	mov	r0, r6
 8000d06:	4639      	mov	r1, r7
 8000d08:	f7ff faf0 	bl	80002ec <__aeabi_dsub>
 8000d0c:	f000 f96a 	bl	8000fe4 <__aeabi_d2uiz>
 8000d10:	4621      	mov	r1, r4
 8000d12:	bdd0      	pop	{r4, r6, r7, pc}
 8000d14:	3df00000 	.word	0x3df00000
 8000d18:	41f00000 	.word	0x41f00000

08000d1c <__udivmoddi4>:
 8000d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d20:	9d08      	ldr	r5, [sp, #32]
 8000d22:	4604      	mov	r4, r0
 8000d24:	468c      	mov	ip, r1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 8083 	bne.w	8000e32 <__udivmoddi4+0x116>
 8000d2c:	428a      	cmp	r2, r1
 8000d2e:	4617      	mov	r7, r2
 8000d30:	d947      	bls.n	8000dc2 <__udivmoddi4+0xa6>
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	b142      	cbz	r2, 8000d4a <__udivmoddi4+0x2e>
 8000d38:	f1c2 0020 	rsb	r0, r2, #32
 8000d3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d40:	4091      	lsls	r1, r2
 8000d42:	4097      	lsls	r7, r2
 8000d44:	ea40 0c01 	orr.w	ip, r0, r1
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d4e:	0c23      	lsrs	r3, r4, #16
 8000d50:	fbbc f6f8 	udiv	r6, ip, r8
 8000d54:	fa1f fe87 	uxth.w	lr, r7
 8000d58:	fb08 c116 	mls	r1, r8, r6, ip
 8000d5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d60:	fb06 f10e 	mul.w	r1, r6, lr
 8000d64:	4299      	cmp	r1, r3
 8000d66:	d909      	bls.n	8000d7c <__udivmoddi4+0x60>
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d6e:	f080 8119 	bcs.w	8000fa4 <__udivmoddi4+0x288>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 8116 	bls.w	8000fa4 <__udivmoddi4+0x288>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	443b      	add	r3, r7
 8000d7c:	1a5b      	subs	r3, r3, r1
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3310 	mls	r3, r8, r0, r3
 8000d88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x8c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d9a:	f080 8105 	bcs.w	8000fa8 <__udivmoddi4+0x28c>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f240 8102 	bls.w	8000fa8 <__udivmoddi4+0x28c>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dac:	eba4 040e 	sub.w	r4, r4, lr
 8000db0:	2600      	movs	r6, #0
 8000db2:	b11d      	cbz	r5, 8000dbc <__udivmoddi4+0xa0>
 8000db4:	40d4      	lsrs	r4, r2
 8000db6:	2300      	movs	r3, #0
 8000db8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	b902      	cbnz	r2, 8000dc6 <__udivmoddi4+0xaa>
 8000dc4:	deff      	udf	#255	; 0xff
 8000dc6:	fab2 f282 	clz	r2, r2
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	d150      	bne.n	8000e70 <__udivmoddi4+0x154>
 8000dce:	1bcb      	subs	r3, r1, r7
 8000dd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd4:	fa1f f887 	uxth.w	r8, r7
 8000dd8:	2601      	movs	r6, #1
 8000dda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dde:	0c21      	lsrs	r1, r4, #16
 8000de0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de8:	fb08 f30c 	mul.w	r3, r8, ip
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0xe4>
 8000df0:	1879      	adds	r1, r7, r1
 8000df2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0xe2>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	f200 80e9 	bhi.w	8000fd0 <__udivmoddi4+0x2b4>
 8000dfe:	4684      	mov	ip, r0
 8000e00:	1ac9      	subs	r1, r1, r3
 8000e02:	b2a3      	uxth	r3, r4
 8000e04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e10:	fb08 f800 	mul.w	r8, r8, r0
 8000e14:	45a0      	cmp	r8, r4
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0x10c>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0x10a>
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	f200 80d9 	bhi.w	8000fd8 <__udivmoddi4+0x2bc>
 8000e26:	4618      	mov	r0, r3
 8000e28:	eba4 0408 	sub.w	r4, r4, r8
 8000e2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e30:	e7bf      	b.n	8000db2 <__udivmoddi4+0x96>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d909      	bls.n	8000e4a <__udivmoddi4+0x12e>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	f000 80b1 	beq.w	8000f9e <__udivmoddi4+0x282>
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e42:	4630      	mov	r0, r6
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	fab3 f683 	clz	r6, r3
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	d14a      	bne.n	8000ee8 <__udivmoddi4+0x1cc>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d302      	bcc.n	8000e5c <__udivmoddi4+0x140>
 8000e56:	4282      	cmp	r2, r0
 8000e58:	f200 80b8 	bhi.w	8000fcc <__udivmoddi4+0x2b0>
 8000e5c:	1a84      	subs	r4, r0, r2
 8000e5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000e62:	2001      	movs	r0, #1
 8000e64:	468c      	mov	ip, r1
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d0a8      	beq.n	8000dbc <__udivmoddi4+0xa0>
 8000e6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0xa0>
 8000e70:	f1c2 0320 	rsb	r3, r2, #32
 8000e74:	fa20 f603 	lsr.w	r6, r0, r3
 8000e78:	4097      	lsls	r7, r2
 8000e7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e82:	40d9      	lsrs	r1, r3
 8000e84:	4330      	orrs	r0, r6
 8000e86:	0c03      	lsrs	r3, r0, #16
 8000e88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e8c:	fa1f f887 	uxth.w	r8, r7
 8000e90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e98:	fb06 f108 	mul.w	r1, r6, r8
 8000e9c:	4299      	cmp	r1, r3
 8000e9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea2:	d909      	bls.n	8000eb8 <__udivmoddi4+0x19c>
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eaa:	f080 808d 	bcs.w	8000fc8 <__udivmoddi4+0x2ac>
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	f240 808a 	bls.w	8000fc8 <__udivmoddi4+0x2ac>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	443b      	add	r3, r7
 8000eb8:	1a5b      	subs	r3, r3, r1
 8000eba:	b281      	uxth	r1, r0
 8000ebc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb00 f308 	mul.w	r3, r0, r8
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d907      	bls.n	8000ee0 <__udivmoddi4+0x1c4>
 8000ed0:	1879      	adds	r1, r7, r1
 8000ed2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ed6:	d273      	bcs.n	8000fc0 <__udivmoddi4+0x2a4>
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d971      	bls.n	8000fc0 <__udivmoddi4+0x2a4>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4439      	add	r1, r7
 8000ee0:	1acb      	subs	r3, r1, r3
 8000ee2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ee6:	e778      	b.n	8000dda <__udivmoddi4+0xbe>
 8000ee8:	f1c6 0c20 	rsb	ip, r6, #32
 8000eec:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ef4:	431c      	orrs	r4, r3
 8000ef6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000efa:	fa01 f306 	lsl.w	r3, r1, r6
 8000efe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f06:	431f      	orrs	r7, r3
 8000f08:	0c3b      	lsrs	r3, r7, #16
 8000f0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0e:	fa1f f884 	uxth.w	r8, r4
 8000f12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f1e:	458a      	cmp	sl, r1
 8000f20:	fa02 f206 	lsl.w	r2, r2, r6
 8000f24:	fa00 f306 	lsl.w	r3, r0, r6
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x220>
 8000f2a:	1861      	adds	r1, r4, r1
 8000f2c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f30:	d248      	bcs.n	8000fc4 <__udivmoddi4+0x2a8>
 8000f32:	458a      	cmp	sl, r1
 8000f34:	d946      	bls.n	8000fc4 <__udivmoddi4+0x2a8>
 8000f36:	f1a9 0902 	sub.w	r9, r9, #2
 8000f3a:	4421      	add	r1, r4
 8000f3c:	eba1 010a 	sub.w	r1, r1, sl
 8000f40:	b2bf      	uxth	r7, r7
 8000f42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f4e:	fb00 f808 	mul.w	r8, r0, r8
 8000f52:	45b8      	cmp	r8, r7
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x24a>
 8000f56:	19e7      	adds	r7, r4, r7
 8000f58:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f5c:	d22e      	bcs.n	8000fbc <__udivmoddi4+0x2a0>
 8000f5e:	45b8      	cmp	r8, r7
 8000f60:	d92c      	bls.n	8000fbc <__udivmoddi4+0x2a0>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4427      	add	r7, r4
 8000f66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f6a:	eba7 0708 	sub.w	r7, r7, r8
 8000f6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000f72:	454f      	cmp	r7, r9
 8000f74:	46c6      	mov	lr, r8
 8000f76:	4649      	mov	r1, r9
 8000f78:	d31a      	bcc.n	8000fb0 <__udivmoddi4+0x294>
 8000f7a:	d017      	beq.n	8000fac <__udivmoddi4+0x290>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x27a>
 8000f7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000f82:	eb67 0701 	sbc.w	r7, r7, r1
 8000f86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f8a:	40f2      	lsrs	r2, r6
 8000f8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f90:	40f7      	lsrs	r7, r6
 8000f92:	e9c5 2700 	strd	r2, r7, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	462e      	mov	r6, r5
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	e70b      	b.n	8000dbc <__udivmoddi4+0xa0>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	e6e9      	b.n	8000d7c <__udivmoddi4+0x60>
 8000fa8:	4618      	mov	r0, r3
 8000faa:	e6fd      	b.n	8000da8 <__udivmoddi4+0x8c>
 8000fac:	4543      	cmp	r3, r8
 8000fae:	d2e5      	bcs.n	8000f7c <__udivmoddi4+0x260>
 8000fb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000fb8:	3801      	subs	r0, #1
 8000fba:	e7df      	b.n	8000f7c <__udivmoddi4+0x260>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e7d2      	b.n	8000f66 <__udivmoddi4+0x24a>
 8000fc0:	4660      	mov	r0, ip
 8000fc2:	e78d      	b.n	8000ee0 <__udivmoddi4+0x1c4>
 8000fc4:	4681      	mov	r9, r0
 8000fc6:	e7b9      	b.n	8000f3c <__udivmoddi4+0x220>
 8000fc8:	4666      	mov	r6, ip
 8000fca:	e775      	b.n	8000eb8 <__udivmoddi4+0x19c>
 8000fcc:	4630      	mov	r0, r6
 8000fce:	e74a      	b.n	8000e66 <__udivmoddi4+0x14a>
 8000fd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd4:	4439      	add	r1, r7
 8000fd6:	e713      	b.n	8000e00 <__udivmoddi4+0xe4>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	443c      	add	r4, r7
 8000fdc:	e724      	b.n	8000e28 <__udivmoddi4+0x10c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2uiz>:
 8000fe4:	004a      	lsls	r2, r1, #1
 8000fe6:	d211      	bcs.n	800100c <__aeabi_d2uiz+0x28>
 8000fe8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fec:	d211      	bcs.n	8001012 <__aeabi_d2uiz+0x2e>
 8000fee:	d50d      	bpl.n	800100c <__aeabi_d2uiz+0x28>
 8000ff0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ff4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ff8:	d40e      	bmi.n	8001018 <__aeabi_d2uiz+0x34>
 8000ffa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001002:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001006:	fa23 f002 	lsr.w	r0, r3, r2
 800100a:	4770      	bx	lr
 800100c:	f04f 0000 	mov.w	r0, #0
 8001010:	4770      	bx	lr
 8001012:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001016:	d102      	bne.n	800101e <__aeabi_d2uiz+0x3a>
 8001018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800101c:	4770      	bx	lr
 800101e:	f04f 0000 	mov.w	r0, #0
 8001022:	4770      	bx	lr

08001024 <app_main_init>:

int8_t g_person_score = 0;

//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~arena
void app_main_init()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af02      	add	r7, sp, #8
	NT35510_Init();
 800102a:	f000 fd23 	bl	8001a74 <NT35510_Init>

	LCD_ClearScreen(0x7FFFU);
 800102e:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8001032:	f000 fba5 	bl	8001780 <LCD_ClearScreen>
	LCD_SetDirection(HORIZONTAL_RIGHT);
 8001036:	2003      	movs	r0, #3
 8001038:	f000 fb4a 	bl	80016d0 <LCD_SetDirection>
	LCD_ClearScreen(0xffffU);
 800103c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001040:	f000 fb9e 	bl	8001780 <LCD_ClearScreen>

	// Draw frame:
	LCD_DrawLine(10, 10, 790, 10, 0xF800U,4);		// up
 8001044:	2304      	movs	r3, #4
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	230a      	movs	r3, #10
 8001050:	f240 3216 	movw	r2, #790	; 0x316
 8001054:	210a      	movs	r1, #10
 8001056:	200a      	movs	r0, #10
 8001058:	f000 fbe5 	bl	8001826 <LCD_DrawLine>
	LCD_DrawLine(10, 10, 10, 470, 0x07E0U,4);		// left
 800105c:	2304      	movs	r3, #4
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800106a:	220a      	movs	r2, #10
 800106c:	210a      	movs	r1, #10
 800106e:	200a      	movs	r0, #10
 8001070:	f000 fbd9 	bl	8001826 <LCD_DrawLine>
	LCD_DrawLine(790, 10, 790, 470, 0x001FU,4);		// right
 8001074:	2304      	movs	r3, #4
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	231f      	movs	r3, #31
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8001080:	f240 3216 	movw	r2, #790	; 0x316
 8001084:	210a      	movs	r1, #10
 8001086:	f240 3016 	movw	r0, #790	; 0x316
 800108a:	f000 fbcc 	bl	8001826 <LCD_DrawLine>
	LCD_DrawLine(10, 470, 790, 470, 0xF800U,4);		// down
 800108e:	2304      	movs	r3, #4
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800109c:	f240 3216 	movw	r2, #790	; 0x316
 80010a0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80010a4:	200a      	movs	r0, #10
 80010a6:	f000 fbbe 	bl	8001826 <LCD_DrawLine>


	//////////////////////////////////////////////////////////
	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
	OV7670_RST_LOW;
 80010aa:	2200      	movs	r2, #0
 80010ac:	2104      	movs	r1, #4
 80010ae:	4815      	ldr	r0, [pc, #84]	; (8001104 <app_main_init+0xe0>)
 80010b0:	f002 fd46 	bl	8003b40 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80010b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010b8:	f001 ffdc 	bl	8003074 <HAL_Delay>
	OV7670_RST_HIGH;
 80010bc:	2201      	movs	r2, #1
 80010be:	2104      	movs	r1, #4
 80010c0:	4810      	ldr	r0, [pc, #64]	; (8001104 <app_main_init+0xe0>)
 80010c2:	f002 fd3d 	bl	8003b40 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80010c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010ca:	f001 ffd3 	bl	8003074 <HAL_Delay>

	///////////
	setMode(QVGA_RGB565);
 80010ce:	2002      	movs	r0, #2
 80010d0:	f001 fa69 	bl	80025a6 <setMode>
	HAL_Delay(300);
 80010d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010d8:	f001 ffcc 	bl	8003074 <HAL_Delay>
	////////////

	TIM1->DIER |= TIM_DIER_TDE;// | TIM_DIER_TDE TIM_DIER_UDE;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <app_main_init+0xe4>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	4a09      	ldr	r2, [pc, #36]	; (8001108 <app_main_init+0xe4>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e6:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start(&htim1);
 80010e8:	4808      	ldr	r0, [pc, #32]	; (800110c <app_main_init+0xe8>)
 80010ea:	f006 f869 	bl	80071c0 <HAL_TIM_Base_Start>

	HAL_NVIC_SetPriority(OV7670_VSYNC_EXTI_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2007      	movs	r0, #7
 80010f4:	f002 f8e1 	bl	80032ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7670_VSYNC_EXTI_IRQn);
 80010f8:	2007      	movs	r0, #7
 80010fa:	f002 f8fa 	bl	80032f2 <HAL_NVIC_EnableIRQ>
	//////////////////////////////////////////////////////////
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021400 	.word	0x40021400
 8001108:	40010000 	.word	0x40010000
 800110c:	2004a368 	.word	0x2004a368

08001110 <app_main_loop>:

//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~_Min_Stack_Size
void app_main_loop()
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	; 0x30
 8001114:	af02      	add	r7, sp, #8
	uint8_t buff[10] = {0};
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	809a      	strh	r2, [r3, #4]
	//uint8_t i2cDatToSnd[5] = {0};
	//uint8_t i2cDatToRec[5] = {0};
	uint32_t milis = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
	uint32_t milis2 = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]


	LCD_SetDirection(VERTICAL_UP);
 800112c:	2000      	movs	r0, #0
 800112e:	f000 facf 	bl	80016d0 <LCD_SetDirection>
	LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
 8001132:	f240 1303 	movw	r3, #259	; 0x103
 8001136:	f240 1253 	movw	r2, #339	; 0x153
 800113a:	2114      	movs	r1, #20
 800113c:	2014      	movs	r0, #20
 800113e:	f000 fa5f 	bl	8001600 <LCD_SetWindow>
	setup();
 8001142:	f00f f927 	bl	8010394 <setup>

	int j,z,k = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]

	while(1)
	{
		loop();
 800114a:	f00f fa15 	bl	8010578 <loop>
		sprintf(buff,"%d",g_person_score);
 800114e:	4b4b      	ldr	r3, [pc, #300]	; (800127c <app_main_loop+0x16c>)
 8001150:	f993 3000 	ldrsb.w	r3, [r3]
 8001154:	461a      	mov	r2, r3
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4949      	ldr	r1, [pc, #292]	; (8001280 <app_main_loop+0x170>)
 800115a:	4618      	mov	r0, r3
 800115c:	f024 fb46 	bl	80257ec <siprintf>
		LCD_PrintStr(20, 20, 0xffff, 0x0000, buff, 5);
 8001160:	2305      	movs	r3, #5
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2300      	movs	r3, #0
 800116a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116e:	2114      	movs	r1, #20
 8001170:	2014      	movs	r0, #20
 8001172:	f000 fc49 	bl	8001a08 <LCD_PrintStr>

		//uart_tx_process();
		//uart_rx_process();


		LCD_SetWindow(20 , 280, 20+96-1, 280+96-1); // 320 x 240
 8001176:	f240 1377 	movw	r3, #375	; 0x177
 800117a:	2273      	movs	r2, #115	; 0x73
 800117c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001180:	2014      	movs	r0, #20
 8001182:	f000 fa3d 	bl	8001600 <LCD_SetWindow>
		for(j = 72; j <= 72 + 96; j++)
 8001186:	2348      	movs	r3, #72	; 0x48
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	e072      	b.n	8001272 <app_main_loop+0x162>
		{
			for(z = 112*2; z < 112*2 + 96*2; z+=2)
 800118c:	23e0      	movs	r3, #224	; 0xe0
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	e068      	b.n	8001264 <app_main_loop+0x154>
			{
				uint8_t gray =
						(((cam_buff[(j-1)*320*2+z] & 0xF8U) >> 3) +	//red
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	1e5a      	subs	r2, r3, #1
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	01db      	lsls	r3, r3, #7
 800119e:	461a      	mov	r2, r3
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a37      	ldr	r2, [pc, #220]	; (8001284 <app_main_loop+0x174>)
 80011a6:	5cd3      	ldrb	r3, [r2, r3]
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4618      	mov	r0, r3
								(((cam_buff[(j-1)*320*2+z] & 0x07U) << 3) | ((cam_buff[(j-1)*320*2+z+1] & 0xC0U) >> 6)) +	//green
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	1e5a      	subs	r2, r3, #1
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	01db      	lsls	r3, r3, #7
 80011ba:	461a      	mov	r2, r3
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	4413      	add	r3, r2
 80011c0:	4a30      	ldr	r2, [pc, #192]	; (8001284 <app_main_loop+0x174>)
 80011c2:	5cd3      	ldrb	r3, [r2, r3]
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	f003 0138 	and.w	r1, r3, #56	; 0x38
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	01db      	lsls	r3, r3, #7
 80011d6:	461a      	mov	r2, r3
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	4413      	add	r3, r2
 80011dc:	3301      	adds	r3, #1
 80011de:	4a29      	ldr	r2, [pc, #164]	; (8001284 <app_main_loop+0x174>)
 80011e0:	5cd3      	ldrb	r3, [r2, r3]
 80011e2:	099b      	lsrs	r3, r3, #6
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	430b      	orrs	r3, r1
						(((cam_buff[(j-1)*320*2+z] & 0xF8U) >> 3) +	//red
 80011e8:	18c1      	adds	r1, r0, r3
								((cam_buff[(j-1)*320*2+z+1] & 0x1FU))	//blue
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	1e5a      	subs	r2, r3, #1
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	01db      	lsls	r3, r3, #7
 80011f6:	461a      	mov	r2, r3
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	4413      	add	r3, r2
 80011fc:	3301      	adds	r3, #1
 80011fe:	4a21      	ldr	r2, [pc, #132]	; (8001284 <app_main_loop+0x174>)
 8001200:	5cd3      	ldrb	r3, [r2, r3]
 8001202:	f003 031f 	and.w	r3, r3, #31
								(((cam_buff[(j-1)*320*2+z] & 0x07U) << 3) | ((cam_buff[(j-1)*320*2+z+1] & 0xC0U) >> 6)) +	//green
 8001206:	440b      	add	r3, r1
						) / 3;
 8001208:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <app_main_loop+0x178>)
 800120a:	fba2 2303 	umull	r2, r3, r2, r3
 800120e:	085b      	lsrs	r3, r3, #1
				uint8_t gray =
 8001210:	74fb      	strb	r3, [r7, #19]

				uint16_t graysc =
						(((gray << 11) & 0xF800U) |
 8001212:	7cfb      	ldrb	r3, [r7, #19]
 8001214:	b29b      	uxth	r3, r3
 8001216:	02db      	lsls	r3, r3, #11
 8001218:	b29a      	uxth	r2, r3
								((gray << 6) & 0x07C0U) |
 800121a:	7cfb      	ldrb	r3, [r7, #19]
 800121c:	b29b      	uxth	r3, r3
 800121e:	019b      	lsls	r3, r3, #6
 8001220:	b29b      	uxth	r3, r3
 8001222:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001226:	b29b      	uxth	r3, r3
						(((gray << 11) & 0xF800U) |
 8001228:	4313      	orrs	r3, r2
 800122a:	b29a      	uxth	r2, r3
								(gray & 0x001FU));
 800122c:	7cfb      	ldrb	r3, [r7, #19]
 800122e:	b29b      	uxth	r3, r3
 8001230:	f003 031f 	and.w	r3, r3, #31
 8001234:	b29b      	uxth	r3, r3
				uint16_t graysc =
 8001236:	4313      	orrs	r3, r2
 8001238:	823b      	strh	r3, [r7, #16]

				g_cam_gray_frame[k] = gray;
 800123a:	4a14      	ldr	r2, [pc, #80]	; (800128c <app_main_loop+0x17c>)
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	4413      	add	r3, r2
 8001240:	7cfa      	ldrb	r2, [r7, #19]
 8001242:	701a      	strb	r2, [r3, #0]
				k++;
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	3301      	adds	r3, #1
 8001248:	61fb      	str	r3, [r7, #28]
				if(k > OV7670_GRAY_SIZE)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 8001250:	dd01      	ble.n	8001256 <app_main_loop+0x146>
					k = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]

				FSMC_WR_DAT(graysc);
 8001256:	8a3b      	ldrh	r3, [r7, #16]
 8001258:	4618      	mov	r0, r3
 800125a:	f000 f9bf 	bl	80015dc <FSMC_WR_DAT>
			for(z = 112*2; z < 112*2 + 96*2; z+=2)
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	3302      	adds	r3, #2
 8001262:	623b      	str	r3, [r7, #32]
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 800126a:	db92      	blt.n	8001192 <app_main_loop+0x82>
		for(j = 72; j <= 72 + 96; j++)
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	3301      	adds	r3, #1
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	2ba8      	cmp	r3, #168	; 0xa8
 8001276:	dd89      	ble.n	800118c <app_main_loop+0x7c>
		loop();
 8001278:	e767      	b.n	800114a <app_main_loop+0x3a>
 800127a:	bf00      	nop
 800127c:	20027f24 	.word	0x20027f24
 8001280:	080263a0 	.word	0x080263a0
 8001284:	200000a0 	.word	0x200000a0
 8001288:	aaaaaaab 	.word	0xaaaaaaab
 800128c:	20025b20 	.word	0x20025b20

08001290 <HAL_GPIO_EXTI_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == OV7670_VSYNC_Pin)
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d102      	bne.n	80012a6 <HAL_GPIO_EXTI_Callback+0x16>
		EXTI1_VSYNC_Callback();
 80012a0:	f000 f838 	bl	8001314 <EXTI1_VSYNC_Callback>
	else if(GPIO_Pin == OV7670_HREF_Pin)
		EXTI0_HREF_Callback();
}
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_EXTI_Callback+0x20>
	else if(GPIO_Pin == OV7670_HREF_Pin)
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d101      	bne.n	80012b0 <HAL_GPIO_EXTI_Callback+0x20>
		EXTI0_HREF_Callback();
 80012ac:	f000 f804 	bl	80012b8 <EXTI0_HREF_Callback>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <EXTI0_HREF_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI0_HREF_Callback()
{	// Falling edge
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	HAL_DMA_Abort(&hdma_tim1_trig);
 80012bc:	4810      	ldr	r0, [pc, #64]	; (8001300 <EXTI0_HREF_Callback+0x48>)
 80012be:	f002 f92a 	bl	8003516 <HAL_DMA_Abort>
	HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)(cam_buff + g_offset), 640);
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <EXTI0_HREF_Callback+0x4c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <EXTI0_HREF_Callback+0x50>)
 80012c8:	4413      	add	r3, r2
 80012ca:	461a      	mov	r2, r3
 80012cc:	f44f 7320 	mov.w	r3, #640	; 0x280
 80012d0:	490e      	ldr	r1, [pc, #56]	; (800130c <EXTI0_HREF_Callback+0x54>)
 80012d2:	480b      	ldr	r0, [pc, #44]	; (8001300 <EXTI0_HREF_Callback+0x48>)
 80012d4:	f002 f8e4 	bl	80034a0 <HAL_DMA_Start>
	if(cam_buff + g_offset >= cam_buff + OV7670_FRAME_SIZE_QVGA - 640)//38080=38400-320
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <EXTI0_HREF_Callback+0x4c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <EXTI0_HREF_Callback+0x50>)
 80012de:	4413      	add	r3, r2
 80012e0:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <EXTI0_HREF_Callback+0x58>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d303      	bcc.n	80012ee <EXTI0_HREF_Callback+0x36>
	{
		g_offset = 0;
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <EXTI0_HREF_Callback+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		g_offset += 640;
	}
}
 80012ec:	e005      	b.n	80012fa <EXTI0_HREF_Callback+0x42>
		g_offset += 640;
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <EXTI0_HREF_Callback+0x4c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80012f6:	4a03      	ldr	r2, [pc, #12]	; (8001304 <EXTI0_HREF_Callback+0x4c>)
 80012f8:	6013      	str	r3, [r2, #0]
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2004a308 	.word	0x2004a308
 8001304:	20027f20 	.word	0x20027f20
 8001308:	200000a0 	.word	0x200000a0
 800130c:	40020410 	.word	0x40020410
 8001310:	20025620 	.word	0x20025620

08001314 <EXTI1_VSYNC_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI1_VSYNC_Callback()
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	// Rising edge
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800131e:	4818      	ldr	r0, [pc, #96]	; (8001380 <EXTI1_VSYNC_Callback+0x6c>)
 8001320:	f002 fc0e 	bl	8003b40 <HAL_GPIO_WritePin>
	if(OV7670_VSYNC_GPIO_Port->IDR & OV7670_VSYNC_Pin)
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <EXTI1_VSYNC_Callback+0x70>)
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d006      	beq.n	800133e <EXTI1_VSYNC_Callback+0x2a>
	{

		HAL_DMA_Abort(&hdma_tim1_trig);
 8001330:	4815      	ldr	r0, [pc, #84]	; (8001388 <EXTI1_VSYNC_Callback+0x74>)
 8001332:	f002 f8f0 	bl	8003516 <HAL_DMA_Abort>
		HAL_NVIC_DisableIRQ(OV7670_HREF_EXTI_IRQn);
 8001336:	2006      	movs	r0, #6
 8001338:	f001 ffe9 	bl	800330e <HAL_NVIC_DisableIRQ>
 800133c:	e017      	b.n	800136e <EXTI1_VSYNC_Callback+0x5a>
	}
	// Falling edge
	else
	{
		HAL_NVIC_SetPriority(OV7670_HREF_EXTI_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	2006      	movs	r0, #6
 8001344:	f001 ffb9 	bl	80032ba <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(OV7670_HREF_EXTI_IRQn);
 8001348:	2006      	movs	r0, #6
 800134a:	f001 ffd2 	bl	80032f2 <HAL_NVIC_EnableIRQ>
		HAL_DMA_Abort(&hdma_tim1_trig);
 800134e:	480e      	ldr	r0, [pc, #56]	; (8001388 <EXTI1_VSYNC_Callback+0x74>)
 8001350:	f002 f8e1 	bl	8003516 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)cam_buff, 640); // first line
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <EXTI1_VSYNC_Callback+0x78>)
 8001356:	f44f 7320 	mov.w	r3, #640	; 0x280
 800135a:	490d      	ldr	r1, [pc, #52]	; (8001390 <EXTI1_VSYNC_Callback+0x7c>)
 800135c:	480a      	ldr	r0, [pc, #40]	; (8001388 <EXTI1_VSYNC_Callback+0x74>)
 800135e:	f002 f89f 	bl	80034a0 <HAL_DMA_Start>
		g_offset += 640;
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <EXTI1_VSYNC_Callback+0x80>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <EXTI1_VSYNC_Callback+0x80>)
 800136c:	6013      	str	r3, [r2, #0]
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <EXTI1_VSYNC_Callback+0x6c>)
 8001376:	f002 fbe3 	bl	8003b40 <HAL_GPIO_WritePin>
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40020400 	.word	0x40020400
 8001384:	40021800 	.word	0x40021800
 8001388:	2004a308 	.word	0x2004a308
 800138c:	200000a0 	.word	0x200000a0
 8001390:	40020410 	.word	0x40020410
 8001394:	20027f20 	.word	0x20027f20

08001398 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_DMA_Init+0x30>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <MX_DMA_Init+0x30>)
 80013a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_DMA_Init+0x30>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08e      	sub	sp, #56	; 0x38
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
 80013e2:	615a      	str	r2, [r3, #20]
 80013e4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80013e6:	463b      	mov	r3, r7
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	615a      	str	r2, [r3, #20]
 80013f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80013f8:	4b30      	ldr	r3, [pc, #192]	; (80014bc <MX_FSMC_Init+0xf0>)
 80013fa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80013fe:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001400:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <MX_FSMC_Init+0xf0>)
 8001402:	4a2f      	ldr	r2, [pc, #188]	; (80014c0 <MX_FSMC_Init+0xf4>)
 8001404:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001406:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <MX_FSMC_Init+0xf0>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800140c:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <MX_FSMC_Init+0xf0>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001412:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <MX_FSMC_Init+0xf0>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001418:	4b28      	ldr	r3, [pc, #160]	; (80014bc <MX_FSMC_Init+0xf0>)
 800141a:	2210      	movs	r2, #16
 800141c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800141e:	4b27      	ldr	r3, [pc, #156]	; (80014bc <MX_FSMC_Init+0xf0>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <MX_FSMC_Init+0xf0>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800142a:	4b24      	ldr	r3, [pc, #144]	; (80014bc <MX_FSMC_Init+0xf0>)
 800142c:	2200      	movs	r2, #0
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <MX_FSMC_Init+0xf0>)
 8001432:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001438:	4b20      	ldr	r3, [pc, #128]	; (80014bc <MX_FSMC_Init+0xf0>)
 800143a:	2200      	movs	r2, #0
 800143c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800143e:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <MX_FSMC_Init+0xf0>)
 8001440:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001444:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <MX_FSMC_Init+0xf0>)
 8001448:	2200      	movs	r2, #0
 800144a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <MX_FSMC_Init+0xf0>)
 800144e:	2200      	movs	r2, #0
 8001450:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_FSMC_Init+0xf0>)
 8001454:	2200      	movs	r2, #0
 8001456:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_FSMC_Init+0xf0>)
 800145a:	2200      	movs	r2, #0
 800145c:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <MX_FSMC_Init+0xf0>)
 8001460:	2200      	movs	r2, #0
 8001462:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 9;
 8001464:	2309      	movs	r3, #9
 8001466:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001468:	230f      	movs	r3, #15
 800146a:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 5;
 800146c:	2305      	movs	r3, #5
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 1;
 8001470:	2301      	movs	r3, #1
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001474:	2310      	movs	r3, #16
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001478:	2311      	movs	r3, #17
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800147c:	2300      	movs	r3, #0
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 8001480:	2302      	movs	r3, #2
 8001482:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001484:	230f      	movs	r3, #15
 8001486:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 8001488:	2303      	movs	r3, #3
 800148a:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 1;
 800148c:	2301      	movs	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001490:	2310      	movs	r3, #16
 8001492:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001494:	2311      	movs	r3, #17
 8001496:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800149c:	463a      	mov	r2, r7
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_FSMC_Init+0xf0>)
 80014a6:	f005 fdf7 	bl	8007098 <HAL_SRAM_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_FSMC_Init+0xe8>
  {
    Error_Handler( );
 80014b0:	f000 ff6c 	bl	800238c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80014b4:	bf00      	nop
 80014b6:	3738      	adds	r7, #56	; 0x38
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	2004a264 	.word	0x2004a264
 80014c0:	a0000104 	.word	0xa0000104

080014c4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <HAL_FSMC_MspInit+0xc8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d151      	bne.n	8001584 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <HAL_FSMC_MspInit+0xc8>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	4b29      	ldr	r3, [pc, #164]	; (8001590 <HAL_FSMC_MspInit+0xcc>)
 80014ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ee:	4a28      	ldr	r2, [pc, #160]	; (8001590 <HAL_FSMC_MspInit+0xcc>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6393      	str	r3, [r2, #56]	; 0x38
 80014f6:	4b26      	ldr	r3, [pc, #152]	; (8001590 <HAL_FSMC_MspInit+0xcc>)
 80014f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001502:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001506:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001514:	230c      	movs	r3, #12
 8001516:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	4619      	mov	r1, r3
 800151c:	481d      	ldr	r0, [pc, #116]	; (8001594 <HAL_FSMC_MspInit+0xd0>)
 800151e:	f002 f97b 	bl	8003818 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001526:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001534:	230c      	movs	r3, #12
 8001536:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	4619      	mov	r1, r3
 800153c:	4816      	ldr	r0, [pc, #88]	; (8001598 <HAL_FSMC_MspInit+0xd4>)
 800153e:	f002 f96b 	bl	8003818 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8001542:	f64c 63b0 	movw	r3, #52912	; 0xceb0
 8001546:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001554:	230c      	movs	r3, #12
 8001556:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4619      	mov	r1, r3
 800155c:	480f      	ldr	r0, [pc, #60]	; (800159c <HAL_FSMC_MspInit+0xd8>)
 800155e:	f002 f95b 	bl	8003818 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001562:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001566:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001574:	230a      	movs	r3, #10
 8001576:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	4619      	mov	r1, r3
 800157c:	4808      	ldr	r0, [pc, #32]	; (80015a0 <HAL_FSMC_MspInit+0xdc>)
 800157e:	f002 f94b 	bl	8003818 <HAL_GPIO_Init>
 8001582:	e000      	b.n	8001586 <HAL_FSMC_MspInit+0xc2>
    return;
 8001584:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20027f28 	.word	0x20027f28
 8001590:	40023800 	.word	0x40023800
 8001594:	40021000 	.word	0x40021000
 8001598:	40020400 	.word	0x40020400
 800159c:	40020c00 	.word	0x40020c00
 80015a0:	40020800 	.word	0x40020800

080015a4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80015ac:	f7ff ff8a 	bl	80014c4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <FSMC_WR_REG>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void FSMC_WR_REG(uint32_t Reg)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	LCD_FSMC->REG = Reg;
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <FSMC_WR_REG+0x20>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	b292      	uxth	r2, r2
 80015c8:	801a      	strh	r2, [r3, #0]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000000 	.word	0x20000000

080015dc <FSMC_WR_DAT>:
* function   :
* parameters :N/A
* retvalue   :N/A
*******************************************************************************************************************************/
void FSMC_WR_DAT(uint16_t Dat)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
	LCD_FSMC->DAT = Dat;
 80015e6:	4b05      	ldr	r3, [pc, #20]	; (80015fc <FSMC_WR_DAT+0x20>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	88fa      	ldrh	r2, [r7, #6]
 80015ec:	805a      	strh	r2, [r3, #2]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000000 	.word	0x20000000

08001600 <LCD_SetWindow>:
							LCD_SetDirection function. It calls to FSMC_WR_REG(RAMWR) function at the end.
* parameters :XS(x start address), YS(y start address), XE(x end address) and YE(y end address)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetWindow(uint16_t Xs, uint16_t Ys, uint16_t Xe, uint16_t Ye)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4604      	mov	r4, r0
 8001608:	4608      	mov	r0, r1
 800160a:	4611      	mov	r1, r2
 800160c:	461a      	mov	r2, r3
 800160e:	4623      	mov	r3, r4
 8001610:	80fb      	strh	r3, [r7, #6]
 8001612:	4603      	mov	r3, r0
 8001614:	80bb      	strh	r3, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	807b      	strh	r3, [r7, #2]
 800161a:	4613      	mov	r3, r2
 800161c:	803b      	strh	r3, [r7, #0]
	FSMC_WR_REG(CASET_XS_H);		FSMC_WR_DAT(Xs >> 8);
 800161e:	f44f 5028 	mov.w	r0, #10752	; 0x2a00
 8001622:	f7ff ffc9 	bl	80015b8 <FSMC_WR_REG>
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	b29b      	uxth	r3, r3
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ffd5 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XS_L);		FSMC_WR_DAT(Xs & 0x00FFU);
 8001632:	f642 2001 	movw	r0, #10753	; 0x2a01
 8001636:	f7ff ffbf 	bl	80015b8 <FSMC_WR_REG>
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	b29b      	uxth	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ffcb 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_H);		FSMC_WR_DAT(Xe >> 8);
 8001646:	f642 2002 	movw	r0, #10754	; 0x2a02
 800164a:	f7ff ffb5 	bl	80015b8 <FSMC_WR_REG>
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	b29b      	uxth	r3, r3
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ffc1 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_L);		FSMC_WR_DAT(Xe & 0x00FFU);
 800165a:	f642 2003 	movw	r0, #10755	; 0x2a03
 800165e:	f7ff ffab 	bl	80015b8 <FSMC_WR_REG>
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	b29b      	uxth	r3, r3
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ffb7 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_H);		FSMC_WR_DAT(Ys >> 8);
 800166e:	f44f 502c 	mov.w	r0, #11008	; 0x2b00
 8001672:	f7ff ffa1 	bl	80015b8 <FSMC_WR_REG>
 8001676:	88bb      	ldrh	r3, [r7, #4]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	b29b      	uxth	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ffad 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_L);		FSMC_WR_DAT(Ys & 0x00FFU);
 8001682:	f642 3001 	movw	r0, #11009	; 0x2b01
 8001686:	f7ff ff97 	bl	80015b8 <FSMC_WR_REG>
 800168a:	88bb      	ldrh	r3, [r7, #4]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	b29b      	uxth	r3, r3
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ffa3 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_H);		FSMC_WR_DAT(Ye >> 8);
 8001696:	f642 3002 	movw	r0, #11010	; 0x2b02
 800169a:	f7ff ff8d 	bl	80015b8 <FSMC_WR_REG>
 800169e:	883b      	ldrh	r3, [r7, #0]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff99 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_L);		FSMC_WR_DAT(Ye & 0x00FFU);
 80016aa:	f642 3003 	movw	r0, #11011	; 0x2b03
 80016ae:	f7ff ff83 	bl	80015b8 <FSMC_WR_REG>
 80016b2:	883b      	ldrh	r3, [r7, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff8f 	bl	80015dc <FSMC_WR_DAT>

	FSMC_WR_REG(RAMWR);
 80016be:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 80016c2:	f7ff ff79 	bl	80015b8 <FSMC_WR_REG>
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd90      	pop	{r4, r7, pc}
	...

080016d0 <LCD_SetDirection>:
							the selected orientation.
* parameters :Direction(Use Orientation Direction Definitions defined in FSMC_NT35510.h)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetDirection(uint8_t Direction)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
	switch(Direction)
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d84b      	bhi.n	8001778 <LCD_SetDirection+0xa8>
 80016e0:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <LCD_SetDirection+0x18>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	080016f9 	.word	0x080016f9
 80016ec:	08001719 	.word	0x08001719
 80016f0:	08001739 	.word	0x08001739
 80016f4:	08001759 	.word	0x08001759
	{
		case 0:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0000U);
 80016f8:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 80016fc:	f7ff ff5c 	bl	80015b8 <FSMC_WR_REG>
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff ff6b 	bl	80015dc <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 8001706:	f240 331f 	movw	r3, #799	; 0x31f
 800170a:	f240 12df 	movw	r2, #479	; 0x1df
 800170e:	2100      	movs	r1, #0
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff ff75 	bl	8001600 <LCD_SetWindow>
		break;
 8001716:	e02f      	b.n	8001778 <LCD_SetDirection+0xa8>
		case 1:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00C0U);
 8001718:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 800171c:	f7ff ff4c 	bl	80015b8 <FSMC_WR_REG>
 8001720:	20c0      	movs	r0, #192	; 0xc0
 8001722:	f7ff ff5b 	bl	80015dc <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 8001726:	f240 331f 	movw	r3, #799	; 0x31f
 800172a:	f240 12df 	movw	r2, #479	; 0x1df
 800172e:	2100      	movs	r1, #0
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff ff65 	bl	8001600 <LCD_SetWindow>
		break;
 8001736:	e01f      	b.n	8001778 <LCD_SetDirection+0xa8>
		case 2:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0060U);
 8001738:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 800173c:	f7ff ff3c 	bl	80015b8 <FSMC_WR_REG>
 8001740:	2060      	movs	r0, #96	; 0x60
 8001742:	f7ff ff4b 	bl	80015dc <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 8001746:	f240 13df 	movw	r3, #479	; 0x1df
 800174a:	f240 321f 	movw	r2, #799	; 0x31f
 800174e:	2100      	movs	r1, #0
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff ff55 	bl	8001600 <LCD_SetWindow>
		break;
 8001756:	e00f      	b.n	8001778 <LCD_SetDirection+0xa8>
		case 3:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00A0U);
 8001758:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 800175c:	f7ff ff2c 	bl	80015b8 <FSMC_WR_REG>
 8001760:	20a0      	movs	r0, #160	; 0xa0
 8001762:	f7ff ff3b 	bl	80015dc <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 8001766:	f240 13df 	movw	r3, #479	; 0x1df
 800176a:	f240 321f 	movw	r2, #799	; 0x31f
 800176e:	2100      	movs	r1, #0
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff ff45 	bl	8001600 <LCD_SetWindow>
		break;
 8001776:	bf00      	nop
	}
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <LCD_ClearScreen>:
							orientation direction change.
* parameters :Color(Desired screen color)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_ClearScreen(uint16_t Color)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
  uint32_t i;

	for(i=0; i<(480*800); i++)
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	e006      	b.n	800179e <LCD_ClearScreen+0x1e>
	{
		FSMC_WR_DAT(Color);
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff22 	bl	80015dc <FSMC_WR_DAT>
	for(i=0; i<(480*800); i++)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3301      	adds	r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4a03      	ldr	r2, [pc, #12]	; (80017b0 <LCD_ClearScreen+0x30>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d9f4      	bls.n	8001790 <LCD_ClearScreen+0x10>
	}
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	0005dbff 	.word	0x0005dbff

080017b4 <LCD_DrawPoint>:
* parameters :X(x address of the center of the point), Y(y address of the center of the point)
							Color(point color), Size(point size)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_DrawPoint(uint16_t X, uint16_t Y, uint16_t Color, uint8_t Size)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4604      	mov	r4, r0
 80017bc:	4608      	mov	r0, r1
 80017be:	4611      	mov	r1, r2
 80017c0:	461a      	mov	r2, r3
 80017c2:	4623      	mov	r3, r4
 80017c4:	80fb      	strh	r3, [r7, #6]
 80017c6:	4603      	mov	r3, r0
 80017c8:	80bb      	strh	r3, [r7, #4]
 80017ca:	460b      	mov	r3, r1
 80017cc:	807b      	strh	r3, [r7, #2]
 80017ce:	4613      	mov	r3, r2
 80017d0:	707b      	strb	r3, [r7, #1]
  uint32_t i;
	LCD_SetWindow(X, Y, X + (Size - 1), Y + (Size - 1));
 80017d2:	787b      	ldrb	r3, [r7, #1]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	4413      	add	r3, r2
 80017da:	b29b      	uxth	r3, r3
 80017dc:	3b01      	subs	r3, #1
 80017de:	b29c      	uxth	r4, r3
 80017e0:	787b      	ldrb	r3, [r7, #1]
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	88bb      	ldrh	r3, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	88b9      	ldrh	r1, [r7, #4]
 80017f0:	88f8      	ldrh	r0, [r7, #6]
 80017f2:	4622      	mov	r2, r4
 80017f4:	f7ff ff04 	bl	8001600 <LCD_SetWindow>
	for(i=0; i < (Size) * (Size); i++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e006      	b.n	800180c <LCD_DrawPoint+0x58>
	{
		FSMC_WR_DAT(Color);
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff feeb 	bl	80015dc <FSMC_WR_DAT>
	for(i=0; i < (Size) * (Size); i++)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3301      	adds	r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	787b      	ldrb	r3, [r7, #1]
 800180e:	787a      	ldrb	r2, [r7, #1]
 8001810:	fb02 f303 	mul.w	r3, r2, r3
 8001814:	461a      	mov	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4293      	cmp	r3, r2
 800181a:	d3f0      	bcc.n	80017fe <LCD_DrawPoint+0x4a>
	}
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}

08001826 <LCD_DrawLine>:
* function   :
* parameters :Xs(x start address), Ys(y start address), Xe(x end address), Ye(y end address), Color(line color), Size(line size)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_DrawLine(uint16_t Xs, uint16_t Ys, uint16_t Xe, uint16_t Ye, uint16_t Color, uint8_t Size)
{
 8001826:	b590      	push	{r4, r7, lr}
 8001828:	b087      	sub	sp, #28
 800182a:	af00      	add	r7, sp, #0
 800182c:	4604      	mov	r4, r0
 800182e:	4608      	mov	r0, r1
 8001830:	4611      	mov	r1, r2
 8001832:	461a      	mov	r2, r3
 8001834:	4623      	mov	r3, r4
 8001836:	80fb      	strh	r3, [r7, #6]
 8001838:	4603      	mov	r3, r0
 800183a:	80bb      	strh	r3, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
 8001840:	4613      	mov	r3, r2
 8001842:	803b      	strh	r3, [r7, #0]


	int16_t	deltaX = Xe - Xs;
 8001844:	887a      	ldrh	r2, [r7, #2]
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	b29b      	uxth	r3, r3
 800184c:	82fb      	strh	r3, [r7, #22]
	if(deltaX<0)
 800184e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001852:	2b00      	cmp	r3, #0
 8001854:	da03      	bge.n	800185e <LCD_DrawLine+0x38>
		deltaX = deltaX * (-1);
 8001856:	8afb      	ldrh	r3, [r7, #22]
 8001858:	425b      	negs	r3, r3
 800185a:	b29b      	uxth	r3, r3
 800185c:	82fb      	strh	r3, [r7, #22]

	int16_t	deltaY = Ye - Ys;
 800185e:	883a      	ldrh	r2, [r7, #0]
 8001860:	88bb      	ldrh	r3, [r7, #4]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	b29b      	uxth	r3, r3
 8001866:	827b      	strh	r3, [r7, #18]
	if(deltaY<0)
 8001868:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800186c:	2b00      	cmp	r3, #0
 800186e:	da03      	bge.n	8001878 <LCD_DrawLine+0x52>
		deltaX = deltaY * (-1);
 8001870:	8a7b      	ldrh	r3, [r7, #18]
 8001872:	425b      	negs	r3, r3
 8001874:	b29b      	uxth	r3, r3
 8001876:	82fb      	strh	r3, [r7, #22]

	int8_t		signX = (Xs < Xe) ? (1) : (-1);
 8001878:	88fa      	ldrh	r2, [r7, #6]
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	429a      	cmp	r2, r3
 800187e:	d201      	bcs.n	8001884 <LCD_DrawLine+0x5e>
 8001880:	2301      	movs	r3, #1
 8001882:	e001      	b.n	8001888 <LCD_DrawLine+0x62>
 8001884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001888:	747b      	strb	r3, [r7, #17]
	int8_t		signY = (Ys < Ye) ? (1) : (-1);
 800188a:	88ba      	ldrh	r2, [r7, #4]
 800188c:	883b      	ldrh	r3, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d201      	bcs.n	8001896 <LCD_DrawLine+0x70>
 8001892:	2301      	movs	r3, #1
 8001894:	e001      	b.n	800189a <LCD_DrawLine+0x74>
 8001896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800189a:	743b      	strb	r3, [r7, #16]
	int16_t		error = deltaX - deltaY;
 800189c:	8afa      	ldrh	r2, [r7, #22]
 800189e:	8a7b      	ldrh	r3, [r7, #18]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	82bb      	strh	r3, [r7, #20]

	for (;;)
	{
		LCD_DrawPoint(Xs, Ys, Color, Size);
 80018a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018ac:	88b9      	ldrh	r1, [r7, #4]
 80018ae:	88f8      	ldrh	r0, [r7, #6]
 80018b0:	f7ff ff80 	bl	80017b4 <LCD_DrawPoint>

		if(Xs == Xe && Ys == Ye)
 80018b4:	88fa      	ldrh	r2, [r7, #6]
 80018b6:	887b      	ldrh	r3, [r7, #2]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d103      	bne.n	80018c4 <LCD_DrawLine+0x9e>
 80018bc:	88ba      	ldrh	r2, [r7, #4]
 80018be:	883b      	ldrh	r3, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d025      	beq.n	8001910 <LCD_DrawLine+0xea>
			break;

		int16_t error2 = error;
 80018c4:	8abb      	ldrh	r3, [r7, #20]
 80018c6:	81fb      	strh	r3, [r7, #14]

		if(error2 > -deltaY)
 80018c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018d0:	425b      	negs	r3, r3
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dd0a      	ble.n	80018ec <LCD_DrawLine+0xc6>
		{
			error -= deltaY;
 80018d6:	8aba      	ldrh	r2, [r7, #20]
 80018d8:	8a7b      	ldrh	r3, [r7, #18]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	b29b      	uxth	r3, r3
 80018de:	82bb      	strh	r3, [r7, #20]
			Xs += signX;
 80018e0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4413      	add	r3, r2
 80018ea:	80fb      	strh	r3, [r7, #6]
		}

		if(error2 < deltaX)
 80018ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dad6      	bge.n	80018a6 <LCD_DrawLine+0x80>
		{
			error += deltaX;
 80018f8:	8aba      	ldrh	r2, [r7, #20]
 80018fa:	8afb      	ldrh	r3, [r7, #22]
 80018fc:	4413      	add	r3, r2
 80018fe:	b29b      	uxth	r3, r3
 8001900:	82bb      	strh	r3, [r7, #20]
			Ys += signY;
 8001902:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001906:	b29a      	uxth	r2, r3
 8001908:	88bb      	ldrh	r3, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	80bb      	strh	r3, [r7, #4]
	{
 800190e:	e7ca      	b.n	80018a6 <LCD_DrawLine+0x80>
			break;
 8001910:	bf00      	nop
		}
	}
}
 8001912:	bf00      	nop
 8001914:	371c      	adds	r7, #28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd90      	pop	{r4, r7, pc}
	...

0800191c <LCD_PrintCh>:
* parameters :X(x start address), Y(y start address), Color(character color), Bcolor(background
							color), Character(use standard ASCII values for characters) and Size(characters size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintCh(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t Character, uint8_t Size)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	4604      	mov	r4, r0
 8001924:	4608      	mov	r0, r1
 8001926:	4611      	mov	r1, r2
 8001928:	461a      	mov	r2, r3
 800192a:	4623      	mov	r3, r4
 800192c:	80fb      	strh	r3, [r7, #6]
 800192e:	4603      	mov	r3, r0
 8001930:	80bb      	strh	r3, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	807b      	strh	r3, [r7, #2]
 8001936:	4613      	mov	r3, r2
 8001938:	803b      	strh	r3, [r7, #0]
	uint8_t i, j, k, p=0;
 800193a:	2300      	movs	r3, #0
 800193c:	733b      	strb	r3, [r7, #12]
	uint16_t c=0;
 800193e:	2300      	movs	r3, #0
 8001940:	817b      	strh	r3, [r7, #10]
	LCD_SetWindow(X, Y, X+(8 * Size - 1), Y+(8  *Size - 1));									// Define area by character size.
 8001942:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001946:	b29b      	uxth	r3, r3
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	b29a      	uxth	r2, r3
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	4413      	add	r3, r2
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29c      	uxth	r4, r3
 8001956:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800195a:	b29b      	uxth	r3, r3
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	b29a      	uxth	r2, r3
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	b29b      	uxth	r3, r3
 8001966:	3b01      	subs	r3, #1
 8001968:	b29b      	uxth	r3, r3
 800196a:	88b9      	ldrh	r1, [r7, #4]
 800196c:	88f8      	ldrh	r0, [r7, #6]
 800196e:	4622      	mov	r2, r4
 8001970:	f7ff fe46 	bl	8001600 <LCD_SetWindow>

	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 8001974:	2300      	movs	r3, #0
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	e03c      	b.n	80019f4 <LCD_PrintCh+0xd8>
	{
		for(j=0; j < Size; j++)																					// Print each row size times.
 800197a:	2300      	movs	r3, #0
 800197c:	73bb      	strb	r3, [r7, #14]
 800197e:	e031      	b.n	80019e4 <LCD_PrintCh+0xc8>
		{
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 8001980:	2300      	movs	r3, #0
 8001982:	737b      	strb	r3, [r7, #13]
 8001984:	e028      	b.n	80019d8 <LCD_PrintCh+0xbc>
			{
				if((ASCIItable[Character][i]>>(7-k)) & 0x01)
 8001986:	f897 2020 	ldrb.w	r2, [r7, #32]
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	491d      	ldr	r1, [pc, #116]	; (8001a04 <LCD_PrintCh+0xe8>)
 800198e:	00d2      	lsls	r2, r2, #3
 8001990:	440a      	add	r2, r1
 8001992:	4413      	add	r3, r2
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	7b7b      	ldrb	r3, [r7, #13]
 800199a:	f1c3 0307 	rsb	r3, r3, #7
 800199e:	fa42 f303 	asr.w	r3, r2, r3
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <LCD_PrintCh+0x94>
					c=Color;
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	817b      	strh	r3, [r7, #10]
 80019ae:	e001      	b.n	80019b4 <LCD_PrintCh+0x98>
				else
					c=Bcolor;
 80019b0:	883b      	ldrh	r3, [r7, #0]
 80019b2:	817b      	strh	r3, [r7, #10]
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 80019b4:	2300      	movs	r3, #0
 80019b6:	733b      	strb	r3, [r7, #12]
 80019b8:	e006      	b.n	80019c8 <LCD_PrintCh+0xac>
				{
					FSMC_WR_DAT(c);
 80019ba:	897b      	ldrh	r3, [r7, #10]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fe0d 	bl	80015dc <FSMC_WR_DAT>
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 80019c2:	7b3b      	ldrb	r3, [r7, #12]
 80019c4:	3301      	adds	r3, #1
 80019c6:	733b      	strb	r3, [r7, #12]
 80019c8:	7b3a      	ldrb	r2, [r7, #12]
 80019ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d3f3      	bcc.n	80019ba <LCD_PrintCh+0x9e>
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 80019d2:	7b7b      	ldrb	r3, [r7, #13]
 80019d4:	3301      	adds	r3, #1
 80019d6:	737b      	strb	r3, [r7, #13]
 80019d8:	7b7b      	ldrb	r3, [r7, #13]
 80019da:	2b07      	cmp	r3, #7
 80019dc:	d9d3      	bls.n	8001986 <LCD_PrintCh+0x6a>
		for(j=0; j < Size; j++)																					// Print each row size times.
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	3301      	adds	r3, #1
 80019e2:	73bb      	strb	r3, [r7, #14]
 80019e4:	7bba      	ldrb	r2, [r7, #14]
 80019e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d3c8      	bcc.n	8001980 <LCD_PrintCh+0x64>
	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	3301      	adds	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	2b07      	cmp	r3, #7
 80019f8:	d9bf      	bls.n	800197a <LCD_PrintCh+0x5e>
				}
			}
		}
	}
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd90      	pop	{r4, r7, pc}
 8001a04:	0802ba14 	.word	0x0802ba14

08001a08 <LCD_PrintStr>:
							color), string(pointer to an array of characters, standard ASCII values) and size
							(character size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintStr(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t* String, uint8_t Size)
{
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	4604      	mov	r4, r0
 8001a10:	4608      	mov	r0, r1
 8001a12:	4611      	mov	r1, r2
 8001a14:	461a      	mov	r2, r3
 8001a16:	4623      	mov	r3, r4
 8001a18:	80fb      	strh	r3, [r7, #6]
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80bb      	strh	r3, [r7, #4]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	807b      	strh	r3, [r7, #2]
 8001a22:	4613      	mov	r3, r2
 8001a24:	803b      	strh	r3, [r7, #0]
	X=X-8*Size;
 8001a26:	7f3b      	ldrb	r3, [r7, #28]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	88fa      	ldrh	r2, [r7, #6]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	80fb      	strh	r3, [r7, #6]
	while(*String)
 8001a34:	e015      	b.n	8001a62 <LCD_PrintStr+0x5a>
		LCD_PrintCh(X = X + 8 * Size, Y, Color, Bcolor, *String++, Size);
 8001a36:	7f3b      	ldrb	r3, [r7, #28]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	4413      	add	r3, r2
 8001a42:	80fb      	strh	r3, [r7, #6]
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	61ba      	str	r2, [r7, #24]
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	883d      	ldrh	r5, [r7, #0]
 8001a4e:	887c      	ldrh	r4, [r7, #2]
 8001a50:	88b9      	ldrh	r1, [r7, #4]
 8001a52:	88f8      	ldrh	r0, [r7, #6]
 8001a54:	7f3a      	ldrb	r2, [r7, #28]
 8001a56:	9201      	str	r2, [sp, #4]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	462b      	mov	r3, r5
 8001a5c:	4622      	mov	r2, r4
 8001a5e:	f7ff ff5d 	bl	800191c <LCD_PrintCh>
	while(*String)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1e5      	bne.n	8001a36 <LCD_PrintStr+0x2e>
}
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bdb0      	pop	{r4, r5, r7, pc}

08001a74 <NT35510_Init>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void NT35510_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	RST_LOW;													// Reset on.
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2140      	movs	r1, #64	; 0x40
 8001a7c:	48fd      	ldr	r0, [pc, #1012]	; (8001e74 <NT35510_Init+0x400>)
 8001a7e:	f002 f85f 	bl	8003b40 <HAL_GPIO_WritePin>
	HAL_Delay(300);											// Short delay needed on power up
 8001a82:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a86:	f001 faf5 	bl	8003074 <HAL_Delay>
	RST_HIGH;													// Reset off.
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2140      	movs	r1, #64	; 0x40
 8001a8e:	48f9      	ldr	r0, [pc, #996]	; (8001e74 <NT35510_Init+0x400>)
 8001a90:	f002 f856 	bl	8003b40 <HAL_GPIO_WritePin>
	HAL_Delay(800);											// Short delay needed on power up
 8001a94:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001a98:	f001 faec 	bl	8003074 <HAL_Delay>

	// Manufacture Command Set selection
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 8001a9c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001aa0:	f7ff fd8a 	bl	80015b8 <FSMC_WR_REG>
 8001aa4:	2055      	movs	r0, #85	; 0x55
 8001aa6:	f7ff fd99 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8001aaa:	f24f 0001 	movw	r0, #61441	; 0xf001
 8001aae:	f7ff fd83 	bl	80015b8 <FSMC_WR_REG>
 8001ab2:	20aa      	movs	r0, #170	; 0xaa
 8001ab4:	f7ff fd92 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 8001ab8:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001abc:	f7ff fd7c 	bl	80015b8 <FSMC_WR_REG>
 8001ac0:	2052      	movs	r0, #82	; 0x52
 8001ac2:	f7ff fd8b 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8001ac6:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001aca:	f7ff fd75 	bl	80015b8 <FSMC_WR_REG>
 8001ace:	2008      	movs	r0, #8
 8001ad0:	f7ff fd84 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0001U);		// Select page 1
 8001ad4:	f24f 0004 	movw	r0, #61444	; 0xf004
 8001ad8:	f7ff fd6e 	bl	80015b8 <FSMC_WR_REG>
 8001adc:	2001      	movs	r0, #1
 8001ade:	f7ff fd7d 	bl	80015dc <FSMC_WR_DAT>

	// AVDD 5.2V
	FSMC_WR_REG(SETAVDD_NORM);		FSMC_WR_DAT(0x000DU);
 8001ae2:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8001ae6:	f7ff fd67 	bl	80015b8 <FSMC_WR_REG>
 8001aea:	200d      	movs	r0, #13
 8001aec:	f7ff fd76 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_IDLE);		FSMC_WR_DAT(0x000DU);
 8001af0:	f24b 0001 	movw	r0, #45057	; 0xb001
 8001af4:	f7ff fd60 	bl	80015b8 <FSMC_WR_REG>
 8001af8:	200d      	movs	r0, #13
 8001afa:	f7ff fd6f 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_PART);		FSMC_WR_DAT(0x000DU);
 8001afe:	f24b 0002 	movw	r0, #45058	; 0xb002
 8001b02:	f7ff fd59 	bl	80015b8 <FSMC_WR_REG>
 8001b06:	200d      	movs	r0, #13
 8001b08:	f7ff fd68 	bl	80015dc <FSMC_WR_DAT>

	// AVDD ratio
	FSMC_WR_REG(BT1CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001b0c:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8001b10:	f7ff fd52 	bl	80015b8 <FSMC_WR_REG>
 8001b14:	2034      	movs	r0, #52	; 0x34
 8001b16:	f7ff fd61 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001b1a:	f24b 6001 	movw	r0, #46593	; 0xb601
 8001b1e:	f7ff fd4b 	bl	80015b8 <FSMC_WR_REG>
 8001b22:	2034      	movs	r0, #52	; 0x34
 8001b24:	f7ff fd5a 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001b28:	f24b 6002 	movw	r0, #46594	; 0xb602
 8001b2c:	f7ff fd44 	bl	80015b8 <FSMC_WR_REG>
 8001b30:	2034      	movs	r0, #52	; 0x34
 8001b32:	f7ff fd53 	bl	80015dc <FSMC_WR_DAT>

	// AVEE  -5.2V
	FSMC_WR_REG(SETAVEE_NORM);		FSMC_WR_DAT(0x000DU);
 8001b36:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8001b3a:	f7ff fd3d 	bl	80015b8 <FSMC_WR_REG>
 8001b3e:	200d      	movs	r0, #13
 8001b40:	f7ff fd4c 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_IDLE);		FSMC_WR_DAT(0x000DU);
 8001b44:	f24b 1001 	movw	r0, #45313	; 0xb101
 8001b48:	f7ff fd36 	bl	80015b8 <FSMC_WR_REG>
 8001b4c:	200d      	movs	r0, #13
 8001b4e:	f7ff fd45 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_PART);		FSMC_WR_DAT(0x000DU);
 8001b52:	f24b 1002 	movw	r0, #45314	; 0xb102
 8001b56:	f7ff fd2f 	bl	80015b8 <FSMC_WR_REG>
 8001b5a:	200d      	movs	r0, #13
 8001b5c:	f7ff fd3e 	bl	80015dc <FSMC_WR_DAT>

	// AVEE ratio
	FSMC_WR_REG(BT2CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001b60:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8001b64:	f7ff fd28 	bl	80015b8 <FSMC_WR_REG>
 8001b68:	2034      	movs	r0, #52	; 0x34
 8001b6a:	f7ff fd37 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001b6e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8001b72:	f7ff fd21 	bl	80015b8 <FSMC_WR_REG>
 8001b76:	2034      	movs	r0, #52	; 0x34
 8001b78:	f7ff fd30 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001b7c:	f24b 7002 	movw	r0, #46850	; 0xb702
 8001b80:	f7ff fd1a 	bl	80015b8 <FSMC_WR_REG>
 8001b84:	2034      	movs	r0, #52	; 0x34
 8001b86:	f7ff fd29 	bl	80015dc <FSMC_WR_DAT>

	// VCL  -2.5V
	FSMC_WR_REG(SETVCL_NORM);		FSMC_WR_DAT(0x0000U);
 8001b8a:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8001b8e:	f7ff fd13 	bl	80015b8 <FSMC_WR_REG>
 8001b92:	2000      	movs	r0, #0
 8001b94:	f7ff fd22 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_IDLE);		FSMC_WR_DAT(0x0000U);
 8001b98:	f24b 2001 	movw	r0, #45569	; 0xb201
 8001b9c:	f7ff fd0c 	bl	80015b8 <FSMC_WR_REG>
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff fd1b 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_PART);		FSMC_WR_DAT(0x0000U);
 8001ba6:	f24b 2002 	movw	r0, #45570	; 0xb202
 8001baa:	f7ff fd05 	bl	80015b8 <FSMC_WR_REG>
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7ff fd14 	bl	80015dc <FSMC_WR_DAT>

	// VCL ratio
	FSMC_WR_REG(BT3CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8001bb4:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8001bb8:	f7ff fcfe 	bl	80015b8 <FSMC_WR_REG>
 8001bbc:	2024      	movs	r0, #36	; 0x24
 8001bbe:	f7ff fd0d 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8001bc2:	f64b 0001 	movw	r0, #47105	; 0xb801
 8001bc6:	f7ff fcf7 	bl	80015b8 <FSMC_WR_REG>
 8001bca:	2024      	movs	r0, #36	; 0x24
 8001bcc:	f7ff fd06 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_PART);		FSMC_WR_DAT(0x0024U);
 8001bd0:	f64b 0002 	movw	r0, #47106	; 0xb802
 8001bd4:	f7ff fcf0 	bl	80015b8 <FSMC_WR_REG>
 8001bd8:	2024      	movs	r0, #36	; 0x24
 8001bda:	f7ff fcff 	bl	80015dc <FSMC_WR_DAT>

	// VGH  15V
	FSMC_WR_REG(VGHCTR);			FSMC_WR_DAT(0x01);
 8001bde:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8001be2:	f7ff fce9 	bl	80015b8 <FSMC_WR_REG>
 8001be6:	2001      	movs	r0, #1
 8001be8:	f7ff fcf8 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_NORM);		FSMC_WR_DAT(0x000FU);
 8001bec:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8001bf0:	f7ff fce2 	bl	80015b8 <FSMC_WR_REG>
 8001bf4:	200f      	movs	r0, #15
 8001bf6:	f7ff fcf1 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_IDLE);		FSMC_WR_DAT(0x000FU);
 8001bfa:	f24b 3001 	movw	r0, #45825	; 0xb301
 8001bfe:	f7ff fcdb 	bl	80015b8 <FSMC_WR_REG>
 8001c02:	200f      	movs	r0, #15
 8001c04:	f7ff fcea 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_PART);		FSMC_WR_DAT(0x000FU);
 8001c08:	f24b 3002 	movw	r0, #45826	; 0xb302
 8001c0c:	f7ff fcd4 	bl	80015b8 <FSMC_WR_REG>
 8001c10:	200f      	movs	r0, #15
 8001c12:	f7ff fce3 	bl	80015dc <FSMC_WR_DAT>

	// VGH  ratio
	FSMC_WR_REG(BT4CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001c16:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8001c1a:	f7ff fccd 	bl	80015b8 <FSMC_WR_REG>
 8001c1e:	2034      	movs	r0, #52	; 0x34
 8001c20:	f7ff fcdc 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001c24:	f64b 1001 	movw	r0, #47361	; 0xb901
 8001c28:	f7ff fcc6 	bl	80015b8 <FSMC_WR_REG>
 8001c2c:	2034      	movs	r0, #52	; 0x34
 8001c2e:	f7ff fcd5 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001c32:	f64b 1002 	movw	r0, #47362	; 0xb902
 8001c36:	f7ff fcbf 	bl	80015b8 <FSMC_WR_REG>
 8001c3a:	2034      	movs	r0, #52	; 0x34
 8001c3c:	f7ff fcce 	bl	80015dc <FSMC_WR_DAT>

	// VGL_REG  -10V
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 8001c40:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001c44:	f7ff fcb8 	bl	80015b8 <FSMC_WR_REG>
 8001c48:	2008      	movs	r0, #8
 8001c4a:	f7ff fcc7 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 8001c4e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001c52:	f7ff fcb1 	bl	80015b8 <FSMC_WR_REG>
 8001c56:	2008      	movs	r0, #8
 8001c58:	f7ff fcc0 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(0xB501);			FSMC_WR_DAT(0x0008U);
 8001c5c:	f24b 5001 	movw	r0, #46337	; 0xb501
 8001c60:	f7ff fcaa 	bl	80015b8 <FSMC_WR_REG>
 8001c64:	2008      	movs	r0, #8
 8001c66:	f7ff fcb9 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(0xC200);			FSMC_WR_DAT(0x0003U);
 8001c6a:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8001c6e:	f7ff fca3 	bl	80015b8 <FSMC_WR_REG>
 8001c72:	2003      	movs	r0, #3
 8001c74:	f7ff fcb2 	bl	80015dc <FSMC_WR_DAT>

	// VGLX  ratio
	FSMC_WR_REG(BT5CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8001c78:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8001c7c:	f7ff fc9c 	bl	80015b8 <FSMC_WR_REG>
 8001c80:	2024      	movs	r0, #36	; 0x24
 8001c82:	f7ff fcab 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8001c86:	f64b 2001 	movw	r0, #47617	; 0xba01
 8001c8a:	f7ff fc95 	bl	80015b8 <FSMC_WR_REG>
 8001c8e:	2024      	movs	r0, #36	; 0x24
 8001c90:	f7ff fca4 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_PART);		FSMC_WR_DAT(0x0024U);
 8001c94:	f64b 2002 	movw	r0, #47618	; 0xba02
 8001c98:	f7ff fc8e 	bl	80015b8 <FSMC_WR_REG>
 8001c9c:	2024      	movs	r0, #36	; 0x24
 8001c9e:	f7ff fc9d 	bl	80015dc <FSMC_WR_DAT>

	// VGMP/VGSP 4.5V/0V
	FSMC_WR_REG(SETVGP_0);			FSMC_WR_DAT(0x0000U);
 8001ca2:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8001ca6:	f7ff fc87 	bl	80015b8 <FSMC_WR_REG>
 8001caa:	2000      	movs	r0, #0
 8001cac:	f7ff fc96 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_1);			FSMC_WR_DAT(0x0078U);
 8001cb0:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8001cb4:	f7ff fc80 	bl	80015b8 <FSMC_WR_REG>
 8001cb8:	2078      	movs	r0, #120	; 0x78
 8001cba:	f7ff fc8f 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_2);			FSMC_WR_DAT(0x0000U);
 8001cbe:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8001cc2:	f7ff fc79 	bl	80015b8 <FSMC_WR_REG>
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7ff fc88 	bl	80015dc <FSMC_WR_DAT>

	// VGMN/VGSN -4.5V/0V
	FSMC_WR_REG(SETVGN_0);			FSMC_WR_DAT(0x0000U);
 8001ccc:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8001cd0:	f7ff fc72 	bl	80015b8 <FSMC_WR_REG>
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f7ff fc81 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_1);			FSMC_WR_DAT(0x0078U);
 8001cda:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8001cde:	f7ff fc6b 	bl	80015b8 <FSMC_WR_REG>
 8001ce2:	2078      	movs	r0, #120	; 0x78
 8001ce4:	f7ff fc7a 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_2);			FSMC_WR_DAT(0x0000U);
 8001ce8:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8001cec:	f7ff fc64 	bl	80015b8 <FSMC_WR_REG>
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7ff fc73 	bl	80015dc <FSMC_WR_DAT>

	// VCOM  -1.325V
	FSMC_WR_REG(SETVCMOFF_0);		FSMC_WR_DAT(0x0000);
 8001cf6:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8001cfa:	f7ff fc5d 	bl	80015b8 <FSMC_WR_REG>
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7ff fc6c 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCMOFF_1);		FSMC_WR_DAT(0x0089);
 8001d04:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8001d08:	f7ff fc56 	bl	80015b8 <FSMC_WR_REG>
 8001d0c:	2089      	movs	r0, #137	; 0x89
 8001d0e:	f7ff fc65 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(GMBCTR2_BASE | 0x0033U);    FSMC_WR_DAT(0x007FU);
*/
	//**************************************************************************************************************************//

	// Select Page 0
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 8001d12:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001d16:	f7ff fc4f 	bl	80015b8 <FSMC_WR_REG>
 8001d1a:	2055      	movs	r0, #85	; 0x55
 8001d1c:	f7ff fc5e 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8001d20:	f24f 0001 	movw	r0, #61441	; 0xf001
 8001d24:	f7ff fc48 	bl	80015b8 <FSMC_WR_REG>
 8001d28:	20aa      	movs	r0, #170	; 0xaa
 8001d2a:	f7ff fc57 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 8001d2e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001d32:	f7ff fc41 	bl	80015b8 <FSMC_WR_REG>
 8001d36:	2052      	movs	r0, #82	; 0x52
 8001d38:	f7ff fc50 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8001d3c:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001d40:	f7ff fc3a 	bl	80015b8 <FSMC_WR_REG>
 8001d44:	2008      	movs	r0, #8
 8001d46:	f7ff fc49 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0000U);		// Select page 0
 8001d4a:	f24f 0004 	movw	r0, #61444	; 0xf004
 8001d4e:	f7ff fc33 	bl	80015b8 <FSMC_WR_REG>
 8001d52:	2000      	movs	r0, #0
 8001d54:	f7ff fc42 	bl	80015dc <FSMC_WR_DAT>

	// DISPLAY CONTROL
	FSMC_WR_REG(DOPCTR_0);			FSMC_WR_DAT(0x00CCU);
 8001d58:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8001d5c:	f7ff fc2c 	bl	80015b8 <FSMC_WR_REG>
 8001d60:	20cc      	movs	r0, #204	; 0xcc
 8001d62:	f7ff fc3b 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(DOPCTR_1);			FSMC_WR_DAT(0x0000U);
 8001d66:	f24b 1001 	movw	r0, #45313	; 0xb101
 8001d6a:	f7ff fc25 	bl	80015b8 <FSMC_WR_REG>
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f7ff fc34 	bl	80015dc <FSMC_WR_DAT>

	FSMC_WR_REG(DPRSLCTR);			FSMC_WR_DAT(0x0050U);			// Display Resolution 480RGB x 800
 8001d74:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001d78:	f7ff fc1e 	bl	80015b8 <FSMC_WR_REG>
 8001d7c:	2050      	movs	r0, #80	; 0x50
 8001d7e:	f7ff fc2d 	bl	80015dc <FSMC_WR_DAT>

	// SOURCE HOLD TIME
	FSMC_WR_REG(SDHDTCTR);			FSMC_WR_DAT(0x0005U);
 8001d82:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8001d86:	f7ff fc17 	bl	80015b8 <FSMC_WR_REG>
 8001d8a:	2005      	movs	r0, #5
 8001d8c:	f7ff fc26 	bl	80015dc <FSMC_WR_DAT>

	// Set Gate EQ
	FSMC_WR_REG(GSEQCTR_ST);		FSMC_WR_DAT(0x0070U);
 8001d90:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8001d94:	f7ff fc10 	bl	80015b8 <FSMC_WR_REG>
 8001d98:	2070      	movs	r0, #112	; 0x70
 8001d9a:	f7ff fc1f 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(GSEQCTR_CK);		FSMC_WR_DAT(0x0070U);
 8001d9e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8001da2:	f7ff fc09 	bl	80015b8 <FSMC_WR_REG>
 8001da6:	2070      	movs	r0, #112	; 0x70
 8001da8:	f7ff fc18 	bl	80015dc <FSMC_WR_DAT>

	// Source EQ control (Mode 2)
	FSMC_WR_REG(SDEQCTR_MOD );	FSMC_WR_DAT(0x0001U);
 8001dac:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8001db0:	f7ff fc02 	bl	80015b8 <FSMC_WR_REG>
 8001db4:	2001      	movs	r0, #1
 8001db6:	f7ff fc11 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS1);	FSMC_WR_DAT(0x0003U);
 8001dba:	f64b 0001 	movw	r0, #47105	; 0xb801
 8001dbe:	f7ff fbfb 	bl	80015b8 <FSMC_WR_REG>
 8001dc2:	2003      	movs	r0, #3
 8001dc4:	f7ff fc0a 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS2);	FSMC_WR_DAT(0x0003U);
 8001dc8:	f64b 0002 	movw	r0, #47106	; 0xb802
 8001dcc:	f7ff fbf4 	bl	80015b8 <FSMC_WR_REG>
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f7ff fc03 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS3);	FSMC_WR_DAT(0x0003U);
 8001dd6:	f64b 0003 	movw	r0, #47107	; 0xb803
 8001dda:	f7ff fbed 	bl	80015b8 <FSMC_WR_REG>
 8001dde:	2003      	movs	r0, #3
 8001de0:	f7ff fbfc 	bl	80015dc <FSMC_WR_DAT>

	// INVERSION MODE
	FSMC_WR_REG(INVCTR_NORM);		FSMC_WR_DAT(0x0002U);
 8001de4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8001de8:	f7ff fbe6 	bl	80015b8 <FSMC_WR_REG>
 8001dec:	2002      	movs	r0, #2
 8001dee:	f7ff fbf5 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_IDLE);		FSMC_WR_DAT(0x0000U);
 8001df2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8001df6:	f7ff fbdf 	bl	80015b8 <FSMC_WR_REG>
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff fbee 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_PART);		FSMC_WR_DAT(0x0000U);
 8001e00:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8001e04:	f7ff fbd8 	bl	80015b8 <FSMC_WR_REG>
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7ff fbe7 	bl	80015dc <FSMC_WR_DAT>

	// Timing control
	FSMC_WR_REG(0xC900);				FSMC_WR_DAT(0x00D0U);
 8001e0e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8001e12:	f7ff fbd1 	bl	80015b8 <FSMC_WR_REG>
 8001e16:	20d0      	movs	r0, #208	; 0xd0
 8001e18:	f7ff fbe0 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(0xC901);				FSMC_WR_DAT(0x0002U);
 8001e1c:	f64c 1001 	movw	r0, #51457	; 0xc901
 8001e20:	f7ff fbca 	bl	80015b8 <FSMC_WR_REG>
 8001e24:	2002      	movs	r0, #2
 8001e26:	f7ff fbd9 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(0xC902);				FSMC_WR_DAT(0x0050U);
 8001e2a:	f64c 1002 	movw	r0, #51458	; 0xc902
 8001e2e:	f7ff fbc3 	bl	80015b8 <FSMC_WR_REG>
 8001e32:	2050      	movs	r0, #80	; 0x50
 8001e34:	f7ff fbd2 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(0xC903);				FSMC_WR_DAT(0x0050U);
 8001e38:	f64c 1003 	movw	r0, #51459	; 0xc903
 8001e3c:	f7ff fbbc 	bl	80015b8 <FSMC_WR_REG>
 8001e40:	2050      	movs	r0, #80	; 0x50
 8001e42:	f7ff fbcb 	bl	80015dc <FSMC_WR_DAT>
	FSMC_WR_REG(0xC904);				FSMC_WR_DAT(0x0050U);
 8001e46:	f64c 1004 	movw	r0, #51460	; 0xc904
 8001e4a:	f7ff fbb5 	bl	80015b8 <FSMC_WR_REG>
 8001e4e:	2050      	movs	r0, #80	; 0x50
 8001e50:	f7ff fbc4 	bl	80015dc <FSMC_WR_DAT>

	//**************************************************************************************************************************//
	// User Command Set
	FSMC_WR_REG(TEON);   				FSMC_WR_DAT(0x0000U);			// V-Blanking information only
 8001e54:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8001e58:	f7ff fbae 	bl	80015b8 <FSMC_WR_REG>
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7ff fbbd 	bl	80015dc <FSMC_WR_DAT>


	FSMC_WR_REG(COLMOD);   			FSMC_WR_DAT(0x0055U);		// RGB and MCU Interface Data format 16-Bits
 8001e62:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8001e66:	f7ff fba7 	bl	80015b8 <FSMC_WR_REG>
 8001e6a:	2055      	movs	r0, #85	; 0x55
 8001e6c:	f7ff fbb6 	bl	80015dc <FSMC_WR_DAT>
 8001e70:	e002      	b.n	8001e78 <NT35510_Init+0x404>
 8001e72:	bf00      	nop
 8001e74:	40020800 	.word	0x40020800
	FSMC_WR_REG(MADCTL);   			FSMC_WR_DAT(0x0000U);		// MADCTL: MY MX MV RGB MH RSMX RSMY
 8001e78:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8001e7c:	f7ff fb9c 	bl	80015b8 <FSMC_WR_REG>
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7ff fbab 	bl	80015dc <FSMC_WR_DAT>


	FSMC_WR_REG(SLPOUT);   						// Sleep Out
 8001e86:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8001e8a:	f7ff fb95 	bl	80015b8 <FSMC_WR_REG>

	HAL_Delay(120);
 8001e8e:	2078      	movs	r0, #120	; 0x78
 8001e90:	f001 f8f0 	bl	8003074 <HAL_Delay>

	FSMC_WR_REG(DISPON);   						// Display On
 8001e94:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8001e98:	f7ff fb8e 	bl	80015b8 <FSMC_WR_REG>

	HAL_Delay(200);
 8001e9c:	20c8      	movs	r0, #200	; 0xc8
 8001e9e:	f001 f8e9 	bl	8003074 <HAL_Delay>

	LCD_SetDirection(VERTICAL_UP);		// Vertical-up display orientation as default
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff fc14 	bl	80016d0 <LCD_SetDirection>
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <MX_GPIO_Init>:

/** Configure pins
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08c      	sub	sp, #48	; 0x30
 8001eb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
 8001ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a69      	ldr	r2, [pc, #420]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001ecc:	f043 0320 	orr.w	r3, r3, #32
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b67      	ldr	r3, [pc, #412]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	4b63      	ldr	r3, [pc, #396]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a62      	ldr	r2, [pc, #392]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b60      	ldr	r3, [pc, #384]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	4b5c      	ldr	r3, [pc, #368]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a5b      	ldr	r2, [pc, #364]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b59      	ldr	r3, [pc, #356]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b55      	ldr	r3, [pc, #340]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a54      	ldr	r2, [pc, #336]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001f20:	f043 0310 	orr.w	r3, r3, #16
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b52      	ldr	r3, [pc, #328]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	4b4e      	ldr	r3, [pc, #312]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a4d      	ldr	r2, [pc, #308]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001f3c:	f043 0308 	orr.w	r3, r3, #8
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a46      	ldr	r2, [pc, #280]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b44      	ldr	r3, [pc, #272]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	4b40      	ldr	r3, [pc, #256]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a3f      	ldr	r2, [pc, #252]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <MX_GPIO_Init+0x1c4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OV7670_RST_GPIO_Port, OV7670_RST_Pin, GPIO_PIN_RESET);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2104      	movs	r1, #4
 8001f8a:	483a      	ldr	r0, [pc, #232]	; (8002074 <MX_GPIO_Init+0x1c8>)
 8001f8c:	f001 fdd8 	bl	8003b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f90:	2200      	movs	r2, #0
 8001f92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f96:	4838      	ldr	r0, [pc, #224]	; (8002078 <MX_GPIO_Init+0x1cc>)
 8001f98:	f001 fdd2 	bl	8003b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RST_GPIO_Port, FSMC_RST_Pin, GPIO_PIN_RESET);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2140      	movs	r1, #64	; 0x40
 8001fa0:	4836      	ldr	r0, [pc, #216]	; (800207c <MX_GPIO_Init+0x1d0>)
 8001fa2:	f001 fdcd 	bl	8003b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_RST_Pin;
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001faa:	2301      	movs	r3, #1
 8001fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OV7670_RST_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f107 031c 	add.w	r3, r7, #28
 8001fba:	4619      	mov	r1, r3
 8001fbc:	482d      	ldr	r0, [pc, #180]	; (8002074 <MX_GPIO_Init+0x1c8>)
 8001fbe:	f001 fc2b 	bl	8003818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OV7670_D0_Pin|OV7670_D1_Pin|OV7670_D2_Pin|OV7670_D3_Pin
 8001fc2:	23ff      	movs	r3, #255	; 0xff
 8001fc4:	61fb      	str	r3, [r7, #28]
                          |OV7670_D4_Pin|OV7670_D5_Pin|OV7670_D6_Pin|OV7670_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4828      	ldr	r0, [pc, #160]	; (8002078 <MX_GPIO_Init+0x1cc>)
 8001fd6:	f001 fc1f 	bl	8003818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_HREF_Pin;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fde:	4b28      	ldr	r3, [pc, #160]	; (8002080 <MX_GPIO_Init+0x1d4>)
 8001fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_HREF_GPIO_Port, &GPIO_InitStruct);
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	4619      	mov	r1, r3
 8001fec:	4825      	ldr	r0, [pc, #148]	; (8002084 <MX_GPIO_Init+0x1d8>)
 8001fee:	f001 fc13 	bl	8003818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_VSYNC_Pin;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <MX_GPIO_Init+0x1dc>)
 8001ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	481f      	ldr	r0, [pc, #124]	; (8002084 <MX_GPIO_Init+0x1d8>)
 8002006:	f001 fc07 	bl	8003818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800200a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002010:	2301      	movs	r3, #1
 8002012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f107 031c 	add.w	r3, r7, #28
 8002020:	4619      	mov	r1, r3
 8002022:	4815      	ldr	r0, [pc, #84]	; (8002078 <MX_GPIO_Init+0x1cc>)
 8002024:	f001 fbf8 	bl	8003818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RST_Pin;
 8002028:	2340      	movs	r3, #64	; 0x40
 800202a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202c:	2301      	movs	r3, #1
 800202e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2300      	movs	r3, #0
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RST_GPIO_Port, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	480f      	ldr	r0, [pc, #60]	; (800207c <MX_GPIO_Init+0x1d0>)
 8002040:	f001 fbea 	bl	8003818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002056:	2300      	movs	r3, #0
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4619      	mov	r1, r3
 8002060:	4806      	ldr	r0, [pc, #24]	; (800207c <MX_GPIO_Init+0x1d0>)
 8002062:	f001 fbd9 	bl	8003818 <HAL_GPIO_Init>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);*/

}
 8002066:	bf00      	nop
 8002068:	3730      	adds	r7, #48	; 0x30
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	40021400 	.word	0x40021400
 8002078:	40020400 	.word	0x40020400
 800207c:	40020800 	.word	0x40020800
 8002080:	10210000 	.word	0x10210000
 8002084:	40021800 	.word	0x40021800
 8002088:	10310000 	.word	0x10310000

0800208c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <MX_I2C2_Init+0x50>)
 8002092:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <MX_I2C2_Init+0x54>)
 8002094:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <MX_I2C2_Init+0x50>)
 8002098:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <MX_I2C2_Init+0x58>)
 800209a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <MX_I2C2_Init+0x50>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 66;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <MX_I2C2_Init+0x50>)
 80020a4:	2242      	movs	r2, #66	; 0x42
 80020a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <MX_I2C2_Init+0x50>)
 80020aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <MX_I2C2_Init+0x50>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <MX_I2C2_Init+0x50>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <MX_I2C2_Init+0x50>)
 80020be:	2200      	movs	r2, #0
 80020c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <MX_I2C2_Init+0x50>)
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020c8:	4804      	ldr	r0, [pc, #16]	; (80020dc <MX_I2C2_Init+0x50>)
 80020ca:	f001 fd6b 	bl	8003ba4 <HAL_I2C_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80020d4:	f000 f95a 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2004a2b4 	.word	0x2004a2b4
 80020e0:	40005800 	.word	0x40005800
 80020e4:	00061a80 	.word	0x00061a80

080020e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	; 0x28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1d      	ldr	r2, [pc, #116]	; (800217c <HAL_I2C_MspInit+0x94>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d133      	bne.n	8002172 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_I2C_MspInit+0x98>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <HAL_I2C_MspInit+0x98>)
 8002114:	f043 0320 	orr.w	r3, r3, #32
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_I2C_MspInit+0x98>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002126:	2303      	movs	r3, #3
 8002128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800212a:	2312      	movs	r3, #18
 800212c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800212e:	2301      	movs	r3, #1
 8002130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002136:	2304      	movs	r3, #4
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4619      	mov	r1, r3
 8002140:	4810      	ldr	r0, [pc, #64]	; (8002184 <HAL_I2C_MspInit+0x9c>)
 8002142:	f001 fb69 	bl	8003818 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <HAL_I2C_MspInit+0x98>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <HAL_I2C_MspInit+0x98>)
 8002150:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_I2C_MspInit+0x98>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	2021      	movs	r0, #33	; 0x21
 8002168:	f001 f8a7 	bl	80032ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800216c:	2021      	movs	r0, #33	; 0x21
 800216e:	f001 f8c0 	bl	80032f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002172:	bf00      	nop
 8002174:	3728      	adds	r7, #40	; 0x28
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40005800 	.word	0x40005800
 8002180:	40023800 	.word	0x40023800
 8002184:	40021400 	.word	0x40021400

08002188 <i2c_read_reg>:
extern I2C_HandleTypeDef hi2c2;


//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
uint8_t i2c_read_reg(uint8_t address, uint8_t reg)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af02      	add	r7, sp, #8
 800218e:	4603      	mov	r3, r0
 8002190:	460a      	mov	r2, r1
 8002192:	71fb      	strb	r3, [r7, #7]
 8002194:	4613      	mov	r3, r2
 8002196:	71bb      	strb	r3, [r7, #6]
	tx_data[0] = reg;
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <i2c_read_reg+0x48>)
 800219a:	79bb      	ldrb	r3, [r7, #6]
 800219c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 2, 10);
 800219e:	230a      	movs	r3, #10
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2302      	movs	r3, #2
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <i2c_read_reg+0x48>)
 80021a6:	2142      	movs	r1, #66	; 0x42
 80021a8:	480a      	ldr	r0, [pc, #40]	; (80021d4 <i2c_read_reg+0x4c>)
 80021aa:	f001 fe3f 	bl	8003e2c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, 0x42U, rx_data, 1, 10);
 80021ae:	230a      	movs	r3, #10
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2301      	movs	r3, #1
 80021b4:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <i2c_read_reg+0x50>)
 80021b6:	2142      	movs	r1, #66	; 0x42
 80021b8:	4806      	ldr	r0, [pc, #24]	; (80021d4 <i2c_read_reg+0x4c>)
 80021ba:	f001 ff35 	bl	8004028 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 80021be:	2001      	movs	r0, #1
 80021c0:	f000 ff58 	bl	8003074 <HAL_Delay>
	return rx_data[0];
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <i2c_read_reg+0x50>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20027f2c 	.word	0x20027f2c
 80021d4:	2004a2b4 	.word	0x2004a2b4
 80021d8:	20027f34 	.word	0x20027f34

080021dc <i2c_write_reg>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void i2c_write_reg(uint8_t address, uint8_t reg, uint8_t data)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
 80021e6:	460b      	mov	r3, r1
 80021e8:	71bb      	strb	r3, [r7, #6]
 80021ea:	4613      	mov	r3, r2
 80021ec:	717b      	strb	r3, [r7, #5]
	tx_data[0] = reg;
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <i2c_write_reg+0x3c>)
 80021f0:	79bb      	ldrb	r3, [r7, #6]
 80021f2:	7013      	strb	r3, [r2, #0]
	tx_data[1] = data;
 80021f4:	4a08      	ldr	r2, [pc, #32]	; (8002218 <i2c_write_reg+0x3c>)
 80021f6:	797b      	ldrb	r3, [r7, #5]
 80021f8:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 3, 10);
 80021fa:	230a      	movs	r3, #10
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	2303      	movs	r3, #3
 8002200:	4a05      	ldr	r2, [pc, #20]	; (8002218 <i2c_write_reg+0x3c>)
 8002202:	2142      	movs	r1, #66	; 0x42
 8002204:	4805      	ldr	r0, [pc, #20]	; (800221c <i2c_write_reg+0x40>)
 8002206:	f001 fe11 	bl	8003e2c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800220a:	2001      	movs	r0, #1
 800220c:	f000 ff32 	bl	8003074 <HAL_Delay>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20027f2c 	.word	0x20027f2c
 800221c:	2004a2b4 	.word	0x2004a2b4

08002220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002224:	f000 feb4 	bl	8002f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002228:	f000 f812 	bl	8002250 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800222c:	f7ff fe3e 	bl	8001eac <MX_GPIO_Init>
  MX_DMA_Init();
 8002230:	f7ff f8b2 	bl	8001398 <MX_DMA_Init>
  MX_TIM1_Init();
 8002234:	f000 fbaa 	bl	800298c <MX_TIM1_Init>
  MX_FSMC_Init();
 8002238:	f7ff f8c8 	bl	80013cc <MX_FSMC_Init>
  MX_I2C2_Init();
 800223c:	f7ff ff26 	bl	800208c <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8002240:	f000 fe00 	bl	8002e44 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 8002244:	f7fe feee 	bl	8001024 <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main_loop();
 8002248:	f7fe ff62 	bl	8001110 <app_main_loop>
 800224c:	e7fc      	b.n	8002248 <main+0x28>
	...

08002250 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b0aa      	sub	sp, #168	; 0xa8
 8002254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002256:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800225a:	2234      	movs	r2, #52	; 0x34
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f022 fed0 	bl	8025004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002264:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002274:	f107 0308 	add.w	r3, r7, #8
 8002278:	2258      	movs	r2, #88	; 0x58
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f022 fec1 	bl	8025004 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	4b3f      	ldr	r3, [pc, #252]	; (8002384 <_Z18SystemClock_Configv+0x134>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a3e      	ldr	r2, [pc, #248]	; (8002384 <_Z18SystemClock_Configv+0x134>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
 8002292:	4b3c      	ldr	r3, [pc, #240]	; (8002384 <_Z18SystemClock_Configv+0x134>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800229e:	2300      	movs	r3, #0
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	4b39      	ldr	r3, [pc, #228]	; (8002388 <_Z18SystemClock_Configv+0x138>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a38      	ldr	r2, [pc, #224]	; (8002388 <_Z18SystemClock_Configv+0x138>)
 80022a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b36      	ldr	r3, [pc, #216]	; (8002388 <_Z18SystemClock_Configv+0x138>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022ba:	2302      	movs	r3, #2
 80022bc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022be:	2301      	movs	r3, #1
 80022c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022c4:	2310      	movs	r3, #16
 80022c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ca:	2302      	movs	r3, #2
 80022cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022d6:	2308      	movs	r3, #8
 80022d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 100;
 80022dc:	2364      	movs	r3, #100	; 0x64
 80022de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022e2:	2302      	movs	r3, #2
 80022e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022e8:	2302      	movs	r3, #2
 80022ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022ee:	2302      	movs	r3, #2
 80022f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 fc49 	bl	8006b90 <HAL_RCC_OscConfig>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 800230e:	f000 f83d 	bl	800238c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002312:	230f      	movs	r3, #15
 8002314:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002316:	2302      	movs	r3, #2
 8002318:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800231a:	2300      	movs	r3, #0
 800231c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800231e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002322:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002324:	2300      	movs	r3, #0
 8002326:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002328:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800232c:	2103      	movs	r1, #3
 800232e:	4618      	mov	r0, r3
 8002330:	f003 ff6a 	bl	8006208 <HAL_RCC_ClockConfig>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	bf14      	ite	ne
 800233a:	2301      	movne	r3, #1
 800233c:	2300      	moveq	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 8002344:	f000 f822 	bl	800238c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
 8002348:	2304      	movs	r3, #4
 800234a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800234c:	2301      	movs	r3, #1
 800234e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002352:	f107 0308 	add.w	r3, r7, #8
 8002356:	4618      	mov	r0, r3
 8002358:	f004 f98e 	bl	8006678 <HAL_RCCEx_PeriphCLKConfig>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf14      	ite	ne
 8002362:	2301      	movne	r3, #1
 8002364:	2300      	moveq	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <_Z18SystemClock_Configv+0x120>
  {
    Error_Handler();
 800236c:	f000 f80e 	bl	800238c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_5);
 8002370:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002374:	2100      	movs	r1, #0
 8002376:	2001      	movs	r0, #1
 8002378:	f004 f82c 	bl	80063d4 <HAL_RCC_MCOConfig>
}
 800237c:	bf00      	nop
 800237e:	37a8      	adds	r7, #168	; 0xa8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40023800 	.word	0x40023800
 8002388:	40007000 	.word	0x40007000

0800238c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002390:	b672      	cpsid	i
}
 8002392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002394:	e7fe      	b.n	8002394 <Error_Handler+0x8>

08002396 <saturation>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void saturation(int8_t s)  //-2 to 2
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	71fb      	strb	r3, [r7, #7]
	//color matrix values
	writeRegister(OV7670_MTX1,	0x80 + 0x20 * s);
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	3304      	adds	r3, #4
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	015b      	lsls	r3, r3, #5
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	4619      	mov	r1, r3
 80023ae:	204f      	movs	r0, #79	; 0x4f
 80023b0:	f000 f8d8 	bl	8002564 <writeRegister>
	writeRegister(OV7670_MTX2, 	0x80 + 0x20 * s);
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	3304      	adds	r3, #4
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	015b      	lsls	r3, r3, #5
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	4619      	mov	r1, r3
 80023c2:	2050      	movs	r0, #80	; 0x50
 80023c4:	f000 f8ce 	bl	8002564 <writeRegister>
	writeRegister(OV7670_MTX3, 	0x00);
 80023c8:	2100      	movs	r1, #0
 80023ca:	2051      	movs	r0, #81	; 0x51
 80023cc:	f000 f8ca 	bl	8002564 <writeRegister>
	writeRegister(OV7670_MTX4, 	0x22 + (0x11 * s) / 2);
 80023d0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80023d4:	4613      	mov	r3, r2
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	4413      	add	r3, r2
 80023da:	0fda      	lsrs	r2, r3, #31
 80023dc:	4413      	add	r3, r2
 80023de:	105b      	asrs	r3, r3, #1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	3322      	adds	r3, #34	; 0x22
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	4619      	mov	r1, r3
 80023e8:	2052      	movs	r0, #82	; 0x52
 80023ea:	f000 f8bb 	bl	8002564 <writeRegister>
	writeRegister(OV7670_MTX5, 	0x5e + (0x2f * s) / 2);
 80023ee:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	0fda      	lsrs	r2, r3, #31
 80023fe:	4413      	add	r3, r2
 8002400:	105b      	asrs	r3, r3, #1
 8002402:	b2db      	uxtb	r3, r3
 8002404:	335e      	adds	r3, #94	; 0x5e
 8002406:	b2db      	uxtb	r3, r3
 8002408:	4619      	mov	r1, r3
 800240a:	2053      	movs	r0, #83	; 0x53
 800240c:	f000 f8aa 	bl	8002564 <writeRegister>
	writeRegister(OV7670_MTX6, 	0x80 + 0x20 * s);
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	3304      	adds	r3, #4
 8002416:	b2db      	uxtb	r3, r3
 8002418:	015b      	lsls	r3, r3, #5
 800241a:	b2db      	uxtb	r3, r3
 800241c:	4619      	mov	r1, r3
 800241e:	2054      	movs	r0, #84	; 0x54
 8002420:	f000 f8a0 	bl	8002564 <writeRegister>
	writeRegister(OV7670_MTXS, 	0x9e);  //matrix signs
 8002424:	219e      	movs	r1, #158	; 0x9e
 8002426:	2058      	movs	r0, #88	; 0x58
 8002428:	f000 f89c 	bl	8002564 <writeRegister>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <frameControl>:


//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void frameControl(int16_t hStart,  int16_t vStart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	460a      	mov	r2, r1
 800243e:	80fb      	strh	r3, [r7, #6]
 8002440:	4613      	mov	r3, r2
 8002442:	80bb      	strh	r3, [r7, #4]
	int hStop = (hStart + 640) % 784;
 8002444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002448:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800244c:	4a2e      	ldr	r2, [pc, #184]	; (8002508 <frameControl+0xd4>)
 800244e:	fb82 1203 	smull	r1, r2, r2, r3
 8002452:	1211      	asrs	r1, r2, #8
 8002454:	17da      	asrs	r2, r3, #31
 8002456:	1a8a      	subs	r2, r1, r2
 8002458:	f44f 7144 	mov.w	r1, #784	; 0x310
 800245c:	fb01 f202 	mul.w	r2, r1, r2
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
	writeRegister(OV7670_HSTART,	hStart >> 3);
 8002464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002468:	10db      	asrs	r3, r3, #3
 800246a:	b21b      	sxth	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4619      	mov	r1, r3
 8002470:	2017      	movs	r0, #23
 8002472:	f000 f877 	bl	8002564 <writeRegister>
	writeRegister(OV7670_HSTOP,		hStop >> 3);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	10db      	asrs	r3, r3, #3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	4619      	mov	r1, r3
 800247e:	2018      	movs	r0, #24
 8002480:	f000 f870 	bl	8002564 <writeRegister>
	writeRegister(OV7670_HREF, 		((hStop & 0b111) << 3) | (hStart & 0b111));
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	b25b      	sxtb	r3, r3
 800248a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800248e:	b25a      	sxtb	r2, r3
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	b25b      	sxtb	r3, r3
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	b25b      	sxtb	r3, r3
 800249a:	4313      	orrs	r3, r2
 800249c:	b25b      	sxtb	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	4619      	mov	r1, r3
 80024a2:	2032      	movs	r0, #50	; 0x32
 80024a4:	f000 f85e 	bl	8002564 <writeRegister>

	int vStop = (vStart + 480);
 80024a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024ac:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80024b0:	60bb      	str	r3, [r7, #8]
	writeRegister(OV7670_VSTRT, 	vStart >> 2);
 80024b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024b6:	109b      	asrs	r3, r3, #2
 80024b8:	b21b      	sxth	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4619      	mov	r1, r3
 80024be:	2019      	movs	r0, #25
 80024c0:	f000 f850 	bl	8002564 <writeRegister>
	writeRegister(OV7670_VSTOP, 	vStop >> 2);
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	109b      	asrs	r3, r3, #2
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	4619      	mov	r1, r3
 80024cc:	201a      	movs	r0, #26
 80024ce:	f000 f849 	bl	8002564 <writeRegister>
	writeRegister(OV7670_VREF, 		((vStop & 0b11) << 2) | (vStart & 0b11));
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	b25b      	sxtb	r3, r3
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	b25a      	sxtb	r2, r3
 80024de:	88bb      	ldrh	r3, [r7, #4]
 80024e0:	b25b      	sxtb	r3, r3
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	4313      	orrs	r3, r2
 80024ea:	b25b      	sxtb	r3, r3
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	4619      	mov	r1, r3
 80024f0:	2003      	movs	r0, #3
 80024f2:	f000 f837 	bl	8002564 <writeRegister>
	writeRegister(OV7670_COM10, 	0x20U);
 80024f6:	2120      	movs	r1, #32
 80024f8:	2015      	movs	r0, #21
 80024fa:	f000 f833 	bl	8002564 <writeRegister>
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	5397829d 	.word	0x5397829d

0800250c <subsamplingControl>:


//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void subsamplingControl(int8_t com14, int8_t downSample, int8_t pclk_div)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
 8002516:	460b      	mov	r3, r1
 8002518:	71bb      	strb	r3, [r7, #6]
 800251a:	4613      	mov	r3, r2
 800251c:	717b      	strb	r3, [r7, #5]
	writeRegister(OV7670_COM3, 			0x04);  //DCW enable
 800251e:	2104      	movs	r1, #4
 8002520:	200c      	movs	r0, #12
 8002522:	f000 f81f 	bl	8002564 <writeRegister>

	writeRegister(OV7670_COM14, 		com14);       //pixel clock divided by 4, manual scaling enable, DCW and PCLK controlled by register
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	4619      	mov	r1, r3
 800252a:	203e      	movs	r0, #62	; 0x3e
 800252c:	f000 f81a 	bl	8002564 <writeRegister>
	writeRegister(OV7670_SCL_XSC, 		0x3a);
 8002530:	213a      	movs	r1, #58	; 0x3a
 8002532:	2070      	movs	r0, #112	; 0x70
 8002534:	f000 f816 	bl	8002564 <writeRegister>
	writeRegister(OV7670_SCL_YSC, 		0x35);
 8002538:	2135      	movs	r1, #53	; 0x35
 800253a:	2071      	movs	r0, #113	; 0x71
 800253c:	f000 f812 	bl	8002564 <writeRegister>

	writeRegister(OV7670_SCL_DCWCTR, 	downSample);
 8002540:	79bb      	ldrb	r3, [r7, #6]
 8002542:	4619      	mov	r1, r3
 8002544:	2072      	movs	r0, #114	; 0x72
 8002546:	f000 f80d 	bl	8002564 <writeRegister>
	writeRegister(OV7670_SCL_PCLK_DIV, 	pclk_div); //pixel clock divided by 4
 800254a:	797b      	ldrb	r3, [r7, #5]
 800254c:	4619      	mov	r1, r3
 800254e:	2073      	movs	r0, #115	; 0x73
 8002550:	f000 f808 	bl	8002564 <writeRegister>
	writeRegister(OV7670_SCL_PCLK_DLY, 	0x02);
 8002554:	2102      	movs	r1, #2
 8002556:	20a2      	movs	r0, #162	; 0xa2
 8002558:	f000 f804 	bl	8002564 <writeRegister>
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <writeRegister>:
}


//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void writeRegister(unsigned char reg, unsigned char val)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	460a      	mov	r2, r1
 800256e:	71fb      	strb	r3, [r7, #7]
 8002570:	4613      	mov	r3, r2
 8002572:	71bb      	strb	r3, [r7, #6]
	//uint8_t buff[25] = {0};

	//sprintf(buff, "0x%02x,0x%02x,", reg, i2c_read_reg(0x43, reg));
	i2c_write_reg(0x42U, reg, val);
 8002574:	79ba      	ldrb	r2, [r7, #6]
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	4619      	mov	r1, r3
 800257a:	2042      	movs	r0, #66	; 0x42
 800257c:	f7ff fe2e 	bl	80021dc <i2c_write_reg>
	//sprintf(buff + strlen(buff), "0x%02x\r\n", i2c_read_reg(0x43, reg));
	//uart_write(buff);
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <readRegister>:


//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
uint8_t readRegister(unsigned char reg)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
	return i2c_read_reg(0x42U, reg);
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	4619      	mov	r1, r3
 8002596:	2042      	movs	r0, #66	; 0x42
 8002598:	f7ff fdf6 	bl	8002188 <i2c_read_reg>
 800259c:	4603      	mov	r3, r0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <setMode>:


//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void setMode(ov7670_res_fmt_t resolution)
{   // 0,1 or 2 for QQQ, QQ, or Q VGA.  All are RGB565
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	71fb      	strb	r3, [r7, #7]
	int xres;
	int yres;


	if (resolution < 0 || resolution > 2) {
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <setMode+0x14>
		resolution = 2;
 80025b6:	2302      	movs	r3, #2
 80025b8:	71fb      	strb	r3, [r7, #7]
	}

	writeRegister(OV7670_COM7,	0x80U);				// all registers default
 80025ba:	2180      	movs	r1, #128	; 0x80
 80025bc:	2012      	movs	r0, #18
 80025be:	f7ff ffd1 	bl	8002564 <writeRegister>
	writeRegister(OV7670_CLKRC,	0x80U);				// double clock?? My spec sheet says Reserved
 80025c2:	2180      	movs	r1, #128	; 0x80
 80025c4:	2011      	movs	r0, #17
 80025c6:	f7ff ffcd 	bl	8002564 <writeRegister>
	writeRegister(OV7670_COM11,	0x08U | 0x02U);		// enable auto 50/60Hz detect + exposure timing can be less...
 80025ca:	210a      	movs	r1, #10
 80025cc:	203b      	movs	r0, #59	; 0x3b
 80025ce:	f7ff ffc9 	bl	8002564 <writeRegister>
	writeRegister(OV7670_COM7,	0x04U);				// RGB
 80025d2:	2104      	movs	r1, #4
 80025d4:	2012      	movs	r0, #18
 80025d6:	f7ff ffc5 	bl	8002564 <writeRegister>
	writeRegister(OV7670_COM15,	0xC0U | 0x10U);		// RGB565
 80025da:	21d0      	movs	r1, #208	; 0xd0
 80025dc:	2040      	movs	r0, #64	; 0x40
 80025de:	f7ff ffc1 	bl	8002564 <writeRegister>

	switch (resolution) {
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d024      	beq.n	8002632 <setMode+0x8c>
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	dc32      	bgt.n	8002652 <setMode+0xac>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <setMode+0x50>
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d00f      	beq.n	8002614 <setMode+0x6e>
 80025f4:	e02d      	b.n	8002652 <setMode+0xac>
	case 0:
		xres = 80;
 80025f6:	2350      	movs	r3, #80	; 0x50
 80025f8:	617b      	str	r3, [r7, #20]
		yres = 60;
 80025fa:	233c      	movs	r3, #60	; 0x3c
 80025fc:	613b      	str	r3, [r7, #16]
		subsamplingControl(0x1B, 0x33, 0xF3);
 80025fe:	f06f 020c 	mvn.w	r2, #12
 8002602:	2133      	movs	r1, #51	; 0x33
 8002604:	201b      	movs	r0, #27
 8002606:	f7ff ff81 	bl	800250c <subsamplingControl>
		frameControl(196, 14);
 800260a:	210e      	movs	r1, #14
 800260c:	20c4      	movs	r0, #196	; 0xc4
 800260e:	f7ff ff11 	bl	8002434 <frameControl>
		break;
 8002612:	e01e      	b.n	8002652 <setMode+0xac>
	case 1:
		xres = 160;
 8002614:	23a0      	movs	r3, #160	; 0xa0
 8002616:	617b      	str	r3, [r7, #20]
		yres = 120;
 8002618:	2378      	movs	r3, #120	; 0x78
 800261a:	613b      	str	r3, [r7, #16]
		subsamplingControl(0x1A, 0x22, 0xF2);
 800261c:	f06f 020d 	mvn.w	r2, #13
 8002620:	2122      	movs	r1, #34	; 0x22
 8002622:	201a      	movs	r0, #26
 8002624:	f7ff ff72 	bl	800250c <subsamplingControl>
		frameControl(174, 14);
 8002628:	210e      	movs	r1, #14
 800262a:	20ae      	movs	r0, #174	; 0xae
 800262c:	f7ff ff02 	bl	8002434 <frameControl>
		break;
 8002630:	e00f      	b.n	8002652 <setMode+0xac>
	case 2:
		xres = 320;
 8002632:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002636:	617b      	str	r3, [r7, #20]
		yres = 240;
 8002638:	23f0      	movs	r3, #240	; 0xf0
 800263a:	613b      	str	r3, [r7, #16]
		subsamplingControl(0x19, 0x11, 0xF1);
 800263c:	f06f 020e 	mvn.w	r2, #14
 8002640:	2111      	movs	r1, #17
 8002642:	2019      	movs	r0, #25
 8002644:	f7ff ff62 	bl	800250c <subsamplingControl>
		frameControl(154, 14);
 8002648:	210e      	movs	r1, #14
 800264a:	209a      	movs	r0, #154	; 0x9a
 800264c:	f7ff fef2 	bl	8002434 <frameControl>
		break;
 8002650:	bf00      	nop
	}

	//writeRegister(OV7670_COM10, 0x02); //VSYNC negative
	//writeRegister(OV7670_MVFP, 0x2b);  //mirror flip

	writeRegister(0xB0U, 			0x84U); // no clue what this is but it's most important for colors
 8002652:	2184      	movs	r1, #132	; 0x84
 8002654:	20b0      	movs	r0, #176	; 0xb0
 8002656:	f7ff ff85 	bl	8002564 <writeRegister>
	saturation(0);
 800265a:	2000      	movs	r0, #0
 800265c:	f7ff fe9b 	bl	8002396 <saturation>
	writeRegister(OV7670_COM8, 		0xE7U); // AGC AWB AEC all on
 8002660:	21e7      	movs	r1, #231	; 0xe7
 8002662:	2013      	movs	r0, #19
 8002664:	f7ff ff7e 	bl	8002564 <writeRegister>
	writeRegister(OV7670_AWBCTR0, 	0x9FU); // Simple AWB
 8002668:	219f      	movs	r1, #159	; 0x9f
 800266a:	206f      	movs	r0, #111	; 0x6f
 800266c:	f7ff ff7a 	bl	8002564 <writeRegister>

	// What is this comment about? I tried but don't see any difference.
	// Line 1029 of https://github.com/yandex/smart/blob/master/drivers/media/i2c/ov7670.c
	writeRegister(OV7670_CLKRC, 	0x80U);
 8002670:	2180      	movs	r1, #128	; 0x80
 8002672:	2011      	movs	r0, #17
 8002674:	f7ff ff76 	bl	8002564 <writeRegister>

	HAL_Delay(50);
 8002678:	2032      	movs	r0, #50	; 0x32
 800267a:	f000 fcfb 	bl	8003074 <HAL_Delay>

	/**/
	uint16_t exposure = 200;
 800267e:	23c8      	movs	r3, #200	; 0xc8
 8002680:	81fb      	strh	r3, [r7, #14]
	uint8_t com1 = exposure & 0x03U;			// AEC[1:0]
 8002682:	89fb      	ldrh	r3, [r7, #14]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	737b      	strb	r3, [r7, #13]
	uint8_t aech = (exposure >> 2) & 0xFFU;		// AEC[9:2]
 800268c:	89fb      	ldrh	r3, [r7, #14]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	b29b      	uxth	r3, r3
 8002692:	733b      	strb	r3, [r7, #12]
	uint8_t aechh = (exposure >> 10) & 0xFFU;	// AEC[15:10]
 8002694:	89fb      	ldrh	r3, [r7, #14]
 8002696:	0a9b      	lsrs	r3, r3, #10
 8002698:	b29b      	uxth	r3, r3
 800269a:	72fb      	strb	r3, [r7, #11]

	writeRegister(OV7670_COM1, 		(readRegister(OV7670_COM1) & ~0x03U) | com1);
 800269c:	2004      	movs	r0, #4
 800269e:	f7ff ff73 	bl	8002588 <readRegister>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f023 0303 	bic.w	r3, r3, #3
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	7b7b      	ldrb	r3, [r7, #13]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	4619      	mov	r1, r3
 80026b2:	2004      	movs	r0, #4
 80026b4:	f7ff ff56 	bl	8002564 <writeRegister>
	writeRegister(OV7670_AECH, 		aech);
 80026b8:	7b3b      	ldrb	r3, [r7, #12]
 80026ba:	4619      	mov	r1, r3
 80026bc:	2010      	movs	r0, #16
 80026be:	f7ff ff51 	bl	8002564 <writeRegister>
	writeRegister(OV7670_AECHH, 	aechh);
 80026c2:	7afb      	ldrb	r3, [r7, #11]
 80026c4:	4619      	mov	r1, r3
 80026c6:	2007      	movs	r0, #7
 80026c8:	f7ff ff4c 	bl	8002564 <writeRegister>
}
 80026cc:	bf00      	nop
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_MspInit+0x4c>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <HAL_MspInit+0x4c>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <HAL_MspInit+0x4c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	603b      	str	r3, [r7, #0]
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_MspInit+0x4c>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a08      	ldr	r2, [pc, #32]	; (8002720 <HAL_MspInit+0x4c>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_MspInit+0x4c>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800

08002724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <NMI_Handler+0x4>

0800272a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800272e:	e7fe      	b.n	800272e <HardFault_Handler+0x4>

08002730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <MemManage_Handler+0x4>

08002736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800273a:	e7fe      	b.n	800273a <BusFault_Handler+0x4>

0800273c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <UsageFault_Handler+0x4>

08002742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002770:	f000 fc60 	bl	8003034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}

08002778 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800277c:	2001      	movs	r0, #1
 800277e:	f001 f9f9 	bl	8003b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}

08002786 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800278a:	2002      	movs	r0, #2
 800278c:	f001 f9f2 	bl	8003b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}

08002794 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <I2C2_EV_IRQHandler+0x10>)
 800279a:	f001 fe6b 	bl	8004474 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	2004a2b4 	.word	0x2004a2b4

080027a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((USART6->SR & USART_SR_RXNE) && (USART6->CR1 & USART_CR1_RXNEIE))
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <USART6_IRQHandler+0x2c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <USART6_IRQHandler+0x20>
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <USART6_IRQHandler+0x2c>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <USART6_IRQHandler+0x20>
		uart_rx_callback();
 80027c4:	f000 fa7a 	bl	8002cbc <uart_rx_callback>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80027c8:	4803      	ldr	r0, [pc, #12]	; (80027d8 <USART6_IRQHandler+0x30>)
 80027ca:	f005 f81b 	bl	8007804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40011400 	.word	0x40011400
 80027d8:	2004a4e4 	.word	0x2004a4e4

080027dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
	return 1;
 80027e0:	2301      	movs	r3, #1
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <_kill>:

int _kill(int pid, int sig)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027f6:	f022 fb8d 	bl	8024f14 <__errno>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2216      	movs	r2, #22
 80027fe:	601a      	str	r2, [r3, #0]
	return -1;
 8002800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_exit>:

void _exit (int status)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ffe7 	bl	80027ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800281e:	e7fe      	b.n	800281e <_exit+0x12>

08002820 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	e00a      	b.n	8002848 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002832:	f3af 8000 	nop.w
 8002836:	4601      	mov	r1, r0
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	60ba      	str	r2, [r7, #8]
 800283e:	b2ca      	uxtb	r2, r1
 8002840:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	dbf0      	blt.n	8002832 <_read+0x12>
	}

return len;
 8002850:	687b      	ldr	r3, [r7, #4]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e009      	b.n	8002880 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	60ba      	str	r2, [r7, #8]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	3301      	adds	r3, #1
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	429a      	cmp	r2, r3
 8002886:	dbf1      	blt.n	800286c <_write+0x12>
	}
	return len;
 8002888:	687b      	ldr	r3, [r7, #4]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <_close>:

int _close(int file)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
	return -1;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ba:	605a      	str	r2, [r3, #4]
	return 0;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <_isatty>:

int _isatty(int file)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
	return 1;
 80028d2:	2301      	movs	r3, #1
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
	return 0;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002904:	4a14      	ldr	r2, [pc, #80]	; (8002958 <_sbrk+0x5c>)
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <_sbrk+0x60>)
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <_sbrk+0x64>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d102      	bne.n	800291e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002918:	4b11      	ldr	r3, [pc, #68]	; (8002960 <_sbrk+0x64>)
 800291a:	4a12      	ldr	r2, [pc, #72]	; (8002964 <_sbrk+0x68>)
 800291c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <_sbrk+0x64>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4413      	add	r3, r2
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	429a      	cmp	r2, r3
 800292a:	d207      	bcs.n	800293c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800292c:	f022 faf2 	bl	8024f14 <__errno>
 8002930:	4603      	mov	r3, r0
 8002932:	220c      	movs	r2, #12
 8002934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800293a:	e009      	b.n	8002950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <_sbrk+0x64>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <_sbrk+0x64>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	4a05      	ldr	r2, [pc, #20]	; (8002960 <_sbrk+0x64>)
 800294c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800294e:	68fb      	ldr	r3, [r7, #12]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20050000 	.word	0x20050000
 800295c:	00000400 	.word	0x00000400
 8002960:	20027f3c 	.word	0x20027f3c
 8002964:	2004a540 	.word	0x2004a540

08002968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <SystemInit+0x20>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	4a05      	ldr	r2, [pc, #20]	; (8002988 <SystemInit+0x20>)
 8002974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029aa:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <MX_TIM1_Init+0xa4>)
 80029ac:	4a21      	ldr	r2, [pc, #132]	; (8002a34 <MX_TIM1_Init+0xa8>)
 80029ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029b0:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <MX_TIM1_Init+0xa4>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b6:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <MX_TIM1_Init+0xa4>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80029bc:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <MX_TIM1_Init+0xa4>)
 80029be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029c4:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <MX_TIM1_Init+0xa4>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029ca:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <MX_TIM1_Init+0xa4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d0:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <MX_TIM1_Init+0xa4>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029d6:	4816      	ldr	r0, [pc, #88]	; (8002a30 <MX_TIM1_Init+0xa4>)
 80029d8:	f004 fba2 	bl	8007120 <HAL_TIM_Base_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80029e2:	f7ff fcd3 	bl	800238c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80029e6:	2307      	movs	r3, #7
 80029e8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80029ea:	2360      	movs	r3, #96	; 0x60
 80029ec:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80029f6:	f107 030c 	add.w	r3, r7, #12
 80029fa:	4619      	mov	r1, r3
 80029fc:	480c      	ldr	r0, [pc, #48]	; (8002a30 <MX_TIM1_Init+0xa4>)
 80029fe:	f004 fc47 	bl	8007290 <HAL_TIM_SlaveConfigSynchro>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8002a08:	f7ff fcc0 	bl	800238c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a14:	1d3b      	adds	r3, r7, #4
 8002a16:	4619      	mov	r1, r3
 8002a18:	4805      	ldr	r0, [pc, #20]	; (8002a30 <MX_TIM1_Init+0xa4>)
 8002a1a:	f004 fe29 	bl	8007670 <HAL_TIMEx_MasterConfigSynchronization>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002a24:	f7ff fcb2 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a28:	bf00      	nop
 8002a2a:	3720      	adds	r7, #32
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	2004a368 	.word	0x2004a368
 8002a34:	40010000 	.word	0x40010000

08002a38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a31      	ldr	r2, [pc, #196]	; (8002b1c <HAL_TIM_Base_MspInit+0xe4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d15b      	bne.n	8002b12 <HAL_TIM_Base_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	4b30      	ldr	r3, [pc, #192]	; (8002b20 <HAL_TIM_Base_MspInit+0xe8>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	4a2f      	ldr	r2, [pc, #188]	; (8002b20 <HAL_TIM_Base_MspInit+0xe8>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6a:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <HAL_TIM_Base_MspInit+0xe8>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	4b29      	ldr	r3, [pc, #164]	; (8002b20 <HAL_TIM_Base_MspInit+0xe8>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a28      	ldr	r2, [pc, #160]	; (8002b20 <HAL_TIM_Base_MspInit+0xe8>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <HAL_TIM_Base_MspInit+0xe8>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4619      	mov	r1, r3
 8002aae:	481d      	ldr	r0, [pc, #116]	; (8002b24 <HAL_TIM_Base_MspInit+0xec>)
 8002ab0:	f000 feb2 	bl	8003818 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_TRIG Init */
    hdma_tim1_trig.Instance = DMA2_Stream0;
 8002ab4:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <HAL_TIM_Base_MspInit+0xf0>)
 8002ab6:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <HAL_TIM_Base_MspInit+0xf4>)
 8002ab8:	601a      	str	r2, [r3, #0]
    hdma_tim1_trig.Init.Channel = DMA_CHANNEL_6;
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_TIM_Base_MspInit+0xf0>)
 8002abc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002ac0:	605a      	str	r2, [r3, #4]
    hdma_tim1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ac2:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_TIM_Base_MspInit+0xf0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
    hdma_tim1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac8:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_TIM_Base_MspInit+0xf0>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
    hdma_tim1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_TIM_Base_MspInit+0xf0>)
 8002ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ad4:	611a      	str	r2, [r3, #16]
    hdma_tim1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ad6:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <HAL_TIM_Base_MspInit+0xf0>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	615a      	str	r2, [r3, #20]
    hdma_tim1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_TIM_Base_MspInit+0xf0>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	619a      	str	r2, [r3, #24]
    hdma_tim1_trig.Init.Mode = DMA_NORMAL;
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <HAL_TIM_Base_MspInit+0xf0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	61da      	str	r2, [r3, #28]
    hdma_tim1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <HAL_TIM_Base_MspInit+0xf0>)
 8002aea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aee:	621a      	str	r2, [r3, #32]
    hdma_tim1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_TIM_Base_MspInit+0xf0>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_trig) != HAL_OK)
 8002af6:	480c      	ldr	r0, [pc, #48]	; (8002b28 <HAL_TIM_Base_MspInit+0xf0>)
 8002af8:	f000 fc24 	bl	8003344 <HAL_DMA_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_TIM_Base_MspInit+0xce>
    {
      Error_Handler();
 8002b02:	f7ff fc43 	bl	800238c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_trig);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <HAL_TIM_Base_MspInit+0xf0>)
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38
 8002b0c:	4a06      	ldr	r2, [pc, #24]	; (8002b28 <HAL_TIM_Base_MspInit+0xf0>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002b12:	bf00      	nop
 8002b14:	3728      	adds	r7, #40	; 0x28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40010000 	.word	0x40010000
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	2004a308 	.word	0x2004a308
 8002b2c:	40026410 	.word	0x40026410

08002b30 <uart_init>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_init()
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <uart_init+0x20>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <uart_init+0x20>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0220 	orr.w	r2, r2, #32
 8002b42:	60da      	str	r2, [r3, #12]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	2004a4e4 	.word	0x2004a4e4

08002b54 <uart_write>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_write(uint8_t* buff)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	uint8_t string_size = strlen(buff) + 1;
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7fd fbb9 	bl	80002d4 <strlen>
 8002b62:	4603      	mov	r3, r0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	3301      	adds	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]

	if(
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8002b6a:	4b3e      	ldr	r3, [pc, #248]	; (8002c64 <uart_write+0x110>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <uart_write+0x114>)
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	1ad3      	subs	r3, r2, r3
	if(
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0a      	blt.n	8002b90 <uart_write+0x3c>
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <uart_write+0x110>)
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <uart_write+0x114>)
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	1acb      	subs	r3, r1, r3
 8002b88:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	db10      	blt.n	8002bb2 <uart_write+0x5e>
			((g_uart_tx_tail - g_uart_tx_nose <= 0) && (string_size < g_uart_tx_nose - g_uart_tx_tail)))
 8002b90:	4b34      	ldr	r3, [pc, #208]	; (8002c64 <uart_write+0x110>)
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b34      	ldr	r3, [pc, #208]	; (8002c68 <uart_write+0x114>)
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	1ad3      	subs	r3, r2, r3
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	dc5c      	bgt.n	8002c5a <uart_write+0x106>
			((g_uart_tx_tail - g_uart_tx_nose <= 0) && (string_size < g_uart_tx_nose - g_uart_tx_tail)))
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	4b31      	ldr	r3, [pc, #196]	; (8002c68 <uart_write+0x114>)
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <uart_write+0x110>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	1acb      	subs	r3, r1, r3
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	da53      	bge.n	8002c5a <uart_write+0x106>
	{
		if(((g_uart_tx_tail - g_uart_tx_nose >= 0)) && (string_size > (UART_TX_BUFFER_MAX - g_uart_tx_tail)))
 8002bb2:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <uart_write+0x110>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <uart_write+0x114>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	db2f      	blt.n	8002c22 <uart_write+0xce>
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <uart_write+0x110>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	dd28      	ble.n	8002c22 <uart_write+0xce>
		{
			strncpy(g_uart_tx_buffer + g_uart_tx_tail, buff, UART_TX_BUFFER_MAX - g_uart_tx_tail);
 8002bd0:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <uart_write+0x110>)
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <uart_write+0x118>)
 8002bd8:	4413      	add	r3, r2
 8002bda:	4a22      	ldr	r2, [pc, #136]	; (8002c64 <uart_write+0x110>)
 8002bdc:	8812      	ldrh	r2, [r2, #0]
 8002bde:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f022 fe3b 	bl	8025860 <strncpy>
			string_size -= (UART_TX_BUFFER_MAX - g_uart_tx_tail);
 8002bea:	4b1e      	ldr	r3, [pc, #120]	; (8002c64 <uart_write+0x110>)
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
			strncpy(g_uart_tx_buffer + 0, buff + (UART_TX_BUFFER_MAX - g_uart_tx_tail), string_size);
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <uart_write+0x110>)
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002c02:	461a      	mov	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4413      	add	r3, r2
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4817      	ldr	r0, [pc, #92]	; (8002c6c <uart_write+0x118>)
 8002c0e:	f022 fe27 	bl	8025860 <strncpy>
			g_uart_tx_tail = 0;
 8002c12:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <uart_write+0x110>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	801a      	strh	r2, [r3, #0]
			g_uart_tx_tail = string_size;
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <uart_write+0x110>)
 8002c1e:	801a      	strh	r2, [r3, #0]
				g_uart_tx_tail += string_size;
			else
				g_uart_tx_tail = 0;
		}
	}
}
 8002c20:	e01b      	b.n	8002c5a <uart_write+0x106>
			strcpy(g_uart_tx_buffer + g_uart_tx_tail, buff);
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <uart_write+0x110>)
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <uart_write+0x118>)
 8002c2a:	4413      	add	r3, r2
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f022 fdfc 	bl	802582c <strcpy>
			if(g_uart_tx_tail + string_size < UART_TX_BUFFER_MAX)
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <uart_write+0x110>)
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	2bfe      	cmp	r3, #254	; 0xfe
 8002c40:	dc08      	bgt.n	8002c54 <uart_write+0x100>
				g_uart_tx_tail += string_size;
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <uart_write+0x110>)
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <uart_write+0x110>)
 8002c50:	801a      	strh	r2, [r3, #0]
}
 8002c52:	e002      	b.n	8002c5a <uart_write+0x106>
				g_uart_tx_tail = 0;
 8002c54:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <uart_write+0x110>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	801a      	strh	r2, [r3, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20028042 	.word	0x20028042
 8002c68:	20028040 	.word	0x20028040
 8002c6c:	20027f40 	.word	0x20027f40

08002c70 <HAL_UART_TxCpltCallback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	g_uart_tx_nose += strlen(g_uart_tx_buffer + g_uart_tx_nose) + 1;
 8002c78:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_UART_TxCpltCallback+0x44>)
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_UART_TxCpltCallback+0x48>)
 8002c80:	4413      	add	r3, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fd fb26 	bl	80002d4 <strlen>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_UART_TxCpltCallback+0x44>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	4413      	add	r3, r2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_UART_TxCpltCallback+0x44>)
 8002c9a:	801a      	strh	r2, [r3, #0]

	if(g_uart_tx_nose >= UART_TX_BUFFER_MAX)
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_UART_TxCpltCallback+0x44>)
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	2bfe      	cmp	r3, #254	; 0xfe
 8002ca2:	d902      	bls.n	8002caa <HAL_UART_TxCpltCallback+0x3a>
		g_uart_tx_nose = 0;
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <HAL_UART_TxCpltCallback+0x44>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	801a      	strh	r2, [r3, #0]

}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20028040 	.word	0x20028040
 8002cb8:	20027f40 	.word	0x20027f40

08002cbc <uart_rx_callback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_callback()
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
	g_uart_rx_tail++;
 8002cc0:	4b5b      	ldr	r3, [pc, #364]	; (8002e30 <uart_rx_callback+0x174>)
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	4b59      	ldr	r3, [pc, #356]	; (8002e30 <uart_rx_callback+0x174>)
 8002cca:	801a      	strh	r2, [r3, #0]
	// 1 & 2 - |....N!!!!!!T...|
	// 1 & 3 - |!!!T..N!!!!!!!!|
	//______________________________________________________________________________________________________________
	//				1				|					2				  | 					3					|
	//--------------------------------------------------------------------------------------------------------------
	if((g_uart_rx_tail < (UART_RX_BUFFER_MAX - 1)) && ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2/*1*/)))
 8002ccc:	4b58      	ldr	r3, [pc, #352]	; (8002e30 <uart_rx_callback+0x174>)
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	2bfd      	cmp	r3, #253	; 0xfd
 8002cd2:	d847      	bhi.n	8002d64 <uart_rx_callback+0xa8>
 8002cd4:	4b57      	ldr	r3, [pc, #348]	; (8002e34 <uart_rx_callback+0x178>)
 8002cd6:	881a      	ldrh	r2, [r3, #0]
 8002cd8:	4b55      	ldr	r3, [pc, #340]	; (8002e30 <uart_rx_callback+0x174>)
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d307      	bcc.n	8002cf0 <uart_rx_callback+0x34>
 8002ce0:	4b54      	ldr	r3, [pc, #336]	; (8002e34 <uart_rx_callback+0x178>)
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b52      	ldr	r3, [pc, #328]	; (8002e30 <uart_rx_callback+0x174>)
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	dd39      	ble.n	8002d64 <uart_rx_callback+0xa8>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x000000FFU & USART6->DR);//253
 8002cf0:	4b51      	ldr	r3, [pc, #324]	; (8002e38 <uart_rx_callback+0x17c>)
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	4b4e      	ldr	r3, [pc, #312]	; (8002e30 <uart_rx_callback+0x174>)
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	b2c9      	uxtb	r1, r1
 8002cfc:	4b4f      	ldr	r3, [pc, #316]	; (8002e3c <uart_rx_callback+0x180>)
 8002cfe:	5499      	strb	r1, [r3, r2]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8002d00:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <uart_rx_callback+0x174>)
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b4d      	ldr	r3, [pc, #308]	; (8002e3c <uart_rx_callback+0x180>)
 8002d08:	5c9b      	ldrb	r3, [r3, r2]
 8002d0a:	2b0d      	cmp	r3, #13
 8002d0c:	f040 8087 	bne.w	8002e1e <uart_rx_callback+0x162>
		{
			g_uart_rx_buffer[++g_uart_rx_tail] = '\n';//254
 8002d10:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <uart_rx_callback+0x174>)
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	4b45      	ldr	r3, [pc, #276]	; (8002e30 <uart_rx_callback+0x174>)
 8002d1a:	801a      	strh	r2, [r3, #0]
 8002d1c:	4b44      	ldr	r3, [pc, #272]	; (8002e30 <uart_rx_callback+0x174>)
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b46      	ldr	r3, [pc, #280]	; (8002e3c <uart_rx_callback+0x180>)
 8002d24:	210a      	movs	r1, #10
 8002d26:	5499      	strb	r1, [r3, r2]
			g_uart_rx_cnt++;
 8002d28:	4b45      	ldr	r3, [pc, #276]	; (8002e40 <uart_rx_callback+0x184>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	4b43      	ldr	r3, [pc, #268]	; (8002e40 <uart_rx_callback+0x184>)
 8002d32:	801a      	strh	r2, [r3, #0]
			g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 8002d34:	4b3e      	ldr	r3, [pc, #248]	; (8002e30 <uart_rx_callback+0x174>)
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	4b3c      	ldr	r3, [pc, #240]	; (8002e30 <uart_rx_callback+0x174>)
 8002d3e:	801a      	strh	r2, [r3, #0]
 8002d40:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <uart_rx_callback+0x174>)
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <uart_rx_callback+0x180>)
 8002d48:	2100      	movs	r1, #0
 8002d4a:	5499      	strb	r1, [r3, r2]
			if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 0))
 8002d4c:	4b38      	ldr	r3, [pc, #224]	; (8002e30 <uart_rx_callback+0x174>)
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	2bff      	cmp	r3, #255	; 0xff
 8002d52:	d164      	bne.n	8002e1e <uart_rx_callback+0x162>
 8002d54:	4b37      	ldr	r3, [pc, #220]	; (8002e34 <uart_rx_callback+0x178>)
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d060      	beq.n	8002e1e <uart_rx_callback+0x162>
			{
				g_uart_rx_tail = 0;
 8002d5c:	4b34      	ldr	r3, [pc, #208]	; (8002e30 <uart_rx_callback+0x174>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	801a      	strh	r2, [r3, #0]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8002d62:	e05c      	b.n	8002e1e <uart_rx_callback+0x162>
			}
		}
	}
	else if((g_uart_rx_tail == (UART_RX_BUFFER_MAX - 1)) && (g_uart_rx_nose > 1)/*(g_uart_rx_nose < g_uart_rx_tail)*/)
 8002d64:	4b32      	ldr	r3, [pc, #200]	; (8002e30 <uart_rx_callback+0x174>)
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	2bfe      	cmp	r3, #254	; 0xfe
 8002d6a:	d13e      	bne.n	8002dea <uart_rx_callback+0x12e>
 8002d6c:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <uart_rx_callback+0x178>)
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d93a      	bls.n	8002dea <uart_rx_callback+0x12e>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x000000FFU & USART6->DR);//254
 8002d74:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <uart_rx_callback+0x17c>)
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <uart_rx_callback+0x174>)
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	b2c9      	uxtb	r1, r1
 8002d80:	4b2e      	ldr	r3, [pc, #184]	; (8002e3c <uart_rx_callback+0x180>)
 8002d82:	5499      	strb	r1, [r3, r2]
		g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 8002d84:	4b2a      	ldr	r3, [pc, #168]	; (8002e30 <uart_rx_callback+0x174>)
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <uart_rx_callback+0x174>)
 8002d8e:	801a      	strh	r2, [r3, #0]
 8002d90:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <uart_rx_callback+0x174>)
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <uart_rx_callback+0x180>)
 8002d98:	2100      	movs	r1, #0
 8002d9a:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 8002d9c:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <uart_rx_callback+0x174>)
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <uart_rx_callback+0x180>)
 8002da4:	5cd3      	ldrb	r3, [r2, r3]
 8002da6:	2b0d      	cmp	r3, #13
 8002da8:	d13b      	bne.n	8002e22 <uart_rx_callback+0x166>
		{
			g_uart_rx_cnt++;
 8002daa:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <uart_rx_callback+0x184>)
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <uart_rx_callback+0x184>)
 8002db4:	801a      	strh	r2, [r3, #0]
			if(g_uart_rx_nose > 1)
 8002db6:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <uart_rx_callback+0x178>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d931      	bls.n	8002e22 <uart_rx_callback+0x166>
			{
				g_uart_rx_tail = 0;
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <uart_rx_callback+0x174>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	801a      	strh	r2, [r3, #0]
				g_uart_rx_buffer[g_uart_rx_tail] = '\n';//0
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <uart_rx_callback+0x174>)
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b1c      	ldr	r3, [pc, #112]	; (8002e3c <uart_rx_callback+0x180>)
 8002dcc:	210a      	movs	r1, #10
 8002dce:	5499      	strb	r1, [r3, r2]
				g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//1
 8002dd0:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <uart_rx_callback+0x174>)
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <uart_rx_callback+0x174>)
 8002dda:	801a      	strh	r2, [r3, #0]
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <uart_rx_callback+0x174>)
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <uart_rx_callback+0x180>)
 8002de4:	2100      	movs	r1, #0
 8002de6:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 8002de8:	e01b      	b.n	8002e22 <uart_rx_callback+0x166>
			{
				//error - full
			}
		}
	}
	else if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 1))
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <uart_rx_callback+0x174>)
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	2bff      	cmp	r3, #255	; 0xff
 8002df0:	d118      	bne.n	8002e24 <uart_rx_callback+0x168>
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <uart_rx_callback+0x178>)
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d914      	bls.n	8002e24 <uart_rx_callback+0x168>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = '\0';
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <uart_rx_callback+0x174>)
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <uart_rx_callback+0x180>)
 8002e02:	2100      	movs	r1, #0
 8002e04:	5499      	strb	r1, [r3, r2]
		g_uart_rx_tail = 1;
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <uart_rx_callback+0x174>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	801a      	strh	r2, [r3, #0]
		g_uart_rx_buffer[g_uart_rx_tail] = (0x000000FFU & USART6->DR);
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <uart_rx_callback+0x17c>)
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <uart_rx_callback+0x174>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	b2c9      	uxtb	r1, r1
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <uart_rx_callback+0x180>)
 8002e1a:	5499      	strb	r1, [r3, r2]

	}

}
 8002e1c:	e002      	b.n	8002e24 <uart_rx_callback+0x168>
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8002e1e:	bf00      	nop
 8002e20:	e000      	b.n	8002e24 <uart_rx_callback+0x168>
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 8002e22:	bf00      	nop
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20028046 	.word	0x20028046
 8002e34:	20028044 	.word	0x20028044
 8002e38:	40011400 	.word	0x40011400
 8002e3c:	2004a3e4 	.word	0x2004a3e4
 8002e40:	20028048 	.word	0x20028048

08002e44 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e4a:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <MX_USART6_UART_Init+0x50>)
 8002e4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e6a:	220c      	movs	r2, #12
 8002e6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002e7a:	4805      	ldr	r0, [pc, #20]	; (8002e90 <MX_USART6_UART_Init+0x4c>)
 8002e7c:	f004 fc74 	bl	8007768 <HAL_UART_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002e86:	f7ff fa81 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	2004a4e4 	.word	0x2004a4e4
 8002e94:	40011400 	.word	0x40011400

08002e98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1e      	ldr	r2, [pc, #120]	; (8002f30 <HAL_UART_MspInit+0x98>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d136      	bne.n	8002f28 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_UART_MspInit+0x9c>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	4a1c      	ldr	r2, [pc, #112]	; (8002f34 <HAL_UART_MspInit+0x9c>)
 8002ec4:	f043 0320 	orr.w	r3, r3, #32
 8002ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eca:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <HAL_UART_MspInit+0x9c>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_UART_MspInit+0x9c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <HAL_UART_MspInit+0x9c>)
 8002ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <HAL_UART_MspInit+0x9c>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8002ef2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f00:	2303      	movs	r3, #3
 8002f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002f04:	2308      	movs	r3, #8
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480a      	ldr	r0, [pc, #40]	; (8002f38 <HAL_UART_MspInit+0xa0>)
 8002f10:	f000 fc82 	bl	8003818 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2100      	movs	r1, #0
 8002f18:	2047      	movs	r0, #71	; 0x47
 8002f1a:	f000 f9ce 	bl	80032ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002f1e:	2047      	movs	r0, #71	; 0x47
 8002f20:	f000 f9e7 	bl	80032f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */
    uart_init();
 8002f24:	f7ff fe04 	bl	8002b30 <uart_init>
  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002f28:	bf00      	nop
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40011400 	.word	0x40011400
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40021800 	.word	0x40021800

08002f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f40:	480d      	ldr	r0, [pc, #52]	; (8002f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f42:	490e      	ldr	r1, [pc, #56]	; (8002f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f44:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f48:	e002      	b.n	8002f50 <LoopCopyDataInit>

08002f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f4e:	3304      	adds	r3, #4

08002f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f54:	d3f9      	bcc.n	8002f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f56:	4a0b      	ldr	r2, [pc, #44]	; (8002f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f58:	4c0b      	ldr	r4, [pc, #44]	; (8002f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f5c:	e001      	b.n	8002f62 <LoopFillZerobss>

08002f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f60:	3204      	adds	r2, #4

08002f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f64:	d3fb      	bcc.n	8002f5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f66:	f7ff fcff 	bl	8002968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f6a:	f021 ffeb 	bl	8024f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f6e:	f7ff f957 	bl	8002220 <main>
  bx  lr    
 8002f72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002f74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f7c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002f80:	0807596c 	.word	0x0807596c
  ldr r2, =_sbss
 8002f84:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002f88:	2004a53c 	.word	0x2004a53c

08002f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f8c:	e7fe      	b.n	8002f8c <ADC_IRQHandler>
	...

08002f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <HAL_Init+0x40>)
 8002f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_Init+0x40>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <HAL_Init+0x40>)
 8002fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_Init+0x40>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <HAL_Init+0x40>)
 8002fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fb8:	2003      	movs	r0, #3
 8002fba:	f000 f973 	bl	80032a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f000 f808 	bl	8002fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc4:	f7ff fb86 	bl	80026d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023c00 	.word	0x40023c00

08002fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fdc:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_InitTick+0x54>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_InitTick+0x58>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f999 	bl	800332a <HAL_SYSTICK_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00e      	b.n	8003020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b0f      	cmp	r3, #15
 8003006:	d80a      	bhi.n	800301e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003008:	2200      	movs	r2, #0
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003010:	f000 f953 	bl	80032ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003014:	4a06      	ldr	r2, [pc, #24]	; (8003030 <HAL_InitTick+0x5c>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000004 	.word	0x20000004
 800302c:	2000000c 	.word	0x2000000c
 8003030:	20000008 	.word	0x20000008

08003034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_IncTick+0x20>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_IncTick+0x24>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4413      	add	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <HAL_IncTick+0x24>)
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	2000000c 	.word	0x2000000c
 8003058:	2004a528 	.word	0x2004a528

0800305c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return uwTick;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_GetTick+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	2004a528 	.word	0x2004a528

08003074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff ffee 	bl	800305c <HAL_GetTick>
 8003080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800308c:	d005      	beq.n	800309a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_Delay+0x44>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800309a:	bf00      	nop
 800309c:	f7ff ffde 	bl	800305c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d8f7      	bhi.n	800309c <HAL_Delay+0x28>
  {
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	2000000c 	.word	0x2000000c

080030bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <__NVIC_SetPriorityGrouping+0x44>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030d8:	4013      	ands	r3, r2
 80030da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ee:	4a04      	ldr	r2, [pc, #16]	; (8003100 <__NVIC_SetPriorityGrouping+0x44>)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	60d3      	str	r3, [r2, #12]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <__NVIC_GetPriorityGrouping+0x18>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	f003 0307 	and.w	r3, r3, #7
}
 8003112:	4618      	mov	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	2b00      	cmp	r3, #0
 8003130:	db0b      	blt.n	800314a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	4907      	ldr	r1, [pc, #28]	; (8003158 <__NVIC_EnableIRQ+0x38>)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	2001      	movs	r0, #1
 8003142:	fa00 f202 	lsl.w	r2, r0, r2
 8003146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000e100 	.word	0xe000e100

0800315c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	2b00      	cmp	r3, #0
 800316c:	db12      	blt.n	8003194 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	f003 021f 	and.w	r2, r3, #31
 8003174:	490a      	ldr	r1, [pc, #40]	; (80031a0 <__NVIC_DisableIRQ+0x44>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2001      	movs	r0, #1
 800317e:	fa00 f202 	lsl.w	r2, r0, r2
 8003182:	3320      	adds	r3, #32
 8003184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003188:	f3bf 8f4f 	dsb	sy
}
 800318c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800318e:	f3bf 8f6f 	isb	sy
}
 8003192:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000e100 	.word	0xe000e100

080031a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	6039      	str	r1, [r7, #0]
 80031ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	db0a      	blt.n	80031ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	490c      	ldr	r1, [pc, #48]	; (80031f0 <__NVIC_SetPriority+0x4c>)
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	0112      	lsls	r2, r2, #4
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	440b      	add	r3, r1
 80031c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031cc:	e00a      	b.n	80031e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	4908      	ldr	r1, [pc, #32]	; (80031f4 <__NVIC_SetPriority+0x50>)
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	3b04      	subs	r3, #4
 80031dc:	0112      	lsls	r2, r2, #4
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	440b      	add	r3, r1
 80031e2:	761a      	strb	r2, [r3, #24]
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000e100 	.word	0xe000e100
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	; 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f1c3 0307 	rsb	r3, r3, #7
 8003212:	2b04      	cmp	r3, #4
 8003214:	bf28      	it	cs
 8003216:	2304      	movcs	r3, #4
 8003218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3304      	adds	r3, #4
 800321e:	2b06      	cmp	r3, #6
 8003220:	d902      	bls.n	8003228 <NVIC_EncodePriority+0x30>
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3b03      	subs	r3, #3
 8003226:	e000      	b.n	800322a <NVIC_EncodePriority+0x32>
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800322c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43da      	mvns	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	401a      	ands	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003240:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	fa01 f303 	lsl.w	r3, r1, r3
 800324a:	43d9      	mvns	r1, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003250:	4313      	orrs	r3, r2
         );
}
 8003252:	4618      	mov	r0, r3
 8003254:	3724      	adds	r7, #36	; 0x24
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3b01      	subs	r3, #1
 800326c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003270:	d301      	bcc.n	8003276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003272:	2301      	movs	r3, #1
 8003274:	e00f      	b.n	8003296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003276:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <SysTick_Config+0x40>)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3b01      	subs	r3, #1
 800327c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800327e:	210f      	movs	r1, #15
 8003280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003284:	f7ff ff8e 	bl	80031a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <SysTick_Config+0x40>)
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800328e:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <SysTick_Config+0x40>)
 8003290:	2207      	movs	r2, #7
 8003292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	e000e010 	.word	0xe000e010

080032a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff ff05 	bl	80030bc <__NVIC_SetPriorityGrouping>
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b086      	sub	sp, #24
 80032be:	af00      	add	r7, sp, #0
 80032c0:	4603      	mov	r3, r0
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032cc:	f7ff ff1a 	bl	8003104 <__NVIC_GetPriorityGrouping>
 80032d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	6978      	ldr	r0, [r7, #20]
 80032d8:	f7ff ff8e 	bl	80031f8 <NVIC_EncodePriority>
 80032dc:	4602      	mov	r2, r0
 80032de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff5d 	bl	80031a4 <__NVIC_SetPriority>
}
 80032ea:	bf00      	nop
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	4603      	mov	r3, r0
 80032fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff0d 	bl	8003120 <__NVIC_EnableIRQ>
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	4603      	mov	r3, r0
 8003316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ff1d 	bl	800315c <__NVIC_DisableIRQ>
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ff94 	bl	8003260 <SysTick_Config>
 8003338:	4603      	mov	r3, r0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003350:	f7ff fe84 	bl	800305c <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e099      	b.n	8003494 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003380:	e00f      	b.n	80033a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003382:	f7ff fe6b 	bl	800305c <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b05      	cmp	r3, #5
 800338e:	d908      	bls.n	80033a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2203      	movs	r2, #3
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e078      	b.n	8003494 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1e8      	bne.n	8003382 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4b38      	ldr	r3, [pc, #224]	; (800349c <HAL_DMA_Init+0x158>)
 80033bc:	4013      	ands	r3, r2
 80033be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d107      	bne.n	800340c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	4313      	orrs	r3, r2
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0307 	bic.w	r3, r3, #7
 8003422:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	2b04      	cmp	r3, #4
 8003434:	d117      	bne.n	8003466 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00e      	beq.n	8003466 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f969 	bl	8003720 <DMA_CheckFifoParam>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2240      	movs	r2, #64	; 0x40
 8003458:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003462:	2301      	movs	r3, #1
 8003464:	e016      	b.n	8003494 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f920 	bl	80036b4 <DMA_CalcBaseAndBitshift>
 8003474:	4603      	mov	r3, r0
 8003476:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	223f      	movs	r2, #63	; 0x3f
 800347e:	409a      	lsls	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	e010803f 	.word	0xe010803f

080034a0 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_DMA_Start+0x20>
 80034bc:	2302      	movs	r3, #2
 80034be:	e026      	b.n	800350e <HAL_DMA_Start+0x6e>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d115      	bne.n	8003500 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f8b4 	bl	8003656 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0201 	orr.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e005      	b.n	800350c <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003508:	2302      	movs	r3, #2
 800350a:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 800350c:	7dfb      	ldrb	r3, [r7, #23]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003524:	f7ff fd9a 	bl	800305c <HAL_GetTick>
 8003528:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d008      	beq.n	8003548 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e052      	b.n	80035ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0216 	bic.w	r2, r2, #22
 8003556:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003566:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	d103      	bne.n	8003578 <HAL_DMA_Abort+0x62>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0208 	bic.w	r2, r2, #8
 8003586:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003598:	e013      	b.n	80035c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800359a:	f7ff fd5f 	bl	800305c <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	d90c      	bls.n	80035c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2203      	movs	r2, #3
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e015      	b.n	80035ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e4      	bne.n	800359a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d4:	223f      	movs	r2, #63	; 0x3f
 80035d6:	409a      	lsls	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d004      	beq.n	8003614 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2280      	movs	r2, #128	; 0x80
 800360e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e00c      	b.n	800362e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2205      	movs	r2, #5
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003648:	b2db      	uxtb	r3, r3
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003656:	b480      	push	{r7}
 8003658:	b085      	sub	sp, #20
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003672:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b40      	cmp	r3, #64	; 0x40
 8003682:	d108      	bne.n	8003696 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003694:	e007      	b.n	80036a6 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	60da      	str	r2, [r3, #12]
}
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	3b10      	subs	r3, #16
 80036c4:	4a14      	ldr	r2, [pc, #80]	; (8003718 <DMA_CalcBaseAndBitshift+0x64>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036ce:	4a13      	ldr	r2, [pc, #76]	; (800371c <DMA_CalcBaseAndBitshift+0x68>)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4413      	add	r3, r2
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d909      	bls.n	80036f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036ea:	f023 0303 	bic.w	r3, r3, #3
 80036ee:	1d1a      	adds	r2, r3, #4
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	659a      	str	r2, [r3, #88]	; 0x58
 80036f4:	e007      	b.n	8003706 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	aaaaaaab 	.word	0xaaaaaaab
 800371c:	0802be2c 	.word	0x0802be2c

08003720 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d11f      	bne.n	800377a <DMA_CheckFifoParam+0x5a>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d856      	bhi.n	80037ee <DMA_CheckFifoParam+0xce>
 8003740:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <DMA_CheckFifoParam+0x28>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	08003759 	.word	0x08003759
 800374c:	0800376b 	.word	0x0800376b
 8003750:	08003759 	.word	0x08003759
 8003754:	080037ef 	.word	0x080037ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d046      	beq.n	80037f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003768:	e043      	b.n	80037f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003772:	d140      	bne.n	80037f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003778:	e03d      	b.n	80037f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003782:	d121      	bne.n	80037c8 <DMA_CheckFifoParam+0xa8>
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d837      	bhi.n	80037fa <DMA_CheckFifoParam+0xda>
 800378a:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <DMA_CheckFifoParam+0x70>)
 800378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037a7 	.word	0x080037a7
 8003798:	080037a1 	.word	0x080037a1
 800379c:	080037b9 	.word	0x080037b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      break;
 80037a4:	e030      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d025      	beq.n	80037fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b6:	e022      	b.n	80037fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037c0:	d11f      	bne.n	8003802 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037c6:	e01c      	b.n	8003802 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d903      	bls.n	80037d6 <DMA_CheckFifoParam+0xb6>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d003      	beq.n	80037dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037d4:	e018      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
      break;
 80037da:	e015      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00e      	beq.n	8003806 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
      break;
 80037ec:	e00b      	b.n	8003806 <DMA_CheckFifoParam+0xe6>
      break;
 80037ee:	bf00      	nop
 80037f0:	e00a      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      break;
 80037f2:	bf00      	nop
 80037f4:	e008      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      break;
 80037f6:	bf00      	nop
 80037f8:	e006      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      break;
 80037fa:	bf00      	nop
 80037fc:	e004      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      break;
 80037fe:	bf00      	nop
 8003800:	e002      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      break;   
 8003802:	bf00      	nop
 8003804:	e000      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      break;
 8003806:	bf00      	nop
    }
  } 
  
  return status; 
 8003808:	7bfb      	ldrb	r3, [r7, #15]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop

08003818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003818:	b480      	push	{r7}
 800381a:	b089      	sub	sp, #36	; 0x24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800382a:	2300      	movs	r3, #0
 800382c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	e165      	b.n	8003b00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003834:	2201      	movs	r2, #1
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4013      	ands	r3, r2
 8003846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	429a      	cmp	r2, r3
 800384e:	f040 8154 	bne.w	8003afa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b01      	cmp	r3, #1
 800385c:	d005      	beq.n	800386a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003866:	2b02      	cmp	r3, #2
 8003868:	d130      	bne.n	80038cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	2203      	movs	r2, #3
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4313      	orrs	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038a0:	2201      	movs	r2, #1
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	f003 0201 	and.w	r2, r3, #1
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d017      	beq.n	8003908 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	2203      	movs	r2, #3
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d123      	bne.n	800395c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	08da      	lsrs	r2, r3, #3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3208      	adds	r2, #8
 800391c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	220f      	movs	r2, #15
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	08da      	lsrs	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3208      	adds	r2, #8
 8003956:	69b9      	ldr	r1, [r7, #24]
 8003958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	2203      	movs	r2, #3
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 0203 	and.w	r2, r3, #3
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80ae 	beq.w	8003afa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	4b5d      	ldr	r3, [pc, #372]	; (8003b18 <HAL_GPIO_Init+0x300>)
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	4a5c      	ldr	r2, [pc, #368]	; (8003b18 <HAL_GPIO_Init+0x300>)
 80039a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039ac:	6453      	str	r3, [r2, #68]	; 0x44
 80039ae:	4b5a      	ldr	r3, [pc, #360]	; (8003b18 <HAL_GPIO_Init+0x300>)
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ba:	4a58      	ldr	r2, [pc, #352]	; (8003b1c <HAL_GPIO_Init+0x304>)
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	3302      	adds	r3, #2
 80039c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	220f      	movs	r2, #15
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43db      	mvns	r3, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4013      	ands	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4f      	ldr	r2, [pc, #316]	; (8003b20 <HAL_GPIO_Init+0x308>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d025      	beq.n	8003a32 <HAL_GPIO_Init+0x21a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a4e      	ldr	r2, [pc, #312]	; (8003b24 <HAL_GPIO_Init+0x30c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01f      	beq.n	8003a2e <HAL_GPIO_Init+0x216>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a4d      	ldr	r2, [pc, #308]	; (8003b28 <HAL_GPIO_Init+0x310>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d019      	beq.n	8003a2a <HAL_GPIO_Init+0x212>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a4c      	ldr	r2, [pc, #304]	; (8003b2c <HAL_GPIO_Init+0x314>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_GPIO_Init+0x20e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a4b      	ldr	r2, [pc, #300]	; (8003b30 <HAL_GPIO_Init+0x318>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00d      	beq.n	8003a22 <HAL_GPIO_Init+0x20a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4a      	ldr	r2, [pc, #296]	; (8003b34 <HAL_GPIO_Init+0x31c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d007      	beq.n	8003a1e <HAL_GPIO_Init+0x206>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a49      	ldr	r2, [pc, #292]	; (8003b38 <HAL_GPIO_Init+0x320>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <HAL_GPIO_Init+0x202>
 8003a16:	2306      	movs	r3, #6
 8003a18:	e00c      	b.n	8003a34 <HAL_GPIO_Init+0x21c>
 8003a1a:	2307      	movs	r3, #7
 8003a1c:	e00a      	b.n	8003a34 <HAL_GPIO_Init+0x21c>
 8003a1e:	2305      	movs	r3, #5
 8003a20:	e008      	b.n	8003a34 <HAL_GPIO_Init+0x21c>
 8003a22:	2304      	movs	r3, #4
 8003a24:	e006      	b.n	8003a34 <HAL_GPIO_Init+0x21c>
 8003a26:	2303      	movs	r3, #3
 8003a28:	e004      	b.n	8003a34 <HAL_GPIO_Init+0x21c>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e002      	b.n	8003a34 <HAL_GPIO_Init+0x21c>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_GPIO_Init+0x21c>
 8003a32:	2300      	movs	r3, #0
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	f002 0203 	and.w	r2, r2, #3
 8003a3a:	0092      	lsls	r2, r2, #2
 8003a3c:	4093      	lsls	r3, r2
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a44:	4935      	ldr	r1, [pc, #212]	; (8003b1c <HAL_GPIO_Init+0x304>)
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	089b      	lsrs	r3, r3, #2
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a52:	4b3a      	ldr	r3, [pc, #232]	; (8003b3c <HAL_GPIO_Init+0x324>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a76:	4a31      	ldr	r2, [pc, #196]	; (8003b3c <HAL_GPIO_Init+0x324>)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a7c:	4b2f      	ldr	r3, [pc, #188]	; (8003b3c <HAL_GPIO_Init+0x324>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aa0:	4a26      	ldr	r2, [pc, #152]	; (8003b3c <HAL_GPIO_Init+0x324>)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aa6:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <HAL_GPIO_Init+0x324>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aca:	4a1c      	ldr	r2, [pc, #112]	; (8003b3c <HAL_GPIO_Init+0x324>)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ad0:	4b1a      	ldr	r3, [pc, #104]	; (8003b3c <HAL_GPIO_Init+0x324>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003af4:	4a11      	ldr	r2, [pc, #68]	; (8003b3c <HAL_GPIO_Init+0x324>)
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3301      	adds	r3, #1
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	2b0f      	cmp	r3, #15
 8003b04:	f67f ae96 	bls.w	8003834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	3724      	adds	r7, #36	; 0x24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	40013800 	.word	0x40013800
 8003b20:	40020000 	.word	0x40020000
 8003b24:	40020400 	.word	0x40020400
 8003b28:	40020800 	.word	0x40020800
 8003b2c:	40020c00 	.word	0x40020c00
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40021400 	.word	0x40021400
 8003b38:	40021800 	.word	0x40021800
 8003b3c:	40013c00 	.word	0x40013c00

08003b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	807b      	strh	r3, [r7, #2]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b50:	787b      	ldrb	r3, [r7, #1]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b56:	887a      	ldrh	r2, [r7, #2]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b5c:	e003      	b.n	8003b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b5e:	887b      	ldrh	r3, [r7, #2]
 8003b60:	041a      	lsls	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	619a      	str	r2, [r3, #24]
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b7e:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	4013      	ands	r3, r2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d006      	beq.n	8003b98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b8a:	4a05      	ldr	r2, [pc, #20]	; (8003ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fd fb7c 	bl	8001290 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40013c00 	.word	0x40013c00

08003ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e12b      	b.n	8003e0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fe fa8c 	bl	80020e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2224      	movs	r2, #36	; 0x24
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c08:	f002 fd0e 	bl	8006628 <HAL_RCC_GetPCLK1Freq>
 8003c0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4a81      	ldr	r2, [pc, #516]	; (8003e18 <HAL_I2C_Init+0x274>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d807      	bhi.n	8003c28 <HAL_I2C_Init+0x84>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a80      	ldr	r2, [pc, #512]	; (8003e1c <HAL_I2C_Init+0x278>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	bf94      	ite	ls
 8003c20:	2301      	movls	r3, #1
 8003c22:	2300      	movhi	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e006      	b.n	8003c36 <HAL_I2C_Init+0x92>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a7d      	ldr	r2, [pc, #500]	; (8003e20 <HAL_I2C_Init+0x27c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	bf94      	ite	ls
 8003c30:	2301      	movls	r3, #1
 8003c32:	2300      	movhi	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e0e7      	b.n	8003e0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4a78      	ldr	r2, [pc, #480]	; (8003e24 <HAL_I2C_Init+0x280>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	0c9b      	lsrs	r3, r3, #18
 8003c48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a6a      	ldr	r2, [pc, #424]	; (8003e18 <HAL_I2C_Init+0x274>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d802      	bhi.n	8003c78 <HAL_I2C_Init+0xd4>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	3301      	adds	r3, #1
 8003c76:	e009      	b.n	8003c8c <HAL_I2C_Init+0xe8>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	4a69      	ldr	r2, [pc, #420]	; (8003e28 <HAL_I2C_Init+0x284>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	099b      	lsrs	r3, r3, #6
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	495c      	ldr	r1, [pc, #368]	; (8003e18 <HAL_I2C_Init+0x274>)
 8003ca8:	428b      	cmp	r3, r1
 8003caa:	d819      	bhi.n	8003ce0 <HAL_I2C_Init+0x13c>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	1e59      	subs	r1, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cba:	1c59      	adds	r1, r3, #1
 8003cbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cc0:	400b      	ands	r3, r1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_I2C_Init+0x138>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1e59      	subs	r1, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cda:	e051      	b.n	8003d80 <HAL_I2C_Init+0x1dc>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	e04f      	b.n	8003d80 <HAL_I2C_Init+0x1dc>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d111      	bne.n	8003d0c <HAL_I2C_Init+0x168>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1e58      	subs	r0, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6859      	ldr	r1, [r3, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	440b      	add	r3, r1
 8003cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e012      	b.n	8003d32 <HAL_I2C_Init+0x18e>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1e58      	subs	r0, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	0099      	lsls	r1, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d22:	3301      	adds	r3, #1
 8003d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf0c      	ite	eq
 8003d2c:	2301      	moveq	r3, #1
 8003d2e:	2300      	movne	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_Init+0x196>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e022      	b.n	8003d80 <HAL_I2C_Init+0x1dc>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10e      	bne.n	8003d60 <HAL_I2C_Init+0x1bc>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1e58      	subs	r0, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6859      	ldr	r1, [r3, #4]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	440b      	add	r3, r1
 8003d50:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d54:	3301      	adds	r3, #1
 8003d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d5e:	e00f      	b.n	8003d80 <HAL_I2C_Init+0x1dc>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1e58      	subs	r0, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	0099      	lsls	r1, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d76:	3301      	adds	r3, #1
 8003d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	6809      	ldr	r1, [r1, #0]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69da      	ldr	r2, [r3, #28]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6911      	ldr	r1, [r2, #16]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68d2      	ldr	r2, [r2, #12]
 8003dba:	4311      	orrs	r1, r2
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	000186a0 	.word	0x000186a0
 8003e1c:	001e847f 	.word	0x001e847f
 8003e20:	003d08ff 	.word	0x003d08ff
 8003e24:	431bde83 	.word	0x431bde83
 8003e28:	10624dd3 	.word	0x10624dd3

08003e2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	461a      	mov	r2, r3
 8003e38:	460b      	mov	r3, r1
 8003e3a:	817b      	strh	r3, [r7, #10]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e40:	f7ff f90c 	bl	800305c <HAL_GetTick>
 8003e44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	f040 80e0 	bne.w	8004014 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2319      	movs	r3, #25
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4970      	ldr	r1, [pc, #448]	; (8004020 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f001 ffa8 	bl	8005db4 <I2C_WaitOnFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e0d3      	b.n	8004016 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_I2C_Master_Transmit+0x50>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e0cc      	b.n	8004016 <HAL_I2C_Master_Transmit+0x1ea>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d007      	beq.n	8003ea2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 0201 	orr.w	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2221      	movs	r2, #33	; 0x21
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	893a      	ldrh	r2, [r7, #8]
 8003ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a50      	ldr	r2, [pc, #320]	; (8004024 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ee2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ee4:	8979      	ldrh	r1, [r7, #10]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	6a3a      	ldr	r2, [r7, #32]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f001 fd6a 	bl	80059c4 <I2C_MasterRequestWrite>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e08d      	b.n	8004016 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f10:	e066      	b.n	8003fe0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	6a39      	ldr	r1, [r7, #32]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f002 f822 	bl	8005f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00d      	beq.n	8003f3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d107      	bne.n	8003f3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e06b      	b.n	8004016 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	781a      	ldrb	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_I2C_Master_Transmit+0x188>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d017      	beq.n	8003fb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	781a      	ldrb	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	6a39      	ldr	r1, [r7, #32]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f002 f812 	bl	8005fe2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00d      	beq.n	8003fe0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d107      	bne.n	8003fdc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e01a      	b.n	8004016 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d194      	bne.n	8003f12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	e000      	b.n	8004016 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	00100002 	.word	0x00100002
 8004024:	ffff0000 	.word	0xffff0000

08004028 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08c      	sub	sp, #48	; 0x30
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	607a      	str	r2, [r7, #4]
 8004032:	461a      	mov	r2, r3
 8004034:	460b      	mov	r3, r1
 8004036:	817b      	strh	r3, [r7, #10]
 8004038:	4613      	mov	r3, r2
 800403a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800403c:	f7ff f80e 	bl	800305c <HAL_GetTick>
 8004040:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b20      	cmp	r3, #32
 800404c:	f040 820b 	bne.w	8004466 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	2319      	movs	r3, #25
 8004056:	2201      	movs	r2, #1
 8004058:	497c      	ldr	r1, [pc, #496]	; (800424c <HAL_I2C_Master_Receive+0x224>)
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f001 feaa 	bl	8005db4 <I2C_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004066:	2302      	movs	r3, #2
 8004068:	e1fe      	b.n	8004468 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_I2C_Master_Receive+0x50>
 8004074:	2302      	movs	r3, #2
 8004076:	e1f7      	b.n	8004468 <HAL_I2C_Master_Receive+0x440>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b01      	cmp	r3, #1
 800408c:	d007      	beq.n	800409e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2222      	movs	r2, #34	; 0x22
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2210      	movs	r2, #16
 80040ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	893a      	ldrh	r2, [r7, #8]
 80040ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4a5c      	ldr	r2, [pc, #368]	; (8004250 <HAL_I2C_Master_Receive+0x228>)
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040e0:	8979      	ldrh	r1, [r7, #10]
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f001 fcee 	bl	8005ac8 <I2C_MasterRequestRead>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e1b8      	b.n	8004468 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d113      	bne.n	8004126 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fe:	2300      	movs	r3, #0
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	623b      	str	r3, [r7, #32]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	623b      	str	r3, [r7, #32]
 8004112:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e18c      	b.n	8004440 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412a:	2b01      	cmp	r3, #1
 800412c:	d11b      	bne.n	8004166 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	e16c      	b.n	8004440 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	2b02      	cmp	r3, #2
 800416c:	d11b      	bne.n	80041a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418e:	2300      	movs	r3, #0
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	e14c      	b.n	8004440 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041cc:	e138      	b.n	8004440 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	f200 80f1 	bhi.w	80043ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d123      	bne.n	8004228 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f001 ff6f 	bl	80060c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e139      	b.n	8004468 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004226:	e10b      	b.n	8004440 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	2b02      	cmp	r3, #2
 800422e:	d14e      	bne.n	80042ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	2200      	movs	r2, #0
 8004238:	4906      	ldr	r1, [pc, #24]	; (8004254 <HAL_I2C_Master_Receive+0x22c>)
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f001 fdba 	bl	8005db4 <I2C_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e10e      	b.n	8004468 <HAL_I2C_Master_Receive+0x440>
 800424a:	bf00      	nop
 800424c:	00100002 	.word	0x00100002
 8004250:	ffff0000 	.word	0xffff0000
 8004254:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042cc:	e0b8      	b.n	8004440 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	2200      	movs	r2, #0
 80042d6:	4966      	ldr	r1, [pc, #408]	; (8004470 <HAL_I2C_Master_Receive+0x448>)
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f001 fd6b 	bl	8005db4 <I2C_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0bf      	b.n	8004468 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	2200      	movs	r2, #0
 8004332:	494f      	ldr	r1, [pc, #316]	; (8004470 <HAL_I2C_Master_Receive+0x448>)
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f001 fd3d 	bl	8005db4 <I2C_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e091      	b.n	8004468 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043b8:	e042      	b.n	8004440 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f001 fe82 	bl	80060c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e04c      	b.n	8004468 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b04      	cmp	r3, #4
 800440c:	d118      	bne.n	8004440 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004444:	2b00      	cmp	r3, #0
 8004446:	f47f aec2 	bne.w	80041ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	e000      	b.n	8004468 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004466:	2302      	movs	r3, #2
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	3728      	adds	r7, #40	; 0x28
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	00010004 	.word	0x00010004

08004474 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004494:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	2b10      	cmp	r3, #16
 80044a2:	d003      	beq.n	80044ac <HAL_I2C_EV_IRQHandler+0x38>
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	f040 80bd 	bne.w	8004626 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10d      	bne.n	80044e2 <HAL_I2C_EV_IRQHandler+0x6e>
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80044cc:	d003      	beq.n	80044d6 <HAL_I2C_EV_IRQHandler+0x62>
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80044d4:	d101      	bne.n	80044da <HAL_I2C_EV_IRQHandler+0x66>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <HAL_I2C_EV_IRQHandler+0x68>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b01      	cmp	r3, #1
 80044de:	f000 812e 	beq.w	800473e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00c      	beq.n	8004506 <HAL_I2C_EV_IRQHandler+0x92>
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	0a5b      	lsrs	r3, r3, #9
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d006      	beq.n	8004506 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f001 fe6a 	bl	80061d2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fcbb 	bl	8004e7a <I2C_Master_SB>
 8004504:	e08e      	b.n	8004624 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	08db      	lsrs	r3, r3, #3
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_I2C_EV_IRQHandler+0xb2>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	0a5b      	lsrs	r3, r3, #9
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fd31 	bl	8004f86 <I2C_Master_ADD10>
 8004524:	e07e      	b.n	8004624 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_I2C_EV_IRQHandler+0xd2>
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	0a5b      	lsrs	r3, r3, #9
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fd4b 	bl	8004fda <I2C_Master_ADDR>
 8004544:	e06e      	b.n	8004624 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	089b      	lsrs	r3, r3, #2
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d037      	beq.n	80045c2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004560:	f000 80ef 	beq.w	8004742 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	09db      	lsrs	r3, r3, #7
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00f      	beq.n	8004590 <HAL_I2C_EV_IRQHandler+0x11c>
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	0a9b      	lsrs	r3, r3, #10
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <HAL_I2C_EV_IRQHandler+0x11c>
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	089b      	lsrs	r3, r3, #2
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d103      	bne.n	8004590 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f948 	bl	800481e <I2C_MasterTransmit_TXE>
 800458e:	e049      	b.n	8004624 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	089b      	lsrs	r3, r3, #2
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80d2 	beq.w	8004742 <HAL_I2C_EV_IRQHandler+0x2ce>
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	0a5b      	lsrs	r3, r3, #9
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 80cb 	beq.w	8004742 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	2b10      	cmp	r3, #16
 80045b0:	d103      	bne.n	80045ba <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f9cf 	bl	8004956 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045b8:	e0c3      	b.n	8004742 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fa33 	bl	8004a26 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045c0:	e0bf      	b.n	8004742 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d0:	f000 80b7 	beq.w	8004742 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	099b      	lsrs	r3, r3, #6
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00f      	beq.n	8004600 <HAL_I2C_EV_IRQHandler+0x18c>
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	0a9b      	lsrs	r3, r3, #10
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <HAL_I2C_EV_IRQHandler+0x18c>
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	089b      	lsrs	r3, r3, #2
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d103      	bne.n	8004600 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 faa3 	bl	8004b44 <I2C_MasterReceive_RXNE>
 80045fe:	e011      	b.n	8004624 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	089b      	lsrs	r3, r3, #2
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 809a 	beq.w	8004742 <HAL_I2C_EV_IRQHandler+0x2ce>
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	0a5b      	lsrs	r3, r3, #9
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 8093 	beq.w	8004742 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fb42 	bl	8004ca6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004622:	e08e      	b.n	8004742 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004624:	e08d      	b.n	8004742 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d004      	beq.n	8004638 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	e007      	b.n	8004648 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	085b      	lsrs	r3, r3, #1
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d012      	beq.n	800467a <HAL_I2C_EV_IRQHandler+0x206>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	0a5b      	lsrs	r3, r3, #9
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00c      	beq.n	800467a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004670:	69b9      	ldr	r1, [r7, #24]
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 ff00 	bl	8005478 <I2C_Slave_ADDR>
 8004678:	e066      	b.n	8004748 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <HAL_I2C_EV_IRQHandler+0x226>
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	0a5b      	lsrs	r3, r3, #9
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 ff34 	bl	8005500 <I2C_Slave_STOPF>
 8004698:	e056      	b.n	8004748 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800469a:	7bbb      	ldrb	r3, [r7, #14]
 800469c:	2b21      	cmp	r3, #33	; 0x21
 800469e:	d002      	beq.n	80046a6 <HAL_I2C_EV_IRQHandler+0x232>
 80046a0:	7bbb      	ldrb	r3, [r7, #14]
 80046a2:	2b29      	cmp	r3, #41	; 0x29
 80046a4:	d125      	bne.n	80046f2 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	09db      	lsrs	r3, r3, #7
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00f      	beq.n	80046d2 <HAL_I2C_EV_IRQHandler+0x25e>
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	0a9b      	lsrs	r3, r3, #10
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <HAL_I2C_EV_IRQHandler+0x25e>
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	089b      	lsrs	r3, r3, #2
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d103      	bne.n	80046d2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fe16 	bl	80052fc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046d0:	e039      	b.n	8004746 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	089b      	lsrs	r3, r3, #2
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d033      	beq.n	8004746 <HAL_I2C_EV_IRQHandler+0x2d2>
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	0a5b      	lsrs	r3, r3, #9
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d02d      	beq.n	8004746 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fe43 	bl	8005376 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046f0:	e029      	b.n	8004746 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	099b      	lsrs	r3, r3, #6
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00f      	beq.n	800471e <HAL_I2C_EV_IRQHandler+0x2aa>
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	0a9b      	lsrs	r3, r3, #10
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <HAL_I2C_EV_IRQHandler+0x2aa>
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	089b      	lsrs	r3, r3, #2
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fe4e 	bl	80053b8 <I2C_SlaveReceive_RXNE>
 800471c:	e014      	b.n	8004748 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	089b      	lsrs	r3, r3, #2
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00e      	beq.n	8004748 <HAL_I2C_EV_IRQHandler+0x2d4>
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	0a5b      	lsrs	r3, r3, #9
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d008      	beq.n	8004748 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fe7c 	bl	8005434 <I2C_SlaveReceive_BTF>
 800473c:	e004      	b.n	8004748 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800473e:	bf00      	nop
 8004740:	e002      	b.n	8004748 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004742:	bf00      	nop
 8004744:	e000      	b.n	8004748 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004746:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004748:	3720      	adds	r7, #32
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	460b      	mov	r3, r1
 80047a8:	70fb      	strb	r3, [r7, #3]
 80047aa:	4613      	mov	r3, r2
 80047ac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b084      	sub	sp, #16
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004834:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004840:	2b00      	cmp	r3, #0
 8004842:	d150      	bne.n	80048e6 <I2C_MasterTransmit_TXE+0xc8>
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b21      	cmp	r3, #33	; 0x21
 8004848:	d14d      	bne.n	80048e6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b08      	cmp	r3, #8
 800484e:	d01d      	beq.n	800488c <I2C_MasterTransmit_TXE+0x6e>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b20      	cmp	r3, #32
 8004854:	d01a      	beq.n	800488c <I2C_MasterTransmit_TXE+0x6e>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800485c:	d016      	beq.n	800488c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800486c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2211      	movs	r2, #17
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff ff62 	bl	800474e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800488a:	e060      	b.n	800494e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800489a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048aa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b40      	cmp	r3, #64	; 0x40
 80048c4:	d107      	bne.n	80048d6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff ff7d 	bl	80047ce <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048d4:	e03b      	b.n	800494e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff ff35 	bl	800474e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048e4:	e033      	b.n	800494e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	2b21      	cmp	r3, #33	; 0x21
 80048ea:	d005      	beq.n	80048f8 <I2C_MasterTransmit_TXE+0xda>
 80048ec:	7bbb      	ldrb	r3, [r7, #14]
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	d12d      	bne.n	800494e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b22      	cmp	r3, #34	; 0x22
 80048f6:	d12a      	bne.n	800494e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d108      	bne.n	8004914 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004910:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004912:	e01c      	b.n	800494e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d103      	bne.n	8004928 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f880 	bl	8004a26 <I2C_MemoryTransmit_TXE_BTF>
}
 8004926:	e012      	b.n	800494e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	781a      	ldrb	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800494c:	e7ff      	b.n	800494e <I2C_MasterTransmit_TXE+0x130>
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b21      	cmp	r3, #33	; 0x21
 800496e:	d156      	bne.n	8004a1e <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d012      	beq.n	80049a0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	781a      	ldrb	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800499e:	e03e      	b.n	8004a1e <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d01d      	beq.n	80049e2 <I2C_MasterTransmit_BTF+0x8c>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	d01a      	beq.n	80049e2 <I2C_MasterTransmit_BTF+0x8c>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049b2:	d016      	beq.n	80049e2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049c2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2211      	movs	r2, #17
 80049c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff feb7 	bl	800474e <HAL_I2C_MasterTxCpltCallback>
}
 80049e0:	e01d      	b.n	8004a1e <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049f0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a00:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff fe98 	bl	800474e <HAL_I2C_MasterTxCpltCallback>
}
 8004a1e:	bf00      	nop
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a34:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d11d      	bne.n	8004a7a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d10b      	bne.n	8004a5e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a56:	1c9a      	adds	r2, r3, #2
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004a5c:	e06e      	b.n	8004b3c <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	121b      	asrs	r3, r3, #8
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a78:	e060      	b.n	8004b3c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d10b      	bne.n	8004a9a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a98:	e050      	b.n	8004b3c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d14c      	bne.n	8004b3c <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	2b22      	cmp	r3, #34	; 0x22
 8004aa6:	d108      	bne.n	8004aba <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab6:	601a      	str	r2, [r3, #0]
}
 8004ab8:	e040      	b.n	8004b3c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d015      	beq.n	8004af0 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b21      	cmp	r3, #33	; 0x21
 8004ac8:	d112      	bne.n	8004af0 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	781a      	ldrb	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004aee:	e025      	b.n	8004b3c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d120      	bne.n	8004b3c <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	2b21      	cmp	r3, #33	; 0x21
 8004afe:	d11d      	bne.n	8004b3c <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b0e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b1e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff fe49 	bl	80047ce <HAL_I2C_MemTxCpltCallback>
}
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b22      	cmp	r3, #34	; 0x22
 8004b56:	f040 80a2 	bne.w	8004c9e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d921      	bls.n	8004bac <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691a      	ldr	r2, [r3, #16]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	f040 8082 	bne.w	8004c9e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004baa:	e078      	b.n	8004c9e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d074      	beq.n	8004c9e <I2C_MasterReceive_RXNE+0x15a>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d002      	beq.n	8004bc0 <I2C_MasterReceive_RXNE+0x7c>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d16e      	bne.n	8004c9e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f001 fa4f 	bl	8006064 <I2C_WaitOnSTOPRequestThroughIT>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d142      	bne.n	8004c52 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bda:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d10a      	bne.n	8004c3c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7ff fdd4 	bl	80047e2 <HAL_I2C_MemRxCpltCallback>
}
 8004c3a:	e030      	b.n	8004c9e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2212      	movs	r2, #18
 8004c48:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff fd89 	bl	8004762 <HAL_I2C_MasterRxCpltCallback>
}
 8004c50:	e025      	b.n	8004c9e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c60:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff fdac 	bl	80047f6 <HAL_I2C_ErrorCallback>
}
 8004c9e:	bf00      	nop
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d11b      	bne.n	8004cf6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ccc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004cf4:	e0bd      	b.n	8004e72 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d129      	bne.n	8004d54 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d00a      	beq.n	8004d2c <I2C_MasterReceive_BTF+0x86>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d007      	beq.n	8004d2c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d52:	e08e      	b.n	8004e72 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d176      	bne.n	8004e4c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d002      	beq.n	8004d6a <I2C_MasterReceive_BTF+0xc4>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d108      	bne.n	8004d7c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e019      	b.n	8004db0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d002      	beq.n	8004d88 <I2C_MasterReceive_BTF+0xe2>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d108      	bne.n	8004d9a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	e00a      	b.n	8004db0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	d007      	beq.n	8004db0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e0a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d10a      	bne.n	8004e36 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff fcd7 	bl	80047e2 <HAL_I2C_MemRxCpltCallback>
}
 8004e34:	e01d      	b.n	8004e72 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2212      	movs	r2, #18
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff fc8c 	bl	8004762 <HAL_I2C_MasterRxCpltCallback>
}
 8004e4a:	e012      	b.n	8004e72 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b40      	cmp	r3, #64	; 0x40
 8004e8c:	d117      	bne.n	8004ebe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d109      	bne.n	8004eaa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ea6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004ea8:	e067      	b.n	8004f7a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	611a      	str	r2, [r3, #16]
}
 8004ebc:	e05d      	b.n	8004f7a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ec6:	d133      	bne.n	8004f30 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b21      	cmp	r3, #33	; 0x21
 8004ed2:	d109      	bne.n	8004ee8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	461a      	mov	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ee4:	611a      	str	r2, [r3, #16]
 8004ee6:	e008      	b.n	8004efa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d004      	beq.n	8004f0c <I2C_Master_SB+0x92>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d108      	bne.n	8004f1e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d032      	beq.n	8004f7a <I2C_Master_SB+0x100>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d02d      	beq.n	8004f7a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f2c:	605a      	str	r2, [r3, #4]
}
 8004f2e:	e024      	b.n	8004f7a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10e      	bne.n	8004f56 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	11db      	asrs	r3, r3, #7
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	f003 0306 	and.w	r3, r3, #6
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	f063 030f 	orn	r3, r3, #15
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	611a      	str	r2, [r3, #16]
}
 8004f54:	e011      	b.n	8004f7a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d10d      	bne.n	8004f7a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	11db      	asrs	r3, r3, #7
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	f003 0306 	and.w	r3, r3, #6
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f063 030e 	orn	r3, r3, #14
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	611a      	str	r2, [r3, #16]
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d004      	beq.n	8004fac <I2C_Master_ADD10+0x26>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d108      	bne.n	8004fbe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00c      	beq.n	8004fce <I2C_Master_ADD10+0x48>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fcc:	605a      	str	r2, [r3, #4]
  }
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b091      	sub	sp, #68	; 0x44
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fe8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b22      	cmp	r3, #34	; 0x22
 8005002:	f040 8169 	bne.w	80052d8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10f      	bne.n	800502e <I2C_Master_ADDR+0x54>
 800500e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d10b      	bne.n	800502e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005016:	2300      	movs	r3, #0
 8005018:	633b      	str	r3, [r7, #48]	; 0x30
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	633b      	str	r3, [r7, #48]	; 0x30
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	633b      	str	r3, [r7, #48]	; 0x30
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	e160      	b.n	80052f0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005032:	2b00      	cmp	r3, #0
 8005034:	d11d      	bne.n	8005072 <I2C_Master_ADDR+0x98>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800503e:	d118      	bne.n	8005072 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005040:	2300      	movs	r3, #0
 8005042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005064:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	651a      	str	r2, [r3, #80]	; 0x50
 8005070:	e13e      	b.n	80052f0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005076:	b29b      	uxth	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d113      	bne.n	80050a4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800507c:	2300      	movs	r3, #0
 800507e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	e115      	b.n	80052d0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	f040 808a 	bne.w	80051c4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050b6:	d137      	bne.n	8005128 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d6:	d113      	bne.n	8005100 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e8:	2300      	movs	r3, #0
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	e0e7      	b.n	80052d0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005100:	2300      	movs	r3, #0
 8005102:	623b      	str	r3, [r7, #32]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	623b      	str	r3, [r7, #32]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	623b      	str	r3, [r7, #32]
 8005114:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	e0d3      	b.n	80052d0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	2b08      	cmp	r3, #8
 800512c:	d02e      	beq.n	800518c <I2C_Master_ADDR+0x1b2>
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	2b20      	cmp	r3, #32
 8005132:	d02b      	beq.n	800518c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005136:	2b12      	cmp	r3, #18
 8005138:	d102      	bne.n	8005140 <I2C_Master_ADDR+0x166>
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	2b01      	cmp	r3, #1
 800513e:	d125      	bne.n	800518c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	2b04      	cmp	r3, #4
 8005144:	d00e      	beq.n	8005164 <I2C_Master_ADDR+0x18a>
 8005146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005148:	2b02      	cmp	r3, #2
 800514a:	d00b      	beq.n	8005164 <I2C_Master_ADDR+0x18a>
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	2b10      	cmp	r3, #16
 8005150:	d008      	beq.n	8005164 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e007      	b.n	8005174 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005172:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005174:	2300      	movs	r3, #0
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	61fb      	str	r3, [r7, #28]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	e0a1      	b.n	80052d0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800519a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800519c:	2300      	movs	r3, #0
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	61bb      	str	r3, [r7, #24]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	e085      	b.n	80052d0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d14d      	bne.n	800526a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d016      	beq.n	8005202 <I2C_Master_ADDR+0x228>
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d013      	beq.n	8005202 <I2C_Master_ADDR+0x228>
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051dc:	2b10      	cmp	r3, #16
 80051de:	d010      	beq.n	8005202 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e007      	b.n	8005212 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005210:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800521c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005220:	d117      	bne.n	8005252 <I2C_Master_ADDR+0x278>
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005228:	d00b      	beq.n	8005242 <I2C_Master_ADDR+0x268>
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	2b01      	cmp	r3, #1
 800522e:	d008      	beq.n	8005242 <I2C_Master_ADDR+0x268>
 8005230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005232:	2b08      	cmp	r3, #8
 8005234:	d005      	beq.n	8005242 <I2C_Master_ADDR+0x268>
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	2b10      	cmp	r3, #16
 800523a:	d002      	beq.n	8005242 <I2C_Master_ADDR+0x268>
 800523c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523e:	2b20      	cmp	r3, #32
 8005240:	d107      	bne.n	8005252 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005250:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005252:	2300      	movs	r3, #0
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	e032      	b.n	80052d0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005278:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005288:	d117      	bne.n	80052ba <I2C_Master_ADDR+0x2e0>
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005290:	d00b      	beq.n	80052aa <I2C_Master_ADDR+0x2d0>
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	2b01      	cmp	r3, #1
 8005296:	d008      	beq.n	80052aa <I2C_Master_ADDR+0x2d0>
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	2b08      	cmp	r3, #8
 800529c:	d005      	beq.n	80052aa <I2C_Master_ADDR+0x2d0>
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d002      	beq.n	80052aa <I2C_Master_ADDR+0x2d0>
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d107      	bne.n	80052ba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80052d6:	e00b      	b.n	80052f0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
}
 80052ee:	e7ff      	b.n	80052f0 <I2C_Master_ADDR+0x316>
 80052f0:	bf00      	nop
 80052f2:	3744      	adds	r7, #68	; 0x44
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800530a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d02b      	beq.n	800536e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	781a      	ldrb	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d114      	bne.n	800536e <I2C_SlaveTransmit_TXE+0x72>
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	2b29      	cmp	r3, #41	; 0x29
 8005348:	d111      	bne.n	800536e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005358:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2221      	movs	r2, #33	; 0x21
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2228      	movs	r2, #40	; 0x28
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fa04 	bl	8004776 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005382:	b29b      	uxth	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d011      	beq.n	80053ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	781a      	ldrb	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d02c      	beq.n	800542c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d114      	bne.n	800542c <I2C_SlaveReceive_RXNE+0x74>
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	2b2a      	cmp	r3, #42	; 0x2a
 8005406:	d111      	bne.n	800542c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005416:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2222      	movs	r2, #34	; 0x22
 800541c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2228      	movs	r2, #40	; 0x28
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff f9af 	bl	800478a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d012      	beq.n	800546c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005482:	2300      	movs	r3, #0
 8005484:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548c:	b2db      	uxtb	r3, r3
 800548e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005492:	2b28      	cmp	r3, #40	; 0x28
 8005494:	d127      	bne.n	80054e6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	089b      	lsrs	r3, r3, #2
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80054b2:	2301      	movs	r3, #1
 80054b4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	09db      	lsrs	r3, r3, #7
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d103      	bne.n	80054ca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	81bb      	strh	r3, [r7, #12]
 80054c8:	e002      	b.n	80054d0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80054d8:	89ba      	ldrh	r2, [r7, #12]
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	4619      	mov	r1, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff f95d 	bl	800479e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80054e4:	e008      	b.n	80054f8 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f06f 0202 	mvn.w	r2, #2
 80054ee:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80054f8:	bf00      	nop
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800551e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005520:	2300      	movs	r3, #0
 8005522:	60bb      	str	r3, [r7, #8]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	60bb      	str	r3, [r7, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0201 	orr.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555c:	d172      	bne.n	8005644 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	2b22      	cmp	r3, #34	; 0x22
 8005562:	d002      	beq.n	800556a <I2C_Slave_STOPF+0x6a>
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	2b2a      	cmp	r3, #42	; 0x2a
 8005568:	d135      	bne.n	80055d6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	b29a      	uxth	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f043 0204 	orr.w	r2, r3, #4
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800559c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe f849 	bl	800363a <HAL_DMA_GetState>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d049      	beq.n	8005642 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	4a69      	ldr	r2, [pc, #420]	; (8005758 <I2C_Slave_STOPF+0x258>)
 80055b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe f81b 	bl	80035f6 <HAL_DMA_Abort_IT>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d03d      	beq.n	8005642 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055d0:	4610      	mov	r0, r2
 80055d2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055d4:	e035      	b.n	8005642 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	b29a      	uxth	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f043 0204 	orr.w	r2, r3, #4
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005608:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560e:	4618      	mov	r0, r3
 8005610:	f7fe f813 	bl	800363a <HAL_DMA_GetState>
 8005614:	4603      	mov	r3, r0
 8005616:	2b01      	cmp	r3, #1
 8005618:	d014      	beq.n	8005644 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561e:	4a4e      	ldr	r2, [pc, #312]	; (8005758 <I2C_Slave_STOPF+0x258>)
 8005620:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005626:	4618      	mov	r0, r3
 8005628:	f7fd ffe5 	bl	80035f6 <HAL_DMA_Abort_IT>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d008      	beq.n	8005644 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800563c:	4610      	mov	r0, r2
 800563e:	4798      	blx	r3
 8005640:	e000      	b.n	8005644 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005642:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d03e      	beq.n	80056cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b04      	cmp	r3, #4
 800565a:	d112      	bne.n	8005682 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005678:	b29b      	uxth	r3, r3
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568c:	2b40      	cmp	r3, #64	; 0x40
 800568e:	d112      	bne.n	80056b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d005      	beq.n	80056cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	f043 0204 	orr.w	r2, r3, #4
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f843 	bl	8005760 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80056da:	e039      	b.n	8005750 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b2a      	cmp	r3, #42	; 0x2a
 80056e0:	d109      	bne.n	80056f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2228      	movs	r2, #40	; 0x28
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7ff f84a 	bl	800478a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b28      	cmp	r3, #40	; 0x28
 8005700:	d111      	bne.n	8005726 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a15      	ldr	r2, [pc, #84]	; (800575c <I2C_Slave_STOPF+0x25c>)
 8005706:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff f84b 	bl	80047ba <HAL_I2C_ListenCpltCallback>
}
 8005724:	e014      	b.n	8005750 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	2b22      	cmp	r3, #34	; 0x22
 800572c:	d002      	beq.n	8005734 <I2C_Slave_STOPF+0x234>
 800572e:	7bfb      	ldrb	r3, [r7, #15]
 8005730:	2b22      	cmp	r3, #34	; 0x22
 8005732:	d10d      	bne.n	8005750 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff f81d 	bl	800478a <HAL_I2C_SlaveRxCpltCallback>
}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	08005c65 	.word	0x08005c65
 800575c:	ffff0000 	.word	0xffff0000

08005760 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005776:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005778:	7bbb      	ldrb	r3, [r7, #14]
 800577a:	2b10      	cmp	r3, #16
 800577c:	d002      	beq.n	8005784 <I2C_ITError+0x24>
 800577e:	7bbb      	ldrb	r3, [r7, #14]
 8005780:	2b40      	cmp	r3, #64	; 0x40
 8005782:	d10a      	bne.n	800579a <I2C_ITError+0x3a>
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	2b22      	cmp	r3, #34	; 0x22
 8005788:	d107      	bne.n	800579a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005798:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057a0:	2b28      	cmp	r3, #40	; 0x28
 80057a2:	d107      	bne.n	80057b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2228      	movs	r2, #40	; 0x28
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057b2:	e015      	b.n	80057e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c2:	d00a      	beq.n	80057da <I2C_ITError+0x7a>
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	2b60      	cmp	r3, #96	; 0x60
 80057c8:	d007      	beq.n	80057da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ee:	d162      	bne.n	80058b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b01      	cmp	r3, #1
 800580c:	d020      	beq.n	8005850 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005812:	4a6a      	ldr	r2, [pc, #424]	; (80059bc <I2C_ITError+0x25c>)
 8005814:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581a:	4618      	mov	r0, r3
 800581c:	f7fd feeb 	bl	80035f6 <HAL_DMA_Abort_IT>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 8089 	beq.w	800593a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0201 	bic.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800584a:	4610      	mov	r0, r2
 800584c:	4798      	blx	r3
 800584e:	e074      	b.n	800593a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	4a59      	ldr	r2, [pc, #356]	; (80059bc <I2C_ITError+0x25c>)
 8005856:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	4618      	mov	r0, r3
 800585e:	f7fd feca 	bl	80035f6 <HAL_DMA_Abort_IT>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d068      	beq.n	800593a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005872:	2b40      	cmp	r3, #64	; 0x40
 8005874:	d10b      	bne.n	800588e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0201 	bic.w	r2, r2, #1
 800589c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058b0:	4610      	mov	r0, r2
 80058b2:	4798      	blx	r3
 80058b4:	e041      	b.n	800593a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b60      	cmp	r3, #96	; 0x60
 80058c0:	d125      	bne.n	800590e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058da:	2b40      	cmp	r3, #64	; 0x40
 80058dc:	d10b      	bne.n	80058f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0201 	bic.w	r2, r2, #1
 8005904:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fe ff7f 	bl	800480a <HAL_I2C_AbortCpltCallback>
 800590c:	e015      	b.n	800593a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	d10b      	bne.n	8005934 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7fe ff5e 	bl	80047f6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10e      	bne.n	8005968 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005950:	2b00      	cmp	r3, #0
 8005952:	d109      	bne.n	8005968 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800595a:	2b00      	cmp	r3, #0
 800595c:	d104      	bne.n	8005968 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005964:	2b00      	cmp	r3, #0
 8005966:	d007      	beq.n	8005978 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005976:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b04      	cmp	r3, #4
 800598a:	d113      	bne.n	80059b4 <I2C_ITError+0x254>
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	2b28      	cmp	r3, #40	; 0x28
 8005990:	d110      	bne.n	80059b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a0a      	ldr	r2, [pc, #40]	; (80059c0 <I2C_ITError+0x260>)
 8005996:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fe ff03 	bl	80047ba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	08005c65 	.word	0x08005c65
 80059c0:	ffff0000 	.word	0xffff0000

080059c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	607a      	str	r2, [r7, #4]
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	460b      	mov	r3, r1
 80059d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d006      	beq.n	80059ee <I2C_MasterRequestWrite+0x2a>
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d003      	beq.n	80059ee <I2C_MasterRequestWrite+0x2a>
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059ec:	d108      	bne.n	8005a00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e00b      	b.n	8005a18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a04:	2b12      	cmp	r3, #18
 8005a06:	d107      	bne.n	8005a18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 f9c5 	bl	8005db4 <I2C_WaitOnFlagUntilTimeout>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00d      	beq.n	8005a4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a3e:	d103      	bne.n	8005a48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e035      	b.n	8005ab8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a54:	d108      	bne.n	8005a68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a56:	897b      	ldrh	r3, [r7, #10]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a64:	611a      	str	r2, [r3, #16]
 8005a66:	e01b      	b.n	8005aa0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a68:	897b      	ldrh	r3, [r7, #10]
 8005a6a:	11db      	asrs	r3, r3, #7
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	f003 0306 	and.w	r3, r3, #6
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f063 030f 	orn	r3, r3, #15
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	490e      	ldr	r1, [pc, #56]	; (8005ac0 <I2C_MasterRequestWrite+0xfc>)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f9eb 	bl	8005e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e010      	b.n	8005ab8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a96:	897b      	ldrh	r3, [r7, #10]
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	4907      	ldr	r1, [pc, #28]	; (8005ac4 <I2C_MasterRequestWrite+0x100>)
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f9db 	bl	8005e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	00010008 	.word	0x00010008
 8005ac4:	00010002 	.word	0x00010002

08005ac8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	607a      	str	r2, [r7, #4]
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005aec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d006      	beq.n	8005b02 <I2C_MasterRequestRead+0x3a>
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d003      	beq.n	8005b02 <I2C_MasterRequestRead+0x3a>
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b00:	d108      	bne.n	8005b14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	e00b      	b.n	8005b2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	2b11      	cmp	r3, #17
 8005b1a:	d107      	bne.n	8005b2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f93b 	bl	8005db4 <I2C_WaitOnFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00d      	beq.n	8005b60 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b52:	d103      	bne.n	8005b5c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e079      	b.n	8005c54 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b68:	d108      	bne.n	8005b7c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b6a:	897b      	ldrh	r3, [r7, #10]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	f043 0301 	orr.w	r3, r3, #1
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	611a      	str	r2, [r3, #16]
 8005b7a:	e05f      	b.n	8005c3c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b7c:	897b      	ldrh	r3, [r7, #10]
 8005b7e:	11db      	asrs	r3, r3, #7
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	f003 0306 	and.w	r3, r3, #6
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	f063 030f 	orn	r3, r3, #15
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	4930      	ldr	r1, [pc, #192]	; (8005c5c <I2C_MasterRequestRead+0x194>)
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f961 	bl	8005e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e054      	b.n	8005c54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005baa:	897b      	ldrh	r3, [r7, #10]
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	4929      	ldr	r1, [pc, #164]	; (8005c60 <I2C_MasterRequestRead+0x198>)
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f951 	bl	8005e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e044      	b.n	8005c54 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bca:	2300      	movs	r3, #0
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	613b      	str	r3, [r7, #16]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f8d9 	bl	8005db4 <I2C_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00d      	beq.n	8005c24 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c16:	d103      	bne.n	8005c20 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c1e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e017      	b.n	8005c54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005c24:	897b      	ldrh	r3, [r7, #10]
 8005c26:	11db      	asrs	r3, r3, #7
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	f003 0306 	and.w	r3, r3, #6
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	f063 030e 	orn	r3, r3, #14
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	4907      	ldr	r1, [pc, #28]	; (8005c60 <I2C_MasterRequestRead+0x198>)
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 f90d 	bl	8005e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	00010008 	.word	0x00010008
 8005c60:	00010002 	.word	0x00010002

08005c64 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c7e:	4b4b      	ldr	r3, [pc, #300]	; (8005dac <I2C_DMAAbort+0x148>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	08db      	lsrs	r3, r3, #3
 8005c84:	4a4a      	ldr	r2, [pc, #296]	; (8005db0 <I2C_DMAAbort+0x14c>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	0a1a      	lsrs	r2, r3, #8
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	00da      	lsls	r2, r3, #3
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d106      	bne.n	8005cac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	f043 0220 	orr.w	r2, r3, #32
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005caa:	e00a      	b.n	8005cc2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cc0:	d0ea      	beq.n	8005c98 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cce:	2200      	movs	r2, #0
 8005cd0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	2200      	movs	r2, #0
 8005ce0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d04:	2200      	movs	r2, #0
 8005d06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d14:	2200      	movs	r2, #0
 8005d16:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0201 	bic.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b60      	cmp	r3, #96	; 0x60
 8005d32:	d10e      	bne.n	8005d52 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2200      	movs	r2, #0
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d4a:	6978      	ldr	r0, [r7, #20]
 8005d4c:	f7fe fd5d 	bl	800480a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d50:	e027      	b.n	8005da2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d52:	7cfb      	ldrb	r3, [r7, #19]
 8005d54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d58:	2b28      	cmp	r3, #40	; 0x28
 8005d5a:	d117      	bne.n	8005d8c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0201 	orr.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2228      	movs	r2, #40	; 0x28
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d8a:	e007      	b.n	8005d9c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005d9c:	6978      	ldr	r0, [r7, #20]
 8005d9e:	f7fe fd2a 	bl	80047f6 <HAL_I2C_ErrorCallback>
}
 8005da2:	bf00      	nop
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000004 	.word	0x20000004
 8005db0:	14f8b589 	.word	0x14f8b589

08005db4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dc4:	e025      	b.n	8005e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dcc:	d021      	beq.n	8005e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dce:	f7fd f945 	bl	800305c <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d302      	bcc.n	8005de4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d116      	bne.n	8005e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f043 0220 	orr.w	r2, r3, #32
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e023      	b.n	8005e5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	0c1b      	lsrs	r3, r3, #16
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d10d      	bne.n	8005e38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	43da      	mvns	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4013      	ands	r3, r2
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	bf0c      	ite	eq
 8005e2e:	2301      	moveq	r3, #1
 8005e30:	2300      	movne	r3, #0
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	e00c      	b.n	8005e52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	43da      	mvns	r2, r3
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4013      	ands	r3, r2
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	bf0c      	ite	eq
 8005e4a:	2301      	moveq	r3, #1
 8005e4c:	2300      	movne	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d0b6      	beq.n	8005dc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e70:	e051      	b.n	8005f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e80:	d123      	bne.n	8005eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f043 0204 	orr.w	r2, r3, #4
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e046      	b.n	8005f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ed0:	d021      	beq.n	8005f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed2:	f7fd f8c3 	bl	800305c <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d302      	bcc.n	8005ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d116      	bne.n	8005f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	f043 0220 	orr.w	r2, r3, #32
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e020      	b.n	8005f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	0c1b      	lsrs	r3, r3, #16
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d10c      	bne.n	8005f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	43da      	mvns	r2, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	bf14      	ite	ne
 8005f32:	2301      	movne	r3, #1
 8005f34:	2300      	moveq	r3, #0
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	e00b      	b.n	8005f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	43da      	mvns	r2, r3
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	4013      	ands	r3, r2
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bf14      	ite	ne
 8005f4c:	2301      	movne	r3, #1
 8005f4e:	2300      	moveq	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d18d      	bne.n	8005e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f6c:	e02d      	b.n	8005fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 f900 	bl	8006174 <I2C_IsAcknowledgeFailed>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e02d      	b.n	8005fda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f84:	d021      	beq.n	8005fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f86:	f7fd f869 	bl	800305c <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d302      	bcc.n	8005f9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d116      	bne.n	8005fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	f043 0220 	orr.w	r2, r3, #32
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e007      	b.n	8005fda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd4:	2b80      	cmp	r3, #128	; 0x80
 8005fd6:	d1ca      	bne.n	8005f6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fee:	e02d      	b.n	800604c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f8bf 	bl	8006174 <I2C_IsAcknowledgeFailed>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e02d      	b.n	800605c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006006:	d021      	beq.n	800604c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006008:	f7fd f828 	bl	800305c <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	429a      	cmp	r2, r3
 8006016:	d302      	bcc.n	800601e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d116      	bne.n	800604c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006038:	f043 0220 	orr.w	r2, r3, #32
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e007      	b.n	800605c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b04      	cmp	r3, #4
 8006058:	d1ca      	bne.n	8005ff0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006070:	4b13      	ldr	r3, [pc, #76]	; (80060c0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	08db      	lsrs	r3, r3, #3
 8006076:	4a13      	ldr	r2, [pc, #76]	; (80060c4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006078:	fba2 2303 	umull	r2, r3, r2, r3
 800607c:	0a1a      	lsrs	r2, r3, #8
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	3b01      	subs	r3, #1
 800608a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d107      	bne.n	80060a2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f043 0220 	orr.w	r2, r3, #32
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e008      	b.n	80060b4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b0:	d0e9      	beq.n	8006086 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	20000004 	.word	0x20000004
 80060c4:	14f8b589 	.word	0x14f8b589

080060c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060d4:	e042      	b.n	800615c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	f003 0310 	and.w	r3, r3, #16
 80060e0:	2b10      	cmp	r3, #16
 80060e2:	d119      	bne.n	8006118 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f06f 0210 	mvn.w	r2, #16
 80060ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e029      	b.n	800616c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006118:	f7fc ffa0 	bl	800305c <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	429a      	cmp	r2, r3
 8006126:	d302      	bcc.n	800612e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d116      	bne.n	800615c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	f043 0220 	orr.w	r2, r3, #32
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e007      	b.n	800616c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006166:	2b40      	cmp	r3, #64	; 0x40
 8006168:	d1b5      	bne.n	80060d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800618a:	d11b      	bne.n	80061c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006194:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b0:	f043 0204 	orr.w	r2, r3, #4
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e000      	b.n	80061c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80061e2:	d103      	bne.n	80061ec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80061ea:	e007      	b.n	80061fc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80061f4:	d102      	bne.n	80061fc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2208      	movs	r2, #8
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e0cc      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800621c:	4b68      	ldr	r3, [pc, #416]	; (80063c0 <HAL_RCC_ClockConfig+0x1b8>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d90c      	bls.n	8006244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622a:	4b65      	ldr	r3, [pc, #404]	; (80063c0 <HAL_RCC_ClockConfig+0x1b8>)
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006232:	4b63      	ldr	r3, [pc, #396]	; (80063c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d001      	beq.n	8006244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e0b8      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d020      	beq.n	8006292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	d005      	beq.n	8006268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800625c:	4b59      	ldr	r3, [pc, #356]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	4a58      	ldr	r2, [pc, #352]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006262:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006266:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0308 	and.w	r3, r3, #8
 8006270:	2b00      	cmp	r3, #0
 8006272:	d005      	beq.n	8006280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006274:	4b53      	ldr	r3, [pc, #332]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	4a52      	ldr	r2, [pc, #328]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 800627a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800627e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006280:	4b50      	ldr	r3, [pc, #320]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	494d      	ldr	r1, [pc, #308]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 800628e:	4313      	orrs	r3, r2
 8006290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d044      	beq.n	8006328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d107      	bne.n	80062b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062a6:	4b47      	ldr	r3, [pc, #284]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d119      	bne.n	80062e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e07f      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d003      	beq.n	80062c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d107      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062c6:	4b3f      	ldr	r3, [pc, #252]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d109      	bne.n	80062e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e06f      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062d6:	4b3b      	ldr	r3, [pc, #236]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e067      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062e6:	4b37      	ldr	r3, [pc, #220]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f023 0203 	bic.w	r2, r3, #3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	4934      	ldr	r1, [pc, #208]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062f8:	f7fc feb0 	bl	800305c <HAL_GetTick>
 80062fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062fe:	e00a      	b.n	8006316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006300:	f7fc feac 	bl	800305c <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f241 3288 	movw	r2, #5000	; 0x1388
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e04f      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006316:	4b2b      	ldr	r3, [pc, #172]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 020c 	and.w	r2, r3, #12
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	429a      	cmp	r2, r3
 8006326:	d1eb      	bne.n	8006300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006328:	4b25      	ldr	r3, [pc, #148]	; (80063c0 <HAL_RCC_ClockConfig+0x1b8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d20c      	bcs.n	8006350 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006336:	4b22      	ldr	r3, [pc, #136]	; (80063c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800633e:	4b20      	ldr	r3, [pc, #128]	; (80063c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d001      	beq.n	8006350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e032      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800635c:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	4916      	ldr	r1, [pc, #88]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	4313      	orrs	r3, r2
 800636c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d009      	beq.n	800638e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800637a:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	490e      	ldr	r1, [pc, #56]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	4313      	orrs	r3, r2
 800638c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800638e:	f000 f889 	bl	80064a4 <HAL_RCC_GetSysClockFreq>
 8006392:	4602      	mov	r2, r0
 8006394:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	091b      	lsrs	r3, r3, #4
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	490a      	ldr	r1, [pc, #40]	; (80063c8 <HAL_RCC_ClockConfig+0x1c0>)
 80063a0:	5ccb      	ldrb	r3, [r1, r3]
 80063a2:	fa22 f303 	lsr.w	r3, r2, r3
 80063a6:	4a09      	ldr	r2, [pc, #36]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 80063a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063aa:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fc fe10 	bl	8002fd4 <HAL_InitTick>

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40023c00 	.word	0x40023c00
 80063c4:	40023800 	.word	0x40023800
 80063c8:	0802be14 	.word	0x0802be14
 80063cc:	20000004 	.word	0x20000004
 80063d0:	20000008 	.word	0x20000008

080063d4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08c      	sub	sp, #48	; 0x30
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d129      	bne.n	800643a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80063e6:	2300      	movs	r3, #0
 80063e8:	61bb      	str	r3, [r7, #24]
 80063ea:	4b2b      	ldr	r3, [pc, #172]	; (8006498 <HAL_RCC_MCOConfig+0xc4>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	4a2a      	ldr	r2, [pc, #168]	; (8006498 <HAL_RCC_MCOConfig+0xc4>)
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	6313      	str	r3, [r2, #48]	; 0x30
 80063f6:	4b28      	ldr	r3, [pc, #160]	; (8006498 <HAL_RCC_MCOConfig+0xc4>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	61bb      	str	r3, [r7, #24]
 8006400:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006408:	2302      	movs	r3, #2
 800640a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800640c:	2303      	movs	r3, #3
 800640e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006410:	2300      	movs	r3, #0
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006414:	2300      	movs	r3, #0
 8006416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006418:	f107 031c 	add.w	r3, r7, #28
 800641c:	4619      	mov	r1, r3
 800641e:	481f      	ldr	r0, [pc, #124]	; (800649c <HAL_RCC_MCOConfig+0xc8>)
 8006420:	f7fd f9fa 	bl	8003818 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006424:	4b1c      	ldr	r3, [pc, #112]	; (8006498 <HAL_RCC_MCOConfig+0xc4>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800642c:	68b9      	ldr	r1, [r7, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	430b      	orrs	r3, r1
 8006432:	4919      	ldr	r1, [pc, #100]	; (8006498 <HAL_RCC_MCOConfig+0xc4>)
 8006434:	4313      	orrs	r3, r2
 8006436:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8006438:	e029      	b.n	800648e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]
 800643e:	4b16      	ldr	r3, [pc, #88]	; (8006498 <HAL_RCC_MCOConfig+0xc4>)
 8006440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006442:	4a15      	ldr	r2, [pc, #84]	; (8006498 <HAL_RCC_MCOConfig+0xc4>)
 8006444:	f043 0304 	orr.w	r3, r3, #4
 8006448:	6313      	str	r3, [r2, #48]	; 0x30
 800644a:	4b13      	ldr	r3, [pc, #76]	; (8006498 <HAL_RCC_MCOConfig+0xc4>)
 800644c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800645a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800645c:	2302      	movs	r3, #2
 800645e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006460:	2303      	movs	r3, #3
 8006462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006464:	2300      	movs	r3, #0
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006468:	2300      	movs	r3, #0
 800646a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800646c:	f107 031c 	add.w	r3, r7, #28
 8006470:	4619      	mov	r1, r3
 8006472:	480b      	ldr	r0, [pc, #44]	; (80064a0 <HAL_RCC_MCOConfig+0xcc>)
 8006474:	f7fd f9d0 	bl	8003818 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8006478:	4b07      	ldr	r3, [pc, #28]	; (8006498 <HAL_RCC_MCOConfig+0xc4>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	00d9      	lsls	r1, r3, #3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	430b      	orrs	r3, r1
 8006488:	4903      	ldr	r1, [pc, #12]	; (8006498 <HAL_RCC_MCOConfig+0xc4>)
 800648a:	4313      	orrs	r3, r2
 800648c:	608b      	str	r3, [r1, #8]
}
 800648e:	bf00      	nop
 8006490:	3730      	adds	r7, #48	; 0x30
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	40023800 	.word	0x40023800
 800649c:	40020000 	.word	0x40020000
 80064a0:	40020800 	.word	0x40020800

080064a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064a4:	b5b0      	push	{r4, r5, r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064aa:	2100      	movs	r1, #0
 80064ac:	6079      	str	r1, [r7, #4]
 80064ae:	2100      	movs	r1, #0
 80064b0:	60f9      	str	r1, [r7, #12]
 80064b2:	2100      	movs	r1, #0
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80064b6:	2100      	movs	r1, #0
 80064b8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064ba:	4952      	ldr	r1, [pc, #328]	; (8006604 <HAL_RCC_GetSysClockFreq+0x160>)
 80064bc:	6889      	ldr	r1, [r1, #8]
 80064be:	f001 010c 	and.w	r1, r1, #12
 80064c2:	2908      	cmp	r1, #8
 80064c4:	d00d      	beq.n	80064e2 <HAL_RCC_GetSysClockFreq+0x3e>
 80064c6:	2908      	cmp	r1, #8
 80064c8:	f200 8094 	bhi.w	80065f4 <HAL_RCC_GetSysClockFreq+0x150>
 80064cc:	2900      	cmp	r1, #0
 80064ce:	d002      	beq.n	80064d6 <HAL_RCC_GetSysClockFreq+0x32>
 80064d0:	2904      	cmp	r1, #4
 80064d2:	d003      	beq.n	80064dc <HAL_RCC_GetSysClockFreq+0x38>
 80064d4:	e08e      	b.n	80065f4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064d6:	4b4c      	ldr	r3, [pc, #304]	; (8006608 <HAL_RCC_GetSysClockFreq+0x164>)
 80064d8:	60bb      	str	r3, [r7, #8]
       break;
 80064da:	e08e      	b.n	80065fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064dc:	4b4b      	ldr	r3, [pc, #300]	; (800660c <HAL_RCC_GetSysClockFreq+0x168>)
 80064de:	60bb      	str	r3, [r7, #8]
      break;
 80064e0:	e08b      	b.n	80065fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064e2:	4948      	ldr	r1, [pc, #288]	; (8006604 <HAL_RCC_GetSysClockFreq+0x160>)
 80064e4:	6849      	ldr	r1, [r1, #4]
 80064e6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80064ea:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064ec:	4945      	ldr	r1, [pc, #276]	; (8006604 <HAL_RCC_GetSysClockFreq+0x160>)
 80064ee:	6849      	ldr	r1, [r1, #4]
 80064f0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80064f4:	2900      	cmp	r1, #0
 80064f6:	d024      	beq.n	8006542 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064f8:	4942      	ldr	r1, [pc, #264]	; (8006604 <HAL_RCC_GetSysClockFreq+0x160>)
 80064fa:	6849      	ldr	r1, [r1, #4]
 80064fc:	0989      	lsrs	r1, r1, #6
 80064fe:	4608      	mov	r0, r1
 8006500:	f04f 0100 	mov.w	r1, #0
 8006504:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006508:	f04f 0500 	mov.w	r5, #0
 800650c:	ea00 0204 	and.w	r2, r0, r4
 8006510:	ea01 0305 	and.w	r3, r1, r5
 8006514:	493d      	ldr	r1, [pc, #244]	; (800660c <HAL_RCC_GetSysClockFreq+0x168>)
 8006516:	fb01 f003 	mul.w	r0, r1, r3
 800651a:	2100      	movs	r1, #0
 800651c:	fb01 f102 	mul.w	r1, r1, r2
 8006520:	1844      	adds	r4, r0, r1
 8006522:	493a      	ldr	r1, [pc, #232]	; (800660c <HAL_RCC_GetSysClockFreq+0x168>)
 8006524:	fba2 0101 	umull	r0, r1, r2, r1
 8006528:	1863      	adds	r3, r4, r1
 800652a:	4619      	mov	r1, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	461a      	mov	r2, r3
 8006530:	f04f 0300 	mov.w	r3, #0
 8006534:	f7fa fba4 	bl	8000c80 <__aeabi_uldivmod>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4613      	mov	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	e04a      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006542:	4b30      	ldr	r3, [pc, #192]	; (8006604 <HAL_RCC_GetSysClockFreq+0x160>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	099b      	lsrs	r3, r3, #6
 8006548:	461a      	mov	r2, r3
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006552:	f04f 0100 	mov.w	r1, #0
 8006556:	ea02 0400 	and.w	r4, r2, r0
 800655a:	ea03 0501 	and.w	r5, r3, r1
 800655e:	4620      	mov	r0, r4
 8006560:	4629      	mov	r1, r5
 8006562:	f04f 0200 	mov.w	r2, #0
 8006566:	f04f 0300 	mov.w	r3, #0
 800656a:	014b      	lsls	r3, r1, #5
 800656c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006570:	0142      	lsls	r2, r0, #5
 8006572:	4610      	mov	r0, r2
 8006574:	4619      	mov	r1, r3
 8006576:	1b00      	subs	r0, r0, r4
 8006578:	eb61 0105 	sbc.w	r1, r1, r5
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	018b      	lsls	r3, r1, #6
 8006586:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800658a:	0182      	lsls	r2, r0, #6
 800658c:	1a12      	subs	r2, r2, r0
 800658e:	eb63 0301 	sbc.w	r3, r3, r1
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f04f 0100 	mov.w	r1, #0
 800659a:	00d9      	lsls	r1, r3, #3
 800659c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065a0:	00d0      	lsls	r0, r2, #3
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	1912      	adds	r2, r2, r4
 80065a8:	eb45 0303 	adc.w	r3, r5, r3
 80065ac:	f04f 0000 	mov.w	r0, #0
 80065b0:	f04f 0100 	mov.w	r1, #0
 80065b4:	0299      	lsls	r1, r3, #10
 80065b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80065ba:	0290      	lsls	r0, r2, #10
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4610      	mov	r0, r2
 80065c2:	4619      	mov	r1, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	461a      	mov	r2, r3
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	f7fa fb58 	bl	8000c80 <__aeabi_uldivmod>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4613      	mov	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065d8:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <HAL_RCC_GetSysClockFreq+0x160>)
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	0c1b      	lsrs	r3, r3, #16
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	3301      	adds	r3, #1
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f0:	60bb      	str	r3, [r7, #8]
      break;
 80065f2:	e002      	b.n	80065fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065f4:	4b04      	ldr	r3, [pc, #16]	; (8006608 <HAL_RCC_GetSysClockFreq+0x164>)
 80065f6:	60bb      	str	r3, [r7, #8]
      break;
 80065f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065fa:	68bb      	ldr	r3, [r7, #8]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bdb0      	pop	{r4, r5, r7, pc}
 8006604:	40023800 	.word	0x40023800
 8006608:	00f42400 	.word	0x00f42400
 800660c:	017d7840 	.word	0x017d7840

08006610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006614:	4b03      	ldr	r3, [pc, #12]	; (8006624 <HAL_RCC_GetHCLKFreq+0x14>)
 8006616:	681b      	ldr	r3, [r3, #0]
}
 8006618:	4618      	mov	r0, r3
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	20000004 	.word	0x20000004

08006628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800662c:	f7ff fff0 	bl	8006610 <HAL_RCC_GetHCLKFreq>
 8006630:	4602      	mov	r2, r0
 8006632:	4b05      	ldr	r3, [pc, #20]	; (8006648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	0a9b      	lsrs	r3, r3, #10
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	4903      	ldr	r1, [pc, #12]	; (800664c <HAL_RCC_GetPCLK1Freq+0x24>)
 800663e:	5ccb      	ldrb	r3, [r1, r3]
 8006640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006644:	4618      	mov	r0, r3
 8006646:	bd80      	pop	{r7, pc}
 8006648:	40023800 	.word	0x40023800
 800664c:	0802be24 	.word	0x0802be24

08006650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006654:	f7ff ffdc 	bl	8006610 <HAL_RCC_GetHCLKFreq>
 8006658:	4602      	mov	r2, r0
 800665a:	4b05      	ldr	r3, [pc, #20]	; (8006670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	0b5b      	lsrs	r3, r3, #13
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	4903      	ldr	r1, [pc, #12]	; (8006674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006666:	5ccb      	ldrb	r3, [r1, r3]
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800666c:	4618      	mov	r0, r3
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40023800 	.word	0x40023800
 8006674:	0802be24 	.word	0x0802be24

08006678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8006688:	2300      	movs	r3, #0
 800668a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d010      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800669c:	4b7a      	ldr	r3, [pc, #488]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800669e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	4977      	ldr	r1, [pc, #476]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80066ba:	2301      	movs	r3, #1
 80066bc:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d010      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80066ca:	4b6f      	ldr	r3, [pc, #444]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80066cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066d0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	496b      	ldr	r1, [pc, #428]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80066e8:	2301      	movs	r3, #1
 80066ea:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d022      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80066f8:	4b63      	ldr	r3, [pc, #396]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80066fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006706:	4960      	ldr	r1, [pc, #384]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006708:	4313      	orrs	r3, r2
 800670a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8006716:	2301      	movs	r3, #1
 8006718:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800671e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006722:	d10c      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006724:	4b58      	ldr	r3, [pc, #352]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800672a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	3b01      	subs	r3, #1
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	4954      	ldr	r1, [pc, #336]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006738:	4313      	orrs	r3, r2
 800673a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d022      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800674a:	4b4f      	ldr	r3, [pc, #316]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800674c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006750:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006758:	494b      	ldr	r1, [pc, #300]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800675a:	4313      	orrs	r3, r2
 800675c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006768:	2301      	movs	r3, #1
 800676a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006770:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006774:	d10c      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006776:	4b44      	ldr	r3, [pc, #272]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800677c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	3b01      	subs	r3, #1
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	493f      	ldr	r1, [pc, #252]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800678a:	4313      	orrs	r3, r2
 800678c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 808a 	beq.w	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	4b39      	ldr	r3, [pc, #228]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	4a38      	ldr	r2, [pc, #224]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80067a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ac:	6413      	str	r3, [r2, #64]	; 0x40
 80067ae:	4b36      	ldr	r3, [pc, #216]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80067ba:	4b34      	ldr	r3, [pc, #208]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a33      	ldr	r2, [pc, #204]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80067c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067c6:	f7fc fc49 	bl	800305c <HAL_GetTick>
 80067ca:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067cc:	e008      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80067ce:	f7fc fc45 	bl	800305c <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e1d1      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067e0:	4b2a      	ldr	r3, [pc, #168]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0f0      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067ec:	4b26      	ldr	r3, [pc, #152]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80067ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f4:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d02f      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	429a      	cmp	r2, r3
 8006808:	d028      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800680a:	4b1f      	ldr	r3, [pc, #124]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006812:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006814:	4b1e      	ldr	r3, [pc, #120]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006816:	2201      	movs	r2, #1
 8006818:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800681a:	4b1d      	ldr	r3, [pc, #116]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006820:	4a19      	ldr	r2, [pc, #100]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006826:	4b18      	ldr	r3, [pc, #96]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b01      	cmp	r3, #1
 8006830:	d114      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006832:	f7fc fc13 	bl	800305c <HAL_GetTick>
 8006836:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006838:	e00a      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800683a:	f7fc fc0f 	bl	800305c <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	f241 3288 	movw	r2, #5000	; 0x1388
 8006848:	4293      	cmp	r3, r2
 800684a:	d901      	bls.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e199      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006850:	4b0d      	ldr	r3, [pc, #52]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0ee      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006868:	d114      	bne.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800686a:	4b07      	ldr	r3, [pc, #28]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800687a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800687e:	4902      	ldr	r1, [pc, #8]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006880:	4313      	orrs	r3, r2
 8006882:	608b      	str	r3, [r1, #8]
 8006884:	e00c      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006886:	bf00      	nop
 8006888:	40023800 	.word	0x40023800
 800688c:	40007000 	.word	0x40007000
 8006890:	42470e40 	.word	0x42470e40
 8006894:	4b89      	ldr	r3, [pc, #548]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	4a88      	ldr	r2, [pc, #544]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800689a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800689e:	6093      	str	r3, [r2, #8]
 80068a0:	4b86      	ldr	r3, [pc, #536]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80068a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ac:	4983      	ldr	r1, [pc, #524]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80068c4:	4b7e      	ldr	r3, [pc, #504]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80068c6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0310 	and.w	r3, r3, #16
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80068d4:	4b79      	ldr	r3, [pc, #484]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80068d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	4976      	ldr	r1, [pc, #472]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0320 	and.w	r3, r3, #32
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d011      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80068f6:	4b71      	ldr	r3, [pc, #452]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80068f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	496d      	ldr	r1, [pc, #436]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006906:	4313      	orrs	r3, r2
 8006908:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006914:	d101      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8006916:	2301      	movs	r3, #1
 8006918:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006926:	4b65      	ldr	r3, [pc, #404]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800692c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	4961      	ldr	r1, [pc, #388]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006936:	4313      	orrs	r3, r2
 8006938:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d004      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b80      	cmp	r3, #128	; 0x80
 8006948:	f040 80c6 	bne.w	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800694c:	4b5d      	ldr	r3, [pc, #372]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800694e:	2200      	movs	r2, #0
 8006950:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006952:	f7fc fb83 	bl	800305c <HAL_GetTick>
 8006956:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006958:	e008      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800695a:	f7fc fb7f 	bl	800305c <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e10b      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800696c:	4b53      	ldr	r3, [pc, #332]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f0      	bne.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8006978:	4a53      	ldr	r2, [pc, #332]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800697e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d023      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d019      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d004      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069bc:	d00e      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d019      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d115      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x386>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069da:	d110      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	019b      	lsls	r3, r3, #6
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	061b      	lsls	r3, r3, #24
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	071b      	lsls	r3, r3, #28
 80069f6:	4931      	ldr	r1, [pc, #196]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d026      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d122      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a26:	4b25      	ldr	r3, [pc, #148]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a2c:	0e1b      	lsrs	r3, r3, #24
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	019b      	lsls	r3, r3, #6
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	061b      	lsls	r3, r3, #24
 8006a44:	431a      	orrs	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	071b      	lsls	r3, r3, #28
 8006a4c:	491b      	ldr	r1, [pc, #108]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8006a54:	4b19      	ldr	r3, [pc, #100]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a5a:	f023 021f 	bic.w	r2, r3, #31
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	4915      	ldr	r1, [pc, #84]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d010      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	019b      	lsls	r3, r3, #6
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	061b      	lsls	r3, r3, #24
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	071b      	lsls	r3, r3, #28
 8006a92:	490a      	ldr	r1, [pc, #40]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a9a:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006aa0:	f7fc fadc 	bl	800305c <HAL_GetTick>
 8006aa4:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006aa6:	e011      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006aa8:	f7fc fad8 	bl	800305c <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d90a      	bls.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e064      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006aba:	bf00      	nop
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	424711e0 	.word	0x424711e0
 8006ac4:	42470068 	.word	0x42470068
 8006ac8:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006acc:	4b2f      	ldr	r3, [pc, #188]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d0e7      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00a      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ae4:	4b29      	ldr	r3, [pc, #164]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af2:	4926      	ldr	r1, [pc, #152]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00a      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006b06:	4b21      	ldr	r3, [pc, #132]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b0c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	491d      	ldr	r1, [pc, #116]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00a      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006b28:	4b18      	ldr	r3, [pc, #96]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b36:	4915      	ldr	r1, [pc, #84]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8006b4a:	4b10      	ldr	r3, [pc, #64]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b50:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b58:	490c      	ldr	r1, [pc, #48]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00a      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b6c:	4b07      	ldr	r3, [pc, #28]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b72:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7a:	4904      	ldr	r1, [pc, #16]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3720      	adds	r7, #32
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40023800 	.word	0x40023800

08006b90 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e270      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d075      	beq.n	8006c9a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006bae:	4ba3      	ldr	r3, [pc, #652]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d00c      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bba:	4ba0      	ldr	r3, [pc, #640]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d112      	bne.n	8006bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bc6:	4b9d      	ldr	r3, [pc, #628]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bd2:	d10b      	bne.n	8006bec <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd4:	4b99      	ldr	r3, [pc, #612]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d05b      	beq.n	8006c98 <HAL_RCC_OscConfig+0x108>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d157      	bne.n	8006c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e24b      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf4:	d106      	bne.n	8006c04 <HAL_RCC_OscConfig+0x74>
 8006bf6:	4b91      	ldr	r3, [pc, #580]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a90      	ldr	r2, [pc, #576]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	e01d      	b.n	8006c40 <HAL_RCC_OscConfig+0xb0>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c0c:	d10c      	bne.n	8006c28 <HAL_RCC_OscConfig+0x98>
 8006c0e:	4b8b      	ldr	r3, [pc, #556]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a8a      	ldr	r2, [pc, #552]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	4b88      	ldr	r3, [pc, #544]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a87      	ldr	r2, [pc, #540]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	e00b      	b.n	8006c40 <HAL_RCC_OscConfig+0xb0>
 8006c28:	4b84      	ldr	r3, [pc, #528]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a83      	ldr	r2, [pc, #524]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	4b81      	ldr	r3, [pc, #516]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a80      	ldr	r2, [pc, #512]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d013      	beq.n	8006c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c48:	f7fc fa08 	bl	800305c <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c50:	f7fc fa04 	bl	800305c <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b64      	cmp	r3, #100	; 0x64
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e210      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c62:	4b76      	ldr	r3, [pc, #472]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0f0      	beq.n	8006c50 <HAL_RCC_OscConfig+0xc0>
 8006c6e:	e014      	b.n	8006c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fc f9f4 	bl	800305c <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c78:	f7fc f9f0 	bl	800305c <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b64      	cmp	r3, #100	; 0x64
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e1fc      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c8a:	4b6c      	ldr	r3, [pc, #432]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f0      	bne.n	8006c78 <HAL_RCC_OscConfig+0xe8>
 8006c96:	e000      	b.n	8006c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d063      	beq.n	8006d6e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006ca6:	4b65      	ldr	r3, [pc, #404]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 030c 	and.w	r3, r3, #12
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00b      	beq.n	8006cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cb2:	4b62      	ldr	r3, [pc, #392]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d11c      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cbe:	4b5f      	ldr	r3, [pc, #380]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d116      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cca:	4b5c      	ldr	r3, [pc, #368]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d005      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x152>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d001      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e1d0      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce2:	4b56      	ldr	r3, [pc, #344]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	4952      	ldr	r1, [pc, #328]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cf6:	e03a      	b.n	8006d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d020      	beq.n	8006d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d00:	4b4f      	ldr	r3, [pc, #316]	; (8006e40 <HAL_RCC_OscConfig+0x2b0>)
 8006d02:	2201      	movs	r2, #1
 8006d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d06:	f7fc f9a9 	bl	800305c <HAL_GetTick>
 8006d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d0c:	e008      	b.n	8006d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d0e:	f7fc f9a5 	bl	800305c <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e1b1      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d20:	4b46      	ldr	r3, [pc, #280]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0f0      	beq.n	8006d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d2c:	4b43      	ldr	r3, [pc, #268]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	4940      	ldr	r1, [pc, #256]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	600b      	str	r3, [r1, #0]
 8006d40:	e015      	b.n	8006d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d42:	4b3f      	ldr	r3, [pc, #252]	; (8006e40 <HAL_RCC_OscConfig+0x2b0>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d48:	f7fc f988 	bl	800305c <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d4e:	e008      	b.n	8006d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d50:	f7fc f984 	bl	800305c <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e190      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d62:	4b36      	ldr	r3, [pc, #216]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1f0      	bne.n	8006d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d030      	beq.n	8006ddc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d016      	beq.n	8006db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d82:	4b30      	ldr	r3, [pc, #192]	; (8006e44 <HAL_RCC_OscConfig+0x2b4>)
 8006d84:	2201      	movs	r2, #1
 8006d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d88:	f7fc f968 	bl	800305c <HAL_GetTick>
 8006d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d8e:	e008      	b.n	8006da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d90:	f7fc f964 	bl	800305c <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e170      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006da2:	4b26      	ldr	r3, [pc, #152]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0f0      	beq.n	8006d90 <HAL_RCC_OscConfig+0x200>
 8006dae:	e015      	b.n	8006ddc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006db0:	4b24      	ldr	r3, [pc, #144]	; (8006e44 <HAL_RCC_OscConfig+0x2b4>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db6:	f7fc f951 	bl	800305c <HAL_GetTick>
 8006dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dbe:	f7fc f94d 	bl	800305c <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e159      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dd0:	4b1a      	ldr	r3, [pc, #104]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1f0      	bne.n	8006dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 80a0 	beq.w	8006f2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dea:	2300      	movs	r3, #0
 8006dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dee:	4b13      	ldr	r3, [pc, #76]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10f      	bne.n	8006e1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60bb      	str	r3, [r7, #8]
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	4a0e      	ldr	r2, [pc, #56]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e08:	6413      	str	r3, [r2, #64]	; 0x40
 8006e0a:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e12:	60bb      	str	r3, [r7, #8]
 8006e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e16:	2301      	movs	r3, #1
 8006e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e1a:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <HAL_RCC_OscConfig+0x2b8>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d121      	bne.n	8006e6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e26:	4b08      	ldr	r3, [pc, #32]	; (8006e48 <HAL_RCC_OscConfig+0x2b8>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a07      	ldr	r2, [pc, #28]	; (8006e48 <HAL_RCC_OscConfig+0x2b8>)
 8006e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e32:	f7fc f913 	bl	800305c <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e38:	e011      	b.n	8006e5e <HAL_RCC_OscConfig+0x2ce>
 8006e3a:	bf00      	nop
 8006e3c:	40023800 	.word	0x40023800
 8006e40:	42470000 	.word	0x42470000
 8006e44:	42470e80 	.word	0x42470e80
 8006e48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e4c:	f7fc f906 	bl	800305c <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d901      	bls.n	8006e5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e112      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e5e:	4b8b      	ldr	r3, [pc, #556]	; (800708c <HAL_RCC_OscConfig+0x4fc>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0f0      	beq.n	8006e4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d106      	bne.n	8006e80 <HAL_RCC_OscConfig+0x2f0>
 8006e72:	4b87      	ldr	r3, [pc, #540]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e76:	4a86      	ldr	r2, [pc, #536]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006e78:	f043 0301 	orr.w	r3, r3, #1
 8006e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e7e:	e01c      	b.n	8006eba <HAL_RCC_OscConfig+0x32a>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	2b05      	cmp	r3, #5
 8006e86:	d10c      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x312>
 8006e88:	4b81      	ldr	r3, [pc, #516]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8c:	4a80      	ldr	r2, [pc, #512]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006e8e:	f043 0304 	orr.w	r3, r3, #4
 8006e92:	6713      	str	r3, [r2, #112]	; 0x70
 8006e94:	4b7e      	ldr	r3, [pc, #504]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e98:	4a7d      	ldr	r2, [pc, #500]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006e9a:	f043 0301 	orr.w	r3, r3, #1
 8006e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ea0:	e00b      	b.n	8006eba <HAL_RCC_OscConfig+0x32a>
 8006ea2:	4b7b      	ldr	r3, [pc, #492]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea6:	4a7a      	ldr	r2, [pc, #488]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006ea8:	f023 0301 	bic.w	r3, r3, #1
 8006eac:	6713      	str	r3, [r2, #112]	; 0x70
 8006eae:	4b78      	ldr	r3, [pc, #480]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb2:	4a77      	ldr	r2, [pc, #476]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006eb4:	f023 0304 	bic.w	r3, r3, #4
 8006eb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d015      	beq.n	8006eee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec2:	f7fc f8cb 	bl	800305c <HAL_GetTick>
 8006ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ec8:	e00a      	b.n	8006ee0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eca:	f7fc f8c7 	bl	800305c <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e0d1      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ee0:	4b6b      	ldr	r3, [pc, #428]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0ee      	beq.n	8006eca <HAL_RCC_OscConfig+0x33a>
 8006eec:	e014      	b.n	8006f18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eee:	f7fc f8b5 	bl	800305c <HAL_GetTick>
 8006ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ef4:	e00a      	b.n	8006f0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ef6:	f7fc f8b1 	bl	800305c <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d901      	bls.n	8006f0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e0bb      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f0c:	4b60      	ldr	r3, [pc, #384]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1ee      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d105      	bne.n	8006f2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f1e:	4b5c      	ldr	r3, [pc, #368]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f22:	4a5b      	ldr	r2, [pc, #364]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 80a7 	beq.w	8007082 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f34:	4b56      	ldr	r3, [pc, #344]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f003 030c 	and.w	r3, r3, #12
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d060      	beq.n	8007002 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d145      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f48:	4b52      	ldr	r3, [pc, #328]	; (8007094 <HAL_RCC_OscConfig+0x504>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4e:	f7fc f885 	bl	800305c <HAL_GetTick>
 8006f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f54:	e008      	b.n	8006f68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f56:	f7fc f881 	bl	800305c <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d901      	bls.n	8006f68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e08d      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f68:	4b49      	ldr	r3, [pc, #292]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1f0      	bne.n	8006f56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	69da      	ldr	r2, [r3, #28]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	019b      	lsls	r3, r3, #6
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	041b      	lsls	r3, r3, #16
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f96:	061b      	lsls	r3, r3, #24
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9e:	071b      	lsls	r3, r3, #28
 8006fa0:	493b      	ldr	r1, [pc, #236]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fa6:	4b3b      	ldr	r3, [pc, #236]	; (8007094 <HAL_RCC_OscConfig+0x504>)
 8006fa8:	2201      	movs	r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fac:	f7fc f856 	bl	800305c <HAL_GetTick>
 8006fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb4:	f7fc f852 	bl	800305c <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e05e      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fc6:	4b32      	ldr	r3, [pc, #200]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0f0      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x424>
 8006fd2:	e056      	b.n	8007082 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fd4:	4b2f      	ldr	r3, [pc, #188]	; (8007094 <HAL_RCC_OscConfig+0x504>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fda:	f7fc f83f 	bl	800305c <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fe2:	f7fc f83b 	bl	800305c <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e047      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ff4:	4b26      	ldr	r3, [pc, #152]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1f0      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x452>
 8007000:	e03f      	b.n	8007082 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d101      	bne.n	800700e <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e03a      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800700e:	4b20      	ldr	r3, [pc, #128]	; (8007090 <HAL_RCC_OscConfig+0x500>)
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d030      	beq.n	800707e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007026:	429a      	cmp	r2, r3
 8007028:	d129      	bne.n	800707e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007034:	429a      	cmp	r2, r3
 8007036:	d122      	bne.n	800707e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800703e:	4013      	ands	r3, r2
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007044:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007046:	4293      	cmp	r3, r2
 8007048:	d119      	bne.n	800707e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007054:	085b      	lsrs	r3, r3, #1
 8007056:	3b01      	subs	r3, #1
 8007058:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800705a:	429a      	cmp	r2, r3
 800705c:	d10f      	bne.n	800707e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800706a:	429a      	cmp	r2, r3
 800706c:	d107      	bne.n	800707e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007078:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800707a:	429a      	cmp	r2, r3
 800707c:	d001      	beq.n	8007082 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	40007000 	.word	0x40007000
 8007090:	40023800 	.word	0x40023800
 8007094:	42470060 	.word	0x42470060

08007098 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e034      	b.n	8007118 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f7fa fa6e 	bl	80015a4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3308      	adds	r3, #8
 80070d0:	4619      	mov	r1, r3
 80070d2:	4610      	mov	r0, r2
 80070d4:	f001 f87a 	bl	80081cc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	461a      	mov	r2, r3
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	f001 f8e2 	bl	80082ac <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6858      	ldr	r0, [r3, #4]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	f001 f92d 	bl	8008354 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	6892      	ldr	r2, [r2, #8]
 8007102:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	6892      	ldr	r2, [r2, #8]
 800710e:	f041 0101 	orr.w	r1, r1, #1
 8007112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e041      	b.n	80071b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d106      	bne.n	800714c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fb fc76 	bl	8002a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3304      	adds	r3, #4
 800715c:	4619      	mov	r1, r3
 800715e:	4610      	mov	r0, r2
 8007160:	f000 f8d8 	bl	8007314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d001      	beq.n	80071d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e046      	b.n	8007266 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a23      	ldr	r2, [pc, #140]	; (8007274 <HAL_TIM_Base_Start+0xb4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d022      	beq.n	8007230 <HAL_TIM_Base_Start+0x70>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f2:	d01d      	beq.n	8007230 <HAL_TIM_Base_Start+0x70>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a1f      	ldr	r2, [pc, #124]	; (8007278 <HAL_TIM_Base_Start+0xb8>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d018      	beq.n	8007230 <HAL_TIM_Base_Start+0x70>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a1e      	ldr	r2, [pc, #120]	; (800727c <HAL_TIM_Base_Start+0xbc>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d013      	beq.n	8007230 <HAL_TIM_Base_Start+0x70>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a1c      	ldr	r2, [pc, #112]	; (8007280 <HAL_TIM_Base_Start+0xc0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00e      	beq.n	8007230 <HAL_TIM_Base_Start+0x70>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a1b      	ldr	r2, [pc, #108]	; (8007284 <HAL_TIM_Base_Start+0xc4>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d009      	beq.n	8007230 <HAL_TIM_Base_Start+0x70>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a19      	ldr	r2, [pc, #100]	; (8007288 <HAL_TIM_Base_Start+0xc8>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d004      	beq.n	8007230 <HAL_TIM_Base_Start+0x70>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a18      	ldr	r2, [pc, #96]	; (800728c <HAL_TIM_Base_Start+0xcc>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d111      	bne.n	8007254 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b06      	cmp	r3, #6
 8007240:	d010      	beq.n	8007264 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f042 0201 	orr.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007252:	e007      	b.n	8007264 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0201 	orr.w	r2, r2, #1
 8007262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40010000 	.word	0x40010000
 8007278:	40000400 	.word	0x40000400
 800727c:	40000800 	.word	0x40000800
 8007280:	40000c00 	.word	0x40000c00
 8007284:	40010400 	.word	0x40010400
 8007288:	40014000 	.word	0x40014000
 800728c:	40001800 	.word	0x40001800

08007290 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d101      	bne.n	80072a8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80072a4:	2302      	movs	r3, #2
 80072a6:	e031      	b.n	800730c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f8ca 	bl	8007454 <TIM_SlaveTimer_SetConfig>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d009      	beq.n	80072da <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e018      	b.n	800730c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68da      	ldr	r2, [r3, #12]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072e8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072f8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a40      	ldr	r2, [pc, #256]	; (8007428 <TIM_Base_SetConfig+0x114>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d013      	beq.n	8007354 <TIM_Base_SetConfig+0x40>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007332:	d00f      	beq.n	8007354 <TIM_Base_SetConfig+0x40>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a3d      	ldr	r2, [pc, #244]	; (800742c <TIM_Base_SetConfig+0x118>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00b      	beq.n	8007354 <TIM_Base_SetConfig+0x40>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a3c      	ldr	r2, [pc, #240]	; (8007430 <TIM_Base_SetConfig+0x11c>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d007      	beq.n	8007354 <TIM_Base_SetConfig+0x40>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a3b      	ldr	r2, [pc, #236]	; (8007434 <TIM_Base_SetConfig+0x120>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d003      	beq.n	8007354 <TIM_Base_SetConfig+0x40>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a3a      	ldr	r2, [pc, #232]	; (8007438 <TIM_Base_SetConfig+0x124>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d108      	bne.n	8007366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a2f      	ldr	r2, [pc, #188]	; (8007428 <TIM_Base_SetConfig+0x114>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d02b      	beq.n	80073c6 <TIM_Base_SetConfig+0xb2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007374:	d027      	beq.n	80073c6 <TIM_Base_SetConfig+0xb2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a2c      	ldr	r2, [pc, #176]	; (800742c <TIM_Base_SetConfig+0x118>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d023      	beq.n	80073c6 <TIM_Base_SetConfig+0xb2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a2b      	ldr	r2, [pc, #172]	; (8007430 <TIM_Base_SetConfig+0x11c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d01f      	beq.n	80073c6 <TIM_Base_SetConfig+0xb2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a2a      	ldr	r2, [pc, #168]	; (8007434 <TIM_Base_SetConfig+0x120>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d01b      	beq.n	80073c6 <TIM_Base_SetConfig+0xb2>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a29      	ldr	r2, [pc, #164]	; (8007438 <TIM_Base_SetConfig+0x124>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d017      	beq.n	80073c6 <TIM_Base_SetConfig+0xb2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a28      	ldr	r2, [pc, #160]	; (800743c <TIM_Base_SetConfig+0x128>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d013      	beq.n	80073c6 <TIM_Base_SetConfig+0xb2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a27      	ldr	r2, [pc, #156]	; (8007440 <TIM_Base_SetConfig+0x12c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00f      	beq.n	80073c6 <TIM_Base_SetConfig+0xb2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a26      	ldr	r2, [pc, #152]	; (8007444 <TIM_Base_SetConfig+0x130>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d00b      	beq.n	80073c6 <TIM_Base_SetConfig+0xb2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a25      	ldr	r2, [pc, #148]	; (8007448 <TIM_Base_SetConfig+0x134>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d007      	beq.n	80073c6 <TIM_Base_SetConfig+0xb2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a24      	ldr	r2, [pc, #144]	; (800744c <TIM_Base_SetConfig+0x138>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d003      	beq.n	80073c6 <TIM_Base_SetConfig+0xb2>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a23      	ldr	r2, [pc, #140]	; (8007450 <TIM_Base_SetConfig+0x13c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d108      	bne.n	80073d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a0a      	ldr	r2, [pc, #40]	; (8007428 <TIM_Base_SetConfig+0x114>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d003      	beq.n	800740c <TIM_Base_SetConfig+0xf8>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a0c      	ldr	r2, [pc, #48]	; (8007438 <TIM_Base_SetConfig+0x124>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d103      	bne.n	8007414 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	691a      	ldr	r2, [r3, #16]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	615a      	str	r2, [r3, #20]
}
 800741a:	bf00      	nop
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	40010000 	.word	0x40010000
 800742c:	40000400 	.word	0x40000400
 8007430:	40000800 	.word	0x40000800
 8007434:	40000c00 	.word	0x40000c00
 8007438:	40010400 	.word	0x40010400
 800743c:	40014000 	.word	0x40014000
 8007440:	40014400 	.word	0x40014400
 8007444:	40014800 	.word	0x40014800
 8007448:	40001800 	.word	0x40001800
 800744c:	40001c00 	.word	0x40001c00
 8007450:	40002000 	.word	0x40002000

08007454 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	4313      	orrs	r3, r2
 8007476:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f023 0307 	bic.w	r3, r3, #7
 800747e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	4313      	orrs	r3, r2
 8007488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b70      	cmp	r3, #112	; 0x70
 8007498:	d01a      	beq.n	80074d0 <TIM_SlaveTimer_SetConfig+0x7c>
 800749a:	2b70      	cmp	r3, #112	; 0x70
 800749c:	d860      	bhi.n	8007560 <TIM_SlaveTimer_SetConfig+0x10c>
 800749e:	2b60      	cmp	r3, #96	; 0x60
 80074a0:	d054      	beq.n	800754c <TIM_SlaveTimer_SetConfig+0xf8>
 80074a2:	2b60      	cmp	r3, #96	; 0x60
 80074a4:	d85c      	bhi.n	8007560 <TIM_SlaveTimer_SetConfig+0x10c>
 80074a6:	2b50      	cmp	r3, #80	; 0x50
 80074a8:	d046      	beq.n	8007538 <TIM_SlaveTimer_SetConfig+0xe4>
 80074aa:	2b50      	cmp	r3, #80	; 0x50
 80074ac:	d858      	bhi.n	8007560 <TIM_SlaveTimer_SetConfig+0x10c>
 80074ae:	2b40      	cmp	r3, #64	; 0x40
 80074b0:	d019      	beq.n	80074e6 <TIM_SlaveTimer_SetConfig+0x92>
 80074b2:	2b40      	cmp	r3, #64	; 0x40
 80074b4:	d854      	bhi.n	8007560 <TIM_SlaveTimer_SetConfig+0x10c>
 80074b6:	2b30      	cmp	r3, #48	; 0x30
 80074b8:	d054      	beq.n	8007564 <TIM_SlaveTimer_SetConfig+0x110>
 80074ba:	2b30      	cmp	r3, #48	; 0x30
 80074bc:	d850      	bhi.n	8007560 <TIM_SlaveTimer_SetConfig+0x10c>
 80074be:	2b20      	cmp	r3, #32
 80074c0:	d050      	beq.n	8007564 <TIM_SlaveTimer_SetConfig+0x110>
 80074c2:	2b20      	cmp	r3, #32
 80074c4:	d84c      	bhi.n	8007560 <TIM_SlaveTimer_SetConfig+0x10c>
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d04c      	beq.n	8007564 <TIM_SlaveTimer_SetConfig+0x110>
 80074ca:	2b10      	cmp	r3, #16
 80074cc:	d04a      	beq.n	8007564 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80074ce:	e047      	b.n	8007560 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	68d9      	ldr	r1, [r3, #12]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	f000 f8a5 	bl	800762e <TIM_ETR_SetConfig>
      break;
 80074e4:	e03f      	b.n	8007566 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b05      	cmp	r3, #5
 80074ec:	d101      	bne.n	80074f2 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e03a      	b.n	8007568 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6a1a      	ldr	r2, [r3, #32]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0201 	bic.w	r2, r2, #1
 8007508:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007518:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	011b      	lsls	r3, r3, #4
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	621a      	str	r2, [r3, #32]
      break;
 8007536:	e016      	b.n	8007566 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	6899      	ldr	r1, [r3, #8]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	461a      	mov	r2, r3
 8007546:	f000 f813 	bl	8007570 <TIM_TI1_ConfigInputStage>
      break;
 800754a:	e00c      	b.n	8007566 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6818      	ldr	r0, [r3, #0]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	6899      	ldr	r1, [r3, #8]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	461a      	mov	r2, r3
 800755a:	f000 f838 	bl	80075ce <TIM_TI2_ConfigInputStage>
      break;
 800755e:	e002      	b.n	8007566 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8007560:	bf00      	nop
 8007562:	e000      	b.n	8007566 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8007564:	bf00      	nop
  }
  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	f023 0201 	bic.w	r2, r3, #1
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800759a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f023 030a 	bic.w	r3, r3, #10
 80075ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	621a      	str	r2, [r3, #32]
}
 80075c2:	bf00      	nop
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b087      	sub	sp, #28
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	f023 0210 	bic.w	r2, r3, #16
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	031b      	lsls	r3, r3, #12
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	4313      	orrs	r3, r2
 8007602:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800760a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	4313      	orrs	r3, r2
 8007614:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	621a      	str	r2, [r3, #32]
}
 8007622:	bf00      	nop
 8007624:	371c      	adds	r7, #28
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800762e:	b480      	push	{r7}
 8007630:	b087      	sub	sp, #28
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
 800763a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007648:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	021a      	lsls	r2, r3, #8
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	431a      	orrs	r2, r3
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	4313      	orrs	r3, r2
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	4313      	orrs	r3, r2
 800765a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	609a      	str	r2, [r3, #8]
}
 8007662:	bf00      	nop
 8007664:	371c      	adds	r7, #28
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
	...

08007670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007684:	2302      	movs	r3, #2
 8007686:	e05a      	b.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a21      	ldr	r2, [pc, #132]	; (800774c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d022      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d4:	d01d      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a1d      	ldr	r2, [pc, #116]	; (8007750 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d018      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a1b      	ldr	r2, [pc, #108]	; (8007754 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d013      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a1a      	ldr	r2, [pc, #104]	; (8007758 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00e      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a18      	ldr	r2, [pc, #96]	; (800775c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d009      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a17      	ldr	r2, [pc, #92]	; (8007760 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d004      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a15      	ldr	r2, [pc, #84]	; (8007764 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d10c      	bne.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007718:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	4313      	orrs	r3, r2
 8007722:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	40010000 	.word	0x40010000
 8007750:	40000400 	.word	0x40000400
 8007754:	40000800 	.word	0x40000800
 8007758:	40000c00 	.word	0x40000c00
 800775c:	40010400 	.word	0x40010400
 8007760:	40014000 	.word	0x40014000
 8007764:	40001800 	.word	0x40001800

08007768 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e03f      	b.n	80077fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d106      	bne.n	8007794 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7fb fb82 	bl	8002e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2224      	movs	r2, #36	; 0x24
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68da      	ldr	r2, [r3, #12]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fb35 	bl	8007e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	691a      	ldr	r2, [r3, #16]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	695a      	ldr	r2, [r3, #20]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68da      	ldr	r2, [r3, #12]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2220      	movs	r2, #32
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b08a      	sub	sp, #40	; 0x28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007824:	2300      	movs	r3, #0
 8007826:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007828:	2300      	movs	r3, #0
 800782a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10d      	bne.n	8007856 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	f003 0320 	and.w	r3, r3, #32
 8007840:	2b00      	cmp	r3, #0
 8007842:	d008      	beq.n	8007856 <HAL_UART_IRQHandler+0x52>
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fa4d 	bl	8007cee <UART_Receive_IT>
      return;
 8007854:	e17c      	b.n	8007b50 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 80b1 	beq.w	80079c0 <HAL_UART_IRQHandler+0x1bc>
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b00      	cmp	r3, #0
 8007866:	d105      	bne.n	8007874 <HAL_UART_IRQHandler+0x70>
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 80a6 	beq.w	80079c0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <HAL_UART_IRQHandler+0x90>
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007884:	2b00      	cmp	r3, #0
 8007886:	d005      	beq.n	8007894 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788c:	f043 0201 	orr.w	r2, r3, #1
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <HAL_UART_IRQHandler+0xb0>
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d005      	beq.n	80078b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	f043 0202 	orr.w	r2, r3, #2
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <HAL_UART_IRQHandler+0xd0>
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d005      	beq.n	80078d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078cc:	f043 0204 	orr.w	r2, r3, #4
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	f003 0308 	and.w	r3, r3, #8
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00f      	beq.n	80078fe <HAL_UART_IRQHandler+0xfa>
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	f003 0320 	and.w	r3, r3, #32
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d104      	bne.n	80078f2 <HAL_UART_IRQHandler+0xee>
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d005      	beq.n	80078fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	f043 0208 	orr.w	r2, r3, #8
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 811f 	beq.w	8007b46 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	f003 0320 	and.w	r3, r3, #32
 800790e:	2b00      	cmp	r3, #0
 8007910:	d007      	beq.n	8007922 <HAL_UART_IRQHandler+0x11e>
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	f003 0320 	and.w	r3, r3, #32
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f9e6 	bl	8007cee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792c:	2b40      	cmp	r3, #64	; 0x40
 800792e:	bf0c      	ite	eq
 8007930:	2301      	moveq	r3, #1
 8007932:	2300      	movne	r3, #0
 8007934:	b2db      	uxtb	r3, r3
 8007936:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d102      	bne.n	800794a <HAL_UART_IRQHandler+0x146>
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d031      	beq.n	80079ae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f926 	bl	8007b9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795a:	2b40      	cmp	r3, #64	; 0x40
 800795c:	d123      	bne.n	80079a6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695a      	ldr	r2, [r3, #20]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800796c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007972:	2b00      	cmp	r3, #0
 8007974:	d013      	beq.n	800799e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797a:	4a77      	ldr	r2, [pc, #476]	; (8007b58 <HAL_UART_IRQHandler+0x354>)
 800797c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007982:	4618      	mov	r0, r3
 8007984:	f7fb fe37 	bl	80035f6 <HAL_DMA_Abort_IT>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d016      	beq.n	80079bc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800799c:	e00e      	b.n	80079bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f8e6 	bl	8007b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a4:	e00a      	b.n	80079bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f8e2 	bl	8007b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ac:	e006      	b.n	80079bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f8de 	bl	8007b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80079ba:	e0c4      	b.n	8007b46 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079bc:	bf00      	nop
    return;
 80079be:	e0c2      	b.n	8007b46 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	f040 80a2 	bne.w	8007b0e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	f003 0310 	and.w	r3, r3, #16
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 809c 	beq.w	8007b0e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	f003 0310 	and.w	r3, r3, #16
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 8096 	beq.w	8007b0e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	60fb      	str	r3, [r7, #12]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a02:	2b40      	cmp	r3, #64	; 0x40
 8007a04:	d14f      	bne.n	8007aa6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007a10:	8a3b      	ldrh	r3, [r7, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 8099 	beq.w	8007b4a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a1c:	8a3a      	ldrh	r2, [r7, #16]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	f080 8093 	bcs.w	8007b4a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	8a3a      	ldrh	r2, [r7, #16]
 8007a28:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	69db      	ldr	r3, [r3, #28]
 8007a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a34:	d02b      	beq.n	8007a8e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68da      	ldr	r2, [r3, #12]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a44:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	695a      	ldr	r2, [r3, #20]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f022 0201 	bic.w	r2, r2, #1
 8007a54:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	695a      	ldr	r2, [r3, #20]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a64:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0210 	bic.w	r2, r2, #16
 8007a82:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fb fd44 	bl	8003516 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f870 	bl	8007b84 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007aa4:	e051      	b.n	8007b4a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d047      	beq.n	8007b4e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007abe:	8a7b      	ldrh	r3, [r7, #18]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d044      	beq.n	8007b4e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68da      	ldr	r2, [r3, #12]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ad2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	695a      	ldr	r2, [r3, #20]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0201 	bic.w	r2, r2, #1
 8007ae2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 0210 	bic.w	r2, r2, #16
 8007b00:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b02:	8a7b      	ldrh	r3, [r7, #18]
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f83c 	bl	8007b84 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007b0c:	e01f      	b.n	8007b4e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d008      	beq.n	8007b2a <HAL_UART_IRQHandler+0x326>
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f87b 	bl	8007c1e <UART_Transmit_IT>
    return;
 8007b28:	e012      	b.n	8007b50 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00d      	beq.n	8007b50 <HAL_UART_IRQHandler+0x34c>
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d008      	beq.n	8007b50 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f8bd 	bl	8007cbe <UART_EndTransmit_IT>
    return;
 8007b44:	e004      	b.n	8007b50 <HAL_UART_IRQHandler+0x34c>
    return;
 8007b46:	bf00      	nop
 8007b48:	e002      	b.n	8007b50 <HAL_UART_IRQHandler+0x34c>
      return;
 8007b4a:	bf00      	nop
 8007b4c:	e000      	b.n	8007b50 <HAL_UART_IRQHandler+0x34c>
      return;
 8007b4e:	bf00      	nop
  }
}
 8007b50:	3728      	adds	r7, #40	; 0x28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	08007bf7 	.word	0x08007bf7

08007b5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007bb2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	695a      	ldr	r2, [r3, #20]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0201 	bic.w	r2, r2, #1
 8007bc2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d107      	bne.n	8007bdc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0210 	bic.w	r2, r2, #16
 8007bda:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2220      	movs	r2, #32
 8007be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f7ff ffad 	bl	8007b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c16:	bf00      	nop
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b21      	cmp	r3, #33	; 0x21
 8007c30:	d13e      	bne.n	8007cb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c3a:	d114      	bne.n	8007c66 <UART_Transmit_IT+0x48>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d110      	bne.n	8007c66 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	1c9a      	adds	r2, r3, #2
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	621a      	str	r2, [r3, #32]
 8007c64:	e008      	b.n	8007c78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	1c59      	adds	r1, r3, #1
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	6211      	str	r1, [r2, #32]
 8007c70:	781a      	ldrb	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	4619      	mov	r1, r3
 8007c86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10f      	bne.n	8007cac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68da      	ldr	r2, [r3, #12]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007caa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	e000      	b.n	8007cb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007cb0:	2302      	movs	r3, #2
  }
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b082      	sub	sp, #8
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68da      	ldr	r2, [r3, #12]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7fa ffc6 	bl	8002c70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b22      	cmp	r3, #34	; 0x22
 8007d00:	f040 8087 	bne.w	8007e12 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d0c:	d117      	bne.n	8007d3e <UART_Receive_IT+0x50>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d113      	bne.n	8007d3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d36:	1c9a      	adds	r2, r3, #2
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8007d3c:	e026      	b.n	8007d8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d42:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d50:	d007      	beq.n	8007d62 <UART_Receive_IT+0x74>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10a      	bne.n	8007d70 <UART_Receive_IT+0x82>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d106      	bne.n	8007d70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	701a      	strb	r2, [r3, #0]
 8007d6e:	e008      	b.n	8007d82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	3b01      	subs	r3, #1
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d136      	bne.n	8007e0e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68da      	ldr	r2, [r3, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0220 	bic.w	r2, r2, #32
 8007dae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	695a      	ldr	r2, [r3, #20]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 0201 	bic.w	r2, r2, #1
 8007dce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d10e      	bne.n	8007dfe <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68da      	ldr	r2, [r3, #12]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 0210 	bic.w	r2, r2, #16
 8007dee:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007df4:	4619      	mov	r1, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7ff fec4 	bl	8007b84 <HAL_UARTEx_RxEventCallback>
 8007dfc:	e002      	b.n	8007e04 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7ff feac 	bl	8007b5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e002      	b.n	8007e14 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	e000      	b.n	8007e14 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007e12:	2302      	movs	r3, #2
  }
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e20:	b09f      	sub	sp, #124	; 0x7c
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e32:	68d9      	ldr	r1, [r3, #12]
 8007e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	ea40 0301 	orr.w	r3, r0, r1
 8007e3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e40:	689a      	ldr	r2, [r3, #8]
 8007e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	431a      	orrs	r2, r3
 8007e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e60:	f021 010c 	bic.w	r1, r1, #12
 8007e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e6a:	430b      	orrs	r3, r1
 8007e6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e7a:	6999      	ldr	r1, [r3, #24]
 8007e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	ea40 0301 	orr.w	r3, r0, r1
 8007e84:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8007e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	4b6a      	ldr	r3, [pc, #424]	; (8008034 <UART_SetConfig+0x218>)
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d00e      	beq.n	8007eae <UART_SetConfig+0x92>
 8007e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	4b68      	ldr	r3, [pc, #416]	; (8008038 <UART_SetConfig+0x21c>)
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d009      	beq.n	8007eae <UART_SetConfig+0x92>
 8007e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	4b67      	ldr	r3, [pc, #412]	; (800803c <UART_SetConfig+0x220>)
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d004      	beq.n	8007eae <UART_SetConfig+0x92>
 8007ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	4b65      	ldr	r3, [pc, #404]	; (8008040 <UART_SetConfig+0x224>)
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d103      	bne.n	8007eb6 <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007eae:	f7fe fbcf 	bl	8006650 <HAL_RCC_GetPCLK2Freq>
 8007eb2:	6778      	str	r0, [r7, #116]	; 0x74
 8007eb4:	e002      	b.n	8007ebc <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007eb6:	f7fe fbb7 	bl	8006628 <HAL_RCC_GetPCLK1Freq>
 8007eba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec4:	f040 80c0 	bne.w	8008048 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007eca:	461c      	mov	r4, r3
 8007ecc:	f04f 0500 	mov.w	r5, #0
 8007ed0:	4622      	mov	r2, r4
 8007ed2:	462b      	mov	r3, r5
 8007ed4:	1891      	adds	r1, r2, r2
 8007ed6:	6439      	str	r1, [r7, #64]	; 0x40
 8007ed8:	415b      	adcs	r3, r3
 8007eda:	647b      	str	r3, [r7, #68]	; 0x44
 8007edc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ee0:	1912      	adds	r2, r2, r4
 8007ee2:	eb45 0303 	adc.w	r3, r5, r3
 8007ee6:	f04f 0000 	mov.w	r0, #0
 8007eea:	f04f 0100 	mov.w	r1, #0
 8007eee:	00d9      	lsls	r1, r3, #3
 8007ef0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ef4:	00d0      	lsls	r0, r2, #3
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	1911      	adds	r1, r2, r4
 8007efc:	6639      	str	r1, [r7, #96]	; 0x60
 8007efe:	416b      	adcs	r3, r5
 8007f00:	667b      	str	r3, [r7, #100]	; 0x64
 8007f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	461a      	mov	r2, r3
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	1891      	adds	r1, r2, r2
 8007f0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f10:	415b      	adcs	r3, r3
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007f1c:	f7f8 feb0 	bl	8000c80 <__aeabi_uldivmod>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	4b47      	ldr	r3, [pc, #284]	; (8008044 <UART_SetConfig+0x228>)
 8007f26:	fba3 2302 	umull	r2, r3, r3, r2
 8007f2a:	095b      	lsrs	r3, r3, #5
 8007f2c:	011e      	lsls	r6, r3, #4
 8007f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f30:	461c      	mov	r4, r3
 8007f32:	f04f 0500 	mov.w	r5, #0
 8007f36:	4622      	mov	r2, r4
 8007f38:	462b      	mov	r3, r5
 8007f3a:	1891      	adds	r1, r2, r2
 8007f3c:	6339      	str	r1, [r7, #48]	; 0x30
 8007f3e:	415b      	adcs	r3, r3
 8007f40:	637b      	str	r3, [r7, #52]	; 0x34
 8007f42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007f46:	1912      	adds	r2, r2, r4
 8007f48:	eb45 0303 	adc.w	r3, r5, r3
 8007f4c:	f04f 0000 	mov.w	r0, #0
 8007f50:	f04f 0100 	mov.w	r1, #0
 8007f54:	00d9      	lsls	r1, r3, #3
 8007f56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f5a:	00d0      	lsls	r0, r2, #3
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	1911      	adds	r1, r2, r4
 8007f62:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f64:	416b      	adcs	r3, r5
 8007f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	f04f 0300 	mov.w	r3, #0
 8007f72:	1891      	adds	r1, r2, r2
 8007f74:	62b9      	str	r1, [r7, #40]	; 0x28
 8007f76:	415b      	adcs	r3, r3
 8007f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007f82:	f7f8 fe7d 	bl	8000c80 <__aeabi_uldivmod>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4b2e      	ldr	r3, [pc, #184]	; (8008044 <UART_SetConfig+0x228>)
 8007f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f90:	095b      	lsrs	r3, r3, #5
 8007f92:	2164      	movs	r1, #100	; 0x64
 8007f94:	fb01 f303 	mul.w	r3, r1, r3
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	3332      	adds	r3, #50	; 0x32
 8007f9e:	4a29      	ldr	r2, [pc, #164]	; (8008044 <UART_SetConfig+0x228>)
 8007fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa4:	095b      	lsrs	r3, r3, #5
 8007fa6:	005b      	lsls	r3, r3, #1
 8007fa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fac:	441e      	add	r6, r3
 8007fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f04f 0100 	mov.w	r1, #0
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	1894      	adds	r4, r2, r2
 8007fbc:	623c      	str	r4, [r7, #32]
 8007fbe:	415b      	adcs	r3, r3
 8007fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fc6:	1812      	adds	r2, r2, r0
 8007fc8:	eb41 0303 	adc.w	r3, r1, r3
 8007fcc:	f04f 0400 	mov.w	r4, #0
 8007fd0:	f04f 0500 	mov.w	r5, #0
 8007fd4:	00dd      	lsls	r5, r3, #3
 8007fd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007fda:	00d4      	lsls	r4, r2, #3
 8007fdc:	4622      	mov	r2, r4
 8007fde:	462b      	mov	r3, r5
 8007fe0:	1814      	adds	r4, r2, r0
 8007fe2:	653c      	str	r4, [r7, #80]	; 0x50
 8007fe4:	414b      	adcs	r3, r1
 8007fe6:	657b      	str	r3, [r7, #84]	; 0x54
 8007fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	461a      	mov	r2, r3
 8007fee:	f04f 0300 	mov.w	r3, #0
 8007ff2:	1891      	adds	r1, r2, r2
 8007ff4:	61b9      	str	r1, [r7, #24]
 8007ff6:	415b      	adcs	r3, r3
 8007ff8:	61fb      	str	r3, [r7, #28]
 8007ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ffe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008002:	f7f8 fe3d 	bl	8000c80 <__aeabi_uldivmod>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	4b0e      	ldr	r3, [pc, #56]	; (8008044 <UART_SetConfig+0x228>)
 800800c:	fba3 1302 	umull	r1, r3, r3, r2
 8008010:	095b      	lsrs	r3, r3, #5
 8008012:	2164      	movs	r1, #100	; 0x64
 8008014:	fb01 f303 	mul.w	r3, r1, r3
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	3332      	adds	r3, #50	; 0x32
 800801e:	4a09      	ldr	r2, [pc, #36]	; (8008044 <UART_SetConfig+0x228>)
 8008020:	fba2 2303 	umull	r2, r3, r2, r3
 8008024:	095b      	lsrs	r3, r3, #5
 8008026:	f003 0207 	and.w	r2, r3, #7
 800802a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4432      	add	r2, r6
 8008030:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008032:	e0c3      	b.n	80081bc <UART_SetConfig+0x3a0>
 8008034:	40011000 	.word	0x40011000
 8008038:	40011400 	.word	0x40011400
 800803c:	40011800 	.word	0x40011800
 8008040:	40011c00 	.word	0x40011c00
 8008044:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800804a:	461c      	mov	r4, r3
 800804c:	f04f 0500 	mov.w	r5, #0
 8008050:	4622      	mov	r2, r4
 8008052:	462b      	mov	r3, r5
 8008054:	1891      	adds	r1, r2, r2
 8008056:	6139      	str	r1, [r7, #16]
 8008058:	415b      	adcs	r3, r3
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008060:	1912      	adds	r2, r2, r4
 8008062:	eb45 0303 	adc.w	r3, r5, r3
 8008066:	f04f 0000 	mov.w	r0, #0
 800806a:	f04f 0100 	mov.w	r1, #0
 800806e:	00d9      	lsls	r1, r3, #3
 8008070:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008074:	00d0      	lsls	r0, r2, #3
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	eb12 0804 	adds.w	r8, r2, r4
 800807e:	eb43 0905 	adc.w	r9, r3, r5
 8008082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	4618      	mov	r0, r3
 8008088:	f04f 0100 	mov.w	r1, #0
 800808c:	f04f 0200 	mov.w	r2, #0
 8008090:	f04f 0300 	mov.w	r3, #0
 8008094:	008b      	lsls	r3, r1, #2
 8008096:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800809a:	0082      	lsls	r2, r0, #2
 800809c:	4640      	mov	r0, r8
 800809e:	4649      	mov	r1, r9
 80080a0:	f7f8 fdee 	bl	8000c80 <__aeabi_uldivmod>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4b47      	ldr	r3, [pc, #284]	; (80081c8 <UART_SetConfig+0x3ac>)
 80080aa:	fba3 2302 	umull	r2, r3, r3, r2
 80080ae:	095b      	lsrs	r3, r3, #5
 80080b0:	011e      	lsls	r6, r3, #4
 80080b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080b4:	4618      	mov	r0, r3
 80080b6:	f04f 0100 	mov.w	r1, #0
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	1894      	adds	r4, r2, r2
 80080c0:	60bc      	str	r4, [r7, #8]
 80080c2:	415b      	adcs	r3, r3
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080ca:	1812      	adds	r2, r2, r0
 80080cc:	eb41 0303 	adc.w	r3, r1, r3
 80080d0:	f04f 0400 	mov.w	r4, #0
 80080d4:	f04f 0500 	mov.w	r5, #0
 80080d8:	00dd      	lsls	r5, r3, #3
 80080da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80080de:	00d4      	lsls	r4, r2, #3
 80080e0:	4622      	mov	r2, r4
 80080e2:	462b      	mov	r3, r5
 80080e4:	1814      	adds	r4, r2, r0
 80080e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80080e8:	414b      	adcs	r3, r1
 80080ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f04f 0100 	mov.w	r1, #0
 80080f6:	f04f 0200 	mov.w	r2, #0
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	008b      	lsls	r3, r1, #2
 8008100:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008104:	0082      	lsls	r2, r0, #2
 8008106:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800810a:	f7f8 fdb9 	bl	8000c80 <__aeabi_uldivmod>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4b2d      	ldr	r3, [pc, #180]	; (80081c8 <UART_SetConfig+0x3ac>)
 8008114:	fba3 1302 	umull	r1, r3, r3, r2
 8008118:	095b      	lsrs	r3, r3, #5
 800811a:	2164      	movs	r1, #100	; 0x64
 800811c:	fb01 f303 	mul.w	r3, r1, r3
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	3332      	adds	r3, #50	; 0x32
 8008126:	4a28      	ldr	r2, [pc, #160]	; (80081c8 <UART_SetConfig+0x3ac>)
 8008128:	fba2 2303 	umull	r2, r3, r2, r3
 800812c:	095b      	lsrs	r3, r3, #5
 800812e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008132:	441e      	add	r6, r3
 8008134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008136:	4618      	mov	r0, r3
 8008138:	f04f 0100 	mov.w	r1, #0
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	1894      	adds	r4, r2, r2
 8008142:	603c      	str	r4, [r7, #0]
 8008144:	415b      	adcs	r3, r3
 8008146:	607b      	str	r3, [r7, #4]
 8008148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800814c:	1812      	adds	r2, r2, r0
 800814e:	eb41 0303 	adc.w	r3, r1, r3
 8008152:	f04f 0400 	mov.w	r4, #0
 8008156:	f04f 0500 	mov.w	r5, #0
 800815a:	00dd      	lsls	r5, r3, #3
 800815c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008160:	00d4      	lsls	r4, r2, #3
 8008162:	4622      	mov	r2, r4
 8008164:	462b      	mov	r3, r5
 8008166:	eb12 0a00 	adds.w	sl, r2, r0
 800816a:	eb43 0b01 	adc.w	fp, r3, r1
 800816e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	4618      	mov	r0, r3
 8008174:	f04f 0100 	mov.w	r1, #0
 8008178:	f04f 0200 	mov.w	r2, #0
 800817c:	f04f 0300 	mov.w	r3, #0
 8008180:	008b      	lsls	r3, r1, #2
 8008182:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008186:	0082      	lsls	r2, r0, #2
 8008188:	4650      	mov	r0, sl
 800818a:	4659      	mov	r1, fp
 800818c:	f7f8 fd78 	bl	8000c80 <__aeabi_uldivmod>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <UART_SetConfig+0x3ac>)
 8008196:	fba3 1302 	umull	r1, r3, r3, r2
 800819a:	095b      	lsrs	r3, r3, #5
 800819c:	2164      	movs	r1, #100	; 0x64
 800819e:	fb01 f303 	mul.w	r3, r1, r3
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	011b      	lsls	r3, r3, #4
 80081a6:	3332      	adds	r3, #50	; 0x32
 80081a8:	4a07      	ldr	r2, [pc, #28]	; (80081c8 <UART_SetConfig+0x3ac>)
 80081aa:	fba2 2303 	umull	r2, r3, r2, r3
 80081ae:	095b      	lsrs	r3, r3, #5
 80081b0:	f003 020f 	and.w	r2, r3, #15
 80081b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4432      	add	r2, r6
 80081ba:	609a      	str	r2, [r3, #8]
}
 80081bc:	bf00      	nop
 80081be:	377c      	adds	r7, #124	; 0x7c
 80081c0:	46bd      	mov	sp, r7
 80081c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c6:	bf00      	nop
 80081c8:	51eb851f 	.word	0x51eb851f

080081cc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e4:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	4b2f      	ldr	r3, [pc, #188]	; (80082a8 <FSMC_NORSRAM_Init+0xdc>)
 80081ea:	4013      	ands	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80081f6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80081fc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8008202:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008208:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800820e:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008214:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800821a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008220:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008226:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800822c:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8008232:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8008238:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800823e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	2b08      	cmp	r3, #8
 800824c:	d103      	bne.n	8008256 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008254:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68f9      	ldr	r1, [r7, #12]
 800825e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800826a:	d10a      	bne.n	8008282 <FSMC_NORSRAM_Init+0xb6>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d006      	beq.n	8008282 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800827c:	431a      	orrs	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d006      	beq.n	8008298 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008292:	431a      	orrs	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	ffc00480 	.word	0xffc00480

080082ac <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	1c5a      	adds	r2, r3, #1
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80082ce:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80082da:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80082e2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80082ea:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80082f4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	3b02      	subs	r3, #2
 80082fc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80082fe:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008304:	4313      	orrs	r3, r2
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	4313      	orrs	r3, r2
 800830a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	1c5a      	adds	r2, r3, #1
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6979      	ldr	r1, [r7, #20]
 8008314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008324:	d10e      	bne.n	8008344 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800832e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	3b01      	subs	r3, #1
 8008336:	051b      	lsls	r3, r3, #20
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	4313      	orrs	r3, r2
 800833c:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
	...

08008354 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800836c:	d122      	bne.n	80083b4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008376:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	4b15      	ldr	r3, [pc, #84]	; (80083d0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800837c:	4013      	ands	r3, r2
 800837e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800838a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008392:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800839a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80083a0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	6979      	ldr	r1, [r7, #20]
 80083ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80083b2:	e005      	b.n	80083c0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80083bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	cff00000 	.word	0xcff00000

080083d4 <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3301      	adds	r3, #1
 80083e0:	009b      	lsls	r3, r3, #2
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
	...

080083f0 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 80083fa:	79fb      	ldrb	r3, [r7, #7]
 80083fc:	2b10      	cmp	r3, #16
 80083fe:	d847      	bhi.n	8008490 <TfLiteTypeGetName+0xa0>
 8008400:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <TfLiteTypeGetName+0x18>)
 8008402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008406:	bf00      	nop
 8008408:	0800844d 	.word	0x0800844d
 800840c:	08008451 	.word	0x08008451
 8008410:	08008459 	.word	0x08008459
 8008414:	08008461 	.word	0x08008461
 8008418:	08008469 	.word	0x08008469
 800841c:	0800847d 	.word	0x0800847d
 8008420:	08008471 	.word	0x08008471
 8008424:	08008455 	.word	0x08008455
 8008428:	08008475 	.word	0x08008475
 800842c:	08008465 	.word	0x08008465
 8008430:	08008481 	.word	0x08008481
 8008434:	08008485 	.word	0x08008485
 8008438:	08008479 	.word	0x08008479
 800843c:	0800846d 	.word	0x0800846d
 8008440:	08008489 	.word	0x08008489
 8008444:	0800848d 	.word	0x0800848d
 8008448:	0800845d 	.word	0x0800845d
    case kTfLiteNoType:
      return "NOTYPE";
 800844c:	4b14      	ldr	r3, [pc, #80]	; (80084a0 <TfLiteTypeGetName+0xb0>)
 800844e:	e020      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 8008450:	4b14      	ldr	r3, [pc, #80]	; (80084a4 <TfLiteTypeGetName+0xb4>)
 8008452:	e01e      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 8008454:	4b14      	ldr	r3, [pc, #80]	; (80084a8 <TfLiteTypeGetName+0xb8>)
 8008456:	e01c      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 8008458:	4b14      	ldr	r3, [pc, #80]	; (80084ac <TfLiteTypeGetName+0xbc>)
 800845a:	e01a      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 800845c:	4b14      	ldr	r3, [pc, #80]	; (80084b0 <TfLiteTypeGetName+0xc0>)
 800845e:	e018      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 8008460:	4b14      	ldr	r3, [pc, #80]	; (80084b4 <TfLiteTypeGetName+0xc4>)
 8008462:	e016      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 8008464:	4b14      	ldr	r3, [pc, #80]	; (80084b8 <TfLiteTypeGetName+0xc8>)
 8008466:	e014      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 8008468:	4b14      	ldr	r3, [pc, #80]	; (80084bc <TfLiteTypeGetName+0xcc>)
 800846a:	e012      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 800846c:	4b14      	ldr	r3, [pc, #80]	; (80084c0 <TfLiteTypeGetName+0xd0>)
 800846e:	e010      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 8008470:	4b14      	ldr	r3, [pc, #80]	; (80084c4 <TfLiteTypeGetName+0xd4>)
 8008472:	e00e      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8008474:	4b14      	ldr	r3, [pc, #80]	; (80084c8 <TfLiteTypeGetName+0xd8>)
 8008476:	e00c      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8008478:	4b14      	ldr	r3, [pc, #80]	; (80084cc <TfLiteTypeGetName+0xdc>)
 800847a:	e00a      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 800847c:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <TfLiteTypeGetName+0xe0>)
 800847e:	e008      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 8008480:	4b14      	ldr	r3, [pc, #80]	; (80084d4 <TfLiteTypeGetName+0xe4>)
 8008482:	e006      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8008484:	4b14      	ldr	r3, [pc, #80]	; (80084d8 <TfLiteTypeGetName+0xe8>)
 8008486:	e004      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 8008488:	4b14      	ldr	r3, [pc, #80]	; (80084dc <TfLiteTypeGetName+0xec>)
 800848a:	e002      	b.n	8008492 <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 800848c:	4b14      	ldr	r3, [pc, #80]	; (80084e0 <TfLiteTypeGetName+0xf0>)
 800848e:	e000      	b.n	8008492 <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 8008490:	4b14      	ldr	r3, [pc, #80]	; (80084e4 <TfLiteTypeGetName+0xf4>)
}
 8008492:	4618      	mov	r0, r3
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	080263a4 	.word	0x080263a4
 80084a4:	080263ac 	.word	0x080263ac
 80084a8:	080263b4 	.word	0x080263b4
 80084ac:	080263bc 	.word	0x080263bc
 80084b0:	080263c4 	.word	0x080263c4
 80084b4:	080263cc 	.word	0x080263cc
 80084b8:	080263d4 	.word	0x080263d4
 80084bc:	080263dc 	.word	0x080263dc
 80084c0:	080263e4 	.word	0x080263e4
 80084c4:	080263ec 	.word	0x080263ec
 80084c8:	080263f4 	.word	0x080263f4
 80084cc:	08026400 	.word	0x08026400
 80084d0:	0802640c 	.word	0x0802640c
 80084d4:	08026414 	.word	0x08026414
 80084d8:	0802641c 	.word	0x0802641c
 80084dc:	08026424 	.word	0x08026424
 80084e0:	08026430 	.word	0x08026430
 80084e4:	08026438 	.word	0x08026438

080084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 80084e8:	b40e      	push	{r1, r2, r3}
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b085      	sub	sp, #20
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 80084f2:	f107 0320 	add.w	r3, r7, #32
 80084f6:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3308      	adds	r3, #8
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	69f9      	ldr	r1, [r7, #28]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	4798      	blx	r3
 8008508:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 800850a:	68fb      	ldr	r3, [r7, #12]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008516:	b003      	add	sp, #12
 8008518:	4770      	bx	lr

0800851a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 800851a:	b40c      	push	{r2, r3}
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8008526:	f107 031c 	add.w	r3, r7, #28
 800852a:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3308      	adds	r3, #8
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	69b9      	ldr	r1, [r7, #24]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	4798      	blx	r3
 800853c:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 800853e:	68fb      	ldr	r3, [r7, #12]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800854a:	b002      	add	sp, #8
 800854c:	4770      	bx	lr

0800854e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800854e:	b480      	push	{r7}
 8008550:	b083      	sub	sp, #12
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	4618      	mov	r0, r3
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 8008566:	b590      	push	{r4, r7, lr}
 8008568:	b083      	sub	sp, #12
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 800856e:	687c      	ldr	r4, [r7, #4]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fe3f 	bl	80091f6 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8008578:	4603      	mov	r3, r0
 800857a:	425b      	negs	r3, r3
 800857c:	4423      	add	r3, r4
  }
 800857e:	4618      	mov	r0, r3
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	bd90      	pop	{r4, r7, pc}

08008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	460b      	mov	r3, r1
 8008590:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff ffe7 	bl	8008566 <_ZNK11flatbuffers5Table9GetVTableEv>
 8008598:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f000 fe0f 	bl	80091be <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80085a0:	4603      	mov	r3, r0
 80085a2:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80085a4:	887a      	ldrh	r2, [r7, #2]
 80085a6:	897b      	ldrh	r3, [r7, #10]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d207      	bcs.n	80085bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 80085ac:	887b      	ldrh	r3, [r7, #2]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4413      	add	r3, r2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 fe03 	bl	80091be <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80085b8:	4603      	mov	r3, r0
 80085ba:	e000      	b.n	80085be <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 80085bc:	2300      	movs	r3, #0
  }
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <_ZNK6tflite13Conv2DOptions7paddingEv>:
    VT_STRIDE_H = 8,
    VT_FUSED_ACTIVATION_FUNCTION = 10,
    VT_DILATION_W_FACTOR = 12,
    VT_DILATION_H_FACTOR = 14
  };
  tflite::Padding padding() const {
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	2104      	movs	r1, #4
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 fe87 	bl	80092e8 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80085da:	4603      	mov	r3, r0
 80085dc:	b2db      	uxtb	r3, r3
  }
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <_ZNK6tflite13Conv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b082      	sub	sp, #8
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	2106      	movs	r1, #6
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 fe49 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80085fa:	4603      	mov	r3, r0
  }
 80085fc:	4618      	mov	r0, r3
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <_ZNK6tflite13Conv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	2108      	movs	r1, #8
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fe3a 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008618:	4603      	mov	r3, r0
  }
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	210a      	movs	r1, #10
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fe59 	bl	80092e8 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008636:	4603      	mov	r3, r0
 8008638:	b2db      	uxtb	r3, r3
  }
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 8008642:	b580      	push	{r7, lr}
 8008644:	b082      	sub	sp, #8
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	210c      	movs	r1, #12
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fe1b 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008656:	4603      	mov	r3, r0
  }
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	210e      	movs	r1, #14
 800866e:	4618      	mov	r0, r3
 8008670:	f000 fe0c 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008674:	4603      	mov	r3, r0
  }
 8008676:	4618      	mov	r0, r3
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <_ZNK6tflite13Pool2DOptions7paddingEv>:
    VT_STRIDE_H = 8,
    VT_FILTER_WIDTH = 10,
    VT_FILTER_HEIGHT = 12,
    VT_FUSED_ACTIVATION_FUNCTION = 14
  };
  tflite::Padding padding() const {
 800867e:	b580      	push	{r7, lr}
 8008680:	b082      	sub	sp, #8
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	2104      	movs	r1, #4
 800868c:	4618      	mov	r0, r3
 800868e:	f000 fe2b 	bl	80092e8 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008692:	4603      	mov	r3, r0
 8008694:	b2db      	uxtb	r3, r3
  }
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <_ZNK6tflite13Pool2DOptions8stride_wEv>:
  int32_t stride_w() const {
 800869e:	b580      	push	{r7, lr}
 80086a0:	b082      	sub	sp, #8
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	2106      	movs	r1, #6
 80086ac:	4618      	mov	r0, r3
 80086ae:	f000 fded 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80086b2:	4603      	mov	r3, r0
  }
 80086b4:	4618      	mov	r0, r3
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <_ZNK6tflite13Pool2DOptions8stride_hEv>:
  int32_t stride_h() const {
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	2108      	movs	r1, #8
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fdde 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80086d0:	4603      	mov	r3, r0
  }
 80086d2:	4618      	mov	r0, r3
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <_ZNK6tflite13Pool2DOptions12filter_widthEv>:
  int32_t filter_width() const {
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	210a      	movs	r1, #10
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fdcf 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80086ee:	4603      	mov	r3, r0
  }
 80086f0:	4618      	mov	r0, r3
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <_ZNK6tflite13Pool2DOptions13filter_heightEv>:
  int32_t filter_height() const {
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	210c      	movs	r1, #12
 8008706:	4618      	mov	r0, r3
 8008708:	f000 fdc0 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800870c:	4603      	mov	r3, r0
  }
 800870e:	4618      	mov	r0, r3
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	210e      	movs	r1, #14
 8008724:	4618      	mov	r0, r3
 8008726:	f000 fddf 	bl	80092e8 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800872a:	4603      	mov	r3, r0
 800872c:	b2db      	uxtb	r3, r3
  }
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>:
    VT_DEPTH_MULTIPLIER = 10,
    VT_FUSED_ACTIVATION_FUNCTION = 12,
    VT_DILATION_W_FACTOR = 14,
    VT_DILATION_H_FACTOR = 16
  };
  tflite::Padding padding() const {
 8008736:	b580      	push	{r7, lr}
 8008738:	b082      	sub	sp, #8
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	2104      	movs	r1, #4
 8008744:	4618      	mov	r0, r3
 8008746:	f000 fdcf 	bl	80092e8 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800874a:	4603      	mov	r3, r0
 800874c:	b2db      	uxtb	r3, r3
  }
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8008756:	b580      	push	{r7, lr}
 8008758:	b082      	sub	sp, #8
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	2106      	movs	r1, #6
 8008764:	4618      	mov	r0, r3
 8008766:	f000 fd91 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800876a:	4603      	mov	r3, r0
  }
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	2108      	movs	r1, #8
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fd82 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008788:	4603      	mov	r3, r0
  }
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>:
  int32_t depth_multiplier() const {
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	210a      	movs	r1, #10
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 fd73 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80087a6:	4603      	mov	r3, r0
  }
 80087a8:	4618      	mov	r0, r3
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	210c      	movs	r1, #12
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 fd92 	bl	80092e8 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80087c4:	4603      	mov	r3, r0
 80087c6:	b2db      	uxtb	r3, r3
  }
 80087c8:	4618      	mov	r0, r3
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	210e      	movs	r1, #14
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fd54 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80087e4:	4603      	mov	r3, r0
  }
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	2110      	movs	r1, #16
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 fd45 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008802:	4603      	mov	r3, r0
  }
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <_ZNK6tflite14SoftmaxOptions4betaEv>:
struct SoftmaxOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SoftmaxOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BETA = 4
  };
  float beta() const {
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8008830 <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 800881a:	2104      	movs	r1, #4
 800881c:	4618      	mov	r0, r3
 800881e:	f000 fd83 	bl	8009328 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8008822:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008826:	eeb0 0a67 	vmov.f32	s0, s15
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	00000000 	.word	0x00000000

08008834 <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
struct ReshapeOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReshapeOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NEW_SHAPE = 4
  };
  const flatbuffers::Vector<int32_t> *new_shape() const {
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2104      	movs	r1, #4
 8008840:	4618      	mov	r0, r3
 8008842:	f000 fd41 	bl	80092c8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8008846:	4603      	mov	r3, r0
  }
 8008848:	4618      	mov	r0, r3
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <_ZNK6tflite8Operator20builtin_options_typeEv>:
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  tflite::BuiltinOptions builtin_options_type() const {
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	210a      	movs	r1, #10
 800885e:	4618      	mov	r0, r3
 8008860:	f000 fce5 	bl	800922e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8008864:	4603      	mov	r3, r0
  }
 8008866:	4618      	mov	r0, r3
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 800886e:	b580      	push	{r7, lr}
 8008870:	b082      	sub	sp, #8
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	210c      	movs	r1, #12
 800887a:	4618      	mov	r0, r3
 800887c:	f000 fcf6 	bl	800926c <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 8008880:	4603      	mov	r3, r0
  }
 8008882:	4618      	mov	r0, r3
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>:
  template<typename T> const T *builtin_options_as() const;
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
 800888a:	b580      	push	{r7, lr}
 800888c:	b082      	sub	sp, #8
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7ff ffdc 	bl	8008850 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008898:	4603      	mov	r3, r0
 800889a:	2b01      	cmp	r3, #1
 800889c:	d104      	bne.n	80088a8 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x1e>
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff ffe5 	bl	800886e <_ZNK6tflite8Operator15builtin_optionsEv>
 80088a4:	4603      	mov	r3, r0
 80088a6:	e000      	b.n	80088aa <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x20>
 80088a8:	2300      	movs	r3, #0
  }
 80088aa:	4618      	mov	r0, r3
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>:
  const tflite::DepthwiseConv2DOptions *builtin_options_as_DepthwiseConv2DOptions() const {
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7ff ffc8 	bl	8008850 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d104      	bne.n	80088d0 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x1e>
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7ff ffd1 	bl	800886e <_ZNK6tflite8Operator15builtin_optionsEv>
 80088cc:	4603      	mov	r3, r0
 80088ce:	e000      	b.n	80088d2 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x20>
 80088d0:	2300      	movs	r3, #0
  }
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_ConcatEmbeddingsOptions ? static_cast<const tflite::ConcatEmbeddingsOptions *>(builtin_options()) : nullptr;
  }
  const tflite::LSHProjectionOptions *builtin_options_as_LSHProjectionOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_LSHProjectionOptions ? static_cast<const tflite::LSHProjectionOptions *>(builtin_options()) : nullptr;
  }
  const tflite::Pool2DOptions *builtin_options_as_Pool2DOptions() const {
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7ff ffb4 	bl	8008850 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b05      	cmp	r3, #5
 80088ec:	d104      	bne.n	80088f8 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x1e>
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7ff ffbd 	bl	800886e <_ZNK6tflite8Operator15builtin_optionsEv>
 80088f4:	4603      	mov	r3, r0
 80088f6:	e000      	b.n	80088fa <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x20>
 80088f8:	2300      	movs	r3, #0
  }
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
  }
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
  }
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 8008902:	b580      	push	{r7, lr}
 8008904:	b082      	sub	sp, #8
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7ff ffa0 	bl	8008850 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008910:	4603      	mov	r3, r0
 8008912:	2b09      	cmp	r3, #9
 8008914:	d104      	bne.n	8008920 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7ff ffa9 	bl	800886e <_ZNK6tflite8Operator15builtin_optionsEv>
 800891c:	4603      	mov	r3, r0
 800891e:	e000      	b.n	8008922 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 8008920:	2300      	movs	r3, #0
  }
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_ResizeBilinearOptions ? static_cast<const tflite::ResizeBilinearOptions *>(builtin_options()) : nullptr;
  }
  const tflite::CallOptions *builtin_options_as_CallOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_CallOptions ? static_cast<const tflite::CallOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 800892a:	b580      	push	{r7, lr}
 800892c:	b082      	sub	sp, #8
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7ff ff8c 	bl	8008850 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008938:	4603      	mov	r3, r0
 800893a:	2b11      	cmp	r3, #17
 800893c:	d104      	bne.n	8008948 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7ff ff95 	bl	800886e <_ZNK6tflite8Operator15builtin_optionsEv>
 8008944:	4603      	mov	r3, r0
 8008946:	e000      	b.n	800894a <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 8008948:	2300      	movs	r3, #0
  }
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8008952:	b480      	push	{r7}
 8008954:	b083      	sub	sp, #12
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3304      	adds	r3, #4
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	4610      	mov	r0, r2
 800898c:	4798      	blx	r3
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 8008996:	b480      	push	{r7}
 8008998:	b083      	sub	sp, #12
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4618      	mov	r0, r3
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 80089c8:	f01c fa79 	bl	8024ebe <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d101      	bne.n	80089d6 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 80089d2:	f01c fa74 	bl	8024ebe <abort>
  TFLITE_DCHECK(allocator != nullptr);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 80089dc:	f01c fa6f 	bl	8024ebe <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 80089e6:	f01c fa6a 	bl	8024ebe <abort>
}
 80089ea:	bf00      	nop
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
	...

080089f4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
 80089f4:	b590      	push	{r4, r7, lr}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d106      	bne.n	8008a16 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 8008a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a0a:	4917      	ldr	r1, [pc, #92]	; (8008a68 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
 8008a0c:	6838      	ldr	r0, [r7, #0]
 8008a0e:	f7ff fd6b 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input array not provided for operation '%s'.\n",
                         op_name);
    return kTfLiteError;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e024      	b.n	8008a60 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
  } else {
    size_t num_dimensions = flat_vector->size();
 8008a16:	68b8      	ldr	r0, [r7, #8]
 8008a18:	f000 fca8 	bl	800936c <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008a1c:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	089b      	lsrs	r3, r3, #2
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d906      	bls.n	8008a36 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 8008a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a2a:	4910      	ldr	r1, [pc, #64]	; (8008a6c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x78>)
 8008a2c:	6838      	ldr	r0, [r7, #0]
 8008a2e:	f7ff fd5b 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e014      	b.n	8008a60 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
    } else {
      for (size_t i = 0; i < num_dimensions; ++i) {
 8008a36:	2300      	movs	r3, #0
 8008a38:	617b      	str	r3, [r7, #20]
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d20d      	bcs.n	8008a5e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6a>
        buffer[i] = flat_vector->Get(i);
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	18d4      	adds	r4, r2, r3
 8008a4a:	6979      	ldr	r1, [r7, #20]
 8008a4c:	68b8      	ldr	r0, [r7, #8]
 8008a4e:	f000 fc9b 	bl	8009388 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008a52:	4603      	mov	r3, r0
 8008a54:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	617b      	str	r3, [r7, #20]
 8008a5c:	e7ed      	b.n	8008a3a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x46>
      }
    }
  }
  return kTfLiteOk;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	371c      	adds	r7, #28
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd90      	pop	{r4, r7, pc}
 8008a68:	0802645c 	.word	0x0802645c
 8008a6c:	0802648c 	.word	0x0802648c

08008a70 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	4603      	mov	r3, r0
 8008a78:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	2b05      	cmp	r3, #5
 8008a7e:	d81b      	bhi.n	8008ab8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8008a80:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 8008a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a86:	bf00      	nop
 8008a88:	08008aa1 	.word	0x08008aa1
 8008a8c:	08008aa5 	.word	0x08008aa5
 8008a90:	08008aa9 	.word	0x08008aa9
 8008a94:	08008aad 	.word	0x08008aad
 8008a98:	08008ab1 	.word	0x08008ab1
 8008a9c:	08008ab5 	.word	0x08008ab5
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	e00a      	b.n	8008aba <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e008      	b.n	8008aba <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	e006      	b.n	8008aba <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e004      	b.n	8008aba <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8008ab0:	2304      	movs	r3, #4
 8008ab2:	e002      	b.n	8008aba <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 8008ab4:	2305      	movs	r3, #5
 8008ab6:	e000      	b.n	8008aba <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop

08008ac8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x16>
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d002      	beq.n	8008ae2 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1a>
 8008adc:	e003      	b.n	8008ae6 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1e>
    case Padding_SAME:
      return kTfLitePaddingSame;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e002      	b.n	8008ae8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
    case Padding_VALID:
      return kTfLitePaddingValid;
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	e000      	b.n	8008ae8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
  }
  return kTfLitePaddingUnknown;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
 8008b04:	2b0f      	cmp	r3, #15
 8008b06:	d873      	bhi.n	8008bf0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xfc>
 8008b08:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 8008b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0e:	bf00      	nop
 8008b10:	08008b5b 	.word	0x08008b5b
 8008b14:	08008b51 	.word	0x08008b51
 8008b18:	08008b79 	.word	0x08008b79
 8008b1c:	08008b8d 	.word	0x08008b8d
 8008b20:	08008ba1 	.word	0x08008ba1
 8008b24:	08008bb5 	.word	0x08008bb5
 8008b28:	08008bbf 	.word	0x08008bbf
 8008b2c:	08008b6f 	.word	0x08008b6f
 8008b30:	08008bc9 	.word	0x08008bc9
 8008b34:	08008b97 	.word	0x08008b97
 8008b38:	08008b65 	.word	0x08008b65
 8008b3c:	08008bd3 	.word	0x08008bd3
 8008b40:	08008bab 	.word	0x08008bab
 8008b44:	08008bdd 	.word	0x08008bdd
 8008b48:	08008be7 	.word	0x08008be7
 8008b4c:	08008b83 	.word	0x08008b83
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	220a      	movs	r2, #10
 8008b54:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008b56:	2300      	movs	r3, #0
 8008b58:	e054      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008b60:	2300      	movs	r3, #0
 8008b62:	e04f      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	220b      	movs	r2, #11
 8008b68:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	e04a      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	2207      	movs	r2, #7
 8008b72:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008b74:	2300      	movs	r3, #0
 8008b76:	e045      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e040      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT32:
      *type = kTfLiteUInt32;
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2210      	movs	r2, #16
 8008b86:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	e03b      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2203      	movs	r2, #3
 8008b90:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008b92:	2300      	movs	r3, #0
 8008b94:	e036      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	2209      	movs	r2, #9
 8008b9a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	e031      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2204      	movs	r2, #4
 8008ba4:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	e02c      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	220d      	movs	r2, #13
 8008bae:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	e027      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_STRING:
      *type = kTfLiteString;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2205      	movs	r2, #5
 8008bb8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e022      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2206      	movs	r2, #6
 8008bc2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	e01d      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	2208      	movs	r2, #8
 8008bcc:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e018      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	220c      	movs	r2, #12
 8008bd6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	e013      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_RESOURCE:
      *type = kTfLiteResource;
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	220e      	movs	r2, #14
 8008be0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008be2:	2300      	movs	r3, #0
 8008be4:	e00e      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	220f      	movs	r2, #15
 8008bea:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008bec:	2300      	movs	r3, #0
 8008bee:	e009      	b.n	8008c04 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    default:
      *type = kTfLiteNoType;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	4904      	ldr	r1, [pc, #16]	; (8008c0c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x118>)
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7ff fc73 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 8008c02:	2301      	movs	r3, #1
  }
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	080265b0 	.word	0x080265b0

08008c10 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  *builtin_data = params.release();
  return kTfLiteOk;
}

TfLiteStatus ParseConv2D(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
 8008c10:	b5b0      	push	{r4, r5, r7, lr}
 8008c12:	b08a      	sub	sp, #40	; 0x28
 8008c14:	af02      	add	r7, sp, #8
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
 8008c1c:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	68b9      	ldr	r1, [r7, #8]
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7ff fec5 	bl	80089b4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8008c2a:	f107 0318 	add.w	r3, r7, #24
 8008c2e:	6879      	ldr	r1, [r7, #4]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7ff feb0 	bl	8008996 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteConvParams>();
 8008c36:	f107 0310 	add.w	r3, r7, #16
 8008c3a:	f107 0218 	add.w	r2, r7, #24
 8008c3e:	4611      	mov	r1, r2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 fbc7 	bl	80093d4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008c46:	f107 0310 	add.w	r3, r7, #16
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fc01 	bl	8009454 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f083 0301 	eor.w	r3, r3, #1
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00c      	beq.n	8008c78 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8008c5e:	4b39      	ldr	r3, [pc, #228]	; (8008d44 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	f240 433b 	movw	r3, #1083	; 0x43b
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	4b37      	ldr	r3, [pc, #220]	; (8008d48 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8008c6a:	4a38      	ldr	r2, [pc, #224]	; (8008d4c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 8008c6c:	68b9      	ldr	r1, [r7, #8]
 8008c6e:	68b8      	ldr	r0, [r7, #8]
 8008c70:	f7ff fc53 	bl	800851a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008c74:	2401      	movs	r4, #1
 8008c76:	e05b      	b.n	8008d30 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Conv2DOptions* schema_params = op->builtin_options_as_Conv2DOptions();
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f7ff fe06 	bl	800888a <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>
 8008c7e:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d04b      	beq.n	8008d1e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 8008c86:	69f8      	ldr	r0, [r7, #28]
 8008c88:	f7ff fc9d 	bl	80085c6 <_ZNK6tflite13Conv2DOptions7paddingEv>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	461d      	mov	r5, r3
 8008c90:	f107 0310 	add.w	r3, r7, #16
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 fbea 	bl	800946e <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f7ff ff13 	bl	8008ac8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 8008ca6:	f107 0310 	add.w	r3, r7, #16
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 fbdf 	bl	800946e <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	69f8      	ldr	r0, [r7, #28]
 8008cb4:	f7ff fc97 	bl	80085e6 <_ZNK6tflite13Conv2DOptions8stride_wEv>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 8008cbc:	f107 0310 	add.w	r3, r7, #16
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fbd4 	bl	800946e <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	69f8      	ldr	r0, [r7, #28]
 8008cca:	f7ff fc9b 	bl	8008604 <_ZNK6tflite13Conv2DOptions8stride_hEv>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	60a3      	str	r3, [r4, #8]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8008cd2:	69f8      	ldr	r0, [r7, #28]
 8008cd4:	f7ff fca5 	bl	8008622 <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	461d      	mov	r5, r3
    params->activation =
 8008cdc:	f107 0310 	add.w	r3, r7, #16
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 fbc4 	bl	800946e <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008ce6:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8008ce8:	4628      	mov	r0, r5
 8008cea:	f7ff fec1 	bl	8008a70 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8008cee:	4603      	mov	r3, r0
    params->activation =
 8008cf0:	7323      	strb	r3, [r4, #12]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 8008cf2:	f107 0310 	add.w	r3, r7, #16
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fbb9 	bl	800946e <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	69f8      	ldr	r0, [r7, #28]
 8008d00:	f7ff fc9f 	bl	8008642 <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>
 8008d04:	4603      	mov	r3, r0
 8008d06:	6123      	str	r3, [r4, #16]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8008d08:	f107 0310 	add.w	r3, r7, #16
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 fbae 	bl	800946e <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008d12:	4604      	mov	r4, r0
 8008d14:	69f8      	ldr	r0, [r7, #28]
 8008d16:	f7ff fca3 	bl	8008660 <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	6163      	str	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8008d1e:	f107 0310 	add.w	r3, r7, #16
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 fbaf 	bl	8009486 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008d2e:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteConvParams>();
 8008d30:	f107 0310 	add.w	r3, r7, #16
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 fb6b 	bl	8009410 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8008d3a:	4623      	mov	r3, r4
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3720      	adds	r7, #32
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bdb0      	pop	{r4, r5, r7, pc}
 8008d44:	08026530 	.word	0x08026530
 8008d48:	080264d0 	.word	0x080264d0
 8008d4c:	08026518 	.word	0x08026518

08008d50 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseDepthwiseConv2D(const Operator* op,
                                  ErrorReporter* error_reporter,
                                  BuiltinDataAllocator* allocator,
                                  void** builtin_data) {
 8008d50:	b5b0      	push	{r4, r5, r7, lr}
 8008d52:	b08a      	sub	sp, #40	; 0x28
 8008d54:	af02      	add	r7, sp, #8
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	68b9      	ldr	r1, [r7, #8]
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f7ff fe25 	bl	80089b4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8008d6a:	f107 0318 	add.w	r3, r7, #24
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7ff fe10 	bl	8008996 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteDepthwiseConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 8008d76:	f107 0310 	add.w	r3, r7, #16
 8008d7a:	f107 0218 	add.w	r2, r7, #24
 8008d7e:	4611      	mov	r1, r2
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 fb94 	bl	80094ae <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008d86:	f107 0310 	add.w	r3, r7, #16
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 fbce 	bl	800952e <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008d92:	4603      	mov	r3, r0
 8008d94:	f083 0301 	eor.w	r3, r3, #1
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00c      	beq.n	8008db8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8008d9e:	4b3f      	ldr	r3, [pc, #252]	; (8008e9c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>)
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	f44f 6392 	mov.w	r3, #1168	; 0x490
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	4b3d      	ldr	r3, [pc, #244]	; (8008ea0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>)
 8008daa:	4a3e      	ldr	r2, [pc, #248]	; (8008ea4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x154>)
 8008dac:	68b9      	ldr	r1, [r7, #8]
 8008dae:	68b8      	ldr	r0, [r7, #8]
 8008db0:	f7ff fbb3 	bl	800851a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008db4:	2401      	movs	r4, #1
 8008db6:	e066      	b.n	8008e86 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>

  const DepthwiseConv2DOptions* schema_params =
      op->builtin_options_as_DepthwiseConv2DOptions();
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f7ff fd7a 	bl	80088b2 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>
 8008dbe:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d056      	beq.n	8008e74 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>
    params->padding = ConvertPadding(schema_params->padding());
 8008dc6:	69f8      	ldr	r0, [r7, #28]
 8008dc8:	f7ff fcb5 	bl	8008736 <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	461d      	mov	r5, r3
 8008dd0:	f107 0310 	add.w	r3, r7, #16
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 fbb7 	bl	8009548 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008dda:	4604      	mov	r4, r0
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f7ff fe73 	bl	8008ac8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 8008de2:	4603      	mov	r3, r0
 8008de4:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 8008de6:	f107 0310 	add.w	r3, r7, #16
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 fbac 	bl	8009548 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008df0:	4604      	mov	r4, r0
 8008df2:	69f8      	ldr	r0, [r7, #28]
 8008df4:	f7ff fcaf 	bl	8008756 <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 8008dfc:	f107 0310 	add.w	r3, r7, #16
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 fba1 	bl	8009548 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008e06:	4604      	mov	r4, r0
 8008e08:	69f8      	ldr	r0, [r7, #28]
 8008e0a:	f7ff fcb3 	bl	8008774 <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	60a3      	str	r3, [r4, #8]
    params->depth_multiplier = schema_params->depth_multiplier();
 8008e12:	f107 0310 	add.w	r3, r7, #16
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fb96 	bl	8009548 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	69f8      	ldr	r0, [r7, #28]
 8008e20:	f7ff fcb7 	bl	8008792 <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>
 8008e24:	4603      	mov	r3, r0
 8008e26:	60e3      	str	r3, [r4, #12]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8008e28:	69f8      	ldr	r0, [r7, #28]
 8008e2a:	f7ff fcc1 	bl	80087b0 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	461d      	mov	r5, r3
    params->activation =
 8008e32:	f107 0310 	add.w	r3, r7, #16
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fb86 	bl	8009548 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008e3c:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8008e3e:	4628      	mov	r0, r5
 8008e40:	f7ff fe16 	bl	8008a70 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8008e44:	4603      	mov	r3, r0
    params->activation =
 8008e46:	7423      	strb	r3, [r4, #16]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 8008e48:	f107 0310 	add.w	r3, r7, #16
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 fb7b 	bl	8009548 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008e52:	4604      	mov	r4, r0
 8008e54:	69f8      	ldr	r0, [r7, #28]
 8008e56:	f7ff fcbb 	bl	80087d0 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	6163      	str	r3, [r4, #20]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8008e5e:	f107 0310 	add.w	r3, r7, #16
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 fb70 	bl	8009548 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008e68:	4604      	mov	r4, r0
 8008e6a:	69f8      	ldr	r0, [r7, #28]
 8008e6c:	f7ff fcbf 	bl	80087ee <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>
 8008e70:	4603      	mov	r3, r0
 8008e72:	61a3      	str	r3, [r4, #24]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8008e74:	f107 0310 	add.w	r3, r7, #16
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f000 fb71 	bl	8009560 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008e84:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 8008e86:	f107 0310 	add.w	r3, r7, #16
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fb2d 	bl	80094ea <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8008e90:	4623      	mov	r3, r4
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3720      	adds	r7, #32
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bdb0      	pop	{r4, r5, r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	08026530 	.word	0x08026530
 8008ea0:	080264d0 	.word	0x080264d0
 8008ea4:	08026518 	.word	0x08026518

08008ea8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                        void**) {
  return kTfLiteOk;
}

TfLiteStatus ParsePool(const Operator* op, ErrorReporter* error_reporter,
                       BuiltinDataAllocator* allocator, void** builtin_data) {
 8008ea8:	b5b0      	push	{r4, r5, r7, lr}
 8008eaa:	b08a      	sub	sp, #40	; 0x28
 8008eac:	af02      	add	r7, sp, #8
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
 8008eb4:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	68b9      	ldr	r1, [r7, #8]
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f7ff fd79 	bl	80089b4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8008ec2:	f107 0318 	add.w	r3, r7, #24
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff fd64 	bl	8008996 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLitePoolParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLitePoolParams>();
 8008ece:	f107 0310 	add.w	r3, r7, #16
 8008ed2:	f107 0218 	add.w	r2, r7, #24
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 fb55 	bl	8009588 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008ede:	f107 0310 	add.w	r3, r7, #16
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 fb8f 	bl	8009608 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008eea:	4603      	mov	r3, r0
 8008eec:	f083 0301 	eor.w	r3, r3, #1
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00c      	beq.n	8008f10 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8008ef6:	4b39      	ldr	r3, [pc, #228]	; (8008fdc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8008ef8:	9301      	str	r3, [sp, #4]
 8008efa:	f240 634f 	movw	r3, #1615	; 0x64f
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	4b37      	ldr	r3, [pc, #220]	; (8008fe0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8008f02:	4a38      	ldr	r2, [pc, #224]	; (8008fe4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 8008f04:	68b9      	ldr	r1, [r7, #8]
 8008f06:	68b8      	ldr	r0, [r7, #8]
 8008f08:	f7ff fb07 	bl	800851a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008f0c:	2401      	movs	r4, #1
 8008f0e:	e05b      	b.n	8008fc8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Pool2DOptions* schema_params = op->builtin_options_as_Pool2DOptions();
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f7ff fce2 	bl	80088da <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>
 8008f16:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d04b      	beq.n	8008fb6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 8008f1e:	69f8      	ldr	r0, [r7, #28]
 8008f20:	f7ff fbad 	bl	800867e <_ZNK6tflite13Pool2DOptions7paddingEv>
 8008f24:	4603      	mov	r3, r0
 8008f26:	461d      	mov	r5, r3
 8008f28:	f107 0310 	add.w	r3, r7, #16
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 fb78 	bl	8009622 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008f32:	4604      	mov	r4, r0
 8008f34:	4628      	mov	r0, r5
 8008f36:	f7ff fdc7 	bl	8008ac8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 8008f3e:	f107 0310 	add.w	r3, r7, #16
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fb6d 	bl	8009622 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008f48:	4604      	mov	r4, r0
 8008f4a:	69f8      	ldr	r0, [r7, #28]
 8008f4c:	f7ff fba7 	bl	800869e <_ZNK6tflite13Pool2DOptions8stride_wEv>
 8008f50:	4603      	mov	r3, r0
 8008f52:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 8008f54:	f107 0310 	add.w	r3, r7, #16
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 fb62 	bl	8009622 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008f5e:	4604      	mov	r4, r0
 8008f60:	69f8      	ldr	r0, [r7, #28]
 8008f62:	f7ff fbab 	bl	80086bc <_ZNK6tflite13Pool2DOptions8stride_hEv>
 8008f66:	4603      	mov	r3, r0
 8008f68:	60a3      	str	r3, [r4, #8]
    params->filter_width = schema_params->filter_width();
 8008f6a:	f107 0310 	add.w	r3, r7, #16
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 fb57 	bl	8009622 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008f74:	4604      	mov	r4, r0
 8008f76:	69f8      	ldr	r0, [r7, #28]
 8008f78:	f7ff fbaf 	bl	80086da <_ZNK6tflite13Pool2DOptions12filter_widthEv>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	60e3      	str	r3, [r4, #12]
    params->filter_height = schema_params->filter_height();
 8008f80:	f107 0310 	add.w	r3, r7, #16
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 fb4c 	bl	8009622 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	69f8      	ldr	r0, [r7, #28]
 8008f8e:	f7ff fbb3 	bl	80086f8 <_ZNK6tflite13Pool2DOptions13filter_heightEv>
 8008f92:	4603      	mov	r3, r0
 8008f94:	6123      	str	r3, [r4, #16]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8008f96:	69f8      	ldr	r0, [r7, #28]
 8008f98:	f7ff fbbd 	bl	8008716 <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	461d      	mov	r5, r3
    params->activation =
 8008fa0:	f107 0310 	add.w	r3, r7, #16
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 fb3c 	bl	8009622 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008faa:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8008fac:	4628      	mov	r0, r5
 8008fae:	f7ff fd5f 	bl	8008a70 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8008fb2:	4603      	mov	r3, r0
    params->activation =
 8008fb4:	7523      	strb	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8008fb6:	f107 0310 	add.w	r3, r7, #16
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fb3d 	bl	800963a <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008fc6:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLitePoolParams>();
 8008fc8:	f107 0310 	add.w	r3, r7, #16
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 faf9 	bl	80095c4 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8008fd2:	4623      	mov	r3, r4
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3720      	adds	r7, #32
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bdb0      	pop	{r4, r5, r7, pc}
 8008fdc:	08026530 	.word	0x08026530
 8008fe0:	080264d0 	.word	0x080264d0
 8008fe4:	08026518 	.word	0x08026518

08008fe8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8008fe8:	b590      	push	{r4, r7, lr}
 8008fea:	b08d      	sub	sp, #52	; 0x34
 8008fec:	af02      	add	r7, sp, #8
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
 8008ff4:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	68b9      	ldr	r1, [r7, #8]
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7ff fcd9 	bl	80089b4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8009002:	f107 0318 	add.w	r3, r7, #24
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	4618      	mov	r0, r3
 800900a:	f7ff fcc4 	bl	8008996 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 800900e:	f107 0310 	add.w	r3, r7, #16
 8009012:	f107 0218 	add.w	r2, r7, #24
 8009016:	4611      	mov	r1, r2
 8009018:	4618      	mov	r0, r3
 800901a:	f000 fb22 	bl	8009662 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800901e:	f107 0310 	add.w	r3, r7, #16
 8009022:	2100      	movs	r1, #0
 8009024:	4618      	mov	r0, r3
 8009026:	f000 fb5c 	bl	80096e2 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800902a:	4603      	mov	r3, r0
 800902c:	f083 0301 	eor.w	r3, r3, #1
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00c      	beq.n	8009050 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8009036:	4b27      	ldr	r3, [pc, #156]	; (80090d4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>)
 8009038:	9301      	str	r3, [sp, #4]
 800903a:	f240 63b1 	movw	r3, #1713	; 0x6b1
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	4b25      	ldr	r3, [pc, #148]	; (80090d8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 8009042:	4a26      	ldr	r2, [pc, #152]	; (80090dc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 8009044:	68b9      	ldr	r1, [r7, #8]
 8009046:	68b8      	ldr	r0, [r7, #8]
 8009048:	f7ff fa67 	bl	800851a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800904c:	2401      	movs	r4, #1
 800904e:	e037      	b.n	80090c0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f7ff fc6a 	bl	800892a <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 8009056:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	2b00      	cmp	r3, #0
 800905c:	d027      	beq.n	80090ae <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
 800905e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009060:	f7ff fbe8 	bl	8008834 <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 8009064:	6238      	str	r0, [r7, #32]
    if (new_shape != nullptr) {
 8009066:	6a3b      	ldr	r3, [r7, #32]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d020      	beq.n	80090ae <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
      TF_LITE_ENSURE_STATUS(
 800906c:	f107 0310 	add.w	r3, r7, #16
 8009070:	4618      	mov	r0, r3
 8009072:	f000 fb43 	bl	80096fc <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009076:	4603      	mov	r3, r0
 8009078:	461a      	mov	r2, r3
 800907a:	4b19      	ldr	r3, [pc, #100]	; (80090e0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	6a39      	ldr	r1, [r7, #32]
 8009082:	2020      	movs	r0, #32
 8009084:	f7ff fcb6 	bl	80089f4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 8009088:	4603      	mov	r3, r0
 800908a:	77fb      	strb	r3, [r7, #31]
 800908c:	7ffb      	ldrb	r3, [r7, #31]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
 8009092:	7ffc      	ldrb	r4, [r7, #31]
 8009094:	e014      	b.n	80090c0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
 8009096:	6a38      	ldr	r0, [r7, #32]
 8009098:	f000 f968 	bl	800936c <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800909c:	4604      	mov	r4, r0
 800909e:	f107 0310 	add.w	r3, r7, #16
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 fb2a 	bl	80096fc <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80090a8:	4603      	mov	r3, r0
 80090aa:	4622      	mov	r2, r4
 80090ac:	621a      	str	r2, [r3, #32]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80090ae:	f107 0310 	add.w	r3, r7, #16
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 fb2e 	bl	8009714 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80090b8:	4602      	mov	r2, r0
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80090be:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 80090c0:	f107 0310 	add.w	r3, r7, #16
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 faea 	bl	800969e <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80090ca:	4623      	mov	r3, r4
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	372c      	adds	r7, #44	; 0x2c
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd90      	pop	{r4, r7, pc}
 80090d4:	08026530 	.word	0x08026530
 80090d8:	080264d0 	.word	0x080264d0
 80090dc:	08026518 	.word	0x08026518
 80090e0:	08026600 	.word	0x08026600

080090e4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 80090e4:	b590      	push	{r4, r7, lr}
 80090e6:	b08b      	sub	sp, #44	; 0x2c
 80090e8:	af02      	add	r7, sp, #8
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
 80090f0:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	68b9      	ldr	r1, [r7, #8]
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f7ff fc5b 	bl	80089b4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80090fe:	f107 0318 	add.w	r3, r7, #24
 8009102:	6879      	ldr	r1, [r7, #4]
 8009104:	4618      	mov	r0, r3
 8009106:	f7ff fc46 	bl	8008996 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 800910a:	f107 0310 	add.w	r3, r7, #16
 800910e:	f107 0218 	add.w	r2, r7, #24
 8009112:	4611      	mov	r1, r2
 8009114:	4618      	mov	r0, r3
 8009116:	f000 fb11 	bl	800973c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800911a:	f107 0310 	add.w	r3, r7, #16
 800911e:	2100      	movs	r1, #0
 8009120:	4618      	mov	r0, r3
 8009122:	f000 fb4b 	bl	80097bc <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8009126:	4603      	mov	r3, r0
 8009128:	f083 0301 	eor.w	r3, r3, #1
 800912c:	b2db      	uxtb	r3, r3
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00c      	beq.n	800914c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8009132:	4b1a      	ldr	r3, [pc, #104]	; (800919c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 8009134:	9301      	str	r3, [sp, #4]
 8009136:	f240 733a 	movw	r3, #1850	; 0x73a
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	4b18      	ldr	r3, [pc, #96]	; (80091a0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 800913e:	4a19      	ldr	r2, [pc, #100]	; (80091a4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 8009140:	68b9      	ldr	r1, [r7, #8]
 8009142:	68b8      	ldr	r0, [r7, #8]
 8009144:	f7ff f9e9 	bl	800851a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8009148:	2401      	movs	r4, #1
 800914a:	e01c      	b.n	8009186 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f7ff fbd8 	bl	8008902 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 8009152:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00c      	beq.n	8009174 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    params->beta = schema_params->beta();
 800915a:	f107 0310 	add.w	r3, r7, #16
 800915e:	4618      	mov	r0, r3
 8009160:	f000 fb39 	bl	80097d6 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009164:	4604      	mov	r4, r0
 8009166:	69f8      	ldr	r0, [r7, #28]
 8009168:	f7ff fb50 	bl	800880c <_ZNK6tflite14SoftmaxOptions4betaEv>
 800916c:	eef0 7a40 	vmov.f32	s15, s0
 8009170:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8009174:	f107 0310 	add.w	r3, r7, #16
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fb38 	bl	80097ee <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800917e:	4602      	mov	r2, r0
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8009184:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 8009186:	f107 0310 	add.w	r3, r7, #16
 800918a:	4618      	mov	r0, r3
 800918c:	f000 faf4 	bl	8009778 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8009190:	4623      	mov	r3, r4
}
 8009192:	4618      	mov	r0, r3
 8009194:	3724      	adds	r7, #36	; 0x24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd90      	pop	{r4, r7, pc}
 800919a:	bf00      	nop
 800919c:	08026530 	.word	0x08026530
 80091a0:	080264d0 	.word	0x080264d0
 80091a4:	08026518 	.word	0x08026518

080091a8 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 80091b0:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 80091be:	b580      	push	{r7, lr}
 80091c0:	b082      	sub	sp, #8
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	881b      	ldrh	r3, [r3, #0]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 fb2e 	bl	800982c <_ZN11flatbuffers12EndianScalarItEET_S1_>
 80091d0:	4603      	mov	r3, r0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7ff ffde 	bl	80091a8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80091ec:	4603      	mov	r3, r0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b082      	sub	sp, #8
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 fb07 	bl	8009816 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8009208:	4603      	mov	r3, r0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	4618      	mov	r0, r3
 8009220:	f000 fb10 	bl	8009844 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 8009224:	4603      	mov	r3, r0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	460b      	mov	r3, r1
 8009238:	807b      	strh	r3, [r7, #2]
 800923a:	4613      	mov	r3, r2
 800923c:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 800923e:	887b      	ldrh	r3, [r7, #2]
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff f99f 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009248:	4603      	mov	r3, r0
 800924a:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800924c:	89fb      	ldrh	r3, [r7, #14]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d007      	beq.n	8009262 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	89fb      	ldrh	r3, [r7, #14]
 8009256:	4413      	add	r3, r2
 8009258:	4618      	mov	r0, r3
 800925a:	f7ff ffda 	bl	8009212 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 800925e:	4603      	mov	r3, r0
 8009260:	e000      	b.n	8009264 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 8009262:	787b      	ldrb	r3, [r7, #1]
  }
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009278:	887b      	ldrh	r3, [r7, #2]
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 faed 	bl	800985c <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 8009282:	4603      	mov	r3, r0
  }
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	460b      	mov	r3, r1
 8009296:	607a      	str	r2, [r7, #4]
 8009298:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 800929a:	897b      	ldrh	r3, [r7, #10]
 800929c:	4619      	mov	r1, r3
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f7ff f971 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80092a4:	4603      	mov	r3, r0
 80092a6:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80092a8:	8afb      	ldrh	r3, [r7, #22]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d007      	beq.n	80092be <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	8afb      	ldrh	r3, [r7, #22]
 80092b2:	4413      	add	r3, r2
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7ff ff9e 	bl	80091f6 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 80092ba:	4603      	mov	r3, r0
 80092bc:	e000      	b.n	80092c0 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 80092be:	687b      	ldr	r3, [r7, #4]
  }
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80092d4:	887b      	ldrh	r3, [r7, #2]
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fadf 	bl	800989c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80092de:	4603      	mov	r3, r0
  }
 80092e0:	4618      	mov	r0, r3
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	460b      	mov	r3, r1
 80092f2:	807b      	strh	r3, [r7, #2]
 80092f4:	4613      	mov	r3, r2
 80092f6:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 80092f8:	887b      	ldrh	r3, [r7, #2]
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7ff f942 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009302:	4603      	mov	r3, r0
 8009304:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8009306:	89fb      	ldrh	r3, [r7, #14]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d007      	beq.n	800931c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	89fb      	ldrh	r3, [r7, #14]
 8009310:	4413      	add	r3, r2
 8009312:	4618      	mov	r0, r3
 8009314:	f000 fae2 	bl	80098dc <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8009318:	4603      	mov	r3, r0
 800931a:	e001      	b.n	8009320 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 800931c:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	460b      	mov	r3, r1
 8009332:	ed87 0a01 	vstr	s0, [r7, #4]
 8009336:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8009338:	897b      	ldrh	r3, [r7, #10]
 800933a:	4619      	mov	r1, r3
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f7ff f922 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009342:	4603      	mov	r3, r0
 8009344:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8009346:	8afb      	ldrh	r3, [r7, #22]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d008      	beq.n	800935e <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	8afb      	ldrh	r3, [r7, #22]
 8009350:	4413      	add	r3, r2
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fad1 	bl	80098fa <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 8009358:	eef0 7a40 	vmov.f32	s15, s0
 800935c:	e001      	b.n	8009362 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 800935e:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 8009362:	eeb0 0a67 	vmov.f32	s0, s15
 8009366:	3718      	adds	r7, #24
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4618      	mov	r0, r3
 800937a:	f7ff ff15 	bl	80091a8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800937e:	4603      	mov	r3, r0
 8009380:	4618      	mov	r0, r3
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7ff ffea 	bl	800936c <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009398:	4602      	mov	r2, r0
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	4293      	cmp	r3, r2
 800939e:	d306      	bcc.n	80093ae <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 80093a0:	4b09      	ldr	r3, [pc, #36]	; (80093c8 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 80093a2:	4a0a      	ldr	r2, [pc, #40]	; (80093cc <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 80093a4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80093a8:	4809      	ldr	r0, [pc, #36]	; (80093d0 <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 80093aa:	f01b fd8f 	bl	8024ecc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fac7 	bl	8009942 <_ZNK11flatbuffers6VectorIlE4DataEv>
 80093b4:	4603      	mov	r3, r0
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 fab0 	bl	800991e <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 80093be:	4603      	mov	r3, r0
  }
 80093c0:	4618      	mov	r0, r3
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	08026610 	.word	0x08026610
 80093cc:	0802661c 	.word	0x0802661c
 80093d0:	080266ec 	.word	0x080266ec

080093d4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80093d4:	b590      	push	{r4, r7, lr}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 fac4 	bl	8009970 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>
 80093e8:	4604      	mov	r4, r0
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	f107 030c 	add.w	r3, r7, #12
 80093f2:	4611      	mov	r1, r2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7ff faac 	bl	8008952 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 80093fa:	f107 030c 	add.w	r3, r7, #12
 80093fe:	461a      	mov	r2, r3
 8009400:	4621      	mov	r1, r4
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fad3 	bl	80099ae <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	bd90      	pop	{r4, r7, pc}

08009410 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8009410:	b590      	push	{r4, r7, lr}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4618      	mov	r0, r3
 800941c:	f000 fadc 	bl	80099d8 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009420:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00c      	beq.n	8009444 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fae1 	bl	80099f2 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009430:	4604      	mov	r4, r0
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 faea 	bl	8009a0c <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8009438:	4603      	mov	r3, r0
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4619      	mov	r1, r3
 800943e:	4620      	mov	r0, r4
 8009440:	f7ff fa96 	bl	8008970 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	601a      	str	r2, [r3, #0]
      }
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	bd90      	pop	{r4, r7, pc}

08009454 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 faf5 	bl	8009a4e <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009464:	4603      	mov	r3, r0
 8009466:	4618      	mov	r0, r3
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
	return get();
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fafa 	bl	8009a70 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800947c:	4603      	mov	r3, r0
      }
 800947e:	4618      	mov	r0, r3
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009486:	b580      	push	{r7, lr}
 8009488:	b084      	sub	sp, #16
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 faee 	bl	8009a70 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009494:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4618      	mov	r0, r3
 800949a:	f000 fa9d 	bl	80099d8 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800949e:	4603      	mov	r3, r0
 80094a0:	2200      	movs	r2, #0
 80094a2:	601a      	str	r2, [r3, #0]
	return __p;
 80094a4:	68fb      	ldr	r3, [r7, #12]
      }
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80094ae:	b590      	push	{r4, r7, lr}
 80094b0:	b085      	sub	sp, #20
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 fae4 	bl	8009a8a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>
 80094c2:	4604      	mov	r4, r0
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	f107 030c 	add.w	r3, r7, #12
 80094cc:	4611      	mov	r1, r2
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7ff fa3f 	bl	8008952 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 80094d4:	f107 030c 	add.w	r3, r7, #12
 80094d8:	461a      	mov	r2, r3
 80094da:	4621      	mov	r1, r4
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 faf4 	bl	8009aca <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd90      	pop	{r4, r7, pc}

080094ea <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 80094ea:	b590      	push	{r4, r7, lr}
 80094ec:	b085      	sub	sp, #20
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 fafd 	bl	8009af4 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80094fa:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00c      	beq.n	800951e <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fb02 	bl	8009b0e <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800950a:	4604      	mov	r4, r0
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f000 fb0b 	bl	8009b28 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8009512:	4603      	mov	r3, r0
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4619      	mov	r1, r3
 8009518:	4620      	mov	r0, r4
 800951a:	f7ff fa29 	bl	8008970 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	601a      	str	r2, [r3, #0]
      }
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4618      	mov	r0, r3
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	bd90      	pop	{r4, r7, pc}

0800952e <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800952e:	b580      	push	{r7, lr}
 8009530:	b082      	sub	sp, #8
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fb16 	bl	8009b6a <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800953e:	4603      	mov	r3, r0
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
	return get();
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fb1b 	bl	8009b8c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009556:	4603      	mov	r3, r0
      }
 8009558:	4618      	mov	r0, r3
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fb0f 	bl	8009b8c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800956e:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4618      	mov	r0, r3
 8009574:	f000 fabe 	bl	8009af4 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009578:	4603      	mov	r3, r0
 800957a:	2200      	movs	r2, #0
 800957c:	601a      	str	r2, [r3, #0]
	return __p;
 800957e:	68fb      	ldr	r3, [r7, #12]
      }
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009588:	b590      	push	{r4, r7, lr}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009596:	4618      	mov	r0, r3
 8009598:	f000 fb05 	bl	8009ba6 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>
 800959c:	4604      	mov	r4, r0
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	f107 030c 	add.w	r3, r7, #12
 80095a6:	4611      	mov	r1, r2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff f9d2 	bl	8008952 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 80095ae:	f107 030c 	add.w	r3, r7, #12
 80095b2:	461a      	mov	r2, r3
 80095b4:	4621      	mov	r1, r4
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fb12 	bl	8009be0 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	3714      	adds	r7, #20
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd90      	pop	{r4, r7, pc}

080095c4 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 80095c4:	b590      	push	{r4, r7, lr}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 fb1b 	bl	8009c0a <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80095d4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00c      	beq.n	80095f8 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fb20 	bl	8009c24 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 80095e4:	4604      	mov	r4, r0
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f000 fb29 	bl	8009c3e <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80095ec:	4603      	mov	r3, r0
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4619      	mov	r1, r3
 80095f2:	4620      	mov	r0, r4
 80095f4:	f7ff f9bc 	bl	8008970 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	601a      	str	r2, [r3, #0]
      }
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4618      	mov	r0, r3
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	bd90      	pop	{r4, r7, pc}

08009608 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fb34 	bl	8009c80 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009618:	4603      	mov	r3, r0
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009622:	b580      	push	{r7, lr}
 8009624:	b082      	sub	sp, #8
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
	return get();
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fb39 	bl	8009ca2 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009630:	4603      	mov	r3, r0
      }
 8009632:	4618      	mov	r0, r3
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fb2d 	bl	8009ca2 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009648:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4618      	mov	r0, r3
 800964e:	f000 fadc 	bl	8009c0a <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009652:	4603      	mov	r3, r0
 8009654:	2200      	movs	r2, #0
 8009656:	601a      	str	r2, [r3, #0]
	return __p;
 8009658:	68fb      	ldr	r3, [r7, #12]
      }
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009662:	b590      	push	{r4, r7, lr}
 8009664:	b085      	sub	sp, #20
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009670:	4618      	mov	r0, r3
 8009672:	f000 fb23 	bl	8009cbc <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 8009676:	4604      	mov	r4, r0
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	f107 030c 	add.w	r3, r7, #12
 8009680:	4611      	mov	r1, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f7ff f965 	bl	8008952 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009688:	f107 030c 	add.w	r3, r7, #12
 800968c:	461a      	mov	r2, r3
 800968e:	4621      	mov	r1, r4
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 fb30 	bl	8009cf6 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	bd90      	pop	{r4, r7, pc}

0800969e <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800969e:	b590      	push	{r4, r7, lr}
 80096a0:	b085      	sub	sp, #20
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 fb39 	bl	8009d20 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80096ae:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00c      	beq.n	80096d2 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fb3e 	bl	8009d3a <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 80096be:	4604      	mov	r4, r0
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f000 fb47 	bl	8009d54 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80096c6:	4603      	mov	r3, r0
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4619      	mov	r1, r3
 80096cc:	4620      	mov	r0, r4
 80096ce:	f7ff f94f 	bl	8008970 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	601a      	str	r2, [r3, #0]
      }
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4618      	mov	r0, r3
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd90      	pop	{r4, r7, pc}

080096e2 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b082      	sub	sp, #8
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fb52 	bl	8009d96 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80096f2:	4603      	mov	r3, r0
 80096f4:	4618      	mov	r0, r3
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
	return get();
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fb57 	bl	8009db8 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800970a:	4603      	mov	r3, r0
      }
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fb4b 	bl	8009db8 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009722:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 fafa 	bl	8009d20 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800972c:	4603      	mov	r3, r0
 800972e:	2200      	movs	r2, #0
 8009730:	601a      	str	r2, [r3, #0]
	return __p;
 8009732:	68fb      	ldr	r3, [r7, #12]
      }
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800973c:	b590      	push	{r4, r7, lr}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800974a:	4618      	mov	r0, r3
 800974c:	f000 fb41 	bl	8009dd2 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 8009750:	4604      	mov	r4, r0
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	f107 030c 	add.w	r3, r7, #12
 800975a:	4611      	mov	r1, r2
 800975c:	4618      	mov	r0, r3
 800975e:	f7ff f8f8 	bl	8008952 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009762:	f107 030c 	add.w	r3, r7, #12
 8009766:	461a      	mov	r2, r3
 8009768:	4621      	mov	r1, r4
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fb4a 	bl	8009e04 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	bd90      	pop	{r4, r7, pc}

08009778 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009778:	b590      	push	{r4, r7, lr}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4618      	mov	r0, r3
 8009784:	f000 fb53 	bl	8009e2e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009788:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00c      	beq.n	80097ac <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fb58 	bl	8009e48 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009798:	4604      	mov	r4, r0
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 fb61 	bl	8009e62 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80097a0:	4603      	mov	r3, r0
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4619      	mov	r1, r3
 80097a6:	4620      	mov	r0, r4
 80097a8:	f7ff f8e2 	bl	8008970 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	601a      	str	r2, [r3, #0]
      }
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4618      	mov	r0, r3
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd90      	pop	{r4, r7, pc}

080097bc <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fb6c 	bl	8009ea4 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80097cc:	4603      	mov	r3, r0
 80097ce:	4618      	mov	r0, r3
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b082      	sub	sp, #8
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
	return get();
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fb71 	bl	8009ec6 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80097e4:	4603      	mov	r3, r0
      }
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fb65 	bl	8009ec6 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80097fc:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4618      	mov	r0, r3
 8009802:	f000 fb14 	bl	8009e2e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009806:	4603      	mov	r3, r0
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]
	return __p;
 800980c:	68fb      	ldr	r3, [r7, #12]
      }
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8009816:	b480      	push	{r7}
 8009818:	b083      	sub	sp, #12
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
    return t;
 800981e:	687b      	ldr	r3, [r7, #4]
}
 8009820:	4618      	mov	r0, r3
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	4603      	mov	r3, r0
 8009834:	80fb      	strh	r3, [r7, #6]
    return t;
 8009836:	88fb      	ldrh	r3, [r7, #6]
}
 8009838:	4618      	mov	r0, r3
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	71fb      	strb	r3, [r7, #7]
    return t;
 800984e:	79fb      	ldrb	r3, [r7, #7]
}
 8009850:	4618      	mov	r0, r3
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8009868:	887b      	ldrh	r3, [r7, #2]
 800986a:	4619      	mov	r1, r3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7fe fe8a 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009872:	4603      	mov	r3, r0
 8009874:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	89fb      	ldrh	r3, [r7, #14]
 800987a:	4413      	add	r3, r2
 800987c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800987e:	89fb      	ldrh	r3, [r7, #14]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d006      	beq.n	8009892 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 8009884:	68b8      	ldr	r0, [r7, #8]
 8009886:	f7ff fca8 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800988a:	4602      	mov	r2, r0
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	4413      	add	r3, r2
                        : nullptr;
 8009890:	e000      	b.n	8009894 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009892:	2300      	movs	r3, #0
  }
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	460b      	mov	r3, r1
 80098a6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80098a8:	887b      	ldrh	r3, [r7, #2]
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7fe fe6a 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80098b2:	4603      	mov	r3, r0
 80098b4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	89fb      	ldrh	r3, [r7, #14]
 80098ba:	4413      	add	r3, r2
 80098bc:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80098be:	89fb      	ldrh	r3, [r7, #14]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d006      	beq.n	80098d2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 80098c4:	68b8      	ldr	r0, [r7, #8]
 80098c6:	f7ff fc88 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80098ca:	4602      	mov	r2, r0
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	4413      	add	r3, r2
                        : nullptr;
 80098d0:	e000      	b.n	80098d4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80098d2:	2300      	movs	r3, #0
  }
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f993 3000 	ldrsb.w	r3, [r3]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 faf8 	bl	8009ee0 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 80098f0:	4603      	mov	r3, r0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b082      	sub	sp, #8
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	edd3 7a00 	vldr	s15, [r3]
 8009908:	eeb0 0a67 	vmov.f32	s0, s15
 800990c:	f000 faf5 	bl	8009efa <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8009910:	eef0 7a40 	vmov.f32	s15, s0
}
 8009914:	eeb0 0a67 	vmov.f32	s0, s15
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800991e:	b580      	push	{r7, lr}
 8009920:	b082      	sub	sp, #8
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	4413      	add	r3, r2
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4618      	mov	r0, r3
 8009934:	f7ff ff6f 	bl	8009816 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8009938:	4603      	mov	r3, r0
  }
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	3304      	adds	r3, #4
  }
 800994e:	4618      	mov	r0, r3
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800995a:	b480      	push	{r7}
 800995c:	b083      	sub	sp, #12
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4618      	mov	r0, r3
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2204      	movs	r2, #4
 8009980:	2118      	movs	r1, #24
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	4798      	blx	r3
 8009986:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4619      	mov	r1, r3
 800998c:	2018      	movs	r0, #24
 800998e:	f7fe fdde 	bl	800854e <_ZnwjPv>
 8009992:	4601      	mov	r1, r0
 8009994:	460a      	mov	r2, r1
 8009996:	2300      	movs	r3, #0
 8009998:	6013      	str	r3, [r2, #0]
 800999a:	6053      	str	r3, [r2, #4]
 800999c:	6093      	str	r3, [r2, #8]
 800999e:	60d3      	str	r3, [r2, #12]
 80099a0:	6113      	str	r3, [r2, #16]
 80099a2:	6153      	str	r3, [r2, #20]
 80099a4:	460b      	mov	r3, r1
  }
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 80099ae:	b590      	push	{r4, r7, lr}
 80099b0:	b085      	sub	sp, #20
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	60f8      	str	r0, [r7, #12]
 80099b6:	60b9      	str	r1, [r7, #8]
 80099b8:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 80099ba:	68fc      	ldr	r4, [r7, #12]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 faab 	bl	8009f18 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 80099c2:	4603      	mov	r3, r0
 80099c4:	461a      	mov	r2, r3
 80099c6:	68b9      	ldr	r1, [r7, #8]
 80099c8:	4620      	mov	r0, r4
 80099ca:	f000 f82a 	bl	8009a22 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	4618      	mov	r0, r3
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd90      	pop	{r4, r7, pc}

080099d8 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 faa3 	bl	8009f2e <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80099e8:	4603      	mov	r3, r0
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b082      	sub	sp, #8
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 faa3 	bl	8009f48 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8009a02:	4603      	mov	r3, r0
 8009a04:	4618      	mov	r0, r3
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4618      	mov	r0, r3
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8009a22:	b590      	push	{r4, r7, lr}
 8009a24:	b085      	sub	sp, #20
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	60b9      	str	r1, [r7, #8]
 8009a2c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009a2e:	68fc      	ldr	r4, [r7, #12]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff ff92 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009a36:	4602      	mov	r2, r0
 8009a38:	f107 0308 	add.w	r3, r7, #8
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f000 fa8f 	bl	8009f62 <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4618      	mov	r0, r3
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd90      	pop	{r4, r7, pc}

08009a4e <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f80a 	bl	8009a70 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	bf14      	ite	ne
 8009a62:	2301      	movne	r3, #1
 8009a64:	2300      	moveq	r3, #0
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 fa8a 	bl	8009f94 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009a80:	4603      	mov	r3, r0
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>:
  T* AllocatePOD() {
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b084      	sub	sp, #16
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2204      	movs	r2, #4
 8009a9a:	211c      	movs	r1, #28
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	4798      	blx	r3
 8009aa0:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	201c      	movs	r0, #28
 8009aa8:	f7fe fd51 	bl	800854e <_ZnwjPv>
 8009aac:	4601      	mov	r1, r0
 8009aae:	460a      	mov	r2, r1
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	6013      	str	r3, [r2, #0]
 8009ab4:	6053      	str	r3, [r2, #4]
 8009ab6:	6093      	str	r3, [r2, #8]
 8009ab8:	60d3      	str	r3, [r2, #12]
 8009aba:	6113      	str	r3, [r2, #16]
 8009abc:	6153      	str	r3, [r2, #20]
 8009abe:	6193      	str	r3, [r2, #24]
 8009ac0:	460b      	mov	r3, r1
  }
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8009aca:	b590      	push	{r4, r7, lr}
 8009acc:	b085      	sub	sp, #20
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009ad6:	68fc      	ldr	r4, [r7, #12]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fa1d 	bl	8009f18 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	68b9      	ldr	r1, [r7, #8]
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f000 f82a 	bl	8009b3e <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd90      	pop	{r4, r7, pc}

08009af4 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 fa56 	bl	8009fb0 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8009b04:	4603      	mov	r3, r0
 8009b06:	4618      	mov	r0, r3
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b082      	sub	sp, #8
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 fa56 	bl	8009fca <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	4618      	mov	r0, r3
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4618      	mov	r0, r3
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8009b3e:	b590      	push	{r4, r7, lr}
 8009b40:	b085      	sub	sp, #20
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009b4a:	68fc      	ldr	r4, [r7, #12]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff ff04 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009b52:	4602      	mov	r2, r0
 8009b54:	f107 0308 	add.w	r3, r7, #8
 8009b58:	4619      	mov	r1, r3
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f000 fa42 	bl	8009fe4 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4618      	mov	r0, r3
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd90      	pop	{r4, r7, pc}

08009b6a <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b082      	sub	sp, #8
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f80a 	bl	8009b8c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	bf14      	ite	ne
 8009b7e:	2301      	movne	r3, #1
 8009b80:	2300      	moveq	r3, #0
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	4618      	mov	r0, r3
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f000 fa3d 	bl	800a016 <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>:
  T* AllocatePOD() {
 8009ba6:	b590      	push	{r4, r7, lr}
 8009ba8:	b085      	sub	sp, #20
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2204      	movs	r2, #4
 8009bb6:	2128      	movs	r1, #40	; 0x28
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	4798      	blx	r3
 8009bbc:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	2028      	movs	r0, #40	; 0x28
 8009bc4:	f7fe fcc3 	bl	800854e <_ZnwjPv>
 8009bc8:	4604      	mov	r4, r0
 8009bca:	4620      	mov	r0, r4
 8009bcc:	2328      	movs	r3, #40	; 0x28
 8009bce:	461a      	mov	r2, r3
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	f01b fa17 	bl	8025004 <memset>
 8009bd6:	4623      	mov	r3, r4
  }
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd90      	pop	{r4, r7, pc}

08009be0 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8009be0:	b590      	push	{r4, r7, lr}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009bec:	68fc      	ldr	r4, [r7, #12]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f992 	bl	8009f18 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	68b9      	ldr	r1, [r7, #8]
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f000 f82a 	bl	8009c54 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4618      	mov	r0, r3
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd90      	pop	{r4, r7, pc}

08009c0a <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b082      	sub	sp, #8
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f000 fa0c 	bl	800a032 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 fa0c 	bl	800a04c <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8009c34:	4603      	mov	r3, r0
 8009c36:	4618      	mov	r0, r3
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4618      	mov	r0, r3
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8009c54:	b590      	push	{r4, r7, lr}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009c60:	68fc      	ldr	r4, [r7, #12]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7ff fe79 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	f107 0308 	add.w	r3, r7, #8
 8009c6e:	4619      	mov	r1, r3
 8009c70:	4620      	mov	r0, r4
 8009c72:	f000 f9f8 	bl	800a066 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd90      	pop	{r4, r7, pc}

08009c80 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f80a 	bl	8009ca2 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	bf14      	ite	ne
 8009c94:	2301      	movne	r3, #1
 8009c96:	2300      	moveq	r3, #0
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b082      	sub	sp, #8
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f000 f9f3 	bl	800a098 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 8009cbc:	b590      	push	{r4, r7, lr}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2204      	movs	r2, #4
 8009ccc:	2124      	movs	r1, #36	; 0x24
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	4798      	blx	r3
 8009cd2:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	2024      	movs	r0, #36	; 0x24
 8009cda:	f7fe fc38 	bl	800854e <_ZnwjPv>
 8009cde:	4604      	mov	r4, r0
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	2324      	movs	r3, #36	; 0x24
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	f01b f98c 	bl	8025004 <memset>
 8009cec:	4623      	mov	r3, r4
  }
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd90      	pop	{r4, r7, pc}

08009cf6 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8009cf6:	b590      	push	{r4, r7, lr}
 8009cf8:	b085      	sub	sp, #20
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	60f8      	str	r0, [r7, #12]
 8009cfe:	60b9      	str	r1, [r7, #8]
 8009d00:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009d02:	68fc      	ldr	r4, [r7, #12]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 f907 	bl	8009f18 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	68b9      	ldr	r1, [r7, #8]
 8009d10:	4620      	mov	r0, r4
 8009d12:	f000 f82a 	bl	8009d6a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3714      	adds	r7, #20
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd90      	pop	{r4, r7, pc}

08009d20 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 f9c2 	bl	800a0b4 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8009d30:	4603      	mov	r3, r0
 8009d32:	4618      	mov	r0, r3
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 f9c2 	bl	800a0ce <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8009d6a:	b590      	push	{r4, r7, lr}
 8009d6c:	b085      	sub	sp, #20
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009d76:	68fc      	ldr	r4, [r7, #12]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7ff fdee 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	f107 0308 	add.w	r3, r7, #8
 8009d84:	4619      	mov	r1, r3
 8009d86:	4620      	mov	r0, r4
 8009d88:	f000 f9ae 	bl	800a0e8 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd90      	pop	{r4, r7, pc}

08009d96 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f80a 	bl	8009db8 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	bf14      	ite	ne
 8009daa:	2301      	movne	r3, #1
 8009dac:	2300      	moveq	r3, #0
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	4618      	mov	r0, r3
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 f9a9 	bl	800a11a <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b084      	sub	sp, #16
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2204      	movs	r2, #4
 8009de2:	2104      	movs	r1, #4
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	4798      	blx	r3
 8009de8:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	4619      	mov	r1, r3
 8009dee:	2004      	movs	r0, #4
 8009df0:	f7fe fbad 	bl	800854e <_ZnwjPv>
 8009df4:	4603      	mov	r3, r0
 8009df6:	f04f 0200 	mov.w	r2, #0
 8009dfa:	601a      	str	r2, [r3, #0]
  }
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8009e04:	b590      	push	{r4, r7, lr}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009e10:	68fc      	ldr	r4, [r7, #12]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f880 	bl	8009f18 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	68b9      	ldr	r1, [r7, #8]
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f000 f82a 	bl	8009e78 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	4618      	mov	r0, r3
 8009e28:	3714      	adds	r7, #20
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd90      	pop	{r4, r7, pc}

08009e2e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b082      	sub	sp, #8
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 f97c 	bl	800a136 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	4618      	mov	r0, r3
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 f97c 	bl	800a150 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8009e78:	b590      	push	{r4, r7, lr}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009e84:	68fc      	ldr	r4, [r7, #12]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7ff fd67 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	f107 0308 	add.w	r3, r7, #8
 8009e92:	4619      	mov	r1, r3
 8009e94:	4620      	mov	r0, r4
 8009e96:	f000 f968 	bl	800a16a <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd90      	pop	{r4, r7, pc}

08009ea4 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f80a 	bl	8009ec6 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	bf14      	ite	ne
 8009eb8:	2301      	movne	r3, #1
 8009eba:	2300      	moveq	r3, #0
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f000 f963 	bl	800a19c <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	71fb      	strb	r3, [r7, #7]
    return t;
 8009eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8009efa:	b480      	push	{r7}
 8009efc:	b083      	sub	sp, #12
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	ee07 3a90 	vmov	s15, r3
}
 8009f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4618      	mov	r0, r3
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b082      	sub	sp, #8
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f000 f93d 	bl	800a1b8 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	4618      	mov	r0, r3
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f000 f93c 	bl	800a1d0 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8009f62:	b5b0      	push	{r4, r5, r7, lr}
 8009f64:	b084      	sub	sp, #16
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	60f8      	str	r0, [r7, #12]
 8009f6a:	60b9      	str	r1, [r7, #8]
 8009f6c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8009f6e:	68fc      	ldr	r4, [r7, #12]
 8009f70:	68b8      	ldr	r0, [r7, #8]
 8009f72:	f000 f93a 	bl	800a1ea <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8009f76:	4605      	mov	r5, r0
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7ff fcee 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	461a      	mov	r2, r3
 8009f82:	4629      	mov	r1, r5
 8009f84:	4620      	mov	r0, r4
 8009f86:	f000 f93b 	bl	800a200 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bdb0      	pop	{r4, r5, r7, pc}

08009f94 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 f94c 	bl	800a23c <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 f94b 	bl	800a256 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b082      	sub	sp, #8
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f000 f94a 	bl	800a26e <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8009fe4:	b5b0      	push	{r4, r5, r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8009ff0:	68fc      	ldr	r4, [r7, #12]
 8009ff2:	68b8      	ldr	r0, [r7, #8]
 8009ff4:	f000 f948 	bl	800a288 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8009ff8:	4605      	mov	r5, r0
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff fcad 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a000:	4603      	mov	r3, r0
 800a002:	461a      	mov	r2, r3
 800a004:	4629      	mov	r1, r5
 800a006:	4620      	mov	r0, r4
 800a008:	f000 f949 	bl	800a29e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bdb0      	pop	{r4, r5, r7, pc}

0800a016 <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a016:	b580      	push	{r7, lr}
 800a018:	b082      	sub	sp, #8
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4618      	mov	r0, r3
 800a022:	f000 f95a 	bl	800a2da <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a026:	4603      	mov	r3, r0
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4618      	mov	r0, r3
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a032:	b580      	push	{r7, lr}
 800a034:	b082      	sub	sp, #8
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 f959 	bl	800a2f4 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a042:	4603      	mov	r3, r0
 800a044:	4618      	mov	r0, r3
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4618      	mov	r0, r3
 800a058:	f000 f958 	bl	800a30c <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a05c:	4603      	mov	r3, r0
 800a05e:	4618      	mov	r0, r3
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a066:	b5b0      	push	{r4, r5, r7, lr}
 800a068:	b084      	sub	sp, #16
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	60f8      	str	r0, [r7, #12]
 800a06e:	60b9      	str	r1, [r7, #8]
 800a070:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a072:	68fc      	ldr	r4, [r7, #12]
 800a074:	68b8      	ldr	r0, [r7, #8]
 800a076:	f000 f956 	bl	800a326 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a07a:	4605      	mov	r5, r0
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f7ff fc6c 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a082:	4603      	mov	r3, r0
 800a084:	461a      	mov	r2, r3
 800a086:	4629      	mov	r1, r5
 800a088:	4620      	mov	r0, r4
 800a08a:	f000 f957 	bl	800a33c <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bdb0      	pop	{r4, r5, r7, pc}

0800a098 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 f968 	bl	800a378 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 f967 	bl	800a392 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b082      	sub	sp, #8
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f000 f966 	bl	800a3aa <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a0e8:	b5b0      	push	{r4, r5, r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a0f4:	68fc      	ldr	r4, [r7, #12]
 800a0f6:	68b8      	ldr	r0, [r7, #8]
 800a0f8:	f000 f964 	bl	800a3c4 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7ff fc2b 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a104:	4603      	mov	r3, r0
 800a106:	461a      	mov	r2, r3
 800a108:	4629      	mov	r1, r5
 800a10a:	4620      	mov	r0, r4
 800a10c:	f000 f965 	bl	800a3da <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bdb0      	pop	{r4, r5, r7, pc}

0800a11a <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b082      	sub	sp, #8
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4618      	mov	r0, r3
 800a126:	f000 f976 	bl	800a416 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a12a:	4603      	mov	r3, r0
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4618      	mov	r0, r3
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a136:	b580      	push	{r7, lr}
 800a138:	b082      	sub	sp, #8
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4618      	mov	r0, r3
 800a142:	f000 f975 	bl	800a430 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a146:	4603      	mov	r3, r0
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 f974 	bl	800a448 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a160:	4603      	mov	r3, r0
 800a162:	4618      	mov	r0, r3
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a16a:	b5b0      	push	{r4, r5, r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	60f8      	str	r0, [r7, #12]
 800a172:	60b9      	str	r1, [r7, #8]
 800a174:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a176:	68fc      	ldr	r4, [r7, #12]
 800a178:	68b8      	ldr	r0, [r7, #8]
 800a17a:	f000 f972 	bl	800a462 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a17e:	4605      	mov	r5, r0
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff fbea 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a186:	4603      	mov	r3, r0
 800a188:	461a      	mov	r2, r3
 800a18a:	4629      	mov	r1, r5
 800a18c:	4620      	mov	r0, r4
 800a18e:	f000 f973 	bl	800a478 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bdb0      	pop	{r4, r5, r7, pc}

0800a19c <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 f984 	bl	800a4b4 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f9a3 	bl	800a50c <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f000 f977 	bl	800a4ce <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a1ea:	b480      	push	{r7}
 800a1ec:	b083      	sub	sp, #12
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a200:	b590      	push	{r4, r7, lr}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a20c:	68fc      	ldr	r4, [r7, #12]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7ff fba3 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a214:	4603      	mov	r3, r0
 800a216:	4619      	mov	r1, r3
 800a218:	4620      	mov	r0, r4
 800a21a:	f000 f964 	bl	800a4e6 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	1d1c      	adds	r4, r3, #4
 800a222:	68b8      	ldr	r0, [r7, #8]
 800a224:	f7ff ffe1 	bl	800a1ea <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a228:	4603      	mov	r3, r0
 800a22a:	4619      	mov	r1, r3
 800a22c:	4620      	mov	r0, r4
 800a22e:	f000 f97b 	bl	800a528 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	4618      	mov	r0, r3
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd90      	pop	{r4, r7, pc}

0800a23c <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4618      	mov	r0, r3
 800a248:	f000 f97f 	bl	800a54a <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a24c:	4603      	mov	r3, r0
 800a24e:	4618      	mov	r0, r3
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a256:	b580      	push	{r7, lr}
 800a258:	b082      	sub	sp, #8
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f97f 	bl	800a562 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a264:	4603      	mov	r3, r0
 800a266:	4618      	mov	r0, r3
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a26e:	b580      	push	{r7, lr}
 800a270:	b082      	sub	sp, #8
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 f928 	bl	800a4ce <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a27e:	4603      	mov	r3, r0
 800a280:	4618      	mov	r0, r3
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4618      	mov	r0, r3
 800a294:	370c      	adds	r7, #12
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a29e:	b590      	push	{r4, r7, lr}
 800a2a0:	b085      	sub	sp, #20
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	60f8      	str	r0, [r7, #12]
 800a2a6:	60b9      	str	r1, [r7, #8]
 800a2a8:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a2aa:	68fc      	ldr	r4, [r7, #12]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f7ff fb54 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f000 f915 	bl	800a4e6 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	1d1c      	adds	r4, r3, #4
 800a2c0:	68b8      	ldr	r0, [r7, #8]
 800a2c2:	f7ff ffe1 	bl	800a288 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f000 f957 	bl	800a57e <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3714      	adds	r7, #20
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd90      	pop	{r4, r7, pc}

0800a2da <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b082      	sub	sp, #8
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 f95b 	bl	800a5a0 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f95b 	bl	800a5b8 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a302:	4603      	mov	r3, r0
 800a304:	4618      	mov	r0, r3
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4618      	mov	r0, r3
 800a318:	f000 f8d9 	bl	800a4ce <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a31c:	4603      	mov	r3, r0
 800a31e:	4618      	mov	r0, r3
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a326:	b480      	push	{r7}
 800a328:	b083      	sub	sp, #12
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4618      	mov	r0, r3
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a33c:	b590      	push	{r4, r7, lr}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a348:	68fc      	ldr	r4, [r7, #12]
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7ff fb05 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a350:	4603      	mov	r3, r0
 800a352:	4619      	mov	r1, r3
 800a354:	4620      	mov	r0, r4
 800a356:	f000 f8c6 	bl	800a4e6 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	1d1c      	adds	r4, r3, #4
 800a35e:	68b8      	ldr	r0, [r7, #8]
 800a360:	f7ff ffe1 	bl	800a326 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a364:	4603      	mov	r3, r0
 800a366:	4619      	mov	r1, r3
 800a368:	4620      	mov	r0, r4
 800a36a:	f000 f933 	bl	800a5d4 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	4618      	mov	r0, r3
 800a372:	3714      	adds	r7, #20
 800a374:	46bd      	mov	sp, r7
 800a376:	bd90      	pop	{r4, r7, pc}

0800a378 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4618      	mov	r0, r3
 800a384:	f000 f937 	bl	800a5f6 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a388:	4603      	mov	r3, r0
 800a38a:	4618      	mov	r0, r3
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a392:	b580      	push	{r7, lr}
 800a394:	b082      	sub	sp, #8
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 f937 	bl	800a60e <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b082      	sub	sp, #8
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 f88a 	bl	800a4ce <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a3da:	b590      	push	{r4, r7, lr}
 800a3dc:	b085      	sub	sp, #20
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	60f8      	str	r0, [r7, #12]
 800a3e2:	60b9      	str	r1, [r7, #8]
 800a3e4:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a3e6:	68fc      	ldr	r4, [r7, #12]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff fab6 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f000 f877 	bl	800a4e6 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	1d1c      	adds	r4, r3, #4
 800a3fc:	68b8      	ldr	r0, [r7, #8]
 800a3fe:	f7ff ffe1 	bl	800a3c4 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a402:	4603      	mov	r3, r0
 800a404:	4619      	mov	r1, r3
 800a406:	4620      	mov	r0, r4
 800a408:	f000 f90f 	bl	800a62a <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	4618      	mov	r0, r3
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	bd90      	pop	{r4, r7, pc}

0800a416 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a416:	b580      	push	{r7, lr}
 800a418:	b082      	sub	sp, #8
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4618      	mov	r0, r3
 800a422:	f000 f913 	bl	800a64c <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a426:	4603      	mov	r3, r0
 800a428:	4618      	mov	r0, r3
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f913 	bl	800a664 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a43e:	4603      	mov	r3, r0
 800a440:	4618      	mov	r0, r3
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4618      	mov	r0, r3
 800a454:	f000 f83b 	bl	800a4ce <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a458:	4603      	mov	r3, r0
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a462:	b480      	push	{r7}
 800a464:	b083      	sub	sp, #12
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4618      	mov	r0, r3
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a478:	b590      	push	{r4, r7, lr}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a484:	68fc      	ldr	r4, [r7, #12]
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff fa67 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a48c:	4603      	mov	r3, r0
 800a48e:	4619      	mov	r1, r3
 800a490:	4620      	mov	r0, r4
 800a492:	f000 f828 	bl	800a4e6 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	1d1c      	adds	r4, r3, #4
 800a49a:	68b8      	ldr	r0, [r7, #8]
 800a49c:	f7ff ffe1 	bl	800a462 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f000 f8eb 	bl	800a680 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd90      	pop	{r4, r7, pc}

0800a4b4 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 f8ef 	bl	800a6a2 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b082      	sub	sp, #8
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f8ef 	bl	800a6ba <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 800a4e6:	b590      	push	{r4, r7, lr}
 800a4e8:	b083      	sub	sp, #12
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 800a4f0:	687c      	ldr	r4, [r7, #4]
 800a4f2:	6838      	ldr	r0, [r7, #0]
 800a4f4:	f7ff fa31 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f000 f8e9 	bl	800a6d4 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4618      	mov	r0, r3
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd90      	pop	{r4, r7, pc}

0800a50c <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	3304      	adds	r3, #4
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 f8ec 	bl	800a6f6 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>
 800a51e:	4603      	mov	r3, r0
 800a520:	4618      	mov	r0, r3
 800a522:	3708      	adds	r7, #8
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a532:	6838      	ldr	r0, [r7, #0]
 800a534:	f7ff fe59 	bl	800a1ea <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a538:	4603      	mov	r3, r0
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	601a      	str	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4618      	mov	r0, r3
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f8da 	bl	800a70c <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800a558:	4603      	mov	r3, r0
 800a55a:	4618      	mov	r0, r3
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	3304      	adds	r3, #4
 800a56e:	4618      	mov	r0, r3
 800a570:	f000 f8da 	bl	800a728 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>
 800a574:	4603      	mov	r3, r0
 800a576:	4618      	mov	r0, r3
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a57e:	b580      	push	{r7, lr}
 800a580:	b082      	sub	sp, #8
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a588:	6838      	ldr	r0, [r7, #0]
 800a58a:	f7ff fe7d 	bl	800a288 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a58e:	4603      	mov	r3, r0
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	601a      	str	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f8c8 	bl	800a73e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 f8c8 	bl	800a75a <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a5de:	6838      	ldr	r0, [r7, #0]
 800a5e0:	f7ff fea1 	bl	800a326 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	601a      	str	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3708      	adds	r7, #8
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b082      	sub	sp, #8
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f8b6 	bl	800a770 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800a604:	4603      	mov	r3, r0
 800a606:	4618      	mov	r0, r3
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a60e:	b580      	push	{r7, lr}
 800a610:	b082      	sub	sp, #8
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	3304      	adds	r3, #4
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 f8b6 	bl	800a78c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 800a620:	4603      	mov	r3, r0
 800a622:	4618      	mov	r0, r3
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a634:	6838      	ldr	r0, [r7, #0]
 800a636:	f7ff fec5 	bl	800a3c4 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a63a:	4603      	mov	r3, r0
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 f8a4 	bl	800a7a2 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800a65a:	4603      	mov	r3, r0
 800a65c:	4618      	mov	r0, r3
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	3304      	adds	r3, #4
 800a670:	4618      	mov	r0, r3
 800a672:	f000 f8a4 	bl	800a7be <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 800a676:	4603      	mov	r3, r0
 800a678:	4618      	mov	r0, r3
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a68a:	6838      	ldr	r0, [r7, #0]
 800a68c:	f7ff fee9 	bl	800a462 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a690:	4603      	mov	r3, r0
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	601a      	str	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4618      	mov	r0, r3
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b082      	sub	sp, #8
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f892 	bl	800a7d4 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b082      	sub	sp, #8
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f000 f893 	bl	800a7f0 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a6de:	6838      	ldr	r0, [r7, #0]
 800a6e0:	f7ff f93b 	bl	800995a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6812      	ldr	r2, [r2, #0]
 800a6ea:	601a      	str	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800a6f6:	b480      	push	{r7}
 800a6f8:	b083      	sub	sp, #12
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4618      	mov	r0, r3
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	3304      	adds	r3, #4
 800a718:	4618      	mov	r0, r3
 800a71a:	f000 f874 	bl	800a806 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>
 800a71e:	4603      	mov	r3, r0
 800a720:	4618      	mov	r0, r3
 800a722:	3708      	adds	r7, #8
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4618      	mov	r0, r3
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a73e:	b580      	push	{r7, lr}
 800a740:	b082      	sub	sp, #8
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	3304      	adds	r3, #4
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 f866 	bl	800a81c <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>
 800a750:	4603      	mov	r3, r0
 800a752:	4618      	mov	r0, r3
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800a75a:	b480      	push	{r7}
 800a75c:	b083      	sub	sp, #12
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4618      	mov	r0, r3
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	3304      	adds	r3, #4
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 f858 	bl	800a832 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>
 800a782:	4603      	mov	r3, r0
 800a784:	4618      	mov	r0, r3
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4618      	mov	r0, r3
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b082      	sub	sp, #8
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	3304      	adds	r3, #4
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 f84a 	bl	800a848 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800a7be:	b480      	push	{r7}
 800a7c0:	b083      	sub	sp, #12
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	3304      	adds	r3, #4
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 f83c 	bl	800a85e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800a806:	b480      	push	{r7}
 800a808:	b083      	sub	sp, #12
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4618      	mov	r0, r3
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>:
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4618      	mov	r0, r3
 800a828:	370c      	adds	r7, #12
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr

0800a832 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>:
 800a832:	b480      	push	{r7}
 800a834:	b083      	sub	sp, #12
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4618      	mov	r0, r3
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4618      	mov	r0, r3
 800a854:	370c      	adds	r7, #12
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 800a85e:	b480      	push	{r7}
 800a860:	b083      	sub	sp, #12
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4618      	mov	r0, r3
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 f8ca 	bl	800aa18 <_ZNK11flatbuffers6VectorIcE4DataEv>
 800a884:	4603      	mov	r3, r0
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 800a890:	b480      	push	{r7}
 800a892:	af00      	add	r7, sp, #0
  return names;
 800a894:	4b02      	ldr	r3, [pc, #8]	; (800a8a0 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 800a896:	4618      	mov	r0, r3
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr
 800a8a0:	0802be34 	.word	0x0802be34

0800a8a4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CONV_3D_TRANSPOSE)) return "";
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	72bb      	strb	r3, [r7, #10]
 800a8b2:	238d      	movs	r3, #141	; 0x8d
 800a8b4:	72fb      	strb	r3, [r7, #11]
 800a8b6:	f107 020b 	add.w	r2, r7, #11
 800a8ba:	f107 010a 	add.w	r1, r7, #10
 800a8be:	1dfb      	adds	r3, r7, #7
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 f8b5 	bl	800aa30 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d001      	beq.n	800a8d0 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 800a8cc:	4b07      	ldr	r3, [pc, #28]	; (800a8ec <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 800a8ce:	e008      	b.n	800a8e2 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 800a8d0:	79fb      	ldrb	r3, [r7, #7]
 800a8d2:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 800a8d4:	f7ff ffdc 	bl	800a890 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4413      	add	r3, r2
 800a8e0:	681b      	ldr	r3, [r3, #0]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	08026e18 	.word	0x08026e18

0800a8f0 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2106      	movs	r1, #6
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 f8b2 	bl	800aa66 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800a902:	4603      	mov	r3, r0
  }
 800a904:	4618      	mov	r0, r3
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	2108      	movs	r1, #8
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fe fcb6 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800a920:	4603      	mov	r3, r0
  }
 800a922:	4618      	mov	r0, r3
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
	...

0800a92c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b088      	sub	sp, #32
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
 800a938:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 800a93a:	2300      	movs	r3, #0
 800a93c:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	2200      	movs	r2, #0
 800a942:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f019 fffc 	bl	8024942 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800a94a:	4603      	mov	r3, r0
 800a94c:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f7ff ffdc 	bl	800a90c <_ZNK6tflite12OperatorCode7versionEv>
 800a954:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX ||
 800a956:	7fbb      	ldrb	r3, [r7, #30]
 800a958:	2b8d      	cmp	r3, #141	; 0x8d
 800a95a:	d908      	bls.n	800a96e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
 800a95c:	7fbb      	ldrb	r3, [r7, #30]
 800a95e:	461a      	mov	r2, r3
 800a960:	492a      	ldr	r1, [pc, #168]	; (800aa0c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7fd fdc0 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 800a968:	2301      	movs	r3, #1
 800a96a:	77fb      	strb	r3, [r7, #31]
 800a96c:	e048      	b.n	800aa00 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 800a96e:	7fbb      	ldrb	r3, [r7, #30]
 800a970:	2b20      	cmp	r3, #32
 800a972:	d01a      	beq.n	800a9aa <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	7fb9      	ldrb	r1, [r7, #30]
 800a97c:	69ba      	ldr	r2, [r7, #24]
 800a97e:	68b8      	ldr	r0, [r7, #8]
 800a980:	4798      	blx	r3
 800a982:	4602      	mov	r2, r0
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d137      	bne.n	800aa00 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 800a990:	7fbb      	ldrb	r3, [r7, #30]
 800a992:	4618      	mov	r0, r3
 800a994:	f7ff ff86 	bl	800a8a4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800a998:	4602      	mov	r2, r0
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	491c      	ldr	r1, [pc, #112]	; (800aa10 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7fd fda2 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'. "
          "An older version of this builtin might be supported. "
          "Are you using an old TFLite binary with a newer model?\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	77fb      	strb	r3, [r7, #31]
 800a9a8:	e02a      	b.n	800aa00 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f7ff ffa0 	bl	800a8f0 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	bf0c      	ite	eq
 800a9b6:	2301      	moveq	r3, #1
 800a9b8:	2300      	movne	r3, #0
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d006      	beq.n	800a9ce <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 800a9c0:	4914      	ldr	r1, [pc, #80]	; (800aa14 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7fd fd90 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	77fb      	strb	r3, [r7, #31]
 800a9cc:	e018      	b.n	800aa00 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f7ff ff8e 	bl	800a8f0 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7ff ff4c 	bl	800a874 <_ZNK11flatbuffers6String5c_strEv>
 800a9dc:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	3304      	adds	r3, #4
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	69ba      	ldr	r2, [r7, #24]
 800a9e8:	6979      	ldr	r1, [r7, #20]
 800a9ea:	68b8      	ldr	r0, [r7, #8]
 800a9ec:	4798      	blx	r3
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d101      	bne.n	800aa00 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 800aa00:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3720      	adds	r7, #32
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	08026e1c 	.word	0x08026e1c
 800aa10:	08026e70 	.word	0x08026e70
 800aa14:	08026f14 	.word	0x08026f14

0800aa18 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	3304      	adds	r3, #4
  }
 800aa24:	4618      	mov	r0, r3
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	781a      	ldrb	r2, [r3, #0]
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d305      	bcc.n	800aa54 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	781a      	ldrb	r2, [r3, #0]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d201      	bcs.n	800aa58 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 800aa54:	2301      	movs	r3, #1
 800aa56:	e000      	b.n	800aa5a <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b082      	sub	sp, #8
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	460b      	mov	r3, r1
 800aa70:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800aa72:	887b      	ldrh	r3, [r7, #2]
 800aa74:	4619      	mov	r1, r3
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f805 	bl	800aa86 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800aa7c:	4603      	mov	r3, r0
  }
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b084      	sub	sp, #16
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	460b      	mov	r3, r1
 800aa90:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800aa92:	887b      	ldrh	r3, [r7, #2]
 800aa94:	4619      	mov	r1, r3
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f7fd fd75 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	89fb      	ldrh	r3, [r7, #14]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800aaa8:	89fb      	ldrh	r3, [r7, #14]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d006      	beq.n	800aabc <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 800aaae:	68b8      	ldr	r0, [r7, #8]
 800aab0:	f7fe fb93 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800aab4:	4602      	mov	r2, r0
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	4413      	add	r3, r2
                        : nullptr;
 800aaba:	e000      	b.n	800aabe <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800aabc:	2300      	movs	r3, #0
  }
 800aabe:	4618      	mov	r0, r3
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b082      	sub	sp, #8
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	ed87 0a01 	vstr	s0, [r7, #4]
 800aad0:	ed97 0a01 	vldr	s0, [r7, #4]
 800aad4:	f01a f8ae 	bl	8024c34 <roundf>
 800aad8:	eef0 7a40 	vmov.f32	s15, s0
 800aadc:	eeb0 0a67 	vmov.f32	s0, s15
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800aae6:	b480      	push	{r7}
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800aaee:	4618      	mov	r0, r3
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 800aaf8:	b5b0      	push	{r4, r5, r7, lr}
 800aafa:	b088      	sub	sp, #32
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	ed87 0b02 	vstr	d0, [r7, #8]
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800ab06:	f04f 0200 	mov.w	r2, #0
 800ab0a:	f04f 0300 	mov.w	r3, #0
 800ab0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab12:	f7f6 f80b 	bl	8000b2c <__aeabi_dcmpeq>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d006      	beq.n	800ab2a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	2200      	movs	r2, #0
 800ab26:	601a      	str	r2, [r3, #0]
    return;
 800ab28:	e06b      	b.n	800ac02 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800ab2a:	6838      	ldr	r0, [r7, #0]
 800ab2c:	ed97 0b02 	vldr	d0, [r7, #8]
 800ab30:	f01a f802 	bl	8024b38 <frexp>
 800ab34:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 800ab38:	f04f 0200 	mov.w	r2, #0
 800ab3c:	4b32      	ldr	r3, [pc, #200]	; (800ac08 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 800ab3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ab42:	f7f5 fd8b 	bl	800065c <__aeabi_dmul>
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	ec43 2b17 	vmov	d7, r2, r3
 800ab4e:	eeb0 0a47 	vmov.f32	s0, s14
 800ab52:	eef0 0a67 	vmov.f32	s1, s15
 800ab56:	f000 f978 	bl	800ae4a <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800ab5a:	ec53 2b10 	vmov	r2, r3, d0
 800ab5e:	4610      	mov	r0, r2
 800ab60:	4619      	mov	r1, r3
 800ab62:	f7f6 f8a5 	bl	8000cb0 <__aeabi_d2lz>
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 800ab6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab72:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ab76:	f04f 0100 	mov.w	r1, #0
 800ab7a:	4290      	cmp	r0, r2
 800ab7c:	eb71 0303 	sbcs.w	r3, r1, r3
 800ab80:	da01      	bge.n	800ab86 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 800ab82:	f01a f99c 	bl	8024ebe <abort>
  if (q_fixed == (1ll << 31)) {
 800ab86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	bf08      	it	eq
 800ab8e:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 800ab92:	d117      	bne.n	800abc4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 800ab94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab98:	0fd9      	lsrs	r1, r3, #31
 800ab9a:	4608      	mov	r0, r1
 800ab9c:	f04f 0100 	mov.w	r1, #0
 800aba0:	1884      	adds	r4, r0, r2
 800aba2:	eb41 0503 	adc.w	r5, r1, r3
 800aba6:	f04f 0200 	mov.w	r2, #0
 800abaa:	f04f 0300 	mov.w	r3, #0
 800abae:	0862      	lsrs	r2, r4, #1
 800abb0:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800abb4:	106b      	asrs	r3, r5, #1
 800abb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	1c5a      	adds	r2, r3, #1
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800abc4:	f7ff ff8f 	bl	800aae6 <_ZNSt14numeric_limitsIlE3maxEv>
 800abc8:	4603      	mov	r3, r0
 800abca:	4618      	mov	r0, r3
 800abcc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800abd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800abd4:	4290      	cmp	r0, r2
 800abd6:	eb71 0303 	sbcs.w	r3, r1, r3
 800abda:	da01      	bge.n	800abe0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 800abdc:	f01a f96f 	bl	8024ebe <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f113 0f1f 	cmn.w	r3, #31
 800abe8:	da08      	bge.n	800abfc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2200      	movs	r2, #0
 800abee:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800abf0:	f04f 0200 	mov.w	r2, #0
 800abf4:	f04f 0300 	mov.w	r3, #0
 800abf8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800abfc:	69ba      	ldr	r2, [r7, #24]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	601a      	str	r2, [r3, #0]
}
 800ac02:	3720      	adds	r7, #32
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bdb0      	pop	{r4, r5, r7, pc}
 800ac08:	41e00000 	.word	0x41e00000

0800ac0c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	ed87 0b02 	vstr	d0, [r7, #8]
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 800ac1a:	f04f 0200 	mov.w	r2, #0
 800ac1e:	4b0d      	ldr	r3, [pc, #52]	; (800ac54 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 800ac20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac24:	f7f5 ffaa 	bl	8000b7c <__aeabi_dcmpgt>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800ac2e:	f01a f946 	bl	8024ebe <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800ac32:	6839      	ldr	r1, [r7, #0]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	ed97 0b02 	vldr	d0, [r7, #8]
 800ac3a:	f7ff ff5d 	bl	800aaf8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	da01      	bge.n	800ac4a <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 800ac46:	f01a f93a 	bl	8024ebe <abort>
}
 800ac4a:	bf00      	nop
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	3ff00000 	.word	0x3ff00000

0800ac58 <_ZSt3minIdERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6e:	f7f5 ff67 	bl	8000b40 <__aeabi_dcmplt>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d001      	beq.n	800ac7c <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	e000      	b.n	800ac7e <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 800ac7c:	687b      	ldr	r3, [r7, #4]
    }
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 800ac88:	b5b0      	push	{r4, r5, r7, lr}
 800ac8a:	b08e      	sub	sp, #56	; 0x38
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	ed87 0b06 	vstr	d0, [r7, #24]
 800ac92:	ed87 1b04 	vstr	d1, [r7, #16]
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800ac9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aca0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800aca4:	f7f5 fcda 	bl	800065c <__aeabi_dmul>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	4614      	mov	r4, r2
 800acae:	461d      	mov	r5, r3
 800acb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	fa22 f303 	lsr.w	r3, r2, r3
 800acba:	4618      	mov	r0, r3
 800acbc:	f7f5 fc64 	bl	8000588 <__aeabi_i2d>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	4620      	mov	r0, r4
 800acc6:	4629      	mov	r1, r5
 800acc8:	f7f5 fcc8 	bl	800065c <__aeabi_dmul>
 800accc:	4602      	mov	r2, r0
 800acce:	460b      	mov	r3, r1
 800acd0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800acd4:	a30e      	add	r3, pc, #56	; (adr r3, 800ad10 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800acde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ace2:	f107 0320 	add.w	r3, r7, #32
 800ace6:	4611      	mov	r1, r2
 800ace8:	4618      	mov	r0, r3
 800acea:	f7ff ffb5 	bl	800ac58 <_ZSt3minIdERKT_S2_S2_>
 800acee:	4603      	mov	r3, r0
 800acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 800acf8:	6879      	ldr	r1, [r7, #4]
 800acfa:	68b8      	ldr	r0, [r7, #8]
 800acfc:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800ad00:	f7ff ff84 	bl	800ac0c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 800ad04:	bf00      	nop
 800ad06:	3738      	adds	r7, #56	; 0x38
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bdb0      	pop	{r4, r5, r7, pc}
 800ad0c:	f3af 8000 	nop.w
 800ad10:	ffc00000 	.word	0xffc00000
 800ad14:	41dfffff 	.word	0x41dfffff

0800ad18 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 800ad18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1c:	b087      	sub	sp, #28
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	60f8      	str	r0, [r7, #12]
 800ad22:	60b9      	str	r1, [r7, #8]
 800ad24:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 800ad26:	2201      	movs	r2, #1
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7f5 fc29 	bl	8000588 <__aeabi_i2d>
 800ad36:	4682      	mov	sl, r0
 800ad38:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	1ad1      	subs	r1, r2, r3
 800ad40:	f04f 0201 	mov.w	r2, #1
 800ad44:	f04f 0300 	mov.w	r3, #0
 800ad48:	f1a1 0620 	sub.w	r6, r1, #32
 800ad4c:	f1c1 0020 	rsb	r0, r1, #32
 800ad50:	fa03 f901 	lsl.w	r9, r3, r1
 800ad54:	fa02 f606 	lsl.w	r6, r2, r6
 800ad58:	ea49 0906 	orr.w	r9, r9, r6
 800ad5c:	fa22 f000 	lsr.w	r0, r2, r0
 800ad60:	ea49 0900 	orr.w	r9, r9, r0
 800ad64:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800ad68:	4640      	mov	r0, r8
 800ad6a:	4649      	mov	r1, r9
 800ad6c:	f7f5 fc48 	bl	8000600 <__aeabi_l2d>
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	4650      	mov	r0, sl
 800ad76:	4659      	mov	r1, fp
 800ad78:	f7f5 fc70 	bl	800065c <__aeabi_dmul>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	4690      	mov	r8, r2
 800ad82:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 800ad84:	f04f 0201 	mov.w	r2, #1
 800ad88:	f04f 0300 	mov.w	r3, #0
 800ad8c:	68b9      	ldr	r1, [r7, #8]
 800ad8e:	f1a1 0620 	sub.w	r6, r1, #32
 800ad92:	f1c1 0020 	rsb	r0, r1, #32
 800ad96:	fa03 f501 	lsl.w	r5, r3, r1
 800ad9a:	fa02 f606 	lsl.w	r6, r2, r6
 800ad9e:	4335      	orrs	r5, r6
 800ada0:	fa22 f000 	lsr.w	r0, r2, r0
 800ada4:	4305      	orrs	r5, r0
 800ada6:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800adaa:	4620      	mov	r0, r4
 800adac:	4629      	mov	r1, r5
 800adae:	f7f5 fc27 	bl	8000600 <__aeabi_l2d>
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
  const double max_input_rescaled =
 800adb6:	4640      	mov	r0, r8
 800adb8:	4649      	mov	r1, r9
 800adba:	f7f5 fd79 	bl	80008b0 <__aeabi_ddiv>
 800adbe:	4602      	mov	r2, r0
 800adc0:	460b      	mov	r3, r1
 800adc2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 800adc6:	ed97 0b04 	vldr	d0, [r7, #16]
 800adca:	f019 fe35 	bl	8024a38 <floor>
 800adce:	ec53 2b10 	vmov	r2, r3, d0
 800add2:	4610      	mov	r0, r2
 800add4:	4619      	mov	r1, r3
 800add6:	f7f5 fedb 	bl	8000b90 <__aeabi_d2iz>
 800adda:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 800addc:	4618      	mov	r0, r3
 800adde:	371c      	adds	r7, #28
 800ade0:	46bd      	mov	sp, r7
 800ade2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ade6 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800ade6:	b480      	push	{r7}
 800ade8:	b083      	sub	sp, #12
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	ed93 7a00 	vldr	s14, [r3]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	edd3 7a00 	vldr	s15, [r3]
 800adfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae04:	d501      	bpl.n	800ae0a <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	e000      	b.n	800ae0c <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800ae0a:	687b      	ldr	r3, [r7, #4]
    }
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	ed93 7a00 	vldr	s14, [r3]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	edd3 7a00 	vldr	s15, [r3]
 800ae2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae36:	d501      	bpl.n	800ae3c <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	e000      	b.n	800ae3e <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800ae3c:	687b      	ldr	r3, [r7, #4]
    }
 800ae3e:	4618      	mov	r0, r3
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	ed87 0b00 	vstr	d0, [r7]
 800ae54:	ed97 0b00 	vldr	d0, [r7]
 800ae58:	f019 fea6 	bl	8024ba8 <round>
 800ae5c:	eeb0 7a40 	vmov.f32	s14, s0
 800ae60:	eef0 7a60 	vmov.f32	s15, s1
 800ae64:	eeb0 0a47 	vmov.f32	s0, s14
 800ae68:	eef0 0a67 	vmov.f32	s1, s15
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	ed87 0a01 	vstr	s0, [r7, #4]
 800ae7c:	ed97 0a01 	vldr	s0, [r7, #4]
 800ae80:	f7ff fe21 	bl	800aac6 <_ZSt5roundf>
 800ae84:	eef0 7a40 	vmov.f32	s15, s0
 800ae88:	eeb0 0a67 	vmov.f32	s0, s15
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 800ae92:	b480      	push	{r7}
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 800aea4:	b480      	push	{r7}
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	237f      	movs	r3, #127	; 0x7f
 800aeaa:	4618      	mov	r0, r3
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 800aeb4:	b480      	push	{r7}
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	2300      	movs	r3, #0
 800aeba:	4618      	mov	r0, r3
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 800aec4:	b480      	push	{r7}
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	23ff      	movs	r3, #255	; 0xff
 800aeca:	4618      	mov	r0, r3
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 800aed4:	b480      	push	{r7}
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	4b02      	ldr	r3, [pc, #8]	; (800aee4 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800aeda:	4618      	mov	r0, r3
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr
 800aee4:	ffff8000 	.word	0xffff8000

0800aee8 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 800aee8:	b480      	push	{r7}
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800aef0:	4618      	mov	r0, r3
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800aefa:	b480      	push	{r7}
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af02:	4618      	mov	r0, r3
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4618      	mov	r0, r3
 800af1c:	370c      	adds	r7, #12
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr

0800af26 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 800af26:	b480      	push	{r7}
 800af28:	b083      	sub	sp, #12
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	689a      	ldr	r2, [r3, #8]
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	685b      	ldr	r3, [r3, #4]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
 800af48:	b480      	push	{r7}
 800af4a:	b087      	sub	sp, #28
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 800af50:	f04f 0201 	mov.w	r2, #1
 800af54:	f04f 0300 	mov.w	r3, #0
 800af58:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800af5c:	2300      	movs	r3, #0
 800af5e:	60fb      	str	r3, [r7, #12]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	429a      	cmp	r2, r3
 800af68:	da1b      	bge.n	800afa2 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	4413      	add	r3, r2
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	461a      	mov	r2, r3
 800af76:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800af7a:	6979      	ldr	r1, [r7, #20]
 800af7c:	fb02 f001 	mul.w	r0, r2, r1
 800af80:	6939      	ldr	r1, [r7, #16]
 800af82:	fb03 f101 	mul.w	r1, r3, r1
 800af86:	4401      	add	r1, r0
 800af88:	6938      	ldr	r0, [r7, #16]
 800af8a:	fba0 2302 	umull	r2, r3, r0, r2
 800af8e:	4419      	add	r1, r3
 800af90:	460b      	mov	r3, r1
 800af92:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800af96:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	3301      	adds	r3, #1
 800af9e:	60fb      	str	r3, [r7, #12]
 800afa0:	e7de      	b.n	800af60 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 800afa2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800afa6:	4610      	mov	r0, r2
 800afa8:	4619      	mov	r1, r3
 800afaa:	371c      	adds	r7, #28
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <_ZN6tflite11NumElementsEPK12TfLiteTensor>:

inline int64_t NumElements(const TfLiteTensor* t) {
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7ff ffc1 	bl	800af48 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
}
 800afca:	4610      	mov	r0, r2
 800afcc:	4619      	mov	r1, r3
 800afce:	3708      	adds	r7, #8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	ed87 0b00 	vstr	d0, [r7]
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	6879      	ldr	r1, [r7, #4]
 800afe2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800afe6:	ec43 2b17 	vmov	d7, r2, r3
 800afea:	eeb0 0a47 	vmov.f32	s0, s14
 800afee:	eef0 0a67 	vmov.f32	s1, s15
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d005      	beq.n	800b01a <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	689a      	ldr	r2, [r3, #8]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	019b      	lsls	r3, r3, #6
 800b016:	4413      	add	r3, r2
 800b018:	e006      	b.n	800b028 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b01e:	6839      	ldr	r1, [r7, #0]
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	4798      	blx	r3
 800b024:	4603      	mov	r3, r0
 800b026:	bf00      	nop
  }
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 800b030:	b480      	push	{r7}
 800b032:	b087      	sub	sp, #28
 800b034:	af00      	add	r7, sp, #0
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	607a      	str	r2, [r7, #4]
 800b03c:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	db0f      	blt.n	800b064 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	429a      	cmp	r2, r3
 800b04a:	da0b      	bge.n	800b064 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	683a      	ldr	r2, [r7, #0]
 800b052:	4413      	add	r3, r2
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b05e:	d001      	beq.n	800b064 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	e001      	b.n	800b068 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 800b064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b068:	4618      	mov	r0, r3
 800b06a:	371c      	adds	r7, #28
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 800b084:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800b08c:	6879      	ldr	r1, [r7, #4]
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f7ff ffce 	bl	800b030 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800b094:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	da01      	bge.n	800b0a0 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800b09c:	2300      	movs	r3, #0
 800b09e:	e005      	b.n	800b0ac <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 800b0a0:	6979      	ldr	r1, [r7, #20]
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f7ff ffaa 	bl	800affc <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	bf00      	nop
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3718      	adds	r7, #24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	68b9      	ldr	r1, [r7, #8]
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f7ff ffd5 	bl	800b074 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 800b0ca:	4603      	mov	r3, r0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 800b0e4:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7ff ff9e 	bl	800b030 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800b0f4:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	da01      	bge.n	800b100 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	e005      	b.n	800b10c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 800b100:	6979      	ldr	r1, [r7, #20]
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f7ff ff7a 	bl	800affc <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800b108:	4603      	mov	r3, r0
 800b10a:	bf00      	nop
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3718      	adds	r7, #24
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	68b9      	ldr	r1, [r7, #8]
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f7ff ffc5 	bl	800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800b12a:	4603      	mov	r3, r0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 800b134:	b5b0      	push	{r4, r5, r7, lr}
 800b136:	b09c      	sub	sp, #112	; 0x70
 800b138:	af04      	add	r7, sp, #16
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
 800b140:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d013      	beq.n	800b174 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	695c      	ldr	r4, [r3, #20]
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b156:	461a      	mov	r2, r3
 800b158:	2301      	movs	r3, #1
 800b15a:	9303      	str	r3, [sp, #12]
 800b15c:	9202      	str	r2, [sp, #8]
 800b15e:	4b98      	ldr	r3, [pc, #608]	; (800b3c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800b160:	9301      	str	r3, [sp, #4]
 800b162:	4b98      	ldr	r3, [pc, #608]	; (800b3c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	23d8      	movs	r3, #216	; 0xd8
 800b168:	4a97      	ldr	r2, [pc, #604]	; (800b3c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b16a:	4998      	ldr	r1, [pc, #608]	; (800b3cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	47a0      	blx	r4
 800b170:	2301      	movs	r3, #1
 800b172:	e173      	b.n	800b45c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d013      	beq.n	800b1a6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	695c      	ldr	r4, [r3, #20]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b188:	461a      	mov	r2, r3
 800b18a:	2301      	movs	r3, #1
 800b18c:	9303      	str	r3, [sp, #12]
 800b18e:	9202      	str	r2, [sp, #8]
 800b190:	4b8b      	ldr	r3, [pc, #556]	; (800b3c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800b192:	9301      	str	r3, [sp, #4]
 800b194:	4b8e      	ldr	r3, [pc, #568]	; (800b3d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 800b196:	9300      	str	r3, [sp, #0]
 800b198:	23da      	movs	r3, #218	; 0xda
 800b19a:	4a8b      	ldr	r2, [pc, #556]	; (800b3c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b19c:	498b      	ldr	r1, [pc, #556]	; (800b3cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	47a0      	blx	r4
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e15a      	b.n	800b45c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1aa:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 800b1ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d10a      	bne.n	800b1c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	695c      	ldr	r4, [r3, #20]
 800b1b6:	4b87      	ldr	r3, [pc, #540]	; (800b3d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	23e5      	movs	r3, #229	; 0xe5
 800b1bc:	4a82      	ldr	r2, [pc, #520]	; (800b3c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b1be:	4986      	ldr	r1, [pc, #536]	; (800b3d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	47a0      	blx	r4
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e149      	b.n	800b45c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 800b1c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10a      	bne.n	800b1e6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	695c      	ldr	r4, [r3, #20]
 800b1d4:	4b81      	ldr	r3, [pc, #516]	; (800b3dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	23e6      	movs	r3, #230	; 0xe6
 800b1da:	4a7b      	ldr	r2, [pc, #492]	; (800b3c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b1dc:	497e      	ldr	r1, [pc, #504]	; (800b3d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	47a0      	blx	r4
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e13a      	b.n	800b45c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 800b1e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	bfcc      	ite	gt
 800b1f0:	2301      	movgt	r3, #1
 800b1f2:	2300      	movle	r3, #0
 800b1f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 800b1f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d067      	beq.n	800b2d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	2b09      	cmp	r3, #9
 800b206:	d00e      	beq.n	800b226 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	2b07      	cmp	r3, #7
 800b20e:	d00a      	beq.n	800b226 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	695c      	ldr	r4, [r3, #20]
 800b214:	4b72      	ldr	r3, [pc, #456]	; (800b3e0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	23ea      	movs	r3, #234	; 0xea
 800b21a:	4a6b      	ldr	r2, [pc, #428]	; (800b3c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b21c:	496e      	ldr	r1, [pc, #440]	; (800b3d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	47a0      	blx	r4
 800b222:	2301      	movs	r3, #1
 800b224:	e11a      	b.n	800b45c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	2b09      	cmp	r3, #9
 800b22c:	d012      	beq.n	800b254 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	695c      	ldr	r4, [r3, #20]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	461a      	mov	r2, r3
 800b238:	2309      	movs	r3, #9
 800b23a:	9303      	str	r3, [sp, #12]
 800b23c:	9202      	str	r2, [sp, #8]
 800b23e:	4b69      	ldr	r3, [pc, #420]	; (800b3e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 800b240:	9301      	str	r3, [sp, #4]
 800b242:	4b69      	ldr	r3, [pc, #420]	; (800b3e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	23ec      	movs	r3, #236	; 0xec
 800b248:	4a5f      	ldr	r2, [pc, #380]	; (800b3c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b24a:	4960      	ldr	r1, [pc, #384]	; (800b3cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	47a0      	blx	r4
 800b250:	2301      	movs	r3, #1
 800b252:	e103      	b.n	800b45c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 800b254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b25e:	429a      	cmp	r2, r3
 800b260:	d013      	beq.n	800b28a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	695c      	ldr	r4, [r3, #20]
 800b266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b270:	9203      	str	r2, [sp, #12]
 800b272:	9302      	str	r3, [sp, #8]
 800b274:	4b5d      	ldr	r3, [pc, #372]	; (800b3ec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 800b276:	9301      	str	r3, [sp, #4]
 800b278:	4b5d      	ldr	r3, [pc, #372]	; (800b3f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	23ed      	movs	r3, #237	; 0xed
 800b27e:	4a52      	ldr	r2, [pc, #328]	; (800b3c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b280:	4952      	ldr	r1, [pc, #328]	; (800b3cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	47a0      	blx	r4
 800b286:	2301      	movs	r3, #1
 800b288:	e0e8      	b.n	800b45c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	689a      	ldr	r2, [r3, #8]
 800b28e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d017      	beq.n	800b2d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	695c      	ldr	r4, [r3, #20]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	689a      	ldr	r2, [r3, #8]
 800b2a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	4413      	add	r3, r2
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	9303      	str	r3, [sp, #12]
 800b2b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b2b8:	9302      	str	r3, [sp, #8]
 800b2ba:	4b4e      	ldr	r3, [pc, #312]	; (800b3f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	4b4b      	ldr	r3, [pc, #300]	; (800b3ec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	23ee      	movs	r3, #238	; 0xee
 800b2c4:	4a40      	ldr	r2, [pc, #256]	; (800b3c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b2c6:	4941      	ldr	r1, [pc, #260]	; (800b3cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	47a0      	blx	r4
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	e0c5      	b.n	800b45c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 800b2d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 800b2dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	3304      	adds	r3, #4
 800b2e2:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b2ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	da47      	bge.n	800b382 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 800b2f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d005      	beq.n	800b306 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 800b2fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b300:	4413      	add	r3, r2
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	e001      	b.n	800b30a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 800b306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 800b30c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b30e:	f7f5 f94d 	bl	80005ac <__aeabi_f2d>
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 800b31a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b31c:	f7f5 f946 	bl	80005ac <__aeabi_f2d>
 800b320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b324:	f7f5 f99a 	bl	800065c <__aeabi_dmul>
 800b328:	4602      	mov	r2, r0
 800b32a:	460b      	mov	r3, r1
 800b32c:	4614      	mov	r4, r2
 800b32e:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 800b330:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b332:	f7f5 f93b 	bl	80005ac <__aeabi_f2d>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 800b33a:	4620      	mov	r0, r4
 800b33c:	4629      	mov	r1, r5
 800b33e:	f7f5 fab7 	bl	80008b0 <__aeabi_ddiv>
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 800b34a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b34e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b352:	4611      	mov	r1, r2
 800b354:	4618      	mov	r0, r3
 800b356:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800b35a:	f7ff fbcd 	bl	800aaf8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 800b35e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b366:	4413      	add	r3, r2
 800b368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b36a:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 800b36c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b374:	4413      	add	r3, r2
 800b376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b378:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 800b37a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b37c:	3301      	adds	r3, #1
 800b37e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b380:	e7b2      	b.n	800b2e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	2b03      	cmp	r3, #3
 800b388:	d146      	bne.n	800b418 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 800b38a:	f04f 0200 	mov.w	r2, #0
 800b38e:	f04f 0300 	mov.w	r3, #0
 800b392:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800b396:	f107 0318 	add.w	r3, r7, #24
 800b39a:	9301      	str	r3, [sp, #4]
 800b39c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	68b9      	ldr	r1, [r7, #8]
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f000 f85e 	bl	800b468 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b3b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d01e      	beq.n	800b3f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 800b3ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3be:	e04d      	b.n	800b45c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
 800b3c0:	08027008 	.word	0x08027008
 800b3c4:	08027024 	.word	0x08027024
 800b3c8:	08026fb0 	.word	0x08026fb0
 800b3cc:	08026fec 	.word	0x08026fec
 800b3d0:	08027040 	.word	0x08027040
 800b3d4:	08027074 	.word	0x08027074
 800b3d8:	0802705c 	.word	0x0802705c
 800b3dc:	08027088 	.word	0x08027088
 800b3e0:	080270a4 	.word	0x080270a4
 800b3e4:	080270e0 	.word	0x080270e0
 800b3e8:	080270ec 	.word	0x080270ec
 800b3ec:	080270fc 	.word	0x080270fc
 800b3f0:	0802710c 	.word	0x0802710c
 800b3f4:	08027130 	.word	0x08027130
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 800b3f8:	ed97 7b06 	vldr	d7, [r7, #24]
 800b3fc:	f107 0314 	add.w	r3, r7, #20
 800b400:	4619      	mov	r1, r3
 800b402:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b404:	eeb0 0a47 	vmov.f32	s0, s14
 800b408:	eef0 0a67 	vmov.f32	s1, s15
 800b40c:	f7ff fb74 	bl	800aaf8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	425a      	negs	r2, r3
 800b414:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b416:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	2b09      	cmp	r3, #9
 800b41e:	d007      	beq.n	800b430 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	2b03      	cmp	r3, #3
 800b426:	d003      	beq.n	800b430 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800b42c:	2b07      	cmp	r3, #7
 800b42e:	d114      	bne.n	800b45a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800b430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b432:	7819      	ldrb	r1, [r3, #0]
 800b434:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b43e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f000 fa03 	bl	800b84c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800b446:	4603      	mov	r3, r0
 800b448:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b44c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
 800b454:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b458:	e000      	b.n	800b45c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3760      	adds	r7, #96	; 0x60
 800b460:	46bd      	mov	sp, r7
 800b462:	bdb0      	pop	{r4, r5, r7, pc}
 800b464:	0000      	movs	r0, r0
	...

0800b468 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800b468:	b5b0      	push	{r4, r5, r7, lr}
 800b46a:	b08e      	sub	sp, #56	; 0x38
 800b46c:	af02      	add	r7, sp, #8
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7f5 f896 	bl	80005ac <__aeabi_f2d>
 800b480:	4604      	mov	r4, r0
 800b482:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	4618      	mov	r0, r3
 800b48a:	f7f5 f88f 	bl	80005ac <__aeabi_f2d>
 800b48e:	4602      	mov	r2, r0
 800b490:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800b492:	4620      	mov	r0, r4
 800b494:	4629      	mov	r1, r5
 800b496:	f7f5 f8e1 	bl	800065c <__aeabi_dmul>
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d04b      	beq.n	800b540 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7f5 f87d 	bl	80005ac <__aeabi_f2d>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800b4ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b4be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b4c2:	f7f4 ff13 	bl	80002ec <__aeabi_dsub>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	ec43 2b17 	vmov	d7, r2, r3
 800b4ce:	eeb0 0a47 	vmov.f32	s0, s14
 800b4d2:	eef0 0a67 	vmov.f32	s1, s15
 800b4d6:	f7ff fd7d 	bl	800afd4 <_ZSt3absd>
 800b4da:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800b4de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7f5 f862 	bl	80005ac <__aeabi_f2d>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 800b4f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b4f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b4f8:	f7f5 f9da 	bl	80008b0 <__aeabi_ddiv>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	4610      	mov	r0, r2
 800b502:	4619      	mov	r1, r3
 800b504:	2301      	movs	r3, #1
 800b506:	461c      	mov	r4, r3
 800b508:	a318      	add	r3, pc, #96	; (adr r3, 800b56c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 800b50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50e:	f7f5 fb21 	bl	8000b54 <__aeabi_dcmple>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d101      	bne.n	800b51c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 800b518:	2300      	movs	r3, #0
 800b51a:	461c      	mov	r4, r3
 800b51c:	b2e3      	uxtb	r3, r4
 800b51e:	f083 0301 	eor.w	r3, r3, #1
 800b522:	b2db      	uxtb	r3, r3
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00b      	beq.n	800b540 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	695c      	ldr	r4, [r3, #20]
 800b52c:	4b0c      	ldr	r3, [pc, #48]	; (800b560 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	f44f 739e 	mov.w	r3, #316	; 0x13c
 800b534:	4a0b      	ldr	r2, [pc, #44]	; (800b564 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800b536:	490c      	ldr	r1, [pc, #48]	; (800b568 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	47a0      	blx	r4
 800b53c:	2301      	movs	r3, #1
 800b53e:	e009      	b.n	800b554 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800b540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	68b9      	ldr	r1, [r7, #8]
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f000 f812 	bl	800b574 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800b550:	4603      	mov	r3, r0
                                          multiplier);
 800b552:	bf00      	nop
}
 800b554:	4618      	mov	r0, r3
 800b556:	3730      	adds	r7, #48	; 0x30
 800b558:	46bd      	mov	sp, r7
 800b55a:	bdb0      	pop	{r4, r5, r7, pc}
 800b55c:	f3af 8000 	nop.w
 800b560:	08027170 	.word	0x08027170
 800b564:	08026fb0 	.word	0x08026fb0
 800b568:	0802705c 	.word	0x0802705c
 800b56c:	47ae147b 	.word	0x47ae147b
 800b570:	3f947ae1 	.word	0x3f947ae1

0800b574 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800b574:	b590      	push	{r4, r7, lr}
 800b576:	b089      	sub	sp, #36	; 0x24
 800b578:	af02      	add	r7, sp, #8
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	607a      	str	r2, [r7, #4]
 800b580:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	ed93 7a03 	vldr	s14, [r3, #12]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	edd3 7a03 	vldr	s15, [r3, #12]
 800b58e:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 800b592:	ee17 0a90 	vmov	r0, s15
 800b596:	f7f5 f809 	bl	80005ac <__aeabi_f2d>
 800b59a:	4602      	mov	r2, r0
 800b59c:	460b      	mov	r3, r1
 800b59e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	461c      	mov	r4, r3
 800b5a6:	f04f 0200 	mov.w	r2, #0
 800b5aa:	f04f 0300 	mov.w	r3, #0
 800b5ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b5b2:	f7f5 fad9 	bl	8000b68 <__aeabi_dcmpge>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d101      	bne.n	800b5c0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	461c      	mov	r4, r3
 800b5c0:	b2e3      	uxtb	r3, r4
 800b5c2:	f083 0301 	eor.w	r3, r3, #1
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00b      	beq.n	800b5e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	695c      	ldr	r4, [r3, #20]
 800b5d0:	4b0f      	ldr	r3, [pc, #60]	; (800b610 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	f240 1349 	movw	r3, #329	; 0x149
 800b5d8:	4a0e      	ldr	r2, [pc, #56]	; (800b614 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800b5da:	490f      	ldr	r1, [pc, #60]	; (800b618 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	47a0      	blx	r4
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e010      	b.n	800b606 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7f4 ffdf 	bl	80005ac <__aeabi_f2d>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b5f6:	f7f5 f95b 	bl	80008b0 <__aeabi_ddiv>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b600:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	371c      	adds	r7, #28
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd90      	pop	{r4, r7, pc}
 800b60e:	bf00      	nop
 800b610:	08027194 	.word	0x08027194
 800b614:	08026fb0 	.word	0x08026fb0
 800b618:	0802705c 	.word	0x0802705c

0800b61c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 800b61c:	b590      	push	{r4, r7, lr}
 800b61e:	b08b      	sub	sp, #44	; 0x2c
 800b620:	af02      	add	r7, sp, #8
 800b622:	6178      	str	r0, [r7, #20]
 800b624:	ed87 0a04 	vstr	s0, [r7, #16]
 800b628:	60f9      	str	r1, [r7, #12]
 800b62a:	edc7 0a02 	vstr	s1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 800b630:	ed97 7a02 	vldr	s14, [r7, #8]
 800b634:	edd7 7a04 	vldr	s15, [r7, #16]
 800b638:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b63c:	eeb0 0a66 	vmov.f32	s0, s13
 800b640:	f7ff fc17 	bl	800ae72 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800b644:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 800b648:	f7ff fc57 	bl	800aefa <_ZNSt14numeric_limitsIlE3minEv>
 800b64c:	ee07 0a90 	vmov	s15, r0
 800b650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b654:	ed97 7a07 	vldr	s14, [r7, #28]
 800b658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b660:	db0e      	blt.n	800b680 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 800b662:	f7ff fa40 	bl	800aae6 <_ZNSt14numeric_limitsIlE3maxEv>
 800b666:	ee07 0a90 	vmov	s15, r0
 800b66a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 800b66e:	ed97 7a07 	vldr	s14, [r7, #28]
 800b672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b67a:	d801      	bhi.n	800b680 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 800b67c:	2301      	movs	r3, #1
 800b67e:	e000      	b.n	800b682 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 800b680:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 800b682:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 800b684:	7efb      	ldrb	r3, [r7, #27]
 800b686:	f083 0301 	eor.w	r3, r3, #1
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00b      	beq.n	800b6a8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	695c      	ldr	r4, [r3, #20]
 800b694:	4b0c      	ldr	r3, [pc, #48]	; (800b6c8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	f240 1357 	movw	r3, #343	; 0x157
 800b69c:	4a0b      	ldr	r2, [pc, #44]	; (800b6cc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 800b69e:	490c      	ldr	r1, [pc, #48]	; (800b6d0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 800b6a0:	6978      	ldr	r0, [r7, #20]
 800b6a2:	47a0      	blx	r4
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e00a      	b.n	800b6be <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 800b6a8:	edd7 7a07 	vldr	s15, [r7, #28]
 800b6ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6b0:	ee17 2a90 	vmov	r2, s15
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	441a      	add	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3724      	adds	r7, #36	; 0x24
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd90      	pop	{r4, r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	080271b0 	.word	0x080271b0
 800b6cc:	08026fb0 	.word	0x08026fb0
 800b6d0:	0802705c 	.word	0x0802705c

0800b6d4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b08a      	sub	sp, #40	; 0x28
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	607a      	str	r2, [r7, #4]
 800b6de:	603b      	str	r3, [r7, #0]
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 800b6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	691b      	ldr	r3, [r3, #16]
 800b6ee:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 800b6f0:	7afb      	ldrb	r3, [r7, #11]
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d120      	bne.n	800b738 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 800b6f6:	f107 0314 	add.w	r3, r7, #20
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	eddf 0a52 	vldr	s1, [pc, #328]	; 800b848 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 800b700:	6a39      	ldr	r1, [r7, #32]
 800b702:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f7ff ff88 	bl	800b61c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800b70c:	4603      	mov	r3, r0
 800b70e:	76fb      	strb	r3, [r7, #27]
 800b710:	7efb      	ldrb	r3, [r7, #27]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 800b716:	7efb      	ldrb	r3, [r7, #27]
 800b718:	e091      	b.n	800b83e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800b71a:	f107 0214 	add.w	r2, r7, #20
 800b71e:	1d3b      	adds	r3, r7, #4
 800b720:	4611      	mov	r1, r2
 800b722:	4618      	mov	r0, r3
 800b724:	f000 f912 	bl	800b94c <_ZSt3maxIlERKT_S2_S2_>
 800b728:	4603      	mov	r3, r0
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72e:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800b730:	683a      	ldr	r2, [r7, #0]
 800b732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b734:	601a      	str	r2, [r3, #0]
 800b736:	e081      	b.n	800b83c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 800b738:	7afb      	ldrb	r3, [r7, #11]
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	d13a      	bne.n	800b7b4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 800b73e:	f107 0314 	add.w	r3, r7, #20
 800b742:	461a      	mov	r2, r3
 800b744:	eddf 0a40 	vldr	s1, [pc, #256]	; 800b848 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 800b748:	6a39      	ldr	r1, [r7, #32]
 800b74a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f7ff ff64 	bl	800b61c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800b754:	4603      	mov	r3, r0
 800b756:	777b      	strb	r3, [r7, #29]
 800b758:	7f7b      	ldrb	r3, [r7, #29]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d001      	beq.n	800b762 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 800b75e:	7f7b      	ldrb	r3, [r7, #29]
 800b760:	e06d      	b.n	800b83e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800b762:	f107 0214 	add.w	r2, r7, #20
 800b766:	1d3b      	adds	r3, r7, #4
 800b768:	4611      	mov	r1, r2
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 f8ee 	bl	800b94c <_ZSt3maxIlERKT_S2_S2_>
 800b770:	4603      	mov	r3, r0
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b776:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 800b778:	f107 0314 	add.w	r3, r7, #20
 800b77c:	461a      	mov	r2, r3
 800b77e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800b782:	6a39      	ldr	r1, [r7, #32]
 800b784:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f7ff ff47 	bl	800b61c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800b78e:	4603      	mov	r3, r0
 800b790:	773b      	strb	r3, [r7, #28]
 800b792:	7f3b      	ldrb	r3, [r7, #28]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d001      	beq.n	800b79c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 800b798:	7f3b      	ldrb	r3, [r7, #28]
 800b79a:	e050      	b.n	800b83e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 800b79c:	f107 0214 	add.w	r2, r7, #20
 800b7a0:	463b      	mov	r3, r7
 800b7a2:	4611      	mov	r1, r2
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f000 f8bd 	bl	800b924 <_ZSt3minIlERKT_S2_S2_>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b0:	601a      	str	r2, [r3, #0]
 800b7b2:	e043      	b.n	800b83c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 800b7b4:	7afb      	ldrb	r3, [r7, #11]
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	d13a      	bne.n	800b830 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 800b7ba:	f107 0314 	add.w	r3, r7, #20
 800b7be:	461a      	mov	r2, r3
 800b7c0:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800b7c4:	6a39      	ldr	r1, [r7, #32]
 800b7c6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f7ff ff26 	bl	800b61c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	77fb      	strb	r3, [r7, #31]
 800b7d4:	7ffb      	ldrb	r3, [r7, #31]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 800b7da:	7ffb      	ldrb	r3, [r7, #31]
 800b7dc:	e02f      	b.n	800b83e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800b7de:	f107 0214 	add.w	r2, r7, #20
 800b7e2:	1d3b      	adds	r3, r7, #4
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f000 f8b0 	bl	800b94c <_ZSt3maxIlERKT_S2_S2_>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f2:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 800b7f4:	f107 0314 	add.w	r3, r7, #20
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800b7fe:	6a39      	ldr	r1, [r7, #32]
 800b800:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f7ff ff09 	bl	800b61c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800b80a:	4603      	mov	r3, r0
 800b80c:	77bb      	strb	r3, [r7, #30]
 800b80e:	7fbb      	ldrb	r3, [r7, #30]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d001      	beq.n	800b818 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 800b814:	7fbb      	ldrb	r3, [r7, #30]
 800b816:	e012      	b.n	800b83e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 800b818:	f107 0214 	add.w	r2, r7, #20
 800b81c:	463b      	mov	r3, r7
 800b81e:	4611      	mov	r1, r2
 800b820:	4618      	mov	r0, r3
 800b822:	f000 f87f 	bl	800b924 <_ZSt3minIlERKT_S2_S2_>
 800b826:	4603      	mov	r3, r0
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82c:	601a      	str	r2, [r3, #0]
 800b82e:	e005      	b.n	800b83c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b834:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83a:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 800b83c:	2300      	movs	r3, #0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3728      	adds	r7, #40	; 0x28
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	00000000 	.word	0x00000000

0800b84c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800b84c:	b590      	push	{r4, r7, lr}
 800b84e:	b08b      	sub	sp, #44	; 0x2c
 800b850:	af04      	add	r7, sp, #16
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	607a      	str	r2, [r7, #4]
 800b856:	603b      	str	r3, [r7, #0]
 800b858:	460b      	mov	r3, r1
 800b85a:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 800b85c:	2300      	movs	r3, #0
 800b85e:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 800b860:	2300      	movs	r3, #0
 800b862:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	2b03      	cmp	r3, #3
 800b86a:	d108      	bne.n	800b87e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 800b86c:	f7ff fb22 	bl	800aeb4 <_ZNSt14numeric_limitsIhE3minEv>
 800b870:	4603      	mov	r3, r0
 800b872:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 800b874:	f7ff fb26 	bl	800aec4 <_ZNSt14numeric_limitsIhE3maxEv>
 800b878:	4603      	mov	r3, r0
 800b87a:	613b      	str	r3, [r7, #16]
 800b87c:	e025      	b.n	800b8ca <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	2b09      	cmp	r3, #9
 800b884:	d108      	bne.n	800b898 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 800b886:	f7ff fb04 	bl	800ae92 <_ZNSt14numeric_limitsIaE3minEv>
 800b88a:	4603      	mov	r3, r0
 800b88c:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 800b88e:	f7ff fb09 	bl	800aea4 <_ZNSt14numeric_limitsIaE3maxEv>
 800b892:	4603      	mov	r3, r0
 800b894:	613b      	str	r3, [r7, #16]
 800b896:	e018      	b.n	800b8ca <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	2b07      	cmp	r3, #7
 800b89e:	d108      	bne.n	800b8b2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 800b8a0:	f7ff fb18 	bl	800aed4 <_ZNSt14numeric_limitsIsE3minEv>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 800b8a8:	f7ff fb1e 	bl	800aee8 <_ZNSt14numeric_limitsIsE3maxEv>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	613b      	str	r3, [r7, #16]
 800b8b0:	e00b      	b.n	800b8ca <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	695c      	ldr	r4, [r3, #20]
 800b8b6:	4b0e      	ldr	r3, [pc, #56]	; (800b8f0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	f240 138f 	movw	r3, #399	; 0x18f
 800b8be:	4a0d      	ldr	r2, [pc, #52]	; (800b8f4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 800b8c0:	490d      	ldr	r1, [pc, #52]	; (800b8f8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	47a0      	blx	r4
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e00d      	b.n	800b8e6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 800b8ca:	7af9      	ldrb	r1, [r7, #11]
 800b8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ce:	9302      	str	r3, [sp, #8]
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	9301      	str	r3, [sp, #4]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f7ff fef9 	bl	800b6d4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 800b8e2:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 800b8e4:	bf00      	nop
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	371c      	adds	r7, #28
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd90      	pop	{r4, r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	080271d8 	.word	0x080271d8
 800b8f4:	08026fb0 	.word	0x08026fb0
 800b8f8:	0802705c 	.word	0x0802705c

0800b8fc <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	429a      	cmp	r2, r3
 800b910:	da01      	bge.n	800b916 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	e000      	b.n	800b918 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800b916:	687b      	ldr	r3, [r7, #4]
    }
 800b918:	4618      	mov	r0, r3
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	429a      	cmp	r2, r3
 800b938:	da01      	bge.n	800b93e <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	e000      	b.n	800b940 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800b93e:	687b      	ldr	r3, [r7, #4]
    }
 800b940:	4618      	mov	r0, r3
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	429a      	cmp	r2, r3
 800b960:	da01      	bge.n	800b966 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	e000      	b.n	800b968 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800b966:	687b      	ldr	r3, [r7, #4]
    }
 800b968:	4618      	mov	r0, r3
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4618      	mov	r0, r3
 800b980:	f000 f89c 	bl	800babc <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4618      	mov	r0, r3
 800b988:	3708      	adds	r7, #8
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800b98e:	b580      	push	{r7, lr}
 800b990:	b082      	sub	sp, #8
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4618      	mov	r0, r3
 800b99a:	f7ff ffeb 	bl	800b974 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	607a      	str	r2, [r7, #4]
    return TfLiteDelegatePtrVector();
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	601a      	str	r2, [r3, #0]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	605a      	str	r2, [r3, #4]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	609a      	str	r2, [r3, #8]
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f7ff ffe1 	bl	800b98e <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	4a04      	ldr	r2, [pc, #16]	; (800b9f0 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	601a      	str	r2, [r3, #0]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr
 800b9f0:	0802c0a4 	.word	0x0802c0a4

0800b9f4 <_ZN6tflite10OpResolverD0Ev>:
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f7ff ffe9 	bl	800b9d4 <_ZN6tflite10OpResolverD1Ev>
 800ba02:	2104      	movs	r1, #4
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f018 ffd4 	bl	80249b2 <_ZdlPvj>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	4618      	mov	r0, r3
 800ba20:	370c      	adds	r7, #12
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b084      	sub	sp, #16
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	60f8      	str	r0, [r7, #12]
 800ba32:	460b      	mov	r3, r1
 800ba34:	607a      	str	r2, [r7, #4]
 800ba36:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	3318      	adds	r3, #24
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	7afa      	ldrb	r2, [r7, #11]
 800ba42:	4611      	mov	r1, r2
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	4798      	blx	r3
 800ba48:	4603      	mov	r3, r0
  }
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b084      	sub	sp, #16
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	60f8      	str	r0, [r7, #12]
 800ba5a:	60b9      	str	r1, [r7, #8]
 800ba5c:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	331c      	adds	r3, #28
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68b9      	ldr	r1, [r7, #8]
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	4798      	blx	r3
 800ba6c:	4603      	mov	r3, r0
  }
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
	...

0800ba78 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	4a05      	ldr	r2, [pc, #20]	; (800ba98 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	601a      	str	r2, [r3, #0]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7ff ffa3 	bl	800b9d4 <_ZN6tflite10OpResolverD1Ev>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4618      	mov	r0, r3
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	0802c078 	.word	0x0802c078

0800ba9c <_ZN6tflite15MicroOpResolverD0Ev>:
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7ff ffe7 	bl	800ba78 <_ZN6tflite15MicroOpResolverD1Ev>
 800baaa:	2104      	movs	r1, #4
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f018 ff80 	bl	80249b2 <_ZdlPvj>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4618      	mov	r0, r3
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 f82b 	bl	800bb20 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4618      	mov	r0, r3
 800bace:	f000 f833 	bl	800bb38 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4618      	mov	r0, r3
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	4a04      	ldr	r2, [pc, #16]	; (800baf8 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	601a      	str	r2, [r3, #0]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4618      	mov	r0, r3
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	0802c0a4 	.word	0x0802c0a4

0800bafc <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7ff ffe8 	bl	800badc <_ZN6tflite10OpResolverC1Ev>
 800bb0c:	4a03      	ldr	r2, [pc, #12]	; (800bb1c <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	601a      	str	r2, [r3, #0]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4618      	mov	r0, r3
 800bb16:	3708      	adds	r7, #8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	0802c078 	.word	0x0802c078

0800bb20 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 f819 	bl	800bb60 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4618      	mov	r0, r3
 800bb32:	3708      	adds	r7, #8
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	605a      	str	r2, [r3, #4]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	609a      	str	r2, [r3, #8]
	{ }
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4618      	mov	r0, r3
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* s) {
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b082      	sub	sp, #8
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  //fprintf(stderr, "%s", s);
  uart_write((uint8_t*)s);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7f6 ffe8 	bl	8002b54 <uart_write>
#endif
}
 800bb84:	bf00      	nop
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2104      	movs	r1, #4
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fd fb95 	bl	80092c8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800bb9e:	4603      	mov	r3, r0
  }
 800bba0:	4618      	mov	r0, r3
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	2106      	movs	r1, #6
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fd fb96 	bl	80092e8 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	b2db      	uxtb	r3, r3
  }
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	601a      	str	r2, [r3, #0]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	607a      	str	r2, [r7, #4]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	68b9      	ldr	r1, [r7, #8]
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	f000 f866 	bl	800bccc <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	4618      	mov	r0, r3
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b082      	sub	sp, #8
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2b05      	cmp	r3, #5
 800bc18:	dd08      	ble.n	800bc2c <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d004      	beq.n	800bc2c <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f018 fec5 	bl	80249b6 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3708      	adds	r7, #8
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 800bc36:	b480      	push	{r7}
 800bc38:	b083      	sub	sp, #12
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4618      	mov	r0, r3
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 800bc4e:	b480      	push	{r7}
 800bc50:	b083      	sub	sp, #12
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2b05      	cmp	r3, #5
 800bc5c:	dd02      	ble.n	800bc64 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	e001      	b.n	800bc68 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	3304      	adds	r3, #4
  }
 800bc68:	4618      	mov	r0, r3
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2b05      	cmp	r3, #5
 800bc84:	dd08      	ble.n	800bc98 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d004      	beq.n	800bc98 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	4618      	mov	r0, r3
 800bc94:	f018 fe8f 	bl	80249b6 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	683a      	ldr	r2, [r7, #0]
 800bc9c:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	2b05      	cmp	r3, #5
 800bca2:	dd0f      	ble.n	800bcc4 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d201      	bcs.n	800bcb2 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	e001      	b.n	800bcb6 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 800bcb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f018 fe9f 	bl	80249fa <_Znaj>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800bcc4:	bf00      	nop
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b086      	sub	sp, #24
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 800bcd8:	68b9      	ldr	r1, [r7, #8]
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f7ff ffca 	bl	800bc74 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f7ff ffb4 	bl	800bc4e <_ZN6tflite12RuntimeShape8DimsDataEv>
 800bce6:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	461a      	mov	r2, r3
 800bcee:	6879      	ldr	r1, [r7, #4]
 800bcf0:	6978      	ldr	r0, [r7, #20]
 800bcf2:	f019 f95f 	bl	8024fb4 <memcpy>
  }
 800bcf6:	bf00      	nop
 800bcf8:	3718      	adds	r7, #24
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b086      	sub	sp, #24
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d103      	bne.n	800bd16 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f7ff ff5a 	bl	800bbc8 <_ZN6tflite12RuntimeShapeC1Ev>
 800bd14:	e00d      	b.n	800bd32 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	3304      	adds	r3, #4
 800bd26:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	6939      	ldr	r1, [r7, #16]
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f7ff ff59 	bl	800bbe4 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	3718      	adds	r7, #24
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 800bd3a:	b480      	push	{r7}
 800bd3c:	b085      	sub	sp, #20
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
 800bd42:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 800bd48:	683a      	ldr	r2, [r7, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	1e5a      	subs	r2, r3, #1
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 800bd5c:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800bd5e:	68bb      	ldr	r3, [r7, #8]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3714      	adds	r7, #20
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 800bd6c:	b480      	push	{r7}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 800bd88:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800bd8a:	68bb      	ldr	r3, [r7, #8]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4413      	add	r3, r2
 800bda8:	1e5a      	subs	r2, r3, #1
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	fbb2 f2f3 	udiv	r2, r2, r3
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	fb02 f303 	mul.w	r3, r2, r3
 800bdb6:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3714      	adds	r7, #20
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
	...

0800bdc8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	6039      	str	r1, [r7, #0]
 800bdd2:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800bdd4:	79fb      	ldrb	r3, [r7, #7]
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	2b0f      	cmp	r3, #15
 800bdda:	d857      	bhi.n	800be8c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc4>
 800bddc:	a201      	add	r2, pc, #4	; (adr r2, 800bde4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 800bdde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde2:	bf00      	nop
 800bde4:	0800be2d 	.word	0x0800be2d
 800bde8:	0800be45 	.word	0x0800be45
 800bdec:	0800be55 	.word	0x0800be55
 800bdf0:	0800be65 	.word	0x0800be65
 800bdf4:	0800be8d 	.word	0x0800be8d
 800bdf8:	0800be75 	.word	0x0800be75
 800bdfc:	0800be3d 	.word	0x0800be3d
 800be00:	0800be7d 	.word	0x0800be7d
 800be04:	0800be5d 	.word	0x0800be5d
 800be08:	0800be25 	.word	0x0800be25
 800be0c:	0800be35 	.word	0x0800be35
 800be10:	0800be85 	.word	0x0800be85
 800be14:	0800be6d 	.word	0x0800be6d
 800be18:	0800be8d 	.word	0x0800be8d
 800be1c:	0800be8d 	.word	0x0800be8d
 800be20:	0800be4d 	.word	0x0800be4d
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	2202      	movs	r2, #2
 800be28:	601a      	str	r2, [r3, #0]
      break;
 800be2a:	e031      	b.n	800be90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat32:
      *size = sizeof(float);
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	2204      	movs	r2, #4
 800be30:	601a      	str	r2, [r3, #0]
      break;
 800be32:	e02d      	b.n	800be90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat64:
      *size = sizeof(double);
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	2208      	movs	r2, #8
 800be38:	601a      	str	r2, [r3, #0]
      break;
 800be3a:	e029      	b.n	800be90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	2202      	movs	r2, #2
 800be40:	601a      	str	r2, [r3, #0]
      break;
 800be42:	e025      	b.n	800be90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	2204      	movs	r2, #4
 800be48:	601a      	str	r2, [r3, #0]
      break;
 800be4a:	e021      	b.n	800be90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	2204      	movs	r2, #4
 800be50:	601a      	str	r2, [r3, #0]
      break;
 800be52:	e01d      	b.n	800be90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	2201      	movs	r2, #1
 800be58:	601a      	str	r2, [r3, #0]
      break;
 800be5a:	e019      	b.n	800be90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	2201      	movs	r2, #1
 800be60:	601a      	str	r2, [r3, #0]
      break;
 800be62:	e015      	b.n	800be90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	2208      	movs	r2, #8
 800be68:	601a      	str	r2, [r3, #0]
      break;
 800be6a:	e011      	b.n	800be90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	2208      	movs	r2, #8
 800be70:	601a      	str	r2, [r3, #0]
      break;
 800be72:	e00d      	b.n	800be90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteBool:
      *size = sizeof(bool);
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	2201      	movs	r2, #1
 800be78:	601a      	str	r2, [r3, #0]
      break;
 800be7a:	e009      	b.n	800be90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	2208      	movs	r2, #8
 800be80:	601a      	str	r2, [r3, #0]
      break;
 800be82:	e005      	b.n	800be90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2210      	movs	r2, #16
 800be88:	601a      	str	r2, [r3, #0]
      break;
 800be8a:	e001      	b.n	800be90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    default:
      return kTfLiteError;
 800be8c:	2301      	movs	r3, #1
 800be8e:	e000      	b.n	800be92 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xca>
  }
  return kTfLiteOk;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop

0800bea0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b088      	sub	sp, #32
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	607a      	str	r2, [r7, #4]
 800beac:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 800beae:	2301      	movs	r3, #1
 800beb0:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f7ff fe6a 	bl	800bb8c <_ZNK6tflite6Tensor5shapeEv>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	bf14      	ite	ne
 800bebe:	2301      	movne	r3, #1
 800bec0:	2300      	moveq	r3, #0
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d022      	beq.n	800bf0e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800bec8:	2300      	movs	r3, #0
 800beca:	61bb      	str	r3, [r7, #24]
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f7ff fe5d 	bl	800bb8c <_ZNK6tflite6Tensor5shapeEv>
 800bed2:	4603      	mov	r3, r0
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 f884 	bl	800bfe2 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800beda:	4602      	mov	r2, r0
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	4293      	cmp	r3, r2
 800bee0:	bf34      	ite	cc
 800bee2:	2301      	movcc	r3, #1
 800bee4:	2300      	movcs	r3, #0
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d010      	beq.n	800bf0e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f7ff fe4d 	bl	800bb8c <_ZNK6tflite6Tensor5shapeEv>
 800bef2:	4603      	mov	r3, r0
 800bef4:	69b9      	ldr	r1, [r7, #24]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fd fa46 	bl	8009388 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800befc:	4602      	mov	r2, r0
 800befe:	69fb      	ldr	r3, [r7, #28]
 800bf00:	fb02 f303 	mul.w	r3, r2, r3
 800bf04:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	61bb      	str	r3, [r7, #24]
 800bf0c:	e7de      	b.n	800becc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	f7ff fe4a 	bl	800bba8 <_ZNK6tflite6Tensor4typeEv>
 800bf14:	4603      	mov	r3, r0
 800bf16:	4618      	mov	r0, r3
 800bf18:	f107 0315 	add.w	r3, r7, #21
 800bf1c:	683a      	ldr	r2, [r7, #0]
 800bf1e:	4619      	mov	r1, r3
 800bf20:	f7fc fde8 	bl	8008af4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800bf24:	4603      	mov	r3, r0
 800bf26:	75fb      	strb	r3, [r7, #23]
 800bf28:	7dfb      	ldrb	r3, [r7, #23]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	e013      	b.n	800bf5a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 800bf32:	7d7b      	ldrb	r3, [r7, #21]
 800bf34:	6879      	ldr	r1, [r7, #4]
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7ff ff46 	bl	800bdc8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	75bb      	strb	r3, [r7, #22]
 800bf40:	7dbb      	ldrb	r3, [r7, #22]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d001      	beq.n	800bf4a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 800bf46:	7dbb      	ldrb	r3, [r7, #22]
 800bf48:	e007      	b.n	800bf5a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	69fa      	ldr	r2, [r7, #28]
 800bf50:	fb02 f203 	mul.w	r2, r2, r3
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3720      	adds	r7, #32
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b086      	sub	sp, #24
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
 800bf6a:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d101      	bne.n	800bf76 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 800bf72:	f018 ffa4 	bl	8024ebe <abort>

  int element_count = 1;
 800bf76:	2301      	movs	r3, #1
 800bf78:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d015      	beq.n	800bfae <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 800bf82:	2300      	movs	r3, #0
 800bf84:	613b      	str	r3, [r7, #16]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	da0d      	bge.n	800bfae <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	685a      	ldr	r2, [r3, #4]
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4413      	add	r3, r2
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	fb02 f303 	mul.w	r3, r2, r3
 800bfa4:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	613b      	str	r3, [r7, #16]
 800bfac:	e7eb      	b.n	800bf86 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	7a1b      	ldrb	r3, [r3, #8]
 800bfb2:	f107 0208 	add.w	r2, r7, #8
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7ff ff05 	bl	800bdc8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	73fb      	strb	r3, [r7, #15]
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d001      	beq.n	800bfcc <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 800bfc8:	7bfb      	ldrb	r3, [r7, #15]
 800bfca:	e006      	b.n	800bfda <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	fb02 f203 	mul.w	r2, r2, r3
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3718      	adds	r7, #24
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b082      	sub	sp, #8
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7fd f9be 	bl	800936c <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800bff0:	4603      	mov	r3, r0
 800bff2:	4618      	mov	r0, r3
 800bff4:	3708      	adds	r7, #8
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b082      	sub	sp, #8
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2108      	movs	r1, #8
 800c006:	4618      	mov	r0, r3
 800c008:	f001 fca9 	bl	800d95e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800c00c:	4603      	mov	r3, r0
  }
 800c00e:	4618      	mov	r0, r3
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 800c016:	b580      	push	{r7, lr}
 800c018:	b082      	sub	sp, #8
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	210a      	movs	r1, #10
 800c022:	4618      	mov	r0, r3
 800c024:	f001 fcab 	bl	800d97e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800c028:	4603      	mov	r3, r0
  }
 800c02a:	4618      	mov	r0, r3
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 800c032:	b580      	push	{r7, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	2110      	movs	r1, #16
 800c040:	4618      	mov	r0, r3
 800c042:	f7fd f923 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800c046:	4603      	mov	r3, r0
  }
 800c048:	4618      	mov	r0, r3
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	2108      	movs	r1, #8
 800c05e:	4618      	mov	r0, r3
 800c060:	f001 fc9d 	bl	800d99e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800c064:	4603      	mov	r3, r0
  }
 800c066:	4618      	mov	r0, r3
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 800c06e:	b580      	push	{r7, lr}
 800c070:	b082      	sub	sp, #8
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	210c      	movs	r1, #12
 800c07a:	4618      	mov	r0, r3
 800c07c:	f001 fcad 	bl	800d9da <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800c080:	4603      	mov	r3, r0
  }
 800c082:	4618      	mov	r0, r3
 800c084:	3708      	adds	r7, #8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b082      	sub	sp, #8
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	210e      	movs	r1, #14
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fd f8c8 	bl	800922e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	bf14      	ite	ne
 800c0a4:	2301      	movne	r3, #1
 800c0a6:	2300      	moveq	r3, #0
 800c0a8:	b2db      	uxtb	r3, r3
  }
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b082      	sub	sp, #8
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2106      	movs	r1, #6
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fd f902 	bl	80092c8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800c0c4:	4603      	mov	r3, r0
  }
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3708      	adds	r7, #8
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b082      	sub	sp, #8
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2108      	movs	r1, #8
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fd f8f4 	bl	80092c8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800c0e0:	4603      	mov	r3, r0
  }
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3708      	adds	r7, #8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <_ZNK6tflite8SubGraph7tensorsEv>:
    VT_INPUTS = 6,
    VT_OUTPUTS = 8,
    VT_OPERATORS = 10,
    VT_NAME = 12
  };
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b082      	sub	sp, #8
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2104      	movs	r1, #4
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f001 fc7f 	bl	800d9fa <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800c0fc:	4603      	mov	r3, r0
  }
 800c0fe:	4618      	mov	r0, r3
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800c106:	b580      	push	{r7, lr}
 800c108:	b082      	sub	sp, #8
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2106      	movs	r1, #6
 800c112:	4618      	mov	r0, r3
 800c114:	f7fd f8d8 	bl	80092c8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800c118:	4603      	mov	r3, r0
  }
 800c11a:	4618      	mov	r0, r3
 800c11c:	3708      	adds	r7, #8
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800c122:	b580      	push	{r7, lr}
 800c124:	b082      	sub	sp, #8
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2108      	movs	r1, #8
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fd f8ca 	bl	80092c8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800c134:	4603      	mov	r3, r0
  }
 800c136:	4618      	mov	r0, r3
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 800c13e:	b580      	push	{r7, lr}
 800c140:	b082      	sub	sp, #8
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	210a      	movs	r1, #10
 800c14a:	4618      	mov	r0, r3
 800c14c:	f001 fc65 	bl	800da1a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800c150:	4603      	mov	r3, r0
  }
 800c152:	4618      	mov	r0, r3
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <_ZNK6tflite6Buffer4dataEv>:
struct Buffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BufferT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint8_t> *data() const {
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b082      	sub	sp, #8
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2104      	movs	r1, #4
 800c166:	4618      	mov	r0, r3
 800c168:	f001 fbe9 	bl	800d93e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800c16c:	4603      	mov	r3, r0
  }
 800c16e:	4618      	mov	r0, r3
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <_ZNK6tflite8Metadata4nameEv>:
  typedef MetadataT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_BUFFER = 6
  };
  const flatbuffers::String *name() const {
 800c176:	b580      	push	{r7, lr}
 800c178:	b082      	sub	sp, #8
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2104      	movs	r1, #4
 800c182:	4618      	mov	r0, r3
 800c184:	f7fe fc6f 	bl	800aa66 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800c188:	4603      	mov	r3, r0
  }
 800c18a:	4618      	mov	r0, r3
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 800c192:	b580      	push	{r7, lr}
 800c194:	b082      	sub	sp, #8
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	2106      	movs	r1, #6
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f001 fbfc 	bl	800d99e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800c1a6:	4603      	mov	r3, r0
  }
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <_ZNK6tflite5Model9subgraphsEv>:
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2108      	movs	r1, #8
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f001 fc3c 	bl	800da3a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800c1c2:	4603      	mov	r3, r0
  }
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3708      	adds	r7, #8
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	210c      	movs	r1, #12
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f001 fc3e 	bl	800da5a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800c1de:	4603      	mov	r3, r0
  }
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<int32_t> *metadata_buffer() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_METADATA_BUFFER);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2110      	movs	r1, #16
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f001 fc40 	bl	800da7a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800c1fa:	4603      	mov	r3, r0
  }
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	4a04      	ldr	r2, [pc, #16]	; (800c220 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	601a      	str	r2, [r3, #0]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4618      	mov	r0, r3
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr
 800c220:	0802c134 	.word	0x0802c134

0800c224 <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff ffe9 	bl	800c204 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800c232:	2104      	movs	r1, #4
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f018 fbbc 	bl	80249b2 <_ZdlPvj>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4618      	mov	r0, r3
 800c23e:	3708      	adds	r7, #8
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	4a04      	ldr	r2, [pc, #16]	; (800c260 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4618      	mov	r0, r3
 800c256:	370c      	adds	r7, #12
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr
 800c260:	0802c134 	.word	0x0802c134

0800c264 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff ffe7 	bl	800c244 <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 800c276:	4a05      	ldr	r2, [pc, #20]	; (800c28c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	601a      	str	r2, [r3, #0]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	683a      	ldr	r2, [r7, #0]
 800c280:	605a      	str	r2, [r3, #4]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4618      	mov	r0, r3
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	0802c0e0 	.word	0x0802c0e0

0800c290 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	6858      	ldr	r0, [r3, #4]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	330c      	adds	r3, #12
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	68b9      	ldr	r1, [r7, #8]
 800c2ae:	4798      	blx	r3
 800c2b0:	4603      	mov	r3, r0
  }
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 800c2ba:	b480      	push	{r7}
 800c2bc:	b083      	sub	sp, #12
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
 800c2c2:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 800c2c4:	bf00      	nop
 800c2c6:	370c      	adds	r7, #12
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
 800c2dc:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	68ba      	ldr	r2, [r7, #8]
 800c2e2:	601a      	str	r2, [r3, #0]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	605a      	str	r2, [r3, #4]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	683a      	ldr	r2, [r7, #0]
 800c2ee:	609a      	str	r2, [r3, #8]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	69ba      	ldr	r2, [r7, #24]
 800c2f4:	60da      	str	r2, [r3, #12]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3714      	adds	r7, #20
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 800c304:	b580      	push	{r7, lr}
 800c306:	b096      	sub	sp, #88	; 0x58
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
 800c310:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d101      	bne.n	800c31c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 800c318:	f018 fdd1 	bl	8024ebe <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 800c31c:	2300      	movs	r3, #0
 800c31e:	657b      	str	r3, [r7, #84]	; 0x54
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c326:	429a      	cmp	r2, r3
 800c328:	d267      	bcs.n	800c3fa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	6819      	ldr	r1, [r3, #0]
 800c32e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c330:	4613      	mov	r3, r2
 800c332:	005b      	lsls	r3, r3, #1
 800c334:	4413      	add	r3, r2
 800c336:	00db      	lsls	r3, r3, #3
 800c338:	440b      	add	r3, r1
 800c33a:	63fb      	str	r3, [r7, #60]	; 0x3c
    current->output_ptr = &(eval_tensors[i].data.data);
 800c33c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c33e:	4613      	mov	r3, r2
 800c340:	005b      	lsls	r3, r3, #1
 800c342:	4413      	add	r3, r2
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	461a      	mov	r2, r3
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	4413      	add	r3, r2
 800c34c:	461a      	mov	r2, r3
 800c34e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c350:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 800c352:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c354:	4613      	mov	r3, r2
 800c356:	005b      	lsls	r3, r3, #1
 800c358:	4413      	add	r3, r2
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	461a      	mov	r2, r3
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	4413      	add	r3, r2
 800c362:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c364:	4611      	mov	r1, r2
 800c366:	4618      	mov	r0, r3
 800c368:	f7ff fdfb 	bl	800bf62 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800c36c:	4603      	mov	r3, r0
 800c36e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c372:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c376:	2b00      	cmp	r3, #0
 800c378:	d002      	beq.n	800c380 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 800c37a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c37e:	e121      	b.n	800c5c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2c0>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 800c380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c386:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 800c388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c38a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c38e:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 800c390:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c392:	4613      	mov	r3, r2
 800c394:	005b      	lsls	r3, r3, #1
 800c396:	4413      	add	r3, r2
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	461a      	mov	r2, r3
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	4413      	add	r3, r2
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d113      	bne.n	800c3ce <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 800c3a6:	68b8      	ldr	r0, [r7, #8]
 800c3a8:	f7ff fe9f 	bl	800c0ea <_ZNK6tflite8SubGraph7tensorsEv>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f001 fbfb 	bl	800dbac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7ff fe66 	bl	800c08a <_ZNK6tflite6Tensor11is_variableEv>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	f083 0301 	eor.w	r3, r3, #1
 800c3c4:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	e000      	b.n	800c3d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d2:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d007      	beq.n	800c3ea <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 800c3da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3e6:	611a      	str	r2, [r3, #16]
 800c3e8:	e003      	b.n	800c3f2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 800c3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3f0:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 800c3f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	657b      	str	r3, [r7, #84]	; 0x54
 800c3f8:	e792      	b.n	800c320 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	653b      	str	r3, [r7, #80]	; 0x50
 800c3fe:	68b8      	ldr	r0, [r7, #8]
 800c400:	f7ff fe81 	bl	800c106 <_ZNK6tflite8SubGraph6inputsEv>
 800c404:	4603      	mov	r3, r0
 800c406:	4618      	mov	r0, r3
 800c408:	f7fc ffb0 	bl	800936c <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800c40c:	4602      	mov	r2, r0
 800c40e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c410:	4293      	cmp	r3, r2
 800c412:	bf34      	ite	cc
 800c414:	2301      	movcc	r3, #1
 800c416:	2300      	movcs	r3, #0
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d018      	beq.n	800c450 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x14c>
    const int tensor_index = subgraph->inputs()->Get(i);
 800c41e:	68b8      	ldr	r0, [r7, #8]
 800c420:	f7ff fe71 	bl	800c106 <_ZNK6tflite8SubGraph6inputsEv>
 800c424:	4603      	mov	r3, r0
 800c426:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c428:	4618      	mov	r0, r3
 800c42a:	f7fc ffad 	bl	8009388 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800c42e:	61b8      	str	r0, [r7, #24]
    AllocationInfo* current = &info_[tensor_index];
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6819      	ldr	r1, [r3, #0]
 800c434:	69ba      	ldr	r2, [r7, #24]
 800c436:	4613      	mov	r3, r2
 800c438:	005b      	lsls	r3, r3, #1
 800c43a:	4413      	add	r3, r2
 800c43c:	00db      	lsls	r3, r3, #3
 800c43e:	440b      	add	r3, r1
 800c440:	617b      	str	r3, [r7, #20]
    current->first_created = 0;
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	2200      	movs	r2, #0
 800c446:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800c448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c44a:	3301      	adds	r3, #1
 800c44c:	653b      	str	r3, [r7, #80]	; 0x50
 800c44e:	e7d6      	b.n	800c3fe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xfa>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800c450:	2300      	movs	r3, #0
 800c452:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c454:	68b8      	ldr	r0, [r7, #8]
 800c456:	f7ff fe64 	bl	800c122 <_ZNK6tflite8SubGraph7outputsEv>
 800c45a:	4603      	mov	r3, r0
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7fc ff85 	bl	800936c <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800c462:	4602      	mov	r2, r0
 800c464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c466:	4293      	cmp	r3, r2
 800c468:	bf34      	ite	cc
 800c46a:	2301      	movcc	r3, #1
 800c46c:	2300      	movcs	r3, #0
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	2b00      	cmp	r3, #0
 800c472:	d021      	beq.n	800c4b8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
    const int tensor_index = subgraph->outputs()->Get(i);
 800c474:	68b8      	ldr	r0, [r7, #8]
 800c476:	f7ff fe54 	bl	800c122 <_ZNK6tflite8SubGraph7outputsEv>
 800c47a:	4603      	mov	r3, r0
 800c47c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c47e:	4618      	mov	r0, r3
 800c480:	f7fc ff82 	bl	8009388 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800c484:	6238      	str	r0, [r7, #32]
    AllocationInfo* current = &info_[tensor_index];
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6819      	ldr	r1, [r3, #0]
 800c48a:	6a3a      	ldr	r2, [r7, #32]
 800c48c:	4613      	mov	r3, r2
 800c48e:	005b      	lsls	r3, r3, #1
 800c490:	4413      	add	r3, r2
 800c492:	00db      	lsls	r3, r3, #3
 800c494:	440b      	add	r3, r1
 800c496:	61fb      	str	r3, [r7, #28]
    current->last_used = subgraph->operators()->size() - 1;
 800c498:	68b8      	ldr	r0, [r7, #8]
 800c49a:	f7ff fe50 	bl	800c13e <_ZNK6tflite8SubGraph9operatorsEv>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f001 fba9 	bl	800dbf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800c4b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4b6:	e7cd      	b.n	800c454 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x150>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 800c4b8:	68b8      	ldr	r0, [r7, #8]
 800c4ba:	f7ff fe40 	bl	800c13e <_ZNK6tflite8SubGraph9operatorsEv>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f001 fb99 	bl	800dbf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	3b01      	subs	r3, #1
 800c4ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	db77      	blt.n	800c5c2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2be>
    const auto* op = subgraph->operators()->Get(i);
 800c4d2:	68b8      	ldr	r0, [r7, #8]
 800c4d4:	f7ff fe33 	bl	800c13e <_ZNK6tflite8SubGraph9operatorsEv>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4dc:	4619      	mov	r1, r3
 800c4de:	4610      	mov	r0, r2
 800c4e0:	f001 fb98 	bl	800dc14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800c4e4:	6378      	str	r0, [r7, #52]	; 0x34
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	647b      	str	r3, [r7, #68]	; 0x44
 800c4ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c4ec:	f7ff fde1 	bl	800c0b2 <_ZNK6tflite8Operator6inputsEv>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fc ff3a 	bl	800936c <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	bf34      	ite	cc
 800c500:	2301      	movcc	r3, #1
 800c502:	2300      	movcs	r3, #0
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2b00      	cmp	r3, #0
 800c508:	d022      	beq.n	800c550 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x24c>
      const int tensor_index = op->inputs()->Get(n);
 800c50a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c50c:	f7ff fdd1 	bl	800c0b2 <_ZNK6tflite8Operator6inputsEv>
 800c510:	4603      	mov	r3, r0
 800c512:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c514:	4618      	mov	r0, r3
 800c516:	f7fc ff37 	bl	8009388 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800c51a:	62b8      	str	r0, [r7, #40]	; 0x28
      AllocationInfo* current = &info_[tensor_index];
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6819      	ldr	r1, [r3, #0]
 800c520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c522:	4613      	mov	r3, r2
 800c524:	005b      	lsls	r3, r3, #1
 800c526:	4413      	add	r3, r2
 800c528:	00db      	lsls	r3, r3, #3
 800c52a:	440b      	add	r3, r1
 800c52c:	627b      	str	r3, [r7, #36]	; 0x24
      if (((current->last_used == -1) || (current->last_used < i))) {
 800c52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c536:	d004      	beq.n	800c542 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23e>
 800c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c53e:	429a      	cmp	r2, r3
 800c540:	dd02      	ble.n	800c548 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x244>
        current->last_used = i;
 800c542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c546:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800c548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c54a:	3301      	adds	r3, #1
 800c54c:	647b      	str	r3, [r7, #68]	; 0x44
 800c54e:	e7cc      	b.n	800c4ea <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1e6>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800c550:	2300      	movs	r3, #0
 800c552:	643b      	str	r3, [r7, #64]	; 0x40
 800c554:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c556:	f7ff fdba 	bl	800c0ce <_ZNK6tflite8Operator7outputsEv>
 800c55a:	4603      	mov	r3, r0
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fc ff05 	bl	800936c <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800c562:	4602      	mov	r2, r0
 800c564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c566:	4293      	cmp	r3, r2
 800c568:	bf34      	ite	cc
 800c56a:	2301      	movcc	r3, #1
 800c56c:	2300      	movcs	r3, #0
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b00      	cmp	r3, #0
 800c572:	d022      	beq.n	800c5ba <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2b6>
      const int tensor_index = op->outputs()->Get(n);
 800c574:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c576:	f7ff fdaa 	bl	800c0ce <_ZNK6tflite8Operator7outputsEv>
 800c57a:	4603      	mov	r3, r0
 800c57c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c57e:	4618      	mov	r0, r3
 800c580:	f7fc ff02 	bl	8009388 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800c584:	6338      	str	r0, [r7, #48]	; 0x30
      AllocationInfo* current = &info_[tensor_index];
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6819      	ldr	r1, [r3, #0]
 800c58a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c58c:	4613      	mov	r3, r2
 800c58e:	005b      	lsls	r3, r3, #1
 800c590:	4413      	add	r3, r2
 800c592:	00db      	lsls	r3, r3, #3
 800c594:	440b      	add	r3, r1
 800c596:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((current->first_created == -1) || (current->first_created > i)) {
 800c598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5a0:	d004      	beq.n	800c5ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a8>
 800c5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	da02      	bge.n	800c5b2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ae>
        current->first_created = i;
 800c5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5b0:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800c5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	643b      	str	r3, [r7, #64]	; 0x40
 800c5b8:	e7cc      	b.n	800c554 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x250>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 800c5ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5c0:	e784      	b.n	800c4cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c8>
      }
    }
  }
  return kTfLiteOk;
 800c5c2:	2300      	movs	r3, #0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3758      	adds	r7, #88	; 0x58
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b08c      	sub	sp, #48	; 0x30
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 800c5d8:	68b8      	ldr	r0, [r7, #8]
 800c5da:	f7ff fe05 	bl	800c1e8 <_ZNK6tflite5Model8metadataEv>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	bf14      	ite	ne
 800c5e4:	2301      	movne	r3, #1
 800c5e6:	2300      	moveq	r3, #0
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d060      	beq.n	800c6b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5f2:	68b8      	ldr	r0, [r7, #8]
 800c5f4:	f7ff fdf8 	bl	800c1e8 <_ZNK6tflite5Model8metadataEv>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f001 fb98 	bl	800dd30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800c600:	4602      	mov	r2, r0
 800c602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c604:	4293      	cmp	r3, r2
 800c606:	bf34      	ite	cc
 800c608:	2301      	movcc	r3, #1
 800c60a:	2300      	movcs	r3, #0
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d04e      	beq.n	800c6b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 800c612:	68b8      	ldr	r0, [r7, #8]
 800c614:	f7ff fde8 	bl	800c1e8 <_ZNK6tflite5Model8metadataEv>
 800c618:	4603      	mov	r3, r0
 800c61a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c61c:	4618      	mov	r0, r3
 800c61e:	f001 fb95 	bl	800dd4c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 800c622:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800c624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c626:	f7ff fda6 	bl	800c176 <_ZNK6tflite8Metadata4nameEv>
 800c62a:	4603      	mov	r3, r0
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7fe f921 	bl	800a874 <_ZNK11flatbuffers6String5c_strEv>
 800c632:	4603      	mov	r3, r0
 800c634:	2217      	movs	r2, #23
 800c636:	4921      	ldr	r1, [pc, #132]	; (800c6bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 800c638:	4618      	mov	r0, r3
 800c63a:	f019 f8ff 	bl	802583c <strncmp>
 800c63e:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 800c640:	2b00      	cmp	r3, #0
 800c642:	bf0c      	ite	eq
 800c644:	2301      	moveq	r3, #1
 800c646:	2300      	movne	r3, #0
 800c648:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d02c      	beq.n	800c6a8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 800c64e:	68b8      	ldr	r0, [r7, #8]
 800c650:	f7ff fdbc 	bl	800c1cc <_ZNK6tflite5Model7buffersEv>
 800c654:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 800c656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c658:	f7ff fd9b 	bl	800c192 <_ZNK6tflite8Metadata6bufferEv>
 800c65c:	4603      	mov	r3, r0
 800c65e:	4619      	mov	r1, r3
 800c660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c662:	f001 fba7 	bl	800ddb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800c666:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 800c668:	6a38      	ldr	r0, [r7, #32]
 800c66a:	f7ff fd76 	bl	800c15a <_ZNK6tflite6Buffer4dataEv>
 800c66e:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 800c670:	69f8      	ldr	r0, [r7, #28]
 800c672:	f001 fbad 	bl	800ddd0 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800c676:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	3308      	adds	r3, #8
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	697a      	ldr	r2, [r7, #20]
 800c690:	429a      	cmp	r2, r3
 800c692:	d009      	beq.n	800c6a8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	68d8      	ldr	r0, [r3, #12]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	697a      	ldr	r2, [r7, #20]
 800c69e:	4908      	ldr	r1, [pc, #32]	; (800c6c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 800c6a0:	f7fb ff22 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e004      	b.n	800c6b2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800c6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6ae:	e7a0      	b.n	800c5f2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3730      	adds	r7, #48	; 0x30
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	0802c0bc 	.word	0x0802c0bc
 800c6c0:	08027384 	.word	0x08027384

0800c6c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 800c6c4:	b480      	push	{r7}
 800c6c6:	b089      	sub	sp, #36	; 0x24
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	61fb      	str	r3, [r7, #28]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	685a      	ldr	r2, [r3, #4]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	4413      	add	r3, r2
 800c6e0:	69fa      	ldr	r2, [r7, #28]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d232      	bcs.n	800c74c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	69fa      	ldr	r2, [r7, #28]
 800c6ec:	1ad3      	subs	r3, r2, r3
 800c6ee:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 800c6f0:	68ba      	ldr	r2, [r7, #8]
 800c6f2:	4413      	add	r3, r2
 800c6f4:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	69fa      	ldr	r2, [r7, #28]
 800c6fc:	1ad3      	subs	r3, r2, r3
 800c6fe:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	4413      	add	r3, r2
 800c704:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6819      	ldr	r1, [r3, #0]
 800c70a:	69fa      	ldr	r2, [r7, #28]
 800c70c:	4613      	mov	r3, r2
 800c70e:	005b      	lsls	r3, r3, #1
 800c710:	4413      	add	r3, r2
 800c712:	00db      	lsls	r3, r3, #3
 800c714:	440b      	add	r3, r1
 800c716:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 800c718:	697a      	ldr	r2, [r7, #20]
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 800c71e:	69bb      	ldr	r3, [r7, #24]
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	685a      	ldr	r2, [r3, #4]
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	685a      	ldr	r2, [r3, #4]
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c73c:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	2201      	movs	r2, #1
 800c742:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	3301      	adds	r3, #1
 800c748:	61fb      	str	r3, [r7, #28]
 800c74a:	e7c4      	b.n	800c6d6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3724      	adds	r7, #36	; 0x24
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800c75a:	b590      	push	{r4, r7, lr}
 800c75c:	b08b      	sub	sp, #44	; 0x2c
 800c75e:	af02      	add	r7, sp, #8
 800c760:	60f8      	str	r0, [r7, #12]
 800c762:	60b9      	str	r1, [r7, #8]
 800c764:	607a      	str	r2, [r7, #4]
 800c766:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800c768:	2300      	movs	r3, #0
 800c76a:	61fb      	str	r3, [r7, #28]
 800c76c:	69fa      	ldr	r2, [r7, #28]
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	429a      	cmp	r2, r3
 800c772:	d247      	bcs.n	800c804 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 800c774:	69fa      	ldr	r2, [r7, #28]
 800c776:	4613      	mov	r3, r2
 800c778:	005b      	lsls	r3, r3, #1
 800c77a:	4413      	add	r3, r2
 800c77c:	00db      	lsls	r3, r3, #3
 800c77e:	461a      	mov	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4413      	add	r3, r2
 800c784:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 800c786:	69bb      	ldr	r3, [r7, #24]
 800c788:	7d1b      	ldrb	r3, [r3, #20]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d036      	beq.n	800c7fc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 800c78e:	69bb      	ldr	r3, [r7, #24]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2110      	movs	r1, #16
 800c794:	4618      	mov	r0, r3
 800c796:	f7ff faff 	bl	800bd98 <_ZN6tflite11AlignSizeUpEjj>
 800c79a:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	691b      	ldr	r3, [r3, #16]
 800c7a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7a4:	d114      	bne.n	800c7d0 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	3308      	adds	r3, #8
 800c7ac:	681c      	ldr	r4, [r3, #0]
 800c7ae:	697a      	ldr	r2, [r7, #20]
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	6899      	ldr	r1, [r3, #8]
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	9300      	str	r3, [sp, #0]
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	68f9      	ldr	r1, [r7, #12]
 800c7be:	68b8      	ldr	r0, [r7, #8]
 800c7c0:	47a0      	blx	r4
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	74bb      	strb	r3, [r7, #18]
 800c7c6:	7cbb      	ldrb	r3, [r7, #18]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d017      	beq.n	800c7fc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 800c7cc:	7cbb      	ldrb	r3, [r7, #18]
 800c7ce:	e01a      	b.n	800c806 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 800c7d0:	6979      	ldr	r1, [r7, #20]
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	6898      	ldr	r0, [r3, #8]
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	69ba      	ldr	r2, [r7, #24]
 800c7dc:	6912      	ldr	r2, [r2, #16]
 800c7de:	9201      	str	r2, [sp, #4]
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	460a      	mov	r2, r1
 800c7e6:	68f9      	ldr	r1, [r7, #12]
 800c7e8:	68b8      	ldr	r0, [r7, #8]
 800c7ea:	f00b fc8d 	bl	8018108 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	74fb      	strb	r3, [r7, #19]
 800c7f2:	7cfb      	ldrb	r3, [r7, #19]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d001      	beq.n	800c7fc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 800c7f8:	7cfb      	ldrb	r3, [r7, #19]
 800c7fa:	e004      	b.n	800c806 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	3301      	adds	r3, #1
 800c800:	61fb      	str	r3, [r7, #28]
 800c802:	e7b3      	b.n	800c76c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3724      	adds	r7, #36	; 0x24
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd90      	pop	{r4, r7, pc}

0800c80e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800c80e:	b590      	push	{r4, r7, lr}
 800c810:	b08b      	sub	sp, #44	; 0x2c
 800c812:	af00      	add	r7, sp, #0
 800c814:	60f8      	str	r0, [r7, #12]
 800c816:	60b9      	str	r1, [r7, #8]
 800c818:	607a      	str	r2, [r7, #4]
 800c81a:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 800c81c:	2300      	movs	r3, #0
 800c81e:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800c820:	2300      	movs	r3, #0
 800c822:	623b      	str	r3, [r7, #32]
 800c824:	6a3a      	ldr	r2, [r7, #32]
 800c826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c828:	429a      	cmp	r2, r3
 800c82a:	d22e      	bcs.n	800c88a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 800c82c:	6a3a      	ldr	r2, [r7, #32]
 800c82e:	4613      	mov	r3, r2
 800c830:	005b      	lsls	r3, r3, #1
 800c832:	4413      	add	r3, r2
 800c834:	00db      	lsls	r3, r3, #3
 800c836:	461a      	mov	r2, r3
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	4413      	add	r3, r2
 800c83c:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	7d1b      	ldrb	r3, [r3, #20]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d01d      	beq.n	800c882 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 800c846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c84a:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	3314      	adds	r3, #20
 800c852:	681c      	ldr	r4, [r3, #0]
 800c854:	f107 0314 	add.w	r3, r7, #20
 800c858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c85a:	68f9      	ldr	r1, [r7, #12]
 800c85c:	68b8      	ldr	r0, [r7, #8]
 800c85e:	47a0      	blx	r4
 800c860:	4603      	mov	r3, r0
 800c862:	76fb      	strb	r3, [r7, #27]
 800c864:	7efb      	ldrb	r3, [r7, #27]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d001      	beq.n	800c86e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 800c86a:	7efb      	ldrb	r3, [r7, #27]
 800c86c:	e00e      	b.n	800c88c <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	4619      	mov	r1, r3
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	440a      	add	r2, r1
 800c87a:	601a      	str	r2, [r3, #0]
      ++planner_index;
 800c87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87e:	3301      	adds	r3, #1
 800c880:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800c882:	6a3b      	ldr	r3, [r7, #32]
 800c884:	3301      	adds	r3, #1
 800c886:	623b      	str	r3, [r7, #32]
 800c888:	e7cc      	b.n	800c824 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	372c      	adds	r7, #44	; 0x2c
 800c890:	46bd      	mov	sp, r7
 800c892:	bd90      	pop	{r4, r7, pc}

0800c894 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f7ff fbd4 	bl	800c050 <_ZNK6tflite6Tensor6bufferEv>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	6838      	ldr	r0, [r7, #0]
 800c8ae:	f001 fa81 	bl	800ddb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800c8b2:	6138      	str	r0, [r7, #16]
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d015      	beq.n	800c8e6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 800c8ba:	6938      	ldr	r0, [r7, #16]
 800c8bc:	f7ff fc4d 	bl	800c15a <_ZNK6tflite6Buffer4dataEv>
 800c8c0:	60f8      	str	r0, [r7, #12]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d00e      	beq.n	800c8e6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f001 f8e6 	bl	800da9a <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	bf14      	ite	ne
 800c8d4:	2301      	movne	r3, #1
 800c8d6:	2300      	moveq	r3, #0
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d003      	beq.n	800c8e6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f001 fa76 	bl	800ddd0 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800c8e4:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 800c8e6:	697b      	ldr	r3, [r7, #20]
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3718      	adds	r7, #24
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 800c8f0:	b590      	push	{r4, r7, lr}
 800c8f2:	b08d      	sub	sp, #52	; 0x34
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	607a      	str	r2, [r7, #4]
 800c8fa:	603b      	str	r3, [r7, #0]
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 800c900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c902:	2b00      	cmp	r3, #0
 800c904:	d101      	bne.n	800c90a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 800c906:	f018 fada 	bl	8024ebe <abort>

  *result = {};
 800c90a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c90c:	4618      	mov	r0, r3
 800c90e:	2340      	movs	r3, #64	; 0x40
 800c910:	461a      	mov	r2, r3
 800c912:	2100      	movs	r1, #0
 800c914:	f018 fb76 	bl	8025004 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7ff f945 	bl	800bba8 <_ZNK6tflite6Tensor4typeEv>
 800c91e:	4603      	mov	r3, r0
 800c920:	4618      	mov	r0, r3
 800c922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c924:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c926:	4619      	mov	r1, r3
 800c928:	f7fc f8e4 	bl	8008af4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800c92c:	4603      	mov	r3, r0
 800c92e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c932:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c936:	2b00      	cmp	r3, #0
 800c938:	d002      	beq.n	800c940 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 800c93a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c93e:	e127      	b.n	800cb90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f7ff fba2 	bl	800c08a <_ZNK6tflite6Tensor11is_variableEv>
 800c946:	4603      	mov	r3, r0
 800c948:	461a      	mov	r2, r3
 800c94a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c94c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 800c950:	6839      	ldr	r1, [r7, #0]
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7ff ff9e 	bl	800c894 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800c958:	4602      	mov	r2, r0
 800c95a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c95c:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 800c95e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d103      	bne.n	800c96e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 800c966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c968:	2202      	movs	r2, #2
 800c96a:	751a      	strb	r2, [r3, #20]
 800c96c:	e002      	b.n	800c974 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 800c96e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c970:	2201      	movs	r2, #1
 800c972:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 800c974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c976:	f103 0118 	add.w	r1, r3, #24
 800c97a:	f107 0210 	add.w	r2, r7, #16
 800c97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7ff fa8d 	bl	800bea0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 800c986:	4603      	mov	r3, r0
 800c988:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c98c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800c990:	2b00      	cmp	r3, #0
 800c992:	d002      	beq.n	800c99a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 800c994:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800c998:	e0fa      	b.n	800cb90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7ff f8f6 	bl	800bb8c <_ZNK6tflite6Tensor5shapeEv>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	bf0c      	ite	eq
 800c9a6:	2301      	moveq	r3, #1
 800c9a8:	2300      	movne	r3, #0
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d003      	beq.n	800c9b8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800c9b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9b2:	4a79      	ldr	r2, [pc, #484]	; (800cb98 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a8>)
 800c9b4:	609a      	str	r2, [r3, #8]
 800c9b6:	e013      	b.n	800c9e0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f7ff f8e7 	bl	800bb8c <_ZNK6tflite6Tensor5shapeEv>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9c2:	3308      	adds	r3, #8
 800c9c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c9c6:	68f8      	ldr	r0, [r7, #12]
 800c9c8:	f001 fa0e 	bl	800dde8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800c9d2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d002      	beq.n	800c9e0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 800c9da:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c9de:	e0d7      	b.n	800cb90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7ff fb44 	bl	800c06e <_ZNK6tflite6Tensor12quantizationEv>
 800c9e6:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d021      	beq.n	800ca32 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 800c9ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9f0:	f7ff fb03 	bl	800bffa <_ZNK6tflite22QuantizationParameters5scaleEv>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d01b      	beq.n	800ca32 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 800c9fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9fc:	f7ff fafd 	bl	800bffa <_ZNK6tflite22QuantizationParameters5scaleEv>
 800ca00:	4603      	mov	r3, r0
 800ca02:	4618      	mov	r0, r3
 800ca04:	f001 f857 	bl	800dab6 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800ca08:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d011      	beq.n	800ca32 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 800ca0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca10:	f7ff fb01 	bl	800c016 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800ca14:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00b      	beq.n	800ca32 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 800ca1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca1c:	f7ff fafb 	bl	800c016 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800ca20:	4603      	mov	r3, r0
 800ca22:	4618      	mov	r0, r3
 800ca24:	f001 f87e 	bl	800db24 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800ca28:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d001      	beq.n	800ca32 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e000      	b.n	800ca34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 800ca32:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f000 80aa 	beq.w	800cb8e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 800ca3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca3c:	f7ff fadd 	bl	800bffa <_ZNK6tflite22QuantizationParameters5scaleEv>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2100      	movs	r1, #0
 800ca44:	4618      	mov	r0, r3
 800ca46:	f001 f845 	bl	800dad4 <_ZNK11flatbuffers6VectorIfE3GetEm>
 800ca4a:	eef0 7a40 	vmov.f32	s15, s0
 800ca4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca50:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 800ca54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca56:	f7ff fade 	bl	800c016 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f001 f86e 	bl	800db40 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800ca64:	4602      	mov	r2, r0
 800ca66:	460b      	mov	r3, r1
    result->params.zero_point =
 800ca68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca6a:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 800ca6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca6e:	f7ff fac4 	bl	800bffa <_ZNK6tflite22QuantizationParameters5scaleEv>
 800ca72:	4603      	mov	r3, r0
 800ca74:	4618      	mov	r0, r3
 800ca76:	f001 f81e 	bl	800dab6 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 800ca7e:	7afb      	ldrb	r3, [r7, #11]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d009      	beq.n	800ca98 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a8>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	3310      	adds	r3, #16
 800ca8a:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 800ca8c:	2204      	movs	r2, #4
 800ca8e:	210c      	movs	r1, #12
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	4798      	blx	r3
 800ca94:	4603      	mov	r3, r0
 800ca96:	e008      	b.n	800caaa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ba>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	330c      	adds	r3, #12
 800ca9e:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateFromTail(
 800caa0:	2204      	movs	r2, #4
 800caa2:	210c      	movs	r1, #12
 800caa4:	68f8      	ldr	r0, [r7, #12]
 800caa6:	4798      	blx	r3
 800caa8:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 800caaa:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d105      	bne.n	800cabe <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ce>
      TF_LITE_REPORT_ERROR(error_reporter,
 800cab2:	493a      	ldr	r1, [pc, #232]	; (800cb9c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 800cab4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cab6:	f7fb fd17 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 800caba:	2301      	movs	r3, #1
 800cabc:	e068      	b.n	800cb90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800cabe:	7afb      	ldrb	r3, [r7, #11]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d00d      	beq.n	800cae0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f0>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	3310      	adds	r3, #16
 800caca:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 800cacc:	6a38      	ldr	r0, [r7, #32]
 800cace:	f7fb fc81 	bl	80083d4 <TfLiteIntArrayGetSizeInBytes>
 800cad2:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800cad4:	2204      	movs	r2, #4
 800cad6:	4619      	mov	r1, r3
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	47a0      	blx	r4
 800cadc:	4603      	mov	r3, r0
 800cade:	e00c      	b.n	800cafa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20a>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	330c      	adds	r3, #12
 800cae6:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 800cae8:	6a38      	ldr	r0, [r7, #32]
 800caea:	f7fb fc73 	bl	80083d4 <TfLiteIntArrayGetSizeInBytes>
 800caee:	4603      	mov	r3, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 800caf0:	2204      	movs	r2, #4
 800caf2:	4619      	mov	r1, r3
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	47a0      	blx	r4
 800caf8:	4603      	mov	r3, r0
    quantization->zero_point =
 800cafa:	69fa      	ldr	r2, [r7, #28]
 800cafc:	6053      	str	r3, [r2, #4]
    if (quantization->zero_point == nullptr) {
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d105      	bne.n	800cb12 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x222>
      TF_LITE_REPORT_ERROR(error_reporter,
 800cb06:	4926      	ldr	r1, [pc, #152]	; (800cba0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 800cb08:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cb0a:	f7fb fced 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e03e      	b.n	800cb90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800cb12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb14:	f7ff fa71 	bl	800bffa <_ZNK6tflite22QuantizationParameters5scaleEv>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cb1e:	68f8      	ldr	r0, [r7, #12]
 800cb20:	f001 f97b 	bl	800de1a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800cb24:	4603      	mov	r3, r0
 800cb26:	76fb      	strb	r3, [r7, #27]
 800cb28:	7efb      	ldrb	r3, [r7, #27]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d001      	beq.n	800cb32 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x242>
 800cb2e:	7efb      	ldrb	r3, [r7, #27]
 800cb30:	e02e      	b.n	800cb90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	6a3a      	ldr	r2, [r7, #32]
 800cb38:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	3304      	adds	r3, #4
 800cb40:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 800cb42:	2300      	movs	r3, #0
 800cb44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb48:	6a3b      	ldr	r3, [r7, #32]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	da12      	bge.n	800cb74 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x284>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 800cb4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb50:	f7ff fa61 	bl	800c016 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800cb54:	4602      	mov	r2, r0
 800cb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb58:	4619      	mov	r1, r3
 800cb5a:	4610      	mov	r0, r2
 800cb5c:	f000 fff0 	bl	800db40 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800cb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	697a      	ldr	r2, [r7, #20]
 800cb66:	4413      	add	r3, r2
 800cb68:	4602      	mov	r2, r0
 800cb6a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 800cb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6e:	3301      	adds	r3, #1
 800cb70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb72:	e7e8      	b.n	800cb46 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x256>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 800cb74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb76:	f7ff fa5c 	bl	800c032 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 800cb80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb82:	2201      	movs	r2, #1
 800cb84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800cb88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb8a:	69fa      	ldr	r2, [r7, #28]
 800cb8c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3734      	adds	r7, #52	; 0x34
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd90      	pop	{r4, r7, pc}
 800cb98:	0802c0d4 	.word	0x0802c0d4
 800cb9c:	080273d0 	.word	0x080273d0
 800cba0:	08027400 	.word	0x08027400

0800cba4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b086      	sub	sp, #24
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	607a      	str	r2, [r7, #4]
 800cbb0:	603b      	str	r3, [r7, #0]
  *result = {};
 800cbb2:	6a3b      	ldr	r3, [r7, #32]
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	6013      	str	r3, [r2, #0]
 800cbba:	6053      	str	r3, [r2, #4]
 800cbbc:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800cbbe:	68b8      	ldr	r0, [r7, #8]
 800cbc0:	f7fe fff2 	bl	800bba8 <_ZNK6tflite6Tensor4typeEv>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	6a3b      	ldr	r3, [r7, #32]
 800cbca:	3308      	adds	r3, #8
 800cbcc:	683a      	ldr	r2, [r7, #0]
 800cbce:	4619      	mov	r1, r3
 800cbd0:	f7fb ff90 	bl	8008af4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	75fb      	strb	r3, [r7, #23]
 800cbd8:	7dfb      	ldrb	r3, [r7, #23]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d001      	beq.n	800cbe2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 800cbde:	7dfb      	ldrb	r3, [r7, #23]
 800cbe0:	e027      	b.n	800cc32 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 800cbe2:	6879      	ldr	r1, [r7, #4]
 800cbe4:	68b8      	ldr	r0, [r7, #8]
 800cbe6:	f7ff fe55 	bl	800c894 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800cbea:	4602      	mov	r2, r0
 800cbec:	6a3b      	ldr	r3, [r7, #32]
 800cbee:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 800cbf0:	68b8      	ldr	r0, [r7, #8]
 800cbf2:	f7fe ffcb 	bl	800bb8c <_ZNK6tflite6Tensor5shapeEv>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	bf0c      	ite	eq
 800cbfc:	2301      	moveq	r3, #1
 800cbfe:	2300      	movne	r3, #0
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d003      	beq.n	800cc0e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800cc06:	6a3b      	ldr	r3, [r7, #32]
 800cc08:	4a0c      	ldr	r2, [pc, #48]	; (800cc3c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 800cc0a:	605a      	str	r2, [r3, #4]
 800cc0c:	e010      	b.n	800cc30 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800cc0e:	68b8      	ldr	r0, [r7, #8]
 800cc10:	f7fe ffbc 	bl	800bb8c <_ZNK6tflite6Tensor5shapeEv>
 800cc14:	4602      	mov	r2, r0
 800cc16:	6a3b      	ldr	r3, [r7, #32]
 800cc18:	3304      	adds	r3, #4
 800cc1a:	6839      	ldr	r1, [r7, #0]
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f001 f8e3 	bl	800dde8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800cc22:	4603      	mov	r3, r0
 800cc24:	75bb      	strb	r3, [r7, #22]
 800cc26:	7dbb      	ldrb	r3, [r7, #22]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d001      	beq.n	800cc30 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 800cc2c:	7dbb      	ldrb	r3, [r7, #22]
 800cc2e:	e000      	b.n	800cc32 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3718      	adds	r7, #24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	0802c0d4 	.word	0x0802c0d4

0800cc40 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 800cc4c:	4a0c      	ldr	r2, [pc, #48]	; (800cc80 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	601a      	str	r2, [r3, #0]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	68ba      	ldr	r2, [r7, #8]
 800cc56:	605a      	str	r2, [r3, #4]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	60da      	str	r2, [r3, #12]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2200      	movs	r2, #0
 800cc62:	741a      	strb	r2, [r3, #16]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2200      	movs	r2, #0
 800cc68:	615a      	str	r2, [r3, #20]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	619a      	str	r2, [r3, #24]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	4618      	mov	r0, r3
 800cc74:	3714      	adds	r7, #20
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	0802c0f8 	.word	0x0802c0f8

0800cc84 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	4a04      	ldr	r2, [pc, #16]	; (800cca0 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	601a      	str	r2, [r3, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4618      	mov	r0, r3
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	0802c0f8 	.word	0x0802c0f8

0800cca4 <_ZN6tflite14MicroAllocatorD0Ev>:
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f7ff ffe9 	bl	800cc84 <_ZN6tflite14MicroAllocatorD1Ev>
 800ccb2:	211c      	movs	r1, #28
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f017 fe7c 	bl	80249b2 <_ZdlPvj>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 800ccd0:	2110      	movs	r1, #16
 800ccd2:	68f8      	ldr	r0, [r7, #12]
 800ccd4:	f7ff f831 	bl	800bd3a <_ZN6tflite14AlignPointerUpEPhj>
 800ccd8:	6178      	str	r0, [r7, #20]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	441a      	add	r2, r3
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	1ad3      	subs	r3, r2, r3
 800cce4:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 800cce6:	693a      	ldr	r2, [r7, #16]
 800cce8:	6979      	ldr	r1, [r7, #20]
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f003 f96e 	bl	800ffcc <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	6879      	ldr	r1, [r7, #4]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f000 f805 	bl	800cd04 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 800ccfa:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3718      	adds	r7, #24
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 800cd04:	b590      	push	{r4, r7, lr}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d101      	bne.n	800cd18 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 800cd14:	f018 f8d3 	bl	8024ebe <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d101      	bne.n	800cd22 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 800cd1e:	f018 f8ce 	bl	8024ebe <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	330c      	adds	r3, #12
 800cd28:	681b      	ldr	r3, [r3, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 800cd2a:	2204      	movs	r2, #4
 800cd2c:	211c      	movs	r1, #28
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	4798      	blx	r3
 800cd32:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	4619      	mov	r1, r3
 800cd38:	201c      	movs	r0, #28
 800cd3a:	f7fb fc08 	bl	800854e <_ZnwjPv>
 800cd3e:	4604      	mov	r4, r0
 800cd40:	683a      	ldr	r2, [r7, #0]
 800cd42:	6879      	ldr	r1, [r7, #4]
 800cd44:	4620      	mov	r0, r4
 800cd46:	f7ff ff7b 	bl	800cc40 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 800cd4a:	60bc      	str	r4, [r7, #8]
  return allocator;
 800cd4c:	68bb      	ldr	r3, [r7, #8]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3714      	adds	r7, #20
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd90      	pop	{r4, r7, pc}
	...

0800cd58 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:

SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 800cd58:	b5b0      	push	{r4, r5, r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x14>
 800cd68:	f018 f8a9 	bl	8024ebe <abort>

  if (model_is_allocating_) {
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	7c1b      	ldrb	r3, [r3, #16]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d007      	beq.n	800cd84 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	4936      	ldr	r1, [pc, #216]	; (800ce54 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xfc>)
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fb fbb4 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return nullptr;
 800cd80:	2300      	movs	r3, #0
 800cd82:	e063      	b.n	800ce4c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  model_is_allocating_ = true;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2201      	movs	r2, #1
 800cd88:	741a      	strb	r2, [r3, #16]

  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6858      	ldr	r0, [r3, #4]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	685b      	ldr	r3, [r3, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	330c      	adds	r3, #12
 800cd96:	681b      	ldr	r3, [r3, #0]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 800cd98:	2204      	movs	r2, #4
 800cd9a:	2108      	movs	r1, #8
 800cd9c:	4798      	blx	r3
 800cd9e:	60f8      	str	r0, [r7, #12]
  builtin_data_allocator_ =
 800cda0:	68fb      	ldr	r3, [r7, #12]
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
 800cda2:	4619      	mov	r1, r3
 800cda4:	2008      	movs	r0, #8
 800cda6:	f7fb fbd2 	bl	800854e <_ZnwjPv>
 800cdaa:	4604      	mov	r4, r0
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f7ff fa56 	bl	800c264 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  builtin_data_allocator_ =
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	609c      	str	r4, [r3, #8]

  if (InitScratchBufferData() != kTfLiteOk) {
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 fd6f 	bl	800d8a0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	bf14      	ite	ne
 800cdc8:	2301      	movne	r3, #1
 800cdca:	2300      	moveq	r3, #0
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d001      	beq.n	800cdd6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x7e>
    return nullptr;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e03a      	b.n	800ce4c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  // Allocate struct to store eval tensors, nodes and registrations.
  SubgraphAllocations* output = reinterpret_cast<SubgraphAllocations*>(
      memory_allocator_->AllocateFromTail(
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	685d      	ldr	r5, [r3, #4]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
          alignof(SubgraphAllocations)));
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	330c      	adds	r3, #12
 800cde2:	681c      	ldr	r4, [r3, #0]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 800cde4:	6838      	ldr	r0, [r7, #0]
 800cde6:	f7ff f9e3 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800cdea:	4603      	mov	r3, r0
 800cdec:	4618      	mov	r0, r3
 800cdee:	f000 ff37 	bl	800dc60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 800cdf6:	2204      	movs	r2, #4
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	47a0      	blx	r4
 800cdfe:	60b8      	str	r0, [r7, #8]
  if (output == nullptr) {
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d104      	bne.n	800ce10 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
    MicroPrintf("Failed to allocate memory for model metadata.");
 800ce06:	4814      	ldr	r0, [pc, #80]	; (800ce58 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x100>)
 800ce08:	f001 fac2 	bl	800e390 <_Z11MicroPrintfPKcz>
    return nullptr;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	e01d      	b.n	800ce4c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	331c      	adds	r3, #28
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	6839      	ldr	r1, [r7, #0]
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	4798      	blx	r3
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d10a      	bne.n	800ce3c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe4>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	3318      	adds	r3, #24
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	68ba      	ldr	r2, [r7, #8]
 800ce30:	6839      	ldr	r1, [r7, #0]
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	4798      	blx	r3
 800ce36:	4603      	mov	r3, r0
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d001      	beq.n	800ce40 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe8>
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e000      	b.n	800ce42 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xea>
 800ce40:	2300      	movs	r3, #0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d001      	beq.n	800ce4a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf2>
    return nullptr;
 800ce46:	2300      	movs	r3, #0
 800ce48:	e000      	b.n	800ce4c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }
  return output;
 800ce4a:	68bb      	ldr	r3, [r7, #8]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3710      	adds	r7, #16
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bdb0      	pop	{r4, r5, r7, pc}
 800ce54:	08027430 	.word	0x08027430
 800ce58:	08027488 	.word	0x08027488

0800ce5c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, SubgraphAllocations* subgraph_allocations,
    ScratchBufferHandle** scratch_buffer_handles) {
 800ce5c:	b590      	push	{r4, r7, lr}
 800ce5e:	b08b      	sub	sp, #44	; 0x2c
 800ce60:	af02      	add	r7, sp, #8
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	60b9      	str	r1, [r7, #8]
 800ce66:	607a      	str	r2, [r7, #4]
 800ce68:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	7c1b      	ldrb	r3, [r3, #16]
 800ce6e:	f083 0301 	eor.w	r3, r3, #1
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d007      	beq.n	800ce88 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	4936      	ldr	r1, [pc, #216]	; (800cf58 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xfc>)
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7fb fb32 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 800ce84:	2301      	movs	r3, #1
 800ce86:	e062      	b.n	800cf4e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  }

  // TODO(b/187993197): Track scratch buffers for each subgraph.
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800ce88:	2300      	movs	r3, #0
 800ce8a:	61fb      	str	r3, [r7, #28]
 800ce8c:	68b8      	ldr	r0, [r7, #8]
 800ce8e:	f7ff f98f 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800ce92:	4603      	mov	r3, r0
 800ce94:	4618      	mov	r0, r3
 800ce96:	f000 fee3 	bl	800dc60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	bf34      	ite	cc
 800cea2:	2301      	movcc	r3, #1
 800cea4:	2300      	movcs	r3, #0
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d04c      	beq.n	800cf46 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xea>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800ceac:	68b8      	ldr	r0, [r7, #8]
 800ceae:	f7ff f97f 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	69f9      	ldr	r1, [r7, #28]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f000 fee0 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800cebc:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 800cebe:	69bb      	ldr	r3, [r7, #24]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d101      	bne.n	800cec8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x6c>
 800cec4:	f017 fffb 	bl	8024ebe <abort>

    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	3330      	adds	r3, #48	; 0x30
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	6952      	ldr	r2, [r2, #20]
 800ced4:	6839      	ldr	r1, [r7, #0]
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	4798      	blx	r3
 800ceda:	4603      	mov	r3, r0
 800cedc:	75fb      	strb	r3, [r7, #23]
 800cede:	7dfb      	ldrb	r3, [r7, #23]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d001      	beq.n	800cee8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x8c>
 800cee4:	7dfb      	ldrb	r3, [r7, #23]
 800cee6:	e032      	b.n	800cf4e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        scratch_buffer_handles, scratch_buffer_request_count_));
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	332c      	adds	r3, #44	; 0x2c
 800ceee:	681c      	ldr	r4, [r3, #0]
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	00db      	lsls	r3, r3, #3
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	4413      	add	r3, r2
 800cef8:	685a      	ldr	r2, [r3, #4]
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	6819      	ldr	r1, [r3, #0]
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	9300      	str	r3, [sp, #0]
 800cf02:	460b      	mov	r3, r1
 800cf04:	68b9      	ldr	r1, [r7, #8]
 800cf06:	68f8      	ldr	r0, [r7, #12]
 800cf08:	47a0      	blx	r4
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	75bb      	strb	r3, [r7, #22]
 800cf0e:	7dbb      	ldrb	r3, [r7, #22]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d001      	beq.n	800cf18 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xbc>
 800cf14:	7dbb      	ldrb	r3, [r7, #22]
 800cf16:	e01a      	b.n	800cf4e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        model, subgraph_allocations[subgraph_idx].tensors,
        *scratch_buffer_handles, subgraph_idx));
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	3320      	adds	r3, #32
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	69fa      	ldr	r2, [r7, #28]
 800cf22:	00d2      	lsls	r2, r2, #3
 800cf24:	6879      	ldr	r1, [r7, #4]
 800cf26:	440a      	add	r2, r1
 800cf28:	6852      	ldr	r2, [r2, #4]
 800cf2a:	69b9      	ldr	r1, [r7, #24]
 800cf2c:	68f8      	ldr	r0, [r7, #12]
 800cf2e:	4798      	blx	r3
 800cf30:	4603      	mov	r3, r0
 800cf32:	757b      	strb	r3, [r7, #21]
 800cf34:	7d7b      	ldrb	r3, [r7, #21]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d001      	beq.n	800cf3e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe2>
 800cf3a:	7d7b      	ldrb	r3, [r7, #21]
 800cf3c:	e007      	b.n	800cf4e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	3301      	adds	r3, #1
 800cf42:	61fb      	str	r3, [r7, #28]
 800cf44:	e7a2      	b.n	800ce8c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x30>
        subgraph, subgraph_allocations[subgraph_idx].tensors));
  }
  model_is_allocating_ = false;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	741a      	strb	r2, [r3, #16]
  return kTfLiteOk;
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3724      	adds	r7, #36	; 0x24
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd90      	pop	{r4, r7, pc}
 800cf56:	bf00      	nop
 800cf58:	080274b8 	.word	0x080274b8

0800cf5c <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6858      	ldr	r0, [r3, #4]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	330c      	adds	r3, #12
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2210      	movs	r2, #16
 800cf76:	6839      	ldr	r1, [r7, #0]
 800cf78:	4798      	blx	r3
 800cf7a:	4603      	mov	r3, r0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b088      	sub	sp, #32
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
 800cf90:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f000 fca1 	bl	800d8da <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800cf98:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	61bb      	str	r3, [r7, #24]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	695b      	ldr	r3, [r3, #20]
 800cfa6:	69ba      	ldr	r2, [r7, #24]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d20e      	bcs.n	800cfca <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x46>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800cfac:	69bb      	ldr	r3, [r7, #24]
 800cfae:	00db      	lsls	r3, r3, #3
 800cfb0:	697a      	ldr	r2, [r7, #20]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfba:	d102      	bne.n	800cfc2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	61bb      	str	r3, [r7, #24]
 800cfc8:	e7eb      	b.n	800cfa2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x1e>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	2b0b      	cmp	r3, #11
 800cfce:	d908      	bls.n	800cfe2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x5e>
    TF_LITE_REPORT_ERROR(
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	220c      	movs	r2, #12
 800cfd6:	4913      	ldr	r1, [pc, #76]	; (800d024 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xa0>)
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7fb fa85 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e01c      	b.n	800d01c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x98>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	695b      	ldr	r3, [r3, #20]
 800cfe6:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 800cfe8:	697a      	ldr	r2, [r7, #20]
 800cfea:	4413      	add	r3, r2
 800cfec:	613b      	str	r3, [r7, #16]
  *current_request = {};
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	461a      	mov	r2, r3
 800cff2:	2300      	movs	r3, #0
 800cff4:	6013      	str	r3, [r2, #0]
 800cff6:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	68ba      	ldr	r2, [r7, #8]
 800cffc:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d004:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	695b      	ldr	r3, [r3, #20]
 800d00a:	461a      	mov	r2, r3
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	695b      	ldr	r3, [r3, #20]
 800d014:	1c5a      	adds	r2, r3, #1
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 800d01a:	2300      	movs	r3, #0
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3720      	adds	r7, #32
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	08027504 	.word	0x08027504

0800d028 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 800d028:	b580      	push	{r7, lr}
 800d02a:	b086      	sub	sp, #24
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	3308      	adds	r3, #8
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fc4b 	bl	800d8da <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800d044:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800d046:	2300      	movs	r3, #0
 800d048:	617b      	str	r3, [r7, #20]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	695b      	ldr	r3, [r3, #20]
 800d04e:	697a      	ldr	r2, [r7, #20]
 800d050:	429a      	cmp	r2, r3
 800d052:	d211      	bcs.n	800d078 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	00db      	lsls	r3, r3, #3
 800d058:	693a      	ldr	r2, [r7, #16]
 800d05a:	4413      	add	r3, r2
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d062:	d105      	bne.n	800d070 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	00db      	lsls	r3, r3, #3
 800d068:	693a      	ldr	r2, [r7, #16]
 800d06a:	4413      	add	r3, r2
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	3301      	adds	r3, #1
 800d074:	617b      	str	r3, [r7, #20]
 800d076:	e7e8      	b.n	800d04a <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6858      	ldr	r0, [r3, #4]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	3308      	adds	r3, #8
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	6952      	ldr	r2, [r2, #20]
 800d08a:	320c      	adds	r2, #12
 800d08c:	00d1      	lsls	r1, r2, #3
 800d08e:	2204      	movs	r2, #4
 800d090:	4798      	blx	r3
 800d092:	4603      	mov	r3, r0
 800d094:	73fb      	strb	r3, [r7, #15]
 800d096:	7bfb      	ldrb	r3, [r7, #15]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d001      	beq.n	800d0a0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 800d09c:	7bfb      	ldrb	r3, [r7, #15]
 800d09e:	e000      	b.n	800d0a2 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 800d0a0:	2300      	movs	r3, #0
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3718      	adds	r7, #24
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
	...

0800d0ac <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 800d0ac:	b5b0      	push	{r4, r5, r7, lr}
 800d0ae:	b088      	sub	sp, #32
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d101      	bne.n	800d0c2 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 800d0be:	f017 fefe 	bl	8024ebe <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	61fb      	str	r3, [r7, #28]
 800d0c6:	68b8      	ldr	r0, [r7, #8]
 800d0c8:	f7ff f872 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f000 fdc6 	bl	800dc60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	bf34      	ite	cc
 800d0dc:	2301      	movcc	r3, #1
 800d0de:	2300      	movcs	r3, #0
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d039      	beq.n	800d15a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xae>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800d0e6:	68b8      	ldr	r0, [r7, #8]
 800d0e8:	f7ff f862 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	69f9      	ldr	r1, [r7, #28]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f000 fdc3 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d0f6:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d101      	bne.n	800d102 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 800d0fe:	f017 fede 	bl	8024ebe <abort>

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	685d      	ldr	r5, [r3, #4]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	685b      	ldr	r3, [r3, #4]
            sizeof(NodeAndRegistration) * subgraph->operators()->size(),
            alignof(NodeAndRegistration)));
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	330c      	adds	r3, #12
 800d10e:	681c      	ldr	r4, [r3, #0]
            sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 800d110:	69b8      	ldr	r0, [r7, #24]
 800d112:	f7ff f814 	bl	800c13e <_ZNK6tflite8SubGraph9operatorsEv>
 800d116:	4603      	mov	r3, r0
 800d118:	4618      	mov	r0, r3
 800d11a:	f000 fd6d 	bl	800dbf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800d11e:	4603      	mov	r3, r0
 800d120:	222c      	movs	r2, #44	; 0x2c
 800d122:	fb02 f303 	mul.w	r3, r2, r3
        memory_allocator_->AllocateFromTail(
 800d126:	2204      	movs	r2, #4
 800d128:	4619      	mov	r1, r3
 800d12a:	4628      	mov	r0, r5
 800d12c:	47a0      	blx	r4
 800d12e:	6178      	str	r0, [r7, #20]
    if (output == nullptr) {
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d107      	bne.n	800d146 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x9a>
      TF_LITE_REPORT_ERROR(
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	490a      	ldr	r1, [pc, #40]	; (800d164 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb8>)
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7fb f9d3 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
 800d142:	2301      	movs	r3, #1
 800d144:	e00a      	b.n	800d15c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	00db      	lsls	r3, r3, #3
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	4413      	add	r3, r2
 800d14e:	697a      	ldr	r2, [r7, #20]
 800d150:	601a      	str	r2, [r3, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d152:	69fb      	ldr	r3, [r7, #28]
 800d154:	3301      	adds	r3, #1
 800d156:	61fb      	str	r3, [r7, #28]
 800d158:	e7b5      	b.n	800d0c6 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 800d15a:	2300      	movs	r3, #0
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3720      	adds	r7, #32
 800d160:	46bd      	mov	sp, r7
 800d162:	bdb0      	pop	{r4, r5, r7, pc}
 800d164:	0802753c 	.word	0x0802753c

0800d168 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 800d168:	b590      	push	{r4, r7, lr}
 800d16a:	b089      	sub	sp, #36	; 0x24
 800d16c:	af02      	add	r7, sp, #8
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	607a      	str	r2, [r7, #4]
 800d174:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 800d176:	68b8      	ldr	r0, [r7, #8]
 800d178:	f7ff f81a 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800d17c:	4602      	mov	r2, r0
 800d17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d180:	4619      	mov	r1, r3
 800d182:	4610      	mov	r0, r2
 800d184:	f000 fd7a 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d188:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d101      	bne.n	800d194 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 800d190:	f017 fe95 	bl	8024ebe <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	3324      	adds	r3, #36	; 0x24
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	4798      	blx	r3
 800d1a0:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	3328      	adds	r3, #40	; 0x28
 800d1a8:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	9301      	str	r3, [sp, #4]
 800d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b0:	9300      	str	r3, [sp, #0]
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	693a      	ldr	r2, [r7, #16]
 800d1b6:	68b9      	ldr	r1, [r7, #8]
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	47a0      	blx	r4
 800d1bc:	4603      	mov	r3, r0
          /*allocate_temp=*/false) != kTfLiteOk) {
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	bf14      	ite	ne
 800d1c2:	2301      	movne	r3, #1
 800d1c4:	2300      	moveq	r3, #0
 800d1c6:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d007      	beq.n	800d1dc <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x74>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	4914      	ldr	r1, [pc, #80]	; (800d224 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>)
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fb f988 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	e01f      	b.n	800d21c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb4>
  }

  if (subgraph_allocations != nullptr) {
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d01b      	beq.n	800d21a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb2>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 800d1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e4:	00db      	lsls	r3, r3, #3
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	6859      	ldr	r1, [r3, #4]
 800d1ec:	683a      	ldr	r2, [r7, #0]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	4413      	add	r3, r2
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	440b      	add	r3, r1
 800d1f8:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 800d1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d200:	00db      	lsls	r3, r3, #3
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	4413      	add	r3, r2
 800d206:	6859      	ldr	r1, [r3, #4]
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	4613      	mov	r3, r2
 800d20c:	005b      	lsls	r3, r3, #1
 800d20e:	4413      	add	r3, r2
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	440b      	add	r3, r1
 800d214:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 800d21a:	693b      	ldr	r3, [r7, #16]
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	371c      	adds	r7, #28
 800d220:	46bd      	mov	sp, r7
 800d222:	bd90      	pop	{r4, r7, pc}
 800d224:	08027574 	.word	0x08027574

0800d228 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 800d228:	b590      	push	{r4, r7, lr}
 800d22a:	b089      	sub	sp, #36	; 0x24
 800d22c:	af02      	add	r7, sp, #8
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	607a      	str	r2, [r7, #4]
 800d234:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 800d236:	68b8      	ldr	r0, [r7, #8]
 800d238:	f7fe ffba 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800d23c:	4602      	mov	r2, r0
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	4619      	mov	r1, r3
 800d242:	4610      	mov	r0, r2
 800d244:	f000 fd1a 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d248:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d101      	bne.n	800d254 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 800d250:	f017 fe35 	bl	8024ebe <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6858      	ldr	r0, [r3, #4]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	3310      	adds	r3, #16
 800d260:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800d262:	2204      	movs	r2, #4
 800d264:	2140      	movs	r1, #64	; 0x40
 800d266:	4798      	blx	r3
 800d268:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	3328      	adds	r3, #40	; 0x28
 800d270:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 800d272:	2301      	movs	r3, #1
 800d274:	9301      	str	r3, [sp, #4]
 800d276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	693a      	ldr	r2, [r7, #16]
 800d27e:	68b9      	ldr	r1, [r7, #8]
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	47a0      	blx	r4
 800d284:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800d286:	2b00      	cmp	r3, #0
 800d288:	bf14      	ite	ne
 800d28a:	2301      	movne	r3, #1
 800d28c:	2300      	moveq	r3, #0
 800d28e:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 800d290:	2b00      	cmp	r3, #0
 800d292:	d007      	beq.n	800d2a4 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7c>
    TF_LITE_REPORT_ERROR(
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	4914      	ldr	r1, [pc, #80]	; (800d2ec <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc4>)
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7fb f924 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	e01f      	b.n	800d2e4 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
  }

  if (subgraph_allocations != nullptr) {
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d01b      	beq.n	800d2e2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xba>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 800d2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ac:	00db      	lsls	r3, r3, #3
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	6859      	ldr	r1, [r3, #4]
 800d2b4:	683a      	ldr	r2, [r7, #0]
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	005b      	lsls	r3, r3, #1
 800d2ba:	4413      	add	r3, r2
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	440b      	add	r3, r1
 800d2c0:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 800d2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c8:	00db      	lsls	r3, r3, #3
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	6859      	ldr	r1, [r3, #4]
 800d2d0:	683a      	ldr	r2, [r7, #0]
 800d2d2:	4613      	mov	r3, r2
 800d2d4:	005b      	lsls	r3, r3, #1
 800d2d6:	4413      	add	r3, r2
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	440b      	add	r3, r1
 800d2dc:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 800d2e2:	693b      	ldr	r3, [r7, #16]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	371c      	adds	r7, #28
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd90      	pop	{r4, r7, pc}
 800d2ec:	080275c0 	.word	0x080275c0

0800d2f0 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	685a      	ldr	r2, [r3, #4]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	3314      	adds	r3, #20
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4610      	mov	r0, r2
 800d308:	4798      	blx	r3
}
 800d30a:	bf00      	nop
 800d30c:	3708      	adds	r7, #8
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
	...

0800d314 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 800d314:	b5b0      	push	{r4, r5, r7, lr}
 800d316:	b08c      	sub	sp, #48	; 0x30
 800d318:	af02      	add	r7, sp, #8
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d101      	bne.n	800d32a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 800d326:	f017 fdca 	bl	8024ebe <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d32a:	2300      	movs	r3, #0
 800d32c:	627b      	str	r3, [r7, #36]	; 0x24
 800d32e:	68b8      	ldr	r0, [r7, #8]
 800d330:	f7fe ff3e 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800d334:	4603      	mov	r3, r0
 800d336:	4618      	mov	r0, r3
 800d338:	f000 fc92 	bl	800dc60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800d33c:	4602      	mov	r2, r0
 800d33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d340:	4293      	cmp	r3, r2
 800d342:	bf34      	ite	cc
 800d344:	2301      	movcc	r3, #1
 800d346:	2300      	movcs	r3, #0
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d076      	beq.n	800d43c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x128>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800d34e:	68b8      	ldr	r0, [r7, #8]
 800d350:	f7fe ff2e 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800d354:	4603      	mov	r3, r0
 800d356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d358:	4618      	mov	r0, r3
 800d35a:	f000 fc8f 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d35e:	61f8      	str	r0, [r7, #28]
    TFLITE_DCHECK(subgraph != nullptr);
 800d360:	69fb      	ldr	r3, [r7, #28]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d101      	bne.n	800d36a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 800d366:	f017 fdaa 	bl	8024ebe <abort>

    size_t alloc_count = subgraph->tensors()->size();
 800d36a:	69f8      	ldr	r0, [r7, #28]
 800d36c:	f7fe febd 	bl	800c0ea <_ZNK6tflite8SubGraph7tensorsEv>
 800d370:	4603      	mov	r3, r0
 800d372:	4618      	mov	r0, r3
 800d374:	f000 fc0c 	bl	800db90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800d378:	61b8      	str	r0, [r7, #24]
    TfLiteEvalTensor* tensors =
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	6858      	ldr	r0, [r3, #4]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	685b      	ldr	r3, [r3, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	330c      	adds	r3, #12
 800d386:	681c      	ldr	r4, [r3, #0]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800d388:	69ba      	ldr	r2, [r7, #24]
 800d38a:	4613      	mov	r3, r2
 800d38c:	005b      	lsls	r3, r3, #1
 800d38e:	4413      	add	r3, r2
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	2204      	movs	r2, #4
 800d394:	4619      	mov	r1, r3
 800d396:	47a0      	blx	r4
 800d398:	6178      	str	r0, [r7, #20]
    if (tensors == nullptr) {
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d10c      	bne.n	800d3ba <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
      TF_LITE_REPORT_ERROR(
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	68d8      	ldr	r0, [r3, #12]
 800d3a4:	69ba      	ldr	r2, [r7, #24]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	005b      	lsls	r3, r3, #1
 800d3aa:	4413      	add	r3, r2
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	4925      	ldr	r1, [pc, #148]	; (800d448 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x134>)
 800d3b2:	f7fb f899 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for context->eval_tensors, "
          "%d bytes required",
          sizeof(TfLiteEvalTensor) * alloc_count);
      return kTfLiteError;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e041      	b.n	800d43e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    }

    for (size_t i = 0; i < alloc_count; ++i) {
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	623b      	str	r3, [r7, #32]
 800d3be:	6a3a      	ldr	r2, [r7, #32]
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d230      	bcs.n	800d428 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	685c      	ldr	r4, [r3, #4]
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 800d3ca:	69f8      	ldr	r0, [r7, #28]
 800d3cc:	f7fe fe8d 	bl	800c0ea <_ZNK6tflite8SubGraph7tensorsEv>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	6a39      	ldr	r1, [r7, #32]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f000 fbe9 	bl	800dbac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800d3da:	4605      	mov	r5, r0
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800d3dc:	68b8      	ldr	r0, [r7, #8]
 800d3de:	f7fe fef5 	bl	800c1cc <_ZNK6tflite5Model7buffersEv>
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	68d9      	ldr	r1, [r3, #12]
          error_reporter_, &tensors[i]);
 800d3e6:	6a3a      	ldr	r2, [r7, #32]
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	005b      	lsls	r3, r3, #1
 800d3ec:	4413      	add	r3, r2
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	461a      	mov	r2, r3
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	4413      	add	r3, r2
 800d3f6:	9300      	str	r3, [sp, #0]
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	4629      	mov	r1, r5
 800d3fe:	4620      	mov	r0, r4
 800d400:	f7ff fbd0 	bl	800cba4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 800d404:	4603      	mov	r3, r0
 800d406:	74fb      	strb	r3, [r7, #19]
      if (status != kTfLiteOk) {
 800d408:	7cfb      	ldrb	r3, [r7, #19]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d008      	beq.n	800d420 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10c>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	6a3a      	ldr	r2, [r7, #32]
 800d414:	490d      	ldr	r1, [pc, #52]	; (800d44c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x138>)
 800d416:	4618      	mov	r0, r3
 800d418:	f7fb f866 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             i);
        return kTfLiteError;
 800d41c:	2301      	movs	r3, #1
 800d41e:	e00e      	b.n	800d43e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    for (size_t i = 0; i < alloc_count; ++i) {
 800d420:	6a3b      	ldr	r3, [r7, #32]
 800d422:	3301      	adds	r3, #1
 800d424:	623b      	str	r3, [r7, #32]
 800d426:	e7ca      	b.n	800d3be <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xaa>
      }
    }
    subgraph_allocations[subgraph_idx].tensors = tensors;
 800d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42a:	00db      	lsls	r3, r3, #3
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	4413      	add	r3, r2
 800d430:	697a      	ldr	r2, [r7, #20]
 800d432:	605a      	str	r2, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d436:	3301      	adds	r3, #1
 800d438:	627b      	str	r3, [r7, #36]	; 0x24
 800d43a:	e778      	b.n	800d32e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 800d43c:	2300      	movs	r3, #0
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3728      	adds	r7, #40	; 0x28
 800d442:	46bd      	mov	sp, r7
 800d444:	bdb0      	pop	{r4, r5, r7, pc}
 800d446:	bf00      	nop
 800d448:	08027604 	.word	0x08027604
 800d44c:	0802764c 	.word	0x0802764c

0800d450 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 800d450:	b5b0      	push	{r4, r5, r7, lr}
 800d452:	b088      	sub	sp, #32
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800d45c:	2300      	movs	r3, #0
 800d45e:	61fb      	str	r3, [r7, #28]
 800d460:	68b8      	ldr	r0, [r7, #8]
 800d462:	f7fe fe42 	bl	800c0ea <_ZNK6tflite8SubGraph7tensorsEv>
 800d466:	4603      	mov	r3, r0
 800d468:	4618      	mov	r0, r3
 800d46a:	f000 fb91 	bl	800db90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800d46e:	4602      	mov	r2, r0
 800d470:	69fb      	ldr	r3, [r7, #28]
 800d472:	4293      	cmp	r3, r2
 800d474:	bf34      	ite	cc
 800d476:	2301      	movcc	r3, #1
 800d478:	2300      	movcs	r3, #0
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d04f      	beq.n	800d520 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 800d480:	68b8      	ldr	r0, [r7, #8]
 800d482:	f7fe fe32 	bl	800c0ea <_ZNK6tflite8SubGraph7tensorsEv>
 800d486:	4603      	mov	r3, r0
 800d488:	69f9      	ldr	r1, [r7, #28]
 800d48a:	4618      	mov	r0, r3
 800d48c:	f000 fb8e 	bl	800dbac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800d490:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 800d492:	69b8      	ldr	r0, [r7, #24]
 800d494:	f7fe fdf9 	bl	800c08a <_ZNK6tflite6Tensor11is_variableEv>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d03c      	beq.n	800d518 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 800d49e:	69fa      	ldr	r2, [r7, #28]
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	005b      	lsls	r3, r3, #1
 800d4a4:	4413      	add	r3, r2
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	f107 0210 	add.w	r2, r7, #16
 800d4b2:	4611      	mov	r1, r2
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7fe fd54 	bl	800bf62 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	75fb      	strb	r3, [r7, #23]
 800d4be:	7dfb      	ldrb	r3, [r7, #23]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d001      	beq.n	800d4c8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 800d4c4:	7dfb      	ldrb	r3, [r7, #23]
 800d4c6:	e02c      	b.n	800d522 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6858      	ldr	r0, [r3, #4]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	330c      	adds	r3, #12
 800d4d4:	681d      	ldr	r5, [r3, #0]
 800d4d6:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 800d4d8:	69fa      	ldr	r2, [r7, #28]
 800d4da:	4613      	mov	r3, r2
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	4413      	add	r3, r2
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 800d4e8:	2210      	movs	r2, #16
 800d4ea:	47a8      	blx	r5
 800d4ec:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 800d4ee:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 800d4f0:	69fa      	ldr	r2, [r7, #28]
 800d4f2:	4613      	mov	r3, r2
 800d4f4:	005b      	lsls	r3, r3, #1
 800d4f6:	4413      	add	r3, r2
 800d4f8:	009b      	lsls	r3, r3, #2
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4413      	add	r3, r2
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d108      	bne.n	800d518 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	68db      	ldr	r3, [r3, #12]
 800d50a:	693a      	ldr	r2, [r7, #16]
 800d50c:	4907      	ldr	r1, [pc, #28]	; (800d52c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 800d50e:	4618      	mov	r0, r3
 800d510:	f7fa ffea 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 800d514:	2301      	movs	r3, #1
 800d516:	e004      	b.n	800d522 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	3301      	adds	r3, #1
 800d51c:	61fb      	str	r3, [r7, #28]
 800d51e:	e79f      	b.n	800d460 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 800d520:	2300      	movs	r3, #0
}
 800d522:	4618      	mov	r0, r3
 800d524:	3720      	adds	r7, #32
 800d526:	46bd      	mov	sp, r7
 800d528:	bdb0      	pop	{r4, r5, r7, pc}
 800d52a:	bf00      	nop
 800d52c:	0802766c 	.word	0x0802766c

0800d530 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6858      	ldr	r0, [r3, #4]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	330c      	adds	r3, #12
 800d544:	681b      	ldr	r3, [r3, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 800d546:	2204      	movs	r2, #4
 800d548:	2140      	movs	r1, #64	; 0x40
 800d54a:	4798      	blx	r3
 800d54c:	4603      	mov	r3, r0
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3708      	adds	r7, #8
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}

0800d556 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
 800d556:	b5b0      	push	{r4, r5, r7, lr}
 800d558:	b086      	sub	sp, #24
 800d55a:	af02      	add	r7, sp, #8
 800d55c:	60f8      	str	r0, [r7, #12]
 800d55e:	60b9      	str	r1, [r7, #8]
 800d560:	607a      	str	r2, [r7, #4]
 800d562:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 800d568:	68b8      	ldr	r0, [r7, #8]
 800d56a:	f7fe fe21 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800d56e:	4602      	mov	r2, r0
 800d570:	6a3b      	ldr	r3, [r7, #32]
 800d572:	4619      	mov	r1, r3
 800d574:	4610      	mov	r0, r2
 800d576:	f000 fb81 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d57a:	4603      	mov	r3, r0
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7fe fdb4 	bl	800c0ea <_ZNK6tflite8SubGraph7tensorsEv>
 800d582:	4602      	mov	r2, r0
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	4619      	mov	r1, r3
 800d588:	4610      	mov	r0, r2
 800d58a:	f000 fb0f 	bl	800dbac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800d58e:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800d590:	68b8      	ldr	r0, [r7, #8]
 800d592:	f7fe fe1b 	bl	800c1cc <_ZNK6tflite5Model7buffersEv>
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	68db      	ldr	r3, [r3, #12]
 800d59a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	9201      	str	r2, [sp, #4]
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	462a      	mov	r2, r5
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	f7ff f9a1 	bl	800c8f0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 800d5ae:	4603      	mov	r3, r0
      model->buffers(), error_reporter_, tensor);
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bdb0      	pop	{r4, r5, r7, pc}

0800d5b8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
 800d5b8:	b590      	push	{r4, r7, lr}
 800d5ba:	b0a5      	sub	sp, #148	; 0x94
 800d5bc:	af02      	add	r7, sp, #8
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
 800d5c4:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  //
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800d5cc:	68b8      	ldr	r0, [r7, #8]
 800d5ce:	f7fe fdef 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5d8:	4619      	mov	r1, r3
 800d5da:	4610      	mov	r0, r2
 800d5dc:	f000 fb4e 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d5e0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 800d5e4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d5e8:	f7fe fd7f 	bl	800c0ea <_ZNK6tflite8SubGraph7tensorsEv>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f000 face 	bl	800db90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	695b      	ldr	r3, [r3, #20]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 800d5fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d600:	4613      	mov	r3, r2
 800d602:	005b      	lsls	r3, r3, #1
 800d604:	4413      	add	r3, r2
 800d606:	00db      	lsls	r3, r3, #3
 800d608:	67bb      	str	r3, [r7, #120]	; 0x78

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6858      	ldr	r0, [r3, #4]
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	3310      	adds	r3, #16
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2204      	movs	r2, #4
 800d61a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d61c:	4798      	blx	r3
 800d61e:	6778      	str	r0, [r7, #116]	; 0x74
  if (allocation_info == nullptr) {
 800d620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d622:	2b00      	cmp	r3, #0
 800d624:	d108      	bne.n	800d638 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x80>
    TF_LITE_REPORT_ERROR(
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d62c:	4985      	ldr	r1, [pc, #532]	; (800d844 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x28c>)
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fa ff5a 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 800d634:	2401      	movs	r4, #1
 800d636:	e0ff      	b.n	800d838 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 800d638:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d63c:	f7fe fd55 	bl	800c0ea <_ZNK6tflite8SubGraph7tensorsEv>
 800d640:	4603      	mov	r3, r0
 800d642:	4618      	mov	r0, r3
 800d644:	f000 faa4 	bl	800db90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800d648:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	695a      	ldr	r2, [r3, #20]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800d656:	9300      	str	r3, [sp, #0]
 800d658:	4613      	mov	r3, r2
 800d65a:	460a      	mov	r2, r1
 800d65c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d65e:	f7fe fe37 	bl	800c2d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 800d662:	2300      	movs	r3, #0
 800d664:	643b      	str	r3, [r7, #64]	; 0x40
  TF_LITE_ENSURE_STATUS(
 800d666:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d66a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d66e:	68b9      	ldr	r1, [r7, #8]
 800d670:	4618      	mov	r0, r3
 800d672:	f7fe ffab 	bl	800c5cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 800d676:	4603      	mov	r3, r0
 800d678:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800d67c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d680:	2b00      	cmp	r3, #0
 800d682:	d002      	beq.n	800d68a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd2>
 800d684:	f897 4073 	ldrb.w	r4, [r7, #115]	; 0x73
 800d688:	e0d6      	b.n	800d838 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 800d68a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d68c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d696:	f7fe fe35 	bl	800c304 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 800d69a:	4603      	mov	r3, r0
 800d69c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 800d6a0:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf6>
 800d6a8:	f897 4072 	ldrb.w	r4, [r7, #114]	; 0x72
 800d6ac:	e0c4      	b.n	800d838 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f000 f913 	bl	800d8da <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800d6b4:	66f8      	str	r0, [r7, #108]	; 0x6c

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 800d6b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d6ba:	683a      	ldr	r2, [r7, #0]
 800d6bc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7ff f800 	bl	800c6c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d6ca:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d002      	beq.n	800d6d8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x120>
 800d6d2:	f897 406b 	ldrb.w	r4, [r7, #107]	; 0x6b
 800d6d6:	e0af      	b.n	800d838 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	2110      	movs	r1, #16
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f002 fd8a 	bl	80101f8 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 800d6e4:	6678      	str	r0, [r7, #100]	; 0x64
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	6858      	ldr	r0, [r3, #4]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	3310      	adds	r3, #16
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2210      	movs	r2, #16
 800d6f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d6f8:	4798      	blx	r3
 800d6fa:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 800d6fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d10e      	bne.n	800d720 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x168>
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	68d8      	ldr	r0, [r3, #12]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	68d9      	ldr	r1, [r3, #12]
 800d70a:	4b4f      	ldr	r3, [pc, #316]	; (800d848 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x290>)
 800d70c:	9301      	str	r3, [sp, #4]
 800d70e:	f240 33ce 	movw	r3, #974	; 0x3ce
 800d712:	9300      	str	r3, [sp, #0]
 800d714:	4b4d      	ldr	r3, [pc, #308]	; (800d84c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x294>)
 800d716:	4a4e      	ldr	r2, [pc, #312]	; (800d850 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x298>)
 800d718:	f7fa feff 	bl	800851a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800d71c:	2401      	movs	r4, #1
 800d71e:	e08b      	b.n	800d838 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 800d720:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d722:	f107 0314 	add.w	r3, r7, #20
 800d726:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d728:	4618      	mov	r0, r3
 800d72a:	f00a fc3f 	bl	8017fac <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	68d8      	ldr	r0, [r3, #12]
 800d732:	f107 0114 	add.w	r1, r7, #20
 800d736:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d738:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d73a:	f7ff f80e 	bl	800c75a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 800d73e:	4603      	mov	r3, r0
 800d740:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d744:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d002      	beq.n	800d752 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x19a>
 800d74c:	f897 405f 	ldrb.w	r4, [r7, #95]	; 0x5f
 800d750:	e06d      	b.n	800d82e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	685a      	ldr	r2, [r3, #4]
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	3314      	adds	r3, #20
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4610      	mov	r0, r2
 800d762:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	2110      	movs	r1, #16
 800d76a:	4618      	mov	r0, r3
 800d76c:	f002 fd44 	bl	80101f8 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 800d770:	65b8      	str	r0, [r7, #88]	; 0x58

  // Make sure we have enough arena size.
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 800d772:	f107 0314 	add.w	r3, r7, #20
 800d776:	4618      	mov	r0, r3
 800d778:	f00a fed1 	bl	801851e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800d77c:	4602      	mov	r2, r0
 800d77e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d780:	4293      	cmp	r3, r2
 800d782:	bf34      	ite	cc
 800d784:	2301      	movcc	r3, #1
 800d786:	2300      	movcs	r3, #0
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00e      	beq.n	800d7ac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
    TF_LITE_REPORT_ERROR(
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	68dc      	ldr	r4, [r3, #12]
 800d792:	f107 0314 	add.w	r3, r7, #20
 800d796:	4618      	mov	r0, r3
 800d798:	f00a fec1 	bl	801851e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800d79c:	4602      	mov	r2, r0
 800d79e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7a0:	492c      	ldr	r1, [pc, #176]	; (800d854 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x29c>)
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	f7fa fea0 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        planner.GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 800d7a8:	2401      	movs	r4, #1
 800d7aa:	e040      	b.n	800d82e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	68dc      	ldr	r4, [r3, #12]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f002 fd13 	bl	80101e0 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	f107 0114 	add.w	r1, r7, #20
 800d7c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	f7ff f821 	bl	800c80e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800d7d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d002      	beq.n	800d7e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>
 800d7da:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 800d7de:	e026      	b.n	800d82e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
#ifdef TF_LITE_SHOW_MEMORY_USE
  planner.PrintMemoryPlan();
#endif
  head_usage = planner.GetMaximumMemorySize();
 800d7e0:	f107 0314 	add.w	r3, r7, #20
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f00a fe9a 	bl	801851e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800d7ea:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	699b      	ldr	r3, [r3, #24]
 800d7f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d903      	bls.n	800d802 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x24a>
    max_head_buffer_usage_ = head_usage;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d800:	619a      	str	r2, [r3, #24]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	6858      	ldr	r0, [r3, #4]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	3308      	adds	r3, #8
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	6991      	ldr	r1, [r2, #24]
 800d814:	2210      	movs	r2, #16
 800d816:	4798      	blx	r3
 800d818:	4603      	mov	r3, r0
 800d81a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800d81e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800d822:	2b00      	cmp	r3, #0
 800d824:	d002      	beq.n	800d82c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x274>
 800d826:	f897 4056 	ldrb.w	r4, [r7, #86]	; 0x56
 800d82a:	e000      	b.n	800d82e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 800d82c:	2400      	movs	r4, #0
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 800d82e:	f107 0314 	add.w	r3, r7, #20
 800d832:	4618      	mov	r0, r3
 800d834:	f00a fc0c 	bl	8018050 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800d838:	4623      	mov	r3, r4
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	378c      	adds	r7, #140	; 0x8c
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd90      	pop	{r4, r7, pc}
 800d842:	bf00      	nop
 800d844:	0802769c 	.word	0x0802769c
 800d848:	08027734 	.word	0x08027734
 800d84c:	080276e0 	.word	0x080276e0
 800d850:	0802771c 	.word	0x0802771c
 800d854:	08027750 	.word	0x08027750

0800d858 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	60f8      	str	r0, [r7, #12]
 800d860:	60b9      	str	r1, [r7, #8]
 800d862:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d101      	bne.n	800d86e <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 800d86a:	f017 fb28 	bl	8024ebe <abort>

  if (scratch_buffer_request_count_ == 0) {
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	695b      	ldr	r3, [r3, #20]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d101      	bne.n	800d87a <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 800d876:	2300      	movs	r3, #0
 800d878:	e00e      	b.n	800d898 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6858      	ldr	r0, [r3, #4]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	330c      	adds	r3, #12
 800d886:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	0091      	lsls	r1, r2, #2
 800d88c:	2204      	movs	r2, #4
 800d88e:	4798      	blx	r3
 800d890:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 800d896:	2300      	movs	r3, #0
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3710      	adds	r7, #16
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	615a      	str	r2, [r3, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6858      	ldr	r0, [r3, #4]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	3308      	adds	r3, #8
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2204      	movs	r2, #4
 800d8be:	2160      	movs	r1, #96	; 0x60
 800d8c0:	4798      	blx	r3
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	73fb      	strb	r3, [r7, #15]
 800d8c6:	7bfb      	ldrb	r3, [r7, #15]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d001      	beq.n	800d8d0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 800d8cc:	7bfb      	ldrb	r3, [r7, #15]
 800d8ce:	e000      	b.n	800d8d2 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 800d8d0:	2300      	movs	r3, #0
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3710      	adds	r7, #16
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b082      	sub	sp, #8
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f002 fc7a 	bl	80101e0 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2104      	movs	r1, #4
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7fe fa22 	bl	800bd3a <_ZN6tflite14AlignPointerUpEPhj>
 800d8f6:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3708      	adds	r7, #8
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}

0800d900 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>:

TfLiteStatus MicroAllocator::FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array,
    TfLiteIntArray** result) {
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	607a      	str	r2, [r7, #4]
  return internal::FlatBufferVectorToTfLiteTypeArray(
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	6858      	ldr	r0, [r3, #4]
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	68d9      	ldr	r1, [r3, #12]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	68ba      	ldr	r2, [r7, #8]
 800d918:	f000 fa66 	bl	800dde8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800d91c:	4603      	mov	r3, r0
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3710      	adds	r7, #16
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
 800d926:	b480      	push	{r7}
 800d928:	b083      	sub	sp, #12
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
  return builtin_data_allocator_;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	689b      	ldr	r3, [r3, #8]
}
 800d932:	4618      	mov	r0, r3
 800d934:	370c      	adds	r7, #12
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr

0800d93e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800d93e:	b580      	push	{r7, lr}
 800d940:	b082      	sub	sp, #8
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
 800d946:	460b      	mov	r3, r1
 800d948:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800d94a:	887b      	ldrh	r3, [r7, #2]
 800d94c:	4619      	mov	r1, r3
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 fa7c 	bl	800de4c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800d954:	4603      	mov	r3, r0
  }
 800d956:	4618      	mov	r0, r3
 800d958:	3708      	adds	r7, #8
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}

0800d95e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800d95e:	b580      	push	{r7, lr}
 800d960:	b082      	sub	sp, #8
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
 800d966:	460b      	mov	r3, r1
 800d968:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800d96a:	887b      	ldrh	r3, [r7, #2]
 800d96c:	4619      	mov	r1, r3
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f000 fa8c 	bl	800de8c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800d974:	4603      	mov	r3, r0
  }
 800d976:	4618      	mov	r0, r3
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}

0800d97e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800d97e:	b580      	push	{r7, lr}
 800d980:	b082      	sub	sp, #8
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
 800d986:	460b      	mov	r3, r1
 800d988:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800d98a:	887b      	ldrh	r3, [r7, #2]
 800d98c:	4619      	mov	r1, r3
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 fa9c 	bl	800decc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800d994:	4603      	mov	r3, r0
  }
 800d996:	4618      	mov	r0, r3
 800d998:	3708      	adds	r7, #8
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b086      	sub	sp, #24
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	60f8      	str	r0, [r7, #12]
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	607a      	str	r2, [r7, #4]
 800d9aa:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 800d9ac:	897b      	ldrh	r3, [r7, #10]
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	68f8      	ldr	r0, [r7, #12]
 800d9b2:	f7fa fde8 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800d9ba:	8afb      	ldrh	r3, [r7, #22]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d007      	beq.n	800d9d0 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	8afb      	ldrh	r3, [r7, #22]
 800d9c4:	4413      	add	r3, r2
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7fb fc07 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	e000      	b.n	800d9d2 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 800d9d0:	687b      	ldr	r3, [r7, #4]
  }
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3718      	adds	r7, #24
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b082      	sub	sp, #8
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800d9e6:	887b      	ldrh	r3, [r7, #2]
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 fa8e 	bl	800df0c <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800d9f0:	4603      	mov	r3, r0
  }
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3708      	adds	r7, #8
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b082      	sub	sp, #8
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
 800da02:	460b      	mov	r3, r1
 800da04:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800da06:	887b      	ldrh	r3, [r7, #2]
 800da08:	4619      	mov	r1, r3
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 fa9e 	bl	800df4c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800da10:	4603      	mov	r3, r0
  }
 800da12:	4618      	mov	r0, r3
 800da14:	3708      	adds	r7, #8
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b082      	sub	sp, #8
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	460b      	mov	r3, r1
 800da24:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800da26:	887b      	ldrh	r3, [r7, #2]
 800da28:	4619      	mov	r1, r3
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 faae 	bl	800df8c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800da30:	4603      	mov	r3, r0
  }
 800da32:	4618      	mov	r0, r3
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b082      	sub	sp, #8
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
 800da42:	460b      	mov	r3, r1
 800da44:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800da46:	887b      	ldrh	r3, [r7, #2]
 800da48:	4619      	mov	r1, r3
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 fabe 	bl	800dfcc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800da50:	4603      	mov	r3, r0
  }
 800da52:	4618      	mov	r0, r3
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b082      	sub	sp, #8
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
 800da62:	460b      	mov	r3, r1
 800da64:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800da66:	887b      	ldrh	r3, [r7, #2]
 800da68:	4619      	mov	r1, r3
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 face 	bl	800e00c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800da70:	4603      	mov	r3, r0
  }
 800da72:	4618      	mov	r0, r3
 800da74:	3708      	adds	r7, #8
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}

0800da7a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800da7a:	b580      	push	{r7, lr}
 800da7c:	b082      	sub	sp, #8
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
 800da82:	460b      	mov	r3, r1
 800da84:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800da86:	887b      	ldrh	r3, [r7, #2]
 800da88:	4619      	mov	r1, r3
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 fade 	bl	800e04c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800da90:	4603      	mov	r3, r0
  }
 800da92:	4618      	mov	r0, r3
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b082      	sub	sp, #8
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7fb fb7e 	bl	80091a8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800daac:	4603      	mov	r3, r0
 800daae:	4618      	mov	r0, r3
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b082      	sub	sp, #8
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7fb fb70 	bl	80091a8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800dac8:	4603      	mov	r3, r0
 800daca:	4618      	mov	r0, r3
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
	...

0800dad4 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f7ff ffe9 	bl	800dab6 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800dae4:	4602      	mov	r2, r0
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	4293      	cmp	r3, r2
 800daea:	d306      	bcc.n	800dafa <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 800daec:	4b0a      	ldr	r3, [pc, #40]	; (800db18 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 800daee:	4a0b      	ldr	r2, [pc, #44]	; (800db1c <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 800daf0:	f44f 7183 	mov.w	r1, #262	; 0x106
 800daf4:	480a      	ldr	r0, [pc, #40]	; (800db20 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 800daf6:	f017 f9e9 	bl	8024ecc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 fae8 	bl	800e0d0 <_ZNK11flatbuffers6VectorIfE4DataEv>
 800db00:	4603      	mov	r3, r0
 800db02:	6839      	ldr	r1, [r7, #0]
 800db04:	4618      	mov	r0, r3
 800db06:	f000 facd 	bl	800e0a4 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 800db0a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800db0e:	eeb0 0a67 	vmov.f32	s0, s15
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	080277a0 	.word	0x080277a0
 800db1c:	080277ac 	.word	0x080277ac
 800db20:	08027874 	.word	0x08027874

0800db24 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4618      	mov	r0, r3
 800db32:	f7fb fb39 	bl	80091a8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800db36:	4603      	mov	r3, r0
 800db38:	4618      	mov	r0, r3
 800db3a:	3708      	adds	r7, #8
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f7ff ffea 	bl	800db24 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800db50:	4602      	mov	r2, r0
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	4293      	cmp	r3, r2
 800db56:	d306      	bcc.n	800db66 <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 800db58:	4b0a      	ldr	r3, [pc, #40]	; (800db84 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 800db5a:	4a0b      	ldr	r2, [pc, #44]	; (800db88 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 800db5c:	f44f 7183 	mov.w	r1, #262	; 0x106
 800db60:	480a      	ldr	r0, [pc, #40]	; (800db8c <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 800db62:	f017 f9b3 	bl	8024ecc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fad4 	bl	800e114 <_ZNK11flatbuffers6VectorIxE4DataEv>
 800db6c:	4603      	mov	r3, r0
 800db6e:	6839      	ldr	r1, [r7, #0]
 800db70:	4618      	mov	r0, r3
 800db72:	f000 fab9 	bl	800e0e8 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 800db76:	4602      	mov	r2, r0
 800db78:	460b      	mov	r3, r1
  }
 800db7a:	4610      	mov	r0, r2
 800db7c:	4619      	mov	r1, r3
 800db7e:	3708      	adds	r7, #8
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	080277a0 	.word	0x080277a0
 800db88:	080278f8 	.word	0x080278f8
 800db8c:	08027874 	.word	0x08027874

0800db90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fb fb03 	bl	80091a8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800dba2:	4603      	mov	r3, r0
 800dba4:	4618      	mov	r0, r3
 800dba6:	3708      	adds	r7, #8
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7ff ffea 	bl	800db90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d306      	bcc.n	800dbd2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 800dbc4:	4b09      	ldr	r3, [pc, #36]	; (800dbec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 800dbc6:	4a0a      	ldr	r2, [pc, #40]	; (800dbf0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 800dbc8:	f44f 7183 	mov.w	r1, #262	; 0x106
 800dbcc:	4809      	ldr	r0, [pc, #36]	; (800dbf4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 800dbce:	f017 f97d 	bl	8024ecc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f000 fabe 	bl	800e154 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	6839      	ldr	r1, [r7, #0]
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f000 faa5 	bl	800e12c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 800dbe2:	4603      	mov	r3, r0
  }
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3708      	adds	r7, #8
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	080277a0 	.word	0x080277a0
 800dbf0:	08027aa0 	.word	0x08027aa0
 800dbf4:	08027874 	.word	0x08027874

0800dbf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7fb facf 	bl	80091a8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3708      	adds	r7, #8
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f7ff ffea 	bl	800dbf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800dc24:	4602      	mov	r2, r0
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d306      	bcc.n	800dc3a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 800dc2c:	4b09      	ldr	r3, [pc, #36]	; (800dc54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 800dc2e:	4a0a      	ldr	r2, [pc, #40]	; (800dc58 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 800dc30:	f44f 7183 	mov.w	r1, #262	; 0x106
 800dc34:	4809      	ldr	r0, [pc, #36]	; (800dc5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 800dc36:	f017 f949 	bl	8024ecc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 faaa 	bl	800e194 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 800dc40:	4603      	mov	r3, r0
 800dc42:	6839      	ldr	r1, [r7, #0]
 800dc44:	4618      	mov	r0, r3
 800dc46:	f000 fa91 	bl	800e16c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 800dc4a:	4603      	mov	r3, r0
  }
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3708      	adds	r7, #8
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	080277a0 	.word	0x080277a0
 800dc58:	08027b98 	.word	0x08027b98
 800dc5c:	08027874 	.word	0x08027874

0800dc60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7fb fa9b 	bl	80091a8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800dc72:	4603      	mov	r3, r0
 800dc74:	4618      	mov	r0, r3
 800dc76:	3708      	adds	r7, #8
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7ff ffea 	bl	800dc60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d306      	bcc.n	800dca2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 800dc94:	4b09      	ldr	r3, [pc, #36]	; (800dcbc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 800dc96:	4a0a      	ldr	r2, [pc, #40]	; (800dcc0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 800dc98:	f44f 7183 	mov.w	r1, #262	; 0x106
 800dc9c:	4809      	ldr	r0, [pc, #36]	; (800dcc4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 800dc9e:	f017 f915 	bl	8024ecc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fa96 	bl	800e1d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	6839      	ldr	r1, [r7, #0]
 800dcac:	4618      	mov	r0, r3
 800dcae:	f000 fa7d 	bl	800e1ac <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 800dcb2:	4603      	mov	r3, r0
  }
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3708      	adds	r7, #8
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	080277a0 	.word	0x080277a0
 800dcc0:	08027c94 	.word	0x08027c94
 800dcc4:	08027874 	.word	0x08027874

0800dcc8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7fb fa67 	bl	80091a8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7ff ffea 	bl	800dcc8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d306      	bcc.n	800dd0a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 800dcfc:	4b09      	ldr	r3, [pc, #36]	; (800dd24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 800dcfe:	4a0a      	ldr	r2, [pc, #40]	; (800dd28 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 800dd00:	f44f 7183 	mov.w	r1, #262	; 0x106
 800dd04:	4809      	ldr	r0, [pc, #36]	; (800dd2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 800dd06:	f017 f8e1 	bl	8024ecc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 fa82 	bl	800e214 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 800dd10:	4603      	mov	r3, r0
 800dd12:	6839      	ldr	r1, [r7, #0]
 800dd14:	4618      	mov	r0, r3
 800dd16:	f000 fa69 	bl	800e1ec <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 800dd1a:	4603      	mov	r3, r0
  }
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	080277a0 	.word	0x080277a0
 800dd28:	08027d90 	.word	0x08027d90
 800dd2c:	08027874 	.word	0x08027874

0800dd30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b082      	sub	sp, #8
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7fb fa33 	bl	80091a8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800dd42:	4603      	mov	r3, r0
 800dd44:	4618      	mov	r0, r3
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f7ff ffea 	bl	800dd30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d306      	bcc.n	800dd72 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 800dd64:	4b09      	ldr	r3, [pc, #36]	; (800dd8c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 800dd66:	4a0a      	ldr	r2, [pc, #40]	; (800dd90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 800dd68:	f44f 7183 	mov.w	r1, #262	; 0x106
 800dd6c:	4809      	ldr	r0, [pc, #36]	; (800dd94 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 800dd6e:	f017 f8ad 	bl	8024ecc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 fa6e 	bl	800e254 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	6839      	ldr	r1, [r7, #0]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f000 fa55 	bl	800e22c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 800dd82:	4603      	mov	r3, r0
  }
 800dd84:	4618      	mov	r0, r3
 800dd86:	3708      	adds	r7, #8
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	080277a0 	.word	0x080277a0
 800dd90:	08027e88 	.word	0x08027e88
 800dd94:	08027874 	.word	0x08027874

0800dd98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
 800dda2:	6839      	ldr	r1, [r7, #0]
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f7ff ff69 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	4618      	mov	r0, r3
 800ddae:	3708      	adds	r7, #8
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
 800ddbe:	6839      	ldr	r1, [r7, #0]
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f7ff ff8f 	bl	800dce4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3708      	adds	r7, #8
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 f957 	bl	800e08c <_ZNK11flatbuffers6VectorIhE4DataEv>
 800ddde:	4603      	mov	r3, r0
 800dde0:	4618      	mov	r0, r3
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	607a      	str	r2, [r7, #4]
 800ddf4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d101      	bne.n	800de00 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800ddfc:	f017 f85f 	bl	8024ebe <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d101      	bne.n	800de0a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800de06:	f017 f85a 	bl	8024ebe <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b084      	sub	sp, #16
 800de1e:	af00      	add	r7, sp, #0
 800de20:	60f8      	str	r0, [r7, #12]
 800de22:	60b9      	str	r1, [r7, #8]
 800de24:	607a      	str	r2, [r7, #4]
 800de26:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d101      	bne.n	800de32 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800de2e:	f017 f846 	bl	8024ebe <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d101      	bne.n	800de3c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800de38:	f017 f841 	bl	8024ebe <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800de42:	2300      	movs	r3, #0
}
 800de44:	4618      	mov	r0, r3
 800de46:	3710      	adds	r7, #16
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	460b      	mov	r3, r1
 800de56:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800de58:	887b      	ldrh	r3, [r7, #2]
 800de5a:	4619      	mov	r1, r3
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f7fa fb92 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800de62:	4603      	mov	r3, r0
 800de64:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	89fb      	ldrh	r3, [r7, #14]
 800de6a:	4413      	add	r3, r2
 800de6c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800de6e:	89fb      	ldrh	r3, [r7, #14]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d006      	beq.n	800de82 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 800de74:	68b8      	ldr	r0, [r7, #8]
 800de76:	f7fb f9b0 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800de7a:	4602      	mov	r2, r0
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	4413      	add	r3, r2
                        : nullptr;
 800de80:	e000      	b.n	800de84 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800de82:	2300      	movs	r3, #0
  }
 800de84:	4618      	mov	r0, r3
 800de86:	3710      	adds	r7, #16
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b084      	sub	sp, #16
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	460b      	mov	r3, r1
 800de96:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800de98:	887b      	ldrh	r3, [r7, #2]
 800de9a:	4619      	mov	r1, r3
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f7fa fb72 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800dea2:	4603      	mov	r3, r0
 800dea4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	89fb      	ldrh	r3, [r7, #14]
 800deaa:	4413      	add	r3, r2
 800deac:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800deae:	89fb      	ldrh	r3, [r7, #14]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d006      	beq.n	800dec2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 800deb4:	68b8      	ldr	r0, [r7, #8]
 800deb6:	f7fb f990 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800deba:	4602      	mov	r2, r0
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	4413      	add	r3, r2
                        : nullptr;
 800dec0:	e000      	b.n	800dec4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800dec2:	2300      	movs	r3, #0
  }
 800dec4:	4618      	mov	r0, r3
 800dec6:	3710      	adds	r7, #16
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	460b      	mov	r3, r1
 800ded6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800ded8:	887b      	ldrh	r3, [r7, #2]
 800deda:	4619      	mov	r1, r3
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f7fa fb52 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800dee2:	4603      	mov	r3, r0
 800dee4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	89fb      	ldrh	r3, [r7, #14]
 800deea:	4413      	add	r3, r2
 800deec:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800deee:	89fb      	ldrh	r3, [r7, #14]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d006      	beq.n	800df02 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 800def4:	68b8      	ldr	r0, [r7, #8]
 800def6:	f7fb f970 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800defa:	4602      	mov	r2, r0
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	4413      	add	r3, r2
                        : nullptr;
 800df00:	e000      	b.n	800df04 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800df02:	2300      	movs	r3, #0
  }
 800df04:	4618      	mov	r0, r3
 800df06:	3710      	adds	r7, #16
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b084      	sub	sp, #16
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	460b      	mov	r3, r1
 800df16:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800df18:	887b      	ldrh	r3, [r7, #2]
 800df1a:	4619      	mov	r1, r3
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f7fa fb32 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800df22:	4603      	mov	r3, r0
 800df24:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	89fb      	ldrh	r3, [r7, #14]
 800df2a:	4413      	add	r3, r2
 800df2c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800df2e:	89fb      	ldrh	r3, [r7, #14]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d006      	beq.n	800df42 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 800df34:	68b8      	ldr	r0, [r7, #8]
 800df36:	f7fb f950 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800df3a:	4602      	mov	r2, r0
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	4413      	add	r3, r2
                        : nullptr;
 800df40:	e000      	b.n	800df44 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800df42:	2300      	movs	r3, #0
  }
 800df44:	4618      	mov	r0, r3
 800df46:	3710      	adds	r7, #16
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b084      	sub	sp, #16
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	460b      	mov	r3, r1
 800df56:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800df58:	887b      	ldrh	r3, [r7, #2]
 800df5a:	4619      	mov	r1, r3
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f7fa fb12 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800df62:	4603      	mov	r3, r0
 800df64:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	89fb      	ldrh	r3, [r7, #14]
 800df6a:	4413      	add	r3, r2
 800df6c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800df6e:	89fb      	ldrh	r3, [r7, #14]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d006      	beq.n	800df82 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 800df74:	68b8      	ldr	r0, [r7, #8]
 800df76:	f7fb f930 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800df7a:	4602      	mov	r2, r0
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	4413      	add	r3, r2
                        : nullptr;
 800df80:	e000      	b.n	800df84 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800df82:	2300      	movs	r3, #0
  }
 800df84:	4618      	mov	r0, r3
 800df86:	3710      	adds	r7, #16
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	460b      	mov	r3, r1
 800df96:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800df98:	887b      	ldrh	r3, [r7, #2]
 800df9a:	4619      	mov	r1, r3
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7fa faf2 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	89fb      	ldrh	r3, [r7, #14]
 800dfaa:	4413      	add	r3, r2
 800dfac:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800dfae:	89fb      	ldrh	r3, [r7, #14]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d006      	beq.n	800dfc2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 800dfb4:	68b8      	ldr	r0, [r7, #8]
 800dfb6:	f7fb f910 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	4413      	add	r3, r2
                        : nullptr;
 800dfc0:	e000      	b.n	800dfc4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800dfc2:	2300      	movs	r3, #0
  }
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3710      	adds	r7, #16
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800dfd8:	887b      	ldrh	r3, [r7, #2]
 800dfda:	4619      	mov	r1, r3
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f7fa fad2 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	89fb      	ldrh	r3, [r7, #14]
 800dfea:	4413      	add	r3, r2
 800dfec:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800dfee:	89fb      	ldrh	r3, [r7, #14]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d006      	beq.n	800e002 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 800dff4:	68b8      	ldr	r0, [r7, #8]
 800dff6:	f7fb f8f0 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800dffa:	4602      	mov	r2, r0
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	4413      	add	r3, r2
                        : nullptr;
 800e000:	e000      	b.n	800e004 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e002:	2300      	movs	r3, #0
  }
 800e004:	4618      	mov	r0, r3
 800e006:	3710      	adds	r7, #16
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	460b      	mov	r3, r1
 800e016:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e018:	887b      	ldrh	r3, [r7, #2]
 800e01a:	4619      	mov	r1, r3
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f7fa fab2 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e022:	4603      	mov	r3, r0
 800e024:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	89fb      	ldrh	r3, [r7, #14]
 800e02a:	4413      	add	r3, r2
 800e02c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e02e:	89fb      	ldrh	r3, [r7, #14]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d006      	beq.n	800e042 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 800e034:	68b8      	ldr	r0, [r7, #8]
 800e036:	f7fb f8d0 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e03a:	4602      	mov	r2, r0
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	4413      	add	r3, r2
                        : nullptr;
 800e040:	e000      	b.n	800e044 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e042:	2300      	movs	r3, #0
  }
 800e044:	4618      	mov	r0, r3
 800e046:	3710      	adds	r7, #16
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	460b      	mov	r3, r1
 800e056:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e058:	887b      	ldrh	r3, [r7, #2]
 800e05a:	4619      	mov	r1, r3
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f7fa fa92 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e062:	4603      	mov	r3, r0
 800e064:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	89fb      	ldrh	r3, [r7, #14]
 800e06a:	4413      	add	r3, r2
 800e06c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e06e:	89fb      	ldrh	r3, [r7, #14]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d006      	beq.n	800e082 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 800e074:	68b8      	ldr	r0, [r7, #8]
 800e076:	f7fb f8b0 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e07a:	4602      	mov	r2, r0
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	4413      	add	r3, r2
                        : nullptr;
 800e080:	e000      	b.n	800e084 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e082:	2300      	movs	r3, #0
  }
 800e084:	4618      	mov	r0, r3
 800e086:	3710      	adds	r7, #16
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	3304      	adds	r3, #4
  }
 800e098:	4618      	mov	r0, r3
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	4413      	add	r3, r2
 800e0b6:	edd3 7a00 	vldr	s15, [r3]
 800e0ba:	eeb0 0a67 	vmov.f32	s0, s15
 800e0be:	f7fb ff1c 	bl	8009efa <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800e0c2:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e0c6:	eeb0 0a67 	vmov.f32	s0, s15
 800e0ca:	3708      	adds	r7, #8
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	3304      	adds	r3, #4
  }
 800e0dc:	4618      	mov	r0, r3
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	00db      	lsls	r3, r3, #3
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	4413      	add	r3, r2
 800e0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fe:	4610      	mov	r0, r2
 800e100:	4619      	mov	r1, r3
 800e102:	f000 f8b3 	bl	800e26c <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 800e106:	4602      	mov	r2, r0
 800e108:	460b      	mov	r3, r1
  }
 800e10a:	4610      	mov	r0, r2
 800e10c:	4619      	mov	r1, r3
 800e10e:	3708      	adds	r7, #8
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	3304      	adds	r3, #4
  }
 800e120:	4618      	mov	r0, r3
 800e122:	370c      	adds	r7, #12
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr

0800e12c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	4413      	add	r3, r2
 800e13e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f7fb f84a 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e146:	4602      	mov	r2, r0
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	4413      	add	r3, r2
  }
 800e14c:	4618      	mov	r0, r3
 800e14e:	3708      	adds	r7, #8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	3304      	adds	r3, #4
  }
 800e160:	4618      	mov	r0, r3
 800e162:	370c      	adds	r7, #12
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr

0800e16c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	009b      	lsls	r3, r3, #2
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	4413      	add	r3, r2
 800e17e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7fb f82a 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e186:	4602      	mov	r2, r0
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	4413      	add	r3, r2
  }
 800e18c:	4618      	mov	r0, r3
 800e18e:	3708      	adds	r7, #8
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	3304      	adds	r3, #4
  }
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	4413      	add	r3, r2
 800e1be:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7fb f80a 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	4413      	add	r3, r2
  }
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3708      	adds	r7, #8
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	3304      	adds	r3, #4
  }
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f7fa ffea 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e206:	4602      	mov	r2, r0
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	4413      	add	r3, r2
  }
 800e20c:	4618      	mov	r0, r3
 800e20e:	3708      	adds	r7, #8
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	3304      	adds	r3, #4
  }
 800e220:	4618      	mov	r0, r3
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	4413      	add	r3, r2
 800e23e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f7fa ffca 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e246:	4602      	mov	r2, r0
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	4413      	add	r3, r2
  }
 800e24c:	4618      	mov	r0, r3
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 800e254:	b480      	push	{r7}
 800e256:	b083      	sub	sp, #12
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	3304      	adds	r3, #4
  }
 800e260:	4618      	mov	r0, r3
 800e262:	370c      	adds	r7, #12
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 800e276:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800e27a:	4610      	mov	r0, r2
 800e27c:	4619      	mov	r1, r3
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	4a05      	ldr	r2, [pc, #20]	; (800e2a8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	601a      	str	r2, [r3, #0]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	4618      	mov	r0, r3
 800e29a:	f7fd ffb3 	bl	800c204 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	0802c0e0 	.word	0x0802c0e0

0800e2ac <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f7ff ffe7 	bl	800e288 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 800e2ba:	2108      	movs	r1, #8
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f016 fb78 	bl	80249b2 <_ZdlPvj>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3708      	adds	r7, #8
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	4a04      	ldr	r2, [pc, #16]	; (800e2e8 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	601a      	str	r2, [r3, #0]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	4618      	mov	r0, r3
 800e2de:	370c      	adds	r7, #12
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr
 800e2e8:	0802c160 	.word	0x0802c160

0800e2ec <_ZN6tflite13ErrorReporterD0Ev>:
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f7ff ffe9 	bl	800e2cc <_ZN6tflite13ErrorReporterD1Ev>
 800e2fa:	2104      	movs	r1, #4
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f016 fb58 	bl	80249b2 <_ZdlPvj>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	4618      	mov	r0, r3
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	4a05      	ldr	r2, [pc, #20]	; (800e32c <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	601a      	str	r2, [r3, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7ff ffd5 	bl	800e2cc <_ZN6tflite13ErrorReporterD1Ev>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	4618      	mov	r0, r3
 800e326:	3708      	adds	r7, #8
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	0802c14c 	.word	0x0802c14c

0800e330 <_ZN6tflite18MicroErrorReporterD0Ev>:
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f7ff ffe7 	bl	800e30c <_ZN6tflite18MicroErrorReporterD1Ev>
 800e33e:	2104      	movs	r1, #4
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f016 fb36 	bl	80249b2 <_ZdlPvj>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	4618      	mov	r0, r3
 800e34a:	3708      	adds	r7, #8
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
 800e350:	b580      	push	{r7, lr}
 800e352:	b0c2      	sub	sp, #264	; 0x108
 800e354:	af00      	add	r7, sp, #0
 800e356:	1d3b      	adds	r3, r7, #4
 800e358:	6018      	str	r0, [r3, #0]
 800e35a:	463b      	mov	r3, r7
 800e35c:	6019      	str	r1, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 800e35e:	463b      	mov	r3, r7
 800e360:	1d3a      	adds	r2, r7, #4
 800e362:	f107 0008 	add.w	r0, r7, #8
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	6812      	ldr	r2, [r2, #0]
 800e36a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e36e:	f001 fc35 	bl	800fbdc <MicroVsnprintf>
  DebugLog(log_buffer);
 800e372:	f107 0308 	add.w	r3, r7, #8
 800e376:	4618      	mov	r0, r3
 800e378:	f7fd fbfd 	bl	800bb76 <DebugLog>
  DebugLog("\r\n");
 800e37c:	4803      	ldr	r0, [pc, #12]	; (800e38c <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x3c>)
 800e37e:	f7fd fbfa 	bl	800bb76 <DebugLog>
#endif
}
 800e382:	bf00      	nop
 800e384:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	08027f84 	.word	0x08027f84

0800e390 <_Z11MicroPrintfPKcz>:

}  // namespace

#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
void MicroPrintf(const char* format, ...) {
 800e390:	b40f      	push	{r0, r1, r2, r3}
 800e392:	b580      	push	{r7, lr}
 800e394:	b082      	sub	sp, #8
 800e396:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 800e398:	f107 0314 	add.w	r3, r7, #20
 800e39c:	607b      	str	r3, [r7, #4]
  Log(format, args);
 800e39e:	6879      	ldr	r1, [r7, #4]
 800e3a0:	6938      	ldr	r0, [r7, #16]
 800e3a2:	f7ff ffd5 	bl	800e350 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  va_end(args);
}
 800e3a6:	bf00      	nop
 800e3a8:	3708      	adds	r7, #8
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e3b0:	b004      	add	sp, #16
 800e3b2:	4770      	bx	lr

0800e3b4 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	60f8      	str	r0, [r7, #12]
 800e3bc:	60b9      	str	r1, [r7, #8]
 800e3be:	607a      	str	r2, [r7, #4]
  Log(format, args);
 800e3c0:	6879      	ldr	r1, [r7, #4]
 800e3c2:	68b8      	ldr	r0, [r7, #8]
 800e3c4:	f7ff ffc4 	bl	800e350 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
 800e3c8:	2300      	movs	r3, #0
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3710      	adds	r7, #16
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>:
//   ScopedMicroProfiler scoped_profiler("custom_tag", profiler);
//   work_to_profile();
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag, MicroProfiler* profiler)
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b084      	sub	sp, #16
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	60f8      	str	r0, [r7, #12]
 800e3da:	60b9      	str	r1, [r7, #8]
 800e3dc:	607a      	str	r2, [r7, #4]
      : profiler_(profiler) {
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	601a      	str	r2, [r3, #0]
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	605a      	str	r2, [r3, #4]
    if (profiler_ != nullptr) {
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00c      	beq.n	800e40c <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE+0x3a>
      event_handle_ = profiler_->BeginEvent(tag);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	685a      	ldr	r2, [r3, #4]
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	3308      	adds	r3, #8
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	68b9      	ldr	r1, [r7, #8]
 800e402:	4610      	mov	r0, r2
 800e404:	4798      	blx	r3
 800e406:	4602      	mov	r2, r0
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	601a      	str	r2, [r3, #0]
    }
  }
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	4618      	mov	r0, r3
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <_ZN6tflite19ScopedMicroProfilerD1Ev>:

  ~ScopedMicroProfiler() {
 800e416:	b580      	push	{r7, lr}
 800e418:	b082      	sub	sp, #8
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
    if (profiler_ != nullptr) {
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00a      	beq.n	800e43c <_ZN6tflite19ScopedMicroProfilerD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6858      	ldr	r0, [r3, #4]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	330c      	adds	r3, #12
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	6812      	ldr	r2, [r2, #0]
 800e438:	4611      	mov	r1, r2
 800e43a:	4798      	blx	r3
    }
  }
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	4618      	mov	r0, r3
 800e440:	3708      	adds	r7, #8
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}

0800e446 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 800e446:	b580      	push	{r7, lr}
 800e448:	b082      	sub	sp, #8
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	695b      	ldr	r3, [r3, #20]
 800e452:	2b20      	cmp	r3, #32
 800e454:	d102      	bne.n	800e45c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	699b      	ldr	r3, [r3, #24]
 800e45a:	e007      	b.n	800e46c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	695b      	ldr	r3, [r3, #20]
 800e460:	b2db      	uxtb	r3, r3
 800e462:	4618      	mov	r0, r3
 800e464:	f7fc fa1e 	bl	800a8a4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800e468:	4603      	mov	r3, r0
 800e46a:	bf00      	nop
  }
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3708      	adds	r7, #8
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
#endif  // !defined(TF_LITE_STRIP_ERROR_STRINGS)

}  // namespace

MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	607a      	str	r2, [r7, #4]
 800e480:	603b      	str	r3, [r7, #0]
                       MicroAllocator* allocator)
    : context_(context),
      model_(model),
      allocator_(allocator),
      current_subgraph_index_(0) {
 800e482:	4a10      	ldr	r2, [pc, #64]	; (800e4c4 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x50>)
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	601a      	str	r2, [r3, #0]
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	68ba      	ldr	r2, [r7, #8]
 800e48c:	605a      	str	r2, [r3, #4]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	609a      	str	r2, [r3, #8]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	683a      	ldr	r2, [r7, #0]
 800e498:	60da      	str	r2, [r3, #12]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2200      	movs	r2, #0
 800e49e:	611a      	str	r2, [r3, #16]
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	615a      	str	r2, [r3, #20]
  if (model != nullptr) {
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d005      	beq.n	800e4b8 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    subgraphs_ = model->subgraphs();
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f7fd fe7f 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	619a      	str	r2, [r3, #24]
  }
}
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	0802c174 	.word	0x0802c174

0800e4c8 <_ZN6tflite10MicroGraphD1Ev>:

MicroGraph::~MicroGraph() {}
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	4a04      	ldr	r2, [pc, #16]	; (800e4e4 <_ZN6tflite10MicroGraphD1Ev+0x1c>)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	601a      	str	r2, [r3, #0]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr
 800e4e4:	0802c174 	.word	0x0802c174

0800e4e8 <_ZN6tflite10MicroGraphD0Ev>:
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f7ff ffe9 	bl	800e4c8 <_ZN6tflite10MicroGraphD1Ev>
 800e4f6:	211c      	movs	r1, #28
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f016 fa5a 	bl	80249b2 <_ZdlPvj>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4618      	mov	r0, r3
 800e502:	3708      	adds	r7, #8
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:

TfLiteStatus MicroGraph::InitSubgraphs() {
 800e508:	b580      	push	{r7, lr}
 800e50a:	b08a      	sub	sp, #40	; 0x28
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	695b      	ldr	r3, [r3, #20]
 800e514:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e516:	2300      	movs	r3, #0
 800e518:	627b      	str	r3, [r7, #36]	; 0x24
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	699b      	ldr	r3, [r3, #24]
 800e51e:	4618      	mov	r0, r3
 800e520:	f7ff fb9e 	bl	800dc60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800e524:	4602      	mov	r2, r0
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	4293      	cmp	r3, r2
 800e52a:	bf34      	ite	cc
 800e52c:	2301      	movcc	r3, #1
 800e52e:	2300      	movcs	r3, #0
 800e530:	b2db      	uxtb	r3, r3
 800e532:	2b00      	cmp	r3, #0
 800e534:	d05a      	beq.n	800e5ec <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xe4>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800e536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	615a      	str	r2, [r3, #20]

    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	699b      	ldr	r3, [r3, #24]
 800e540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e542:	4618      	mov	r0, r3
 800e544:	f7ff fc28 	bl	800dd98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800e548:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e54a:	2300      	movs	r3, #0
 800e54c:	623b      	str	r3, [r7, #32]
 800e54e:	6938      	ldr	r0, [r7, #16]
 800e550:	f7fd fdf5 	bl	800c13e <_ZNK6tflite8SubGraph9operatorsEv>
 800e554:	4603      	mov	r3, r0
 800e556:	4618      	mov	r0, r3
 800e558:	f7ff fb4e 	bl	800dbf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800e55c:	4602      	mov	r2, r0
 800e55e:	6a3b      	ldr	r3, [r7, #32]
 800e560:	4293      	cmp	r3, r2
 800e562:	bf34      	ite	cc
 800e564:	2301      	movcc	r3, #1
 800e566:	2300      	movcs	r3, #0
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d03a      	beq.n	800e5e4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xdc>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	691a      	ldr	r2, [r3, #16]
 800e572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e574:	00db      	lsls	r3, r3, #3
 800e576:	4413      	add	r3, r2
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	6a3b      	ldr	r3, [r7, #32]
 800e57c:	212c      	movs	r1, #44	; 0x2c
 800e57e:	fb01 f303 	mul.w	r3, r1, r3
 800e582:	4413      	add	r3, r2
      TfLiteNode* node =
 800e584:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	691a      	ldr	r2, [r3, #16]
 800e58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58c:	00db      	lsls	r3, r3, #3
 800e58e:	4413      	add	r3, r2
              .node_and_registrations[i]
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	6a3b      	ldr	r3, [r7, #32]
 800e594:	212c      	movs	r1, #44	; 0x2c
 800e596:	fb01 f303 	mul.w	r3, r1, r3
 800e59a:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 800e59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e59e:	60bb      	str	r3, [r7, #8]
              .registration;
      size_t init_data_size;
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	695b      	ldr	r3, [r3, #20]
 800e5a4:	2b20      	cmp	r3, #32
 800e5a6:	d106      	bne.n	800e5b6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xae>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	699b      	ldr	r3, [r3, #24]
 800e5ac:	61bb      	str	r3, [r7, #24]
        init_data_size = node->custom_initial_data_size;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	69db      	ldr	r3, [r3, #28]
 800e5b2:	61fb      	str	r3, [r7, #28]
 800e5b4:	e004      	b.n	800e5c0 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xb8>
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	695b      	ldr	r3, [r3, #20]
 800e5ba:	61bb      	str	r3, [r7, #24]
        init_data_size = 0;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	61fb      	str	r3, [r7, #28]
      }
      if (registration->init) {
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d009      	beq.n	800e5dc <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xd4>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	6850      	ldr	r0, [r2, #4]
 800e5d0:	69fa      	ldr	r2, [r7, #28]
 800e5d2:	69b9      	ldr	r1, [r7, #24]
 800e5d4:	4798      	blx	r3
 800e5d6:	4602      	mov	r2, r0
        node->user_data =
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e5dc:	6a3b      	ldr	r3, [r7, #32]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	623b      	str	r3, [r7, #32]
 800e5e2:	e7b4      	b.n	800e54e <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x46>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	627b      	str	r3, [r7, #36]	; 0x24
 800e5ea:	e796      	b.n	800e51a <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	697a      	ldr	r2, [r7, #20]
 800e5f0:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800e5f2:	2300      	movs	r3, #0
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3728      	adds	r7, #40	; 0x28
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:

TfLiteStatus MicroGraph::PrepareSubgraphs() {
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b08a      	sub	sp, #40	; 0x28
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	695b      	ldr	r3, [r3, #20]
 800e608:	61fb      	str	r3, [r7, #28]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e60a:	2300      	movs	r3, #0
 800e60c:	627b      	str	r3, [r7, #36]	; 0x24
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	699b      	ldr	r3, [r3, #24]
 800e612:	4618      	mov	r0, r3
 800e614:	f7ff fb24 	bl	800dc60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800e618:	4602      	mov	r2, r0
 800e61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61c:	4293      	cmp	r3, r2
 800e61e:	bf34      	ite	cc
 800e620:	2301      	movcc	r3, #1
 800e622:	2300      	movcs	r3, #0
 800e624:	b2db      	uxtb	r3, r3
 800e626:	2b00      	cmp	r3, #0
 800e628:	d05e      	beq.n	800e6e8 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xec>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800e62a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	615a      	str	r2, [r3, #20]

    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	699b      	ldr	r3, [r3, #24]
 800e634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e636:	4618      	mov	r0, r3
 800e638:	f7ff fbae 	bl	800dd98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800e63c:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e63e:	2300      	movs	r3, #0
 800e640:	623b      	str	r3, [r7, #32]
 800e642:	69b8      	ldr	r0, [r7, #24]
 800e644:	f7fd fd7b 	bl	800c13e <_ZNK6tflite8SubGraph9operatorsEv>
 800e648:	4603      	mov	r3, r0
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7ff fad4 	bl	800dbf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800e650:	4602      	mov	r2, r0
 800e652:	6a3b      	ldr	r3, [r7, #32]
 800e654:	4293      	cmp	r3, r2
 800e656:	bf34      	ite	cc
 800e658:	2301      	movcc	r3, #1
 800e65a:	2300      	movcs	r3, #0
 800e65c:	b2db      	uxtb	r3, r3
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d03e      	beq.n	800e6e0 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe4>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	691a      	ldr	r2, [r3, #16]
 800e666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e668:	00db      	lsls	r3, r3, #3
 800e66a:	4413      	add	r3, r2
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	6a3b      	ldr	r3, [r7, #32]
 800e670:	212c      	movs	r1, #44	; 0x2c
 800e672:	fb01 f303 	mul.w	r3, r1, r3
 800e676:	4413      	add	r3, r2
      TfLiteNode* node =
 800e678:	617b      	str	r3, [r7, #20]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	691a      	ldr	r2, [r3, #16]
 800e67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e680:	00db      	lsls	r3, r3, #3
 800e682:	4413      	add	r3, r2
              .node_and_registrations[i]
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	6a3b      	ldr	r3, [r7, #32]
 800e688:	212c      	movs	r1, #44	; 0x2c
 800e68a:	fb01 f303 	mul.w	r3, r1, r3
 800e68e:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 800e690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e692:	613b      	str	r3, [r7, #16]
              .registration;
      if (registration->prepare != nullptr) {
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d016      	beq.n	800e6ca <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xce>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	6852      	ldr	r2, [r2, #4]
 800e6a4:	6979      	ldr	r1, [r7, #20]
 800e6a6:	4610      	mov	r0, r2
 800e6a8:	4798      	blx	r3
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	73fb      	strb	r3, [r7, #15]
        if (prepare_status != kTfLiteOk) {
 800e6ae:	7bfb      	ldrb	r3, [r7, #15]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d00a      	beq.n	800e6ca <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xce>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
 800e6b4:	6938      	ldr	r0, [r7, #16]
 800e6b6:	f7ff fec6 	bl	800e446 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800e6ba:	4601      	mov	r1, r0
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
 800e6be:	6a3a      	ldr	r2, [r7, #32]
 800e6c0:	480d      	ldr	r0, [pc, #52]	; (800e6f8 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xfc>)
 800e6c2:	f7ff fe65 	bl	800e390 <_Z11MicroPrintfPKcz>
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e012      	b.n	800e6f0 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xf4>
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	6a3a      	ldr	r2, [r7, #32]
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fe fca8 	bl	800d028 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e6d8:	6a3b      	ldr	r3, [r7, #32]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	623b      	str	r3, [r7, #32]
 800e6de:	e7b0      	b.n	800e642 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x46>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	627b      	str	r3, [r7, #36]	; 0x24
 800e6e6:	e792      	b.n	800e60e <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x12>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	69fa      	ldr	r2, [r7, #28]
 800e6ec:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800e6ee:	2300      	movs	r3, #0
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3728      	adds	r7, #40	; 0x28
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	08028634 	.word	0x08028634

0800e6fc <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:

TfLiteStatus MicroGraph::FreeSubgraphs() {
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b088      	sub	sp, #32
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	695b      	ldr	r3, [r3, #20]
 800e708:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e70a:	2300      	movs	r3, #0
 800e70c:	61fb      	str	r3, [r7, #28]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	699b      	ldr	r3, [r3, #24]
 800e712:	4618      	mov	r0, r3
 800e714:	f7ff faa4 	bl	800dc60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800e718:	4602      	mov	r2, r0
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	4293      	cmp	r3, r2
 800e71e:	bf34      	ite	cc
 800e720:	2301      	movcc	r3, #1
 800e722:	2300      	movcs	r3, #0
 800e724:	b2db      	uxtb	r3, r3
 800e726:	2b00      	cmp	r3, #0
 800e728:	d04b      	beq.n	800e7c2 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xc6>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800e72a:	69fa      	ldr	r2, [r7, #28]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	615a      	str	r2, [r3, #20]
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	699b      	ldr	r3, [r3, #24]
 800e734:	69f9      	ldr	r1, [r7, #28]
 800e736:	4618      	mov	r0, r3
 800e738:	f7ff fb2e 	bl	800dd98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800e73c:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e73e:	2300      	movs	r3, #0
 800e740:	61bb      	str	r3, [r7, #24]
 800e742:	6938      	ldr	r0, [r7, #16]
 800e744:	f7fd fcfb 	bl	800c13e <_ZNK6tflite8SubGraph9operatorsEv>
 800e748:	4603      	mov	r3, r0
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7ff fa54 	bl	800dbf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800e750:	4602      	mov	r2, r0
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	4293      	cmp	r3, r2
 800e756:	bf34      	ite	cc
 800e758:	2301      	movcc	r3, #1
 800e75a:	2300      	movcs	r3, #0
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d02b      	beq.n	800e7ba <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xbe>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	691a      	ldr	r2, [r3, #16]
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	00db      	lsls	r3, r3, #3
 800e76a:	4413      	add	r3, r2
 800e76c:	681a      	ldr	r2, [r3, #0]
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	212c      	movs	r1, #44	; 0x2c
 800e772:	fb01 f303 	mul.w	r3, r1, r3
 800e776:	4413      	add	r3, r2
      TfLiteNode* node =
 800e778:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	691a      	ldr	r2, [r3, #16]
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	00db      	lsls	r3, r3, #3
 800e782:	4413      	add	r3, r2
              .node_and_registrations[i]
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	212c      	movs	r1, #44	; 0x2c
 800e78a:	fb01 f303 	mul.w	r3, r1, r3
 800e78e:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 800e790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e792:	60bb      	str	r3, [r7, #8]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d00b      	beq.n	800e7b2 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xb6>
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d007      	beq.n	800e7b2 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xb6>
        registration->free(context_, node->user_data);
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	6850      	ldr	r0, [r2, #4]
 800e7aa:	68fa      	ldr	r2, [r7, #12]
 800e7ac:	6912      	ldr	r2, [r2, #16]
 800e7ae:	4611      	mov	r1, r2
 800e7b0:	4798      	blx	r3
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	61bb      	str	r3, [r7, #24]
 800e7b8:	e7c3      	b.n	800e742 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x46>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	61fb      	str	r3, [r7, #28]
 800e7c0:	e7a5      	b.n	800e70e <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	697a      	ldr	r2, [r7, #20]
 800e7c6:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3720      	adds	r7, #32
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
	...

0800e7d4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 800e7d4:	b5b0      	push	{r4, r5, r7, lr}
 800e7d6:	b08a      	sub	sp, #40	; 0x28
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
 800e7de:	2400      	movs	r4, #0
  int previous_subgraph_idx = current_subgraph_index_;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	695b      	ldr	r3, [r3, #20]
 800e7e4:	623b      	str	r3, [r7, #32]
  current_subgraph_index_ = subgraph_idx;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	683a      	ldr	r2, [r7, #0]
 800e7ea:	615a      	str	r2, [r3, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	699b      	ldr	r3, [r3, #24]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7ff fa35 	bl	800dc60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	bf94      	ite	ls
 800e7fe:	2301      	movls	r3, #1
 800e800:	2300      	movhi	r3, #0
 800e802:	b2db      	uxtb	r3, r3
 800e804:	2b00      	cmp	r3, #0
 800e806:	d00c      	beq.n	800e822 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x4e>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	699b      	ldr	r3, [r3, #24]
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7ff fa27 	bl	800dc60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800e812:	4603      	mov	r3, r0
 800e814:	461a      	mov	r2, r3
 800e816:	6839      	ldr	r1, [r7, #0]
 800e818:	4842      	ldr	r0, [pc, #264]	; (800e924 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x150>)
 800e81a:	f7ff fdb9 	bl	800e390 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800e81e:	2401      	movs	r4, #1
 800e820:	e07b      	b.n	800e91a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x146>
  }
  const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	699b      	ldr	r3, [r3, #24]
 800e826:	683a      	ldr	r2, [r7, #0]
 800e828:	4611      	mov	r1, r2
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7ff fab4 	bl	800dd98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800e830:	61f8      	str	r0, [r7, #28]

  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e832:	2300      	movs	r3, #0
 800e834:	627b      	str	r3, [r7, #36]	; 0x24
 800e836:	69f8      	ldr	r0, [r7, #28]
 800e838:	f7fd fc81 	bl	800c13e <_ZNK6tflite8SubGraph9operatorsEv>
 800e83c:	4603      	mov	r3, r0
 800e83e:	4618      	mov	r0, r3
 800e840:	f7ff f9da 	bl	800dbf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800e844:	4602      	mov	r2, r0
 800e846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e848:	4293      	cmp	r3, r2
 800e84a:	bf34      	ite	cc
 800e84c:	2301      	movcc	r3, #1
 800e84e:	2300      	movcs	r3, #0
 800e850:	b2db      	uxtb	r3, r3
 800e852:	2b00      	cmp	r3, #0
 800e854:	d05d      	beq.n	800e912 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x13e>
    TfLiteNode* node =
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	691a      	ldr	r2, [r3, #16]
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	00db      	lsls	r3, r3, #3
 800e85e:	4413      	add	r3, r2
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e864:	212c      	movs	r1, #44	; 0x2c
 800e866:	fb01 f303 	mul.w	r3, r1, r3
 800e86a:	4413      	add	r3, r2
    TfLiteNode* node =
 800e86c:	61bb      	str	r3, [r7, #24]
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	691a      	ldr	r2, [r3, #16]
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	00db      	lsls	r3, r3, #3
 800e876:	4413      	add	r3, r2
                                                 .node_and_registrations[i]
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87c:	212c      	movs	r1, #44	; 0x2c
 800e87e:	fb01 f303 	mul.w	r3, r1, r3
 800e882:	4413      	add	r3, r2
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 800e884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e886:	617b      	str	r3, [r7, #20]
// -DTF_LITE_STRIP_ERROR_STRINGS) because the function OpNameFromRegistration is
// only defined for builds with the error strings.
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
    ScopedMicroProfiler scoped_profiler(
        OpNameFromRegistration(registration),
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 800e888:	6978      	ldr	r0, [r7, #20]
 800e88a:	f7ff fddc 	bl	800e446 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800e88e:	4601      	mov	r1, r0
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e896:	f107 0308 	add.w	r3, r7, #8
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7ff fd99 	bl	800e3d2 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>
#endif

    TFLITE_DCHECK(registration->invoke);
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	68db      	ldr	r3, [r3, #12]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d101      	bne.n	800e8ac <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd8>
 800e8a8:	f016 fb09 	bl	8024ebe <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	687a      	ldr	r2, [r7, #4]
 800e8b2:	6852      	ldr	r2, [r2, #4]
 800e8b4:	69b9      	ldr	r1, [r7, #24]
 800e8b6:	4610      	mov	r0, r2
 800e8b8:	4798      	blx	r3
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	74fb      	strb	r3, [r7, #19]

    // All TfLiteTensor structs used in the kernel are allocated from temp
    // memory in the allocator. This creates a chain of allocations in the
    // temp section. The call below resets the chain of allocations to
    // prepare for the next call.
    allocator_->ResetTempAllocations();
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	68da      	ldr	r2, [r3, #12]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	68db      	ldr	r3, [r3, #12]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	3308      	adds	r3, #8
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	4610      	mov	r0, r2
 800e8ce:	4798      	blx	r3

    if (invoke_status == kTfLiteError) {
 800e8d0:	7cfb      	ldrb	r3, [r7, #19]
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d10b      	bne.n	800e8ee <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x11a>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 800e8d6:	6978      	ldr	r0, [r7, #20]
 800e8d8:	f7ff fdb5 	bl	800e446 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800e8dc:	4601      	mov	r1, r0
 800e8de:	7cfb      	ldrb	r3, [r7, #19]
 800e8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8e2:	4811      	ldr	r0, [pc, #68]	; (800e928 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x154>)
 800e8e4:	f7ff fd54 	bl	800e390 <_Z11MicroPrintfPKcz>
                  OpNameFromRegistration(registration), i, invoke_status);
      return kTfLiteError;
 800e8e8:	2401      	movs	r4, #1
 800e8ea:	2500      	movs	r5, #0
 800e8ec:	e006      	b.n	800e8fc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x128>
    } else if (invoke_status != kTfLiteOk) {
 800e8ee:	7cfb      	ldrb	r3, [r7, #19]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d002      	beq.n	800e8fa <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x126>
      return invoke_status;
 800e8f4:	7cfc      	ldrb	r4, [r7, #19]
 800e8f6:	2500      	movs	r5, #0
 800e8f8:	e000      	b.n	800e8fc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x128>
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 800e8fa:	2501      	movs	r5, #1
 800e8fc:	f107 0308 	add.w	r3, r7, #8
 800e900:	4618      	mov	r0, r3
 800e902:	f7ff fd88 	bl	800e416 <_ZN6tflite19ScopedMicroProfilerD1Ev>
 800e906:	2d01      	cmp	r5, #1
 800e908:	d107      	bne.n	800e91a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x146>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90c:	3301      	adds	r3, #1
 800e90e:	627b      	str	r3, [r7, #36]	; 0x24
 800e910:	e791      	b.n	800e836 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x62>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6a3a      	ldr	r2, [r7, #32]
 800e916:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 800e918:	2400      	movs	r4, #0
 800e91a:	4623      	mov	r3, r4
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3728      	adds	r7, #40	; 0x28
 800e920:	46bd      	mov	sp, r7
 800e922:	bdb0      	pop	{r4, r5, r7, pc}
 800e924:	0802866c 	.word	0x0802866c
 800e928:	080286a0 	.word	0x080286a0

0800e92c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:

TfLiteStatus MicroGraph::ResetVariableTensors() {
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b08a      	sub	sp, #40	; 0x28
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e934:	2300      	movs	r3, #0
 800e936:	627b      	str	r3, [r7, #36]	; 0x24
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	699b      	ldr	r3, [r3, #24]
 800e93c:	4618      	mov	r0, r3
 800e93e:	f7ff f98f 	bl	800dc60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800e942:	4602      	mov	r2, r0
 800e944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e946:	4293      	cmp	r3, r2
 800e948:	bf34      	ite	cc
 800e94a:	2301      	movcc	r3, #1
 800e94c:	2300      	movcs	r3, #0
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	2b00      	cmp	r3, #0
 800e952:	d077      	beq.n	800ea44 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x118>
       subgraph_idx++) {
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	699b      	ldr	r3, [r3, #24]
 800e958:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7ff fa1c 	bl	800dd98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800e960:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800e962:	2300      	movs	r3, #0
 800e964:	623b      	str	r3, [r7, #32]
 800e966:	69b8      	ldr	r0, [r7, #24]
 800e968:	f7fd fbbf 	bl	800c0ea <_ZNK6tflite8SubGraph7tensorsEv>
 800e96c:	4603      	mov	r3, r0
 800e96e:	4618      	mov	r0, r3
 800e970:	f7ff f90e 	bl	800db90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800e974:	4602      	mov	r2, r0
 800e976:	6a3b      	ldr	r3, [r7, #32]
 800e978:	4293      	cmp	r3, r2
 800e97a:	bf34      	ite	cc
 800e97c:	2301      	movcc	r3, #1
 800e97e:	2300      	movcs	r3, #0
 800e980:	b2db      	uxtb	r3, r3
 800e982:	2b00      	cmp	r3, #0
 800e984:	d05a      	beq.n	800ea3c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x110>
      auto* tensor = subgraph->tensors()->Get(i);
 800e986:	69b8      	ldr	r0, [r7, #24]
 800e988:	f7fd fbaf 	bl	800c0ea <_ZNK6tflite8SubGraph7tensorsEv>
 800e98c:	4603      	mov	r3, r0
 800e98e:	6a39      	ldr	r1, [r7, #32]
 800e990:	4618      	mov	r0, r3
 800e992:	f7ff f90b 	bl	800dbac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800e996:	6178      	str	r0, [r7, #20]
      if (tensor->is_variable()) {
 800e998:	6978      	ldr	r0, [r7, #20]
 800e99a:	f7fd fb76 	bl	800c08a <_ZNK6tflite6Tensor11is_variableEv>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d047      	beq.n	800ea34 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x108>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	691a      	ldr	r2, [r3, #16]
 800e9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9aa:	00db      	lsls	r3, r3, #3
 800e9ac:	4413      	add	r3, r2
 800e9ae:	6859      	ldr	r1, [r3, #4]
 800e9b0:	6a3a      	ldr	r2, [r7, #32]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	005b      	lsls	r3, r3, #1
 800e9b6:	4413      	add	r3, r2
 800e9b8:	009b      	lsls	r3, r3, #2
 800e9ba:	440b      	add	r3, r1
 800e9bc:	f107 020c 	add.w	r2, r7, #12
 800e9c0:	4611      	mov	r1, r2
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7fd facd 	bl	800bf62 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	74fb      	strb	r3, [r7, #19]
 800e9cc:	7cfb      	ldrb	r3, [r7, #19]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d001      	beq.n	800e9d6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
 800e9d2:	7cfb      	ldrb	r3, [r7, #19]
 800e9d4:	e037      	b.n	800ea46 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x11a>
            &subgraph_allocations_[subgraph_idx].tensors[i], &buffer_size));

        int value = 0;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	61fb      	str	r3, [r7, #28]
        if (tensor->type() == tflite::TensorType_INT8) {
 800e9da:	6978      	ldr	r0, [r7, #20]
 800e9dc:	f7fd f8e4 	bl	800bba8 <_ZNK6tflite6Tensor4typeEv>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2b09      	cmp	r3, #9
 800e9e4:	bf0c      	ite	eq
 800e9e6:	2301      	moveq	r3, #1
 800e9e8:	2300      	movne	r3, #0
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d00f      	beq.n	800ea10 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe4>
          value = tensor->quantization()->zero_point()->Get(0);
 800e9f0:	6978      	ldr	r0, [r7, #20]
 800e9f2:	f7fd fb3c 	bl	800c06e <_ZNK6tflite6Tensor12quantizationEv>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7fd fb0c 	bl	800c016 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2100      	movs	r1, #0
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7ff f89c 	bl	800db40 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	61fb      	str	r3, [r7, #28]
        }
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	691a      	ldr	r2, [r3, #16]
 800ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea16:	00db      	lsls	r3, r3, #3
 800ea18:	4413      	add	r3, r2
 800ea1a:	6859      	ldr	r1, [r3, #4]
 800ea1c:	6a3a      	ldr	r2, [r7, #32]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	005b      	lsls	r3, r3, #1
 800ea22:	4413      	add	r3, r2
 800ea24:	009b      	lsls	r3, r3, #2
 800ea26:	440b      	add	r3, r1
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	68fa      	ldr	r2, [r7, #12]
 800ea2c:	69f9      	ldr	r1, [r7, #28]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f016 fae8 	bl	8025004 <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800ea34:	6a3b      	ldr	r3, [r7, #32]
 800ea36:	3301      	adds	r3, #1
 800ea38:	623b      	str	r3, [r7, #32]
 800ea3a:	e794      	b.n	800e966 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800ea3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3e:	3301      	adds	r3, #1
 800ea40:	627b      	str	r3, [r7, #36]	; 0x24
 800ea42:	e779      	b.n	800e938 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
               buffer_size);
      }
    }
  }

  return kTfLiteOk;
 800ea44:	2300      	movs	r3, #0
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3728      	adds	r7, #40	; 0x28
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <_ZN6tflite10MicroGraph12NumSubgraphsEv>:

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b082      	sub	sp, #8
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fd fba8 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800ea60:	4603      	mov	r3, r0
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7ff f8fc 	bl	800dc60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3708      	adds	r7, #8
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}

0800ea72 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
 800ea72:	b480      	push	{r7}
 800ea74:	b083      	sub	sp, #12
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	6078      	str	r0, [r7, #4]
 800ea7a:	6039      	str	r1, [r7, #0]
  subgraph_allocations_ = subgraph_allocations;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	683a      	ldr	r2, [r7, #0]
 800ea80:	611a      	str	r2, [r3, #16]
}
 800ea82:	bf00      	nop
 800ea84:	370c      	adds	r7, #12
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr

0800ea8e <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:

size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
 800ea8e:	b580      	push	{r7, lr}
 800ea90:	b082      	sub	sp, #8
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
 800ea96:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7fd fb87 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	4610      	mov	r0, r2
 800eaaa:	f7ff f8e7 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800eaae:	4603      	mov	r3, r0
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fd fb28 	bl	800c106 <_ZNK6tflite8SubGraph6inputsEv>
 800eab6:	4603      	mov	r3, r0
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7fa fc57 	bl	800936c <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800eabe:	4603      	mov	r3, r0
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3708      	adds	r7, #8
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b086      	sub	sp, #24
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	689b      	ldr	r3, [r3, #8]
 800ead8:	4618      	mov	r0, r3
 800eada:	f7fd fb69 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800eade:	4602      	mov	r2, r0
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	4619      	mov	r1, r3
 800eae4:	4610      	mov	r0, r2
 800eae6:	f7ff f8c9 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800eaea:	4603      	mov	r3, r0
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7fd fb0a 	bl	800c106 <_ZNK6tflite8SubGraph6inputsEv>
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	4610      	mov	r0, r2
 800eafa:	f7fa fc45 	bl	8009388 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800eafe:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	691a      	ldr	r2, [r3, #16]
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	00db      	lsls	r3, r3, #3
 800eb08:	4413      	add	r3, r2
 800eb0a:	6859      	ldr	r1, [r3, #4]
 800eb0c:	697a      	ldr	r2, [r7, #20]
 800eb0e:	4613      	mov	r3, r2
 800eb10:	005b      	lsls	r3, r3, #1
 800eb12:	4413      	add	r3, r2
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	440b      	add	r3, r1
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3718      	adds	r7, #24
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	689b      	ldr	r3, [r3, #8]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7fd fb3e 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800eb34:	4602      	mov	r2, r0
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	4619      	mov	r1, r3
 800eb3a:	4610      	mov	r0, r2
 800eb3c:	f7ff f89e 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800eb40:	4603      	mov	r3, r0
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fd faed 	bl	800c122 <_ZNK6tflite8SubGraph7outputsEv>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7fa fc0e 	bl	800936c <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800eb50:	4603      	mov	r3, r0
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3708      	adds	r7, #8
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}

0800eb5a <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
 800eb5a:	b580      	push	{r7, lr}
 800eb5c:	b086      	sub	sp, #24
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	60f8      	str	r0, [r7, #12]
 800eb62:	60b9      	str	r1, [r7, #8]
 800eb64:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	689b      	ldr	r3, [r3, #8]
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7fd fb20 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800eb70:	4602      	mov	r2, r0
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	4619      	mov	r1, r3
 800eb76:	4610      	mov	r0, r2
 800eb78:	f7ff f880 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7fd facf 	bl	800c122 <_ZNK6tflite8SubGraph7outputsEv>
 800eb84:	4602      	mov	r2, r0
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4619      	mov	r1, r3
 800eb8a:	4610      	mov	r0, r2
 800eb8c:	f7fa fbfc 	bl	8009388 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800eb90:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	691a      	ldr	r2, [r3, #16]
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	00db      	lsls	r3, r3, #3
 800eb9a:	4413      	add	r3, r2
 800eb9c:	6859      	ldr	r1, [r3, #4]
 800eb9e:	697a      	ldr	r2, [r7, #20]
 800eba0:	4613      	mov	r3, r2
 800eba2:	005b      	lsls	r3, r3, #1
 800eba4:	4413      	add	r3, r2
 800eba6:	009b      	lsls	r3, r3, #2
 800eba8:	440b      	add	r3, r1
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3718      	adds	r7, #24
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}

0800ebb2 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 800ebb2:	b580      	push	{r7, lr}
 800ebb4:	b082      	sub	sp, #8
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	2104      	movs	r1, #4
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7fe feec 	bl	800d99e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800ebc6:	4603      	mov	r3, r0
  }
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3708      	adds	r7, #8
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	210e      	movs	r1, #14
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7fe feae 	bl	800d93e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800ebe2:	4603      	mov	r3, r0
  }
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3708      	adds	r7, #8
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b082      	sub	sp, #8
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2106      	movs	r1, #6
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f000 fd58 	bl	800f6ae <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800ebfe:	4603      	mov	r3, r0
  }
 800ec00:	4618      	mov	r0, r3
 800ec02:	3708      	adds	r7, #8
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 800ec08:	b480      	push	{r7}
 800ec0a:	b083      	sub	sp, #12
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	695b      	ldr	r3, [r3, #20]
 800ec14:	4618      	mov	r0, r3
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <_ZN6tflite10MicroGraph14GetAllocationsEv>:

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 800ec20:	b480      	push	{r7}
 800ec22:	b083      	sub	sp, #12
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	691b      	ldr	r3, [r3, #16]
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	370c      	adds	r7, #12
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr

0800ec38 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
  // values other than kTfLiteOk and kTfLiteError.
  // TODO(b/149795762): Add this to the TfLiteStatus enum.
  TfLiteStatus Invoke();

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b082      	sub	sp, #8
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->inputs()->size();
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7fd fab3 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2100      	movs	r1, #0
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7ff f814 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ec54:	4603      	mov	r3, r0
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7fd fa55 	bl	800c106 <_ZNK6tflite8SubGraph6inputsEv>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fa fb84 	bl	800936c <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800ec64:	4603      	mov	r3, r0
  }
 800ec66:	4618      	mov	r0, r3
 800ec68:	3708      	adds	r7, #8
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b082      	sub	sp, #8
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->inputs();
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7fd fa98 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800ec80:	4603      	mov	r3, r0
 800ec82:	2100      	movs	r1, #0
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7fe fff9 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7fd fa3a 	bl	800c106 <_ZNK6tflite8SubGraph6inputsEv>
 800ec92:	4603      	mov	r3, r0
  }
 800ec94:	4618      	mov	r0, r3
 800ec96:	3708      	adds	r7, #8
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->outputs()->size();
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7fd fa81 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2100      	movs	r1, #0
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fe ffe2 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7fd fa31 	bl	800c122 <_ZNK6tflite8SubGraph7outputsEv>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7fa fb52 	bl	800936c <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800ecc8:	4603      	mov	r3, r0
  }
 800ecca:	4618      	mov	r0, r3
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b082      	sub	sp, #8
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->outputs();
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fd fa66 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2100      	movs	r1, #0
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7fe ffc7 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fd fa16 	bl	800c122 <_ZNK6tflite8SubGraph7outputsEv>
 800ecf6:	4603      	mov	r3, r0
  }
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3708      	adds	r7, #8
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>:
  // TODO(b/158263161): Consider switching to Create() function to enable better
  // error reporting during initialization.
  void Init(MicroProfiler* profiler);

  // Gets the current subgraph index used from within context methods.
  int get_subgraph_index() { return graph_.GetCurrentSubgraphIndex(); }
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	3368      	adds	r3, #104	; 0x68
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7ff ff7b 	bl	800ec08 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 800ed12:	4603      	mov	r3, r0
 800ed14:	4618      	mov	r0, r3
 800ed16:	3708      	adds	r7, #8
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/schema/schema_utils.h"

namespace tflite {

MicroInterpreter::MicroInterpreter(const Model* model,
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	60f8      	str	r0, [r7, #12]
 800ed24:	60b9      	str	r1, [r7, #8]
 800ed26:	607a      	str	r2, [r7, #4]
 800ed28:	603b      	str	r3, [r7, #0]

      graph_(&context_, model, &allocator_),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	68ba      	ldr	r2, [r7, #8]
 800ed2e:	601a      	str	r2, [r3, #0]
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	605a      	str	r2, [r3, #4]
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	69fa      	ldr	r2, [r7, #28]
 800ed3a:	609a      	str	r2, [r3, #8]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	330c      	adds	r3, #12
 800ed40:	2258      	movs	r2, #88	; 0x58
 800ed42:	2100      	movs	r1, #0
 800ed44:	4618      	mov	r0, r3
 800ed46:	f016 f95d 	bl	8025004 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800ed4a:	69fa      	ldr	r2, [r7, #28]
 800ed4c:	69b9      	ldr	r1, [r7, #24]
 800ed4e:	6838      	ldr	r0, [r7, #0]
 800ed50:	f7fd ffb8 	bl	800ccc4 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 800ed54:	4602      	mov	r2, r0
      output_tensors_(nullptr) {
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	665a      	str	r2, [r3, #100]	; 0x64
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f103 010c 	add.w	r1, r3, #12
      graph_(&context_, model, &allocator_),
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      output_tensors_(nullptr) {
 800ed6a:	68ba      	ldr	r2, [r7, #8]
 800ed6c:	f7ff fb82 	bl	800e474 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2200      	movs	r2, #0
 800ed74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2200      	movs	r2, #0
 800ed84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2200      	movs	r2, #0
 800ed94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  Init(profiler);
 800ed98:	6a39      	ldr	r1, [r7, #32]
 800ed9a:	68f8      	ldr	r0, [r7, #12]
 800ed9c:	f000 f826 	bl	800edec <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	4618      	mov	r0, r3
 800eda4:	3710      	adds	r7, #16
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <_ZN6tflite16MicroInterpreterD1Ev>:
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 800edaa:	b580      	push	{r7, lr}
 800edac:	b082      	sub	sp, #8
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]
  if (graph_.GetAllocations() != nullptr) {
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	3368      	adds	r3, #104	; 0x68
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7ff ff32 	bl	800ec20 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	bf14      	ite	ne
 800edc2:	2301      	movne	r3, #1
 800edc4:	2300      	moveq	r3, #0
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d004      	beq.n	800edd6 <_ZN6tflite16MicroInterpreterD1Ev+0x2c>
    graph_.FreeSubgraphs();
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	3368      	adds	r3, #104	; 0x68
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7ff fc93 	bl	800e6fc <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	3368      	adds	r3, #104	; 0x68
 800edda:	4618      	mov	r0, r3
 800eddc:	f7ff fb74 	bl	800e4c8 <_ZN6tflite10MicroGraphD1Ev>
  }
}
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	4618      	mov	r0, r3
 800ede4:	3708      	adds	r7, #8
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
	...

0800edec <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:

void MicroInterpreter::Init(MicroProfiler* profiler) {
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
  context_.impl_ = static_cast<void*>(this);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	619a      	str	r2, [r3, #24]
  context_.ReportError = ReportOpError;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	4a0d      	ldr	r2, [pc, #52]	; (800ee34 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 800ee00:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	4a0c      	ldr	r2, [pc, #48]	; (800ee38 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 800ee06:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.ReportError = ReportOpError;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	4a0a      	ldr	r2, [pc, #40]	; (800ee34 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 800ee0c:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	4a09      	ldr	r2, [pc, #36]	; (800ee38 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 800ee12:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.GetEvalTensor = GetEvalTensor;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	4a09      	ldr	r2, [pc, #36]	; (800ee3c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x50>)
 800ee18:	661a      	str	r2, [r3, #96]	; 0x60
  context_.profiler = profiler;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	683a      	ldr	r2, [r7, #0]
 800ee1e:	641a      	str	r2, [r3, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
}
 800ee28:	bf00      	nop
 800ee2a:	370c      	adds	r7, #12
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr
 800ee34:	0800f5c1 	.word	0x0800f5c1
 800ee38:	0800f5f9 	.word	0x0800f5f9
 800ee3c:	0800f649 	.word	0x0800f649

0800ee40 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:

TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 800ee40:	b5b0      	push	{r4, r5, r7, lr}
 800ee42:	b096      	sub	sp, #88	; 0x58
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 800ee48:	2300      	movs	r3, #0
 800ee4a:	657b      	str	r3, [r7, #84]	; 0x54
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	3368      	adds	r3, #104	; 0x68
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7ff fdfc 	bl	800ea4e <_ZN6tflite10MicroGraph12NumSubgraphsEv>
 800ee56:	4602      	mov	r2, r0
 800ee58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	bfb4      	ite	lt
 800ee5e:	2301      	movlt	r3, #1
 800ee60:	2300      	movge	r3, #0
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f000 815d 	beq.w	800f124 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e4>
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fd f99e 	bl	800c1b0 <_ZNK6tflite5Model9subgraphsEv>
 800ee74:	4602      	mov	r2, r0
 800ee76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee78:	4619      	mov	r1, r3
 800ee7a:	4610      	mov	r0, r2
 800ee7c:	f7fe fefe 	bl	800dc7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ee80:	6478      	str	r0, [r7, #68]	; 0x44
    TFLITE_DCHECK(subgraph != nullptr);
 800ee82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d101      	bne.n	800ee8c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x4c>
 800ee88:	f016 f819 	bl	8024ebe <abort>

    auto* opcodes = model_->operator_codes();
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7ff feab 	bl	800ebec <_ZNK6tflite5Model14operator_codesEv>
 800ee96:	6438      	str	r0, [r7, #64]	; 0x40
    BuiltinDataAllocator* builtin_data_allocator =
        allocator_.GetBuiltinDataAllocator();
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7fe fd42 	bl	800d926 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 800eea2:	63f8      	str	r0, [r7, #60]	; 0x3c
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800eea4:	2300      	movs	r3, #0
 800eea6:	653b      	str	r3, [r7, #80]	; 0x50
 800eea8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800eeaa:	f7fd f948 	bl	800c13e <_ZNK6tflite8SubGraph9operatorsEv>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7fe fea1 	bl	800dbf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800eeb6:	4602      	mov	r2, r0
 800eeb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eeba:	4293      	cmp	r3, r2
 800eebc:	bf34      	ite	cc
 800eebe:	2301      	movcc	r3, #1
 800eec0:	2300      	movcs	r3, #0
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f000 8129 	beq.w	800f11c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2dc>
      const auto* op = subgraph->operators()->Get(i);
 800eeca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800eecc:	f7fd f937 	bl	800c13e <_ZNK6tflite8SubGraph9operatorsEv>
 800eed0:	4603      	mov	r3, r0
 800eed2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7fe fe9d 	bl	800dc14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800eeda:	63b8      	str	r0, [r7, #56]	; 0x38
      const size_t index = op->opcode_index();
 800eedc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eede:	f7ff fe68 	bl	800ebb2 <_ZNK6tflite8Operator12opcode_indexEv>
 800eee2:	6378      	str	r0, [r7, #52]	; 0x34
      if (index >= opcodes->size()) {
 800eee4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800eee6:	f000 fbf2 	bl	800f6ce <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800eeea:	4602      	mov	r2, r0
 800eeec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeee:	4293      	cmp	r3, r2
 800eef0:	bf2c      	ite	cs
 800eef2:	2301      	movcs	r3, #1
 800eef4:	2300      	movcc	r3, #0
 800eef6:	b2db      	uxtb	r3, r3
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d005      	beq.n	800ef08 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 800eefc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eefe:	488c      	ldr	r0, [pc, #560]	; (800f130 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f0>)
 800ef00:	f7ff fa46 	bl	800e390 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 800ef04:	2301      	movs	r3, #1
 800ef06:	e10e      	b.n	800f126 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
      }
      const auto* opcode = opcodes->Get(index);
 800ef08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ef0a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ef0c:	f000 fbee 	bl	800f6ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 800ef10:	6338      	str	r0, [r7, #48]	; 0x30
      TfLiteStatus status =
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	461d      	mov	r5, r3
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	689c      	ldr	r4, [r3, #8]
                                    &(graph_.GetAllocations()[subgraph_idx]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	3368      	adds	r3, #104	; 0x68
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7ff fe7d 	bl	800ec20 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800ef26:	4602      	mov	r2, r0
 800ef28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef2a:	00db      	lsls	r3, r3, #3
 800ef2c:	4413      	add	r3, r2
                                          .node_and_registrations[i]
 800ef2e:	681a      	ldr	r2, [r3, #0]
 800ef30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef32:	212c      	movs	r1, #44	; 0x2c
 800ef34:	fb01 f303 	mul.w	r3, r1, r3
 800ef38:	4413      	add	r3, r2
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 800ef3a:	3328      	adds	r3, #40	; 0x28
 800ef3c:	4622      	mov	r2, r4
 800ef3e:	4629      	mov	r1, r5
 800ef40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef42:	f7fb fcf3 	bl	800a92c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 800ef46:	4603      	mov	r3, r0
 800ef48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                          .registration));
      if (status != kTfLiteOk) {
 800ef4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d00e      	beq.n	800ef72 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x132>
        MicroPrintf("Failed to get registration from op code %s\n ",
 800ef54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef56:	f015 fcf4 	bl	8024942 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7fb fca1 	bl	800a8a4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800ef62:	4603      	mov	r3, r0
 800ef64:	4619      	mov	r1, r3
 800ef66:	4873      	ldr	r0, [pc, #460]	; (800f134 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f4>)
 800ef68:	f7ff fa12 	bl	800e390 <_Z11MicroPrintfPKcz>
                    EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
        return status;
 800ef6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef70:	e0d9      	b.n	800f126 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
      }
      const auto* registration = graph_.GetAllocations()[subgraph_idx]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	3368      	adds	r3, #104	; 0x68
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7ff fe52 	bl	800ec20 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef80:	00db      	lsls	r3, r3, #3
 800ef82:	4413      	add	r3, r2
                                     .node_and_registrations[i]
 800ef84:	681a      	ldr	r2, [r3, #0]
 800ef86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef88:	212c      	movs	r1, #44	; 0x2c
 800ef8a:	fb01 f303 	mul.w	r3, r1, r3
 800ef8e:	4413      	add	r3, r2
                                     .registration;
 800ef90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef92:	62bb      	str	r3, [r7, #40]	; 0x28
      if (registration == nullptr) {
 800ef94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d105      	bne.n	800efa6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x166>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 800ef9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ef9c:	4866      	ldr	r0, [pc, #408]	; (800f138 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f8>)
 800ef9e:	f7ff f9f7 	bl	800e390 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 800efa2:	2301      	movs	r3, #1
 800efa4:	e0bf      	b.n	800f126 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
      }
      BuiltinOperator op_type =
          static_cast<BuiltinOperator>(registration->builtin_code);
 800efa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa8:	695b      	ldr	r3, [r3, #20]
      BuiltinOperator op_type =
 800efaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      const char* custom_data = nullptr;
 800efae:	2300      	movs	r3, #0
 800efb0:	64fb      	str	r3, [r7, #76]	; 0x4c
      size_t custom_data_size = 0;
 800efb2:	2300      	movs	r3, #0
 800efb4:	64bb      	str	r3, [r7, #72]	; 0x48
      unsigned char* builtin_data = nullptr;
 800efb6:	2300      	movs	r3, #0
 800efb8:	617b      	str	r3, [r7, #20]

      if (op_type == BuiltinOperator_CUSTOM) {
 800efba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efbe:	2b20      	cmp	r3, #32
 800efc0:	d11b      	bne.n	800effa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ba>
        // Custom Ops may or may not have a non-null custom_options field.
        if (op->custom_options() != nullptr) {
 800efc2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800efc4:	f7ff fe04 	bl	800ebd0 <_ZNK6tflite8Operator14custom_optionsEv>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	bf14      	ite	ne
 800efce:	2301      	movne	r3, #1
 800efd0:	2300      	moveq	r3, #0
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d051      	beq.n	800f07c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x23c>
          custom_data =
              reinterpret_cast<const char*>(op->custom_options()->data());
 800efd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800efda:	f7ff fdf9 	bl	800ebd0 <_ZNK6tflite8Operator14custom_optionsEv>
 800efde:	4603      	mov	r3, r0
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7fe fef5 	bl	800ddd0 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800efe6:	64f8      	str	r0, [r7, #76]	; 0x4c
          custom_data_size = op->custom_options()->size();
 800efe8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800efea:	f7ff fdf1 	bl	800ebd0 <_ZNK6tflite8Operator14custom_optionsEv>
 800efee:	4603      	mov	r3, r0
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7fe fd52 	bl	800da9a <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800eff6:	64b8      	str	r0, [r7, #72]	; 0x48
 800eff8:	e040      	b.n	800f07c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x23c>
        }
      } else {
        if (op->custom_options() != nullptr) {
 800effa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800effc:	f7ff fde8 	bl	800ebd0 <_ZNK6tflite8Operator14custom_optionsEv>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	bf14      	ite	ne
 800f006:	2301      	movne	r3, #1
 800f008:	2300      	moveq	r3, #0
 800f00a:	b2db      	uxtb	r3, r3
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d00b      	beq.n	800f028 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e8>
          MicroPrintf(
 800f010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f014:	4618      	mov	r0, r3
 800f016:	f7fb fc45 	bl	800a8a4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800f01a:	4603      	mov	r3, r0
 800f01c:	4619      	mov	r1, r3
 800f01e:	4847      	ldr	r0, [pc, #284]	; (800f13c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2fc>)
 800f020:	f7ff f9b6 	bl	800e390 <_Z11MicroPrintfPKcz>
              "Unsupported behavior: found builtin operator %s with custom "
              "options.\n",
              EnumNameBuiltinOperator(op_type));
          return kTfLiteError;
 800f024:	2301      	movs	r3, #1
 800f026:	e07e      	b.n	800f126 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
        }

        MicroOpResolver::BuiltinParseFunction parser =
            op_resolver_.GetOpDataParser(op_type);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	685a      	ldr	r2, [r3, #4]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	3320      	adds	r3, #32
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800f03a:	4610      	mov	r0, r2
 800f03c:	4798      	blx	r3
 800f03e:	6238      	str	r0, [r7, #32]
        if (parser == nullptr) {
 800f040:	6a3b      	ldr	r3, [r7, #32]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d10b      	bne.n	800f05e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x21e>
          MicroPrintf("Did not find a parser for %s",
 800f046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fb fc2a 	bl	800a8a4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800f050:	4603      	mov	r3, r0
 800f052:	4619      	mov	r1, r3
 800f054:	483a      	ldr	r0, [pc, #232]	; (800f140 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x300>)
 800f056:	f7ff f99b 	bl	800e390 <_Z11MicroPrintfPKcz>
                      EnumNameBuiltinOperator(op_type));

          return kTfLiteError;
 800f05a:	2301      	movs	r3, #1
 800f05c:	e063      	b.n	800f126 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
        }
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6899      	ldr	r1, [r3, #8]
 800f062:	f107 0314 	add.w	r3, r7, #20
 800f066:	6a3c      	ldr	r4, [r7, #32]
 800f068:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f06a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f06c:	47a0      	blx	r4
 800f06e:	4603      	mov	r3, r0
 800f070:	77fb      	strb	r3, [r7, #31]
 800f072:	7ffb      	ldrb	r3, [r7, #31]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d001      	beq.n	800f07c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x23c>
 800f078:	7ffb      	ldrb	r3, [r7, #31]
 800f07a:	e054      	b.n	800f126 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
                                     builtin_data_allocator,
                                     (void**)(&builtin_data)));
      }

      TfLiteIntArray* inputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800f080:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f082:	f7fd f816 	bl	800c0b2 <_ZNK6tflite8Operator6inputsEv>
 800f086:	4601      	mov	r1, r0
 800f088:	f107 0310 	add.w	r3, r7, #16
 800f08c:	461a      	mov	r2, r3
 800f08e:	4620      	mov	r0, r4
 800f090:	f7fe fc36 	bl	800d900 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 800f094:	4603      	mov	r3, r0
 800f096:	77bb      	strb	r3, [r7, #30]
 800f098:	7fbb      	ldrb	r3, [r7, #30]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d001      	beq.n	800f0a2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x262>
 800f09e:	7fbb      	ldrb	r3, [r7, #30]
 800f0a0:	e041      	b.n	800f126 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
          op->inputs(), &inputs_array));

      TfLiteIntArray* outputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800f0a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f0a8:	f7fd f811 	bl	800c0ce <_ZNK6tflite8Operator7outputsEv>
 800f0ac:	4601      	mov	r1, r0
 800f0ae:	f107 030c 	add.w	r3, r7, #12
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	f7fe fc23 	bl	800d900 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	777b      	strb	r3, [r7, #29]
 800f0be:	7f7b      	ldrb	r3, [r7, #29]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d001      	beq.n	800f0c8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x288>
 800f0c4:	7f7b      	ldrb	r3, [r7, #29]
 800f0c6:	e02e      	b.n	800f126 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
          op->outputs(), &outputs_array));

      TfLiteNode* node = &(
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	3368      	adds	r3, #104	; 0x68
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7ff fda7 	bl	800ec20 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0d6:	00db      	lsls	r3, r3, #3
 800f0d8:	4413      	add	r3, r2
 800f0da:	681a      	ldr	r2, [r3, #0]
 800f0dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0de:	212c      	movs	r1, #44	; 0x2c
 800f0e0:	fb01 f303 	mul.w	r3, r1, r3
 800f0e4:	4413      	add	r3, r2
 800f0e6:	61bb      	str	r3, [r7, #24]
      *node = {};
 800f0e8:	69bb      	ldr	r3, [r7, #24]
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	2328      	movs	r3, #40	; 0x28
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	f015 ff87 	bl	8025004 <memset>
      node->inputs = inputs_array;
 800f0f6:	693a      	ldr	r2, [r7, #16]
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	601a      	str	r2, [r3, #0]
      node->outputs = outputs_array;
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	605a      	str	r2, [r3, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 800f102:	697a      	ldr	r2, [r7, #20]
 800f104:	69bb      	ldr	r3, [r7, #24]
 800f106:	615a      	str	r2, [r3, #20]
      node->custom_initial_data = custom_data;
 800f108:	69bb      	ldr	r3, [r7, #24]
 800f10a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f10c:	619a      	str	r2, [r3, #24]
      node->custom_initial_data_size = custom_data_size;
 800f10e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f110:	69bb      	ldr	r3, [r7, #24]
 800f112:	61da      	str	r2, [r3, #28]
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800f114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f116:	3301      	adds	r3, #1
 800f118:	653b      	str	r3, [r7, #80]	; 0x50
 800f11a:	e6c5      	b.n	800eea8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x68>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 800f11c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f11e:	3301      	adds	r3, #1
 800f120:	657b      	str	r3, [r7, #84]	; 0x54
 800f122:	e693      	b.n	800ee4c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
    }
  }
  return kTfLiteOk;
 800f124:	2300      	movs	r3, #0
}
 800f126:	4618      	mov	r0, r3
 800f128:	3758      	adds	r7, #88	; 0x58
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bdb0      	pop	{r4, r5, r7, pc}
 800f12e:	bf00      	nop
 800f130:	080291ac 	.word	0x080291ac
 800f134:	080291d8 	.word	0x080291d8
 800f138:	08029208 	.word	0x08029208
 800f13c:	0802922c 	.word	0x0802922c
 800f140:	08029274 	.word	0x08029274

0800f144 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:

TfLiteStatus MicroInterpreter::AllocateTensors() {
 800f144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f148:	b088      	sub	sp, #32
 800f14a:	af02      	add	r7, sp, #8
 800f14c:	6078      	str	r0, [r7, #4]
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	4619      	mov	r1, r3
 800f158:	4610      	mov	r0, r2
 800f15a:	f7fd fdfd 	bl	800cd58 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
 800f15e:	60f8      	str	r0, [r7, #12]

  if (allocations == nullptr) {
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d10b      	bne.n	800f17e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	689b      	ldr	r3, [r3, #8]
 800f16a:	49a4      	ldr	r1, [pc, #656]	; (800f3fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b8>)
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7f9 f9bb 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2201      	movs	r2, #1
 800f176:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    return kTfLiteError;
 800f17a:	2301      	movs	r3, #1
 800f17c:	e139      	b.n	800f3f2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  graph_.SetSubgraphAllocations(allocations);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	3368      	adds	r3, #104	; 0x68
 800f182:	68f9      	ldr	r1, [r7, #12]
 800f184:	4618      	mov	r0, r3
 800f186:	f7ff fc74 	bl	800ea72 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>

  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7ff fe58 	bl	800ee40 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 800f190:	4603      	mov	r3, r0
 800f192:	72fb      	strb	r3, [r7, #11]
 800f194:	7afb      	ldrb	r3, [r7, #11]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d001      	beq.n	800f19e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5a>
 800f19a:	7afb      	ldrb	r3, [r7, #11]
 800f19c:	e129      	b.n	800f3f2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4a97      	ldr	r2, [pc, #604]	; (800f400 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2bc>)
 800f1a2:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a94      	ldr	r2, [pc, #592]	; (800f404 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>)
 800f1b4:	611a      	str	r2, [r3, #16]
  graph_.InitSubgraphs();
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	3368      	adds	r3, #104	; 0x68
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7ff f9a4 	bl	800e508 <_ZN6tflite10MicroGraph13InitSubgraphsEv>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4a91      	ldr	r2, [pc, #580]	; (800f408 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c4>)
 800f1c4:	64da      	str	r2, [r3, #76]	; 0x4c
  graph_.PrepareSubgraphs();
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	3368      	adds	r3, #104	; 0x68
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7ff fa16 	bl	800e5fc <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	4a8b      	ldr	r2, [pc, #556]	; (800f40c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c8>)
 800f1e0:	651a      	str	r2, [r3, #80]	; 0x50

  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681d      	ldr	r5, [r3, #0]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	3368      	adds	r3, #104	; 0x68
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7ff fd16 	bl	800ec20 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	3388      	adds	r3, #136	; 0x88
 800f1fa:	4629      	mov	r1, r5
 800f1fc:	4620      	mov	r0, r4
 800f1fe:	f7fd fe2d 	bl	800ce5c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 800f202:	4603      	mov	r3, r0
 800f204:	72bb      	strb	r3, [r7, #10]
 800f206:	7abb      	ldrb	r3, [r7, #10]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d001      	beq.n	800f210 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xcc>
 800f20c:	7abb      	ldrb	r3, [r7, #10]
 800f20e:	e0f0      	b.n	800f3f2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
                                   &scratch_buffer_handles_));

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  input_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
          sizeof(TfLiteTensor*) * inputs_size()));
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	330c      	adds	r3, #12
 800f21c:	681c      	ldr	r4, [r3, #0]
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f7ff fd0a 	bl	800ec38 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800f224:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800f226:	009b      	lsls	r3, r3, #2
 800f228:	4619      	mov	r1, r3
 800f22a:	4628      	mov	r0, r5
 800f22c:	47a0      	blx	r4
 800f22e:	4602      	mov	r2, r0
  input_tensors_ =
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  if (input_tensors_ == nullptr) {
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d10d      	bne.n	800f25c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x118>
    TF_LITE_REPORT_ERROR(
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	689c      	ldr	r4, [r3, #8]
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f7ff fcf7 	bl	800ec38 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800f24a:	4603      	mov	r3, r0
 800f24c:	009b      	lsls	r3, r3, #2
 800f24e:	461a      	mov	r2, r3
 800f250:	496f      	ldr	r1, [pc, #444]	; (800f410 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2cc>)
 800f252:	4620      	mov	r0, r4
 800f254:	f7f9 f948 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->input_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * inputs_size());
    return kTfLiteError;
 800f258:	2301      	movs	r3, #1
 800f25a:	e0ca      	b.n	800f3f2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < inputs_size(); ++i) {
 800f25c:	2300      	movs	r3, #0
 800f25e:	617b      	str	r3, [r7, #20]
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f7ff fce9 	bl	800ec38 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800f266:	4602      	mov	r2, r0
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	4293      	cmp	r3, r2
 800f26c:	bf34      	ite	cc
 800f26e:	2301      	movcc	r3, #1
 800f270:	2300      	movcs	r3, #0
 800f272:	b2db      	uxtb	r3, r3
 800f274:	2b00      	cmp	r3, #0
 800f276:	d03c      	beq.n	800f2f2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ae>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	681d      	ldr	r5, [r3, #0]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	3368      	adds	r3, #104	; 0x68
 800f28e:	4618      	mov	r0, r3
 800f290:	f7ff fcc6 	bl	800ec20 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f294:	4680      	mov	r8, r0
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f7ff fce9 	bl	800ec6e <_ZNK6tflite16MicroInterpreter6inputsEv>
 800f29c:	4603      	mov	r3, r0
 800f29e:	6979      	ldr	r1, [r7, #20]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7fa f871 	bl	8009388 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f2a6:	4601      	mov	r1, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	18d4      	adds	r4, r2, r3
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	4642      	mov	r2, r8
 800f2bc:	6839      	ldr	r1, [r7, #0]
 800f2be:	4630      	mov	r0, r6
 800f2c0:	47a8      	blx	r5
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	6023      	str	r3, [r4, #0]
    if (input_tensors_[i] == nullptr) {
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	4413      	add	r3, r2
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d108      	bne.n	800f2ea <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a6>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	689b      	ldr	r3, [r3, #8]
 800f2dc:	697a      	ldr	r2, [r7, #20]
 800f2de:	494d      	ldr	r1, [pc, #308]	; (800f414 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d0>)
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f7f9 f901 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize input tensor %d", i);
      return kTfLiteError;
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	e083      	b.n	800f3f2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < inputs_size(); ++i) {
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	617b      	str	r3, [r7, #20]
 800f2f0:	e7b6      	b.n	800f260 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11c>
  }

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  output_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
          sizeof(TfLiteTensor*) * outputs_size()));
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	330c      	adds	r3, #12
 800f2fe:	681c      	ldr	r4, [r3, #0]
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f7ff fccb 	bl	800ec9c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800f306:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	4619      	mov	r1, r3
 800f30c:	4628      	mov	r0, r5
 800f30e:	47a0      	blx	r4
 800f310:	4602      	mov	r2, r0
  output_tensors_ =
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  if (output_tensors_ == nullptr) {
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d10d      	bne.n	800f33e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fa>
    TF_LITE_REPORT_ERROR(
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	689c      	ldr	r4, [r3, #8]
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f7ff fcb8 	bl	800ec9c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800f32c:	4603      	mov	r3, r0
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	461a      	mov	r2, r3
 800f332:	4939      	ldr	r1, [pc, #228]	; (800f418 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d4>)
 800f334:	4620      	mov	r0, r4
 800f336:	f7f9 f8d7 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->output_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * outputs_size());
    return kTfLiteError;
 800f33a:	2301      	movs	r3, #1
 800f33c:	e059      	b.n	800f3f2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < outputs_size(); ++i) {
 800f33e:	2300      	movs	r3, #0
 800f340:	613b      	str	r3, [r7, #16]
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f7ff fcaa 	bl	800ec9c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800f348:	4602      	mov	r2, r0
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	4293      	cmp	r3, r2
 800f34e:	bf34      	ite	cc
 800f350:	2301      	movcc	r3, #1
 800f352:	2300      	movcs	r3, #0
 800f354:	b2db      	uxtb	r3, r3
 800f356:	2b00      	cmp	r3, #0
 800f358:	d03c      	beq.n	800f3d4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x290>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	681d      	ldr	r5, [r3, #0]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	3368      	adds	r3, #104	; 0x68
 800f370:	4618      	mov	r0, r3
 800f372:	f7ff fc55 	bl	800ec20 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f376:	4680      	mov	r8, r0
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f7ff fcaa 	bl	800ecd2 <_ZNK6tflite16MicroInterpreter7outputsEv>
 800f37e:	4603      	mov	r3, r0
 800f380:	6939      	ldr	r1, [r7, #16]
 800f382:	4618      	mov	r0, r3
 800f384:	f7fa f800 	bl	8009388 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f388:	4601      	mov	r1, r0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	18d4      	adds	r4, r2, r3
 800f396:	2300      	movs	r3, #0
 800f398:	9300      	str	r3, [sp, #0]
 800f39a:	460b      	mov	r3, r1
 800f39c:	4642      	mov	r2, r8
 800f39e:	6839      	ldr	r1, [r7, #0]
 800f3a0:	4630      	mov	r0, r6
 800f3a2:	47a8      	blx	r5
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	6023      	str	r3, [r4, #0]
    if (output_tensors_[i] == nullptr) {
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	4413      	add	r3, r2
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d108      	bne.n	800f3cc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x288>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	689b      	ldr	r3, [r3, #8]
 800f3be:	693a      	ldr	r2, [r7, #16]
 800f3c0:	4916      	ldr	r1, [pc, #88]	; (800f41c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d8>)
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7f9 f890 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize output tensor %d", i);
      return kTfLiteError;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	e012      	b.n	800f3f2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < outputs_size(); ++i) {
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	613b      	str	r3, [r7, #16]
 800f3d2:	e7b6      	b.n	800f342 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fe>
    }
  }

  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f000 f89d 	bl	800f514 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	727b      	strb	r3, [r7, #9]
 800f3de:	7a7b      	ldrb	r3, [r7, #9]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d001      	beq.n	800f3e8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a4>
 800f3e4:	7a7b      	ldrb	r3, [r7, #9]
 800f3e6:	e004      	b.n	800f3f2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  tensors_allocated_ = true;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  return kTfLiteOk;
 800f3f0:	2300      	movs	r3, #0
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3718      	adds	r7, #24
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3fc:	08029294 	.word	0x08029294
 800f400:	0800f531 	.word	0x0800f531
 800f404:	0800f687 	.word	0x0800f687
 800f408:	0800f55d 	.word	0x0800f55d
 800f40c:	0800f593 	.word	0x0800f593
 800f410:	080292b8 	.word	0x080292b8
 800f414:	08029304 	.word	0x08029304
 800f418:	0802932c 	.word	0x0802932c
 800f41c:	08029378 	.word	0x08029378

0800f420 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d007      	beq.n	800f442 <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	689b      	ldr	r3, [r3, #8]
 800f436:	4912      	ldr	r1, [pc, #72]	; (800f480 <_ZN6tflite16MicroInterpreter6InvokeEv+0x60>)
 800f438:	4618      	mov	r0, r3
 800f43a:	f7f9 f855 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 800f43e:	2301      	movs	r3, #1
 800f440:	e019      	b.n	800f476 <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f448:	f083 0301 	eor.w	r3, r3, #1
 800f44c:	b2db      	uxtb	r3, r3
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d009      	beq.n	800f466 <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f7ff fe76 	bl	800f144 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800f458:	4603      	mov	r3, r0
 800f45a:	73fb      	strb	r3, [r7, #15]
 800f45c:	7bfb      	ldrb	r3, [r7, #15]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d001      	beq.n	800f466 <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 800f462:	7bfb      	ldrb	r3, [r7, #15]
 800f464:	e007      	b.n	800f476 <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }
  return graph_.InvokeSubgraph(0);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	3368      	adds	r3, #104	; 0x68
 800f46a:	2100      	movs	r1, #0
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7ff f9b1 	bl	800e7d4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
 800f472:	4603      	mov	r3, r0
 800f474:	bf00      	nop
}
 800f476:	4618      	mov	r0, r3
 800f478:	3710      	adds	r7, #16
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	080293a0 	.word	0x080293a0

0800f484 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f7ff fbd2 	bl	800ec38 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800f494:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800f496:	683a      	ldr	r2, [r7, #0]
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d308      	bcc.n	800f4b0 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6898      	ldr	r0, [r3, #8]
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	683a      	ldr	r2, [r7, #0]
 800f4a6:	4908      	ldr	r1, [pc, #32]	; (800f4c8 <_ZN6tflite16MicroInterpreter5inputEj+0x44>)
 800f4a8:	f7f9 f81e 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	e006      	b.n	800f4be <_ZN6tflite16MicroInterpreter5inputEj+0x3a>
  }
  return input_tensors_[index];
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	4413      	add	r3, r2
 800f4bc:	681b      	ldr	r3, [r3, #0]
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3710      	adds	r7, #16
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	080293d0 	.word	0x080293d0

0800f4cc <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f7ff fbe0 	bl	800ec9c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800f4dc:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800f4de:	683a      	ldr	r2, [r7, #0]
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d308      	bcc.n	800f4f8 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6898      	ldr	r0, [r3, #8]
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	683a      	ldr	r2, [r7, #0]
 800f4ee:	4908      	ldr	r1, [pc, #32]	; (800f510 <_ZN6tflite16MicroInterpreter6outputEj+0x44>)
 800f4f0:	f7f8 fffa 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	e006      	b.n	800f506 <_ZN6tflite16MicroInterpreter6outputEj+0x3a>
  }
  return output_tensors_[index];
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	009b      	lsls	r3, r3, #2
 800f502:	4413      	add	r3, r2
 800f504:	681b      	ldr	r3, [r3, #0]
}
 800f506:	4618      	mov	r0, r3
 800f508:	3710      	adds	r7, #16
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	080293fc 	.word	0x080293fc

0800f514 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  return graph_.ResetVariableTensors();
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	3368      	adds	r3, #104	; 0x68
 800f520:	4618      	mov	r0, r3
 800f522:	f7ff fa03 	bl	800e92c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
 800f526:	4603      	mov	r3, r0
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3708      	adds	r7, #8
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}

0800f530 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 800f53e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 800f544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	330c      	adds	r3, #12
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	6839      	ldr	r1, [r7, #0]
 800f54e:	4610      	mov	r0, r2
 800f550:	4798      	blx	r3
 800f552:	4603      	mov	r3, r0
}
 800f554:	4618      	mov	r0, r3
 800f556:	3708      	adds	r7, #8
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus MicroInterpreter::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                           size_t bytes,
                                                           int* buffer_idx) {
 800f55c:	b590      	push	{r4, r7, lr}
 800f55e:	b087      	sub	sp, #28
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	607a      	str	r2, [r7, #4]
  MicroInterpreter* interpreter =
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	617b      	str	r3, [r7, #20]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  return interpreter->allocator_.RequestScratchBufferInArena(
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	3368      	adds	r3, #104	; 0x68
 800f576:	4618      	mov	r0, r3
 800f578:	f7ff fb46 	bl	800ec08 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 800f57c:	4602      	mov	r2, r0
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	68b9      	ldr	r1, [r7, #8]
 800f582:	4620      	mov	r0, r4
 800f584:	f7fd fcfe 	bl	800cf84 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 800f588:	4603      	mov	r3, r0
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	371c      	adds	r7, #28
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd90      	pop	{r4, r7, pc}

0800f592 <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 800f592:	b480      	push	{r7}
 800f594:	b085      	sub	sp, #20
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
 800f59a:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	68db      	ldr	r3, [r3, #12]
 800f5a0:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	009b      	lsls	r3, r3, #2
  ScratchBufferHandle* handle =
 800f5ac:	4413      	add	r3, r2
 800f5ae:	60bb      	str	r3, [r7, #8]
  return handle->data;
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	681b      	ldr	r3, [r3, #0]
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3714      	adds	r7, #20
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr

0800f5c0 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:

void MicroInterpreter::ReportOpError(struct TfLiteContext* context,
                                     const char* format, ...) {
 800f5c0:	b40e      	push	{r1, r2, r3}
 800f5c2:	b580      	push	{r7, lr}
 800f5c4:	b085      	sub	sp, #20
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  MicroInterpreter* interpreter =
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  va_list args;
  va_start(args, format);
 800f5d0:	f107 0320 	add.w	r3, r7, #32
 800f5d4:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	6898      	ldr	r0, [r3, #8]
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	689b      	ldr	r3, [r3, #8]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	3308      	adds	r3, #8
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	68ba      	ldr	r2, [r7, #8]
 800f5e6:	69f9      	ldr	r1, [r7, #28]
 800f5e8:	4798      	blx	r3
  va_end(args);
#endif
}
 800f5ea:	bf00      	nop
 800f5ec:	3714      	adds	r7, #20
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f5f4:	b003      	add	sp, #12
 800f5f6:	4770      	bx	lr

0800f5f8 <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
 800f5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5fc:	b086      	sub	sp, #24
 800f5fe:	af02      	add	r7, sp, #8
 800f600:	6078      	str	r0, [r7, #4]
 800f602:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	68db      	ldr	r3, [r3, #12]
 800f608:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	3304      	adds	r3, #4
 800f616:	681c      	ldr	r4, [r3, #0]
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	681e      	ldr	r6, [r3, #0]
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	3368      	adds	r3, #104	; 0x68
 800f620:	4618      	mov	r0, r3
 800f622:	f7ff fafd 	bl	800ec20 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f626:	4680      	mov	r8, r0
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800f628:	68f8      	ldr	r0, [r7, #12]
 800f62a:	f7ff fb69 	bl	800ed00 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 800f62e:	4603      	mov	r3, r0
 800f630:	9300      	str	r3, [sp, #0]
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	4642      	mov	r2, r8
 800f636:	4631      	mov	r1, r6
 800f638:	4628      	mov	r0, r5
 800f63a:	47a0      	blx	r4
 800f63c:	4603      	mov	r3, r0
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3710      	adds	r7, #16
 800f642:	46bd      	mov	sp, r7
 800f644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f648 <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 800f648:	b590      	push	{r4, r7, lr}
 800f64a:	b085      	sub	sp, #20
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	3368      	adds	r3, #104	; 0x68
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7ff fadf 	bl	800ec20 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f662:	4604      	mov	r4, r0
 800f664:	68f8      	ldr	r0, [r7, #12]
 800f666:	f7ff fb4b 	bl	800ed00 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 800f66a:	4603      	mov	r3, r0
 800f66c:	00db      	lsls	r3, r3, #3
 800f66e:	4423      	add	r3, r4
              .tensors[tensor_idx];
 800f670:	6859      	ldr	r1, [r3, #4]
 800f672:	683a      	ldr	r2, [r7, #0]
 800f674:	4613      	mov	r3, r2
 800f676:	005b      	lsls	r3, r3, #1
 800f678:	4413      	add	r3, r2
 800f67a:	009b      	lsls	r3, r3, #2
 800f67c:	440b      	add	r3, r1
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3714      	adds	r7, #20
 800f682:	46bd      	mov	sp, r7
 800f684:	bd90      	pop	{r4, r7, pc}

0800f686 <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
 800f686:	b480      	push	{r7}
 800f688:	b085      	sub	sp, #20
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	6078      	str	r0, [r7, #4]
 800f68e:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	68db      	ldr	r3, [r3, #12]
 800f694:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800f6a0:	2300      	movs	r3, #0
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3714      	adds	r7, #20
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr

0800f6ae <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800f6ae:	b580      	push	{r7, lr}
 800f6b0:	b082      	sub	sp, #8
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	6078      	str	r0, [r7, #4]
 800f6b6:	460b      	mov	r3, r1
 800f6b8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800f6ba:	887b      	ldrh	r3, [r7, #2]
 800f6bc:	4619      	mov	r1, r3
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 f83a 	bl	800f738 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800f6c4:	4603      	mov	r3, r0
  }
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3708      	adds	r7, #8
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}

0800f6ce <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800f6ce:	b580      	push	{r7, lr}
 800f6d0:	b082      	sub	sp, #8
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	6078      	str	r0, [r7, #4]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7f9 fd64 	bl	80091a8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3708      	adds	r7, #8
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
	...

0800f6ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b082      	sub	sp, #8
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f7ff ffe9 	bl	800f6ce <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	4293      	cmp	r3, r2
 800f702:	d306      	bcc.n	800f712 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 800f704:	4b09      	ldr	r3, [pc, #36]	; (800f72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 800f706:	4a0a      	ldr	r2, [pc, #40]	; (800f730 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 800f708:	f44f 7183 	mov.w	r1, #262	; 0x106
 800f70c:	4809      	ldr	r0, [pc, #36]	; (800f734 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 800f70e:	f015 fbdd 	bl	8024ecc <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 f844 	bl	800f7a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 800f718:	4603      	mov	r3, r0
 800f71a:	6839      	ldr	r1, [r7, #0]
 800f71c:	4618      	mov	r0, r3
 800f71e:	f000 f82b 	bl	800f778 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 800f722:	4603      	mov	r3, r0
  }
 800f724:	4618      	mov	r0, r3
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	08029428 	.word	0x08029428
 800f730:	08029684 	.word	0x08029684
 800f734:	08029504 	.word	0x08029504

0800f738 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	460b      	mov	r3, r1
 800f742:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800f744:	887b      	ldrh	r3, [r7, #2]
 800f746:	4619      	mov	r1, r3
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f7f8 ff1c 	bl	8008586 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800f74e:	4603      	mov	r3, r0
 800f750:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800f752:	687a      	ldr	r2, [r7, #4]
 800f754:	89fb      	ldrh	r3, [r7, #14]
 800f756:	4413      	add	r3, r2
 800f758:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800f75a:	89fb      	ldrh	r3, [r7, #14]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d006      	beq.n	800f76e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 800f760:	68b8      	ldr	r0, [r7, #8]
 800f762:	f7f9 fd3a 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800f766:	4602      	mov	r2, r0
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	4413      	add	r3, r2
                        : nullptr;
 800f76c:	e000      	b.n	800f770 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800f76e:	2300      	movs	r3, #0
  }
 800f770:	4618      	mov	r0, r3
 800f772:	3710      	adds	r7, #16
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}

0800f778 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800f778:	b580      	push	{r7, lr}
 800f77a:	b082      	sub	sp, #8
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	009b      	lsls	r3, r3, #2
 800f786:	687a      	ldr	r2, [r7, #4]
 800f788:	4413      	add	r3, r2
 800f78a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f7f9 fd24 	bl	80091da <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800f792:	4602      	mov	r2, r0
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	4413      	add	r3, r2
  }
 800f798:	4618      	mov	r0, r3
 800f79a:	3708      	adds	r7, #8
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}

0800f7a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 800f7a0:	b480      	push	{r7}
 800f7a2:	b083      	sub	sp, #12
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	3304      	adds	r3, #4
  }
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	370c      	adds	r7, #12
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr

0800f7b8 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 800f7b8:	b480      	push	{r7}
 800f7ba:	b087      	sub	sp, #28
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	3b01      	subs	r3, #1
 800f7ca:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 800f7cc:	697a      	ldr	r2, [r7, #20]
 800f7ce:	693b      	ldr	r3, [r7, #16]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d20e      	bcs.n	800f7f2 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	1c5a      	adds	r2, r3, #1
 800f7de:	617a      	str	r2, [r7, #20]
 800f7e0:	693a      	ldr	r2, [r7, #16]
 800f7e2:	7812      	ldrb	r2, [r2, #0]
 800f7e4:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	1e5a      	subs	r2, r3, #1
 800f7ea:	613a      	str	r2, [r7, #16]
 800f7ec:	7bfa      	ldrb	r2, [r7, #15]
 800f7ee:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 800f7f0:	e7ec      	b.n	800f7cc <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 800f7f2:	687b      	ldr	r3, [r7, #4]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	371c      	adds	r7, #28
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr

0800f800 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 800f800:	b480      	push	{r7}
 800f802:	b087      	sub	sp, #28
 800f804:	af00      	add	r7, sp, #0
 800f806:	60f8      	str	r0, [r7, #12]
 800f808:	60b9      	str	r1, [r7, #8]
 800f80a:	607a      	str	r2, [r7, #4]
  char* current = main;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d003      	beq.n	800f820 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	3301      	adds	r3, #1
 800f81c:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800f81e:	e7f7      	b.n	800f810 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	3b01      	subs	r3, #1
 800f824:	68fa      	ldr	r2, [r7, #12]
 800f826:	4413      	add	r3, r2
 800f828:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d00e      	beq.n	800f850 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 800f832:	697a      	ldr	r2, [r7, #20]
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	429a      	cmp	r2, r3
 800f838:	d20a      	bcs.n	800f850 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	781a      	ldrb	r2, [r3, #0]
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	701a      	strb	r2, [r3, #0]
    ++current;
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	3301      	adds	r3, #1
 800f846:	617b      	str	r3, [r7, #20]
    ++to_append;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	3301      	adds	r3, #1
 800f84c:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 800f84e:	e7ec      	b.n	800f82a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	2200      	movs	r2, #0
 800f854:	701a      	strb	r2, [r3, #0]
  return current;
 800f856:	697b      	ldr	r3, [r7, #20]
}
 800f858:	4618      	mov	r0, r3
 800f85a:	371c      	adds	r7, #28
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr

0800f864 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 800f864:	b580      	push	{r7, lr}
 800f866:	b088      	sub	sp, #32
 800f868:	af00      	add	r7, sp, #0
 800f86a:	60f8      	str	r0, [r7, #12]
 800f86c:	60b9      	str	r1, [r7, #8]
 800f86e:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	fbb3 f1f2 	udiv	r1, r3, r2
 800f87c:	fb02 f201 	mul.w	r2, r2, r1
 800f880:	1a9b      	subs	r3, r3, r2
 800f882:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	2b09      	cmp	r3, #9
 800f888:	dc04      	bgt.n	800f894 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	3330      	adds	r3, #48	; 0x30
 800f890:	77fb      	strb	r3, [r7, #31]
 800f892:	e003      	b.n	800f89c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	b2db      	uxtb	r3, r3
 800f898:	3357      	adds	r3, #87	; 0x57
 800f89a:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	1c5a      	adds	r2, r3, #1
 800f8a0:	60ba      	str	r2, [r7, #8]
 800f8a2:	7ffa      	ldrb	r2, [r7, #31]
 800f8a4:	701a      	strb	r2, [r3, #0]
    i /= base;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	68fa      	ldr	r2, [r7, #12]
 800f8aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8ae:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d000      	beq.n	800f8b8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 800f8b6:	e7dd      	b.n	800f874 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 800f8be:	68b9      	ldr	r1, [r7, #8]
 800f8c0:	69b8      	ldr	r0, [r7, #24]
 800f8c2:	f7ff ff79 	bl	800f7b8 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 800f8c6:	68bb      	ldr	r3, [r7, #8]
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3720      	adds	r7, #32
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	da07      	bge.n	800f8f4 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	1c5a      	adds	r2, r3, #1
 800f8e8:	603a      	str	r2, [r7, #0]
 800f8ea:	222d      	movs	r2, #45	; 0x2d
 800f8ec:	701a      	strb	r2, [r3, #0]
    u = -u;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	425b      	negs	r3, r3
 800f8f2:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 800f8f4:	220a      	movs	r2, #10
 800f8f6:	6839      	ldr	r1, [r7, #0]
 800f8f8:	68f8      	ldr	r0, [r7, #12]
 800f8fa:	f7ff ffb3 	bl	800f864 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800f8fe:	4603      	mov	r3, r0
}
 800f900:	4618      	mov	r0, r3
 800f902:	3710      	adds	r7, #16
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 800f908:	b580      	push	{r7, lr}
 800f90a:	b090      	sub	sp, #64	; 0x40
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 800f914:	f107 0310 	add.w	r3, r7, #16
 800f918:	4619      	mov	r1, r3
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f7ff ffd8 	bl	800f8d0 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 800f920:	f107 0310 	add.w	r3, r7, #16
 800f924:	461a      	mov	r2, r3
 800f926:	68b9      	ldr	r1, [r7, #8]
 800f928:	68f8      	ldr	r0, [r7, #12]
 800f92a:	f7ff ff69 	bl	800f800 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800f92e:	4603      	mov	r3, r0
}
 800f930:	4618      	mov	r0, r3
 800f932:	3740      	adds	r7, #64	; 0x40
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 800f938:	b580      	push	{r7, lr}
 800f93a:	b090      	sub	sp, #64	; 0x40
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	60b9      	str	r1, [r7, #8]
 800f942:	607a      	str	r2, [r7, #4]
 800f944:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 800f946:	f107 0310 	add.w	r3, r7, #16
 800f94a:	683a      	ldr	r2, [r7, #0]
 800f94c:	4619      	mov	r1, r3
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f7ff ff88 	bl	800f864 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 800f954:	f107 0310 	add.w	r3, r7, #16
 800f958:	461a      	mov	r2, r3
 800f95a:	68b9      	ldr	r1, [r7, #8]
 800f95c:	68f8      	ldr	r0, [r7, #12]
 800f95e:	f7ff ff4f 	bl	800f800 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800f962:	4603      	mov	r3, r0
}
 800f964:	4618      	mov	r0, r3
 800f966:	3740      	adds	r7, #64	; 0x40
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}

0800f96c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 800f96c:	b590      	push	{r4, r7, lr}
 800f96e:	b09b      	sub	sp, #108	; 0x6c
 800f970:	af00      	add	r7, sp, #0
 800f972:	ed87 0a01 	vstr	s0, [r7, #4]
 800f976:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	332f      	adds	r3, #47	; 0x2f
 800f980:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 800f982:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f986:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 800f988:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800f98c:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 800f98e:	2317      	movs	r3, #23
 800f990:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 800f992:	237f      	movs	r3, #127	; 0x7f
 800f994:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 800f996:	4b6a      	ldr	r3, [pc, #424]	; (800fb40 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 800f998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f99a:	687b      	ldr	r3, [r7, #4]
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 800f99c:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	0ddb      	lsrs	r3, r3, #23
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 800f9a6:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 800f9a8:	69fb      	ldr	r3, [r7, #28]
 800f9aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f9ae:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 800f9b0:	69fb      	ldr	r3, [r7, #28]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	da05      	bge.n	800f9c2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 800f9b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9b8:	222d      	movs	r2, #45	; 0x2d
 800f9ba:	701a      	strb	r2, [r3, #0]
    current += 1;
 800f9bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9be:	3301      	adds	r3, #1
 800f9c0:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 800f9c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 800f9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ca:	2b80      	cmp	r3, #128	; 0x80
 800f9cc:	d118      	bne.n	800fa00 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 800f9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d10a      	bne.n	800f9ea <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 800f9d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f9d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9d8:	1ad3      	subs	r3, r2, r3
 800f9da:	4a5a      	ldr	r2, [pc, #360]	; (800fb44 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 800f9dc:	4619      	mov	r1, r3
 800f9de:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800f9e0:	f7ff ff0e 	bl	800f800 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800f9e4:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800f9e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9e8:	e0a5      	b.n	800fb36 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 800f9ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f9ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9ee:	1ad3      	subs	r3, r2, r3
 800f9f0:	4a55      	ldr	r2, [pc, #340]	; (800fb48 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800f9f6:	f7ff ff03 	bl	800f800 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800f9fa:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800f9fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9fe:	e09a      	b.n	800fb36 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 800fa00:	230d      	movs	r3, #13
 800fa02:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 800fa04:	4b51      	ldr	r3, [pc, #324]	; (800fb4c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 800fa06:	f107 040c 	add.w	r4, r7, #12
 800fa0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fa0c:	c407      	stmia	r4!, {r0, r1, r2}
 800fa0e:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 800fa10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa12:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800fa14:	2300      	movs	r3, #0
 800fa16:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa1a:	2b0c      	cmp	r3, #12
 800fa1c:	dc0f      	bgt.n	800fa3e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 800fa1e:	f107 020c 	add.w	r2, r7, #12
 800fa22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa24:	4413      	add	r3, r2
 800fa26:	f993 3000 	ldrsb.w	r3, [r3]
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa2e:	40d3      	lsrs	r3, r2
 800fa30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa32:	4413      	add	r3, r2
 800fa34:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800fa36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa38:	3301      	adds	r3, #1
 800fa3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa3c:	e7ec      	b.n	800fa18 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 800fa3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa40:	2231      	movs	r2, #49	; 0x31
 800fa42:	701a      	strb	r2, [r3, #0]
  current += 1;
 800fa44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa46:	3301      	adds	r3, #1
 800fa48:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 800fa4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa4c:	222e      	movs	r2, #46	; 0x2e
 800fa4e:	701a      	strb	r2, [r3, #0]
  current += 1;
 800fa50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa52:	3301      	adds	r3, #1
 800fa54:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 800fa56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa58:	2200      	movs	r2, #0
 800fa5a:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 800fa5c:	2307      	movs	r3, #7
 800fa5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 800fa60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa64:	1ad3      	subs	r3, r2, r3
 800fa66:	2b07      	cmp	r3, #7
 800fa68:	dc01      	bgt.n	800fa6e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 800fa6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa6c:	e063      	b.n	800fb36 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800fa6e:	2301      	movs	r3, #1
 800fa70:	65bb      	str	r3, [r7, #88]	; 0x58
 800fa72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa74:	2b06      	cmp	r3, #6
 800fa76:	dc08      	bgt.n	800fa8a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 800fa78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fa7c:	4413      	add	r3, r2
 800fa7e:	2230      	movs	r2, #48	; 0x30
 800fa80:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800fa82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa84:	3301      	adds	r3, #1
 800fa86:	65bb      	str	r3, [r7, #88]	; 0x58
 800fa88:	e7f3      	b.n	800fa72 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 800fa8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa8c:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 800fa8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa92:	1ad1      	subs	r1, r2, r3
 800fa94:	230a      	movs	r3, #10
 800fa96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa98:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fa9a:	f7ff ff4d 	bl	800f938 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 800fa9e:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 800faa0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800faa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa4:	1ad3      	subs	r3, r2, r3
 800faa6:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 800faa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faaa:	f1c3 0307 	rsb	r3, r3, #7
 800faae:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 800fab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fab2:	2230      	movs	r2, #48	; 0x30
 800fab4:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 800fab6:	6a3b      	ldr	r3, [r7, #32]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d018      	beq.n	800faee <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 800fabc:	2300      	movs	r3, #0
 800fabe:	657b      	str	r3, [r7, #84]	; 0x54
 800fac0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac4:	429a      	cmp	r2, r3
 800fac6:	da0f      	bge.n	800fae8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 800fac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800faca:	3b01      	subs	r3, #1
 800facc:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 800face:	6a3b      	ldr	r3, [r7, #32]
 800fad0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fad2:	4413      	add	r3, r2
 800fad4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fad6:	7812      	ldrb	r2, [r2, #0]
 800fad8:	701a      	strb	r2, [r3, #0]
      *current = '0';
 800fada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fadc:	2230      	movs	r2, #48	; 0x30
 800fade:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 800fae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fae2:	3301      	adds	r3, #1
 800fae4:	657b      	str	r3, [r7, #84]	; 0x54
 800fae6:	e7eb      	b.n	800fac0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 800fae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800faea:	3307      	adds	r3, #7
 800faec:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800faee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800faf0:	3b01      	subs	r3, #1
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	2b30      	cmp	r3, #48	; 0x30
 800faf6:	d108      	bne.n	800fb0a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 800faf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fafa:	3b01      	subs	r3, #1
 800fafc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d203      	bcs.n	800fb0a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 800fb02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb04:	3b01      	subs	r3, #1
 800fb06:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800fb08:	e7f1      	b.n	800faee <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 800fb0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 800fb10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb14:	1ad3      	subs	r3, r2, r3
 800fb16:	4a0e      	ldr	r2, [pc, #56]	; (800fb50 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 800fb18:	4619      	mov	r1, r3
 800fb1a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fb1c:	f7ff fe70 	bl	800f800 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800fb20:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 800fb22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb26:	1ad3      	subs	r3, r2, r3
 800fb28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fb2e:	f7ff feeb 	bl	800f908 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 800fb32:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 800fb34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	376c      	adds	r7, #108	; 0x6c
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd90      	pop	{r4, r7, pc}
 800fb3e:	bf00      	nop
 800fb40:	007fffff 	.word	0x007fffff
 800fb44:	08029884 	.word	0x08029884
 800fb48:	08029888 	.word	0x08029888
 800fb4c:	08029890 	.word	0x08029890
 800fb50:	0802988c 	.word	0x0802988c

0800fb54 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 800fb5e:	6879      	ldr	r1, [r7, #4]
 800fb60:	6838      	ldr	r0, [r7, #0]
 800fb62:	f7ff feb5 	bl	800f8d0 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 800fb66:	4602      	mov	r2, r0
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	1ad3      	subs	r3, r2, r3
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3708      	adds	r7, #8
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800fb7e:	220a      	movs	r2, #10
 800fb80:	6879      	ldr	r1, [r7, #4]
 800fb82:	6838      	ldr	r0, [r7, #0]
 800fb84:	f7ff fe6e 	bl	800f864 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800fb88:	4602      	mov	r2, r0
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	1ad3      	subs	r3, r2, r3
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3708      	adds	r7, #8
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b082      	sub	sp, #8
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	6078      	str	r0, [r7, #4]
 800fb9e:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 800fba0:	2210      	movs	r2, #16
 800fba2:	6879      	ldr	r1, [r7, #4]
 800fba4:	6838      	ldr	r0, [r7, #0]
 800fba6:	f7ff fe5d 	bl	800f864 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800fbaa:	4602      	mov	r2, r0
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	1ad3      	subs	r3, r2, r3
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3708      	adds	r7, #8
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	ed97 0a00 	vldr	s0, [r7]
 800fbca:	f7ff fecf 	bl	800f96c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	1ad3      	subs	r3, r2, r3
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 800fbdc:	b590      	push	{r4, r7, lr}
 800fbde:	b08b      	sub	sp, #44	; 0x2c
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	60f8      	str	r0, [r7, #12]
 800fbe4:	60b9      	str	r1, [r7, #8]
 800fbe6:	607a      	str	r2, [r7, #4]
 800fbe8:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800fbea:	2300      	movs	r3, #0
 800fbec:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	3b01      	subs	r3, #1
 800fbf6:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 800fbf8:	6a3b      	ldr	r3, [r7, #32]
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f000 8151 	beq.w	800fea4 <MicroVsnprintf+0x2c8>
 800fc02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc04:	69bb      	ldr	r3, [r7, #24]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	f280 814c 	bge.w	800fea4 <MicroVsnprintf+0x2c8>
    if (*current == '%') {
 800fc0c:	6a3b      	ldr	r3, [r7, #32]
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	2b25      	cmp	r3, #37	; 0x25
 800fc12:	f040 813b 	bne.w	800fe8c <MicroVsnprintf+0x2b0>
      current++;
 800fc16:	6a3b      	ldr	r3, [r7, #32]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	623b      	str	r3, [r7, #32]
      switch (*current) {
 800fc1c:	6a3b      	ldr	r3, [r7, #32]
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	2b25      	cmp	r3, #37	; 0x25
 800fc22:	f000 80e2 	beq.w	800fdea <MicroVsnprintf+0x20e>
 800fc26:	2b25      	cmp	r3, #37	; 0x25
 800fc28:	dbe6      	blt.n	800fbf8 <MicroVsnprintf+0x1c>
 800fc2a:	2b78      	cmp	r3, #120	; 0x78
 800fc2c:	dce4      	bgt.n	800fbf8 <MicroVsnprintf+0x1c>
 800fc2e:	2b63      	cmp	r3, #99	; 0x63
 800fc30:	dbe2      	blt.n	800fbf8 <MicroVsnprintf+0x1c>
 800fc32:	3b63      	subs	r3, #99	; 0x63
 800fc34:	2b15      	cmp	r3, #21
 800fc36:	d8df      	bhi.n	800fbf8 <MicroVsnprintf+0x1c>
 800fc38:	a201      	add	r2, pc, #4	; (adr r2, 800fc40 <MicroVsnprintf+0x64>)
 800fc3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc3e:	bf00      	nop
 800fc40:	0800fe03 	.word	0x0800fe03
 800fc44:	0800fc99 	.word	0x0800fc99
 800fc48:	0800fbf9 	.word	0x0800fbf9
 800fc4c:	0800fd7f 	.word	0x0800fd7f
 800fc50:	0800fbf9 	.word	0x0800fbf9
 800fc54:	0800fbf9 	.word	0x0800fbf9
 800fc58:	0800fbf9 	.word	0x0800fbf9
 800fc5c:	0800fbf9 	.word	0x0800fbf9
 800fc60:	0800fbf9 	.word	0x0800fbf9
 800fc64:	0800fbf9 	.word	0x0800fbf9
 800fc68:	0800fbf9 	.word	0x0800fbf9
 800fc6c:	0800fbf9 	.word	0x0800fbf9
 800fc70:	0800fbf9 	.word	0x0800fbf9
 800fc74:	0800fbf9 	.word	0x0800fbf9
 800fc78:	0800fbf9 	.word	0x0800fbf9
 800fc7c:	0800fbf9 	.word	0x0800fbf9
 800fc80:	0800fe41 	.word	0x0800fe41
 800fc84:	0800fbf9 	.word	0x0800fbf9
 800fc88:	0800fcdb 	.word	0x0800fcdb
 800fc8c:	0800fbf9 	.word	0x0800fbf9
 800fc90:	0800fbf9 	.word	0x0800fbf9
 800fc94:	0800fd1d 	.word	0x0800fd1d
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800fc98:	69ba      	ldr	r2, [r7, #24]
 800fc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc9c:	1ad3      	subs	r3, r2, r3
 800fc9e:	2b0a      	cmp	r3, #10
 800fca0:	dc09      	bgt.n	800fcb6 <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
 800fca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca4:	1c5a      	adds	r2, r3, #1
 800fca6:	627a      	str	r2, [r7, #36]	; 0x24
 800fca8:	461a      	mov	r2, r3
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	4413      	add	r3, r2
 800fcae:	2200      	movs	r2, #0
 800fcb0:	701a      	strb	r2, [r3, #0]
            return output_index;
 800fcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb4:	e0ff      	b.n	800feb6 <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 800fcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	18d0      	adds	r0, r2, r3
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	1d1a      	adds	r2, r3, #4
 800fcc0:	603a      	str	r2, [r7, #0]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	f7ff ff45 	bl	800fb54 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 800fcca:	4602      	mov	r2, r0
          output_index +=
 800fccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcce:	4413      	add	r3, r2
 800fcd0:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800fcd2:	6a3b      	ldr	r3, [r7, #32]
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	623b      	str	r3, [r7, #32]
          break;
 800fcd8:	e0e3      	b.n	800fea2 <MicroVsnprintf+0x2c6>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800fcda:	69ba      	ldr	r2, [r7, #24]
 800fcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcde:	1ad3      	subs	r3, r2, r3
 800fce0:	2b0a      	cmp	r3, #10
 800fce2:	dc09      	bgt.n	800fcf8 <MicroVsnprintf+0x11c>
            output[output_index++] = '\0';
 800fce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce6:	1c5a      	adds	r2, r3, #1
 800fce8:	627a      	str	r2, [r7, #36]	; 0x24
 800fcea:	461a      	mov	r2, r3
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	4413      	add	r3, r2
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	701a      	strb	r2, [r3, #0]
            return output_index;
 800fcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf6:	e0de      	b.n	800feb6 <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 800fcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfa:	68fa      	ldr	r2, [r7, #12]
 800fcfc:	18d0      	adds	r0, r2, r3
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	1d1a      	adds	r2, r3, #4
 800fd02:	603a      	str	r2, [r7, #0]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	4619      	mov	r1, r3
 800fd08:	f7ff ff34 	bl	800fb74 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 800fd0c:	4602      	mov	r2, r0
          output_index +=
 800fd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd10:	4413      	add	r3, r2
 800fd12:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800fd14:	6a3b      	ldr	r3, [r7, #32]
 800fd16:	3301      	adds	r3, #1
 800fd18:	623b      	str	r3, [r7, #32]
          break;
 800fd1a:	e0c2      	b.n	800fea2 <MicroVsnprintf+0x2c6>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 800fd1c:	69ba      	ldr	r2, [r7, #24]
 800fd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd20:	1ad3      	subs	r3, r2, r3
 800fd22:	2b09      	cmp	r3, #9
 800fd24:	dc09      	bgt.n	800fd3a <MicroVsnprintf+0x15e>
            output[output_index++] = '\0';
 800fd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd28:	1c5a      	adds	r2, r3, #1
 800fd2a:	627a      	str	r2, [r7, #36]	; 0x24
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	4413      	add	r3, r2
 800fd32:	2200      	movs	r2, #0
 800fd34:	701a      	strb	r2, [r3, #0]
            return output_index;
 800fd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd38:	e0bd      	b.n	800feb6 <MicroVsnprintf+0x2da>
          }
          output[output_index++] = '0';
 800fd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3c:	1c5a      	adds	r2, r3, #1
 800fd3e:	627a      	str	r2, [r7, #36]	; 0x24
 800fd40:	461a      	mov	r2, r3
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	4413      	add	r3, r2
 800fd46:	2230      	movs	r2, #48	; 0x30
 800fd48:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 800fd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4c:	1c5a      	adds	r2, r3, #1
 800fd4e:	627a      	str	r2, [r7, #36]	; 0x24
 800fd50:	461a      	mov	r2, r3
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	4413      	add	r3, r2
 800fd56:	2278      	movs	r2, #120	; 0x78
 800fd58:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 800fd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5c:	68fa      	ldr	r2, [r7, #12]
 800fd5e:	18d0      	adds	r0, r2, r3
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	1d1a      	adds	r2, r3, #4
 800fd64:	603a      	str	r2, [r7, #0]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	4619      	mov	r1, r3
 800fd6a:	f7ff ff14 	bl	800fb96 <_ZN12_GLOBAL__N_19FormatHexEPcm>
 800fd6e:	4602      	mov	r2, r0
          output_index +=
 800fd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd72:	4413      	add	r3, r2
 800fd74:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800fd76:	6a3b      	ldr	r3, [r7, #32]
 800fd78:	3301      	adds	r3, #1
 800fd7a:	623b      	str	r3, [r7, #32]
          break;
 800fd7c:	e091      	b.n	800fea2 <MicroVsnprintf+0x2c6>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 800fd7e:	69ba      	ldr	r2, [r7, #24]
 800fd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd82:	1ad3      	subs	r3, r2, r3
 800fd84:	ee07 3a90 	vmov	s15, r3
 800fd88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd8c:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800fd90:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fd94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd98:	d509      	bpl.n	800fdae <MicroVsnprintf+0x1d2>
            output[output_index++] = '\0';
 800fd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd9c:	1c5a      	adds	r2, r3, #1
 800fd9e:	627a      	str	r2, [r7, #36]	; 0x24
 800fda0:	461a      	mov	r2, r3
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	4413      	add	r3, r2
 800fda6:	2200      	movs	r2, #0
 800fda8:	701a      	strb	r2, [r3, #0]
            return output_index;
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdac:	e083      	b.n	800feb6 <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 800fdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb0:	68fa      	ldr	r2, [r7, #12]
 800fdb2:	18d4      	adds	r4, r2, r3
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	3307      	adds	r3, #7
 800fdb8:	f023 0307 	bic.w	r3, r3, #7
 800fdbc:	f103 0208 	add.w	r2, r3, #8
 800fdc0:	603a      	str	r2, [r7, #0]
 800fdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc6:	4610      	mov	r0, r2
 800fdc8:	4619      	mov	r1, r3
 800fdca:	f7f0 ff09 	bl	8000be0 <__aeabi_d2f>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	ee00 3a10 	vmov	s0, r3
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	f7ff feef 	bl	800fbb8 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 800fdda:	4602      	mov	r2, r0
          output_index +=
 800fddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdde:	4413      	add	r3, r2
 800fde0:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800fde2:	6a3b      	ldr	r3, [r7, #32]
 800fde4:	3301      	adds	r3, #1
 800fde6:	623b      	str	r3, [r7, #32]
          break;
 800fde8:	e05b      	b.n	800fea2 <MicroVsnprintf+0x2c6>
        case '%':
          output[output_index++] = *current++;
 800fdea:	6a3b      	ldr	r3, [r7, #32]
 800fdec:	1c5a      	adds	r2, r3, #1
 800fdee:	623a      	str	r2, [r7, #32]
 800fdf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdf2:	1c51      	adds	r1, r2, #1
 800fdf4:	6279      	str	r1, [r7, #36]	; 0x24
 800fdf6:	4611      	mov	r1, r2
 800fdf8:	68fa      	ldr	r2, [r7, #12]
 800fdfa:	440a      	add	r2, r1
 800fdfc:	781b      	ldrb	r3, [r3, #0]
 800fdfe:	7013      	strb	r3, [r2, #0]
          break;
 800fe00:	e04f      	b.n	800fea2 <MicroVsnprintf+0x2c6>
        case 'c':
          if (usable_length - output_index < 1) {
 800fe02:	69ba      	ldr	r2, [r7, #24]
 800fe04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe06:	1ad3      	subs	r3, r2, r3
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	dc09      	bgt.n	800fe20 <MicroVsnprintf+0x244>
            output[output_index++] = '\0';
 800fe0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe0e:	1c5a      	adds	r2, r3, #1
 800fe10:	627a      	str	r2, [r7, #36]	; 0x24
 800fe12:	461a      	mov	r2, r3
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	4413      	add	r3, r2
 800fe18:	2200      	movs	r2, #0
 800fe1a:	701a      	strb	r2, [r3, #0]
            return output_index;
 800fe1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1e:	e04a      	b.n	800feb6 <MicroVsnprintf+0x2da>
          }
          output[output_index++] = va_arg(args, int32_t);
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	1d1a      	adds	r2, r3, #4
 800fe24:	603a      	str	r2, [r7, #0]
 800fe26:	6819      	ldr	r1, [r3, #0]
 800fe28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe2a:	1c5a      	adds	r2, r3, #1
 800fe2c:	627a      	str	r2, [r7, #36]	; 0x24
 800fe2e:	461a      	mov	r2, r3
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	4413      	add	r3, r2
 800fe34:	b2ca      	uxtb	r2, r1
 800fe36:	701a      	strb	r2, [r3, #0]
          current++;
 800fe38:	6a3b      	ldr	r3, [r7, #32]
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	623b      	str	r3, [r7, #32]
          break;
 800fe3e:	e030      	b.n	800fea2 <MicroVsnprintf+0x2c6>
        case 's':
          char* string = va_arg(args, char*);
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	1d1a      	adds	r2, r3, #4
 800fe44:	603a      	str	r2, [r7, #0]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 800fe4e:	69fa      	ldr	r2, [r7, #28]
 800fe50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe52:	4413      	add	r3, r2
 800fe54:	69ba      	ldr	r2, [r7, #24]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	dd14      	ble.n	800fe84 <MicroVsnprintf+0x2a8>
                 string[string_idx] != '\0') {
 800fe5a:	69fb      	ldr	r3, [r7, #28]
 800fe5c:	697a      	ldr	r2, [r7, #20]
 800fe5e:	4413      	add	r3, r2
 800fe60:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00e      	beq.n	800fe84 <MicroVsnprintf+0x2a8>
            output[output_index++] = string[string_idx++];
 800fe66:	69fb      	ldr	r3, [r7, #28]
 800fe68:	1c5a      	adds	r2, r3, #1
 800fe6a:	61fa      	str	r2, [r7, #28]
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	441a      	add	r2, r3
 800fe72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe74:	1c59      	adds	r1, r3, #1
 800fe76:	6279      	str	r1, [r7, #36]	; 0x24
 800fe78:	4619      	mov	r1, r3
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	440b      	add	r3, r1
 800fe7e:	7812      	ldrb	r2, [r2, #0]
 800fe80:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800fe82:	e7e4      	b.n	800fe4e <MicroVsnprintf+0x272>
          }
          current++;
 800fe84:	6a3b      	ldr	r3, [r7, #32]
 800fe86:	3301      	adds	r3, #1
 800fe88:	623b      	str	r3, [r7, #32]
 800fe8a:	e6b5      	b.n	800fbf8 <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 800fe8c:	6a3b      	ldr	r3, [r7, #32]
 800fe8e:	1c5a      	adds	r2, r3, #1
 800fe90:	623a      	str	r2, [r7, #32]
 800fe92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe94:	1c51      	adds	r1, r2, #1
 800fe96:	6279      	str	r1, [r7, #36]	; 0x24
 800fe98:	4611      	mov	r1, r2
 800fe9a:	68fa      	ldr	r2, [r7, #12]
 800fe9c:	440a      	add	r2, r1
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 800fea2:	e6a9      	b.n	800fbf8 <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 800fea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea6:	1c5a      	adds	r2, r3, #1
 800fea8:	627a      	str	r2, [r7, #36]	; 0x24
 800feaa:	461a      	mov	r2, r3
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	4413      	add	r3, r2
 800feb0:	2200      	movs	r2, #0
 800feb2:	701a      	strb	r2, [r3, #0]
  return output_index;
 800feb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	372c      	adds	r7, #44	; 0x2c
 800feba:	46bd      	mov	sp, r7
 800febc:	bd90      	pop	{r4, r7, pc}
 800febe:	bf00      	nop

0800fec0 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/kernels/op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 800fec0:	b480      	push	{r7}
 800fec2:	b085      	sub	sp, #20
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
  int result = 1;
 800fec8:	2301      	movs	r3, #1
 800feca:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800fecc:	2300      	movs	r3, #0
 800fece:	60bb      	str	r3, [r7, #8]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	68ba      	ldr	r2, [r7, #8]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	da0c      	bge.n	800fef4 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 800feda:	687a      	ldr	r2, [r7, #4]
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	009b      	lsls	r3, r3, #2
 800fee0:	4413      	add	r3, r2
 800fee2:	685a      	ldr	r2, [r3, #4]
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	fb02 f303 	mul.w	r3, r2, r3
 800feea:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	3301      	adds	r3, #1
 800fef0:	60bb      	str	r3, [r7, #8]
 800fef2:	e7ed      	b.n	800fed0 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 800fef4:	68fb      	ldr	r3, [r7, #12]
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3714      	adds	r7, #20
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr
	...

0800ff04 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	6039      	str	r1, [r7, #0]
 800ff0e:	4a11      	ldr	r2, [pc, #68]	; (800ff54 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	601a      	str	r2, [r3, #0]
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	685a      	ldr	r2, [r3, #4]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	605a      	str	r2, [r3, #4]
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	689a      	ldr	r2, [r3, #8]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	609a      	str	r2, [r3, #8]
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	68da      	ldr	r2, [r3, #12]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	60da      	str	r2, [r3, #12]
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	691a      	ldr	r2, [r3, #16]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	611a      	str	r2, [r3, #16]
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	695a      	ldr	r2, [r3, #20]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	615a      	str	r2, [r3, #20]
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	699a      	ldr	r2, [r3, #24]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	619a      	str	r2, [r3, #24]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	4618      	mov	r0, r3
 800ff48:	370c      	adds	r7, #12
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop
 800ff54:	0802c1ac 	.word	0x0802c1ac

0800ff58 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800ff58:	b480      	push	{r7}
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	607a      	str	r2, [r7, #4]
 800ff64:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 800ff66:	4a0e      	ldr	r2, [pc, #56]	; (800ffa0 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	601a      	str	r2, [r3, #0]
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	68ba      	ldr	r2, [r7, #8]
 800ff70:	605a      	str	r2, [r3, #4]
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	687a      	ldr	r2, [r7, #4]
 800ff76:	609a      	str	r2, [r3, #8]
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	683a      	ldr	r2, [r7, #0]
 800ff7c:	60da      	str	r2, [r3, #12]
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	611a      	str	r2, [r3, #16]
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	683a      	ldr	r2, [r7, #0]
 800ff88:	615a      	str	r2, [r3, #20]
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	689a      	ldr	r2, [r3, #8]
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	619a      	str	r2, [r3, #24]
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	4618      	mov	r0, r3
 800ff96:	3714      	adds	r7, #20
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr
 800ffa0:	0802c1ac 	.word	0x0802c1ac

0800ffa4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b084      	sub	sp, #16
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	607a      	str	r2, [r7, #4]
 800ffb0:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	4413      	add	r3, r2
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	68b9      	ldr	r1, [r7, #8]
 800ffbc:	68f8      	ldr	r0, [r7, #12]
 800ffbe:	f7ff ffcb 	bl	800ff58 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3710      	adds	r7, #16
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}

0800ffcc <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 800ffcc:	b590      	push	{r4, r7, lr}
 800ffce:	b08d      	sub	sp, #52	; 0x34
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	60f8      	str	r0, [r7, #12]
 800ffd4:	60b9      	str	r1, [r7, #8]
 800ffd6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d101      	bne.n	800ffe2 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 800ffde:	f014 ff6e 	bl	8024ebe <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d101      	bne.n	800ffec <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 800ffe8:	f014 ff69 	bl	8024ebe <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800ffec:	f107 0010 	add.w	r0, r7, #16
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	68ba      	ldr	r2, [r7, #8]
 800fff4:	68f9      	ldr	r1, [r7, #12]
 800fff6:	f7ff ffd5 	bl	800ffa4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 800fffa:	f107 0310 	add.w	r3, r7, #16
 800fffe:	2204      	movs	r2, #4
 8010000:	211c      	movs	r1, #28
 8010002:	4618      	mov	r0, r3
 8010004:	f000 f87c 	bl	8010100 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 8010008:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 801000a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801000c:	4619      	mov	r1, r3
 801000e:	201c      	movs	r0, #28
 8010010:	f7f8 fa9d 	bl	800854e <_ZnwjPv>
 8010014:	4604      	mov	r4, r0
 8010016:	f107 0310 	add.w	r3, r7, #16
 801001a:	4619      	mov	r1, r3
 801001c:	4620      	mov	r0, r4
 801001e:	f7ff ff71 	bl	800ff04 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8010022:	f107 0310 	add.w	r3, r7, #16
 8010026:	4618      	mov	r0, r3
 8010028:	f000 f806 	bl	8010038 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 801002c:	4623      	mov	r3, r4
}
 801002e:	4618      	mov	r0, r3
 8010030:	3734      	adds	r7, #52	; 0x34
 8010032:	46bd      	mov	sp, r7
 8010034:	bd90      	pop	{r4, r7, pc}
	...

08010038 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	4a04      	ldr	r2, [pc, #16]	; (8010054 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	601a      	str	r2, [r3, #0]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4618      	mov	r0, r3
 801004a:	370c      	adds	r7, #12
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr
 8010054:	0802c1ac 	.word	0x0802c1ac

08010058 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f7ff ffe9 	bl	8010038 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 8010066:	211c      	movs	r1, #28
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f014 fca2 	bl	80249b2 <_ZdlPvj>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	4618      	mov	r0, r3
 8010072:	3708      	adds	r7, #8
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}

08010078 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 8010078:	b580      	push	{r7, lr}
 801007a:	b088      	sub	sp, #32
 801007c:	af02      	add	r7, sp, #8
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	60b9      	str	r1, [r7, #8]
 8010082:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	691a      	ldr	r2, [r3, #16]
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	699b      	ldr	r3, [r3, #24]
 801008c:	429a      	cmp	r2, r3
 801008e:	d007      	beq.n	80100a0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	4918      	ldr	r1, [pc, #96]	; (80100f8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 8010096:	4618      	mov	r0, r3
 8010098:	f7f8 fa26 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 801009c:	2301      	movs	r3, #1
 801009e:	e026      	b.n	80100ee <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	689b      	ldr	r3, [r3, #8]
 80100a4:	6879      	ldr	r1, [r7, #4]
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7fb fe47 	bl	800bd3a <_ZN6tflite14AlignPointerUpEPhj>
 80100ac:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	695a      	ldr	r2, [r3, #20]
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 80100b8:	693a      	ldr	r2, [r7, #16]
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d20c      	bcs.n	80100da <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x62>
    TF_LITE_REPORT_ERROR(
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	6858      	ldr	r0, [r3, #4]
 80100c4:	68ba      	ldr	r2, [r7, #8]
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	1ad3      	subs	r3, r2, r3
 80100ca:	9300      	str	r3, [sp, #0]
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	68ba      	ldr	r2, [r7, #8]
 80100d0:	490a      	ldr	r1, [pc, #40]	; (80100fc <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 80100d2:	f7f8 fa09 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 80100d6:	2301      	movs	r3, #1
 80100d8:	e009      	b.n	80100ee <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }
  head_ = aligned_result + size;
 80100da:	697a      	ldr	r2, [r7, #20]
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	441a      	add	r2, r3
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	691a      	ldr	r2, [r3, #16]
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 80100ec:	2300      	movs	r3, #0
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3718      	adds	r7, #24
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	080298b4 	.word	0x080298b4
 80100fc:	0802990c 	.word	0x0802990c

08010100 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 8010100:	b580      	push	{r7, lr}
 8010102:	b088      	sub	sp, #32
 8010104:	af02      	add	r7, sp, #8
 8010106:	60f8      	str	r0, [r7, #12]
 8010108:	60b9      	str	r1, [r7, #8]
 801010a:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	695a      	ldr	r2, [r3, #20]
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	425b      	negs	r3, r3
 8010114:	4413      	add	r3, r2
 8010116:	6879      	ldr	r1, [r7, #4]
 8010118:	4618      	mov	r0, r3
 801011a:	f7fb fe27 	bl	800bd6c <_ZN6tflite16AlignPointerDownEPhj>
 801011e:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	691b      	ldr	r3, [r3, #16]
 8010124:	697a      	ldr	r2, [r7, #20]
 8010126:	429a      	cmp	r2, r3
 8010128:	d212      	bcs.n	8010150 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	691a      	ldr	r2, [r3, #16]
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	1ad3      	subs	r3, r2, r3
 8010132:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	6858      	ldr	r0, [r3, #4]
 8010138:	68ba      	ldr	r2, [r7, #8]
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	1ad2      	subs	r2, r2, r3
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	9300      	str	r3, [sp, #0]
 8010142:	4613      	mov	r3, r2
 8010144:	68ba      	ldr	r2, [r7, #8]
 8010146:	4906      	ldr	r1, [pc, #24]	; (8010160 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 8010148:	f7f8 f9ce 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 801014c:	2300      	movs	r3, #0
 801014e:	e003      	b.n	8010158 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	697a      	ldr	r2, [r7, #20]
 8010154:	615a      	str	r2, [r3, #20]
  return aligned_result;
 8010156:	697b      	ldr	r3, [r7, #20]
}
 8010158:	4618      	mov	r0, r3
 801015a:	3718      	adds	r7, #24
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	08029950 	.word	0x08029950

08010164 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 8010164:	b580      	push	{r7, lr}
 8010166:	b088      	sub	sp, #32
 8010168:	af02      	add	r7, sp, #8
 801016a:	60f8      	str	r0, [r7, #12]
 801016c:	60b9      	str	r1, [r7, #8]
 801016e:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	699b      	ldr	r3, [r3, #24]
 8010174:	6879      	ldr	r1, [r7, #4]
 8010176:	4618      	mov	r0, r3
 8010178:	f7fb fddf 	bl	800bd3a <_ZN6tflite14AlignPointerUpEPhj>
 801017c:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	695a      	ldr	r2, [r3, #20]
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	1ad3      	subs	r3, r2, r3
 8010186:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 8010188:	693a      	ldr	r2, [r7, #16]
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	429a      	cmp	r2, r3
 801018e:	d20c      	bcs.n	80101aa <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x46>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	6858      	ldr	r0, [r3, #4]
 8010194:	68ba      	ldr	r2, [r7, #8]
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	1ad3      	subs	r3, r2, r3
 801019a:	9300      	str	r3, [sp, #0]
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	68ba      	ldr	r2, [r7, #8]
 80101a0:	4907      	ldr	r1, [pc, #28]	; (80101c0 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 80101a2:	f7f8 f9a1 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 80101a6:	2300      	movs	r3, #0
 80101a8:	e005      	b.n	80101b6 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x52>
  }
  temp_ = aligned_result + size;
 80101aa:	697a      	ldr	r2, [r7, #20]
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	441a      	add	r2, r3
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	619a      	str	r2, [r3, #24]
  return aligned_result;
 80101b4:	697b      	ldr	r3, [r7, #20]
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3718      	adds	r7, #24
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	0802999c 	.word	0x0802999c

080101c4 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 80101c4:	b480      	push	{r7}
 80101c6:	b083      	sub	sp, #12
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	691a      	ldr	r2, [r3, #16]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	619a      	str	r2, [r3, #24]
 80101d4:	bf00      	nop
 80101d6:	370c      	adds	r7, #12
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr

080101e0 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 80101e0:	b480      	push	{r7}
 80101e2:	b083      	sub	sp, #12
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	689b      	ldr	r3, [r3, #8]
 80101ec:	4618      	mov	r0, r3
 80101ee:	370c      	adds	r7, #12
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr

080101f8 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	699b      	ldr	r3, [r3, #24]
 8010206:	6839      	ldr	r1, [r7, #0]
 8010208:	4618      	mov	r0, r3
 801020a:	f7fb fd96 	bl	800bd3a <_ZN6tflite14AlignPointerUpEPhj>
 801020e:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	695b      	ldr	r3, [r3, #20]
 8010214:	6839      	ldr	r1, [r7, #0]
 8010216:	4618      	mov	r0, r3
 8010218:	f7fb fda8 	bl	800bd6c <_ZN6tflite16AlignPointerDownEPhj>
 801021c:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 801021e:	68ba      	ldr	r2, [r7, #8]
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	1ad3      	subs	r3, r2, r3
}
 8010224:	4618      	mov	r0, r3
 8010226:	3710      	adds	r7, #16
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}

0801022c <_ZN6tflite16InitializeTargetEv>:
namespace tflite {

// To add an equivalent function for your own platform, create your own
// implementation file, and place it in a subfolder named after the target. See
// tensorflow/lite/micro/debug_log.cc for a similar example.
void InitializeTarget() {}
 801022c:	b480      	push	{r7}
 801022e:	af00      	add	r7, sp, #0
 8010230:	bf00      	nop
 8010232:	46bd      	mov	sp, r7
 8010234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010238:	4770      	bx	lr
	...

0801023c <_ZN11flatbuffers11EndianCheckEv>:
inline void EndianCheck() {
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
  int endiantest = 1;
 8010242:	2301      	movs	r3, #1
 8010244:	607b      	str	r3, [r7, #4]
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 8010246:	1d3b      	adds	r3, r7, #4
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	2b01      	cmp	r3, #1
 801024c:	d005      	beq.n	801025a <_ZN11flatbuffers11EndianCheckEv+0x1e>
 801024e:	4b05      	ldr	r3, [pc, #20]	; (8010264 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8010250:	4a05      	ldr	r2, [pc, #20]	; (8010268 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 8010252:	214e      	movs	r1, #78	; 0x4e
 8010254:	4805      	ldr	r0, [pc, #20]	; (801026c <_ZN11flatbuffers11EndianCheckEv+0x30>)
 8010256:	f014 fe39 	bl	8024ecc <__assert_func>
}
 801025a:	bf00      	nop
 801025c:	3708      	adds	r7, #8
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}
 8010262:	bf00      	nop
 8010264:	080299e8 	.word	0x080299e8
 8010268:	08029a2c 	.word	0x08029a2c
 801026c:	08029a4c 	.word	0x08029a4c

08010270 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8010270:	b580      	push	{r7, lr}
 8010272:	b082      	sub	sp, #8
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f000 f805 	bl	8010288 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 801027e:	4603      	mov	r3, r0
}
 8010280:	4618      	mov	r0, r3
 8010282:	3708      	adds	r7, #8
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
  EndianCheck();
 8010290:	f7ff ffd4 	bl	801023c <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	4618      	mov	r0, r3
 801029a:	f7f8 ff85 	bl	80091a8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 801029e:	4602      	mov	r2, r0
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	4413      	add	r3, r2
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3708      	adds	r7, #8
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <_Z18RespondToDetectionPN6tflite13ErrorReporterEaa>:

// This dummy implementation writes person and no person scores to the error
// console. Real applications will want to take some custom action instead, and
// should implement their own versions of this function.
void RespondToDetection(tflite::ErrorReporter* error_reporter,
                        int8_t person_score, int8_t no_person_score) {
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
 80102b4:	460b      	mov	r3, r1
 80102b6:	70fb      	strb	r3, [r7, #3]
 80102b8:	4613      	mov	r3, r2
 80102ba:	70bb      	strb	r3, [r7, #2]
  TF_LITE_REPORT_ERROR(error_reporter, "person score:%d no person score %d",
 80102bc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80102c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80102c4:	4903      	ldr	r1, [pc, #12]	; (80102d4 <_Z18RespondToDetectionPN6tflite13ErrorReporterEaa+0x28>)
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f7f8 f90e 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                       person_score, no_person_score);
}
 80102cc:	bf00      	nop
 80102ce:	3708      	adds	r7, #8
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}
 80102d4:	0802a3f8 	.word	0x0802a3f8

080102d8 <_Z8GetImagePN6tflite13ErrorReporterEiiiPa>:
#include "tensorflow/lite/micro/examples/person_detection/model_settings.h"

#include "app_main.h"

TfLiteStatus GetImage(tflite::ErrorReporter* error_reporter, int image_width,
                      int image_height, int channels, int8_t* image_data) {
 80102d8:	b480      	push	{r7}
 80102da:	b087      	sub	sp, #28
 80102dc:	af00      	add	r7, sp, #0
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	607a      	str	r2, [r7, #4]
 80102e4:	603b      	str	r3, [r7, #0]
  for (int i = 0; i < image_width * image_height * channels; ++i) {
 80102e6:	2300      	movs	r3, #0
 80102e8:	617b      	str	r3, [r7, #20]
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	687a      	ldr	r2, [r7, #4]
 80102ee:	fb02 f303 	mul.w	r3, r2, r3
 80102f2:	683a      	ldr	r2, [r7, #0]
 80102f4:	fb02 f303 	mul.w	r3, r2, r3
 80102f8:	697a      	ldr	r2, [r7, #20]
 80102fa:	429a      	cmp	r2, r3
 80102fc:	da0c      	bge.n	8010318 <_Z8GetImagePN6tflite13ErrorReporterEiiiPa+0x40>
    image_data[i] = g_cam_gray_frame[i];
 80102fe:	4a0a      	ldr	r2, [pc, #40]	; (8010328 <_Z8GetImagePN6tflite13ErrorReporterEiiiPa+0x50>)
 8010300:	697b      	ldr	r3, [r7, #20]
 8010302:	4413      	add	r3, r2
 8010304:	7819      	ldrb	r1, [r3, #0]
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	6a3a      	ldr	r2, [r7, #32]
 801030a:	4413      	add	r3, r2
 801030c:	b24a      	sxtb	r2, r1
 801030e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < image_width * image_height * channels; ++i) {
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	3301      	adds	r3, #1
 8010314:	617b      	str	r3, [r7, #20]
 8010316:	e7e8      	b.n	80102ea <_Z8GetImagePN6tflite13ErrorReporterEiiiPa+0x12>
  }
  return kTfLiteOk;
 8010318:	2300      	movs	r3, #0
}
 801031a:	4618      	mov	r0, r3
 801031c:	371c      	adds	r7, #28
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr
 8010326:	bf00      	nop
 8010328:	20025b20 	.word	0x20025b20

0801032c <_ZNK6tflite5Model7versionEv>:
  uint32_t version() const {
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2200      	movs	r2, #0
 8010338:	2104      	movs	r1, #4
 801033a:	4618      	mov	r0, r3
 801033c:	f7fd fb2f 	bl	800d99e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8010340:	4603      	mov	r3, r0
  }
 8010342:	4618      	mov	r0, r3
 8010344:	3708      	adds	r7, #8
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 801034a:	b580      	push	{r7, lr}
 801034c:	b082      	sub	sp, #8
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f7ff ff8c 	bl	8010270 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8010358:	4603      	mov	r3, r0
}
 801035a:	4618      	mov	r0, r3
 801035c:	3708      	adds	r7, #8
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
	...

08010364 <__tcf_0>:
  tflite::InitializeTarget();

  // Set up logging. Google style is to avoid globals or statics because of
  // lifetime uncertainty, but since this has a trivial destructor it's okay.
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroErrorReporter micro_error_reporter;
 8010364:	b580      	push	{r7, lr}
 8010366:	af00      	add	r7, sp, #0
 8010368:	4801      	ldr	r0, [pc, #4]	; (8010370 <__tcf_0+0xc>)
 801036a:	f7fd ffcf 	bl	800e30c <_ZN6tflite18MicroErrorReporterD1Ev>
 801036e:	bd80      	pop	{r7, pc}
 8010370:	20000010 	.word	0x20000010

08010374 <__tcf_1>:
  // incur some penalty in code space for op implementations that are not
  // needed by this graph.
  //
  // tflite::AllOpsResolver resolver;
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;
 8010374:	b580      	push	{r7, lr}
 8010376:	af00      	add	r7, sp, #0
 8010378:	4801      	ldr	r0, [pc, #4]	; (8010380 <__tcf_1+0xc>)
 801037a:	f000 faa5 	bl	80108c8 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>
 801037e:	bd80      	pop	{r7, pc}
 8010380:	2004a060 	.word	0x2004a060

08010384 <__tcf_2>:
  micro_op_resolver.AddSoftmax();

  // Build an interpreter to run the model with.
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroInterpreter static_interpreter(
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8010384:	b580      	push	{r7, lr}
 8010386:	af00      	add	r7, sp, #0
 8010388:	4801      	ldr	r0, [pc, #4]	; (8010390 <__tcf_2+0xc>)
 801038a:	f7fe fd0e 	bl	800edaa <_ZN6tflite16MicroInterpreterD1Ev>
 801038e:	bd80      	pop	{r7, pc}
 8010390:	2004a130 	.word	0x2004a130

08010394 <setup>:
void setup() {
 8010394:	b590      	push	{r4, r7, lr}
 8010396:	b08f      	sub	sp, #60	; 0x3c
 8010398:	af04      	add	r7, sp, #16
  tflite::InitializeTarget();
 801039a:	f7ff ff47 	bl	801022c <_ZN6tflite16InitializeTargetEv>
  static tflite::MicroErrorReporter micro_error_reporter;
 801039e:	4b65      	ldr	r3, [pc, #404]	; (8010534 <setup+0x1a0>)
 80103a0:	781b      	ldrb	r3, [r3, #0]
 80103a2:	f3bf 8f5b 	dmb	ish
 80103a6:	b2db      	uxtb	r3, r3
 80103a8:	f003 0301 	and.w	r3, r3, #1
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	bf0c      	ite	eq
 80103b0:	2301      	moveq	r3, #1
 80103b2:	2300      	movne	r3, #0
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d010      	beq.n	80103dc <setup+0x48>
 80103ba:	485e      	ldr	r0, [pc, #376]	; (8010534 <setup+0x1a0>)
 80103bc:	f014 fafd 	bl	80249ba <__cxa_guard_acquire>
 80103c0:	4603      	mov	r3, r0
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	bf14      	ite	ne
 80103c6:	2301      	movne	r3, #1
 80103c8:	2300      	moveq	r3, #0
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d005      	beq.n	80103dc <setup+0x48>
 80103d0:	4858      	ldr	r0, [pc, #352]	; (8010534 <setup+0x1a0>)
 80103d2:	f014 fafe 	bl	80249d2 <__cxa_guard_release>
 80103d6:	4858      	ldr	r0, [pc, #352]	; (8010538 <setup+0x1a4>)
 80103d8:	f014 fd96 	bl	8024f08 <atexit>
  error_reporter = &micro_error_reporter;
 80103dc:	4b57      	ldr	r3, [pc, #348]	; (801053c <setup+0x1a8>)
 80103de:	4a58      	ldr	r2, [pc, #352]	; (8010540 <setup+0x1ac>)
 80103e0:	601a      	str	r2, [r3, #0]
  model = tflite::GetModel(g_person_detect_model_data);
 80103e2:	4858      	ldr	r0, [pc, #352]	; (8010544 <setup+0x1b0>)
 80103e4:	f7ff ffb1 	bl	801034a <_ZN6tflite8GetModelEPKv>
 80103e8:	4603      	mov	r3, r0
 80103ea:	4a57      	ldr	r2, [pc, #348]	; (8010548 <setup+0x1b4>)
 80103ec:	6013      	str	r3, [r2, #0]
  if (model->version() != TFLITE_SCHEMA_VERSION) {
 80103ee:	4b56      	ldr	r3, [pc, #344]	; (8010548 <setup+0x1b4>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7ff ff9a 	bl	801032c <_ZNK6tflite5Model7versionEv>
 80103f8:	4603      	mov	r3, r0
 80103fa:	2b03      	cmp	r3, #3
 80103fc:	bf14      	ite	ne
 80103fe:	2301      	movne	r3, #1
 8010400:	2300      	moveq	r3, #0
 8010402:	b2db      	uxtb	r3, r3
 8010404:	2b00      	cmp	r3, #0
 8010406:	d00d      	beq.n	8010424 <setup+0x90>
    TF_LITE_REPORT_ERROR(error_reporter,
 8010408:	4b4c      	ldr	r3, [pc, #304]	; (801053c <setup+0x1a8>)
 801040a:	681c      	ldr	r4, [r3, #0]
 801040c:	4b4e      	ldr	r3, [pc, #312]	; (8010548 <setup+0x1b4>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4618      	mov	r0, r3
 8010412:	f7ff ff8b 	bl	801032c <_ZNK6tflite5Model7versionEv>
 8010416:	4602      	mov	r2, r0
 8010418:	2303      	movs	r3, #3
 801041a:	494c      	ldr	r1, [pc, #304]	; (801054c <setup+0x1b8>)
 801041c:	4620      	mov	r0, r4
 801041e:	f7f8 f863 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
 8010422:	e084      	b.n	801052e <setup+0x19a>
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;
 8010424:	4b4a      	ldr	r3, [pc, #296]	; (8010550 <setup+0x1bc>)
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	f3bf 8f5b 	dmb	ish
 801042c:	b2db      	uxtb	r3, r3
 801042e:	f003 0301 	and.w	r3, r3, #1
 8010432:	2b00      	cmp	r3, #0
 8010434:	bf0c      	ite	eq
 8010436:	2301      	moveq	r3, #1
 8010438:	2300      	movne	r3, #0
 801043a:	b2db      	uxtb	r3, r3
 801043c:	2b00      	cmp	r3, #0
 801043e:	d014      	beq.n	801046a <setup+0xd6>
 8010440:	4843      	ldr	r0, [pc, #268]	; (8010550 <setup+0x1bc>)
 8010442:	f014 faba 	bl	80249ba <__cxa_guard_acquire>
 8010446:	4603      	mov	r3, r0
 8010448:	2b00      	cmp	r3, #0
 801044a:	bf14      	ite	ne
 801044c:	2301      	movne	r3, #1
 801044e:	2300      	moveq	r3, #0
 8010450:	b2db      	uxtb	r3, r3
 8010452:	2b00      	cmp	r3, #0
 8010454:	d009      	beq.n	801046a <setup+0xd6>
 8010456:	2100      	movs	r1, #0
 8010458:	483e      	ldr	r0, [pc, #248]	; (8010554 <setup+0x1c0>)
 801045a:	f000 f8e9 	bl	8010630 <_ZN6tflite22MicroMutableOpResolverILj5EEC1EPNS_13ErrorReporterE>
 801045e:	483c      	ldr	r0, [pc, #240]	; (8010550 <setup+0x1bc>)
 8010460:	f014 fab7 	bl	80249d2 <__cxa_guard_release>
 8010464:	483c      	ldr	r0, [pc, #240]	; (8010558 <setup+0x1c4>)
 8010466:	f014 fd4f 	bl	8024f08 <atexit>
  micro_op_resolver.AddAveragePool2D();
 801046a:	483a      	ldr	r0, [pc, #232]	; (8010554 <setup+0x1c0>)
 801046c:	f000 f900 	bl	8010670 <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DEv>
  micro_op_resolver.AddConv2D();
 8010470:	4838      	ldr	r0, [pc, #224]	; (8010554 <setup+0x1c0>)
 8010472:	f000 f915 	bl	80106a0 <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DEv>
  micro_op_resolver.AddDepthwiseConv2D();
 8010476:	4837      	ldr	r0, [pc, #220]	; (8010554 <setup+0x1c0>)
 8010478:	f000 f92a 	bl	80106d0 <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DEv>
  micro_op_resolver.AddReshape();
 801047c:	4835      	ldr	r0, [pc, #212]	; (8010554 <setup+0x1c0>)
 801047e:	f000 f93f 	bl	8010700 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv>
  micro_op_resolver.AddSoftmax();
 8010482:	1d3b      	adds	r3, r7, #4
 8010484:	4618      	mov	r0, r3
 8010486:	f007 fb9f 	bl	8017bc8 <_ZN6tflite16Register_SOFTMAXEv>
 801048a:	1d3b      	adds	r3, r7, #4
 801048c:	4619      	mov	r1, r3
 801048e:	4831      	ldr	r0, [pc, #196]	; (8010554 <setup+0x1c0>)
 8010490:	f000 f94e 	bl	8010730 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK18TfLiteRegistration>
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8010494:	4b31      	ldr	r3, [pc, #196]	; (801055c <setup+0x1c8>)
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	f3bf 8f5b 	dmb	ish
 801049c:	b2db      	uxtb	r3, r3
 801049e:	f003 0301 	and.w	r3, r3, #1
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	bf0c      	ite	eq
 80104a6:	2301      	moveq	r3, #1
 80104a8:	2300      	movne	r3, #0
 80104aa:	b2db      	uxtb	r3, r3
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d01f      	beq.n	80104f0 <setup+0x15c>
 80104b0:	482a      	ldr	r0, [pc, #168]	; (801055c <setup+0x1c8>)
 80104b2:	f014 fa82 	bl	80249ba <__cxa_guard_acquire>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	bf14      	ite	ne
 80104bc:	2301      	movne	r3, #1
 80104be:	2300      	moveq	r3, #0
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d014      	beq.n	80104f0 <setup+0x15c>
 80104c6:	4b20      	ldr	r3, [pc, #128]	; (8010548 <setup+0x1b4>)
 80104c8:	6819      	ldr	r1, [r3, #0]
 80104ca:	4b1c      	ldr	r3, [pc, #112]	; (801053c <setup+0x1a8>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	2200      	movs	r2, #0
 80104d0:	9202      	str	r2, [sp, #8]
 80104d2:	9301      	str	r3, [sp, #4]
 80104d4:	f44f 3308 	mov.w	r3, #139264	; 0x22000
 80104d8:	9300      	str	r3, [sp, #0]
 80104da:	4b21      	ldr	r3, [pc, #132]	; (8010560 <setup+0x1cc>)
 80104dc:	4a1d      	ldr	r2, [pc, #116]	; (8010554 <setup+0x1c0>)
 80104de:	4821      	ldr	r0, [pc, #132]	; (8010564 <setup+0x1d0>)
 80104e0:	f7fe fc1c 	bl	800ed1c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
 80104e4:	481d      	ldr	r0, [pc, #116]	; (801055c <setup+0x1c8>)
 80104e6:	f014 fa74 	bl	80249d2 <__cxa_guard_release>
 80104ea:	481f      	ldr	r0, [pc, #124]	; (8010568 <setup+0x1d4>)
 80104ec:	f014 fd0c 	bl	8024f08 <atexit>
  interpreter = &static_interpreter;
 80104f0:	4b1e      	ldr	r3, [pc, #120]	; (801056c <setup+0x1d8>)
 80104f2:	4a1c      	ldr	r2, [pc, #112]	; (8010564 <setup+0x1d0>)
 80104f4:	601a      	str	r2, [r3, #0]

  // Allocate memory from the tensor_arena for the model's tensors.
  TfLiteStatus allocate_status = interpreter->AllocateTensors();
 80104f6:	4b1d      	ldr	r3, [pc, #116]	; (801056c <setup+0x1d8>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fe fe22 	bl	800f144 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 8010500:	4603      	mov	r3, r0
 8010502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (allocate_status != kTfLiteOk) {
 8010506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801050a:	2b00      	cmp	r3, #0
 801050c:	d006      	beq.n	801051c <setup+0x188>
    TF_LITE_REPORT_ERROR(error_reporter, "AllocateTensors() failed");
 801050e:	4b0b      	ldr	r3, [pc, #44]	; (801053c <setup+0x1a8>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	4917      	ldr	r1, [pc, #92]	; (8010570 <setup+0x1dc>)
 8010514:	4618      	mov	r0, r3
 8010516:	f7f7 ffe7 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
 801051a:	e008      	b.n	801052e <setup+0x19a>
  }

  // Get information about the memory area to use for the model's input.
  input = interpreter->input(0);
 801051c:	4b13      	ldr	r3, [pc, #76]	; (801056c <setup+0x1d8>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2100      	movs	r1, #0
 8010522:	4618      	mov	r0, r3
 8010524:	f7fe ffae 	bl	800f484 <_ZN6tflite16MicroInterpreter5inputEj>
 8010528:	4603      	mov	r3, r0
 801052a:	4a12      	ldr	r2, [pc, #72]	; (8010574 <setup+0x1e0>)
 801052c:	6013      	str	r3, [r2, #0]
}
 801052e:	372c      	adds	r7, #44	; 0x2c
 8010530:	46bd      	mov	sp, r7
 8010532:	bd90      	pop	{r4, r7, pc}
 8010534:	2004a05c 	.word	0x2004a05c
 8010538:	08010365 	.word	0x08010365
 801053c:	2002804c 	.word	0x2002804c
 8010540:	20000010 	.word	0x20000010
 8010544:	0802c258 	.word	0x0802c258
 8010548:	20028050 	.word	0x20028050
 801054c:	0802a518 	.word	0x0802a518
 8010550:	2004a12c 	.word	0x2004a12c
 8010554:	2004a060 	.word	0x2004a060
 8010558:	08010375 	.word	0x08010375
 801055c:	2004a1c4 	.word	0x2004a1c4
 8010560:	2002805c 	.word	0x2002805c
 8010564:	2004a130 	.word	0x2004a130
 8010568:	08010385 	.word	0x08010385
 801056c:	20028054 	.word	0x20028054
 8010570:	0802a560 	.word	0x0802a560
 8010574:	20028058 	.word	0x20028058

08010578 <loop>:


extern int8_t g_person_score;
// The name of this function is important for Arduino compatibility.
void loop() {
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af02      	add	r7, sp, #8
  // Get image from provider.
  if (kTfLiteOk != GetImage(error_reporter, kNumCols, kNumRows, kNumChannels,
 801057e:	4b26      	ldr	r3, [pc, #152]	; (8010618 <loop+0xa0>)
 8010580:	6818      	ldr	r0, [r3, #0]
 8010582:	4b26      	ldr	r3, [pc, #152]	; (801061c <loop+0xa4>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	685b      	ldr	r3, [r3, #4]
 8010588:	9300      	str	r3, [sp, #0]
 801058a:	2301      	movs	r3, #1
 801058c:	2260      	movs	r2, #96	; 0x60
 801058e:	2160      	movs	r1, #96	; 0x60
 8010590:	f7ff fea2 	bl	80102d8 <_Z8GetImagePN6tflite13ErrorReporterEiiiPa>
 8010594:	4603      	mov	r3, r0
 8010596:	2b00      	cmp	r3, #0
 8010598:	bf14      	ite	ne
 801059a:	2301      	movne	r3, #1
 801059c:	2300      	moveq	r3, #0
 801059e:	b2db      	uxtb	r3, r3
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d005      	beq.n	80105b0 <loop+0x38>
                            input->data.int8)) {
    TF_LITE_REPORT_ERROR(error_reporter, "Image capture failed.");
 80105a4:	4b1c      	ldr	r3, [pc, #112]	; (8010618 <loop+0xa0>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	491d      	ldr	r1, [pc, #116]	; (8010620 <loop+0xa8>)
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7f7 ff9c 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  }

  // Run the model on this input and make sure it succeeds.
  if (kTfLiteOk != interpreter->Invoke()) {
 80105b0:	4b1c      	ldr	r3, [pc, #112]	; (8010624 <loop+0xac>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7fe ff33 	bl	800f420 <_ZN6tflite16MicroInterpreter6InvokeEv>
 80105ba:	4603      	mov	r3, r0
 80105bc:	2b00      	cmp	r3, #0
 80105be:	bf14      	ite	ne
 80105c0:	2301      	movne	r3, #1
 80105c2:	2300      	moveq	r3, #0
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d005      	beq.n	80105d6 <loop+0x5e>
    TF_LITE_REPORT_ERROR(error_reporter, "Invoke failed.");
 80105ca:	4b13      	ldr	r3, [pc, #76]	; (8010618 <loop+0xa0>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	4916      	ldr	r1, [pc, #88]	; (8010628 <loop+0xb0>)
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7f7 ff89 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  }

  TfLiteTensor* output = interpreter->output(0);
 80105d6:	4b13      	ldr	r3, [pc, #76]	; (8010624 <loop+0xac>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	2100      	movs	r1, #0
 80105dc:	4618      	mov	r0, r3
 80105de:	f7fe ff75 	bl	800f4cc <_ZN6tflite16MicroInterpreter6outputEj>
 80105e2:	6078      	str	r0, [r7, #4]

  // Process the inference results.
  int8_t person_score = output->data.uint8[kPersonIndex];
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	3301      	adds	r3, #1
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	70fb      	strb	r3, [r7, #3]
  int8_t no_person_score = output->data.uint8[kNotAPersonIndex];
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	70bb      	strb	r3, [r7, #2]
  RespondToDetection(error_reporter, person_score, no_person_score);
 80105f6:	4b08      	ldr	r3, [pc, #32]	; (8010618 <loop+0xa0>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	f997 2002 	ldrsb.w	r2, [r7, #2]
 80105fe:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8010602:	4618      	mov	r0, r3
 8010604:	f7ff fe52 	bl	80102ac <_Z18RespondToDetectionPN6tflite13ErrorReporterEaa>
  g_person_score = person_score;
 8010608:	4a08      	ldr	r2, [pc, #32]	; (801062c <loop+0xb4>)
 801060a:	78fb      	ldrb	r3, [r7, #3]
 801060c:	7013      	strb	r3, [r2, #0]
}
 801060e:	bf00      	nop
 8010610:	3708      	adds	r7, #8
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
 8010616:	bf00      	nop
 8010618:	2002804c 	.word	0x2002804c
 801061c:	20028058 	.word	0x20028058
 8010620:	0802a57c 	.word	0x0802a57c
 8010624:	20028054 	.word	0x20028054
 8010628:	0802a594 	.word	0x0802a594
 801062c:	20027f24 	.word	0x20027f24

08010630 <_ZN6tflite22MicroMutableOpResolverILj5EEC1EPNS_13ErrorReporterE>:
template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	4618      	mov	r0, r3
 801063e:	f7fb fa5d 	bl	800bafc <_ZN6tflite15MicroOpResolverC1Ev>
 8010642:	4a0a      	ldr	r2, [pc, #40]	; (801066c <_ZN6tflite22MicroMutableOpResolverILj5EEC1EPNS_13ErrorReporterE+0x3c>)
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	601a      	str	r2, [r3, #0]
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2200      	movs	r2, #0
 801064c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2200      	movs	r2, #0
 8010654:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	683a      	ldr	r2, [r7, #0]
 801065c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	4618      	mov	r0, r3
 8010664:	3708      	adds	r7, #8
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
 801066a:	bf00      	nop
 801066c:	0802c1cc 	.word	0x0802c1cc

08010670 <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DEv>:
  TfLiteStatus AddArgMin() {
    return AddBuiltin(BuiltinOperator_ARG_MIN,
                      tflite::ops::micro::Register_ARG_MIN(), ParseArgMin);
  }

  TfLiteStatus AddAveragePool2D() {
 8010670:	b580      	push	{r7, lr}
 8010672:	b08a      	sub	sp, #40	; 0x28
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_AVERAGE_POOL_2D,
                      tflite::ops::micro::Register_AVERAGE_POOL_2D(),
 8010678:	f107 0308 	add.w	r3, r7, #8
 801067c:	4618      	mov	r0, r3
 801067e:	f006 fea9 	bl	80173d4 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>
                      ParsePool);
 8010682:	f107 0208 	add.w	r2, r7, #8
 8010686:	4b05      	ldr	r3, [pc, #20]	; (801069c <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DEv+0x2c>)
 8010688:	2101      	movs	r1, #1
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f000 f862 	bl	8010754 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8010690:	4603      	mov	r3, r0
  }
 8010692:	4618      	mov	r0, r3
 8010694:	3728      	adds	r7, #40	; 0x28
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}
 801069a:	bf00      	nop
 801069c:	08008ea9 	.word	0x08008ea9

080106a0 <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DEv>:
    return AddBuiltin(BuiltinOperator_CONCATENATION,
                      tflite::ops::micro::Register_CONCATENATION(),
                      ParseConcatenation);
  }

  TfLiteStatus AddConv2D() {
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b08a      	sub	sp, #40	; 0x28
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_CONV_2D, Register_CONV_2D(), ParseConv2D);
 80106a8:	f107 0308 	add.w	r3, r7, #8
 80106ac:	4618      	mov	r0, r3
 80106ae:	f004 ff15 	bl	80154dc <_ZN6tflite16Register_CONV_2DEv>
 80106b2:	f107 0208 	add.w	r2, r7, #8
 80106b6:	4b05      	ldr	r3, [pc, #20]	; (80106cc <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DEv+0x2c>)
 80106b8:	2103      	movs	r1, #3
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f000 f84a 	bl	8010754 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80106c0:	4603      	mov	r3, r0
  }
 80106c2:	4618      	mov	r0, r3
 80106c4:	3728      	adds	r7, #40	; 0x28
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	08008c11 	.word	0x08008c11

080106d0 <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DEv>:
  TfLiteStatus AddDepthToSpace() {
    return AddBuiltin(BuiltinOperator_DEPTH_TO_SPACE,
                      tflite::Register_DEPTH_TO_SPACE(), ParseDepthToSpace);
  }

  TfLiteStatus AddDepthwiseConv2D() {
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b08a      	sub	sp, #40	; 0x28
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_DEPTHWISE_CONV_2D,
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
 80106d8:	f107 0308 	add.w	r3, r7, #8
 80106dc:	4618      	mov	r0, r3
 80106de:	f005 ffbb 	bl	8016658 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
 80106e2:	f107 0208 	add.w	r2, r7, #8
 80106e6:	4b05      	ldr	r3, [pc, #20]	; (80106fc <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DEv+0x2c>)
 80106e8:	2104      	movs	r1, #4
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f000 f832 	bl	8010754 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80106f0:	4603      	mov	r3, r0
  }
 80106f2:	4618      	mov	r0, r3
 80106f4:	3728      	adds	r7, #40	; 0x28
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	08008d51 	.word	0x08008d51

08010700 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv>:
  TfLiteStatus AddRelu6() {
    return AddBuiltin(BuiltinOperator_RELU6,
                      tflite::ops::micro::Register_RELU6(), ParseRelu6);
  }

  TfLiteStatus AddReshape() {
 8010700:	b580      	push	{r7, lr}
 8010702:	b08a      	sub	sp, #40	; 0x28
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_RESHAPE,
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 8010708:	f107 0308 	add.w	r3, r7, #8
 801070c:	4618      	mov	r0, r3
 801070e:	f003 f96d 	bl	80139ec <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 8010712:	f107 0208 	add.w	r2, r7, #8
 8010716:	4b05      	ldr	r3, [pc, #20]	; (801072c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv+0x2c>)
 8010718:	2116      	movs	r1, #22
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f000 f81a 	bl	8010754 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8010720:	4603      	mov	r3, r0
  }
 8010722:	4618      	mov	r0, r3
 8010724:	3728      	adds	r7, #40	; 0x28
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}
 801072a:	bf00      	nop
 801072c:	08008fe9 	.word	0x08008fe9

08010730 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK18TfLiteRegistration>:
  TfLiteStatus AddSin() {
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
                      ParseSin);
  }

  TfLiteStatus AddSoftmax(
 8010730:	b580      	push	{r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_SOFTMAX()) {
    return AddBuiltin(BuiltinOperator_SOFTMAX, registration, ParseSoftmax);
 801073a:	4b05      	ldr	r3, [pc, #20]	; (8010750 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK18TfLiteRegistration+0x20>)
 801073c:	683a      	ldr	r2, [r7, #0]
 801073e:	2119      	movs	r1, #25
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f000 f807 	bl	8010754 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8010746:	4603      	mov	r3, r0
  }
 8010748:	4618      	mov	r0, r3
 801074a:	3708      	adds	r7, #8
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}
 8010750:	080090e5 	.word	0x080090e5

08010754 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8010754:	b5b0      	push	{r4, r5, r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	60f8      	str	r0, [r7, #12]
 801075c:	607a      	str	r2, [r7, #4]
 801075e:	603b      	str	r3, [r7, #0]
 8010760:	460b      	mov	r3, r1
 8010762:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 8010764:	7afb      	ldrb	r3, [r7, #11]
 8010766:	2b20      	cmp	r3, #32
 8010768:	d10d      	bne.n	8010786 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x32>
      if (error_reporter_ != nullptr) {
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010770:	2b00      	cmp	r3, #0
 8010772:	d006      	beq.n	8010782 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801077a:	493a      	ldr	r1, [pc, #232]	; (8010864 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x110>)
 801077c:	4618      	mov	r0, r3
 801077e:	f7f7 feb3 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 8010782:	2301      	movs	r3, #1
 8010784:	e069      	b.n	801085a <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    if (FindOp(op) != nullptr) {
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	3318      	adds	r3, #24
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	7afa      	ldrb	r2, [r7, #11]
 8010790:	4611      	mov	r1, r2
 8010792:	68f8      	ldr	r0, [r7, #12]
 8010794:	4798      	blx	r3
 8010796:	4603      	mov	r3, r0
 8010798:	2b00      	cmp	r3, #0
 801079a:	bf14      	ite	ne
 801079c:	2301      	movne	r3, #1
 801079e:	2300      	moveq	r3, #0
 80107a0:	b2db      	uxtb	r3, r3
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d00e      	beq.n	80107c4 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x70>
      if (error_reporter_ != nullptr) {
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d007      	beq.n	80107c0 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x6c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80107b6:	7afa      	ldrb	r2, [r7, #11]
 80107b8:	492b      	ldr	r1, [pc, #172]	; (8010868 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x114>)
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7f7 fe94 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 80107c0:	2301      	movs	r3, #1
 80107c2:	e04a      	b.n	801085a <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    if (registrations_len_ >= tOpCount) {
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80107ca:	2b04      	cmp	r3, #4
 80107cc:	d90e      	bls.n	80107ec <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x98>
      if (error_reporter_) {
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d007      	beq.n	80107e8 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x94>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 80107de:	7afa      	ldrb	r2, [r7, #11]
 80107e0:	2305      	movs	r3, #5
 80107e2:	4922      	ldr	r1, [pc, #136]	; (801086c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x118>)
 80107e4:	f7f7 fe80 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 80107e8:	2301      	movs	r3, #1
 80107ea:	e036      	b.n	801085a <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    registrations_[registrations_len_] = registration;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80107f2:	68fa      	ldr	r2, [r7, #12]
 80107f4:	015b      	lsls	r3, r3, #5
 80107f6:	4413      	add	r3, r2
 80107f8:	687a      	ldr	r2, [r7, #4]
 80107fa:	1d1c      	adds	r4, r3, #4
 80107fc:	4615      	mov	r5, r2
 80107fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010802:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010806:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010810:	7afa      	ldrb	r2, [r7, #11]
 8010812:	68f9      	ldr	r1, [r7, #12]
 8010814:	015b      	lsls	r3, r3, #5
 8010816:	440b      	add	r3, r1
 8010818:	3318      	adds	r3, #24
 801081a:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010822:	1c5a      	adds	r2, r3, #1
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    builtin_codes_[num_buitin_ops_] = op;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010830:	68fa      	ldr	r2, [r7, #12]
 8010832:	4413      	add	r3, r2
 8010834:	7afa      	ldrb	r2, [r7, #11]
 8010836:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    builtin_parsers_[num_buitin_ops_] = parser;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	322c      	adds	r2, #44	; 0x2c
 8010844:	6839      	ldr	r1, [r7, #0]
 8010846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    num_buitin_ops_++;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010850:	1c5a      	adds	r2, r3, #1
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

    return kTfLiteOk;
 8010858:	2300      	movs	r3, #0
  }
 801085a:	4618      	mov	r0, r3
 801085c:	3710      	adds	r7, #16
 801085e:	46bd      	mov	sp, r7
 8010860:	bdb0      	pop	{r4, r5, r7, pc}
 8010862:	bf00      	nop
 8010864:	0802a5a4 	.word	0x0802a5a4
 8010868:	0802a5ec 	.word	0x0802a5ec
 801086c:	0802a63c 	.word	0x0802a63c

08010870 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8010870:	b480      	push	{r7}
 8010872:	b085      	sub	sp, #20
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	460b      	mov	r3, r1
 801087a:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 801087c:	78fb      	ldrb	r3, [r7, #3]
 801087e:	2b20      	cmp	r3, #32
 8010880:	d101      	bne.n	8010886 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x16>
 8010882:	2300      	movs	r3, #0
 8010884:	e019      	b.n	80108ba <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8010886:	2300      	movs	r3, #0
 8010888:	60fb      	str	r3, [r7, #12]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010890:	68fa      	ldr	r2, [r7, #12]
 8010892:	429a      	cmp	r2, r3
 8010894:	d210      	bcs.n	80108b8 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x48>
      const TfLiteRegistration& registration = registrations_[i];
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	015b      	lsls	r3, r3, #5
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	4413      	add	r3, r2
 801089e:	3304      	adds	r3, #4
 80108a0:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	695a      	ldr	r2, [r3, #20]
 80108a6:	78fb      	ldrb	r3, [r7, #3]
 80108a8:	429a      	cmp	r2, r3
 80108aa:	d101      	bne.n	80108b0 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x40>
        return &registration;
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	e004      	b.n	80108ba <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	3301      	adds	r3, #1
 80108b4:	60fb      	str	r3, [r7, #12]
 80108b6:	e7e8      	b.n	801088a <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 80108b8:	2300      	movs	r3, #0
  }
 80108ba:	4618      	mov	r0, r3
 80108bc:	3714      	adds	r7, #20
 80108be:	46bd      	mov	sp, r7
 80108c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c4:	4770      	bx	lr
	...

080108c8 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	4a05      	ldr	r2, [pc, #20]	; (80108e8 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev+0x20>)
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	601a      	str	r2, [r3, #0]
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	4618      	mov	r0, r3
 80108da:	f7fb f8cd 	bl	800ba78 <_ZN6tflite15MicroOpResolverD1Ev>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	4618      	mov	r0, r3
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	0802c1cc 	.word	0x0802c1cc

080108ec <_ZN6tflite22MicroMutableOpResolverILj5EED0Ev>:
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f7ff ffe7 	bl	80108c8 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>
 80108fa:	21cc      	movs	r1, #204	; 0xcc
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f014 f858 	bl	80249b2 <_ZdlPvj>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	4618      	mov	r0, r3
 8010906:	3708      	adds	r7, #8
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}

0801090c <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 801090c:	b580      	push	{r7, lr}
 801090e:	b084      	sub	sp, #16
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8010916:	2300      	movs	r3, #0
 8010918:	60fb      	str	r3, [r7, #12]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010920:	68fa      	ldr	r2, [r7, #12]
 8010922:	429a      	cmp	r2, r3
 8010924:	d218      	bcs.n	8010958 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x4c>
      const TfLiteRegistration& registration = registrations_[i];
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	015b      	lsls	r3, r3, #5
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	4413      	add	r3, r2
 801092e:	3304      	adds	r3, #4
 8010930:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	695b      	ldr	r3, [r3, #20]
 8010936:	2b20      	cmp	r3, #32
 8010938:	d10a      	bne.n	8010950 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x44>
          (strcmp(registration.custom_name, op) == 0)) {
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	699b      	ldr	r3, [r3, #24]
 801093e:	6839      	ldr	r1, [r7, #0]
 8010940:	4618      	mov	r0, r3
 8010942:	f7ef fcbd 	bl	80002c0 <strcmp>
 8010946:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8010948:	2b00      	cmp	r3, #0
 801094a:	d101      	bne.n	8010950 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x44>
        return &registration;
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	e004      	b.n	801095a <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	3301      	adds	r3, #1
 8010954:	60fb      	str	r3, [r7, #12]
 8010956:	e7e0      	b.n	801091a <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0xe>
    return nullptr;
 8010958:	2300      	movs	r3, #0
  }
 801095a:	4618      	mov	r0, r3
 801095c:	3710      	adds	r7, #16
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}

08010962 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8010962:	b580      	push	{r7, lr}
 8010964:	b084      	sub	sp, #16
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
 801096a:	460b      	mov	r3, r1
 801096c:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010974:	2b05      	cmp	r3, #5
 8010976:	d901      	bls.n	801097c <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x1a>
 8010978:	f014 faa1 	bl	8024ebe <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 801097c:	2300      	movs	r3, #0
 801097e:	60fb      	str	r3, [r7, #12]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010986:	68fa      	ldr	r2, [r7, #12]
 8010988:	429a      	cmp	r2, r3
 801098a:	d211      	bcs.n	80109b0 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x4e>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 801098c:	687a      	ldr	r2, [r7, #4]
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	4413      	add	r3, r2
 8010992:	33a8      	adds	r3, #168	; 0xa8
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	78fa      	ldrb	r2, [r7, #3]
 8010998:	429a      	cmp	r2, r3
 801099a:	d105      	bne.n	80109a8 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x46>
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	68fa      	ldr	r2, [r7, #12]
 80109a0:	322c      	adds	r2, #44	; 0x2c
 80109a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109a6:	e004      	b.n	80109b2 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x50>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	3301      	adds	r3, #1
 80109ac:	60fb      	str	r3, [r7, #12]
 80109ae:	e7e7      	b.n	8010980 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x1e>
    return nullptr;
 80109b0:	2300      	movs	r3, #0
  }
 80109b2:	4618      	mov	r0, r3
 80109b4:	3710      	adds	r7, #16
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd80      	pop	{r7, pc}

080109ba <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 80109ba:	b480      	push	{r7}
 80109bc:	af00      	add	r7, sp, #0
 80109be:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80109c2:	ee07 3a90 	vmov	s15, r3
 80109c6:	eeb0 0a67 	vmov.f32	s0, s15
 80109ca:	46bd      	mov	sp, r7
 80109cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d0:	4770      	bx	lr
	...

080109d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 80109d4:	b5b0      	push	{r4, r5, r7, lr}
 80109d6:	b08c      	sub	sp, #48	; 0x30
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 80109de:	687a      	ldr	r2, [r7, #4]
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d107      	bne.n	80109f6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 80109e6:	f7fa fa88 	bl	800aefa <_ZNSt14numeric_limitsIlE3minEv>
 80109ea:	4602      	mov	r2, r0
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	4293      	cmp	r3, r2
 80109f0:	d101      	bne.n	80109f6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 80109f2:	2301      	movs	r3, #1
 80109f4:	e000      	b.n	80109f8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 80109f6:	2300      	movs	r3, #0
 80109f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	461a      	mov	r2, r3
 8010a00:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8010a04:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8010a10:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 8010a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a16:	69ba      	ldr	r2, [r7, #24]
 8010a18:	fb02 f203 	mul.w	r2, r2, r3
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	6a39      	ldr	r1, [r7, #32]
 8010a20:	fb01 f303 	mul.w	r3, r1, r3
 8010a24:	18d1      	adds	r1, r2, r3
 8010a26:	6a3a      	ldr	r2, [r7, #32]
 8010a28:	69bb      	ldr	r3, [r7, #24]
 8010a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8010a2e:	4419      	add	r1, r3
 8010a30:	460b      	mov	r3, r1
 8010a32:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8010a36:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8010a3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010a3e:	2a00      	cmp	r2, #0
 8010a40:	f173 0300 	sbcs.w	r3, r3, #0
 8010a44:	db02      	blt.n	8010a4c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 8010a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010a4a:	e000      	b.n	8010a4e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 8010a4c:	4b18      	ldr	r3, [pc, #96]	; (8010ab0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 8010a4e:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	4618      	mov	r0, r3
 8010a54:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8010a58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010a5c:	1884      	adds	r4, r0, r2
 8010a5e:	eb41 0503 	adc.w	r5, r1, r3
 8010a62:	4622      	mov	r2, r4
 8010a64:	462b      	mov	r3, r5
 8010a66:	2a00      	cmp	r2, #0
 8010a68:	f173 0100 	sbcs.w	r1, r3, #0
 8010a6c:	da06      	bge.n	8010a7c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 8010a6e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010a72:	f04f 0100 	mov.w	r1, #0
 8010a76:	1812      	adds	r2, r2, r0
 8010a78:	eb41 0303 	adc.w	r3, r1, r3
 8010a7c:	f04f 0000 	mov.w	r0, #0
 8010a80:	f04f 0100 	mov.w	r1, #0
 8010a84:	0fd0      	lsrs	r0, r2, #31
 8010a86:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010a8a:	17d9      	asrs	r1, r3, #31
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8010a90:	4613      	mov	r3, r2
 8010a92:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8010a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d003      	beq.n	8010aa4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 8010a9c:	f7fa f823 	bl	800aae6 <_ZNSt14numeric_limitsIlE3maxEv>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	e000      	b.n	8010aa6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 8010aa4:	68bb      	ldr	r3, [r7, #8]
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3730      	adds	r7, #48	; 0x30
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bdb0      	pop	{r4, r5, r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	c0000001 	.word	0xc0000001

08010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	da01      	bge.n	8010ac8 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8010ac4:	f014 f9fb 	bl	8024ebe <abort>
    TFLITE_DCHECK_LT(i, size_);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	683a      	ldr	r2, [r7, #0]
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	db01      	blt.n	8010ad6 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8010ad2:	f014 f9f4 	bl	8024ebe <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	2b05      	cmp	r3, #5
 8010adc:	dd06      	ble.n	8010aec <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	685a      	ldr	r2, [r3, #4]
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	009b      	lsls	r3, r3, #2
 8010ae6:	4413      	add	r3, r2
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	e004      	b.n	8010af6 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8010aec:	687a      	ldr	r2, [r7, #4]
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	009b      	lsls	r3, r3, #2
 8010af2:	4413      	add	r3, r2
 8010af4:	685b      	ldr	r3, [r3, #4]
  }
 8010af6:	4618      	mov	r0, r3
 8010af8:	3708      	adds	r7, #8
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}

08010afe <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 8010afe:	b480      	push	{r7}
 8010b00:	b083      	sub	sp, #12
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	2b05      	cmp	r3, #5
 8010b0c:	dd02      	ble.n	8010b14 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	685b      	ldr	r3, [r3, #4]
 8010b12:	e001      	b.n	8010b18 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	3304      	adds	r3, #4
  }
 8010b18:	4618      	mov	r0, r3
 8010b1a:	370c      	adds	r7, #12
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr

08010b24 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b086      	sub	sp, #24
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f7ff ffe4 	bl	8010afe <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8010b36:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8010b38:	2300      	movs	r3, #0
 8010b3a:	613b      	str	r3, [r7, #16]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	693a      	ldr	r2, [r7, #16]
 8010b42:	429a      	cmp	r2, r3
 8010b44:	da0c      	bge.n	8010b60 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	68fa      	ldr	r2, [r7, #12]
 8010b4c:	4413      	add	r3, r2
 8010b4e:	681a      	ldr	r2, [r3, #0]
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	fb02 f303 	mul.w	r3, r2, r3
 8010b56:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8010b58:	693b      	ldr	r3, [r7, #16]
 8010b5a:	3301      	adds	r3, #1
 8010b5c:	613b      	str	r3, [r7, #16]
 8010b5e:	e7ed      	b.n	8010b3c <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8010b60:	697b      	ldr	r3, [r7, #20]
  }
 8010b62:	4618      	mov	r0, r3
 8010b64:	3718      	adds	r7, #24
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}

08010b6a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 8010b6a:	b590      	push	{r4, r7, lr}
 8010b6c:	b085      	sub	sp, #20
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	6078      	str	r0, [r7, #4]
 8010b72:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f7fb f85e 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	6838      	ldr	r0, [r7, #0]
 8010b7e:	f7fb f85a 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010b82:	4603      	mov	r3, r0
 8010b84:	429c      	cmp	r4, r3
 8010b86:	d001      	beq.n	8010b8c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 8010b88:	f014 f999 	bl	8024ebe <abort>
  const int dims_count = shape.DimensionsCount();
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f7fb f852 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010b92:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 8010b94:	2300      	movs	r3, #0
 8010b96:	60fb      	str	r3, [r7, #12]
 8010b98:	68fa      	ldr	r2, [r7, #12]
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	da11      	bge.n	8010bc4 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8010ba0:	68f9      	ldr	r1, [r7, #12]
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f7ff ff86 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010ba8:	4604      	mov	r4, r0
 8010baa:	68f9      	ldr	r1, [r7, #12]
 8010bac:	6838      	ldr	r0, [r7, #0]
 8010bae:	f7ff ff81 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	429c      	cmp	r4, r3
 8010bb6:	d001      	beq.n	8010bbc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 8010bb8:	f014 f981 	bl	8024ebe <abort>
  for (int i = 0; i < dims_count; ++i) {
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	60fb      	str	r3, [r7, #12]
 8010bc2:	e7e9      	b.n	8010b98 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f7ff ffad 	bl	8010b24 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8010bca:	4603      	mov	r3, r0
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3714      	adds	r7, #20
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd90      	pop	{r4, r7, pc}

08010bd4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b086      	sub	sp, #24
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010be6:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	dc02      	bgt.n	8010bf4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	425b      	negs	r3, r3
 8010bf2:	e000      	b.n	8010bf6 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8010bf8:	68fa      	ldr	r2, [r7, #12]
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8010c00:	68b9      	ldr	r1, [r7, #8]
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7ff fee6 	bl	80109d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	6939      	ldr	r1, [r7, #16]
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f000 fb4b 	bl	80112a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8010c12:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	3718      	adds	r7, #24
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b084      	sub	sp, #16
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	60b9      	str	r1, [r7, #8]
 8010c26:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d101      	bne.n	8010c32 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8010c2e:	f014 f946 	bl	8024ebe <abort>
  TFLITE_DCHECK(node != nullptr);
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d101      	bne.n	8010c3c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8010c38:	f014 f941 	bl	8024ebe <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	6819      	ldr	r1, [r3, #0]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	009b      	lsls	r3, r3, #2
 8010c48:	440b      	add	r3, r1
 8010c4a:	685b      	ldr	r3, [r3, #4]
 8010c4c:	4619      	mov	r1, r3
 8010c4e:	68f8      	ldr	r0, [r7, #12]
 8010c50:	4790      	blx	r2
 8010c52:	4603      	mov	r3, r0
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3710      	adds	r7, #16
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	60f8      	str	r0, [r7, #12]
 8010c64:	60b9      	str	r1, [r7, #8]
 8010c66:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8010c68:	687a      	ldr	r2, [r7, #4]
 8010c6a:	68b9      	ldr	r1, [r7, #8]
 8010c6c:	68f8      	ldr	r0, [r7, #12]
 8010c6e:	f7ff ffd5 	bl	8010c1c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8010c72:	4603      	mov	r3, r0
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	3710      	adds	r7, #16
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}

08010c7c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b084      	sub	sp, #16
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	60f8      	str	r0, [r7, #12]
 8010c84:	60b9      	str	r1, [r7, #8]
 8010c86:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d101      	bne.n	8010c92 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8010c8e:	f014 f916 	bl	8024ebe <abort>
  TFLITE_DCHECK(node != nullptr);
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d101      	bne.n	8010c9c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8010c98:	f014 f911 	bl	8024ebe <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	6859      	ldr	r1, [r3, #4]
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	009b      	lsls	r3, r3, #2
 8010ca8:	440b      	add	r3, r1
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	4619      	mov	r1, r3
 8010cae:	68f8      	ldr	r0, [r7, #12]
 8010cb0:	4790      	blx	r2
 8010cb2:	4603      	mov	r3, r0
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3710      	adds	r7, #16
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}

08010cbc <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b08a      	sub	sp, #40	; 0x28
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	60f8      	str	r0, [r7, #12]
 8010cc4:	60b9      	str	r1, [r7, #8]
 8010cc6:	607a      	str	r2, [r7, #4]
 8010cc8:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8010cca:	6879      	ldr	r1, [r7, #4]
 8010ccc:	68f8      	ldr	r0, [r7, #12]
 8010cce:	f7ff ff4c 	bl	8010b6a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8010cd2:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8010cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cda:	6a3b      	ldr	r3, [r7, #32]
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	da1d      	bge.n	8010d1c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 8010ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce2:	009b      	lsls	r3, r3, #2
 8010ce4:	68ba      	ldr	r2, [r7, #8]
 8010ce6:	4413      	add	r3, r2
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 8010cec:	f04f 0300 	mov.w	r3, #0
 8010cf0:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 8010cf2:	edd7 7a07 	vldr	s15, [r7, #28]
 8010cf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfe:	d501      	bpl.n	8010d04 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 8010d00:	69bb      	ldr	r3, [r7, #24]
 8010d02:	e000      	b.n	8010d06 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 8010d04:	69fb      	ldr	r3, [r7, #28]
 8010d06:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 8010d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d0a:	009b      	lsls	r3, r3, #2
 8010d0c:	683a      	ldr	r2, [r7, #0]
 8010d0e:	4413      	add	r3, r2
 8010d10:	697a      	ldr	r2, [r7, #20]
 8010d12:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8010d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d16:	3301      	adds	r3, #1
 8010d18:	627b      	str	r3, [r7, #36]	; 0x24
 8010d1a:	e7dd      	b.n	8010cd8 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8010d1c:	bf00      	nop
 8010d1e:	3728      	adds	r7, #40	; 0x28
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b08a      	sub	sp, #40	; 0x28
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	60f8      	str	r0, [r7, #12]
 8010d2c:	60b9      	str	r1, [r7, #8]
 8010d2e:	607a      	str	r2, [r7, #4]
 8010d30:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8010d32:	6879      	ldr	r1, [r7, #4]
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f7ff ff18 	bl	8010b6a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8010d3a:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8010d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d42:	6a3b      	ldr	r3, [r7, #32]
 8010d44:	429a      	cmp	r2, r3
 8010d46:	da2a      	bge.n	8010d9e <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 8010d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d4a:	009b      	lsls	r3, r3, #2
 8010d4c:	68ba      	ldr	r2, [r7, #8]
 8010d4e:	4413      	add	r3, r2
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 8010d54:	4b14      	ldr	r3, [pc, #80]	; (8010da8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 8010d56:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 8010d58:	f04f 0300 	mov.w	r3, #0
 8010d5c:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 8010d5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8010d62:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8010d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d6e:	dd01      	ble.n	8010d74 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 8010d70:	69bb      	ldr	r3, [r7, #24]
 8010d72:	e009      	b.n	8010d88 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8010d74:	edd7 7a07 	vldr	s15, [r7, #28]
 8010d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d80:	d501      	bpl.n	8010d86 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	e000      	b.n	8010d88 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8010d86:	69fb      	ldr	r3, [r7, #28]
 8010d88:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8c:	009b      	lsls	r3, r3, #2
 8010d8e:	683a      	ldr	r2, [r7, #0]
 8010d90:	4413      	add	r3, r2
 8010d92:	693a      	ldr	r2, [r7, #16]
 8010d94:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8010d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d98:	3301      	adds	r3, #1
 8010d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8010d9c:	e7d0      	b.n	8010d40 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8010d9e:	bf00      	nop
 8010da0:	3728      	adds	r7, #40	; 0x28
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	40c00000 	.word	0x40c00000

08010dac <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	60f8      	str	r0, [r7, #12]
 8010db4:	60b9      	str	r1, [r7, #8]
 8010db6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d101      	bne.n	8010dc4 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 8010dc0:	f014 f87d 	bl	8024ebe <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dc8:	211c      	movs	r1, #28
 8010dca:	68f8      	ldr	r0, [r7, #12]
 8010dcc:	4798      	blx	r3
 8010dce:	4603      	mov	r3, r0
}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3710      	adds	r7, #16
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}

08010dd8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 8010dd8:	b590      	push	{r4, r7, lr}
 8010dda:	b089      	sub	sp, #36	; 0x24
 8010ddc:	af02      	add	r7, sp, #8
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	691b      	ldr	r3, [r3, #16]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d101      	bne.n	8010dee <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8010dea:	f014 f868 	bl	8024ebe <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	691b      	ldr	r3, [r3, #16]
 8010df2:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8010df4:	2200      	movs	r2, #0
 8010df6:	6839      	ldr	r1, [r7, #0]
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f7fa f95b 	bl	800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010dfe:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d10a      	bne.n	8010e1c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	695c      	ldr	r4, [r3, #20]
 8010e0a:	4b1a      	ldr	r3, [pc, #104]	; (8010e74 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 8010e0c:	9300      	str	r3, [sp, #0]
 8010e0e:	238e      	movs	r3, #142	; 0x8e
 8010e10:	4a19      	ldr	r2, [pc, #100]	; (8010e78 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 8010e12:	491a      	ldr	r1, [pc, #104]	; (8010e7c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	47a0      	blx	r4
 8010e18:	2301      	movs	r3, #1
 8010e1a:	e027      	b.n	8010e6c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	6839      	ldr	r1, [r7, #0]
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f7fa f957 	bl	800b0d4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8010e26:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d10a      	bne.n	8010e44 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	695c      	ldr	r4, [r3, #20]
 8010e32:	4b13      	ldr	r3, [pc, #76]	; (8010e80 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 8010e34:	9300      	str	r3, [sp, #0]
 8010e36:	2390      	movs	r3, #144	; 0x90
 8010e38:	4a0f      	ldr	r2, [pc, #60]	; (8010e78 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 8010e3a:	4910      	ldr	r1, [pc, #64]	; (8010e7c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	47a0      	blx	r4
 8010e40:	2301      	movs	r3, #1
 8010e42:	e013      	b.n	8010e6c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 8010e44:	693b      	ldr	r3, [r7, #16]
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	2b09      	cmp	r3, #9
 8010e4a:	d105      	bne.n	8010e58 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 8010e4c:	697a      	ldr	r2, [r7, #20]
 8010e4e:	68f9      	ldr	r1, [r7, #12]
 8010e50:	6938      	ldr	r0, [r7, #16]
 8010e52:	f000 fa9d 	bl	8011390 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 8010e56:	e008      	b.n	8010e6a <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	2b03      	cmp	r3, #3
 8010e5e:	d104      	bne.n	8010e6a <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 8010e60:	697a      	ldr	r2, [r7, #20]
 8010e62:	68f9      	ldr	r1, [r7, #12]
 8010e64:	6938      	ldr	r0, [r7, #16]
 8010e66:	f000 fb35 	bl	80114d4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 8010e6a:	2300      	movs	r3, #0
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	371c      	adds	r7, #28
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd90      	pop	{r4, r7, pc}
 8010e74:	0802a6d8 	.word	0x0802a6d8
 8010e78:	0802a680 	.word	0x0802a680
 8010e7c:	0802a6c0 	.word	0x0802a6c0
 8010e80:	0802a6ec 	.word	0x0802a6ec

08010e84 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 8010e84:	b590      	push	{r4, r7, lr}
 8010e86:	b0ad      	sub	sp, #180	; 0xb4
 8010e88:	af02      	add	r7, sp, #8
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	691b      	ldr	r3, [r3, #16]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d101      	bne.n	8010e9a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8010e96:	f014 f812 	bl	8024ebe <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	691b      	ldr	r3, [r3, #16]
 8010e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	6839      	ldr	r1, [r7, #0]
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f7ff fed8 	bl	8010c5c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8010eac:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	6839      	ldr	r1, [r7, #0]
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f7ff fee1 	bl	8010c7c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8010eba:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 8010ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010ec2:	7a1b      	ldrb	r3, [r3, #8]
 8010ec4:	2b09      	cmp	r3, #9
 8010ec6:	d032      	beq.n	8010f2e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8010ec8:	2b09      	cmp	r3, #9
 8010eca:	f300 808c 	bgt.w	8010fe6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 8010ece:	2b01      	cmp	r3, #1
 8010ed0:	d002      	beq.n	8010ed8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 8010ed2:	2b03      	cmp	r3, #3
 8010ed4:	d059      	beq.n	8010f8a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 8010ed6:	e086      	b.n	8010fe6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 8010ed8:	f107 030c 	add.w	r3, r7, #12
 8010edc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f001 fb66 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8010ee6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8010eea:	f000 fb95 	bl	8011618 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8010eee:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 8010ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010ef4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f001 fb5a 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 8010efe:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8010f02:	f000 fb98 	bl	8011636 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8010f06:	4603      	mov	r3, r0
 8010f08:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010f0c:	f107 000c 	add.w	r0, r7, #12
 8010f10:	4621      	mov	r1, r4
 8010f12:	f7ff fed3 	bl	8010cbc <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 8010f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fa fe75 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 8010f20:	f107 030c 	add.w	r3, r7, #12
 8010f24:	4618      	mov	r0, r3
 8010f26:	f7fa fe70 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	e069      	b.n	8011002 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8010f2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010f32:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8010f36:	4618      	mov	r0, r3
 8010f38:	f001 fb3b 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 8010f3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010f40:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8010f44:	4618      	mov	r0, r3
 8010f46:	f001 fb34 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8010f4a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8010f4e:	f000 fb83 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8010f52:	4604      	mov	r4, r0
 8010f54:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8010f58:	f000 fb8d 	bl	8011676 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8010f62:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8010f66:	9300      	str	r3, [sp, #0]
 8010f68:	4623      	mov	r3, r4
 8010f6a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8010f6e:	f000 fb93 	bl	8011698 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 8010f72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7fa fe47 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8010f7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010f80:	4618      	mov	r0, r3
 8010f82:	f7fa fe42 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8010f86:	2300      	movs	r3, #0
 8010f88:	e03b      	b.n	8011002 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8010f8a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010f8e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8010f92:	4618      	mov	r0, r3
 8010f94:	f001 fb0d 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 8010f98:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010f9c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f001 fb06 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8010fa6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8010faa:	f000 fbc1 	bl	8011730 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8010fae:	4604      	mov	r4, r0
 8010fb0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8010fb4:	f000 fbcb 	bl	801174e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8010fbe:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8010fc2:	9300      	str	r3, [sp, #0]
 8010fc4:	4623      	mov	r3, r4
 8010fc6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8010fca:	f000 fbd1 	bl	8011770 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 8010fce:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7fa fe19 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8010fd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7fa fe14 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	e00d      	b.n	8011002 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	695c      	ldr	r4, [r3, #20]
 8010fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010fee:	7a1b      	ldrb	r3, [r3, #8]
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f7f7 f9fd 	bl	80083f0 <TfLiteTypeGetName>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	4904      	ldr	r1, [pc, #16]	; (801100c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8011000:	2301      	movs	r3, #1
    }
  }
}
 8011002:	4618      	mov	r0, r3
 8011004:	37ac      	adds	r7, #172	; 0xac
 8011006:	46bd      	mov	sp, r7
 8011008:	bd90      	pop	{r4, r7, pc}
 801100a:	bf00      	nop
 801100c:	0802a700 	.word	0x0802a700

08011010 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 8011010:	b580      	push	{r7, lr}
 8011012:	b084      	sub	sp, #16
 8011014:	af00      	add	r7, sp, #0
 8011016:	60f8      	str	r0, [r7, #12]
 8011018:	60b9      	str	r1, [r7, #8]
 801101a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011020:	2b00      	cmp	r3, #0
 8011022:	d101      	bne.n	8011028 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 8011024:	f013 ff4b 	bl	8024ebe <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801102c:	2104      	movs	r1, #4
 801102e:	68f8      	ldr	r0, [r7, #12]
 8011030:	4798      	blx	r3
 8011032:	4603      	mov	r3, r0
}
 8011034:	4618      	mov	r0, r3
 8011036:	3710      	adds	r7, #16
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}

0801103c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 801103c:	b590      	push	{r4, r7, lr}
 801103e:	b087      	sub	sp, #28
 8011040:	af02      	add	r7, sp, #8
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	691b      	ldr	r3, [r3, #16]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d101      	bne.n	8011052 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801104e:	f013 ff36 	bl	8024ebe <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	691b      	ldr	r3, [r3, #16]
 8011056:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8011058:	2200      	movs	r2, #0
 801105a:	6839      	ldr	r1, [r7, #0]
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f7fa f829 	bl	800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8011062:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d10a      	bne.n	8011080 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	695c      	ldr	r4, [r3, #20]
 801106e:	4b20      	ldr	r3, [pc, #128]	; (80110f0 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 8011070:	9300      	str	r3, [sp, #0]
 8011072:	23cd      	movs	r3, #205	; 0xcd
 8011074:	4a1f      	ldr	r2, [pc, #124]	; (80110f4 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 8011076:	4920      	ldr	r1, [pc, #128]	; (80110f8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	47a0      	blx	r4
 801107c:	2301      	movs	r3, #1
 801107e:	e033      	b.n	80110e8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	2b09      	cmp	r3, #9
 8011086:	d115      	bne.n	80110b4 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8011092:	4618      	mov	r0, r3
 8011094:	eef0 0a67 	vmov.f32	s1, s15
 8011098:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801109c:	f000 fbb3 	bl	8011806 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 80110a0:	4603      	mov	r3, r0
 80110a2:	461a      	mov	r2, r3
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	691b      	ldr	r3, [r3, #16]
 80110ac:	b25a      	sxtb	r2, r3
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	705a      	strb	r2, [r3, #1]
 80110b2:	e018      	b.n	80110e6 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	2b03      	cmp	r3, #3
 80110ba:	d114      	bne.n	80110e6 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 80110c6:	4618      	mov	r0, r3
 80110c8:	eef0 0a67 	vmov.f32	s1, s15
 80110cc:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80110d0:	f000 fbe8 	bl	80118a4 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 80110d4:	4603      	mov	r3, r0
 80110d6:	461a      	mov	r2, r3
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	691b      	ldr	r3, [r3, #16]
 80110e0:	b2da      	uxtb	r2, r3
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 80110e6:	2300      	movs	r3, #0
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3714      	adds	r7, #20
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd90      	pop	{r4, r7, pc}
 80110f0:	0802a6d8 	.word	0x0802a6d8
 80110f4:	0802a680 	.word	0x0802a680
 80110f8:	0802a6c0 	.word	0x0802a6c0

080110fc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 80110fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110fe:	b0ad      	sub	sp, #180	; 0xb4
 8011100:	af02      	add	r7, sp, #8
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	691b      	ldr	r3, [r3, #16]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d101      	bne.n	8011112 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 801110e:	f013 fed6 	bl	8024ebe <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	691b      	ldr	r3, [r3, #16]
 8011116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801111a:	2200      	movs	r2, #0
 801111c:	6839      	ldr	r1, [r7, #0]
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f7ff fd9c 	bl	8010c5c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8011124:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8011128:	2200      	movs	r2, #0
 801112a:	6839      	ldr	r1, [r7, #0]
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f7ff fda5 	bl	8010c7c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8011132:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 8011136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801113a:	7a1b      	ldrb	r3, [r3, #8]
 801113c:	2b09      	cmp	r3, #9
 801113e:	d032      	beq.n	80111a6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8011140:	2b09      	cmp	r3, #9
 8011142:	f300 809c 	bgt.w	801127e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 8011146:	2b01      	cmp	r3, #1
 8011148:	d002      	beq.n	8011150 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 801114a:	2b03      	cmp	r3, #3
 801114c:	d062      	beq.n	8011214 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 801114e:	e096      	b.n	801127e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 8011150:	f107 030c 	add.w	r3, r7, #12
 8011154:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8011158:	4618      	mov	r0, r3
 801115a:	f001 fa2a 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801115e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8011162:	f000 fa59 	bl	8011618 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8011166:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 8011168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801116c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011170:	4618      	mov	r0, r3
 8011172:	f001 fa1e 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 8011176:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801117a:	f000 fa5c 	bl	8011636 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801117e:	4603      	mov	r3, r0
 8011180:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011184:	f107 000c 	add.w	r0, r7, #12
 8011188:	4621      	mov	r1, r4
 801118a:	f7ff fdcb 	bl	8010d24 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 801118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011192:	4618      	mov	r0, r3
 8011194:	f7fa fd39 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 8011198:	f107 030c 	add.w	r3, r7, #12
 801119c:	4618      	mov	r0, r3
 801119e:	f7fa fd34 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 80111a2:	2300      	movs	r3, #0
 80111a4:	e079      	b.n	801129a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 80111a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80111aa:	f993 4001 	ldrsb.w	r4, [r3, #1]
 80111ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80111b2:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 80111b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80111ba:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80111be:	4618      	mov	r0, r3
 80111c0:	f001 f9f7 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 80111c4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80111c8:	f000 fa46 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80111cc:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 80111ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80111d2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80111d6:	4618      	mov	r0, r3
 80111d8:	f001 f9eb 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 80111dc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80111e0:	f000 fa49 	bl	8011676 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80111e4:	4603      	mov	r3, r0
 80111e6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80111ea:	9301      	str	r3, [sp, #4]
 80111ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80111f0:	9300      	str	r3, [sp, #0]
 80111f2:	4633      	mov	r3, r6
 80111f4:	4629      	mov	r1, r5
 80111f6:	4620      	mov	r0, r4
 80111f8:	f000 fba3 	bl	8011942 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 80111fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011200:	4618      	mov	r0, r3
 8011202:	f7fa fd02 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 8011206:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801120a:	4618      	mov	r0, r3
 801120c:	f7fa fcfd 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8011210:	2300      	movs	r3, #0
 8011212:	e042      	b.n	801129a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8011214:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011218:	78dc      	ldrb	r4, [r3, #3]
 801121a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801121e:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 8011220:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011224:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8011228:	4618      	mov	r0, r3
 801122a:	f001 f9c2 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801122e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8011232:	f000 fa7d 	bl	8011730 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8011236:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 8011238:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801123c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011240:	4618      	mov	r0, r3
 8011242:	f001 f9b6 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8011246:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801124a:	f000 fa80 	bl	801174e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801124e:	4603      	mov	r3, r0
 8011250:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8011254:	9301      	str	r3, [sp, #4]
 8011256:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801125a:	9300      	str	r3, [sp, #0]
 801125c:	4633      	mov	r3, r6
 801125e:	4629      	mov	r1, r5
 8011260:	4620      	mov	r0, r4
 8011262:	f000 fbad 	bl	80119c0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 8011266:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801126a:	4618      	mov	r0, r3
 801126c:	f7fa fccd 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 8011270:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011274:	4618      	mov	r0, r3
 8011276:	f7fa fcc8 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801127a:	2300      	movs	r3, #0
 801127c:	e00d      	b.n	801129a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	695c      	ldr	r4, [r3, #20]
 8011282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011286:	7a1b      	ldrb	r3, [r3, #8]
 8011288:	4618      	mov	r0, r3
 801128a:	f7f7 f8b1 	bl	80083f0 <TfLiteTypeGetName>
 801128e:	4603      	mov	r3, r0
 8011290:	461a      	mov	r2, r3
 8011292:	4904      	ldr	r1, [pc, #16]	; (80112a4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8011298:	2301      	movs	r3, #1
    }
  }
}
 801129a:	4618      	mov	r0, r3
 801129c:	37ac      	adds	r7, #172	; 0xac
 801129e:	46bd      	mov	sp, r7
 80112a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112a2:	bf00      	nop
 80112a4:	0802a700 	.word	0x0802a700

080112a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 80112a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112aa:	b089      	sub	sp, #36	; 0x24
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 80112b2:	6839      	ldr	r1, [r7, #0]
 80112b4:	2900      	cmp	r1, #0
 80112b6:	da06      	bge.n	80112c6 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 80112b8:	4b31      	ldr	r3, [pc, #196]	; (8011380 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 80112ba:	4a32      	ldr	r2, [pc, #200]	; (8011384 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 80112bc:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80112c0:	4831      	ldr	r0, [pc, #196]	; (8011388 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 80112c2:	f013 fe03 	bl	8024ecc <__assert_func>
  assert(exponent <= 31);
 80112c6:	6839      	ldr	r1, [r7, #0]
 80112c8:	291f      	cmp	r1, #31
 80112ca:	dd06      	ble.n	80112da <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 80112cc:	4b2f      	ldr	r3, [pc, #188]	; (801138c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 80112ce:	4a2d      	ldr	r2, [pc, #180]	; (8011384 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 80112d0:	f240 1167 	movw	r1, #359	; 0x167
 80112d4:	482c      	ldr	r0, [pc, #176]	; (8011388 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 80112d6:	f013 fdf9 	bl	8024ecc <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 80112da:	f04f 0001 	mov.w	r0, #1
 80112de:	f04f 0100 	mov.w	r1, #0
 80112e2:	683c      	ldr	r4, [r7, #0]
 80112e4:	f1a4 0620 	sub.w	r6, r4, #32
 80112e8:	f1c4 0520 	rsb	r5, r4, #32
 80112ec:	fa01 f304 	lsl.w	r3, r1, r4
 80112f0:	fa00 f606 	lsl.w	r6, r0, r6
 80112f4:	4333      	orrs	r3, r6
 80112f6:	fa20 f505 	lsr.w	r5, r0, r5
 80112fa:	432b      	orrs	r3, r5
 80112fc:	fa00 f204 	lsl.w	r2, r0, r4
 8011300:	4613      	mov	r3, r2
 8011302:	3b01      	subs	r3, #1
 8011304:	4618      	mov	r0, r3
 8011306:	f000 fb93 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801130a:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 801130c:	2000      	movs	r0, #0
 801130e:	f000 fb8f 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011312:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8011314:	2001      	movs	r0, #1
 8011316:	f000 fb8b 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801131a:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 801131c:	69f9      	ldr	r1, [r7, #28]
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f000 fb91 	bl	8011a46 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011324:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8011326:	2101      	movs	r1, #1
 8011328:	69f8      	ldr	r0, [r7, #28]
 801132a:	f000 fb9a 	bl	8011a62 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801132e:	4604      	mov	r4, r0
 8011330:	69b9      	ldr	r1, [r7, #24]
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f000 fba4 	bl	8011a80 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8011338:	4603      	mov	r3, r0
 801133a:	6979      	ldr	r1, [r7, #20]
 801133c:	4618      	mov	r0, r3
 801133e:	f000 fb82 	bl	8011a46 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011342:	4603      	mov	r3, r0
 8011344:	4619      	mov	r1, r3
 8011346:	4620      	mov	r0, r4
 8011348:	f000 fbae 	bl	8011aa8 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801134c:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 801134e:	6839      	ldr	r1, [r7, #0]
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f000 fb86 	bl	8011a62 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8011356:	4604      	mov	r4, r0
 8011358:	68f9      	ldr	r1, [r7, #12]
 801135a:	6938      	ldr	r0, [r7, #16]
 801135c:	f000 fbb2 	bl	8011ac4 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8011360:	4603      	mov	r3, r0
 8011362:	6979      	ldr	r1, [r7, #20]
 8011364:	4618      	mov	r0, r3
 8011366:	f000 fb6e 	bl	8011a46 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801136a:	4603      	mov	r3, r0
 801136c:	4619      	mov	r1, r3
 801136e:	4620      	mov	r0, r4
 8011370:	f000 fb9a 	bl	8011aa8 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8011374:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 8011376:	4618      	mov	r0, r3
 8011378:	3724      	adds	r7, #36	; 0x24
 801137a:	46bd      	mov	sp, r7
 801137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801137e:	bf00      	nop
 8011380:	0802a76c 	.word	0x0802a76c
 8011384:	0802a77c 	.word	0x0802a77c
 8011388:	0802a7d8 	.word	0x0802a7d8
 801138c:	0802a84c 	.word	0x0802a84c

08011390 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8011390:	b590      	push	{r4, r7, lr}
 8011392:	b099      	sub	sp, #100	; 0x64
 8011394:	af00      	add	r7, sp, #0
 8011396:	60f8      	str	r0, [r7, #12]
 8011398:	60b9      	str	r1, [r7, #8]
 801139a:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 801139c:	f04f 0300 	mov.w	r3, #0
 80113a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 80113a2:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80113a6:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80113b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 80113b8:	ee16 0a90 	vmov	r0, s13
 80113bc:	f7ef f8f6 	bl	80005ac <__aeabi_f2d>
 80113c0:	4602      	mov	r2, r0
 80113c2:	460b      	mov	r3, r1
 80113c4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 80113c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80113cc:	68f9      	ldr	r1, [r7, #12]
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7fa fc95 	bl	800bcfe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 80113d4:	f107 0310 	add.w	r3, r7, #16
 80113d8:	68b9      	ldr	r1, [r7, #8]
 80113da:	4618      	mov	r0, r3
 80113dc:	f7fa fc8f 	bl	800bcfe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f103 0214 	add.w	r2, r3, #20
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	3318      	adds	r3, #24
 80113ea:	4619      	mov	r1, r3
 80113ec:	4610      	mov	r0, r2
 80113ee:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80113f2:	f7f9 fb81 	bl	800aaf8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 80113f6:	f7f9 fd4c 	bl	800ae92 <_ZNSt14numeric_limitsIaE3minEv>
 80113fa:	4603      	mov	r3, r0
 80113fc:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	edd3 7a03 	vldr	s15, [r3, #12]
 8011408:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801140c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011410:	eeb0 0a66 	vmov.f32	s0, s13
 8011414:	f013 fc0e 	bl	8024c34 <roundf>
 8011418:	eef0 7a40 	vmov.f32	s15, s0
      output->params.zero_point +
 801141c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011420:	ee17 3a90 	vmov	r3, s15
 8011424:	4423      	add	r3, r4
 8011426:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8011428:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801142c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011430:	4611      	mov	r1, r2
 8011432:	4618      	mov	r0, r3
 8011434:	f7fa fa8a 	bl	800b94c <_ZSt3maxIlERKT_S2_S2_>
 8011438:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801143a:	681a      	ldr	r2, [r3, #0]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 8011440:	f7ff fabb 	bl	80109ba <_ZNSt14numeric_limitsIfE8infinityEv>
 8011444:	eeb0 7a40 	vmov.f32	s14, s0
  data->params.quantized_activation_max =
 8011448:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801144c:	eef4 7a47 	vcmp.f32	s15, s14
 8011450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011454:	d103      	bne.n	801145e <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8011456:	f7f9 fd25 	bl	800aea4 <_ZNSt14numeric_limitsIaE3maxEv>
 801145a:	4603      	mov	r3, r0
 801145c:	e022      	b.n	80114a4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801145e:	f7f9 fd21 	bl	800aea4 <_ZNSt14numeric_limitsIaE3maxEv>
 8011462:	4603      	mov	r3, r0
 8011464:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	edd3 7a03 	vldr	s15, [r3, #12]
 8011470:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8011474:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011478:	eeb0 0a66 	vmov.f32	s0, s13
 801147c:	f013 fbda 	bl	8024c34 <roundf>
 8011480:	eef0 7a40 	vmov.f32	s15, s0
                     output->params.zero_point +
 8011484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011488:	ee17 3a90 	vmov	r3, s15
 801148c:	4423      	add	r3, r4
 801148e:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8011490:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8011494:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011498:	4611      	mov	r1, r2
 801149a:	4618      	mov	r0, r3
 801149c:	f7fa fa42 	bl	800b924 <_ZSt3minIlERKT_S2_S2_>
 80114a0:	4603      	mov	r3, r0
  data->params.quantized_activation_max =
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	687a      	ldr	r2, [r7, #4]
 80114a6:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	691a      	ldr	r2, [r3, #16]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	691a      	ldr	r2, [r3, #16]
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 80114b8:	f107 0310 	add.w	r3, r7, #16
 80114bc:	4618      	mov	r0, r3
 80114be:	f7fa fba4 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 80114c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fa fb9f 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
}
 80114cc:	bf00      	nop
 80114ce:	3764      	adds	r7, #100	; 0x64
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd90      	pop	{r4, r7, pc}

080114d4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 80114d4:	b590      	push	{r4, r7, lr}
 80114d6:	b099      	sub	sp, #100	; 0x64
 80114d8:	af00      	add	r7, sp, #0
 80114da:	60f8      	str	r0, [r7, #12]
 80114dc:	60b9      	str	r1, [r7, #8]
 80114de:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 80114e0:	f04f 0300 	mov.w	r3, #0
 80114e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 80114e6:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80114ea:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80114f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 80114fc:	ee16 0a90 	vmov	r0, s13
 8011500:	f7ef f854 	bl	80005ac <__aeabi_f2d>
 8011504:	4602      	mov	r2, r0
 8011506:	460b      	mov	r3, r1
 8011508:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 801150c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011510:	68f9      	ldr	r1, [r7, #12]
 8011512:	4618      	mov	r0, r3
 8011514:	f7fa fbf3 	bl	800bcfe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8011518:	f107 0310 	add.w	r3, r7, #16
 801151c:	68b9      	ldr	r1, [r7, #8]
 801151e:	4618      	mov	r0, r3
 8011520:	f7fa fbed 	bl	800bcfe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f103 0214 	add.w	r2, r3, #20
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	3318      	adds	r3, #24
 801152e:	4619      	mov	r1, r3
 8011530:	4610      	mov	r0, r2
 8011532:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8011536:	f7f9 fadf 	bl	800aaf8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801153a:	f7f9 fcbb 	bl	800aeb4 <_ZNSt14numeric_limitsIhE3minEv>
 801153e:	4603      	mov	r3, r0
 8011540:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	edd3 7a03 	vldr	s15, [r3, #12]
 801154c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8011550:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011554:	eeb0 0a66 	vmov.f32	s0, s13
 8011558:	f013 fb6c 	bl	8024c34 <roundf>
 801155c:	eef0 7a40 	vmov.f32	s15, s0
      output->params.zero_point +
 8011560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011564:	ee17 3a90 	vmov	r3, s15
 8011568:	4423      	add	r3, r4
 801156a:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801156c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011570:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011574:	4611      	mov	r1, r2
 8011576:	4618      	mov	r0, r3
 8011578:	f7fa f9e8 	bl	800b94c <_ZSt3maxIlERKT_S2_S2_>
 801157c:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 8011584:	f7ff fa19 	bl	80109ba <_ZNSt14numeric_limitsIfE8infinityEv>
 8011588:	eeb0 7a40 	vmov.f32	s14, s0
  data->params.quantized_activation_max =
 801158c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8011590:	eef4 7a47 	vcmp.f32	s15, s14
 8011594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011598:	d103      	bne.n	80115a2 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801159a:	f7f9 fc93 	bl	800aec4 <_ZNSt14numeric_limitsIhE3maxEv>
 801159e:	4603      	mov	r3, r0
 80115a0:	e022      	b.n	80115e8 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 80115a2:	f7f9 fc8f 	bl	800aec4 <_ZNSt14numeric_limitsIhE3maxEv>
 80115a6:	4603      	mov	r3, r0
 80115a8:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80115b4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80115b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80115bc:	eeb0 0a66 	vmov.f32	s0, s13
 80115c0:	f013 fb38 	bl	8024c34 <roundf>
 80115c4:	eef0 7a40 	vmov.f32	s15, s0
                     output->params.zero_point +
 80115c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80115cc:	ee17 3a90 	vmov	r3, s15
 80115d0:	4423      	add	r3, r4
 80115d2:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 80115d4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80115d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80115dc:	4611      	mov	r1, r2
 80115de:	4618      	mov	r0, r3
 80115e0:	f7fa f9a0 	bl	800b924 <_ZSt3minIlERKT_S2_S2_>
 80115e4:	4603      	mov	r3, r0
  data->params.quantized_activation_max =
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	687a      	ldr	r2, [r7, #4]
 80115ea:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	691a      	ldr	r2, [r3, #16]
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	691a      	ldr	r2, [r3, #16]
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 80115fc:	f107 0310 	add.w	r3, r7, #16
 8011600:	4618      	mov	r0, r3
 8011602:	f7fa fb02 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 8011606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801160a:	4618      	mov	r0, r3
 801160c:	f7fa fafd 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
}
 8011610:	bf00      	nop
 8011612:	3764      	adds	r7, #100	; 0x64
 8011614:	46bd      	mov	sp, r7
 8011616:	bd90      	pop	{r4, r7, pc}

08011618 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d101      	bne.n	801162a <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 8011626:	f013 fc4a 	bl	8024ebe <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
}
 801162e:	4618      	mov	r0, r3
 8011630:	3708      	adds	r7, #8
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}

08011636 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8011636:	b480      	push	{r7}
 8011638:	b083      	sub	sp, #12
 801163a:	af00      	add	r7, sp, #0
 801163c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d002      	beq.n	801164a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	e000      	b.n	801164c <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 801164a:	2300      	movs	r3, #0
}
 801164c:	4618      	mov	r0, r3
 801164e:	370c      	adds	r7, #12
 8011650:	46bd      	mov	sp, r7
 8011652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011656:	4770      	bx	lr

08011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8011658:	b580      	push	{r7, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d101      	bne.n	801166a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8011666:	f013 fc2a 	bl	8024ebe <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
}
 801166e:	4618      	mov	r0, r3
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}

08011676 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8011676:	b480      	push	{r7}
 8011678:	b083      	sub	sp, #12
 801167a:	af00      	add	r7, sp, #0
 801167c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d002      	beq.n	801168a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	e000      	b.n	801168c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 801168a:	2300      	movs	r3, #0
}
 801168c:	4618      	mov	r0, r3
 801168e:	370c      	adds	r7, #12
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr

08011698 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8011698:	b590      	push	{r4, r7, lr}
 801169a:	b089      	sub	sp, #36	; 0x24
 801169c:	af00      	add	r7, sp, #0
 801169e:	60f8      	str	r0, [r7, #12]
 80116a0:	60b9      	str	r1, [r7, #8]
 80116a2:	607a      	str	r2, [r7, #4]
 80116a4:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80116a6:	6879      	ldr	r1, [r7, #4]
 80116a8:	68b8      	ldr	r0, [r7, #8]
 80116aa:	f7ff fa5e 	bl	8010b6a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80116ae:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 80116b0:	2300      	movs	r3, #0
 80116b2:	61fb      	str	r3, [r7, #28]
 80116b4:	69fa      	ldr	r2, [r7, #28]
 80116b6:	69bb      	ldr	r3, [r7, #24]
 80116b8:	429a      	cmp	r2, r3
 80116ba:	da35      	bge.n	8011728 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 80116bc:	69fb      	ldr	r3, [r7, #28]
 80116be:	683a      	ldr	r2, [r7, #0]
 80116c0:	4413      	add	r3, r2
 80116c2:	f993 3000 	ldrsb.w	r3, [r3]
 80116c6:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	68db      	ldr	r3, [r3, #12]
 80116d0:	697a      	ldr	r2, [r7, #20]
 80116d2:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80116dc:	461a      	mov	r2, r3
 80116de:	f7ff fa79 	bl	8010bd4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80116e2:	4603      	mov	r3, r0
        data.params.output_offset +
 80116e4:	4423      	add	r3, r4
    int32_t clamped =
 80116e6:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	3304      	adds	r3, #4
 80116ec:	f107 0210 	add.w	r2, r7, #16
 80116f0:	4611      	mov	r1, r2
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fa f92a 	bl	800b94c <_ZSt3maxIlERKT_S2_S2_>
 80116f8:	4603      	mov	r3, r0
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	3308      	adds	r3, #8
 8011702:	f107 0210 	add.w	r2, r7, #16
 8011706:	4611      	mov	r1, r2
 8011708:	4618      	mov	r0, r3
 801170a:	f7fa f90b 	bl	800b924 <_ZSt3minIlERKT_S2_S2_>
 801170e:	4603      	mov	r3, r0
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8011714:	6939      	ldr	r1, [r7, #16]
 8011716:	69fb      	ldr	r3, [r7, #28]
 8011718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801171a:	4413      	add	r3, r2
 801171c:	b24a      	sxtb	r2, r1
 801171e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8011720:	69fb      	ldr	r3, [r7, #28]
 8011722:	3301      	adds	r3, #1
 8011724:	61fb      	str	r3, [r7, #28]
 8011726:	e7c5      	b.n	80116b4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8011728:	bf00      	nop
 801172a:	3724      	adds	r7, #36	; 0x24
 801172c:	46bd      	mov	sp, r7
 801172e:	bd90      	pop	{r4, r7, pc}

08011730 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8011730:	b580      	push	{r7, lr}
 8011732:	b082      	sub	sp, #8
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d101      	bne.n	8011742 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 801173e:	f013 fbbe 	bl	8024ebe <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
}
 8011746:	4618      	mov	r0, r3
 8011748:	3708      	adds	r7, #8
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}

0801174e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801174e:	b480      	push	{r7}
 8011750:	b083      	sub	sp, #12
 8011752:	af00      	add	r7, sp, #0
 8011754:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d002      	beq.n	8011762 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	e000      	b.n	8011764 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 8011762:	2300      	movs	r3, #0
}
 8011764:	4618      	mov	r0, r3
 8011766:	370c      	adds	r7, #12
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr

08011770 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8011770:	b590      	push	{r4, r7, lr}
 8011772:	b089      	sub	sp, #36	; 0x24
 8011774:	af00      	add	r7, sp, #0
 8011776:	60f8      	str	r0, [r7, #12]
 8011778:	60b9      	str	r1, [r7, #8]
 801177a:	607a      	str	r2, [r7, #4]
 801177c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801177e:	6879      	ldr	r1, [r7, #4]
 8011780:	68b8      	ldr	r0, [r7, #8]
 8011782:	f7ff f9f2 	bl	8010b6a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8011786:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8011788:	2300      	movs	r3, #0
 801178a:	61fb      	str	r3, [r7, #28]
 801178c:	69fa      	ldr	r2, [r7, #28]
 801178e:	69bb      	ldr	r3, [r7, #24]
 8011790:	429a      	cmp	r2, r3
 8011792:	da34      	bge.n	80117fe <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8011794:	69fb      	ldr	r3, [r7, #28]
 8011796:	683a      	ldr	r2, [r7, #0]
 8011798:	4413      	add	r3, r2
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	697a      	ldr	r2, [r7, #20]
 80117a8:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80117b2:	461a      	mov	r2, r3
 80117b4:	f7ff fa0e 	bl	8010bd4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80117b8:	4603      	mov	r3, r0
        data.params.output_offset +
 80117ba:	4423      	add	r3, r4
    int32_t clamped =
 80117bc:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	3304      	adds	r3, #4
 80117c2:	f107 0210 	add.w	r2, r7, #16
 80117c6:	4611      	mov	r1, r2
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7fa f8bf 	bl	800b94c <_ZSt3maxIlERKT_S2_S2_>
 80117ce:	4603      	mov	r3, r0
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	3308      	adds	r3, #8
 80117d8:	f107 0210 	add.w	r2, r7, #16
 80117dc:	4611      	mov	r1, r2
 80117de:	4618      	mov	r0, r3
 80117e0:	f7fa f8a0 	bl	800b924 <_ZSt3minIlERKT_S2_S2_>
 80117e4:	4603      	mov	r3, r0
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 80117ea:	6939      	ldr	r1, [r7, #16]
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117f0:	4413      	add	r3, r2
 80117f2:	b2ca      	uxtb	r2, r1
 80117f4:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 80117f6:	69fb      	ldr	r3, [r7, #28]
 80117f8:	3301      	adds	r3, #1
 80117fa:	61fb      	str	r3, [r7, #28]
 80117fc:	e7c6      	b.n	801178c <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 80117fe:	bf00      	nop
 8011800:	3724      	adds	r7, #36	; 0x24
 8011802:	46bd      	mov	sp, r7
 8011804:	bd90      	pop	{r4, r7, pc}

08011806 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8011806:	b5b0      	push	{r4, r5, r7, lr}
 8011808:	b088      	sub	sp, #32
 801180a:	af00      	add	r7, sp, #0
 801180c:	ed87 0a03 	vstr	s0, [r7, #12]
 8011810:	edc7 0a02 	vstr	s1, [r7, #8]
 8011814:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8011816:	ed97 7a03 	vldr	s14, [r7, #12]
 801181a:	edd7 7a02 	vldr	s15, [r7, #8]
 801181e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011822:	ee16 0a90 	vmov	r0, s13
 8011826:	f7ee fec1 	bl	80005ac <__aeabi_f2d>
 801182a:	4602      	mov	r2, r0
 801182c:	460b      	mov	r3, r1
 801182e:	ec43 2b10 	vmov	d0, r2, r3
 8011832:	f013 f9b9 	bl	8024ba8 <round>
 8011836:	ec55 4b10 	vmov	r4, r5, d0
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f7ee fea4 	bl	8000588 <__aeabi_i2d>
 8011840:	4602      	mov	r2, r0
 8011842:	460b      	mov	r3, r1
 8011844:	4620      	mov	r0, r4
 8011846:	4629      	mov	r1, r5
 8011848:	f7ee fd52 	bl	80002f0 <__adddf3>
 801184c:	4602      	mov	r2, r0
 801184e:	460b      	mov	r3, r1
 8011850:	4610      	mov	r0, r2
 8011852:	4619      	mov	r1, r3
 8011854:	f7ef f99c 	bl	8000b90 <__aeabi_d2iz>
 8011858:	4603      	mov	r3, r0
 801185a:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 801185c:	f7f9 fb19 	bl	800ae92 <_ZNSt14numeric_limitsIaE3minEv>
 8011860:	4603      	mov	r3, r0
 8011862:	61bb      	str	r3, [r7, #24]
 8011864:	f107 0214 	add.w	r2, r7, #20
 8011868:	f107 0318 	add.w	r3, r7, #24
 801186c:	4611      	mov	r1, r2
 801186e:	4618      	mov	r0, r3
 8011870:	f7fa f86c 	bl	800b94c <_ZSt3maxIlERKT_S2_S2_>
 8011874:	4603      	mov	r3, r0
  result =
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801187a:	f7f9 fb13 	bl	800aea4 <_ZNSt14numeric_limitsIaE3maxEv>
 801187e:	4603      	mov	r3, r0
 8011880:	61fb      	str	r3, [r7, #28]
 8011882:	f107 0214 	add.w	r2, r7, #20
 8011886:	f107 031c 	add.w	r3, r7, #28
 801188a:	4611      	mov	r1, r2
 801188c:	4618      	mov	r0, r3
 801188e:	f7fa f849 	bl	800b924 <_ZSt3minIlERKT_S2_S2_>
 8011892:	4603      	mov	r3, r0
  result =
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	617b      	str	r3, [r7, #20]
  return result;
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	b25b      	sxtb	r3, r3
}
 801189c:	4618      	mov	r0, r3
 801189e:	3720      	adds	r7, #32
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bdb0      	pop	{r4, r5, r7, pc}

080118a4 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 80118a4:	b5b0      	push	{r4, r5, r7, lr}
 80118a6:	b088      	sub	sp, #32
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80118ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80118b2:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 80118b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80118b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80118bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80118c0:	ee16 0a90 	vmov	r0, s13
 80118c4:	f7ee fe72 	bl	80005ac <__aeabi_f2d>
 80118c8:	4602      	mov	r2, r0
 80118ca:	460b      	mov	r3, r1
 80118cc:	ec43 2b10 	vmov	d0, r2, r3
 80118d0:	f013 f96a 	bl	8024ba8 <round>
 80118d4:	ec55 4b10 	vmov	r4, r5, d0
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f7ee fe55 	bl	8000588 <__aeabi_i2d>
 80118de:	4602      	mov	r2, r0
 80118e0:	460b      	mov	r3, r1
 80118e2:	4620      	mov	r0, r4
 80118e4:	4629      	mov	r1, r5
 80118e6:	f7ee fd03 	bl	80002f0 <__adddf3>
 80118ea:	4602      	mov	r2, r0
 80118ec:	460b      	mov	r3, r1
 80118ee:	4610      	mov	r0, r2
 80118f0:	4619      	mov	r1, r3
 80118f2:	f7ef f94d 	bl	8000b90 <__aeabi_d2iz>
 80118f6:	4603      	mov	r3, r0
 80118f8:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 80118fa:	f7f9 fadb 	bl	800aeb4 <_ZNSt14numeric_limitsIhE3minEv>
 80118fe:	4603      	mov	r3, r0
 8011900:	61bb      	str	r3, [r7, #24]
 8011902:	f107 0214 	add.w	r2, r7, #20
 8011906:	f107 0318 	add.w	r3, r7, #24
 801190a:	4611      	mov	r1, r2
 801190c:	4618      	mov	r0, r3
 801190e:	f7fa f81d 	bl	800b94c <_ZSt3maxIlERKT_S2_S2_>
 8011912:	4603      	mov	r3, r0
  result =
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8011918:	f7f9 fad4 	bl	800aec4 <_ZNSt14numeric_limitsIhE3maxEv>
 801191c:	4603      	mov	r3, r0
 801191e:	61fb      	str	r3, [r7, #28]
 8011920:	f107 0214 	add.w	r2, r7, #20
 8011924:	f107 031c 	add.w	r3, r7, #28
 8011928:	4611      	mov	r1, r2
 801192a:	4618      	mov	r0, r3
 801192c:	f7f9 fffa 	bl	800b924 <_ZSt3minIlERKT_S2_S2_>
 8011930:	4603      	mov	r3, r0
  result =
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	617b      	str	r3, [r7, #20]
  return result;
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	b2db      	uxtb	r3, r3
}
 801193a:	4618      	mov	r0, r3
 801193c:	3720      	adds	r7, #32
 801193e:	46bd      	mov	sp, r7
 8011940:	bdb0      	pop	{r4, r5, r7, pc}

08011942 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8011942:	b580      	push	{r7, lr}
 8011944:	b088      	sub	sp, #32
 8011946:	af00      	add	r7, sp, #0
 8011948:	60ba      	str	r2, [r7, #8]
 801194a:	607b      	str	r3, [r7, #4]
 801194c:	4603      	mov	r3, r0
 801194e:	73fb      	strb	r3, [r7, #15]
 8011950:	460b      	mov	r3, r1
 8011952:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8011954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011956:	68b8      	ldr	r0, [r7, #8]
 8011958:	f7ff f907 	bl	8010b6a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801195c:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801195e:	2300      	movs	r3, #0
 8011960:	61fb      	str	r3, [r7, #28]
 8011962:	69fa      	ldr	r2, [r7, #28]
 8011964:	69bb      	ldr	r3, [r7, #24]
 8011966:	429a      	cmp	r2, r3
 8011968:	da26      	bge.n	80119b8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 801196a:	69fb      	ldr	r3, [r7, #28]
 801196c:	687a      	ldr	r2, [r7, #4]
 801196e:	4413      	add	r3, r2
 8011970:	781b      	ldrb	r3, [r3, #0]
 8011972:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8011974:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011978:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801197c:	429a      	cmp	r2, r3
 801197e:	dd04      	ble.n	801198a <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 8011980:	f107 030e 	add.w	r3, r7, #14
 8011984:	f993 3000 	ldrsb.w	r3, [r3]
 8011988:	e00c      	b.n	80119a4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 801198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801198e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011992:	429a      	cmp	r2, r3
 8011994:	da04      	bge.n	80119a0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 8011996:	f107 030f 	add.w	r3, r7, #15
 801199a:	f993 3000 	ldrsb.w	r3, [r3]
 801199e:	e001      	b.n	80119a4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 80119a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80119a4:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 80119a6:	69fb      	ldr	r3, [r7, #28]
 80119a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119aa:	4413      	add	r3, r2
 80119ac:	7dba      	ldrb	r2, [r7, #22]
 80119ae:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 80119b0:	69fb      	ldr	r3, [r7, #28]
 80119b2:	3301      	adds	r3, #1
 80119b4:	61fb      	str	r3, [r7, #28]
 80119b6:	e7d4      	b.n	8011962 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 80119b8:	bf00      	nop
 80119ba:	3720      	adds	r7, #32
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}

080119c0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b088      	sub	sp, #32
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	60ba      	str	r2, [r7, #8]
 80119c8:	607b      	str	r3, [r7, #4]
 80119ca:	4603      	mov	r3, r0
 80119cc:	73fb      	strb	r3, [r7, #15]
 80119ce:	460b      	mov	r3, r1
 80119d0:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80119d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80119d4:	68b8      	ldr	r0, [r7, #8]
 80119d6:	f7ff f8c8 	bl	8010b6a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80119da:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 80119dc:	2300      	movs	r3, #0
 80119de:	61fb      	str	r3, [r7, #28]
 80119e0:	69fa      	ldr	r2, [r7, #28]
 80119e2:	69bb      	ldr	r3, [r7, #24]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	da1f      	bge.n	8011a28 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 80119e8:	69fb      	ldr	r3, [r7, #28]
 80119ea:	687a      	ldr	r2, [r7, #4]
 80119ec:	4413      	add	r3, r2
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 80119f2:	7bbb      	ldrb	r3, [r7, #14]
 80119f4:	7dfa      	ldrb	r2, [r7, #23]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d903      	bls.n	8011a02 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 80119fa:	f107 030e 	add.w	r3, r7, #14
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	e008      	b.n	8011a14 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8011a02:	7bfb      	ldrb	r3, [r7, #15]
 8011a04:	7dfa      	ldrb	r2, [r7, #23]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d203      	bcs.n	8011a12 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 8011a0a:	f107 030f 	add.w	r3, r7, #15
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	e000      	b.n	8011a14 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8011a12:	7dfb      	ldrb	r3, [r7, #23]
 8011a14:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8011a16:	69fb      	ldr	r3, [r7, #28]
 8011a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a1a:	4413      	add	r3, r2
 8011a1c:	7dba      	ldrb	r2, [r7, #22]
 8011a1e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8011a20:	69fb      	ldr	r3, [r7, #28]
 8011a22:	3301      	adds	r3, #1
 8011a24:	61fb      	str	r3, [r7, #28]
 8011a26:	e7db      	b.n	80119e0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8011a28:	bf00      	nop
 8011a2a:	3720      	adds	r7, #32
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8011a30:	b480      	push	{r7}
 8011a32:	b083      	sub	sp, #12
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  return x;
 8011a38:	687b      	ldr	r3, [r7, #4]
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	370c      	adds	r7, #12
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a44:	4770      	bx	lr

08011a46 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8011a46:	b480      	push	{r7}
 8011a48:	b083      	sub	sp, #12
 8011a4a:	af00      	add	r7, sp, #0
 8011a4c:	6078      	str	r0, [r7, #4]
 8011a4e:	6039      	str	r1, [r7, #0]
  return a & b;
 8011a50:	687a      	ldr	r2, [r7, #4]
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	4013      	ands	r3, r2
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	370c      	adds	r7, #12
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a60:	4770      	bx	lr

08011a62 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8011a62:	b480      	push	{r7}
 8011a64:	b083      	sub	sp, #12
 8011a66:	af00      	add	r7, sp, #0
 8011a68:	6078      	str	r0, [r7, #4]
 8011a6a:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8011a6c:	687a      	ldr	r2, [r7, #4]
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	fa42 f303 	asr.w	r3, r2, r3
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	370c      	adds	r7, #12
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7e:	4770      	bx	lr

08011a80 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
 8011a88:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8011a8a:	687a      	ldr	r2, [r7, #4]
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	bfb4      	ite	lt
 8011a92:	2301      	movlt	r3, #1
 8011a94:	2300      	movge	r3, #0
 8011a96:	b2db      	uxtb	r3, r3
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f000 f827 	bl	8011aec <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011a9e:	4603      	mov	r3, r0
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3708      	adds	r7, #8
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}

08011aa8 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8011aa8:	b480      	push	{r7}
 8011aaa:	b083      	sub	sp, #12
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
  return a + b;
 8011ab2:	687a      	ldr	r2, [r7, #4]
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	4413      	add	r3, r2
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	370c      	adds	r7, #12
 8011abc:	46bd      	mov	sp, r7
 8011abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac2:	4770      	bx	lr

08011ac4 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b082      	sub	sp, #8
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8011ace:	687a      	ldr	r2, [r7, #4]
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	bfcc      	ite	gt
 8011ad6:	2301      	movgt	r3, #1
 8011ad8:	2300      	movle	r3, #0
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	4618      	mov	r0, r3
 8011ade:	f000 f805 	bl	8011aec <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011ae2:	4603      	mov	r3, r0
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3708      	adds	r7, #8
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d004      	beq.n	8011b04 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8011afa:	2000      	movs	r0, #0
 8011afc:	f000 f807 	bl	8011b0e <_ZN8gemmlowp6BitNotIlEET_S1_>
 8011b00:	4603      	mov	r3, r0
 8011b02:	e000      	b.n	8011b06 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8011b04:	2300      	movs	r3, #0
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3708      	adds	r7, #8
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8011b0e:	b480      	push	{r7}
 8011b10:	b083      	sub	sp, #12
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
  return ~a;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	43db      	mvns	r3, r3
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	370c      	adds	r7, #12
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr

08011b26 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8011b26:	b480      	push	{r7}
 8011b28:	b083      	sub	sp, #12
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	6078      	str	r0, [r7, #4]
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	4618      	mov	r0, r3
 8011b36:	370c      	adds	r7, #12
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3e:	4770      	bx	lr

08011b40 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8011b40:	b480      	push	{r7}
 8011b42:	b083      	sub	sp, #12
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	685b      	ldr	r3, [r3, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	4618      	mov	r0, r3
 8011b50:	370c      	adds	r7, #12
 8011b52:	46bd      	mov	sp, r7
 8011b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b58:	4770      	bx	lr

08011b5a <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8011b5a:	b580      	push	{r7, lr}
 8011b5c:	b082      	sub	sp, #8
 8011b5e:	af00      	add	r7, sp, #0
 8011b60:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d101      	bne.n	8011b6c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8011b68:	f013 f9a9 	bl	8024ebe <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3708      	adds	r7, #8
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }
 8011b78:	b480      	push	{r7}
 8011b7a:	b083      	sub	sp, #12
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	3304      	adds	r3, #4
 8011b84:	4618      	mov	r0, r3
 8011b86:	370c      	adds	r7, #12
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8e:	4770      	bx	lr

08011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b086      	sub	sp, #24
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	60f8      	str	r0, [r7, #12]
 8011b98:	60b9      	str	r1, [r7, #8]
 8011b9a:	607a      	str	r2, [r7, #4]
 8011b9c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8011b9e:	68f8      	ldr	r0, [r7, #12]
 8011ba0:	f7fa f849 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	2b04      	cmp	r3, #4
 8011ba8:	d001      	beq.n	8011bae <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 8011baa:	f013 f988 	bl	8024ebe <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 8011bae:	68f8      	ldr	r0, [r7, #12]
 8011bb0:	f7ff ffe2 	bl	8011b78 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 8011bb4:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	db04      	blt.n	8011bc6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 8011bbc:	697b      	ldr	r3, [r7, #20]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	68ba      	ldr	r2, [r7, #8]
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	db01      	blt.n	8011bca <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 8011bc6:	f013 f97a 	bl	8024ebe <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	db05      	blt.n	8011bdc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	3304      	adds	r3, #4
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	687a      	ldr	r2, [r7, #4]
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	db01      	blt.n	8011be0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 8011bdc:	f013 f96f 	bl	8024ebe <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	db05      	blt.n	8011bf2 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	3308      	adds	r3, #8
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	683a      	ldr	r2, [r7, #0]
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	db01      	blt.n	8011bf6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 8011bf2:	f013 f964 	bl	8024ebe <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8011bf6:	6a3b      	ldr	r3, [r7, #32]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	db05      	blt.n	8011c08 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 8011bfc:	697b      	ldr	r3, [r7, #20]
 8011bfe:	330c      	adds	r3, #12
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	6a3a      	ldr	r2, [r7, #32]
 8011c04:	429a      	cmp	r2, r3
 8011c06:	db01      	blt.n	8011c0c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 8011c08:	f013 f959 	bl	8024ebe <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	3304      	adds	r3, #4
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	68ba      	ldr	r2, [r7, #8]
 8011c14:	fb02 f203 	mul.w	r2, r2, r3
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	4413      	add	r3, r2
 8011c1c:	697a      	ldr	r2, [r7, #20]
 8011c1e:	3208      	adds	r2, #8
 8011c20:	6812      	ldr	r2, [r2, #0]
 8011c22:	fb02 f203 	mul.w	r2, r2, r3
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	4413      	add	r3, r2
 8011c2a:	697a      	ldr	r2, [r7, #20]
 8011c2c:	320c      	adds	r2, #12
 8011c2e:	6812      	ldr	r2, [r2, #0]
 8011c30:	fb02 f203 	mul.w	r2, r2, r3
 8011c34:	6a3b      	ldr	r3, [r7, #32]
 8011c36:	4413      	add	r3, r2
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3718      	adds	r7, #24
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}

08011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 8011c40:	b590      	push	{r4, r7, lr}
 8011c42:	b087      	sub	sp, #28
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	60f8      	str	r0, [r7, #12]
 8011c48:	60b9      	str	r1, [r7, #8]
 8011c4a:	607a      	str	r2, [r7, #4]
 8011c4c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8011c4e:	68b9      	ldr	r1, [r7, #8]
 8011c50:	68f8      	ldr	r0, [r7, #12]
 8011c52:	f7fe ff2f 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011c56:	4604      	mov	r4, r0
 8011c58:	6839      	ldr	r1, [r7, #0]
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f7fe ff2a 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011c60:	4603      	mov	r3, r0
 8011c62:	429c      	cmp	r4, r3
 8011c64:	d001      	beq.n	8011c6a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8011c66:	f013 f92a 	bl	8024ebe <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8011c6a:	68b9      	ldr	r1, [r7, #8]
 8011c6c:	68f8      	ldr	r0, [r7, #12]
 8011c6e:	f7fe ff21 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011c72:	4603      	mov	r3, r0
 8011c74:	613b      	str	r3, [r7, #16]
 8011c76:	6839      	ldr	r1, [r7, #0]
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f7fe ff1b 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	617b      	str	r3, [r7, #20]
 8011c82:	f107 0214 	add.w	r2, r7, #20
 8011c86:	f107 0310 	add.w	r3, r7, #16
 8011c8a:	4611      	mov	r1, r2
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f7f9 fe49 	bl	800b924 <_ZSt3minIlERKT_S2_S2_>
 8011c92:	4603      	mov	r3, r0
 8011c94:	681b      	ldr	r3, [r3, #0]
}
 8011c96:	4618      	mov	r0, r3
 8011c98:	371c      	adds	r7, #28
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd90      	pop	{r4, r7, pc}
	...

08011ca0 <_ZNSt14numeric_limitsIfE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8011ca0:	b480      	push	{r7}
 8011ca2:	af00      	add	r7, sp, #0
 8011ca4:	4b04      	ldr	r3, [pc, #16]	; (8011cb8 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8011ca6:	ee07 3a90 	vmov	s15, r3
 8011caa:	eeb0 0a67 	vmov.f32	s0, s15
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb4:	4770      	bx	lr
 8011cb6:	bf00      	nop
 8011cb8:	7f7fffff 	.word	0x7f7fffff

08011cbc <_ZNSt14numeric_limitsIfE6lowestEv>:
      lowest() noexcept { return -__FLT_MAX__; }
 8011cbc:	b480      	push	{r7}
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8011cc4:	ee07 3a90 	vmov	s15, r3
 8011cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd2:	4770      	bx	lr

08011cd4 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 8011cd4:	b480      	push	{r7}
 8011cd6:	b087      	sub	sp, #28
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	60f8      	str	r0, [r7, #12]
 8011cdc:	60b9      	str	r1, [r7, #8]
 8011cde:	607a      	str	r2, [r7, #4]
 8011ce0:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	3b01      	subs	r3, #1
 8011ce6:	68ba      	ldr	r2, [r7, #8]
 8011ce8:	fb02 f303 	mul.w	r3, r2, r3
 8011cec:	3301      	adds	r3, #1
 8011cee:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8011cf0:	6a3b      	ldr	r3, [r7, #32]
 8011cf2:	3b01      	subs	r3, #1
 8011cf4:	68fa      	ldr	r2, [r7, #12]
 8011cf6:	fb02 f203 	mul.w	r2, r2, r3
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	441a      	add	r2, r3
  int total_padding =
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	1ad3      	subs	r3, r2, r3
 8011d02:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011d0a:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 8011d0c:	693b      	ldr	r3, [r7, #16]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	f003 0301 	and.w	r3, r3, #1
 8011d14:	bfb8      	it	lt
 8011d16:	425b      	neglt	r3, r3
 8011d18:	461a      	mov	r2, r3
 8011d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1c:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 8011d1e:	693b      	ldr	r3, [r7, #16]
 8011d20:	0fda      	lsrs	r2, r3, #31
 8011d22:	4413      	add	r3, r2
 8011d24:	105b      	asrs	r3, r3, #1
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	371c      	adds	r7, #28
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d30:	4770      	bx	lr

08011d32 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 8011d32:	b480      	push	{r7}
 8011d34:	b087      	sub	sp, #28
 8011d36:	af00      	add	r7, sp, #0
 8011d38:	60b9      	str	r1, [r7, #8]
 8011d3a:	607a      	str	r2, [r7, #4]
 8011d3c:	603b      	str	r3, [r7, #0]
 8011d3e:	4603      	mov	r3, r0
 8011d40:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	3b01      	subs	r3, #1
 8011d46:	6a3a      	ldr	r2, [r7, #32]
 8011d48:	fb02 f303 	mul.w	r3, r2, r3
 8011d4c:	3301      	adds	r3, #1
 8011d4e:	617b      	str	r3, [r7, #20]

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d101      	bne.n	8011d5a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x28>
 8011d56:	2300      	movs	r3, #0
 8011d58:	e017      	b.n	8011d8a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>

  switch (padding) {
 8011d5a:	7bfb      	ldrb	r3, [r7, #15]
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d002      	beq.n	8011d66 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x34>
 8011d60:	2b02      	cmp	r3, #2
 8011d62:	d008      	beq.n	8011d76 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x44>
 8011d64:	e010      	b.n	8011d88 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x56>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 8011d66:	68ba      	ldr	r2, [r7, #8]
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	4413      	add	r3, r2
 8011d6c:	1e5a      	subs	r2, r3, #1
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d74:	e009      	b.n	8011d8a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 8011d76:	68ba      	ldr	r2, [r7, #8]
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	441a      	add	r2, r3
 8011d7c:	697b      	ldr	r3, [r7, #20]
 8011d7e:	1ad2      	subs	r2, r2, r3
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d86:	e000      	b.n	8011d8a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    default:
      return 0;
 8011d88:	2300      	movs	r3, #0
  }
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	371c      	adds	r7, #28
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d94:	4770      	bx	lr

08011d96 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 8011d96:	b580      	push	{r7, lr}
 8011d98:	b088      	sub	sp, #32
 8011d9a:	af02      	add	r7, sp, #8
 8011d9c:	60f8      	str	r0, [r7, #12]
 8011d9e:	60b9      	str	r1, [r7, #8]
 8011da0:	607a      	str	r2, [r7, #4]
 8011da2:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 8011da4:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8011da8:	6a3b      	ldr	r3, [r7, #32]
 8011daa:	9300      	str	r3, [sp, #0]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011db2:	f7ff ffbe 	bl	8011d32 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8011db6:	4602      	mov	r2, r0
 8011db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dba:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8011dbc:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	9300      	str	r3, [sp, #0]
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011dc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011dca:	f7ff ffb2 	bl	8011d32 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8011dce:	4602      	mov	r2, r0
 8011dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd2:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 8011dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f107 0214 	add.w	r2, r7, #20
 8011de0:	9201      	str	r2, [sp, #4]
 8011de2:	9300      	str	r3, [sp, #0]
 8011de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011de8:	6839      	ldr	r1, [r7, #0]
 8011dea:	68b8      	ldr	r0, [r7, #8]
 8011dec:	f7ff ff72 	bl	8011cd4 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8011df0:	4602      	mov	r2, r0
  padding_values.height =
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 8011df6:	697a      	ldr	r2, [r7, #20]
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 8011dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f107 0214 	add.w	r2, r7, #20
 8011e04:	9201      	str	r2, [sp, #4]
 8011e06:	9300      	str	r3, [sp, #0]
 8011e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e0c:	6a39      	ldr	r1, [r7, #32]
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f7ff ff60 	bl	8011cd4 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8011e14:	4602      	mov	r2, r0
  padding_values.width =
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 8011e1a:	697a      	ldr	r2, [r7, #20]
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	609a      	str	r2, [r3, #8]
  return padding_values;
 8011e20:	bf00      	nop
}
 8011e22:	68f8      	ldr	r0, [r7, #12]
 8011e24:	3718      	adds	r7, #24
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}

08011e2a <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
const int kConvQuantizedDimension = 0;

// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
 8011e2a:	b580      	push	{r7, lr}
 8011e2c:	b084      	sub	sp, #16
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	60f8      	str	r0, [r7, #12]
 8011e32:	60b9      	str	r1, [r7, #8]
 8011e34:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	7b18      	ldrb	r0, [r3, #12]
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	3330      	adds	r3, #48	; 0x30
 8011e44:	4619      	mov	r1, r3
 8011e46:	f000 f97f 	bl	8012148 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	781b      	ldrb	r3, [r3, #0]
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f000 fbd1 	bl	80125f6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8011e54:	4603      	mov	r3, r0
 8011e56:	461a      	mov	r2, r3
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	b21a      	sxth	r2, r3
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	685b      	ldr	r3, [r3, #4]
 8011e6a:	b21a      	sxth	r2, r3
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	b21a      	sxth	r2, r3
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	689b      	ldr	r3, [r3, #8]
 8011e7e:	b21a      	sxth	r2, r3
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	691b      	ldr	r3, [r3, #16]
 8011e88:	b21a      	sxth	r2, r3
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	695b      	ldr	r3, [r3, #20]
 8011e92:	b21a      	sxth	r2, r3
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	821a      	strh	r2, [r3, #16]
  return op_params;
 8011e98:	bf00      	nop
}
 8011e9a:	68f8      	ldr	r0, [r7, #12]
 8011e9c:	3710      	adds	r7, #16
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}

08011ea2 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 8011ea2:	b580      	push	{r7, lr}
 8011ea4:	b084      	sub	sp, #16
 8011ea6:	af00      	add	r7, sp, #0
 8011ea8:	60f8      	str	r0, [r7, #12]
 8011eaa:	60b9      	str	r1, [r7, #8]
 8011eac:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	691b      	ldr	r3, [r3, #16]
 8011eb2:	425a      	negs	r2, r3
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	695b      	ldr	r3, [r3, #20]
 8011ebc:	425a      	negs	r2, r3
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	699a      	ldr	r2, [r3, #24]
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	69da      	ldr	r2, [r3, #28]
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6a1b      	ldr	r3, [r3, #32]
 8011ed6:	425a      	negs	r2, r3
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	781b      	ldrb	r3, [r3, #0]
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f000 fb88 	bl	80125f6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	461a      	mov	r2, r3
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	685b      	ldr	r3, [r3, #4]
 8011ef2:	b21a      	sxth	r2, r3
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	b21a      	sxth	r2, r3
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 8011f02:	68bb      	ldr	r3, [r7, #8]
 8011f04:	689b      	ldr	r3, [r3, #8]
 8011f06:	b21a      	sxth	r2, r3
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	b21a      	sxth	r2, r3
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	695b      	ldr	r3, [r3, #20]
 8011f1a:	b21a      	sxth	r2, r3
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	691b      	ldr	r3, [r3, #16]
 8011f24:	b21a      	sxth	r2, r3
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	81da      	strh	r2, [r3, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 8011f3a:	bf00      	nop
}
 8011f3c:	68f8      	ldr	r0, [r7, #12]
 8011f3e:	3710      	adds	r7, #16
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}

08011f44 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 8011f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f46:	b09d      	sub	sp, #116	; 0x74
 8011f48:	af0a      	add	r7, sp, #40	; 0x28
 8011f4a:	6278      	str	r0, [r7, #36]	; 0x24
 8011f4c:	6239      	str	r1, [r7, #32]
 8011f4e:	61fa      	str	r2, [r7, #28]
 8011f50:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 8011f52:	6a3b      	ldr	r3, [r7, #32]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	2b03      	cmp	r3, #3
 8011f5a:	bf0c      	ite	eq
 8011f5c:	2301      	moveq	r3, #1
 8011f5e:	2300      	movne	r3, #0
 8011f60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8011f64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011f68:	f083 0301 	eor.w	r3, r3, #1
 8011f6c:	b2db      	uxtb	r3, r3
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d00f      	beq.n	8011f92 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8011f72:	6a3b      	ldr	r3, [r7, #32]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	2b02      	cmp	r3, #2
 8011f7a:	d00a      	beq.n	8011f92 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8011f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7e:	695c      	ldr	r4, [r3, #20]
 8011f80:	4b68      	ldr	r3, [pc, #416]	; (8012124 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e0>)
 8011f82:	9300      	str	r3, [sp, #0]
 8011f84:	2356      	movs	r3, #86	; 0x56
 8011f86:	4a68      	ldr	r2, [pc, #416]	; (8012128 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8011f88:	4968      	ldr	r1, [pc, #416]	; (801212c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8011f8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f8c:	47a0      	blx	r4
 8011f8e:	2301      	movs	r3, #1
 8011f90:	e0c4      	b.n	801211c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 8011f92:	6a3b      	ldr	r3, [r7, #32]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	2b01      	cmp	r3, #1
 8011f9a:	d012      	beq.n	8011fc2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 8011f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9e:	695c      	ldr	r4, [r3, #20]
 8011fa0:	6a3b      	ldr	r3, [r7, #32]
 8011fa2:	685b      	ldr	r3, [r3, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	9203      	str	r2, [sp, #12]
 8011faa:	9302      	str	r3, [sp, #8]
 8011fac:	4b60      	ldr	r3, [pc, #384]	; (8012130 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ec>)
 8011fae:	9301      	str	r3, [sp, #4]
 8011fb0:	4b60      	ldr	r3, [pc, #384]	; (8012134 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 8011fb2:	9300      	str	r3, [sp, #0]
 8011fb4:	2357      	movs	r3, #87	; 0x57
 8011fb6:	4a5c      	ldr	r2, [pc, #368]	; (8012128 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8011fb8:	495f      	ldr	r1, [pc, #380]	; (8012138 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 8011fba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fbc:	47a0      	blx	r4
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	e0ac      	b.n	801211c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 8011fc2:	69fb      	ldr	r3, [r7, #28]
 8011fc4:	781b      	ldrb	r3, [r3, #0]
 8011fc6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 8011fca:	69fb      	ldr	r3, [r7, #28]
 8011fcc:	6899      	ldr	r1, [r3, #8]
 8011fce:	69fb      	ldr	r3, [r7, #28]
 8011fd0:	685c      	ldr	r4, [r3, #4]
 8011fd2:	69fb      	ldr	r3, [r7, #28]
 8011fd4:	695d      	ldr	r5, [r3, #20]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 8011fd6:	69fb      	ldr	r3, [r7, #28]
 8011fd8:	691b      	ldr	r3, [r3, #16]
      padding, &out_height, &out_width);
 8011fda:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8011fdc:	f107 0008 	add.w	r0, r7, #8
 8011fe0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8011fe4:	9207      	str	r2, [sp, #28]
 8011fe6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8011fea:	9206      	str	r2, [sp, #24]
 8011fec:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8011ff0:	9205      	str	r2, [sp, #20]
 8011ff2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011ff4:	9204      	str	r2, [sp, #16]
 8011ff6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011ff8:	9203      	str	r2, [sp, #12]
 8011ffa:	69ba      	ldr	r2, [r7, #24]
 8011ffc:	9202      	str	r2, [sp, #8]
 8011ffe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012000:	9201      	str	r2, [sp, #4]
 8012002:	9300      	str	r3, [sp, #0]
 8012004:	462b      	mov	r3, r5
 8012006:	4622      	mov	r2, r4
 8012008:	f7ff fec5 	bl	8011d96 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 801200c:	4634      	mov	r4, r6
 801200e:	f107 0308 	add.w	r3, r7, #8
 8012012:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012014:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 8012018:	2200      	movs	r2, #0
 801201a:	6a39      	ldr	r1, [r7, #32]
 801201c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801201e:	f7f9 f849 	bl	800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012022:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 8012024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012026:	2b00      	cmp	r3, #0
 8012028:	d10a      	bne.n	8012040 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xfc>
 801202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801202c:	695c      	ldr	r4, [r3, #20]
 801202e:	4b43      	ldr	r3, [pc, #268]	; (801213c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 8012030:	9300      	str	r3, [sp, #0]
 8012032:	2361      	movs	r3, #97	; 0x61
 8012034:	4a3c      	ldr	r2, [pc, #240]	; (8012128 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8012036:	493d      	ldr	r1, [pc, #244]	; (801212c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8012038:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801203a:	47a0      	blx	r4
 801203c:	2301      	movs	r3, #1
 801203e:	e06d      	b.n	801211c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 8012040:	2201      	movs	r2, #1
 8012042:	6a39      	ldr	r1, [r7, #32]
 8012044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012046:	f7f9 f835 	bl	800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801204a:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 801204c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801204e:	2b00      	cmp	r3, #0
 8012050:	d10a      	bne.n	8012068 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x124>
 8012052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012054:	695c      	ldr	r4, [r3, #20]
 8012056:	4b3a      	ldr	r3, [pc, #232]	; (8012140 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 8012058:	9300      	str	r3, [sp, #0]
 801205a:	2363      	movs	r3, #99	; 0x63
 801205c:	4a32      	ldr	r2, [pc, #200]	; (8012128 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 801205e:	4933      	ldr	r1, [pc, #204]	; (801212c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8012060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012062:	47a0      	blx	r4
 8012064:	2301      	movs	r3, #1
 8012066:	e059      	b.n	801211c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 8012068:	2202      	movs	r2, #2
 801206a:	6a39      	ldr	r1, [r7, #32]
 801206c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801206e:	f7f9 f851 	bl	800b114 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8012072:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 8012074:	2200      	movs	r2, #0
 8012076:	6a39      	ldr	r1, [r7, #32]
 8012078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801207a:	f7f9 f82b 	bl	800b0d4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801207e:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 8012080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012082:	2b00      	cmp	r3, #0
 8012084:	d10a      	bne.n	801209c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x158>
 8012086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012088:	695c      	ldr	r4, [r3, #20]
 801208a:	4b2e      	ldr	r3, [pc, #184]	; (8012144 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 801208c:	9300      	str	r3, [sp, #0]
 801208e:	2367      	movs	r3, #103	; 0x67
 8012090:	4a25      	ldr	r2, [pc, #148]	; (8012128 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8012092:	4926      	ldr	r1, [pc, #152]	; (801212c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8012094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012096:	47a0      	blx	r4
 8012098:	2301      	movs	r3, #1
 801209a:	e03f      	b.n	801211c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 801209c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80120a0:	2b01      	cmp	r3, #1
 80120a2:	d02e      	beq.n	8012102 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 80120a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120a6:	689b      	ldr	r3, [r3, #8]
 80120a8:	685b      	ldr	r3, [r3, #4]
 80120aa:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 80120ac:	69fb      	ldr	r3, [r7, #28]
 80120ae:	330c      	adds	r3, #12
 80120b0:	607b      	str	r3, [r7, #4]
 80120b2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80120b4:	321c      	adds	r2, #28
 80120b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80120b8:	3120      	adds	r1, #32
 80120ba:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80120bc:	302c      	adds	r0, #44	; 0x2c
 80120be:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80120c0:	3430      	adds	r4, #48	; 0x30
 80120c2:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 80120c4:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 80120c6:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 80120c8:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 80120ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120cc:	9308      	str	r3, [sp, #32]
 80120ce:	9607      	str	r6, [sp, #28]
 80120d0:	9506      	str	r5, [sp, #24]
 80120d2:	9405      	str	r4, [sp, #20]
 80120d4:	9004      	str	r0, [sp, #16]
 80120d6:	9103      	str	r1, [sp, #12]
 80120d8:	9202      	str	r2, [sp, #8]
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	9301      	str	r3, [sp, #4]
 80120de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120e0:	9300      	str	r3, [sp, #0]
 80120e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80120e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80120e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120ea:	f7f9 f823 	bl	800b134 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 80120ee:	4603      	mov	r3, r0
 80120f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80120f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d002      	beq.n	8012102 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
 80120fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012100:	e00c      	b.n	801211c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 8012102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012104:	691a      	ldr	r2, [r3, #16]
 8012106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012108:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 801210a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801210c:	691a      	ldr	r2, [r3, #16]
 801210e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012110:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 8012112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012114:	691a      	ldr	r2, [r3, #16]
 8012116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012118:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 801211a:	2300      	movs	r3, #0
}
 801211c:	4618      	mov	r0, r3
 801211e:	374c      	adds	r7, #76	; 0x4c
 8012120:	46bd      	mov	sp, r7
 8012122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012124:	0802a8b4 	.word	0x0802a8b4
 8012128:	0802a85c 	.word	0x0802a85c
 801212c:	0802a89c 	.word	0x0802a89c
 8012130:	0802a8f4 	.word	0x0802a8f4
 8012134:	0802a8f8 	.word	0x0802a8f8
 8012138:	0802a8d8 	.word	0x0802a8d8
 801213c:	0802a90c 	.word	0x0802a90c
 8012140:	0802a920 	.word	0x0802a920
 8012144:	0802a934 	.word	0x0802a934

08012148 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	4603      	mov	r3, r0
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
 8012154:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8012156:	7bfb      	ldrb	r3, [r7, #15]
 8012158:	2b01      	cmp	r3, #1
 801215a:	d10b      	bne.n	8012174 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 801215c:	68bb      	ldr	r3, [r7, #8]
 801215e:	f04f 0200 	mov.w	r2, #0
 8012162:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8012164:	f7ff fd9c 	bl	8011ca0 <_ZNSt14numeric_limitsIfE3maxEv>
 8012168:	eef0 7a40 	vmov.f32	s15, s0
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8012172:	e023      	b.n	80121bc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8012174:	7bfb      	ldrb	r3, [r7, #15]
 8012176:	2b03      	cmp	r3, #3
 8012178:	d107      	bne.n	801218a <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	f04f 0200 	mov.w	r2, #0
 8012180:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	4a0f      	ldr	r2, [pc, #60]	; (80121c4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8012186:	601a      	str	r2, [r3, #0]
}
 8012188:	e018      	b.n	80121bc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 801218a:	7bfb      	ldrb	r3, [r7, #15]
 801218c:	2b02      	cmp	r3, #2
 801218e:	d107      	bne.n	80121a0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	4a0d      	ldr	r2, [pc, #52]	; (80121c8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8012194:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801219c:	601a      	str	r2, [r3, #0]
}
 801219e:	e00d      	b.n	80121bc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 80121a0:	f7ff fd8c 	bl	8011cbc <_ZNSt14numeric_limitsIfE6lowestEv>
 80121a4:	eef0 7a40 	vmov.f32	s15, s0
 80121a8:	68bb      	ldr	r3, [r7, #8]
 80121aa:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 80121ae:	f7ff fd77 	bl	8011ca0 <_ZNSt14numeric_limitsIfE3maxEv>
 80121b2:	eef0 7a40 	vmov.f32	s15, s0
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	edc3 7a00 	vstr	s15, [r3]
}
 80121bc:	bf00      	nop
 80121be:	3710      	adds	r7, #16
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}
 80121c4:	40c00000 	.word	0x40c00000
 80121c8:	bf800000 	.word	0xbf800000

080121cc <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
const int kDepthwiseConvQuantizedDimension = 3;

// Returns a DepthwiseParams struct with all the parameters needed for a
// float computation.
DepthwiseParams DepthwiseConvParamsFloat(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b084      	sub	sp, #16
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	60f8      	str	r0, [r7, #12]
 80121d4:	60b9      	str	r1, [r7, #8]
 80121d6:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	7c18      	ldrb	r0, [r3, #16]
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	3330      	adds	r3, #48	; 0x30
 80121e6:	4619      	mov	r1, r3
 80121e8:	f7ff ffae 	bl	8012148 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	781b      	ldrb	r3, [r3, #0]
 80121f0:	4618      	mov	r0, r3
 80121f2:	f000 fa00 	bl	80125f6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 80121f6:	4603      	mov	r3, r0
 80121f8:	461a      	mov	r2, r3
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	b21a      	sxth	r2, r3
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	685b      	ldr	r3, [r3, #4]
 801220c:	b21a      	sxth	r2, r3
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	685b      	ldr	r3, [r3, #4]
 8012216:	b21a      	sxth	r2, r3
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 801221c:	68bb      	ldr	r3, [r7, #8]
 801221e:	689b      	ldr	r3, [r3, #8]
 8012220:	b21a      	sxth	r2, r3
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	695b      	ldr	r3, [r3, #20]
 801222a:	b21a      	sxth	r2, r3
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	699b      	ldr	r3, [r3, #24]
 8012234:	b21a      	sxth	r2, r3
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	821a      	strh	r2, [r3, #16]
  op_params.depth_multiplier = params.depth_multiplier;
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	68db      	ldr	r3, [r3, #12]
 801223e:	b21a      	sxth	r2, r3
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	825a      	strh	r2, [r3, #18]
  return op_params;
 8012244:	bf00      	nop
}
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	3710      	adds	r7, #16
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}

0801224e <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:

// Returns a DepthwiseParams struct with all the parameters needed for a
// quantized computation.
DepthwiseParams DepthwiseConvParamsQuantized(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 801224e:	b580      	push	{r7, lr}
 8012250:	b084      	sub	sp, #16
 8012252:	af00      	add	r7, sp, #0
 8012254:	60f8      	str	r0, [r7, #12]
 8012256:	60b9      	str	r1, [r7, #8]
 8012258:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  op_params.input_offset = -data.input_zero_point;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	691b      	ldr	r3, [r3, #16]
 801225e:	425a      	negs	r2, r3
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	695b      	ldr	r3, [r3, #20]
 8012268:	425a      	negs	r2, r3
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	699a      	ldr	r2, [r3, #24]
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	69da      	ldr	r2, [r3, #28]
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	6a1b      	ldr	r3, [r3, #32]
 8012282:	425a      	negs	r2, r3
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	781b      	ldrb	r3, [r3, #0]
 801228c:	4618      	mov	r0, r3
 801228e:	f000 f9b2 	bl	80125f6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8012292:	4603      	mov	r3, r0
 8012294:	461a      	mov	r2, r3
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	685b      	ldr	r3, [r3, #4]
 801229e:	b21a      	sxth	r2, r3
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	b21a      	sxth	r2, r3
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	689b      	ldr	r3, [r3, #8]
 80122b2:	b21a      	sxth	r2, r3
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 80122b8:	68bb      	ldr	r3, [r7, #8]
 80122ba:	685b      	ldr	r3, [r3, #4]
 80122bc:	b21a      	sxth	r2, r3
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	699b      	ldr	r3, [r3, #24]
 80122c6:	b21a      	sxth	r2, r3
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	695b      	ldr	r3, [r3, #20]
 80122d0:	b21a      	sxth	r2, r3
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	81da      	strh	r2, [r3, #14]
  op_params.depth_multiplier = params.depth_multiplier;
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	68db      	ldr	r3, [r3, #12]
 80122da:	b21a      	sxth	r2, r3
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	825a      	strh	r2, [r3, #18]
  op_params.quantized_activation_min = data.output_activation_min;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 80122f0:	bf00      	nop
}
 80122f2:	68f8      	ldr	r0, [r7, #12]
 80122f4:	3710      	adds	r7, #16
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}
	...

080122fc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
 80122fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122fe:	b09d      	sub	sp, #116	; 0x74
 8012300:	af0a      	add	r7, sp, #40	; 0x28
 8012302:	6278      	str	r0, [r7, #36]	; 0x24
 8012304:	6239      	str	r1, [r7, #32]
 8012306:	61fa      	str	r2, [r7, #28]
 8012308:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 801230a:	6a3b      	ldr	r3, [r7, #32]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	2b03      	cmp	r3, #3
 8012312:	bf0c      	ite	eq
 8012314:	2301      	moveq	r3, #1
 8012316:	2300      	movne	r3, #0
 8012318:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 801231c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012320:	f083 0301 	eor.w	r3, r3, #1
 8012324:	b2db      	uxtb	r3, r3
 8012326:	2b00      	cmp	r3, #0
 8012328:	d00f      	beq.n	801234a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 801232a:	6a3b      	ldr	r3, [r7, #32]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	2b02      	cmp	r3, #2
 8012332:	d00a      	beq.n	801234a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8012334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012336:	695c      	ldr	r4, [r3, #20]
 8012338:	4b6c      	ldr	r3, [pc, #432]	; (80124ec <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 801233a:	9300      	str	r3, [sp, #0]
 801233c:	2357      	movs	r3, #87	; 0x57
 801233e:	4a6c      	ldr	r2, [pc, #432]	; (80124f0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 8012340:	496c      	ldr	r1, [pc, #432]	; (80124f4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 8012342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012344:	47a0      	blx	r4
 8012346:	2301      	movs	r3, #1
 8012348:	e0cc      	b.n	80124e4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 801234a:	6a3b      	ldr	r3, [r7, #32]
 801234c:	685b      	ldr	r3, [r3, #4]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2b01      	cmp	r3, #1
 8012352:	d012      	beq.n	801237a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 8012354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012356:	695c      	ldr	r4, [r3, #20]
 8012358:	6a3b      	ldr	r3, [r7, #32]
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	2201      	movs	r2, #1
 8012360:	9203      	str	r2, [sp, #12]
 8012362:	9302      	str	r3, [sp, #8]
 8012364:	4b64      	ldr	r3, [pc, #400]	; (80124f8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 8012366:	9301      	str	r3, [sp, #4]
 8012368:	4b64      	ldr	r3, [pc, #400]	; (80124fc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 801236a:	9300      	str	r3, [sp, #0]
 801236c:	2358      	movs	r3, #88	; 0x58
 801236e:	4a60      	ldr	r2, [pc, #384]	; (80124f0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 8012370:	4963      	ldr	r1, [pc, #396]	; (8012500 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
 8012372:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012374:	47a0      	blx	r4
 8012376:	2301      	movs	r3, #1
 8012378:	e0b4      	b.n	80124e4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 801237a:	69fb      	ldr	r3, [r7, #28]
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 8012382:	69fb      	ldr	r3, [r7, #28]
 8012384:	6899      	ldr	r1, [r3, #8]
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	685c      	ldr	r4, [r3, #4]
 801238a:	69fb      	ldr	r3, [r7, #28]
 801238c:	699d      	ldr	r5, [r3, #24]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 801238e:	69fb      	ldr	r3, [r7, #28]
 8012390:	695b      	ldr	r3, [r3, #20]
      padding, &out_height, &out_width);
 8012392:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8012394:	f107 0008 	add.w	r0, r7, #8
 8012398:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801239c:	9207      	str	r2, [sp, #28]
 801239e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80123a2:	9206      	str	r2, [sp, #24]
 80123a4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80123a8:	9205      	str	r2, [sp, #20]
 80123aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80123ac:	9204      	str	r2, [sp, #16]
 80123ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80123b0:	9203      	str	r2, [sp, #12]
 80123b2:	69ba      	ldr	r2, [r7, #24]
 80123b4:	9202      	str	r2, [sp, #8]
 80123b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80123b8:	9201      	str	r2, [sp, #4]
 80123ba:	9300      	str	r3, [sp, #0]
 80123bc:	462b      	mov	r3, r5
 80123be:	4622      	mov	r2, r4
 80123c0:	f7ff fce9 	bl	8011d96 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 80123c4:	4634      	mov	r4, r6
 80123c6:	f107 0308 	add.w	r3, r7, #8
 80123ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80123cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 80123d0:	4b4c      	ldr	r3, [pc, #304]	; (8012504 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	461a      	mov	r2, r3
 80123d6:	6a39      	ldr	r1, [r7, #32]
 80123d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123da:	f7f8 fe6b 	bl	800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80123de:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 80123e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d10a      	bne.n	80123fc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x100>
 80123e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e8:	695c      	ldr	r4, [r3, #20]
 80123ea:	4b47      	ldr	r3, [pc, #284]	; (8012508 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
 80123ec:	9300      	str	r3, [sp, #0]
 80123ee:	2362      	movs	r3, #98	; 0x62
 80123f0:	4a3f      	ldr	r2, [pc, #252]	; (80124f0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 80123f2:	4940      	ldr	r1, [pc, #256]	; (80124f4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 80123f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123f6:	47a0      	blx	r4
 80123f8:	2301      	movs	r3, #1
 80123fa:	e073      	b.n	80124e4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 80123fc:	4b43      	ldr	r3, [pc, #268]	; (801250c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	461a      	mov	r2, r3
 8012402:	6a39      	ldr	r1, [r7, #32]
 8012404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012406:	f7f8 fe55 	bl	800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801240a:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 801240c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801240e:	2b00      	cmp	r3, #0
 8012410:	d10a      	bne.n	8012428 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x12c>
 8012412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012414:	695c      	ldr	r4, [r3, #20]
 8012416:	4b3e      	ldr	r3, [pc, #248]	; (8012510 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
 8012418:	9300      	str	r3, [sp, #0]
 801241a:	2364      	movs	r3, #100	; 0x64
 801241c:	4a34      	ldr	r2, [pc, #208]	; (80124f0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 801241e:	4935      	ldr	r1, [pc, #212]	; (80124f4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 8012420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012422:	47a0      	blx	r4
 8012424:	2301      	movs	r3, #1
 8012426:	e05d      	b.n	80124e4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 8012428:	4b3a      	ldr	r3, [pc, #232]	; (8012514 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	461a      	mov	r2, r3
 801242e:	6a39      	ldr	r1, [r7, #32]
 8012430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012432:	f7f8 fe6f 	bl	800b114 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8012436:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 8012438:	4b37      	ldr	r3, [pc, #220]	; (8012518 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21c>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	461a      	mov	r2, r3
 801243e:	6a39      	ldr	r1, [r7, #32]
 8012440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012442:	f7f8 fe47 	bl	800b0d4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8012446:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 8012448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801244a:	2b00      	cmp	r3, #0
 801244c:	d10a      	bne.n	8012464 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x168>
 801244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012450:	695c      	ldr	r4, [r3, #20]
 8012452:	4b32      	ldr	r3, [pc, #200]	; (801251c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x220>)
 8012454:	9300      	str	r3, [sp, #0]
 8012456:	2368      	movs	r3, #104	; 0x68
 8012458:	4a25      	ldr	r2, [pc, #148]	; (80124f0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 801245a:	4926      	ldr	r1, [pc, #152]	; (80124f4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 801245c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801245e:	47a0      	blx	r4
 8012460:	2301      	movs	r3, #1
 8012462:	e03f      	b.n	80124e4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 8012464:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8012468:	2b01      	cmp	r3, #1
 801246a:	d02e      	beq.n	80124ca <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 801246c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801246e:	689b      	ldr	r3, [r3, #8]
 8012470:	691b      	ldr	r3, [r3, #16]
 8012472:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 8012474:	69fb      	ldr	r3, [r7, #28]
 8012476:	3310      	adds	r3, #16
 8012478:	607b      	str	r3, [r7, #4]
 801247a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801247c:	321c      	adds	r2, #28
 801247e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012480:	3120      	adds	r1, #32
 8012482:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8012484:	302c      	adds	r0, #44	; 0x2c
 8012486:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8012488:	3430      	adds	r4, #48	; 0x30
 801248a:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 801248c:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 801248e:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8012490:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8012492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012494:	9308      	str	r3, [sp, #32]
 8012496:	9607      	str	r6, [sp, #28]
 8012498:	9506      	str	r5, [sp, #24]
 801249a:	9405      	str	r4, [sp, #20]
 801249c:	9004      	str	r0, [sp, #16]
 801249e:	9103      	str	r1, [sp, #12]
 80124a0:	9202      	str	r2, [sp, #8]
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	9301      	str	r3, [sp, #4]
 80124a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124a8:	9300      	str	r3, [sp, #0]
 80124aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80124ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80124b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80124b2:	f7f8 fe3f 	bl	800b134 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 80124b6:	4603      	mov	r3, r0
 80124b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80124bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d002      	beq.n	80124ca <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
 80124c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124c8:	e00c      	b.n	80124e4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 80124ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124cc:	691a      	ldr	r2, [r3, #16]
 80124ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80124d0:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 80124d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124d4:	691a      	ldr	r2, [r3, #16]
 80124d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80124d8:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 80124da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124dc:	691a      	ldr	r2, [r3, #16]
 80124de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80124e0:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 80124e2:	2300      	movs	r3, #0
}
 80124e4:	4618      	mov	r0, r3
 80124e6:	374c      	adds	r7, #76	; 0x4c
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124ec:	0802aaac 	.word	0x0802aaac
 80124f0:	0802aa48 	.word	0x0802aa48
 80124f4:	0802aa94 	.word	0x0802aa94
 80124f8:	0802aaec 	.word	0x0802aaec
 80124fc:	0802aaf0 	.word	0x0802aaf0
 8012500:	0802aad0 	.word	0x0802aad0
 8012504:	0802c1f0 	.word	0x0802c1f0
 8012508:	0802ab04 	.word	0x0802ab04
 801250c:	0802c1f4 	.word	0x0802c1f4
 8012510:	0802ab18 	.word	0x0802ab18
 8012514:	0802c1f8 	.word	0x0802c1f8
 8012518:	0802c1fc 	.word	0x0802c1fc
 801251c:	0802ab2c 	.word	0x0802ab2c

08012520 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8012520:	b580      	push	{r7, lr}
 8012522:	b082      	sub	sp, #8
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d101      	bne.n	8012532 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 801252e:	f012 fcc6 	bl	8024ebe <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
}
 8012536:	4618      	mov	r0, r3
 8012538:	3708      	adds	r7, #8
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}

0801253e <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801253e:	b480      	push	{r7}
 8012540:	b083      	sub	sp, #12
 8012542:	af00      	add	r7, sp, #0
 8012544:	6078      	str	r0, [r7, #4]
 8012546:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	681a      	ldr	r2, [r3, #0]
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	429a      	cmp	r2, r3
 8012552:	da01      	bge.n	8012558 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	e000      	b.n	801255a <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8012558:	687b      	ldr	r3, [r7, #4]
    }
 801255a:	4618      	mov	r0, r3
 801255c:	370c      	adds	r7, #12
 801255e:	46bd      	mov	sp, r7
 8012560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012564:	4770      	bx	lr

08012566 <_ZSt3expf>:
  { return __builtin_expf(__x); }
 8012566:	b580      	push	{r7, lr}
 8012568:	b082      	sub	sp, #8
 801256a:	af00      	add	r7, sp, #0
 801256c:	ed87 0a01 	vstr	s0, [r7, #4]
 8012570:	ed97 0a01 	vldr	s0, [r7, #4]
 8012574:	f012 fb84 	bl	8024c80 <expf>
 8012578:	eef0 7a40 	vmov.f32	s15, s0
 801257c:	eeb0 0a67 	vmov.f32	s0, s15
 8012580:	3708      	adds	r7, #8
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}

08012586 <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8012586:	b480      	push	{r7}
 8012588:	b083      	sub	sp, #12
 801258a:	af00      	add	r7, sp, #0
 801258c:	6078      	str	r0, [r7, #4]
 801258e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	f9b3 3000 	ldrsh.w	r3, [r3]
 801259c:	429a      	cmp	r2, r3
 801259e:	da01      	bge.n	80125a4 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	e000      	b.n	80125a6 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 80125a4:	687b      	ldr	r3, [r7, #4]
    }
 80125a6:	4618      	mov	r0, r3
 80125a8:	370c      	adds	r7, #12
 80125aa:	46bd      	mov	sp, r7
 80125ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b0:	4770      	bx	lr

080125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 80125b2:	b580      	push	{r7, lr}
 80125b4:	b086      	sub	sp, #24
 80125b6:	af00      	add	r7, sp, #0
 80125b8:	6078      	str	r0, [r7, #4]
 80125ba:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d003      	beq.n	80125ca <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d103      	bne.n	80125d2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f7f9 fafc 	bl	800bbc8 <_ZN6tflite12RuntimeShapeC1Ev>
 80125d0:	e00d      	b.n	80125ee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	685b      	ldr	r3, [r3, #4]
 80125d6:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	3304      	adds	r3, #4
 80125e2:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 80125e4:	68fa      	ldr	r2, [r7, #12]
 80125e6:	6939      	ldr	r1, [r7, #16]
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f7f9 fafb 	bl	800bbe4 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	3718      	adds	r7, #24
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}

080125f6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
 80125f6:	b480      	push	{r7}
 80125f8:	b083      	sub	sp, #12
 80125fa:	af00      	add	r7, sp, #0
 80125fc:	4603      	mov	r3, r0
 80125fe:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 8012600:	79fb      	ldrb	r3, [r7, #7]
 8012602:	2b01      	cmp	r3, #1
 8012604:	d002      	beq.n	801260c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x16>
 8012606:	2b02      	cmp	r3, #2
 8012608:	d002      	beq.n	8012610 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1a>
 801260a:	e003      	b.n	8012614 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 801260c:	2301      	movs	r3, #1
 801260e:	e002      	b.n	8012616 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 8012610:	2302      	movs	r3, #2
 8012612:	e000      	b.n	8012616 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 8012614:	2300      	movs	r3, #0
  }
}
 8012616:	4618      	mov	r0, r3
 8012618:	370c      	adds	r7, #12
 801261a:	46bd      	mov	sp, r7
 801261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012620:	4770      	bx	lr

08012622 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 8012622:	b580      	push	{r7, lr}
 8012624:	b084      	sub	sp, #16
 8012626:	af00      	add	r7, sp, #0
 8012628:	ed87 0a03 	vstr	s0, [r7, #12]
 801262c:	edc7 0a02 	vstr	s1, [r7, #8]
 8012630:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 8012634:	f107 0208 	add.w	r2, r7, #8
 8012638:	f107 030c 	add.w	r3, r7, #12
 801263c:	4611      	mov	r1, r2
 801263e:	4618      	mov	r0, r3
 8012640:	f7f8 fbea 	bl	800ae18 <_ZSt3maxIfERKT_S2_S2_>
 8012644:	4602      	mov	r2, r0
 8012646:	1d3b      	adds	r3, r7, #4
 8012648:	4619      	mov	r1, r3
 801264a:	4610      	mov	r0, r2
 801264c:	f7f8 fbcb 	bl	800ade6 <_ZSt3minIfERKT_S2_S2_>
 8012650:	4603      	mov	r3, r0
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	ee07 3a90 	vmov	s15, r3
}
 8012658:	eeb0 0a67 	vmov.f32	s0, s15
 801265c:	3710      	adds	r7, #16
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}

08012662 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8012662:	b580      	push	{r7, lr}
 8012664:	b086      	sub	sp, #24
 8012666:	af00      	add	r7, sp, #0
 8012668:	6078      	str	r0, [r7, #4]
 801266a:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f7f9 fae2 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012672:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8012674:	683b      	ldr	r3, [r7, #0]
 8012676:	2b00      	cmp	r3, #0
 8012678:	db03      	blt.n	8012682 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 801267a:	683a      	ldr	r2, [r7, #0]
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	429a      	cmp	r2, r3
 8012680:	db01      	blt.n	8012686 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8012682:	f012 fc1c 	bl	8024ebe <abort>
  const auto* dims_data = shape.DimsData();
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f7fe fa39 	bl	8010afe <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801268c:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 801268e:	2301      	movs	r3, #1
 8012690:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8012692:	2300      	movs	r3, #0
 8012694:	613b      	str	r3, [r7, #16]
 8012696:	693a      	ldr	r2, [r7, #16]
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	429a      	cmp	r2, r3
 801269c:	da12      	bge.n	80126c4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 801269e:	693a      	ldr	r2, [r7, #16]
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	429a      	cmp	r2, r3
 80126a4:	d005      	beq.n	80126b2 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	009b      	lsls	r3, r3, #2
 80126aa:	68ba      	ldr	r2, [r7, #8]
 80126ac:	4413      	add	r3, r2
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	e000      	b.n	80126b4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 80126b2:	2301      	movs	r3, #1
 80126b4:	697a      	ldr	r2, [r7, #20]
 80126b6:	fb03 f302 	mul.w	r3, r3, r2
 80126ba:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	3301      	adds	r3, #1
 80126c0:	613b      	str	r3, [r7, #16]
 80126c2:	e7e8      	b.n	8012696 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 80126c4:	697b      	ldr	r3, [r7, #20]
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3718      	adds	r7, #24
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}

080126ce <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 80126ce:	b590      	push	{r4, r7, lr}
 80126d0:	b087      	sub	sp, #28
 80126d2:	af00      	add	r7, sp, #0
 80126d4:	60f8      	str	r0, [r7, #12]
 80126d6:	60b9      	str	r1, [r7, #8]
 80126d8:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 80126da:	68f8      	ldr	r0, [r7, #12]
 80126dc:	f7f9 faab 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80126e0:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 80126e2:	2300      	movs	r3, #0
 80126e4:	617b      	str	r3, [r7, #20]
 80126e6:	697a      	ldr	r2, [r7, #20]
 80126e8:	693b      	ldr	r3, [r7, #16]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	da15      	bge.n	801271a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 80126ee:	697a      	ldr	r2, [r7, #20]
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	429a      	cmp	r2, r3
 80126f4:	d00d      	beq.n	8012712 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 80126f6:	6979      	ldr	r1, [r7, #20]
 80126f8:	68f8      	ldr	r0, [r7, #12]
 80126fa:	f7fe f9db 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80126fe:	4604      	mov	r4, r0
 8012700:	6979      	ldr	r1, [r7, #20]
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f7fe f9d6 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012708:	4603      	mov	r3, r0
 801270a:	429c      	cmp	r4, r3
 801270c:	d001      	beq.n	8012712 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 801270e:	f012 fbd6 	bl	8024ebe <abort>
  for (int i = 0; i < dims_count; ++i) {
 8012712:	697b      	ldr	r3, [r7, #20]
 8012714:	3301      	adds	r3, #1
 8012716:	617b      	str	r3, [r7, #20]
 8012718:	e7e5      	b.n	80126e6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 801271a:	68b9      	ldr	r1, [r7, #8]
 801271c:	68f8      	ldr	r0, [r7, #12]
 801271e:	f7ff ffa0 	bl	8012662 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8012722:	4603      	mov	r3, r0
}
 8012724:	4618      	mov	r0, r3
 8012726:	371c      	adds	r7, #28
 8012728:	46bd      	mov	sp, r7
 801272a:	bd90      	pop	{r4, r7, pc}

0801272c <_ZN6tflite17CountLeadingZerosImEEiT_>:
  return result;
}
#endif

template <typename T>
int CountLeadingZeros(T integer_input) {
 801272c:	b480      	push	{r7}
 801272e:	b083      	sub	sp, #12
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d003      	beq.n	8012742 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 8012740:	e000      	b.n	8012744 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 8012742:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 8012744:	4618      	mov	r0, r3
 8012746:	370c      	adds	r7, #12
 8012748:	46bd      	mov	sp, r7
 801274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274e:	4770      	bx	lr

08012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	4618      	mov	r0, r3
 801275c:	370c      	adds	r7, #12
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr

08012766 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8012766:	b590      	push	{r4, r7, lr}
 8012768:	b085      	sub	sp, #20
 801276a:	af00      	add	r7, sp, #0
 801276c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801276e:	f107 030c 	add.w	r3, r7, #12
 8012772:	4618      	mov	r0, r3
 8012774:	f7ff ffec 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012778:	4604      	mov	r4, r0
 801277a:	6878      	ldr	r0, [r7, #4]
 801277c:	f7ff f958 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012780:	4603      	mov	r3, r0
 8012782:	6023      	str	r3, [r4, #0]
    return retval;
 8012784:	68fb      	ldr	r3, [r7, #12]
  }
 8012786:	4618      	mov	r0, r3
 8012788:	3714      	adds	r7, #20
 801278a:	46bd      	mov	sp, r7
 801278c:	bd90      	pop	{r4, r7, pc}

0801278e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801278e:	b580      	push	{r7, lr}
 8012790:	b082      	sub	sp, #8
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8012796:	2100      	movs	r1, #0
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f7fe fd85 	bl	80112a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801279e:	4603      	mov	r3, r0
}
 80127a0:	4618      	mov	r0, r3
 80127a2:	3708      	adds	r7, #8
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}

080127a8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f000 f813 	bl	80127dc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 80127b6:	4603      	mov	r3, r0
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	3708      	adds	r7, #8
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}

080127c0 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 80127c0:	b480      	push	{r7}
 80127c2:	b083      	sub	sp, #12
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	6039      	str	r1, [r7, #0]
  return a - b;
 80127ca:	687a      	ldr	r2, [r7, #4]
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	1ad3      	subs	r3, r2, r3
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	370c      	adds	r7, #12
 80127d4:	46bd      	mov	sp, r7
 80127d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127da:	4770      	bx	lr

080127dc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80127dc:	b580      	push	{r7, lr}
 80127de:	b082      	sub	sp, #8
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80127e4:	2101      	movs	r1, #1
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f7fe fd5e 	bl	80112a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80127ec:	4603      	mov	r3, r0
  }
 80127ee:	4618      	mov	r0, r3
 80127f0:	3708      	adds	r7, #8
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}

080127f6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 80127f6:	b480      	push	{r7}
 80127f8:	b089      	sub	sp, #36	; 0x24
 80127fa:	af00      	add	r7, sp, #0
 80127fc:	6078      	str	r0, [r7, #4]
 80127fe:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	461a      	mov	r2, r3
 8012804:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8012808:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 801280c:	2201      	movs	r2, #1
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	fa02 f303 	lsl.w	r3, r2, r3
 8012814:	461a      	mov	r2, r3
 8012816:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801281a:	69f9      	ldr	r1, [r7, #28]
 801281c:	fb02 f001 	mul.w	r0, r2, r1
 8012820:	69b9      	ldr	r1, [r7, #24]
 8012822:	fb03 f101 	mul.w	r1, r3, r1
 8012826:	4401      	add	r1, r0
 8012828:	69b8      	ldr	r0, [r7, #24]
 801282a:	fba0 2302 	umull	r2, r3, r0, r2
 801282e:	4419      	add	r1, r3
 8012830:	460b      	mov	r3, r1
 8012832:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8012836:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 801283a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801283e:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 8012840:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012844:	60bb      	str	r3, [r7, #8]
             ? min
 8012846:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801284a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801284e:	f173 33ff 	sbcs.w	r3, r3, #4294967295	; 0xffffffff
 8012852:	db0e      	blt.n	8012872 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 8012854:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012858:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801285c:	f04f 0100 	mov.w	r1, #0
 8012860:	4290      	cmp	r0, r2
 8012862:	eb71 0303 	sbcs.w	r3, r1, r3
 8012866:	db01      	blt.n	801286c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x76>
 8012868:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 801286a:	e004      	b.n	8012876 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             : wide_shifted > max ? max
 801286c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 8012870:	e001      	b.n	8012876 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             ? min
 8012872:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012876:	4618      	mov	r0, r3
 8012878:	3724      	adds	r7, #36	; 0x24
 801287a:	46bd      	mov	sp, r7
 801287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012880:	4770      	bx	lr

08012882 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 8012882:	b590      	push	{r4, r7, lr}
 8012884:	b085      	sub	sp, #20
 8012886:	af00      	add	r7, sp, #0
 8012888:	60f8      	str	r0, [r7, #12]
 801288a:	60b9      	str	r1, [r7, #8]
 801288c:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 801288e:	68b9      	ldr	r1, [r7, #8]
 8012890:	68f8      	ldr	r0, [r7, #12]
 8012892:	f7ff f8d8 	bl	8011a46 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012896:	4604      	mov	r4, r0
 8012898:	68f8      	ldr	r0, [r7, #12]
 801289a:	f7ff f938 	bl	8011b0e <_ZN8gemmlowp6BitNotIlEET_S1_>
 801289e:	4603      	mov	r3, r0
 80128a0:	6879      	ldr	r1, [r7, #4]
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7ff f8cf 	bl	8011a46 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80128a8:	4603      	mov	r3, r0
 80128aa:	4619      	mov	r1, r3
 80128ac:	4620      	mov	r0, r4
 80128ae:	f000 f805 	bl	80128bc <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 80128b2:	4603      	mov	r3, r0
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	3714      	adds	r7, #20
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd90      	pop	{r4, r7, pc}

080128bc <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 80128bc:	b480      	push	{r7}
 80128be:	b083      	sub	sp, #12
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6039      	str	r1, [r7, #0]
  return a ^ b;
 80128c6:	687a      	ldr	r2, [r7, #4]
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	4053      	eors	r3, r2
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	370c      	adds	r7, #12
 80128d0:	46bd      	mov	sp, r7
 80128d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d6:	4770      	bx	lr

080128d8 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 80128d8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80128dc:	b08b      	sub	sp, #44	; 0x2c
 80128de:	af00      	add	r7, sp, #0
 80128e0:	6078      	str	r0, [r7, #4]
 80128e2:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 80128e4:	6879      	ldr	r1, [r7, #4]
 80128e6:	4608      	mov	r0, r1
 80128e8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80128ec:	e9c7 0108 	strd	r0, r1, [r7, #32]
  std::int64_t b64 = b;
 80128f0:	6839      	ldr	r1, [r7, #0]
 80128f2:	4608      	mov	r0, r1
 80128f4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80128f8:	e9c7 0106 	strd	r0, r1, [r7, #24]
  std::int64_t sum = a64 + b64;
 80128fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8012900:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012904:	eb18 0a00 	adds.w	sl, r8, r0
 8012908:	eb49 0b01 	adc.w	fp, r9, r1
 801290c:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8012910:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012914:	2800      	cmp	r0, #0
 8012916:	f171 0100 	sbcs.w	r1, r1, #0
 801291a:	db04      	blt.n	8012926 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4e>
 801291c:	f04f 0001 	mov.w	r0, #1
 8012920:	f04f 0100 	mov.w	r1, #0
 8012924:	e003      	b.n	801292e <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x56>
 8012926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801292a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801292e:	e9c7 0102 	strd	r0, r1, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8012932:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8012936:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801293a:	eb18 0400 	adds.w	r4, r8, r0
 801293e:	eb49 0501 	adc.w	r5, r9, r1
 8012942:	0fe9      	lsrs	r1, r5, #31
 8012944:	4608      	mov	r0, r1
 8012946:	f04f 0100 	mov.w	r1, #0
 801294a:	1902      	adds	r2, r0, r4
 801294c:	eb41 0305 	adc.w	r3, r1, r5
 8012950:	f04f 0000 	mov.w	r0, #0
 8012954:	f04f 0100 	mov.w	r1, #0
 8012958:	0850      	lsrs	r0, r2, #1
 801295a:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 801295e:	1059      	asrs	r1, r3, #1
 8012960:	4602      	mov	r2, r0
 8012962:	460b      	mov	r3, r1
 8012964:	4613      	mov	r3, r2
}
 8012966:	4618      	mov	r0, r3
 8012968:	372c      	adds	r7, #44	; 0x2c
 801296a:	46bd      	mov	sp, r7
 801296c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012970:	4770      	bx	lr

08012972 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8012972:	b580      	push	{r7, lr}
 8012974:	b084      	sub	sp, #16
 8012976:	af00      	add	r7, sp, #0
 8012978:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801297a:	f107 030c 	add.w	r3, r7, #12
 801297e:	4618      	mov	r0, r3
 8012980:	f7ff fee6 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012984:	4602      	mov	r2, r0
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6013      	str	r3, [r2, #0]
    return retval;
 801298a:	68fb      	ldr	r3, [r7, #12]
  }
 801298c:	4618      	mov	r0, r3
 801298e:	3710      	adds	r7, #16
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}

08012994 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 8012994:	b580      	push	{r7, lr}
 8012996:	b08a      	sub	sp, #40	; 0x28
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 801299c:	f000 f9f7 	bl	8012d8e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 80129a0:	4603      	mov	r3, r0
 80129a2:	4619      	mov	r1, r3
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	f000 f9fd 	bl	8012da4 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80129aa:	4603      	mov	r3, r0
 80129ac:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 80129ae:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 80129b2:	f000 fa29 	bl	8012e08 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 80129b6:	4603      	mov	r3, r0
 80129b8:	4618      	mov	r0, r3
 80129ba:	f000 fa11 	bl	8012de0 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 80129be:	4603      	mov	r3, r0
 80129c0:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 80129c2:	4823      	ldr	r0, [pc, #140]	; (8012a50 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 80129c4:	f000 fa20 	bl	8012e08 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 80129c8:	4603      	mov	r3, r0
 80129ca:	4618      	mov	r0, r3
 80129cc:	f000 fa08 	bl	8012de0 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 80129d0:	4603      	mov	r3, r0
 80129d2:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 80129d4:	69b9      	ldr	r1, [r7, #24]
 80129d6:	6a38      	ldr	r0, [r7, #32]
 80129d8:	f000 fa23 	bl	8012e22 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80129dc:	4603      	mov	r3, r0
 80129de:	4619      	mov	r1, r3
 80129e0:	69f8      	ldr	r0, [r7, #28]
 80129e2:	f000 fa40 	bl	8012e66 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80129e6:	4603      	mov	r3, r0
 80129e8:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 80129ea:	2300      	movs	r3, #0
 80129ec:	627b      	str	r3, [r7, #36]	; 0x24
 80129ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f0:	2b02      	cmp	r3, #2
 80129f2:	dc21      	bgt.n	8012a38 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 80129f4:	6979      	ldr	r1, [r7, #20]
 80129f6:	6a38      	ldr	r0, [r7, #32]
 80129f8:	f000 fa13 	bl	8012e22 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80129fc:	4603      	mov	r3, r0
 80129fe:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 8012a00:	f000 fa4f 	bl	8012ea2 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8012a04:	4603      	mov	r3, r0
 8012a06:	6939      	ldr	r1, [r7, #16]
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f000 fa53 	bl	8012eb4 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 8012a12:	68f9      	ldr	r1, [r7, #12]
 8012a14:	6978      	ldr	r0, [r7, #20]
 8012a16:	f000 fa6b 	bl	8012ef0 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f000 fa89 	bl	8012f34 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8012a22:	4603      	mov	r3, r0
 8012a24:	4619      	mov	r1, r3
 8012a26:	6978      	ldr	r0, [r7, #20]
 8012a28:	f000 fa1d 	bl	8012e66 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8012a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a32:	3301      	adds	r3, #1
 8012a34:	627b      	str	r3, [r7, #36]	; 0x24
 8012a36:	e7da      	b.n	80129ee <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 8012a38:	6978      	ldr	r0, [r7, #20]
 8012a3a:	f000 fa95 	bl	8012f68 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	4618      	mov	r0, r3
 8012a42:	f000 faa7 	bl	8012f94 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8012a46:	4603      	mov	r3, r0
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3728      	adds	r7, #40	; 0x28
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	c3c3c3c4 	.word	0xc3c3c3c4

08012a54 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b084      	sub	sp, #16
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8012a5c:	f107 030c 	add.w	r3, r7, #12
 8012a60:	4618      	mov	r0, r3
 8012a62:	f000 f989 	bl	8012d78 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012a66:	4602      	mov	r2, r0
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	6013      	str	r3, [r2, #0]
    return retval;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
  }
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3710      	adds	r7, #16
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}
	...

08012a78 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8012a78:	b590      	push	{r4, r7, lr}
 8012a7a:	b091      	sub	sp, #68	; 0x44
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8012a80:	f000 faa2 	bl	8012fc8 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8012a84:	4603      	mov	r3, r0
 8012a86:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8012a88:	2001      	movs	r0, #1
 8012a8a:	f000 faa6 	bl	8012fda <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	4619      	mov	r1, r3
 8012a92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012a94:	f000 fab5 	bl	8013002 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8012a9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f000 facd 	bl	801303e <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f000 faaa 	bl	8013002 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8012ab2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ab4:	f000 fae1 	bl	801307a <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	4618      	mov	r0, r3
 8012abc:	f000 faf8 	bl	80130b0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8012ac4:	6879      	ldr	r1, [r7, #4]
 8012ac6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ac8:	f000 fa9b 	bl	8013002 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012acc:	4603      	mov	r3, r0
 8012ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8012ad0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f000 f94f 	bl	8012d78 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012ada:	4603      	mov	r3, r0
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8012ae0:	4883      	ldr	r0, [pc, #524]	; (8012cf0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8012ae2:	f7ff fe54 	bl	801278e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f7ff fe3c 	bl	8012766 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012aee:	4603      	mov	r3, r0
 8012af0:	627b      	str	r3, [r7, #36]	; 0x24
 8012af2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8012af6:	f7fe ff9b 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012afa:	4603      	mov	r3, r0
 8012afc:	4619      	mov	r1, r3
 8012afe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012b00:	f7fe ffa1 	bl	8011a46 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012b04:	4603      	mov	r3, r0
 8012b06:	4618      	mov	r0, r3
 8012b08:	f7fe fff0 	bl	8011aec <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012b0c:	4604      	mov	r4, r0
 8012b0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b12:	f000 fb2f 	bl	8013174 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012b16:	4603      	mov	r3, r0
 8012b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b1a:	4619      	mov	r1, r3
 8012b1c:	4620      	mov	r0, r4
 8012b1e:	f000 fb4b 	bl	80131b8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012b22:	4603      	mov	r3, r0
 8012b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8012b26:	4873      	ldr	r0, [pc, #460]	; (8012cf4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8012b28:	f7ff fe31 	bl	801278e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7ff fe19 	bl	8012766 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012b34:	4603      	mov	r3, r0
 8012b36:	623b      	str	r3, [r7, #32]
 8012b38:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8012b3c:	f7fe ff78 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012b40:	4603      	mov	r3, r0
 8012b42:	4619      	mov	r1, r3
 8012b44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012b46:	f7fe ff7e 	bl	8011a46 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f7fe ffcd 	bl	8011aec <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012b52:	4604      	mov	r4, r0
 8012b54:	6a39      	ldr	r1, [r7, #32]
 8012b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b58:	f000 fb0c 	bl	8013174 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b60:	4619      	mov	r1, r3
 8012b62:	4620      	mov	r0, r4
 8012b64:	f000 fb28 	bl	80131b8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 8012b6c:	4862      	ldr	r0, [pc, #392]	; (8012cf8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8012b6e:	f7ff fe0e 	bl	801278e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012b72:	4603      	mov	r3, r0
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7ff fdf6 	bl	8012766 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	61fb      	str	r3, [r7, #28]
 8012b7e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8012b82:	f7fe ff55 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012b86:	4603      	mov	r3, r0
 8012b88:	4619      	mov	r1, r3
 8012b8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012b8c:	f7fe ff5b 	bl	8011a46 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012b90:	4603      	mov	r3, r0
 8012b92:	4618      	mov	r0, r3
 8012b94:	f7fe ffaa 	bl	8011aec <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012b98:	4604      	mov	r4, r0
 8012b9a:	69f9      	ldr	r1, [r7, #28]
 8012b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b9e:	f000 fae9 	bl	8013174 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ba6:	4619      	mov	r1, r3
 8012ba8:	4620      	mov	r0, r4
 8012baa:	f000 fb05 	bl	80131b8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8012bb2:	4852      	ldr	r0, [pc, #328]	; (8012cfc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8012bb4:	f7ff fdeb 	bl	801278e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7ff fdd3 	bl	8012766 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	61bb      	str	r3, [r7, #24]
 8012bc4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8012bc8:	f7fe ff32 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	4619      	mov	r1, r3
 8012bd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012bd2:	f7fe ff38 	bl	8011a46 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7fe ff87 	bl	8011aec <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012bde:	4604      	mov	r4, r0
 8012be0:	69b9      	ldr	r1, [r7, #24]
 8012be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012be4:	f000 fac6 	bl	8013174 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012be8:	4603      	mov	r3, r0
 8012bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012bec:	4619      	mov	r1, r3
 8012bee:	4620      	mov	r0, r4
 8012bf0:	f000 fae2 	bl	80131b8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8012bf8:	4841      	ldr	r0, [pc, #260]	; (8012d00 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8012bfa:	f7ff fdc8 	bl	801278e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	4618      	mov	r0, r3
 8012c02:	f7ff fdb0 	bl	8012766 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012c06:	4603      	mov	r3, r0
 8012c08:	617b      	str	r3, [r7, #20]
 8012c0a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8012c0e:	f7fe ff0f 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012c12:	4603      	mov	r3, r0
 8012c14:	4619      	mov	r1, r3
 8012c16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012c18:	f7fe ff15 	bl	8011a46 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7fe ff64 	bl	8011aec <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012c24:	4604      	mov	r4, r0
 8012c26:	6979      	ldr	r1, [r7, #20]
 8012c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c2a:	f000 faa3 	bl	8013174 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c32:	4619      	mov	r1, r3
 8012c34:	4620      	mov	r0, r4
 8012c36:	f000 fabf 	bl	80131b8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 8012c3e:	4831      	ldr	r0, [pc, #196]	; (8012d04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8012c40:	f7ff fda5 	bl	801278e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012c44:	4603      	mov	r3, r0
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7ff fd8d 	bl	8012766 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	613b      	str	r3, [r7, #16]
 8012c50:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8012c54:	f7fe feec 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012c5e:	f7fe fef2 	bl	8011a46 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012c62:	4603      	mov	r3, r0
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7fe ff41 	bl	8011aec <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	6939      	ldr	r1, [r7, #16]
 8012c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c70:	f000 fa80 	bl	8013174 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012c74:	4603      	mov	r3, r0
 8012c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c78:	4619      	mov	r1, r3
 8012c7a:	4620      	mov	r0, r4
 8012c7c:	f000 fa9c 	bl	80131b8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012c80:	4603      	mov	r3, r0
 8012c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 8012c84:	20f2      	movs	r0, #242	; 0xf2
 8012c86:	f7ff fd82 	bl	801278e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f7ff fd6a 	bl	8012766 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012c92:	4603      	mov	r3, r0
 8012c94:	60fb      	str	r3, [r7, #12]
 8012c96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8012c9a:	f7fe fec9 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	4619      	mov	r1, r3
 8012ca2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012ca4:	f7fe fecf 	bl	8011a46 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7fe ff1e 	bl	8011aec <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012cb0:	4604      	mov	r4, r0
 8012cb2:	68f9      	ldr	r1, [r7, #12]
 8012cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cb6:	f000 fa5d 	bl	8013174 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	f000 fa79 	bl	80131b8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f000 fa95 	bl	80131fa <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8012cd0:	4604      	mov	r4, r0
 8012cd2:	f000 f85c 	bl	8012d8e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cda:	4619      	mov	r1, r3
 8012cdc:	4620      	mov	r0, r4
 8012cde:	f000 fa6b 	bl	80131b8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8012ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8012ce8:	4618      	mov	r0, r3
 8012cea:	3744      	adds	r7, #68	; 0x44
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bd90      	pop	{r4, r7, pc}
 8012cf0:	63afbe7b 	.word	0x63afbe7b
 8012cf4:	4da2cbf2 	.word	0x4da2cbf2
 8012cf8:	2f16ac6c 	.word	0x2f16ac6c
 8012cfc:	1152aaa4 	.word	0x1152aaa4
 8012d00:	02582ab7 	.word	0x02582ab7
 8012d04:	000afe11 	.word	0x000afe11

08012d08 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8012d08:	b5b0      	push	{r4, r5, r7, lr}
 8012d0a:	b084      	sub	sp, #16
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8012d10:	1d3b      	adds	r3, r7, #4
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7ff fd1c 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	681d      	ldr	r5, [r3, #0]
 8012d1c:	f107 030c 	add.w	r3, r7, #12
 8012d20:	4618      	mov	r0, r3
 8012d22:	f000 fa7c 	bl	801321e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8012d26:	4604      	mov	r4, r0
 8012d28:	4628      	mov	r0, r5
 8012d2a:	f000 fa83 	bl	8013234 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	6023      	str	r3, [r4, #0]
  return result;
 8012d32:	68fb      	ldr	r3, [r7, #12]
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3710      	adds	r7, #16
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bdb0      	pop	{r4, r5, r7, pc}

08012d3c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8012d3c:	b590      	push	{r4, r7, lr}
 8012d3e:	b083      	sub	sp, #12
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
 8012d44:	6039      	str	r1, [r7, #0]
 8012d46:	1d3b      	adds	r3, r7, #4
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f000 fa68 	bl	801321e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	681c      	ldr	r4, [r3, #0]
 8012d52:	463b      	mov	r3, r7
 8012d54:	4618      	mov	r0, r3
 8012d56:	f000 fa62 	bl	801321e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	4619      	mov	r1, r3
 8012d60:	4620      	mov	r0, r4
 8012d62:	f7fe fea1 	bl	8011aa8 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8012d66:	4603      	mov	r3, r0
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f000 fa6f 	bl	801324c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	4618      	mov	r0, r3
 8012d72:	370c      	adds	r7, #12
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd90      	pop	{r4, r7, pc}

08012d78 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 8012d78:	b480      	push	{r7}
 8012d7a:	b083      	sub	sp, #12
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	4618      	mov	r0, r3
 8012d84:	370c      	adds	r7, #12
 8012d86:	46bd      	mov	sp, r7
 8012d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8c:	4770      	bx	lr

08012d8e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 8012d8e:	b580      	push	{r7, lr}
 8012d90:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8012d92:	f000 fa82 	bl	801329a <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 8012d96:	4603      	mov	r3, r0
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7ff fce4 	bl	8012766 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012d9e:	4603      	mov	r3, r0
  }
 8012da0:	4618      	mov	r0, r3
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 8012da4:	b590      	push	{r4, r7, lr}
 8012da6:	b083      	sub	sp, #12
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
 8012dae:	1d3b      	adds	r3, r7, #4
 8012db0:	4618      	mov	r0, r3
 8012db2:	f7ff fccd 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012db6:	4603      	mov	r3, r0
 8012db8:	681c      	ldr	r4, [r3, #0]
 8012dba:	463b      	mov	r3, r7
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f7ff fcc7 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	4619      	mov	r1, r3
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f7ff fd85 	bl	80128d8 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7ff fdce 	bl	8012972 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	4618      	mov	r0, r3
 8012dda:	370c      	adds	r7, #12
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd90      	pop	{r4, r7, pc}

08012de0 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8012de0:	b590      	push	{r4, r7, lr}
 8012de2:	b085      	sub	sp, #20
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8012de8:	f107 030c 	add.w	r3, r7, #12
 8012dec:	4618      	mov	r0, r3
 8012dee:	f000 fa5b 	bl	80132a8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012df2:	4604      	mov	r4, r0
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f7fe fe1b 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	6023      	str	r3, [r4, #0]
    return retval;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
  }
 8012e00:	4618      	mov	r0, r3
 8012e02:	3714      	adds	r7, #20
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd90      	pop	{r4, r7, pc}

08012e08 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b082      	sub	sp, #8
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8012e10:	2100      	movs	r1, #0
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f7fe fa48 	bl	80112a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8012e18:	4603      	mov	r3, r0
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3708      	adds	r7, #8
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}

08012e22 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8012e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e24:	b085      	sub	sp, #20
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	6078      	str	r0, [r7, #4]
 8012e2a:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8012e2c:	1d3b      	adds	r3, r7, #4
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7ff fc8e 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012e34:	4603      	mov	r3, r0
 8012e36:	681d      	ldr	r5, [r3, #0]
 8012e38:	463b      	mov	r3, r7
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f000 fa34 	bl	80132a8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012e40:	4603      	mov	r3, r0
 8012e42:	681e      	ldr	r6, [r3, #0]
 8012e44:	f107 030c 	add.w	r3, r7, #12
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f000 fa2d 	bl	80132a8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012e4e:	4604      	mov	r4, r0
 8012e50:	4631      	mov	r1, r6
 8012e52:	4628      	mov	r0, r5
 8012e54:	f7fd fdbe 	bl	80109d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	6023      	str	r3, [r4, #0]
  return c;
 8012e5c:	68fb      	ldr	r3, [r7, #12]
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	3714      	adds	r7, #20
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012e66 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8012e66:	b590      	push	{r4, r7, lr}
 8012e68:	b083      	sub	sp, #12
 8012e6a:	af00      	add	r7, sp, #0
 8012e6c:	6078      	str	r0, [r7, #4]
 8012e6e:	6039      	str	r1, [r7, #0]
 8012e70:	1d3b      	adds	r3, r7, #4
 8012e72:	4618      	mov	r0, r3
 8012e74:	f000 fa18 	bl	80132a8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	681c      	ldr	r4, [r3, #0]
 8012e7c:	463b      	mov	r3, r7
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f000 fa12 	bl	80132a8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012e84:	4603      	mov	r3, r0
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	4619      	mov	r1, r3
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	f7fe fe0c 	bl	8011aa8 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8012e90:	4603      	mov	r3, r0
 8012e92:	4618      	mov	r0, r3
 8012e94:	f000 fa13 	bl	80132be <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	370c      	adds	r7, #12
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd90      	pop	{r4, r7, pc}

08012ea2 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 8012ea2:	b580      	push	{r7, lr}
 8012ea4:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8012ea6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8012eaa:	f7ff ff99 	bl	8012de0 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8012eae:	4603      	mov	r3, r0
  }
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	bd80      	pop	{r7, pc}

08012eb4 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8012eb4:	b590      	push	{r4, r7, lr}
 8012eb6:	b083      	sub	sp, #12
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	6039      	str	r1, [r7, #0]
 8012ebe:	1d3b      	adds	r3, r7, #4
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f000 f9f1 	bl	80132a8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	681c      	ldr	r4, [r3, #0]
 8012eca:	463b      	mov	r3, r7
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f000 f9eb 	bl	80132a8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	4620      	mov	r0, r4
 8012eda:	f7ff fc71 	bl	80127c0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f000 f9ec 	bl	80132be <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	4618      	mov	r0, r3
 8012eea:	370c      	adds	r7, #12
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd90      	pop	{r4, r7, pc}

08012ef0 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8012ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ef2:	b085      	sub	sp, #20
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
 8012ef8:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8012efa:	1d3b      	adds	r3, r7, #4
 8012efc:	4618      	mov	r0, r3
 8012efe:	f000 f9d3 	bl	80132a8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012f02:	4603      	mov	r3, r0
 8012f04:	681d      	ldr	r5, [r3, #0]
 8012f06:	463b      	mov	r3, r7
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f000 f9cd 	bl	80132a8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	681e      	ldr	r6, [r3, #0]
 8012f12:	f107 030c 	add.w	r3, r7, #12
 8012f16:	4618      	mov	r0, r3
 8012f18:	f000 f9e2 	bl	80132e0 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8012f1c:	4604      	mov	r4, r0
 8012f1e:	4631      	mov	r1, r6
 8012f20:	4628      	mov	r0, r5
 8012f22:	f7fd fd57 	bl	80109d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8012f26:	4603      	mov	r3, r0
 8012f28:	6023      	str	r3, [r4, #0]
  return c;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
}
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	3714      	adds	r7, #20
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012f34 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8012f34:	b5b0      	push	{r4, r5, r7, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8012f3c:	1d3b      	adds	r3, r7, #4
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f000 f9ce 	bl	80132e0 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8012f44:	4603      	mov	r3, r0
 8012f46:	681d      	ldr	r5, [r3, #0]
 8012f48:	f107 030c 	add.w	r3, r7, #12
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f000 f9ab 	bl	80132a8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012f52:	4604      	mov	r4, r0
 8012f54:	4628      	mov	r0, r5
 8012f56:	f000 f9ce 	bl	80132f6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	6023      	str	r3, [r4, #0]
  return result;
 8012f5e:	68fb      	ldr	r3, [r7, #12]
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	3710      	adds	r7, #16
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bdb0      	pop	{r4, r5, r7, pc}

08012f68 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 8012f68:	b590      	push	{r4, r7, lr}
 8012f6a:	b085      	sub	sp, #20
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 8012f70:	1d3b      	adds	r3, r7, #4
 8012f72:	4618      	mov	r0, r3
 8012f74:	f000 f998 	bl	80132a8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012f78:	4604      	mov	r4, r0
 8012f7a:	f107 030c 	add.w	r3, r7, #12
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f000 f9c5 	bl	801330e <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8012f84:	4602      	mov	r2, r0
 8012f86:	6823      	ldr	r3, [r4, #0]
 8012f88:	6013      	str	r3, [r2, #0]
  return c;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	3714      	adds	r7, #20
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd90      	pop	{r4, r7, pc}

08012f94 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8012f94:	b5b0      	push	{r4, r5, r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8012f9c:	1d3b      	adds	r3, r7, #4
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f000 f9b5 	bl	801330e <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	681d      	ldr	r5, [r3, #0]
 8012fa8:	f107 030c 	add.w	r3, r7, #12
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7ff fbcf 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012fb2:	4604      	mov	r4, r0
 8012fb4:	4628      	mov	r0, r5
 8012fb6:	f000 f9b5 	bl	8013324 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	6023      	str	r3, [r4, #0]
  return result;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3710      	adds	r7, #16
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bdb0      	pop	{r4, r5, r7, pc}

08012fc8 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8012fcc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8012fd0:	f000 f803 	bl	8012fda <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8012fd4:	4603      	mov	r3, r0
  }
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	bd80      	pop	{r7, pc}

08012fda <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8012fda:	b590      	push	{r4, r7, lr}
 8012fdc:	b085      	sub	sp, #20
 8012fde:	af00      	add	r7, sp, #0
 8012fe0:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8012fe2:	f107 030c 	add.w	r3, r7, #12
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7ff fec6 	bl	8012d78 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012fec:	4604      	mov	r4, r0
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f7fe fd1e 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	6023      	str	r3, [r4, #0]
    return retval;
 8012ff8:	68fb      	ldr	r3, [r7, #12]
  }
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	3714      	adds	r7, #20
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd90      	pop	{r4, r7, pc}

08013002 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8013002:	b590      	push	{r4, r7, lr}
 8013004:	b083      	sub	sp, #12
 8013006:	af00      	add	r7, sp, #0
 8013008:	6078      	str	r0, [r7, #4]
 801300a:	6039      	str	r1, [r7, #0]
 801300c:	1d3b      	adds	r3, r7, #4
 801300e:	4618      	mov	r0, r3
 8013010:	f7ff feb2 	bl	8012d78 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8013014:	4603      	mov	r3, r0
 8013016:	681c      	ldr	r4, [r3, #0]
 8013018:	463b      	mov	r3, r7
 801301a:	4618      	mov	r0, r3
 801301c:	f7ff feac 	bl	8012d78 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8013020:	4603      	mov	r3, r0
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	4619      	mov	r1, r3
 8013026:	4620      	mov	r0, r4
 8013028:	f7ff fbca 	bl	80127c0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801302c:	4603      	mov	r3, r0
 801302e:	4618      	mov	r0, r3
 8013030:	f7ff fd10 	bl	8012a54 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8013034:	4603      	mov	r3, r0
 8013036:	4618      	mov	r0, r3
 8013038:	370c      	adds	r7, #12
 801303a:	46bd      	mov	sp, r7
 801303c:	bd90      	pop	{r4, r7, pc}

0801303e <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 801303e:	b590      	push	{r4, r7, lr}
 8013040:	b083      	sub	sp, #12
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
 8013046:	6039      	str	r1, [r7, #0]
 8013048:	1d3b      	adds	r3, r7, #4
 801304a:	4618      	mov	r0, r3
 801304c:	f7ff fe94 	bl	8012d78 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8013050:	4603      	mov	r3, r0
 8013052:	681c      	ldr	r4, [r3, #0]
 8013054:	463b      	mov	r3, r7
 8013056:	4618      	mov	r0, r3
 8013058:	f7ff fe8e 	bl	8012d78 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801305c:	4603      	mov	r3, r0
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	4619      	mov	r1, r3
 8013062:	4620      	mov	r0, r4
 8013064:	f7fe fcef 	bl	8011a46 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8013068:	4603      	mov	r3, r0
 801306a:	4618      	mov	r0, r3
 801306c:	f7ff fcf2 	bl	8012a54 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8013070:	4603      	mov	r3, r0
 8013072:	4618      	mov	r0, r3
 8013074:	370c      	adds	r7, #12
 8013076:	46bd      	mov	sp, r7
 8013078:	bd90      	pop	{r4, r7, pc}

0801307a <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801307a:	b5b0      	push	{r4, r5, r7, lr}
 801307c:	b084      	sub	sp, #16
 801307e:	af00      	add	r7, sp, #0
 8013080:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8013082:	1d3b      	adds	r3, r7, #4
 8013084:	4618      	mov	r0, r3
 8013086:	f7ff fe77 	bl	8012d78 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801308a:	4603      	mov	r3, r0
 801308c:	681d      	ldr	r5, [r3, #0]
 801308e:	f107 030c 	add.w	r3, r7, #12
 8013092:	4618      	mov	r0, r3
 8013094:	f7ff fb5c 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013098:	4604      	mov	r4, r0
 801309a:	4628      	mov	r0, r5
 801309c:	f000 f94e 	bl	801333c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 80130a0:	4603      	mov	r3, r0
 80130a2:	6023      	str	r3, [r4, #0]
  return result;
 80130a4:	68fb      	ldr	r3, [r7, #12]
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3710      	adds	r7, #16
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080130b0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b08a      	sub	sp, #40	; 0x28
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 80130b8:	482c      	ldr	r0, [pc, #176]	; (801316c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 80130ba:	f7ff fb68 	bl	801278e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80130be:	4603      	mov	r3, r0
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7ff fb50 	bl	8012766 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80130c6:	4603      	mov	r3, r0
 80130c8:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 80130ca:	4829      	ldr	r0, [pc, #164]	; (8013170 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 80130cc:	f7ff fb5f 	bl	801278e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80130d0:	4603      	mov	r3, r0
 80130d2:	4618      	mov	r0, r3
 80130d4:	f7ff fb47 	bl	8012766 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80130d8:	4603      	mov	r3, r0
 80130da:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 80130dc:	f000 f93a 	bl	8013354 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 80130e0:	4603      	mov	r3, r0
 80130e2:	4619      	mov	r1, r3
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f000 f93e 	bl	8013366 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80130ea:	4603      	mov	r3, r0
 80130ec:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 80130ee:	69f9      	ldr	r1, [r7, #28]
 80130f0:	69f8      	ldr	r0, [r7, #28]
 80130f2:	f000 f83f 	bl	8013174 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80130f6:	4603      	mov	r3, r0
 80130f8:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 80130fa:	69f9      	ldr	r1, [r7, #28]
 80130fc:	69b8      	ldr	r0, [r7, #24]
 80130fe:	f000 f839 	bl	8013174 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013102:	4603      	mov	r3, r0
 8013104:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 8013106:	69b9      	ldr	r1, [r7, #24]
 8013108:	69b8      	ldr	r0, [r7, #24]
 801310a:	f000 f833 	bl	8013174 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801310e:	4603      	mov	r3, r0
 8013110:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 8013112:	6938      	ldr	r0, [r7, #16]
 8013114:	f000 f945 	bl	80133a2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8013118:	4603      	mov	r3, r0
 801311a:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 801311c:	6979      	ldr	r1, [r7, #20]
 801311e:	68f8      	ldr	r0, [r7, #12]
 8013120:	f000 f921 	bl	8013366 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013124:	4603      	mov	r3, r0
 8013126:	6a39      	ldr	r1, [r7, #32]
 8013128:	4618      	mov	r0, r3
 801312a:	f000 f823 	bl	8013174 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801312e:	4603      	mov	r3, r0
 8013130:	69b9      	ldr	r1, [r7, #24]
 8013132:	4618      	mov	r0, r3
 8013134:	f000 f917 	bl	8013366 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013138:	4603      	mov	r3, r0
 801313a:	4618      	mov	r0, r3
 801313c:	f000 f947 	bl	80133ce <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8013140:	4603      	mov	r3, r0
 8013142:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8013144:	68b9      	ldr	r1, [r7, #8]
 8013146:	69f8      	ldr	r0, [r7, #28]
 8013148:	f000 f90d 	bl	8013366 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801314c:	4603      	mov	r3, r0
 801314e:	4619      	mov	r1, r3
 8013150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013152:	f000 f80f 	bl	8013174 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013156:	4603      	mov	r3, r0
 8013158:	4619      	mov	r1, r3
 801315a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801315c:	f000 f94d 	bl	80133fa <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013160:	4603      	mov	r3, r0
}
 8013162:	4618      	mov	r0, r3
 8013164:	3728      	adds	r7, #40	; 0x28
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
 801316a:	bf00      	nop
 801316c:	70f5a894 	.word	0x70f5a894
 8013170:	2aaaaaab 	.word	0x2aaaaaab

08013174 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8013174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013176:	b085      	sub	sp, #20
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
 801317c:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801317e:	1d3b      	adds	r3, r7, #4
 8013180:	4618      	mov	r0, r3
 8013182:	f7ff fae5 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013186:	4603      	mov	r3, r0
 8013188:	681d      	ldr	r5, [r3, #0]
 801318a:	463b      	mov	r3, r7
 801318c:	4618      	mov	r0, r3
 801318e:	f7ff fadf 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013192:	4603      	mov	r3, r0
 8013194:	681e      	ldr	r6, [r3, #0]
 8013196:	f107 030c 	add.w	r3, r7, #12
 801319a:	4618      	mov	r0, r3
 801319c:	f7ff fad8 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80131a0:	4604      	mov	r4, r0
 80131a2:	4631      	mov	r1, r6
 80131a4:	4628      	mov	r0, r5
 80131a6:	f7fd fc15 	bl	80109d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80131aa:	4603      	mov	r3, r0
 80131ac:	6023      	str	r3, [r4, #0]
  return c;
 80131ae:	68fb      	ldr	r3, [r7, #12]
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3714      	adds	r7, #20
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080131b8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 80131b8:	b590      	push	{r4, r7, lr}
 80131ba:	b085      	sub	sp, #20
 80131bc:	af00      	add	r7, sp, #0
 80131be:	60f8      	str	r0, [r7, #12]
 80131c0:	60b9      	str	r1, [r7, #8]
 80131c2:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 80131c4:	f107 0308 	add.w	r3, r7, #8
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7ff fac1 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80131ce:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80131d0:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 80131d2:	1d3b      	adds	r3, r7, #4
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7ff fabb 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80131da:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	461a      	mov	r2, r3
 80131e0:	4621      	mov	r1, r4
 80131e2:	68f8      	ldr	r0, [r7, #12]
 80131e4:	f7ff fb4d 	bl	8012882 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80131e8:	4603      	mov	r3, r0
 80131ea:	4618      	mov	r0, r3
 80131ec:	f7ff fbc1 	bl	8012972 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80131f0:	4603      	mov	r3, r0
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3714      	adds	r7, #20
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd90      	pop	{r4, r7, pc}

080131fa <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 80131fa:	b580      	push	{r7, lr}
 80131fc:	b082      	sub	sp, #8
 80131fe:	af00      	add	r7, sp, #0
 8013200:	6078      	str	r0, [r7, #4]
 8013202:	1d3b      	adds	r3, r7, #4
 8013204:	4618      	mov	r0, r3
 8013206:	f7ff fdb7 	bl	8012d78 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801320a:	4603      	mov	r3, r0
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	4618      	mov	r0, r3
 8013210:	f000 f911 	bl	8013436 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 8013214:	4603      	mov	r3, r0
 8013216:	4618      	mov	r0, r3
 8013218:	3708      	adds	r7, #8
 801321a:	46bd      	mov	sp, r7
 801321c:	bd80      	pop	{r7, pc}

0801321e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 801321e:	b480      	push	{r7}
 8013220:	b083      	sub	sp, #12
 8013222:	af00      	add	r7, sp, #0
 8013224:	6078      	str	r0, [r7, #4]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	4618      	mov	r0, r3
 801322a:	370c      	adds	r7, #12
 801322c:	46bd      	mov	sp, r7
 801322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013232:	4770      	bx	lr

08013234 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f000 f90c 	bl	801345a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 8013242:	4603      	mov	r3, r0
}
 8013244:	4618      	mov	r0, r3
 8013246:	3708      	adds	r7, #8
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}

0801324c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801324c:	b580      	push	{r7, lr}
 801324e:	b084      	sub	sp, #16
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8013254:	f107 030c 	add.w	r3, r7, #12
 8013258:	4618      	mov	r0, r3
 801325a:	f7ff ffe0 	bl	801321e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801325e:	4602      	mov	r2, r0
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	6013      	str	r3, [r2, #0]
    return retval;
 8013264:	68fb      	ldr	r3, [r7, #12]
  }
 8013266:	4618      	mov	r0, r3
 8013268:	3710      	adds	r7, #16
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}

0801326e <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801326e:	b480      	push	{r7}
 8013270:	b083      	sub	sp, #12
 8013272:	af00      	add	r7, sp, #0
 8013274:	6078      	str	r0, [r7, #4]
 8013276:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f993 2000 	ldrsb.w	r2, [r3]
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	f993 3000 	ldrsb.w	r3, [r3]
 8013284:	429a      	cmp	r2, r3
 8013286:	da01      	bge.n	801328c <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	e000      	b.n	801328e <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 801328c:	687b      	ldr	r3, [r7, #4]
    }
 801328e:	4618      	mov	r0, r3
 8013290:	370c      	adds	r7, #12
 8013292:	46bd      	mov	sp, r7
 8013294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013298:	4770      	bx	lr

0801329a <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 801329a:	b580      	push	{r7, lr}
 801329c:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 801329e:	f7f7 fc22 	bl	800aae6 <_ZNSt14numeric_limitsIlE3maxEv>
 80132a2:	4603      	mov	r3, r0
  }
 80132a4:	4618      	mov	r0, r3
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 80132a8:	b480      	push	{r7}
 80132aa:	b083      	sub	sp, #12
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	4618      	mov	r0, r3
 80132b4:	370c      	adds	r7, #12
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr

080132be <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80132be:	b580      	push	{r7, lr}
 80132c0:	b084      	sub	sp, #16
 80132c2:	af00      	add	r7, sp, #0
 80132c4:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80132c6:	f107 030c 	add.w	r3, r7, #12
 80132ca:	4618      	mov	r0, r3
 80132cc:	f7ff ffec 	bl	80132a8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80132d0:	4602      	mov	r2, r0
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	6013      	str	r3, [r2, #0]
    return retval;
 80132d6:	68fb      	ldr	r3, [r7, #12]
  }
 80132d8:	4618      	mov	r0, r3
 80132da:	3710      	adds	r7, #16
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}

080132e0 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 80132e0:	b480      	push	{r7}
 80132e2:	b083      	sub	sp, #12
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	4618      	mov	r0, r3
 80132ec:	370c      	adds	r7, #12
 80132ee:	46bd      	mov	sp, r7
 80132f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f4:	4770      	bx	lr

080132f6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80132f6:	b580      	push	{r7, lr}
 80132f8:	b082      	sub	sp, #8
 80132fa:	af00      	add	r7, sp, #0
 80132fc:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f000 f8b8 	bl	8013474 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 8013304:	4603      	mov	r3, r0
}
 8013306:	4618      	mov	r0, r3
 8013308:	3708      	adds	r7, #8
 801330a:	46bd      	mov	sp, r7
 801330c:	bd80      	pop	{r7, pc}

0801330e <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 801330e:	b480      	push	{r7}
 8013310:	b083      	sub	sp, #12
 8013312:	af00      	add	r7, sp, #0
 8013314:	6078      	str	r0, [r7, #4]
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	4618      	mov	r0, r3
 801331a:	370c      	adds	r7, #12
 801331c:	46bd      	mov	sp, r7
 801331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013322:	4770      	bx	lr

08013324 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013324:	b580      	push	{r7, lr}
 8013326:	b082      	sub	sp, #8
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f000 f8e3 	bl	80134f8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 8013332:	4603      	mov	r3, r0
}
 8013334:	4618      	mov	r0, r3
 8013336:	3708      	adds	r7, #8
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}

0801333c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801333c:	b580      	push	{r7, lr}
 801333e:	b082      	sub	sp, #8
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f000 f919 	bl	801357c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 801334a:	4603      	mov	r3, r0
}
 801334c:	4618      	mov	r0, r3
 801334e:	3708      	adds	r7, #8
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}

08013354 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 8013354:	b580      	push	{r7, lr}
 8013356:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8013358:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801335c:	f7ff fa03 	bl	8012766 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013360:	4603      	mov	r3, r0
  }
 8013362:	4618      	mov	r0, r3
 8013364:	bd80      	pop	{r7, pc}

08013366 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8013366:	b590      	push	{r4, r7, lr}
 8013368:	b083      	sub	sp, #12
 801336a:	af00      	add	r7, sp, #0
 801336c:	6078      	str	r0, [r7, #4]
 801336e:	6039      	str	r1, [r7, #0]
 8013370:	1d3b      	adds	r3, r7, #4
 8013372:	4618      	mov	r0, r3
 8013374:	f7ff f9ec 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013378:	4603      	mov	r3, r0
 801337a:	681c      	ldr	r4, [r3, #0]
 801337c:	463b      	mov	r3, r7
 801337e:	4618      	mov	r0, r3
 8013380:	f7ff f9e6 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013384:	4603      	mov	r3, r0
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	4619      	mov	r1, r3
 801338a:	4620      	mov	r0, r4
 801338c:	f7fe fb8c 	bl	8011aa8 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013390:	4603      	mov	r3, r0
 8013392:	4618      	mov	r0, r3
 8013394:	f7ff faed 	bl	8012972 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013398:	4603      	mov	r3, r0
 801339a:	4618      	mov	r0, r3
 801339c:	370c      	adds	r7, #12
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd90      	pop	{r4, r7, pc}

080133a2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 80133a2:	b580      	push	{r7, lr}
 80133a4:	b082      	sub	sp, #8
 80133a6:	af00      	add	r7, sp, #0
 80133a8:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 80133aa:	1d3b      	adds	r3, r7, #4
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7ff f9cf 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80133b2:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	4618      	mov	r0, r3
 80133b8:	f000 f922 	bl	8013600 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 80133bc:	4603      	mov	r3, r0
 80133be:	4618      	mov	r0, r3
 80133c0:	f7ff fad7 	bl	8012972 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80133c4:	4603      	mov	r3, r0
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	3708      	adds	r7, #8
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}

080133ce <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 80133ce:	b580      	push	{r7, lr}
 80133d0:	b082      	sub	sp, #8
 80133d2:	af00      	add	r7, sp, #0
 80133d4:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 80133d6:	1d3b      	adds	r3, r7, #4
 80133d8:	4618      	mov	r0, r3
 80133da:	f7ff f9b9 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80133de:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	4618      	mov	r0, r3
 80133e4:	f7ff f9e0 	bl	80127a8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 80133e8:	4603      	mov	r3, r0
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7ff fac1 	bl	8012972 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80133f0:	4603      	mov	r3, r0
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	3708      	adds	r7, #8
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}

080133fa <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 80133fa:	b590      	push	{r4, r7, lr}
 80133fc:	b083      	sub	sp, #12
 80133fe:	af00      	add	r7, sp, #0
 8013400:	6078      	str	r0, [r7, #4]
 8013402:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8013404:	1d3b      	adds	r3, r7, #4
 8013406:	4618      	mov	r0, r3
 8013408:	f7ff f9a2 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801340c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801340e:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8013410:	463b      	mov	r3, r7
 8013412:	4618      	mov	r0, r3
 8013414:	f7ff f99c 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013418:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	4619      	mov	r1, r3
 801341e:	4620      	mov	r0, r4
 8013420:	f000 f8fa 	bl	8013618 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 8013424:	4603      	mov	r3, r0
 8013426:	4618      	mov	r0, r3
 8013428:	f7ff faa3 	bl	8012972 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801342c:	4603      	mov	r3, r0
}
 801342e:	4618      	mov	r0, r3
 8013430:	370c      	adds	r7, #12
 8013432:	46bd      	mov	sp, r7
 8013434:	bd90      	pop	{r4, r7, pc}

08013436 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 8013436:	b580      	push	{r7, lr}
 8013438:	b082      	sub	sp, #8
 801343a:	af00      	add	r7, sp, #0
 801343c:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	2b00      	cmp	r3, #0
 8013442:	bf0c      	ite	eq
 8013444:	2301      	moveq	r3, #1
 8013446:	2300      	movne	r3, #0
 8013448:	b2db      	uxtb	r3, r3
 801344a:	4618      	mov	r0, r3
 801344c:	f7fe fb4e 	bl	8011aec <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8013450:	4603      	mov	r3, r0
}
 8013452:	4618      	mov	r0, r3
 8013454:	3708      	adds	r7, #8
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}

0801345a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801345a:	b580      	push	{r7, lr}
 801345c:	b082      	sub	sp, #8
 801345e:	af00      	add	r7, sp, #0
 8013460:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8013462:	210c      	movs	r1, #12
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f7fd ff1f 	bl	80112a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801346a:	4603      	mov	r3, r0
  }
 801346c:	4618      	mov	r0, r3
 801346e:	3708      	adds	r7, #8
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}

08013474 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013474:	b580      	push	{r7, lr}
 8013476:	b08a      	sub	sp, #40	; 0x28
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801347c:	f7f7 fd3d 	bl	800aefa <_ZNSt14numeric_limitsIlE3minEv>
 8013480:	4603      	mov	r3, r0
 8013482:	4618      	mov	r0, r3
 8013484:	f7fe fad4 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013488:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801348a:	f7f7 fb2c 	bl	800aae6 <_ZNSt14numeric_limitsIlE3maxEv>
 801348e:	4603      	mov	r3, r0
 8013490:	4618      	mov	r0, r3
 8013492:	f7fe facd 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013496:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8013498:	2320      	movs	r3, #32
 801349a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801349c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80134a0:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80134a2:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 80134a6:	f7fe fac3 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80134aa:	4603      	mov	r3, r0
 80134ac:	4619      	mov	r1, r3
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	f7fe fb08 	bl	8011ac4 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80134b4:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80134b6:	480f      	ldr	r0, [pc, #60]	; (80134f4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 80134b8:	f7fe faba 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80134bc:	4603      	mov	r3, r0
 80134be:	4619      	mov	r1, r3
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f7fe fadd 	bl	8011a80 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80134c6:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80134c8:	2102      	movs	r1, #2
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f7ff f993 	bl	80127f6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80134d0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80134d2:	68fa      	ldr	r2, [r7, #12]
 80134d4:	6a39      	ldr	r1, [r7, #32]
 80134d6:	6978      	ldr	r0, [r7, #20]
 80134d8:	f7ff f9d3 	bl	8012882 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80134dc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80134de:	68fa      	ldr	r2, [r7, #12]
 80134e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80134e2:	6938      	ldr	r0, [r7, #16]
 80134e4:	f7ff f9cd 	bl	8012882 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80134e8:	60f8      	str	r0, [r7, #12]
    return result;
 80134ea:	68fb      	ldr	r3, [r7, #12]
  }
 80134ec:	4618      	mov	r0, r3
 80134ee:	3728      	adds	r7, #40	; 0x28
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	e0000001 	.word	0xe0000001

080134f8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b08a      	sub	sp, #40	; 0x28
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8013500:	f7f7 fcfb 	bl	800aefa <_ZNSt14numeric_limitsIlE3minEv>
 8013504:	4603      	mov	r3, r0
 8013506:	4618      	mov	r0, r3
 8013508:	f7fe fa92 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801350c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801350e:	f7f7 faea 	bl	800aae6 <_ZNSt14numeric_limitsIlE3maxEv>
 8013512:	4603      	mov	r3, r0
 8013514:	4618      	mov	r0, r3
 8013516:	f7fe fa8b 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801351a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801351c:	2320      	movs	r3, #32
 801351e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8013520:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013524:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8013526:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 801352a:	f7fe fa81 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801352e:	4603      	mov	r3, r0
 8013530:	4619      	mov	r1, r3
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f7fe fac6 	bl	8011ac4 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8013538:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801353a:	480f      	ldr	r0, [pc, #60]	; (8013578 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 801353c:	f7fe fa78 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013540:	4603      	mov	r3, r0
 8013542:	4619      	mov	r1, r3
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f7fe fa9b 	bl	8011a80 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801354a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801354c:	2101      	movs	r1, #1
 801354e:	6878      	ldr	r0, [r7, #4]
 8013550:	f7ff f951 	bl	80127f6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8013554:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8013556:	68fa      	ldr	r2, [r7, #12]
 8013558:	6a39      	ldr	r1, [r7, #32]
 801355a:	6978      	ldr	r0, [r7, #20]
 801355c:	f7ff f991 	bl	8012882 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013560:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8013562:	68fa      	ldr	r2, [r7, #12]
 8013564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013566:	6938      	ldr	r0, [r7, #16]
 8013568:	f7ff f98b 	bl	8012882 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801356c:	60f8      	str	r0, [r7, #12]
    return result;
 801356e:	68fb      	ldr	r3, [r7, #12]
  }
 8013570:	4618      	mov	r0, r3
 8013572:	3728      	adds	r7, #40	; 0x28
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}
 8013578:	c0000001 	.word	0xc0000001

0801357c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801357c:	b580      	push	{r7, lr}
 801357e:	b08a      	sub	sp, #40	; 0x28
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8013584:	f7f7 fcb9 	bl	800aefa <_ZNSt14numeric_limitsIlE3minEv>
 8013588:	4603      	mov	r3, r0
 801358a:	4618      	mov	r0, r3
 801358c:	f7fe fa50 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013590:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8013592:	f7f7 faa8 	bl	800aae6 <_ZNSt14numeric_limitsIlE3maxEv>
 8013596:	4603      	mov	r3, r0
 8013598:	4618      	mov	r0, r3
 801359a:	f7fe fa49 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801359e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80135a0:	2320      	movs	r3, #32
 80135a2:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80135a4:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 80135a8:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80135aa:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 80135ae:	f7fe fa3f 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80135b2:	4603      	mov	r3, r0
 80135b4:	4619      	mov	r1, r3
 80135b6:	6878      	ldr	r0, [r7, #4]
 80135b8:	f7fe fa84 	bl	8011ac4 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80135bc:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80135be:	480f      	ldr	r0, [pc, #60]	; (80135fc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 80135c0:	f7fe fa36 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80135c4:	4603      	mov	r3, r0
 80135c6:	4619      	mov	r1, r3
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f7fe fa59 	bl	8011a80 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80135ce:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80135d0:	2105      	movs	r1, #5
 80135d2:	6878      	ldr	r0, [r7, #4]
 80135d4:	f7ff f90f 	bl	80127f6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80135d8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80135da:	68fa      	ldr	r2, [r7, #12]
 80135dc:	6a39      	ldr	r1, [r7, #32]
 80135de:	6978      	ldr	r0, [r7, #20]
 80135e0:	f7ff f94f 	bl	8012882 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80135e4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80135e6:	68fa      	ldr	r2, [r7, #12]
 80135e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80135ea:	6938      	ldr	r0, [r7, #16]
 80135ec:	f7ff f949 	bl	8012882 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80135f0:	60f8      	str	r0, [r7, #12]
    return result;
 80135f2:	68fb      	ldr	r3, [r7, #12]
  }
 80135f4:	4618      	mov	r0, r3
 80135f6:	3728      	adds	r7, #40	; 0x28
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}
 80135fc:	fc000001 	.word	0xfc000001

08013600 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013600:	b580      	push	{r7, lr}
 8013602:	b082      	sub	sp, #8
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f000 f813 	bl	8013634 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 801360e:	4603      	mov	r3, r0
}
 8013610:	4618      	mov	r0, r3
 8013612:	3708      	adds	r7, #8
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}

08013618 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 8013618:	b580      	push	{r7, lr}
 801361a:	b082      	sub	sp, #8
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 8013622:	6839      	ldr	r1, [r7, #0]
 8013624:	6878      	ldr	r0, [r7, #4]
 8013626:	f000 f812 	bl	801364e <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 801362a:	4603      	mov	r3, r0
}
 801362c:	4618      	mov	r0, r3
 801362e:	3708      	adds	r7, #8
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}

08013634 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013634:	b580      	push	{r7, lr}
 8013636:	b082      	sub	sp, #8
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801363c:	2102      	movs	r1, #2
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	f7fd fe32 	bl	80112a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013644:	4603      	mov	r3, r0
  }
 8013646:	4618      	mov	r0, r3
 8013648:	3708      	adds	r7, #8
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}

0801364e <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 801364e:	b580      	push	{r7, lr}
 8013650:	b082      	sub	sp, #8
 8013652:	af00      	add	r7, sp, #0
 8013654:	6078      	str	r0, [r7, #4]
 8013656:	6039      	str	r1, [r7, #0]
 8013658:	6839      	ldr	r1, [r7, #0]
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f7fe fa24 	bl	8011aa8 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013660:	4603      	mov	r3, r0
 8013662:	4618      	mov	r0, r3
 8013664:	3708      	adds	r7, #8
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}

0801366a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801366a:	b480      	push	{r7}
 801366c:	b083      	sub	sp, #12
 801366e:	af00      	add	r7, sp, #0
 8013670:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d002      	beq.n	801367e <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	e000      	b.n	8013680 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 801367e:	2300      	movs	r3, #0
}
 8013680:	4618      	mov	r0, r3
 8013682:	370c      	adds	r7, #12
 8013684:	46bd      	mov	sp, r7
 8013686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368a:	4770      	bx	lr

0801368c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 801368c:	b5b0      	push	{r4, r5, r7, lr}
 801368e:	b08e      	sub	sp, #56	; 0x38
 8013690:	af04      	add	r7, sp, #16
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8013696:	2200      	movs	r2, #0
 8013698:	6839      	ldr	r1, [r7, #0]
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f7f7 fd0a 	bl	800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80136a0:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 80136a2:	69bb      	ldr	r3, [r7, #24]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d10a      	bne.n	80136be <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x32>
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	695c      	ldr	r4, [r3, #20]
 80136ac:	4b62      	ldr	r3, [pc, #392]	; (8013838 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ac>)
 80136ae:	9300      	str	r3, [sp, #0]
 80136b0:	2323      	movs	r3, #35	; 0x23
 80136b2:	4a62      	ldr	r2, [pc, #392]	; (801383c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 80136b4:	4962      	ldr	r1, [pc, #392]	; (8013840 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	47a0      	blx	r4
 80136ba:	2301      	movs	r3, #1
 80136bc:	e0b8      	b.n	8013830 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80136be:	2200      	movs	r2, #0
 80136c0:	6839      	ldr	r1, [r7, #0]
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f7f7 fd06 	bl	800b0d4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80136c8:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d10a      	bne.n	80136e6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	695c      	ldr	r4, [r3, #20]
 80136d4:	4b5b      	ldr	r3, [pc, #364]	; (8013844 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 80136d6:	9300      	str	r3, [sp, #0]
 80136d8:	2325      	movs	r3, #37	; 0x25
 80136da:	4a58      	ldr	r2, [pc, #352]	; (801383c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 80136dc:	4958      	ldr	r1, [pc, #352]	; (8013840 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	47a0      	blx	r4
 80136e2:	2301      	movs	r3, #1
 80136e4:	e0a4      	b.n	8013830 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 80136e6:	69b8      	ldr	r0, [r7, #24]
 80136e8:	f7f7 fc64 	bl	800afb4 <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 80136ec:	4602      	mov	r2, r0
 80136ee:	460b      	mov	r3, r1
 80136f0:	4613      	mov	r3, r2
 80136f2:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	689b      	ldr	r3, [r3, #8]
 80136f8:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 80136fa:	6838      	ldr	r0, [r7, #0]
 80136fc:	f7fe fa13 	bl	8011b26 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013700:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 8013702:	2b01      	cmp	r3, #1
 8013704:	d109      	bne.n	801371a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 801370a:	2b01      	cmp	r3, #1
 801370c:	d105      	bne.n	801371a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	685b      	ldr	r3, [r3, #4]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d101      	bne.n	801371a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 8013716:	2301      	movs	r3, #1
 8013718:	e000      	b.n	801371c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 801371a:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 801371c:	2b00      	cmp	r3, #0
 801371e:	d002      	beq.n	8013726 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	2200      	movs	r2, #0
 8013724:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 8013726:	2301      	movs	r3, #1
 8013728:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 801372a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801372e:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 8013730:	2300      	movs	r3, #0
 8013732:	61fb      	str	r3, [r7, #28]
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	69fa      	ldr	r2, [r7, #28]
 801373a:	429a      	cmp	r2, r3
 801373c:	da2b      	bge.n	8013796 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10a>
    int value = output_shape->data[i];
 801373e:	68fa      	ldr	r2, [r7, #12]
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	009b      	lsls	r3, r3, #2
 8013744:	4413      	add	r3, r2
 8013746:	685b      	ldr	r3, [r3, #4]
 8013748:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013750:	d118      	bne.n	8013784 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 8013752:	6a3b      	ldr	r3, [r7, #32]
 8013754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013758:	d011      	beq.n	801377e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	695c      	ldr	r4, [r3, #20]
 801375e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013762:	9303      	str	r3, [sp, #12]
 8013764:	6a3b      	ldr	r3, [r7, #32]
 8013766:	9302      	str	r3, [sp, #8]
 8013768:	4b37      	ldr	r3, [pc, #220]	; (8013848 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 801376a:	9301      	str	r3, [sp, #4]
 801376c:	4b37      	ldr	r3, [pc, #220]	; (801384c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 801376e:	9300      	str	r3, [sp, #0]
 8013770:	233a      	movs	r3, #58	; 0x3a
 8013772:	4a32      	ldr	r2, [pc, #200]	; (801383c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8013774:	4936      	ldr	r1, [pc, #216]	; (8013850 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 8013776:	6878      	ldr	r0, [r7, #4]
 8013778:	47a0      	blx	r4
 801377a:	2301      	movs	r3, #1
 801377c:	e058      	b.n	8013830 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
      stretch_dim = i;
 801377e:	69fb      	ldr	r3, [r7, #28]
 8013780:	623b      	str	r3, [r7, #32]
 8013782:	e004      	b.n	801378e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x102>
    } else {
      num_output_elements *= value;
 8013784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013786:	68ba      	ldr	r2, [r7, #8]
 8013788:	fb02 f303 	mul.w	r3, r2, r3
 801378c:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 801378e:	69fb      	ldr	r3, [r7, #28]
 8013790:	3301      	adds	r3, #1
 8013792:	61fb      	str	r3, [r7, #28]
 8013794:	e7ce      	b.n	8013734 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
    }
  }
  if (stretch_dim != -1) {
 8013796:	6a3b      	ldr	r3, [r7, #32]
 8013798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801379c:	d011      	beq.n	80137c2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x136>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 801379e:	693a      	ldr	r2, [r7, #16]
 80137a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a2:	fb92 f2f3 	sdiv	r2, r2, r3
 80137a6:	68f9      	ldr	r1, [r7, #12]
 80137a8:	6a3b      	ldr	r3, [r7, #32]
 80137aa:	009b      	lsls	r3, r3, #2
 80137ac:	440b      	add	r3, r1
 80137ae:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 80137b0:	68fa      	ldr	r2, [r7, #12]
 80137b2:	6a3b      	ldr	r3, [r7, #32]
 80137b4:	009b      	lsls	r3, r3, #2
 80137b6:	4413      	add	r3, r2
 80137b8:	685a      	ldr	r2, [r3, #4]
 80137ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137bc:	fb02 f303 	mul.w	r3, r2, r3
 80137c0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 80137c2:	69bb      	ldr	r3, [r7, #24]
 80137c4:	781a      	ldrb	r2, [r3, #0]
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	781b      	ldrb	r3, [r3, #0]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d01a      	beq.n	8013804 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	695c      	ldr	r4, [r3, #20]
 80137d2:	69bb      	ldr	r3, [r7, #24]
 80137d4:	781b      	ldrb	r3, [r3, #0]
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7f4 fe0a 	bl	80083f0 <TfLiteTypeGetName>
 80137dc:	4605      	mov	r5, r0
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	781b      	ldrb	r3, [r3, #0]
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7f4 fe04 	bl	80083f0 <TfLiteTypeGetName>
 80137e8:	4603      	mov	r3, r0
 80137ea:	9303      	str	r3, [sp, #12]
 80137ec:	9502      	str	r5, [sp, #8]
 80137ee:	4b19      	ldr	r3, [pc, #100]	; (8013854 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 80137f0:	9301      	str	r3, [sp, #4]
 80137f2:	4b19      	ldr	r3, [pc, #100]	; (8013858 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 80137f4:	9300      	str	r3, [sp, #0]
 80137f6:	2345      	movs	r3, #69	; 0x45
 80137f8:	4a10      	ldr	r2, [pc, #64]	; (801383c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 80137fa:	4918      	ldr	r1, [pc, #96]	; (801385c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 80137fc:	6878      	ldr	r0, [r7, #4]
 80137fe:	47a0      	blx	r4
 8013800:	2301      	movs	r3, #1
 8013802:	e015      	b.n	8013830 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 8013804:	693a      	ldr	r2, [r7, #16]
 8013806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013808:	429a      	cmp	r2, r3
 801380a:	d010      	beq.n	801382e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a2>
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	695c      	ldr	r4, [r3, #20]
 8013810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013812:	9303      	str	r3, [sp, #12]
 8013814:	693b      	ldr	r3, [r7, #16]
 8013816:	9302      	str	r3, [sp, #8]
 8013818:	4b11      	ldr	r3, [pc, #68]	; (8013860 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 801381a:	9301      	str	r3, [sp, #4]
 801381c:	4b11      	ldr	r3, [pc, #68]	; (8013864 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 801381e:	9300      	str	r3, [sp, #0]
 8013820:	2346      	movs	r3, #70	; 0x46
 8013822:	4a06      	ldr	r2, [pc, #24]	; (801383c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8013824:	490a      	ldr	r1, [pc, #40]	; (8013850 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	47a0      	blx	r4
 801382a:	2301      	movs	r3, #1
 801382c:	e000      	b.n	8013830 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  return kTfLiteOk;
 801382e:	2300      	movs	r3, #0
}
 8013830:	4618      	mov	r0, r3
 8013832:	3728      	adds	r7, #40	; 0x28
 8013834:	46bd      	mov	sp, r7
 8013836:	bdb0      	pop	{r4, r5, r7, pc}
 8013838:	0802acb0 	.word	0x0802acb0
 801383c:	0802ac5c 	.word	0x0802ac5c
 8013840:	0802ac98 	.word	0x0802ac98
 8013844:	0802acc4 	.word	0x0802acc4
 8013848:	0802acf4 	.word	0x0802acf4
 801384c:	0802acf8 	.word	0x0802acf8
 8013850:	0802acd8 	.word	0x0802acd8
 8013854:	0802ad20 	.word	0x0802ad20
 8013858:	0802ad30 	.word	0x0802ad30
 801385c:	0802ad04 	.word	0x0802ad04
 8013860:	0802ad3c 	.word	0x0802ad3c
 8013864:	0802ad50 	.word	0x0802ad50

08013868 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8013868:	b590      	push	{r4, r7, lr}
 801386a:	b087      	sub	sp, #28
 801386c:	af04      	add	r7, sp, #16
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 8013872:	6838      	ldr	r0, [r7, #0]
 8013874:	f7fe f957 	bl	8011b26 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013878:	4603      	mov	r3, r0
 801387a:	2b01      	cmp	r3, #1
 801387c:	d007      	beq.n	801388e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 801387e:	6838      	ldr	r0, [r7, #0]
 8013880:	f7fe f951 	bl	8011b26 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013884:	4603      	mov	r3, r0
 8013886:	2b02      	cmp	r3, #2
 8013888:	d001      	beq.n	801388e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 801388a:	2301      	movs	r3, #1
 801388c:	e000      	b.n	8013890 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 801388e:	2300      	movs	r3, #0
 8013890:	2b00      	cmp	r3, #0
 8013892:	d00a      	beq.n	80138aa <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	695c      	ldr	r4, [r3, #20]
 8013898:	4b27      	ldr	r3, [pc, #156]	; (8013938 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 801389a:	9300      	str	r3, [sp, #0]
 801389c:	234b      	movs	r3, #75	; 0x4b
 801389e:	4a27      	ldr	r2, [pc, #156]	; (801393c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 80138a0:	4927      	ldr	r1, [pc, #156]	; (8013940 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 80138a2:	6878      	ldr	r0, [r7, #4]
 80138a4:	47a0      	blx	r4
 80138a6:	2301      	movs	r3, #1
 80138a8:	e041      	b.n	801392e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 80138aa:	6838      	ldr	r0, [r7, #0]
 80138ac:	f7fe f948 	bl	8011b40 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80138b0:	4603      	mov	r3, r0
 80138b2:	2b01      	cmp	r3, #1
 80138b4:	bf14      	ite	ne
 80138b6:	2301      	movne	r3, #1
 80138b8:	2300      	moveq	r3, #0
 80138ba:	b2db      	uxtb	r3, r3
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d013      	beq.n	80138e8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	695c      	ldr	r4, [r3, #20]
 80138c4:	6838      	ldr	r0, [r7, #0]
 80138c6:	f7fe f93b 	bl	8011b40 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80138ca:	4603      	mov	r3, r0
 80138cc:	2201      	movs	r2, #1
 80138ce:	9203      	str	r2, [sp, #12]
 80138d0:	9302      	str	r3, [sp, #8]
 80138d2:	4b1c      	ldr	r3, [pc, #112]	; (8013944 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 80138d4:	9301      	str	r3, [sp, #4]
 80138d6:	4b1c      	ldr	r3, [pc, #112]	; (8013948 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 80138d8:	9300      	str	r3, [sp, #0]
 80138da:	234c      	movs	r3, #76	; 0x4c
 80138dc:	4a17      	ldr	r2, [pc, #92]	; (801393c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 80138de:	491b      	ldr	r1, [pc, #108]	; (801394c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	47a0      	blx	r4
 80138e4:	2301      	movs	r3, #1
 80138e6:	e022      	b.n	801392e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 80138e8:	6839      	ldr	r1, [r7, #0]
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f7ff fece 	bl	801368c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 80138f0:	4603      	mov	r3, r0
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	bf14      	ite	ne
 80138f6:	2301      	movne	r3, #1
 80138f8:	2300      	moveq	r3, #0
 80138fa:	b2db      	uxtb	r3, r3
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d015      	beq.n	801392c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	695c      	ldr	r4, [r3, #20]
 8013904:	6839      	ldr	r1, [r7, #0]
 8013906:	6878      	ldr	r0, [r7, #4]
 8013908:	f7ff fec0 	bl	801368c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 801390c:	4603      	mov	r3, r0
 801390e:	461a      	mov	r2, r3
 8013910:	2300      	movs	r3, #0
 8013912:	9303      	str	r3, [sp, #12]
 8013914:	9202      	str	r2, [sp, #8]
 8013916:	4b0e      	ldr	r3, [pc, #56]	; (8013950 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 8013918:	9301      	str	r3, [sp, #4]
 801391a:	4b0e      	ldr	r3, [pc, #56]	; (8013954 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 801391c:	9300      	str	r3, [sp, #0]
 801391e:	234d      	movs	r3, #77	; 0x4d
 8013920:	4a06      	ldr	r2, [pc, #24]	; (801393c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8013922:	490a      	ldr	r1, [pc, #40]	; (801394c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	47a0      	blx	r4
 8013928:	2301      	movs	r3, #1
 801392a:	e000      	b.n	801392e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 801392c:	2300      	movs	r3, #0
}
 801392e:	4618      	mov	r0, r3
 8013930:	370c      	adds	r7, #12
 8013932:	46bd      	mov	sp, r7
 8013934:	bd90      	pop	{r4, r7, pc}
 8013936:	bf00      	nop
 8013938:	0802ad64 	.word	0x0802ad64
 801393c:	0802ac5c 	.word	0x0802ac5c
 8013940:	0802ac98 	.word	0x0802ac98
 8013944:	0802ad94 	.word	0x0802ad94
 8013948:	0802ad98 	.word	0x0802ad98
 801394c:	0802acd8 	.word	0x0802acd8
 8013950:	0802adac 	.word	0x0802adac
 8013954:	0802adb8 	.word	0x0802adb8

08013958 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8013958:	b580      	push	{r7, lr}
 801395a:	b088      	sub	sp, #32
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
 8013960:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8013962:	2200      	movs	r2, #0
 8013964:	6839      	ldr	r1, [r7, #0]
 8013966:	6878      	ldr	r0, [r7, #4]
 8013968:	f7fd f978 	bl	8010c5c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801396c:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801396e:	2200      	movs	r2, #0
 8013970:	6839      	ldr	r1, [r7, #0]
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f7fd f982 	bl	8010c7c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8013978:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 801397a:	69bb      	ldr	r3, [r7, #24]
 801397c:	7a1b      	ldrb	r3, [r3, #8]
 801397e:	f107 020c 	add.w	r2, r7, #12
 8013982:	4611      	mov	r1, r2
 8013984:	4618      	mov	r0, r3
 8013986:	f7f8 fa1f 	bl	800bdc8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 801398a:	4603      	mov	r3, r0
 801398c:	74fb      	strb	r3, [r7, #19]
 801398e:	7cfb      	ldrb	r3, [r7, #19]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d001      	beq.n	8013998 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 8013994:	7cfb      	ldrb	r3, [r7, #19]
 8013996:	e024      	b.n	80139e2 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 8013998:	69bb      	ldr	r3, [r7, #24]
 801399a:	685b      	ldr	r3, [r3, #4]
 801399c:	4618      	mov	r0, r3
 801399e:	f7fc fa8f 	bl	800fec0 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 80139a2:	4602      	mov	r2, r0
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	fb02 f303 	mul.w	r3, r2, r3
 80139aa:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 80139ac:	69bb      	ldr	r3, [r7, #24]
 80139ae:	681a      	ldr	r2, [r3, #0]
 80139b0:	697b      	ldr	r3, [r7, #20]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	429a      	cmp	r2, r3
 80139b6:	d013      	beq.n	80139e0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 80139b8:	2300      	movs	r3, #0
 80139ba:	61fb      	str	r3, [r7, #28]
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	69fa      	ldr	r2, [r7, #28]
 80139c0:	429a      	cmp	r2, r3
 80139c2:	d20d      	bcs.n	80139e0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 80139c4:	69bb      	ldr	r3, [r7, #24]
 80139c6:	681a      	ldr	r2, [r3, #0]
 80139c8:	69fb      	ldr	r3, [r7, #28]
 80139ca:	441a      	add	r2, r3
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	6819      	ldr	r1, [r3, #0]
 80139d0:	69fb      	ldr	r3, [r7, #28]
 80139d2:	440b      	add	r3, r1
 80139d4:	7812      	ldrb	r2, [r2, #0]
 80139d6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 80139d8:	69fb      	ldr	r3, [r7, #28]
 80139da:	3301      	adds	r3, #1
 80139dc:	61fb      	str	r3, [r7, #28]
 80139de:	e7ed      	b.n	80139bc <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 80139e0:	2300      	movs	r3, #0
}
 80139e2:	4618      	mov	r0, r3
 80139e4:	3720      	adds	r7, #32
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}
	...

080139ec <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 80139ec:	b4b0      	push	{r4, r5, r7}
 80139ee:	b083      	sub	sp, #12
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	4a07      	ldr	r2, [pc, #28]	; (8013a14 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 80139f8:	461c      	mov	r4, r3
 80139fa:	4615      	mov	r5, r2
 80139fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80139fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013a00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013a04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	370c      	adds	r7, #12
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bcb0      	pop	{r4, r5, r7}
 8013a10:	4770      	bx	lr
 8013a12:	bf00      	nop
 8013a14:	0802add8 	.word	0x0802add8

08013a18 <_ZN6tflite7gen_lutEPFffEffPsi>:
// func - the function to build the LUT for (e.g exp(x))
// min,max - table limits
// table - pointer to buffer
// num - number of elements in the LUT
inline void gen_lut(float (*func)(float), float min, float max, int16_t* table,
                    const int num) {
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	ed2d 8b02 	vpush	{d8}
 8013a1e:	b094      	sub	sp, #80	; 0x50
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6178      	str	r0, [r7, #20]
 8013a24:	ed87 0a04 	vstr	s0, [r7, #16]
 8013a28:	edc7 0a03 	vstr	s1, [r7, #12]
 8013a2c:	60b9      	str	r1, [r7, #8]
 8013a2e:	607a      	str	r2, [r7, #4]
  // size of table should equal to num + 1
  // last element only for slope calculation
  float step = (max - min) / (num - 1);
 8013a30:	ed97 7a03 	vldr	s14, [r7, #12]
 8013a34:	edd7 7a04 	vldr	s15, [r7, #16]
 8013a38:	ee77 6a67 	vsub.f32	s13, s14, s15
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	3b01      	subs	r3, #1
 8013a40:	ee07 3a90 	vmov	s15, r3
 8013a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013a4c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 8013a50:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013a54:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013a58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013a5c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 8013a60:	2300      	movs	r3, #0
 8013a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	3b01      	subs	r3, #1
 8013a68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	f280 80c0 	bge.w	8013bf0 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 8013a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a72:	ee07 3a90 	vmov	s15, r3
 8013a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013a7a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8013a7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a82:	edd7 7a04 	vldr	s15, [r7, #16]
 8013a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a8a:	697b      	ldr	r3, [r7, #20]
 8013a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8013a90:	4798      	blx	r3
 8013a92:	eef0 7a40 	vmov.f32	s15, s0
 8013a96:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8013c68 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8013a9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8013aa2:	f7f7 f9e6 	bl	800ae72 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013aa6:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
    float midpoint_interp_val =
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 8013aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013aac:	3301      	adds	r3, #1
 8013aae:	ee07 3a90 	vmov	s15, r3
 8013ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ab6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8013aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013abe:	edd7 7a04 	vldr	s15, [r7, #16]
 8013ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8013acc:	4798      	blx	r3
 8013ace:	eef0 7a40 	vmov.f32	s15, s0
 8013ad2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8013c68 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8013ad6:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 8013ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013adc:	ee07 3a90 	vmov	s15, r3
 8013ae0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ae4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8013ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013aec:	edd7 7a04 	vldr	s15, [r7, #16]
 8013af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013af4:	697b      	ldr	r3, [r7, #20]
 8013af6:	eeb0 0a67 	vmov.f32	s0, s15
 8013afa:	4798      	blx	r3
 8013afc:	eef0 7a40 	vmov.f32	s15, s0
 8013b00:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8013c68 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8013b04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b08:	eeb0 0a67 	vmov.f32	s0, s15
 8013b0c:	f7f7 f9b1 	bl	800ae72 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013b10:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 8013b14:	ee78 7a27 	vadd.f32	s15, s16, s15
 8013b18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013b1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013b20:	eeb0 0a47 	vmov.f32	s0, s14
 8013b24:	f7f7 f9a5 	bl	800ae72 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013b28:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
                    2.0f);
    float midpoint_val =
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 8013b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b2e:	ee07 3a90 	vmov	s15, r3
 8013b32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013b36:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8013b3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013b3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8013b42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013b46:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b4e:	697b      	ldr	r3, [r7, #20]
 8013b50:	eeb0 0a67 	vmov.f32	s0, s15
 8013b54:	4798      	blx	r3
 8013b56:	eef0 7a40 	vmov.f32	s15, s0
 8013b5a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8013c68 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8013b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b62:	eeb0 0a67 	vmov.f32	s0, s15
 8013b66:	f7f7 f984 	bl	800ae72 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013b6a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 8013b6e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8013b72:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b7a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 8013b7e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8013b82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013b86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013b8a:	eeb0 0a47 	vmov.f32	s0, s14
 8013b8e:	f7f7 f970 	bl	800ae72 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013b92:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8013b96:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013b9a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8013b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ba2:	edc7 7a06 	vstr	s15, [r7, #24]
 8013ba6:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8013baa:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 8013bac:	f107 021c 	add.w	r2, r7, #28
 8013bb0:	f107 0318 	add.w	r3, r7, #24
 8013bb4:	4611      	mov	r1, r2
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7f7 f92e 	bl	800ae18 <_ZSt3maxIfERKT_S2_S2_>
 8013bbc:	4602      	mov	r2, r0
 8013bbe:	4b2b      	ldr	r3, [pc, #172]	; (8013c6c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8013bc0:	623b      	str	r3, [r7, #32]
 8013bc2:	f107 0320 	add.w	r3, r7, #32
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	4610      	mov	r0, r2
 8013bca:	f7f7 f90c 	bl	800ade6 <_ZSt3minIfERKT_S2_S2_>
 8013bce:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8013bd0:	edd3 7a00 	vldr	s15, [r3]
 8013bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bd6:	005b      	lsls	r3, r3, #1
 8013bd8:	68ba      	ldr	r2, [r7, #8]
 8013bda:	4413      	add	r3, r2
 8013bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013be0:	ee17 2a90 	vmov	r2, s15
 8013be4:	b212      	sxth	r2, r2
 8013be6:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 8013be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bea:	3301      	adds	r3, #1
 8013bec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013bee:	e739      	b.n	8013a64 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
  }
  table[num - 1] = std::min<float>(
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 8013bf0:	697b      	ldr	r3, [r7, #20]
 8013bf2:	ed97 0a03 	vldr	s0, [r7, #12]
 8013bf6:	4798      	blx	r3
 8013bf8:	eef0 7a40 	vmov.f32	s15, s0
 8013bfc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8013c68 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8013c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c04:	eeb0 0a67 	vmov.f32	s0, s15
 8013c08:	f7f7 f933 	bl	800ae72 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013c0c:	eef0 7a40 	vmov.f32	s15, s0
 8013c10:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8013c14:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8013c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8013c1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013c22:	4611      	mov	r1, r2
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7f7 f8f7 	bl	800ae18 <_ZSt3maxIfERKT_S2_S2_>
 8013c2a:	4602      	mov	r2, r0
 8013c2c:	4b0f      	ldr	r3, [pc, #60]	; (8013c6c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8013c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c34:	4619      	mov	r1, r3
 8013c36:	4610      	mov	r0, r2
 8013c38:	f7f7 f8d5 	bl	800ade6 <_ZSt3minIfERKT_S2_S2_>
 8013c3c:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 8013c3e:	edd3 7a00 	vldr	s15, [r3]
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013c48:	3b01      	subs	r3, #1
 8013c4a:	005b      	lsls	r3, r3, #1
 8013c4c:	68ba      	ldr	r2, [r7, #8]
 8013c4e:	4413      	add	r3, r2
 8013c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c54:	ee17 2a90 	vmov	r2, s15
 8013c58:	b212      	sxth	r2, r2
 8013c5a:	801a      	strh	r2, [r3, #0]
}
 8013c5c:	bf00      	nop
 8013c5e:	3750      	adds	r7, #80	; 0x50
 8013c60:	46bd      	mov	sp, r7
 8013c62:	ecbd 8b02 	vpop	{d8}
 8013c66:	bd80      	pop	{r7, pc}
 8013c68:	47000000 	.word	0x47000000
 8013c6c:	46fffe00 	.word	0x46fffe00

08013c70 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8013c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013c74:	b090      	sub	sp, #64	; 0x40
 8013c76:	af06      	add	r7, sp, #24
 8013c78:	60f8      	str	r0, [r7, #12]
 8013c7a:	60b9      	str	r1, [r7, #8]
 8013c7c:	607a      	str	r2, [r7, #4]
 8013c7e:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	781b      	ldrb	r3, [r3, #0]
 8013c84:	2b09      	cmp	r3, #9
 8013c86:	d004      	beq.n	8013c92 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	781b      	ldrb	r3, [r3, #0]
 8013c8c:	2b07      	cmp	r3, #7
 8013c8e:	f040 81b6 	bne.w	8013ffe <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	2b07      	cmp	r3, #7
 8013c98:	d156      	bne.n	8013d48 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	691b      	ldr	r3, [r3, #16]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d011      	beq.n	8013cc6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	695c      	ldr	r4, [r3, #20]
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	691b      	ldr	r3, [r3, #16]
 8013caa:	2200      	movs	r2, #0
 8013cac:	9203      	str	r2, [sp, #12]
 8013cae:	9302      	str	r3, [sp, #8]
 8013cb0:	4ba1      	ldr	r3, [pc, #644]	; (8013f38 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 8013cb2:	9301      	str	r3, [sp, #4]
 8013cb4:	4ba1      	ldr	r3, [pc, #644]	; (8013f3c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8013cb6:	9300      	str	r3, [sp, #0]
 8013cb8:	2325      	movs	r3, #37	; 0x25
 8013cba:	4aa1      	ldr	r2, [pc, #644]	; (8013f40 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013cbc:	49a1      	ldr	r1, [pc, #644]	; (8013f44 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8013cbe:	68f8      	ldr	r0, [r7, #12]
 8013cc0:	47a0      	blx	r4
 8013cc2:	2301      	movs	r3, #1
 8013cc4:	e1e0      	b.n	8014088 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8013ccc:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8013f48 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8013cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd8:	dd07      	ble.n	8013cea <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	edd3 7a03 	vldr	s15, [r3, #12]
 8013ce0:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8013f48 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8013ce4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ce8:	e006      	b.n	8013cf8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	edd3 7a03 	vldr	s15, [r3, #12]
 8013cf0:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8013f48 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8013cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cf8:	edc7 7a08 	vstr	s15, [r7, #32]
 8013cfc:	edd7 7a08 	vldr	s15, [r7, #32]
 8013d00:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8013f4c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 8013d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d0c:	f340 80dd 	ble.w	8013eca <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	695c      	ldr	r4, [r3, #20]
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	68db      	ldr	r3, [r3, #12]
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7ec fc47 	bl	80005ac <__aeabi_f2d>
 8013d1e:	4602      	mov	r2, r0
 8013d20:	460b      	mov	r3, r1
 8013d22:	f04f 0000 	mov.w	r0, #0
 8013d26:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8013d2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013d32:	4b87      	ldr	r3, [pc, #540]	; (8013f50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 8013d34:	9301      	str	r3, [sp, #4]
 8013d36:	4b87      	ldr	r3, [pc, #540]	; (8013f54 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8013d38:	9300      	str	r3, [sp, #0]
 8013d3a:	2326      	movs	r3, #38	; 0x26
 8013d3c:	4a80      	ldr	r2, [pc, #512]	; (8013f40 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013d3e:	4986      	ldr	r1, [pc, #536]	; (8013f58 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8013d40:	68f8      	ldr	r0, [r7, #12]
 8013d42:	47a0      	blx	r4
 8013d44:	2301      	movs	r3, #1
 8013d46:	e19f      	b.n	8014088 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	781b      	ldrb	r3, [r3, #0]
 8013d4c:	2b09      	cmp	r3, #9
 8013d4e:	d018      	beq.n	8013d82 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	695c      	ldr	r4, [r3, #20]
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	781b      	ldrb	r3, [r3, #0]
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7f4 fb49 	bl	80083f0 <TfLiteTypeGetName>
 8013d5e:	4605      	mov	r5, r0
 8013d60:	2009      	movs	r0, #9
 8013d62:	f7f4 fb45 	bl	80083f0 <TfLiteTypeGetName>
 8013d66:	4603      	mov	r3, r0
 8013d68:	9303      	str	r3, [sp, #12]
 8013d6a:	9502      	str	r5, [sp, #8]
 8013d6c:	4b7b      	ldr	r3, [pc, #492]	; (8013f5c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8013d6e:	9301      	str	r3, [sp, #4]
 8013d70:	4b7b      	ldr	r3, [pc, #492]	; (8013f60 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 8013d72:	9300      	str	r3, [sp, #0]
 8013d74:	2329      	movs	r3, #41	; 0x29
 8013d76:	4a72      	ldr	r2, [pc, #456]	; (8013f40 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013d78:	497a      	ldr	r1, [pc, #488]	; (8013f64 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8013d7a:	68f8      	ldr	r0, [r7, #12]
 8013d7c:	47a0      	blx	r4
 8013d7e:	2301      	movs	r3, #1
 8013d80:	e182      	b.n	8014088 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	781b      	ldrb	r3, [r3, #0]
 8013d86:	2b07      	cmp	r3, #7
 8013d88:	d155      	bne.n	8013e36 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	691b      	ldr	r3, [r3, #16]
 8013d8e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8013d92:	d011      	beq.n	8013db8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	695c      	ldr	r4, [r3, #20]
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	691b      	ldr	r3, [r3, #16]
 8013d9c:	4a72      	ldr	r2, [pc, #456]	; (8013f68 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8013d9e:	9203      	str	r2, [sp, #12]
 8013da0:	9302      	str	r3, [sp, #8]
 8013da2:	4b72      	ldr	r3, [pc, #456]	; (8013f6c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 8013da4:	9301      	str	r3, [sp, #4]
 8013da6:	4b65      	ldr	r3, [pc, #404]	; (8013f3c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8013da8:	9300      	str	r3, [sp, #0]
 8013daa:	232b      	movs	r3, #43	; 0x2b
 8013dac:	4a64      	ldr	r2, [pc, #400]	; (8013f40 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013dae:	4965      	ldr	r1, [pc, #404]	; (8013f44 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8013db0:	68f8      	ldr	r0, [r7, #12]
 8013db2:	47a0      	blx	r4
 8013db4:	2301      	movs	r3, #1
 8013db6:	e167      	b.n	8014088 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	edd3 7a03 	vldr	s15, [r3, #12]
 8013dbe:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8013f70 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8013dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dca:	dd07      	ble.n	8013ddc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	edd3 7a03 	vldr	s15, [r3, #12]
 8013dd2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013f70 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8013dd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013dda:	e006      	b.n	8013dea <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	edd3 7a03 	vldr	s15, [r3, #12]
 8013de2:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8013f70 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8013de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013dea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8013dee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013df2:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8013f74 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 8013df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dfe:	dd64      	ble.n	8013eca <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	695c      	ldr	r4, [r3, #20]
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	68db      	ldr	r3, [r3, #12]
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f7ec fbcf 	bl	80005ac <__aeabi_f2d>
 8013e0e:	4602      	mov	r2, r0
 8013e10:	460b      	mov	r3, r1
 8013e12:	f04f 0000 	mov.w	r0, #0
 8013e16:	4958      	ldr	r1, [pc, #352]	; (8013f78 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 8013e18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013e1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013e20:	4b56      	ldr	r3, [pc, #344]	; (8013f7c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 8013e22:	9301      	str	r3, [sp, #4]
 8013e24:	4b4b      	ldr	r3, [pc, #300]	; (8013f54 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8013e26:	9300      	str	r3, [sp, #0]
 8013e28:	232c      	movs	r3, #44	; 0x2c
 8013e2a:	4a45      	ldr	r2, [pc, #276]	; (8013f40 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013e2c:	494a      	ldr	r1, [pc, #296]	; (8013f58 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8013e2e:	68f8      	ldr	r0, [r7, #12]
 8013e30:	47a0      	blx	r4
 8013e32:	2301      	movs	r3, #1
 8013e34:	e128      	b.n	8014088 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	781b      	ldrb	r3, [r3, #0]
 8013e3a:	2b09      	cmp	r3, #9
 8013e3c:	d018      	beq.n	8013e70 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	695c      	ldr	r4, [r3, #20]
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	781b      	ldrb	r3, [r3, #0]
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7f4 fad2 	bl	80083f0 <TfLiteTypeGetName>
 8013e4c:	4605      	mov	r5, r0
 8013e4e:	2009      	movs	r0, #9
 8013e50:	f7f4 face 	bl	80083f0 <TfLiteTypeGetName>
 8013e54:	4603      	mov	r3, r0
 8013e56:	9303      	str	r3, [sp, #12]
 8013e58:	9502      	str	r5, [sp, #8]
 8013e5a:	4b40      	ldr	r3, [pc, #256]	; (8013f5c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8013e5c:	9301      	str	r3, [sp, #4]
 8013e5e:	4b48      	ldr	r3, [pc, #288]	; (8013f80 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 8013e60:	9300      	str	r3, [sp, #0]
 8013e62:	232f      	movs	r3, #47	; 0x2f
 8013e64:	4a36      	ldr	r2, [pc, #216]	; (8013f40 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013e66:	493f      	ldr	r1, [pc, #252]	; (8013f64 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8013e68:	68f8      	ldr	r0, [r7, #12]
 8013e6a:	47a0      	blx	r4
 8013e6c:	2301      	movs	r3, #1
 8013e6e:	e10b      	b.n	8014088 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	691b      	ldr	r3, [r3, #16]
 8013e74:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8013e78:	d012      	beq.n	8013ea0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	695c      	ldr	r4, [r3, #20]
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	691b      	ldr	r3, [r3, #16]
 8013e82:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8013e86:	9203      	str	r2, [sp, #12]
 8013e88:	9302      	str	r3, [sp, #8]
 8013e8a:	4b3e      	ldr	r3, [pc, #248]	; (8013f84 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 8013e8c:	9301      	str	r3, [sp, #4]
 8013e8e:	4b2b      	ldr	r3, [pc, #172]	; (8013f3c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8013e90:	9300      	str	r3, [sp, #0]
 8013e92:	2330      	movs	r3, #48	; 0x30
 8013e94:	4a2a      	ldr	r2, [pc, #168]	; (8013f40 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013e96:	492b      	ldr	r1, [pc, #172]	; (8013f44 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8013e98:	68f8      	ldr	r0, [r7, #12]
 8013e9a:	47a0      	blx	r4
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	e0f3      	b.n	8014088 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	edd3 7a03 	vldr	s15, [r3, #12]
 8013ea6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013f88 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 8013eaa:	eef4 7a47 	vcmp.f32	s15, s14
 8013eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eb2:	d00a      	beq.n	8013eca <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	695c      	ldr	r4, [r3, #20]
 8013eb8:	4b34      	ldr	r3, [pc, #208]	; (8013f8c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 8013eba:	9300      	str	r3, [sp, #0]
 8013ebc:	2331      	movs	r3, #49	; 0x31
 8013ebe:	4a20      	ldr	r2, [pc, #128]	; (8013f40 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013ec0:	4933      	ldr	r1, [pc, #204]	; (8013f90 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 8013ec2:	68f8      	ldr	r0, [r7, #12]
 8013ec4:	47a0      	blx	r4
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	e0de      	b.n	8014088 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	781b      	ldrb	r3, [r3, #0]
 8013ece:	2b07      	cmp	r3, #7
 8013ed0:	d160      	bne.n	8013f94 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 8013ed2:	68bb      	ldr	r3, [r7, #8]
 8013ed4:	68db      	ldr	r3, [r3, #12]
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f7ec fb68 	bl	80005ac <__aeabi_f2d>
 8013edc:	4604      	mov	r4, r0
 8013ede:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7ec fb61 	bl	80005ac <__aeabi_f2d>
 8013eea:	4602      	mov	r2, r0
 8013eec:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 8013eee:	4620      	mov	r0, r4
 8013ef0:	4629      	mov	r1, r5
 8013ef2:	f7ec fbb3 	bl	800065c <__aeabi_dmul>
 8013ef6:	4602      	mov	r2, r0
 8013ef8:	460b      	mov	r3, r1
 8013efa:	4610      	mov	r0, r2
 8013efc:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 8013efe:	a30c      	add	r3, pc, #48	; (adr r3, 8013f30 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8013f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f04:	f7ec fcd4 	bl	80008b0 <__aeabi_ddiv>
 8013f08:	4602      	mov	r2, r0
 8013f0a:	460b      	mov	r3, r1
 8013f0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 8013f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f12:	3308      	adds	r3, #8
 8013f14:	f107 0214 	add.w	r2, r7, #20
 8013f18:	4611      	mov	r1, r2
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	ed97 0b06 	vldr	d0, [r7, #24]
 8013f20:	f7f6 fdea 	bl	800aaf8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 8013f24:	697a      	ldr	r2, [r7, #20]
 8013f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f28:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 8013f2a:	e0ac      	b.n	8014086 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 8013f2c:	f3af 8000 	nop.w
 8013f30:	00140014 	.word	0x00140014
 8013f34:	3f240014 	.word	0x3f240014
 8013f38:	0802ae58 	.word	0x0802ae58
 8013f3c:	0802ae5c 	.word	0x0802ae5c
 8013f40:	0802adf8 	.word	0x0802adf8
 8013f44:	0802ae3c 	.word	0x0802ae3c
 8013f48:	38000000 	.word	0x38000000
 8013f4c:	3303126f 	.word	0x3303126f
 8013f50:	0802ae98 	.word	0x0802ae98
 8013f54:	0802aea4 	.word	0x0802aea4
 8013f58:	0802ae78 	.word	0x0802ae78
 8013f5c:	0802aed8 	.word	0x0802aed8
 8013f60:	0802aee4 	.word	0x0802aee4
 8013f64:	0802aebc 	.word	0x0802aebc
 8013f68:	ffff8000 	.word	0xffff8000
 8013f6c:	0802aef0 	.word	0x0802aef0
 8013f70:	37800000 	.word	0x37800000
 8013f74:	3283126f 	.word	0x3283126f
 8013f78:	3ef00000 	.word	0x3ef00000
 8013f7c:	0802aef8 	.word	0x0802aef8
 8013f80:	0802af04 	.word	0x0802af04
 8013f84:	0802af14 	.word	0x0802af14
 8013f88:	3b800000 	.word	0x3b800000
 8013f8c:	0802af34 	.word	0x0802af34
 8013f90:	0802af1c 	.word	0x0802af1c
          static_cast<double>(params->beta),
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7ec fb07 	bl	80005ac <__aeabi_f2d>
 8013f9e:	4680      	mov	r8, r0
 8013fa0:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 8013fa2:	68bb      	ldr	r3, [r7, #8]
 8013fa4:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f7ec fb00 	bl	80005ac <__aeabi_f2d>
 8013fac:	4682      	mov	sl, r0
 8013fae:	468b      	mov	fp, r1
 8013fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fb2:	3308      	adds	r3, #8
 8013fb4:	f107 0210 	add.w	r2, r7, #16
 8013fb8:	4619      	mov	r1, r3
 8013fba:	2005      	movs	r0, #5
 8013fbc:	ec4b ab11 	vmov	d1, sl, fp
 8013fc0:	ec49 8b10 	vmov	d0, r8, r9
 8013fc4:	f7f6 fe60 	bl	800ac88 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 8013fc8:	693a      	ldr	r2, [r7, #16]
 8013fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fcc:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 8013fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fd0:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8013fd2:	221f      	movs	r2, #31
 8013fd4:	4619      	mov	r1, r3
 8013fd6:	2005      	movs	r0, #5
 8013fd8:	f7f6 fe9e 	bl	800ad18 <_ZN6tflite20CalculateInputRadiusEiii>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7ec fad2 	bl	8000588 <__aeabi_i2d>
 8013fe4:	4602      	mov	r2, r0
 8013fe6:	460b      	mov	r3, r1
 8013fe8:	4614      	mov	r4, r2
 8013fea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 8013fee:	4620      	mov	r0, r4
 8013ff0:	4629      	mov	r1, r5
 8013ff2:	f7ec fdcd 	bl	8000b90 <__aeabi_d2iz>
 8013ff6:	4602      	mov	r2, r0
 8013ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ffa:	619a      	str	r2, [r3, #24]
    }
 8013ffc:	e043      	b.n	8014086 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	781b      	ldrb	r3, [r3, #0]
 8014002:	2b01      	cmp	r3, #1
 8014004:	d018      	beq.n	8014038 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	695c      	ldr	r4, [r3, #20]
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	781b      	ldrb	r3, [r3, #0]
 801400e:	4618      	mov	r0, r3
 8014010:	f7f4 f9ee 	bl	80083f0 <TfLiteTypeGetName>
 8014014:	4605      	mov	r5, r0
 8014016:	2001      	movs	r0, #1
 8014018:	f7f4 f9ea 	bl	80083f0 <TfLiteTypeGetName>
 801401c:	4603      	mov	r3, r0
 801401e:	9303      	str	r3, [sp, #12]
 8014020:	9502      	str	r5, [sp, #8]
 8014022:	4b1c      	ldr	r3, [pc, #112]	; (8014094 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 8014024:	9301      	str	r3, [sp, #4]
 8014026:	4b1c      	ldr	r3, [pc, #112]	; (8014098 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 8014028:	9300      	str	r3, [sp, #0]
 801402a:	234e      	movs	r3, #78	; 0x4e
 801402c:	4a1b      	ldr	r2, [pc, #108]	; (801409c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801402e:	491c      	ldr	r1, [pc, #112]	; (80140a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8014030:	68f8      	ldr	r0, [r7, #12]
 8014032:	47a0      	blx	r4
 8014034:	2301      	movs	r3, #1
 8014036:	e027      	b.n	8014088 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	781b      	ldrb	r3, [r3, #0]
 801403c:	2b01      	cmp	r3, #1
 801403e:	d018      	beq.n	8014072 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	695c      	ldr	r4, [r3, #20]
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	781b      	ldrb	r3, [r3, #0]
 8014048:	4618      	mov	r0, r3
 801404a:	f7f4 f9d1 	bl	80083f0 <TfLiteTypeGetName>
 801404e:	4605      	mov	r5, r0
 8014050:	2001      	movs	r0, #1
 8014052:	f7f4 f9cd 	bl	80083f0 <TfLiteTypeGetName>
 8014056:	4603      	mov	r3, r0
 8014058:	9303      	str	r3, [sp, #12]
 801405a:	9502      	str	r5, [sp, #8]
 801405c:	4b0d      	ldr	r3, [pc, #52]	; (8014094 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801405e:	9301      	str	r3, [sp, #4]
 8014060:	4b10      	ldr	r3, [pc, #64]	; (80140a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 8014062:	9300      	str	r3, [sp, #0]
 8014064:	234f      	movs	r3, #79	; 0x4f
 8014066:	4a0d      	ldr	r2, [pc, #52]	; (801409c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8014068:	490d      	ldr	r1, [pc, #52]	; (80140a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801406a:	68f8      	ldr	r0, [r7, #12]
 801406c:	47a0      	blx	r4
 801406e:	2301      	movs	r3, #1
 8014070:	e00a      	b.n	8014088 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	4618      	mov	r0, r3
 8014078:	f7ec fa98 	bl	80005ac <__aeabi_f2d>
 801407c:	4602      	mov	r2, r0
 801407e:	460b      	mov	r3, r1
 8014080:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014082:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8014086:	2300      	movs	r3, #0
}
 8014088:	4618      	mov	r0, r3
 801408a:	3728      	adds	r7, #40	; 0x28
 801408c:	46bd      	mov	sp, r7
 801408e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014092:	bf00      	nop
 8014094:	0802af58 	.word	0x0802af58
 8014098:	0802aee4 	.word	0x0802aee4
 801409c:	0802adf8 	.word	0x0802adf8
 80140a0:	0802aebc 	.word	0x0802aebc
 80140a4:	0802af04 	.word	0x0802af04

080140a8 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b084      	sub	sp, #16
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	60f8      	str	r0, [r7, #12]
 80140b0:	60b9      	str	r1, [r7, #8]
 80140b2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d101      	bne.n	80140c0 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 80140bc:	f010 feff 	bl	8024ebe <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140c4:	2138      	movs	r1, #56	; 0x38
 80140c6:	68f8      	ldr	r0, [r7, #12]
 80140c8:	4798      	blx	r3
 80140ca:	4603      	mov	r3, r0
}
 80140cc:	4618      	mov	r0, r3
 80140ce:	3710      	adds	r7, #16
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bd80      	pop	{r7, pc}

080140d4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b082      	sub	sp, #8
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	ed87 0a00 	vstr	s0, [r7]
 80140e0:	ed97 0a00 	vldr	s0, [r7]
 80140e4:	f7fe fa3f 	bl	8012566 <_ZSt3expf>
 80140e8:	eef0 7a40 	vmov.f32	s15, s0
 80140ec:	eeb0 0a67 	vmov.f32	s0, s15
 80140f0:	3708      	adds	r7, #8
 80140f2:	46bd      	mov	sp, r7
 80140f4:	bd80      	pop	{r7, pc}

080140f6 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 80140f6:	b580      	push	{r7, lr}
 80140f8:	b082      	sub	sp, #8
 80140fa:	af00      	add	r7, sp, #0
 80140fc:	ed87 0a01 	vstr	s0, [r7, #4]
 8014100:	ed97 0a01 	vldr	s0, [r7, #4]
 8014104:	2000      	movs	r0, #0
 8014106:	f7ff ffe5 	bl	80140d4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 801410a:	eef0 7a40 	vmov.f32	s15, s0
 801410e:	eeb0 0a67 	vmov.f32	s0, s15
 8014112:	3708      	adds	r7, #8
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}

08014118 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 8014118:	b480      	push	{r7}
 801411a:	b083      	sub	sp, #12
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
 8014120:	4b03      	ldr	r3, [pc, #12]	; (8014130 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 8014122:	4618      	mov	r0, r3
 8014124:	370c      	adds	r7, #12
 8014126:	46bd      	mov	sp, r7
 8014128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801412c:	4770      	bx	lr
 801412e:	bf00      	nop
 8014130:	080140f7 	.word	0x080140f7

08014134 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8014134:	b480      	push	{r7}
 8014136:	b083      	sub	sp, #12
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
 801413c:	ed87 0a00 	vstr	s0, [r7]
 8014140:	edd7 7a00 	vldr	s15, [r7]
 8014144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014148:	ee77 7a87 	vadd.f32	s15, s15, s14
 801414c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014150:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014154:	eef0 7a66 	vmov.f32	s15, s13
 8014158:	eeb0 0a67 	vmov.f32	s0, s15
 801415c:	370c      	adds	r7, #12
 801415e:	46bd      	mov	sp, r7
 8014160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014164:	4770      	bx	lr

08014166 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 8014166:	b580      	push	{r7, lr}
 8014168:	b082      	sub	sp, #8
 801416a:	af00      	add	r7, sp, #0
 801416c:	ed87 0a01 	vstr	s0, [r7, #4]
 8014170:	ed97 0a01 	vldr	s0, [r7, #4]
 8014174:	2000      	movs	r0, #0
 8014176:	f7ff ffdd 	bl	8014134 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 801417a:	eef0 7a40 	vmov.f32	s15, s0
 801417e:	eeb0 0a67 	vmov.f32	s0, s15
 8014182:	3708      	adds	r7, #8
 8014184:	46bd      	mov	sp, r7
 8014186:	bd80      	pop	{r7, pc}

08014188 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 8014188:	b480      	push	{r7}
 801418a:	b083      	sub	sp, #12
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
 8014190:	4b03      	ldr	r3, [pc, #12]	; (80141a0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 8014192:	4618      	mov	r0, r3
 8014194:	370c      	adds	r7, #12
 8014196:	46bd      	mov	sp, r7
 8014198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419c:	4770      	bx	lr
 801419e:	bf00      	nop
 80141a0:	08014167 	.word	0x08014167

080141a4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 80141a4:	b590      	push	{r4, r7, lr}
 80141a6:	b08f      	sub	sp, #60	; 0x3c
 80141a8:	af04      	add	r7, sp, #16
 80141aa:	6078      	str	r0, [r7, #4]
 80141ac:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 80141ae:	6838      	ldr	r0, [r7, #0]
 80141b0:	f7fd fcb9 	bl	8011b26 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80141b4:	4603      	mov	r3, r0
 80141b6:	2b01      	cmp	r3, #1
 80141b8:	bf14      	ite	ne
 80141ba:	2301      	movne	r3, #1
 80141bc:	2300      	moveq	r3, #0
 80141be:	b2db      	uxtb	r3, r3
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d013      	beq.n	80141ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	695c      	ldr	r4, [r3, #20]
 80141c8:	6838      	ldr	r0, [r7, #0]
 80141ca:	f7fd fcac 	bl	8011b26 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80141ce:	4603      	mov	r3, r0
 80141d0:	2201      	movs	r2, #1
 80141d2:	9203      	str	r2, [sp, #12]
 80141d4:	9302      	str	r3, [sp, #8]
 80141d6:	4b7c      	ldr	r3, [pc, #496]	; (80143c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 80141d8:	9301      	str	r3, [sp, #4]
 80141da:	4b7c      	ldr	r3, [pc, #496]	; (80143cc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 80141dc:	9300      	str	r3, [sp, #0]
 80141de:	235d      	movs	r3, #93	; 0x5d
 80141e0:	4a7b      	ldr	r2, [pc, #492]	; (80143d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80141e2:	497c      	ldr	r1, [pc, #496]	; (80143d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	47a0      	blx	r4
 80141e8:	2301      	movs	r3, #1
 80141ea:	e146      	b.n	801447a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 80141ec:	6838      	ldr	r0, [r7, #0]
 80141ee:	f7fd fca7 	bl	8011b40 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80141f2:	4603      	mov	r3, r0
 80141f4:	2b01      	cmp	r3, #1
 80141f6:	bf14      	ite	ne
 80141f8:	2301      	movne	r3, #1
 80141fa:	2300      	moveq	r3, #0
 80141fc:	b2db      	uxtb	r3, r3
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d013      	beq.n	801422a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	695c      	ldr	r4, [r3, #20]
 8014206:	6838      	ldr	r0, [r7, #0]
 8014208:	f7fd fc9a 	bl	8011b40 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801420c:	4603      	mov	r3, r0
 801420e:	2201      	movs	r2, #1
 8014210:	9203      	str	r2, [sp, #12]
 8014212:	9302      	str	r3, [sp, #8]
 8014214:	4b6c      	ldr	r3, [pc, #432]	; (80143c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8014216:	9301      	str	r3, [sp, #4]
 8014218:	4b6f      	ldr	r3, [pc, #444]	; (80143d8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 801421a:	9300      	str	r3, [sp, #0]
 801421c:	235e      	movs	r3, #94	; 0x5e
 801421e:	4a6c      	ldr	r2, [pc, #432]	; (80143d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014220:	496c      	ldr	r1, [pc, #432]	; (80143d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8014222:	6878      	ldr	r0, [r7, #4]
 8014224:	47a0      	blx	r4
 8014226:	2301      	movs	r3, #1
 8014228:	e127      	b.n	801447a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 801422a:	2200      	movs	r2, #0
 801422c:	6839      	ldr	r1, [r7, #0]
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f7f6 ff40 	bl	800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014234:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 8014236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014238:	2b00      	cmp	r3, #0
 801423a:	d10a      	bne.n	8014252 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	695c      	ldr	r4, [r3, #20]
 8014240:	4b66      	ldr	r3, [pc, #408]	; (80143dc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 8014242:	9300      	str	r3, [sp, #0]
 8014244:	2360      	movs	r3, #96	; 0x60
 8014246:	4a62      	ldr	r2, [pc, #392]	; (80143d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014248:	4965      	ldr	r1, [pc, #404]	; (80143e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	47a0      	blx	r4
 801424e:	2301      	movs	r3, #1
 8014250:	e113      	b.n	801447a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 8014252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014254:	f7f6 fe5a 	bl	800af0c <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8014258:	4603      	mov	r3, r0
 801425a:	2b00      	cmp	r3, #0
 801425c:	bfd4      	ite	le
 801425e:	2301      	movle	r3, #1
 8014260:	2300      	movgt	r3, #0
 8014262:	b2db      	uxtb	r3, r3
 8014264:	2b00      	cmp	r3, #0
 8014266:	d00a      	beq.n	801427e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	695c      	ldr	r4, [r3, #20]
 801426c:	4b5d      	ldr	r3, [pc, #372]	; (80143e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801426e:	9300      	str	r3, [sp, #0]
 8014270:	2361      	movs	r3, #97	; 0x61
 8014272:	4a57      	ldr	r2, [pc, #348]	; (80143d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014274:	495a      	ldr	r1, [pc, #360]	; (80143e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8014276:	6878      	ldr	r0, [r7, #4]
 8014278:	47a0      	blx	r4
 801427a:	2301      	movs	r3, #1
 801427c:	e0fd      	b.n	801447a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 801427e:	2200      	movs	r2, #0
 8014280:	6839      	ldr	r1, [r7, #0]
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f7f6 ff26 	bl	800b0d4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8014288:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 801428a:	6a3b      	ldr	r3, [r7, #32]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d10a      	bne.n	80142a6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	695c      	ldr	r4, [r3, #20]
 8014294:	4b54      	ldr	r3, [pc, #336]	; (80143e8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8014296:	9300      	str	r3, [sp, #0]
 8014298:	2363      	movs	r3, #99	; 0x63
 801429a:	4a4d      	ldr	r2, [pc, #308]	; (80143d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801429c:	4950      	ldr	r1, [pc, #320]	; (80143e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801429e:	6878      	ldr	r0, [r7, #4]
 80142a0:	47a0      	blx	r4
 80142a2:	2301      	movs	r3, #1
 80142a4:	e0e9      	b.n	801447a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 80142a6:	683b      	ldr	r3, [r7, #0]
 80142a8:	691b      	ldr	r3, [r3, #16]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d10a      	bne.n	80142c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	695c      	ldr	r4, [r3, #20]
 80142b2:	4b4e      	ldr	r3, [pc, #312]	; (80143ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 80142b4:	9300      	str	r3, [sp, #0]
 80142b6:	2365      	movs	r3, #101	; 0x65
 80142b8:	4a45      	ldr	r2, [pc, #276]	; (80143d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80142ba:	4949      	ldr	r1, [pc, #292]	; (80143e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80142bc:	6878      	ldr	r0, [r7, #4]
 80142be:	47a0      	blx	r4
 80142c0:	2301      	movs	r3, #1
 80142c2:	e0da      	b.n	801447a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 80142c4:	683b      	ldr	r3, [r7, #0]
 80142c6:	691b      	ldr	r3, [r3, #16]
 80142c8:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 80142ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142cc:	781b      	ldrb	r3, [r3, #0]
 80142ce:	2b07      	cmp	r3, #7
 80142d0:	d12f      	bne.n	8014332 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142d6:	f240 4102 	movw	r1, #1026	; 0x402
 80142da:	6878      	ldr	r0, [r7, #4]
 80142dc:	4798      	blx	r3
 80142de:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 80142e0:	69bb      	ldr	r3, [r7, #24]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d10a      	bne.n	80142fc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	695c      	ldr	r4, [r3, #20]
 80142ea:	4b41      	ldr	r3, [pc, #260]	; (80143f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 80142ec:	9300      	str	r3, [sp, #0]
 80142ee:	236b      	movs	r3, #107	; 0x6b
 80142f0:	4a37      	ldr	r2, [pc, #220]	; (80143d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80142f2:	493b      	ldr	r1, [pc, #236]	; (80143e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	47a0      	blx	r4
 80142f8:	2301      	movs	r3, #1
 80142fa:	e0be      	b.n	801447a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 80142fc:	69fb      	ldr	r3, [r7, #28]
 80142fe:	69ba      	ldr	r2, [r7, #24]
 8014300:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014306:	f240 4102 	movw	r1, #1026	; 0x402
 801430a:	6878      	ldr	r0, [r7, #4]
 801430c:	4798      	blx	r3
 801430e:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d10a      	bne.n	801432c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	695c      	ldr	r4, [r3, #20]
 801431a:	4b36      	ldr	r3, [pc, #216]	; (80143f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801431c:	9300      	str	r3, [sp, #0]
 801431e:	236f      	movs	r3, #111	; 0x6f
 8014320:	4a2b      	ldr	r2, [pc, #172]	; (80143d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014322:	492f      	ldr	r1, [pc, #188]	; (80143e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	47a0      	blx	r4
 8014328:	2301      	movs	r3, #1
 801432a:	e0a6      	b.n	801447a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 801432c:	69fb      	ldr	r3, [r7, #28]
 801432e:	697a      	ldr	r2, [r7, #20]
 8014330:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 8014332:	6a3b      	ldr	r3, [r7, #32]
 8014334:	781b      	ldrb	r3, [r3, #0]
 8014336:	2b07      	cmp	r3, #7
 8014338:	d112      	bne.n	8014360 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 801433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801433c:	781b      	ldrb	r3, [r3, #0]
 801433e:	2b09      	cmp	r3, #9
 8014340:	d028      	beq.n	8014394 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8014342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	2b07      	cmp	r3, #7
 8014348:	d024      	beq.n	8014394 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	695c      	ldr	r4, [r3, #20]
 801434e:	4b2a      	ldr	r3, [pc, #168]	; (80143f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8014350:	9300      	str	r3, [sp, #0]
 8014352:	2375      	movs	r3, #117	; 0x75
 8014354:	4a1e      	ldr	r2, [pc, #120]	; (80143d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014356:	4922      	ldr	r1, [pc, #136]	; (80143e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	47a0      	blx	r4
 801435c:	2301      	movs	r3, #1
 801435e:	e08c      	b.n	801447a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8014360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014362:	781a      	ldrb	r2, [r3, #0]
 8014364:	6a3b      	ldr	r3, [r7, #32]
 8014366:	781b      	ldrb	r3, [r3, #0]
 8014368:	429a      	cmp	r2, r3
 801436a:	d013      	beq.n	8014394 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	695c      	ldr	r4, [r3, #20]
 8014370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014372:	781b      	ldrb	r3, [r3, #0]
 8014374:	461a      	mov	r2, r3
 8014376:	6a3b      	ldr	r3, [r7, #32]
 8014378:	781b      	ldrb	r3, [r3, #0]
 801437a:	9303      	str	r3, [sp, #12]
 801437c:	9202      	str	r2, [sp, #8]
 801437e:	4b1f      	ldr	r3, [pc, #124]	; (80143fc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 8014380:	9301      	str	r3, [sp, #4]
 8014382:	4b1f      	ldr	r3, [pc, #124]	; (8014400 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 8014384:	9300      	str	r3, [sp, #0]
 8014386:	2378      	movs	r3, #120	; 0x78
 8014388:	4a11      	ldr	r2, [pc, #68]	; (80143d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801438a:	4912      	ldr	r1, [pc, #72]	; (80143d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801438c:	6878      	ldr	r0, [r7, #4]
 801438e:	47a0      	blx	r4
 8014390:	2301      	movs	r3, #1
 8014392:	e072      	b.n	801447a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 8014394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	2b07      	cmp	r3, #7
 801439a:	d161      	bne.n	8014460 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801439c:	6a3b      	ldr	r3, [r7, #32]
 801439e:	691b      	ldr	r3, [r3, #16]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d035      	beq.n	8014410 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	695c      	ldr	r4, [r3, #20]
 80143a8:	6a3b      	ldr	r3, [r7, #32]
 80143aa:	691b      	ldr	r3, [r3, #16]
 80143ac:	2200      	movs	r2, #0
 80143ae:	9203      	str	r2, [sp, #12]
 80143b0:	9302      	str	r3, [sp, #8]
 80143b2:	4b14      	ldr	r3, [pc, #80]	; (8014404 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 80143b4:	9301      	str	r3, [sp, #4]
 80143b6:	4b14      	ldr	r3, [pc, #80]	; (8014408 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 80143b8:	9300      	str	r3, [sp, #0]
 80143ba:	237d      	movs	r3, #125	; 0x7d
 80143bc:	4a04      	ldr	r2, [pc, #16]	; (80143d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80143be:	4905      	ldr	r1, [pc, #20]	; (80143d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	47a0      	blx	r4
 80143c4:	2301      	movs	r3, #1
 80143c6:	e058      	b.n	801447a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 80143c8:	0802af68 	.word	0x0802af68
 80143cc:	0802af6c 	.word	0x0802af6c
 80143d0:	0802adf8 	.word	0x0802adf8
 80143d4:	0802ae3c 	.word	0x0802ae3c
 80143d8:	0802af7c 	.word	0x0802af7c
 80143dc:	0802af90 	.word	0x0802af90
 80143e0:	0802af1c 	.word	0x0802af1c
 80143e4:	0802afa4 	.word	0x0802afa4
 80143e8:	0802afc0 	.word	0x0802afc0
 80143ec:	0802afd4 	.word	0x0802afd4
 80143f0:	0802aff0 	.word	0x0802aff0
 80143f4:	0802b008 	.word	0x0802b008
 80143f8:	0802b02c 	.word	0x0802b02c
 80143fc:	0802af04 	.word	0x0802af04
 8014400:	0802aee4 	.word	0x0802aee4
 8014404:	0802ae58 	.word	0x0802ae58
 8014408:	0802ae5c 	.word	0x0802ae5c
 801440c:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8014410:	f107 0308 	add.w	r3, r7, #8
 8014414:	4618      	mov	r0, r3
 8014416:	f7ff fe7f 	bl	8014118 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 801441a:	69fb      	ldr	r3, [r7, #28]
 801441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801441e:	f240 2201 	movw	r2, #513	; 0x201
 8014422:	4619      	mov	r1, r3
 8014424:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 801440c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8014428:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 801442c:	f7ff faf4 	bl	8013a18 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8014430:	f107 030c 	add.w	r3, r7, #12
 8014434:	4618      	mov	r0, r3
 8014436:	f7ff fea7 	bl	8014188 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 801443a:	69fb      	ldr	r3, [r7, #28]
 801443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801443e:	f240 2201 	movw	r2, #513	; 0x201
 8014442:	4619      	mov	r1, r3
 8014444:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8014448:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 801440c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801444c:	f7ff fae4 	bl	8013a18 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 8014450:	6a3b      	ldr	r3, [r7, #32]
 8014452:	691a      	ldr	r2, [r3, #16]
 8014454:	69fb      	ldr	r3, [r7, #28]
 8014456:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 8014458:	6a3b      	ldr	r3, [r7, #32]
 801445a:	68da      	ldr	r2, [r3, #12]
 801445c:	69fb      	ldr	r3, [r7, #28]
 801445e:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8014460:	683b      	ldr	r3, [r7, #0]
 8014462:	695b      	ldr	r3, [r3, #20]
 8014464:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 8014466:	69fb      	ldr	r3, [r7, #28]
 8014468:	9300      	str	r3, [sp, #0]
 801446a:	693b      	ldr	r3, [r7, #16]
 801446c:	6a3a      	ldr	r2, [r7, #32]
 801446e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f7ff fbfd 	bl	8013c70 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8014476:	4603      	mov	r3, r0
 8014478:	bf00      	nop
}
 801447a:	4618      	mov	r0, r3
 801447c:	372c      	adds	r7, #44	; 0x2c
 801447e:	46bd      	mov	sp, r7
 8014480:	bd90      	pop	{r4, r7, pc}
 8014482:	bf00      	nop

08014484 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 8014484:	b580      	push	{r7, lr}
 8014486:	b084      	sub	sp, #16
 8014488:	af00      	add	r7, sp, #0
 801448a:	60f8      	str	r0, [r7, #12]
 801448c:	60b9      	str	r1, [r7, #8]
 801448e:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 8014490:	68fa      	ldr	r2, [r7, #12]
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	fa02 f303 	lsl.w	r3, r2, r3
 8014498:	68b9      	ldr	r1, [r7, #8]
 801449a:	4618      	mov	r0, r3
 801449c:	f7fc fa9a 	bl	80109d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80144a0:	4603      	mov	r3, r0
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	3710      	adds	r7, #16
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}

080144aa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 80144aa:	b590      	push	{r4, r7, lr}
 80144ac:	ed2d 8b02 	vpush	{d8}
 80144b0:	b0a9      	sub	sp, #164	; 0xa4
 80144b2:	af02      	add	r7, sp, #8
 80144b4:	60f8      	str	r0, [r7, #12]
 80144b6:	60b9      	str	r1, [r7, #8]
 80144b8:	607a      	str	r2, [r7, #4]
 80144ba:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80144c2:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80144ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80144d2:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80144da:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80144e2:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80144ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  const float output_activation_min = params.float_activation_min;
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144f0:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_max = params.float_activation_max;
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144f6:	657b      	str	r3, [r7, #84]	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80144f8:	68b8      	ldr	r0, [r7, #8]
 80144fa:	f7f7 fb9c 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80144fe:	4603      	mov	r3, r0
 8014500:	2b04      	cmp	r3, #4
 8014502:	d001      	beq.n	8014508 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 8014504:	f010 fcdb 	bl	8024ebe <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8014508:	6838      	ldr	r0, [r7, #0]
 801450a:	f7f7 fb94 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801450e:	4603      	mov	r3, r0
 8014510:	2b04      	cmp	r3, #4
 8014512:	d001      	beq.n	8014518 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 8014514:	f010 fcd3 	bl	8024ebe <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8014518:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801451c:	f7f7 fb8b 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014520:	4603      	mov	r3, r0
 8014522:	2b04      	cmp	r3, #4
 8014524:	d001      	beq.n	801452a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 8014526:	f010 fcca 	bl	8024ebe <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801452a:	2300      	movs	r3, #0
 801452c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8014530:	2100      	movs	r1, #0
 8014532:	68b8      	ldr	r0, [r7, #8]
 8014534:	f7fd fb84 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014538:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 801453a:	2303      	movs	r3, #3
 801453c:	683a      	ldr	r2, [r7, #0]
 801453e:	2103      	movs	r1, #3
 8014540:	68b8      	ldr	r0, [r7, #8]
 8014542:	f7fd fb7d 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014546:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8014548:	2303      	movs	r3, #3
 801454a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801454e:	2100      	movs	r1, #0
 8014550:	6838      	ldr	r0, [r7, #0]
 8014552:	f7fd fb75 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014556:	64b8      	str	r0, [r7, #72]	; 0x48
  if (bias_data) {
 8014558:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801455c:	2b00      	cmp	r3, #0
 801455e:	d009      	beq.n	8014574 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8014560:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8014564:	f7fc fade 	bl	8010b24 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8014568:	4602      	mov	r2, r0
 801456a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801456c:	4293      	cmp	r3, r2
 801456e:	d001      	beq.n	8014574 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
 8014570:	f010 fca5 	bl	8024ebe <abort>
  }
  const int input_height = input_shape.Dims(1);
 8014574:	2101      	movs	r1, #1
 8014576:	68b8      	ldr	r0, [r7, #8]
 8014578:	f7fc fa9c 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801457c:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 801457e:	2102      	movs	r1, #2
 8014580:	68b8      	ldr	r0, [r7, #8]
 8014582:	f7fc fa97 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014586:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_height = filter_shape.Dims(1);
 8014588:	2101      	movs	r1, #1
 801458a:	6838      	ldr	r0, [r7, #0]
 801458c:	f7fc fa92 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014590:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_width = filter_shape.Dims(2);
 8014592:	2102      	movs	r1, #2
 8014594:	6838      	ldr	r0, [r7, #0]
 8014596:	f7fc fa8d 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801459a:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
 801459c:	2101      	movs	r1, #1
 801459e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80145a2:	f7fc fa87 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80145a6:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
 80145a8:	2102      	movs	r1, #2
 80145aa:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80145ae:	f7fc fa81 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80145b2:	6338      	str	r0, [r7, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
 80145b4:	2300      	movs	r3, #0
 80145b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80145ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80145be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145c0:	429a      	cmp	r2, r3
 80145c2:	f280 80f0 	bge.w	80147a6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2fc>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80145c6:	2300      	movs	r3, #0
 80145c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80145cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80145d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145d2:	429a      	cmp	r2, r3
 80145d4:	f280 80e1 	bge.w	801479a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f0>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 80145d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80145dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80145de:	fb02 f203 	mul.w	r2, r2, r3
 80145e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80145e4:	1ad3      	subs	r3, r2, r3
 80145e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80145e8:	2300      	movs	r3, #0
 80145ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80145ee:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80145f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f4:	429a      	cmp	r2, r3
 80145f6:	f280 80ca 	bge.w	801478e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2e4>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 80145fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80145fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014600:	fb02 f203 	mul.w	r2, r2, r3
 8014604:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014606:	1ad3      	subs	r3, r2, r3
 8014608:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 801460a:	2300      	movs	r3, #0
 801460c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014610:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014616:	429a      	cmp	r2, r3
 8014618:	f280 80b3 	bge.w	8014782 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d8>
          float total = 0.f;
 801461c:	f04f 0300 	mov.w	r3, #0
 8014620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8014624:	2300      	movs	r3, #0
 8014626:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801462a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801462e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014630:	429a      	cmp	r2, r3
 8014632:	da6d      	bge.n	8014710 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x266>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 8014634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014636:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801463a:	fb02 f303 	mul.w	r3, r2, r3
 801463e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014640:	4413      	add	r3, r2
 8014642:	627b      	str	r3, [r7, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8014644:	2300      	movs	r3, #0
 8014646:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014648:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801464a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801464c:	429a      	cmp	r2, r3
 801464e:	da59      	bge.n	8014704 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x25a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8014650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014652:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014654:	fb02 f303 	mul.w	r3, r2, r3
 8014658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801465a:	4413      	add	r3, r2
 801465c:	623b      	str	r3, [r7, #32]

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 801465e:	6a3b      	ldr	r3, [r7, #32]
 8014660:	2b00      	cmp	r3, #0
 8014662:	db0c      	blt.n	801467e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8014664:	6a3a      	ldr	r2, [r7, #32]
 8014666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014668:	429a      	cmp	r2, r3
 801466a:	da08      	bge.n	801467e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 801466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801466e:	2b00      	cmp	r3, #0
 8014670:	db05      	blt.n	801467e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8014672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014676:	429a      	cmp	r2, r3
 8014678:	da01      	bge.n	801467e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 801467a:	2301      	movs	r3, #1
 801467c:	e000      	b.n	8014680 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d6>
 801467e:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 8014680:	77fb      	strb	r3, [r7, #31]
                  (in_y < input_height);

              if (!is_point_inside_image) {
 8014682:	7ffb      	ldrb	r3, [r7, #31]
 8014684:	f083 0301 	eor.w	r3, r3, #1
 8014688:	b2db      	uxtb	r3, r3
 801468a:	2b00      	cmp	r3, #0
 801468c:	d135      	bne.n	80146fa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x250>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 801468e:	2300      	movs	r3, #0
 8014690:	67bb      	str	r3, [r7, #120]	; 0x78
 8014692:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014696:	429a      	cmp	r2, r3
 8014698:	da30      	bge.n	80146fc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x252>
                float input_value = input_data[Offset(input_shape, batch, in_y,
 801469a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801469c:	9300      	str	r3, [sp, #0]
 801469e:	6a3b      	ldr	r3, [r7, #32]
 80146a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146a2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80146a6:	68b8      	ldr	r0, [r7, #8]
 80146a8:	f7fd fa72 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80146ac:	4603      	mov	r3, r0
                                                      in_x, in_channel)];
 80146ae:	009b      	lsls	r3, r3, #2
 80146b0:	687a      	ldr	r2, [r7, #4]
 80146b2:	4413      	add	r3, r2
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	61bb      	str	r3, [r7, #24]
                float filter_value = filter_data[Offset(
 80146b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80146ba:	9300      	str	r3, [sp, #0]
 80146bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80146be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80146c2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80146c6:	6838      	ldr	r0, [r7, #0]
 80146c8:	f7fd fa62 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80146cc:	4603      	mov	r3, r0
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 80146ce:	009b      	lsls	r3, r3, #2
 80146d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80146d4:	4413      	add	r3, r2
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	617b      	str	r3, [r7, #20]
                total += (input_value * filter_value);
 80146da:	ed97 7a06 	vldr	s14, [r7, #24]
 80146de:	edd7 7a05 	vldr	s15, [r7, #20]
 80146e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80146e6:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80146ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146ee:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 80146f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80146f4:	3301      	adds	r3, #1
 80146f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80146f8:	e7cb      	b.n	8014692 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
                continue;
 80146fa:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80146fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80146fe:	3301      	adds	r3, #1
 8014700:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014702:	e7a1      	b.n	8014648 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8014704:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014708:	3301      	adds	r3, #1
 801470a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801470e:	e78c      	b.n	801462a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x180>
              }
            }
          }
          float bias_value = 0.0f;
 8014710:	f04f 0300 	mov.w	r3, #0
 8014714:	677b      	str	r3, [r7, #116]	; 0x74
          if (bias_data) {
 8014716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801471a:	2b00      	cmp	r3, #0
 801471c:	d007      	beq.n	801472e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
            bias_value = bias_data[out_channel];
 801471e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014722:	009b      	lsls	r3, r3, #2
 8014724:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014728:	4413      	add	r3, r2
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	677b      	str	r3, [r7, #116]	; 0x74
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 801472e:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8014732:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8014736:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 801473a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801473e:	9300      	str	r3, [sp, #0]
 8014740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014744:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8014748:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801474c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014750:	f7fd fa1e 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014754:	4603      	mov	r3, r0
 8014756:	009b      	lsls	r3, r3, #2
 8014758:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801475c:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 801475e:	ed97 1a15 	vldr	s2, [r7, #84]	; 0x54
 8014762:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 8014766:	eeb0 0a48 	vmov.f32	s0, s16
 801476a:	f7fd ff5a 	bl	8012622 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 801476e:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8014772:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8014776:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801477a:	3301      	adds	r3, #1
 801477c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014780:	e746      	b.n	8014610 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014786:	3301      	adds	r3, #1
 8014788:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801478c:	e72f      	b.n	80145ee <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801478e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014792:	3301      	adds	r3, #1
 8014794:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014798:	e718      	b.n	80145cc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
  for (int batch = 0; batch < batches; ++batch) {
 801479a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801479e:	3301      	adds	r3, #1
 80147a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80147a4:	e709      	b.n	80145ba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x110>
                                           output_activation_max);
        }
      }
    }
  }
}
 80147a6:	bf00      	nop
 80147a8:	379c      	adds	r7, #156	; 0x9c
 80147aa:	46bd      	mov	sp, r7
 80147ac:	ecbd 8b02 	vpop	{d8}
 80147b0:	bd90      	pop	{r4, r7, pc}

080147b2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 80147b2:	b590      	push	{r4, r7, lr}
 80147b4:	b0a9      	sub	sp, #164	; 0xa4
 80147b6:	af02      	add	r7, sp, #8
 80147b8:	60f8      	str	r0, [r7, #12]
 80147ba:	60b9      	str	r1, [r7, #8]
 80147bc:	607a      	str	r2, [r7, #4]
 80147be:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	695b      	ldr	r3, [r3, #20]
 80147c4:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80147cc:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80147d4:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80147dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80147e4:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80147ec:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80147f4:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_offset = params.output_offset;
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	69db      	ldr	r3, [r3, #28]
 80147fa:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014800:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014806:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8014808:	69ba      	ldr	r2, [r7, #24]
 801480a:	697b      	ldr	r3, [r7, #20]
 801480c:	429a      	cmp	r2, r3
 801480e:	dd01      	ble.n	8014814 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 8014810:	f010 fb55 	bl	8024ebe <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8014814:	6838      	ldr	r0, [r7, #0]
 8014816:	f7f7 fa0e 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801481a:	4603      	mov	r3, r0
 801481c:	2b04      	cmp	r3, #4
 801481e:	d001      	beq.n	8014824 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 8014820:	f010 fb4d 	bl	8024ebe <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8014824:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014828:	f7f7 fa05 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801482c:	4603      	mov	r3, r0
 801482e:	2b04      	cmp	r3, #4
 8014830:	d001      	beq.n	8014836 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 8014832:	f010 fb44 	bl	8024ebe <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8014836:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801483a:	f7f7 f9fc 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801483e:	4603      	mov	r3, r0
 8014840:	2b04      	cmp	r3, #4
 8014842:	d001      	beq.n	8014848 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 8014844:	f010 fb3b 	bl	8024ebe <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8014848:	2300      	movs	r3, #0
 801484a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801484e:	2100      	movs	r1, #0
 8014850:	6838      	ldr	r0, [r7, #0]
 8014852:	f7fd f9f5 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014856:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8014858:	2303      	movs	r3, #3
 801485a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801485e:	2103      	movs	r1, #3
 8014860:	6838      	ldr	r0, [r7, #0]
 8014862:	f7fd f9ed 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014866:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8014868:	2303      	movs	r3, #3
 801486a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801486e:	2100      	movs	r1, #0
 8014870:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014874:	f7fd f9e4 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014878:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 801487a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801487e:	2b00      	cmp	r3, #0
 8014880:	d009      	beq.n	8014896 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8014882:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8014886:	f7fc f94d 	bl	8010b24 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801488a:	4602      	mov	r2, r0
 801488c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801488e:	4293      	cmp	r3, r2
 8014890:	d001      	beq.n	8014896 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 8014892:	f010 fb14 	bl	8024ebe <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 8014896:	2101      	movs	r1, #1
 8014898:	6838      	ldr	r0, [r7, #0]
 801489a:	f7fc f90b 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801489e:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 80148a0:	2102      	movs	r1, #2
 80148a2:	6838      	ldr	r0, [r7, #0]
 80148a4:	f7fc f906 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80148a8:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 80148aa:	2101      	movs	r1, #1
 80148ac:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80148b0:	f7fc f900 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80148b4:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 80148b6:	2102      	movs	r1, #2
 80148b8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80148bc:	f7fc f8fa 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80148c0:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 80148c2:	2101      	movs	r1, #1
 80148c4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80148c8:	f7fc f8f4 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80148cc:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 80148ce:	2102      	movs	r1, #2
 80148d0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80148d4:	f7fc f8ee 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80148d8:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 80148da:	2300      	movs	r3, #0
 80148dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80148e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80148e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80148e6:	429a      	cmp	r2, r3
 80148e8:	f280 8113 	bge.w	8014b12 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x360>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80148ec:	2300      	movs	r3, #0
 80148ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80148f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80148f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148f8:	429a      	cmp	r2, r3
 80148fa:	f280 8104 	bge.w	8014b06 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x354>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 80148fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014902:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014904:	fb02 f203 	mul.w	r2, r2, r3
 8014908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801490a:	1ad3      	subs	r3, r2, r3
 801490c:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801490e:	2300      	movs	r3, #0
 8014910:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014914:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801491a:	429a      	cmp	r2, r3
 801491c:	f280 80ed 	bge.w	8014afa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x348>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 8014920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014924:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014926:	fb02 f203 	mul.w	r2, r2, r3
 801492a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801492c:	1ad3      	subs	r3, r2, r3
 801492e:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8014930:	2300      	movs	r3, #0
 8014932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014936:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801493a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801493c:	429a      	cmp	r2, r3
 801493e:	f280 80d6 	bge.w	8014aee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33c>
          int32_t acc = 0;
 8014942:	2300      	movs	r3, #0
 8014944:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8014946:	2300      	movs	r3, #0
 8014948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801494c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014952:	429a      	cmp	r2, r3
 8014954:	da76      	bge.n	8014a44 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 8014956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014958:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801495c:	fb02 f303 	mul.w	r3, r2, r3
 8014960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014962:	4413      	add	r3, r2
 8014964:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8014966:	2300      	movs	r3, #0
 8014968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801496c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014972:	429a      	cmp	r2, r3
 8014974:	da60      	bge.n	8014a38 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x286>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8014976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014978:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801497c:	fb02 f303 	mul.w	r3, r2, r3
 8014980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014982:	4413      	add	r3, r2
 8014984:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8014986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014988:	2b00      	cmp	r3, #0
 801498a:	db0c      	blt.n	80149a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 801498c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801498e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014990:	429a      	cmp	r2, r3
 8014992:	da08      	bge.n	80149a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8014994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014996:	2b00      	cmp	r3, #0
 8014998:	db05      	blt.n	80149a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 801499a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801499c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801499e:	429a      	cmp	r2, r3
 80149a0:	da01      	bge.n	80149a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 80149a2:	2301      	movs	r3, #1
 80149a4:	e000      	b.n	80149a8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f6>
 80149a6:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 80149a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 80149ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149b0:	f083 0301 	eor.w	r3, r3, #1
 80149b4:	b2db      	uxtb	r3, r3
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d137      	bne.n	8014a2a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 80149ba:	2300      	movs	r3, #0
 80149bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80149be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80149c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80149c2:	429a      	cmp	r2, r3
 80149c4:	da32      	bge.n	8014a2c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27a>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 80149c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80149c8:	9300      	str	r3, [sp, #0]
 80149ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149ce:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80149d2:	6838      	ldr	r0, [r7, #0]
 80149d4:	f7fd f8dc 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80149d8:	4603      	mov	r3, r0
 80149da:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 80149dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80149e0:	4413      	add	r3, r2
 80149e2:	f993 3000 	ldrsb.w	r3, [r3]
 80149e6:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 80149e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80149ea:	9300      	str	r3, [sp, #0]
 80149ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80149f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80149f4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80149f8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80149fc:	f7fd f8c8 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014a00:	4603      	mov	r3, r0
 8014a02:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 8014a04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014a08:	4413      	add	r3, r2
 8014a0a:	f993 3000 	ldrsb.w	r3, [r3]
 8014a0e:	61fb      	str	r3, [r7, #28]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 8014a10:	6a3a      	ldr	r2, [r7, #32]
 8014a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014a14:	4413      	add	r3, r2
 8014a16:	69fa      	ldr	r2, [r7, #28]
 8014a18:	fb02 f203 	mul.w	r2, r2, r3
 8014a1c:	693b      	ldr	r3, [r7, #16]
 8014a1e:	4413      	add	r3, r2
 8014a20:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8014a22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014a24:	3301      	adds	r3, #1
 8014a26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014a28:	e7c9      	b.n	80149be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
                continue;
 8014a2a:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8014a2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014a30:	3301      	adds	r3, #1
 8014a32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014a36:	e799      	b.n	801496c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ba>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8014a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014a3c:	3301      	adds	r3, #1
 8014a3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014a42:	e783      	b.n	801494c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
              }
            }
          }

          if (bias_data) {
 8014a44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d009      	beq.n	8014a60 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ae>
            acc += bias_data[out_channel];
 8014a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014a50:	009b      	lsls	r3, r3, #2
 8014a52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014a56:	4413      	add	r3, r2
 8014a58:	681a      	ldr	r2, [r3, #0]
 8014a5a:	693b      	ldr	r3, [r7, #16]
 8014a5c:	4413      	add	r3, r2
 8014a5e:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 8014a60:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8014a62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014a66:	009b      	lsls	r3, r3, #2
 8014a68:	68ba      	ldr	r2, [r7, #8]
 8014a6a:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8014a6c:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8014a6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014a72:	009b      	lsls	r3, r3, #2
 8014a74:	687a      	ldr	r2, [r7, #4]
 8014a76:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	461a      	mov	r2, r3
 8014a7c:	f7fc f8aa 	bl	8010bd4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8014a80:	4603      	mov	r3, r0
 8014a82:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 8014a84:	693a      	ldr	r2, [r7, #16]
 8014a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014a88:	4413      	add	r3, r2
 8014a8a:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 8014a8c:	f107 0218 	add.w	r2, r7, #24
 8014a90:	f107 0310 	add.w	r3, r7, #16
 8014a94:	4611      	mov	r1, r2
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7f6 ff58 	bl	800b94c <_ZSt3maxIlERKT_S2_S2_>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 8014aa2:	f107 0214 	add.w	r2, r7, #20
 8014aa6:	f107 0310 	add.w	r3, r7, #16
 8014aaa:	4611      	mov	r1, r2
 8014aac:	4618      	mov	r0, r3
 8014aae:	f7f6 ff39 	bl	800b924 <_ZSt3minIlERKT_S2_S2_>
 8014ab2:	4603      	mov	r3, r0
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8014ab8:	693c      	ldr	r4, [r7, #16]
 8014aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014abe:	9300      	str	r3, [sp, #0]
 8014ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014ac4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8014ac8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8014acc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014ad0:	f7fd f85e 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	461a      	mov	r2, r3
 8014ad8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014adc:	4413      	add	r3, r2
 8014ade:	b262      	sxtb	r2, r4
 8014ae0:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8014ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014ae6:	3301      	adds	r3, #1
 8014ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014aec:	e723      	b.n	8014936 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014af2:	3301      	adds	r3, #1
 8014af4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014af8:	e70c      	b.n	8014914 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014afe:	3301      	adds	r3, #1
 8014b00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014b04:	e6f5      	b.n	80148f2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 8014b06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014b0a:	3301      	adds	r3, #1
 8014b0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014b10:	e6e6      	b.n	80148e0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 8014b12:	bf00      	nop
 8014b14:	379c      	adds	r7, #156	; 0x9c
 8014b16:	46bd      	mov	sp, r7
 8014b18:	bd90      	pop	{r4, r7, pc}

08014b1a <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8014b1a:	b580      	push	{r7, lr}
 8014b1c:	b084      	sub	sp, #16
 8014b1e:	af00      	add	r7, sp, #0
 8014b20:	60f8      	str	r0, [r7, #12]
 8014b22:	60b9      	str	r1, [r7, #8]
 8014b24:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d101      	bne.n	8014b32 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8014b2e:	f010 f9c6 	bl	8024ebe <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b36:	2138      	movs	r1, #56	; 0x38
 8014b38:	68f8      	ldr	r0, [r7, #12]
 8014b3a:	4798      	blx	r3
 8014b3c:	4603      	mov	r3, r0
}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3710      	adds	r7, #16
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
	...

08014b48 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8014b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b4a:	b0b7      	sub	sp, #220	; 0xdc
 8014b4c:	af08      	add	r7, sp, #32
 8014b4e:	60f8      	str	r0, [r7, #12]
 8014b50:	60b9      	str	r1, [r7, #8]
  TFLITE_DCHECK(node->user_data != nullptr);
 8014b52:	68bb      	ldr	r3, [r7, #8]
 8014b54:	691b      	ldr	r3, [r3, #16]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d101      	bne.n	8014b5e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8014b5a:	f010 f9b0 	bl	8024ebe <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8014b5e:	68bb      	ldr	r3, [r7, #8]
 8014b60:	695b      	ldr	r3, [r3, #20]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d101      	bne.n	8014b6a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8014b66:	f010 f9aa 	bl	8024ebe <abort>

  int32_t buf_size = 0;
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const auto& params =
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	695b      	ldr	r3, [r3, #20]
 8014b74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  OpData* data = static_cast<OpData*>(node->user_data);
 8014b78:	68bb      	ldr	r3, [r7, #8]
 8014b7a:	691b      	ldr	r3, [r3, #16]
 8014b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 8014b80:	4ba5      	ldr	r3, [pc, #660]	; (8014e18 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	461a      	mov	r2, r3
 8014b86:	68b9      	ldr	r1, [r7, #8]
 8014b88:	68f8      	ldr	r0, [r7, #12]
 8014b8a:	f7f6 fa93 	bl	800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014b8e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 8014b92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d10a      	bne.n	8014bb0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	695c      	ldr	r4, [r3, #20]
 8014b9e:	4b9f      	ldr	r3, [pc, #636]	; (8014e1c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 8014ba0:	9300      	str	r3, [sp, #0]
 8014ba2:	2338      	movs	r3, #56	; 0x38
 8014ba4:	4a9e      	ldr	r2, [pc, #632]	; (8014e20 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 8014ba6:	499f      	ldr	r1, [pc, #636]	; (8014e24 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 8014ba8:	68f8      	ldr	r0, [r7, #12]
 8014baa:	47a0      	blx	r4
 8014bac:	2401      	movs	r4, #1
 8014bae:	e12d      	b.n	8014e0c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 8014bb0:	4b9d      	ldr	r3, [pc, #628]	; (8014e28 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	461a      	mov	r2, r3
 8014bb6:	68b9      	ldr	r1, [r7, #8]
 8014bb8:	68f8      	ldr	r0, [r7, #12]
 8014bba:	f7f6 fa7b 	bl	800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014bbe:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  TF_LITE_ENSURE(context, filter != nullptr);
 8014bc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d10a      	bne.n	8014be0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x98>
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	695c      	ldr	r4, [r3, #20]
 8014bce:	4b97      	ldr	r3, [pc, #604]	; (8014e2c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 8014bd0:	9300      	str	r3, [sp, #0]
 8014bd2:	233a      	movs	r3, #58	; 0x3a
 8014bd4:	4a92      	ldr	r2, [pc, #584]	; (8014e20 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 8014bd6:	4993      	ldr	r1, [pc, #588]	; (8014e24 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 8014bd8:	68f8      	ldr	r0, [r7, #12]
 8014bda:	47a0      	blx	r4
 8014bdc:	2401      	movs	r4, #1
 8014bde:	e115      	b.n	8014e0c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 8014be0:	4b93      	ldr	r3, [pc, #588]	; (8014e30 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	461a      	mov	r2, r3
 8014be6:	68b9      	ldr	r1, [r7, #8]
 8014be8:	68f8      	ldr	r0, [r7, #12]
 8014bea:	f7f6 fa73 	bl	800b0d4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8014bee:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TF_LITE_ENSURE(context, output != nullptr);
 8014bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d10a      	bne.n	8014c10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	695c      	ldr	r4, [r3, #20]
 8014bfe:	4b8d      	ldr	r3, [pc, #564]	; (8014e34 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8014c00:	9300      	str	r3, [sp, #0]
 8014c02:	233c      	movs	r3, #60	; 0x3c
 8014c04:	4a86      	ldr	r2, [pc, #536]	; (8014e20 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 8014c06:	4987      	ldr	r1, [pc, #540]	; (8014e24 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 8014c08:	68f8      	ldr	r0, [r7, #12]
 8014c0a:	47a0      	blx	r4
 8014c0c:	2401      	movs	r4, #1
 8014c0e:	e0fd      	b.n	8014e0c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>

  RuntimeShape input_shape = GetTensorShape(input);
 8014c10:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014c14:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8014c18:	4618      	mov	r0, r3
 8014c1a:	f7f7 f870 	bl	800bcfe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 8014c1e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014c22:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8014c26:	4618      	mov	r0, r3
 8014c28:	f7f7 f869 	bl	800bcfe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 8014c2c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8014c30:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8014c34:	2300      	movs	r3, #0
 8014c36:	2100      	movs	r1, #0
 8014c38:	f7fd f802 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.h = input->dims->data[1];
 8014c40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014c44:	689b      	ldr	r3, [r3, #8]
 8014c46:	689b      	ldr	r3, [r3, #8]
 8014c48:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.w = input->dims->data[2];
 8014c4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014c4e:	689b      	ldr	r3, [r3, #8]
 8014c50:	68db      	ldr	r3, [r3, #12]
 8014c52:	663b      	str	r3, [r7, #96]	; 0x60
  input_dims.c = input_shape.Dims(3);
 8014c54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014c58:	2103      	movs	r1, #3
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7fb ff2a 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014c60:	4603      	mov	r3, r0
 8014c62:	667b      	str	r3, [r7, #100]	; 0x64

  // Initialize cmsis_nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
 8014c64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014c68:	2103      	movs	r1, #3
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f7fb ff22 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014c70:	4603      	mov	r3, r0
 8014c72:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.h = filter->dims->data[1];
 8014c74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014c78:	689b      	ldr	r3, [r3, #8]
 8014c7a:	689b      	ldr	r3, [r3, #8]
 8014c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.w = filter->dims->data[2];
 8014c7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014c82:	689b      	ldr	r3, [r3, #8]
 8014c84:	68db      	ldr	r3, [r3, #12]
 8014c86:	653b      	str	r3, [r7, #80]	; 0x50
  filter_dims.c = input_dims.c;
 8014c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014c8a:	657b      	str	r3, [r7, #84]	; 0x54

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
 8014c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  output_dims.h = output->dims->data[1];
 8014c90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014c94:	689b      	ldr	r3, [r3, #8]
 8014c96:	689b      	ldr	r3, [r3, #8]
 8014c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  output_dims.w = output->dims->data[2];
 8014c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014c9e:	689b      	ldr	r3, [r3, #8]
 8014ca0:	68db      	ldr	r3, [r3, #12]
 8014ca2:	643b      	str	r3, [r7, #64]	; 0x40
  output_dims.c = output_shape.Dims(3);
 8014ca4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014ca8:	2103      	movs	r1, #3
 8014caa:	4618      	mov	r0, r3
 8014cac:	f7fb ff02 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	647b      	str	r3, [r7, #68]	; 0x44

  if (input->type == kTfLiteInt8) {
 8014cb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014cb8:	781b      	ldrb	r3, [r3, #0]
 8014cba:	2b09      	cmp	r3, #9
 8014cbc:	d121      	bne.n	8014d02 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ba>
    const int num_channels = filter->dims->data[kConvQuantizedDimension];
 8014cbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014cc2:	689a      	ldr	r2, [r3, #8]
 8014cc4:	4b5c      	ldr	r3, [pc, #368]	; (8014e38 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	009b      	lsls	r3, r3, #2
 8014cca:	4413      	add	r3, r2
 8014ccc:	685b      	ldr	r3, [r3, #4]
 8014cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    data->reference_op_data.per_channel_output_multiplier =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 8014cd6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8014cda:	0092      	lsls	r2, r2, #2
 8014cdc:	4611      	mov	r1, r2
 8014cde:	68f8      	ldr	r0, [r7, #12]
 8014ce0:	4798      	blx	r3
 8014ce2:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_multiplier =
 8014ce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014ce8:	625a      	str	r2, [r3, #36]	; 0x24
    data->reference_op_data.per_channel_output_shift =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 8014cee:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8014cf2:	0092      	lsls	r2, r2, #2
 8014cf4:	4611      	mov	r1, r2
 8014cf6:	68f8      	ldr	r0, [r7, #12]
 8014cf8:	4798      	blx	r3
 8014cfa:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_shift =
 8014cfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014d00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 8014d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014d04:	607b      	str	r3, [r7, #4]
 8014d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014d0a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014d0c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014d0e:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8014d10:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 8014d14:	782d      	ldrb	r5, [r5, #0]
 8014d16:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 8014d1a:	9606      	str	r6, [sp, #24]
 8014d1c:	9505      	str	r5, [sp, #20]
 8014d1e:	9404      	str	r4, [sp, #16]
 8014d20:	9003      	str	r0, [sp, #12]
 8014d22:	9102      	str	r1, [sp, #8]
 8014d24:	9201      	str	r2, [sp, #4]
 8014d26:	9300      	str	r3, [sp, #0]
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014d2e:	68b9      	ldr	r1, [r7, #8]
 8014d30:	68f8      	ldr	r0, [r7, #12]
 8014d32:	f7fd f907 	bl	8011f44 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 8014d36:	4603      	mov	r3, r0
 8014d38:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8014d3c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d002      	beq.n	8014d4a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x202>
 8014d44:	f897 409b 	ldrb.w	r4, [r7, #155]	; 0x9b
 8014d48:	e056      	b.n	8014df8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 8014d4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014d4e:	781b      	ldrb	r3, [r3, #0]
 8014d50:	2b09      	cmp	r3, #9
 8014d52:	d150      	bne.n	8014df6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ae>
    // Initialize cmsis_nn convolution parameters
    cmsis_nn_conv_params conv_params;
    conv_params.input_offset = -input->params.zero_point;
 8014d54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014d58:	691b      	ldr	r3, [r3, #16]
 8014d5a:	425b      	negs	r3, r3
 8014d5c:	613b      	str	r3, [r7, #16]
    conv_params.output_offset = output->params.zero_point;
 8014d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014d62:	691b      	ldr	r3, [r3, #16]
 8014d64:	617b      	str	r3, [r7, #20]
    conv_params.stride.h = params.stride_height;
 8014d66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014d6a:	689b      	ldr	r3, [r3, #8]
 8014d6c:	61fb      	str	r3, [r7, #28]
    conv_params.stride.w = params.stride_width;
 8014d6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014d72:	685b      	ldr	r3, [r3, #4]
 8014d74:	61bb      	str	r3, [r7, #24]
    conv_params.dilation.h = params.dilation_height_factor;
 8014d76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014d7a:	695b      	ldr	r3, [r3, #20]
 8014d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_params.dilation.w = params.dilation_width_factor;
 8014d7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014d82:	691b      	ldr	r3, [r3, #16]
 8014d84:	62bb      	str	r3, [r7, #40]	; 0x28
    conv_params.padding.h = data->reference_op_data.padding.height;
 8014d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014d8a:	685b      	ldr	r3, [r3, #4]
 8014d8c:	627b      	str	r3, [r7, #36]	; 0x24
    conv_params.padding.w = data->reference_op_data.padding.width;
 8014d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	623b      	str	r3, [r7, #32]
    conv_params.activation.min = data->reference_op_data.output_activation_min;
 8014d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d9c:	633b      	str	r3, [r7, #48]	; 0x30
    conv_params.activation.max = data->reference_op_data.output_activation_max;
 8014d9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014da4:	637b      	str	r3, [r7, #52]	; 0x34

    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 8014da6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014daa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8014dae:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8014db2:	f107 0010 	add.w	r0, r7, #16
 8014db6:	f004 f92d 	bl	8019014 <arm_convolve_wrapper_s8_get_buffer_size>
 8014dba:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
        &conv_params, &input_dims, &filter_dims, &output_dims);
    if (buf_size > 0) {
 8014dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	dd12      	ble.n	8014dec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dca:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8014dce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8014dd2:	3234      	adds	r2, #52	; 0x34
 8014dd4:	68f8      	ldr	r0, [r7, #12]
 8014dd6:	4798      	blx	r3
 8014dd8:	4603      	mov	r3, r0
 8014dda:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8014dde:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d007      	beq.n	8014df6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ae>
 8014de6:	f897 409a 	ldrb.w	r4, [r7, #154]	; 0x9a
 8014dea:	e005      	b.n	8014df8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 8014dec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014df4:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  return kTfLiteOk;
 8014df6:	2400      	movs	r4, #0
  RuntimeShape output_shape = GetTensorShape(output);
 8014df8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f7f6 ff04 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
 8014e02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014e06:	4618      	mov	r0, r3
 8014e08:	f7f6 feff 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
 8014e0c:	4623      	mov	r3, r4
}
 8014e0e:	4618      	mov	r0, r3
 8014e10:	37bc      	adds	r7, #188	; 0xbc
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e16:	bf00      	nop
 8014e18:	0802c1f0 	.word	0x0802c1f0
 8014e1c:	0802b0c4 	.word	0x0802b0c4
 8014e20:	0802b068 	.word	0x0802b068
 8014e24:	0802b0ac 	.word	0x0802b0ac
 8014e28:	0802c1f4 	.word	0x0802c1f4
 8014e2c:	0802b0d8 	.word	0x0802b0d8
 8014e30:	0802c1fc 	.word	0x0802c1fc
 8014e34:	0802b0ec 	.word	0x0802b0ec
 8014e38:	0802c200 	.word	0x0802c200

08014e3c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>:

TfLiteStatus EvalQuantizedPerChannel(
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
 8014e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e3e:	b0ef      	sub	sp, #444	; 0x1bc
 8014e40:	af08      	add	r7, sp, #32
 8014e42:	f107 0414 	add.w	r4, r7, #20
 8014e46:	6020      	str	r0, [r4, #0]
 8014e48:	f107 0010 	add.w	r0, r7, #16
 8014e4c:	6001      	str	r1, [r0, #0]
 8014e4e:	f107 010c 	add.w	r1, r7, #12
 8014e52:	600a      	str	r2, [r1, #0]
 8014e54:	f107 0208 	add.w	r2, r7, #8
 8014e58:	6013      	str	r3, [r2, #0]
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
 8014e5a:	f107 030c 	add.w	r3, r7, #12
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	695b      	ldr	r3, [r3, #20]
 8014e62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  conv_params.dilation.w = params.dilation_width_factor;
 8014e66:	f107 030c 	add.w	r3, r7, #12
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	691b      	ldr	r3, [r3, #16]
 8014e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 8014e72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014e76:	2b01      	cmp	r3, #1
 8014e78:	f040 818a 	bne.w	8015190 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x354>
 8014e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e80:	2b01      	cmp	r3, #1
 8014e82:	f040 8185 	bne.w	8015190 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x354>
    // Initialize cmsis_nn convolution parameters
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 8014e86:	f107 0308 	add.w	r3, r7, #8
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	691b      	ldr	r3, [r3, #16]
 8014e8e:	425b      	negs	r3, r3
 8014e90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 8014e94:	f107 0308 	add.w	r3, r7, #8
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	699b      	ldr	r3, [r3, #24]
 8014e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    conv_params.stride.h = params.stride_height;
 8014ea0:	f107 030c 	add.w	r3, r7, #12
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	689b      	ldr	r3, [r3, #8]
 8014ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    conv_params.stride.w = params.stride_width;
 8014eac:	f107 030c 	add.w	r3, r7, #12
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	685b      	ldr	r3, [r3, #4]
 8014eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    conv_params.padding.h = data.reference_op_data.padding.height;
 8014eb8:	f107 0308 	add.w	r3, r7, #8
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	685b      	ldr	r3, [r3, #4]
 8014ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    conv_params.padding.w = data.reference_op_data.padding.width;
 8014ec4:	f107 0308 	add.w	r3, r7, #8
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    conv_params.activation.min = data.reference_op_data.output_activation_min;
 8014ed0:	f107 0308 	add.w	r3, r7, #8
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ed8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 8014edc:	f107 0308 	add.w	r3, r7, #8
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ee4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    // Initialize cmsis_nn per channel quantization parameters
    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier = const_cast<int32_t*>(
        data.reference_op_data.per_channel_output_multiplier);
 8014ee8:	f107 0308 	add.w	r3, r7, #8
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier = const_cast<int32_t*>(
 8014ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift =
        const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);
 8014ef4:	f107 0308 	add.w	r3, r7, #8
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    quant_params.shift =
 8014efc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8014f00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014f04:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f7fd fb52 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8014f0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014f12:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8014f16:	4618      	mov	r0, r3
 8014f18:	f7fd fb4b 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8014f1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8014f20:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8014f24:	4618      	mov	r0, r3
 8014f26:	f7fd fb44 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 8014f2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014f2e:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7fd fb3d 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    // Consistency check.
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 8014f38:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014f3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014f40:	429a      	cmp	r2, r3
 8014f42:	dd01      	ble.n	8014f48 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x10c>
 8014f44:	f00f ffbb 	bl	8024ebe <abort>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8014f48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7f6 fe72 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014f52:	4603      	mov	r3, r0
 8014f54:	2b04      	cmp	r3, #4
 8014f56:	d001      	beq.n	8014f5c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x120>
 8014f58:	f00f ffb1 	bl	8024ebe <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8014f5c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014f60:	4618      	mov	r0, r3
 8014f62:	f7f6 fe68 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014f66:	4603      	mov	r3, r0
 8014f68:	2b04      	cmp	r3, #4
 8014f6a:	d001      	beq.n	8014f70 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x134>
 8014f6c:	f00f ffa7 	bl	8024ebe <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8014f70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8014f74:	4618      	mov	r0, r3
 8014f76:	f7f6 fe5e 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	2b04      	cmp	r3, #4
 8014f7e:	d001      	beq.n	8014f84 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x148>
 8014f80:	f00f ff9d 	bl	8024ebe <abort>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 8014f84:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8014f88:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	2100      	movs	r1, #0
 8014f90:	f7fc fe56 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014f94:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8014f98:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8014f9c:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8014fa0:	2303      	movs	r3, #3
 8014fa2:	2103      	movs	r1, #3
 8014fa4:	f7fc fe4c 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014fa8:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8014fac:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8014fb0:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8014fb4:	2303      	movs	r3, #3
 8014fb6:	2100      	movs	r1, #0
 8014fb8:	f7fc fe42 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014fbc:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 8014fc0:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8014fc4:	f7fc fb48 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	bf14      	ite	ne
 8014fce:	2301      	movne	r3, #1
 8014fd0:	2300      	moveq	r3, #0
 8014fd2:	b2db      	uxtb	r3, r3
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d00b      	beq.n	8014ff0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x1b4>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8014fd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7fb fda1 	bl	8010b24 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8014fe2:	4602      	mov	r2, r0
 8014fe4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8014fe8:	4293      	cmp	r3, r2
 8014fea:	d001      	beq.n	8014ff0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x1b4>
 8014fec:	f00f ff67 	bl	8024ebe <abort>
    }

    // Initialize cmsis_nn dimensions
    // Input
    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 8014ff0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014ff4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8014ff8:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 8014ffa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014ffe:	2101      	movs	r1, #1
 8015000:	4618      	mov	r0, r3
 8015002:	f7fb fd57 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015006:	4602      	mov	r2, r0
 8015008:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801500c:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 801500e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015012:	2102      	movs	r1, #2
 8015014:	4618      	mov	r0, r3
 8015016:	f7fb fd4d 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801501a:	4602      	mov	r2, r0
 801501c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015020:	609a      	str	r2, [r3, #8]
    input_dims.c = input_depth;
 8015022:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015026:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801502a:	60da      	str	r2, [r3, #12]

    // Filter
    cmsis_nn_dims filter_dims;
    filter_dims.n = output_depth;
 801502c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015030:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8015034:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 8015036:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801503a:	2101      	movs	r1, #1
 801503c:	4618      	mov	r0, r3
 801503e:	f7fb fd39 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015042:	4602      	mov	r2, r0
 8015044:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015048:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 801504a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801504e:	2102      	movs	r1, #2
 8015050:	4618      	mov	r0, r3
 8015052:	f7fb fd2f 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015056:	4602      	mov	r2, r0
 8015058:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801505c:	609a      	str	r2, [r3, #8]
    filter_dims.c = input_depth;
 801505e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015062:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8015066:	60da      	str	r2, [r3, #12]

    // Bias
    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 8015068:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801506c:	2201      	movs	r2, #1
 801506e:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 8015070:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015074:	2201      	movs	r2, #1
 8015076:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 8015078:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801507c:	2201      	movs	r2, #1
 801507e:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 8015080:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015084:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8015088:	60da      	str	r2, [r3, #12]

    // Output
    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 801508a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801508e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8015092:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 8015094:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015098:	2101      	movs	r1, #1
 801509a:	4618      	mov	r0, r3
 801509c:	f7fb fd0a 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80150a0:	4602      	mov	r2, r0
 80150a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80150a6:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 80150a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80150ac:	2102      	movs	r1, #2
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7fb fd00 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80150b4:	4602      	mov	r2, r0
 80150b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80150ba:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 80150bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80150c0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80150c4:	60da      	str	r2, [r3, #12]

    // Initialize cmsis_nn context
    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 80150c6:	f107 031c 	add.w	r3, r7, #28
 80150ca:	2200      	movs	r2, #0
 80150cc:	601a      	str	r2, [r3, #0]
    ctx.size = 0;
 80150ce:	f107 031c 	add.w	r3, r7, #28
 80150d2:	2200      	movs	r2, #0
 80150d4:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 80150d6:	f107 0308 	add.w	r3, r7, #8
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150de:	2b00      	cmp	r3, #0
 80150e0:	db0f      	blt.n	8015102 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x2c6>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 80150e2:	f107 0314 	add.w	r3, r7, #20
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80150ea:	f107 0208 	add.w	r2, r7, #8
 80150ee:	6812      	ldr	r2, [r2, #0]
 80150f0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80150f2:	f107 0214 	add.w	r2, r7, #20
 80150f6:	6810      	ldr	r0, [r2, #0]
 80150f8:	4798      	blx	r3
 80150fa:	4602      	mov	r2, r0
 80150fc:	f107 031c 	add.w	r3, r7, #28
 8015100:	601a      	str	r2, [r3, #0]
      // arm_convolve_wrapper_s8_get_buffer_size
    }

    // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
    // the parameters passed
    TFLITE_DCHECK_EQ(
 8015102:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8015106:	f7fc faa7 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801510a:	4605      	mov	r5, r0
 801510c:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8015110:	f7fc faa2 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8015114:	4606      	mov	r6, r0
 8015116:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 801511a:	f7fc fd1e 	bl	8011b5a <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801511e:	6078      	str	r0, [r7, #4]
 8015120:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8015124:	f7fc faa7 	bl	8011676 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8015128:	4603      	mov	r3, r0
 801512a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 801512e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8015132:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8015136:	f107 001c 	add.w	r0, r7, #28
 801513a:	9306      	str	r3, [sp, #24]
 801513c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015140:	9305      	str	r3, [sp, #20]
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	9304      	str	r3, [sp, #16]
 8015146:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801514a:	9303      	str	r3, [sp, #12]
 801514c:	9602      	str	r6, [sp, #8]
 801514e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015152:	9301      	str	r3, [sp, #4]
 8015154:	9500      	str	r5, [sp, #0]
 8015156:	4623      	mov	r3, r4
 8015158:	f003 fedc 	bl	8018f14 <arm_convolve_wrapper_s8>
 801515c:	4603      	mov	r3, r0
 801515e:	2b00      	cmp	r3, #0
 8015160:	d001      	beq.n	8015166 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x32a>
 8015162:	f00f feac 	bl	8024ebe <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 8015166:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801516a:	4618      	mov	r0, r3
 801516c:	f7f6 fd4d 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8015170:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015174:	4618      	mov	r0, r3
 8015176:	f7f6 fd48 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801517a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801517e:	4618      	mov	r0, r3
 8015180:	f7f6 fd43 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8015184:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015188:	4618      	mov	r0, r3
 801518a:	f7f6 fd3e 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 801518e:	e06d      	b.n	801526c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x430>
  } else {
    reference_integer_ops::ConvPerChannel(
        ConvParamsQuantized(params, data.reference_op_data),
 8015190:	f107 0308 	add.w	r3, r7, #8
 8015194:	681a      	ldr	r2, [r3, #0]
 8015196:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 801519a:	f107 030c 	add.w	r3, r7, #12
 801519e:	6819      	ldr	r1, [r3, #0]
 80151a0:	f7fc fe7f 	bl	8011ea2 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 80151a4:	f107 0308 	add.w	r3, r7, #8
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 80151ac:	f107 0308 	add.w	r3, r7, #8
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 80151b4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80151b8:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 80151bc:	4618      	mov	r0, r3
 80151be:	f7fd f9f8 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 80151c2:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 80151c6:	f7fc fa47 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80151ca:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 80151cc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80151d0:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 80151d4:	4618      	mov	r0, r3
 80151d6:	f7fd f9ec 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 80151da:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 80151de:	f7fc fa3b 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80151e2:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 80151e4:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80151e8:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7fd f9e0 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 80151f2:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80151f6:	f7fc fcb0 	bl	8011b5a <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80151fa:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 80151fc:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8015200:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8015204:	4618      	mov	r0, r3
 8015206:	f7fd f9d4 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 801520a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 801520e:	f7fc fa32 	bl	8011676 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8015212:	4603      	mov	r3, r0
 8015214:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8015218:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 801521c:	9306      	str	r3, [sp, #24]
 801521e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8015222:	9305      	str	r3, [sp, #20]
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	9304      	str	r3, [sp, #16]
 8015228:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801522c:	9303      	str	r3, [sp, #12]
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	9302      	str	r3, [sp, #8]
 8015232:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8015236:	9301      	str	r3, [sp, #4]
 8015238:	9600      	str	r6, [sp, #0]
 801523a:	4613      	mov	r3, r2
 801523c:	462a      	mov	r2, r5
 801523e:	4621      	mov	r1, r4
 8015240:	f7ff fab7 	bl	80147b2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 8015244:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8015248:	4618      	mov	r0, r3
 801524a:	f7f6 fcde 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 801524e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8015252:	4618      	mov	r0, r3
 8015254:	f7f6 fcd9 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 8015258:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801525c:	4618      	mov	r0, r3
 801525e:	f7f6 fcd4 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 8015262:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8015266:	4618      	mov	r0, r3
 8015268:	f7f6 fccf 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
 801526c:	2300      	movs	r3, #0
}
 801526e:	4618      	mov	r0, r3
 8015270:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8015274:	46bd      	mov	sp, r7
 8015276:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015278 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8015278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801527c:	b0bc      	sub	sp, #240	; 0xf0
 801527e:	af08      	add	r7, sp, #32
 8015280:	6078      	str	r0, [r7, #4]
 8015282:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 8015284:	4b8b      	ldr	r3, [pc, #556]	; (80154b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	461a      	mov	r2, r3
 801528a:	6839      	ldr	r1, [r7, #0]
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	f7fb fce5 	bl	8010c5c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015292:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 8015296:	4b88      	ldr	r3, [pc, #544]	; (80154b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>)
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	461a      	mov	r2, r3
 801529c:	6839      	ldr	r1, [r7, #0]
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f7fb fcdc 	bl	8010c5c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80152a4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 80152a8:	6838      	ldr	r0, [r7, #0]
 80152aa:	f7fc fc3c 	bl	8011b26 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80152ae:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 80152b0:	2b03      	cmp	r3, #3
 80152b2:	d108      	bne.n	80152c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4e>
 80152b4:	4b81      	ldr	r3, [pc, #516]	; (80154bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	461a      	mov	r2, r3
 80152ba:	6839      	ldr	r1, [r7, #0]
 80152bc:	6878      	ldr	r0, [r7, #4]
 80152be:	f7fb fccd 	bl	8010c5c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80152c2:	4603      	mov	r3, r0
 80152c4:	e000      	b.n	80152c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x50>
 80152c6:	2300      	movs	r3, #0
          : nullptr;
 80152c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 80152cc:	4b7c      	ldr	r3, [pc, #496]	; (80154c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x248>)
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	461a      	mov	r2, r3
 80152d2:	6839      	ldr	r1, [r7, #0]
 80152d4:	6878      	ldr	r0, [r7, #4]
 80152d6:	f7fb fcd1 	bl	8010c7c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80152da:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

  TFLITE_DCHECK(node->builtin_data != nullptr);
 80152de:	683b      	ldr	r3, [r7, #0]
 80152e0:	695b      	ldr	r3, [r3, #20]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d101      	bne.n	80152ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
 80152e6:	f00f fdea 	bl	8024ebe <abort>
  const auto& params =
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	695b      	ldr	r3, [r3, #20]
 80152ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	691b      	ldr	r3, [r3, #16]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d101      	bne.n	80152fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
 80152fa:	f00f fde0 	bl	8024ebe <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	691b      	ldr	r3, [r3, #16]
 8015302:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8015306:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801530a:	7a1a      	ldrb	r2, [r3, #8]
 801530c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015310:	7a1b      	ldrb	r3, [r3, #8]
 8015312:	429a      	cmp	r2, r3
 8015314:	d016      	beq.n	8015344 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	695c      	ldr	r4, [r3, #20]
 801531a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801531e:	7a1b      	ldrb	r3, [r3, #8]
 8015320:	461a      	mov	r2, r3
 8015322:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015326:	7a1b      	ldrb	r3, [r3, #8]
 8015328:	9303      	str	r3, [sp, #12]
 801532a:	9202      	str	r2, [sp, #8]
 801532c:	4b65      	ldr	r3, [pc, #404]	; (80154c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24c>)
 801532e:	9301      	str	r3, [sp, #4]
 8015330:	4b65      	ldr	r3, [pc, #404]	; (80154c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>)
 8015332:	9300      	str	r3, [sp, #0]
 8015334:	f44f 7382 	mov.w	r3, #260	; 0x104
 8015338:	4a64      	ldr	r2, [pc, #400]	; (80154cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>)
 801533a:	4965      	ldr	r1, [pc, #404]	; (80154d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>)
 801533c:	6878      	ldr	r0, [r7, #4]
 801533e:	47a0      	blx	r4
 8015340:	2301      	movs	r3, #1
 8015342:	e0b1      	b.n	80154a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8015344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015348:	7a1a      	ldrb	r2, [r3, #8]
 801534a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801534e:	7a1b      	ldrb	r3, [r3, #8]
 8015350:	429a      	cmp	r2, r3
 8015352:	d006      	beq.n	8015362 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	695b      	ldr	r3, [r3, #20]
 8015358:	495e      	ldr	r1, [pc, #376]	; (80154d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25c>)
 801535a:	6878      	ldr	r0, [r7, #4]
 801535c:	4798      	blx	r3
 801535e:	2301      	movs	r3, #1
 8015360:	e0a2      	b.n	80154a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
                     "Hybrid models are not supported on TFLite Micro.");

  switch (input->type) {  // Already know in/out types are same.
 8015362:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015366:	7a1b      	ldrb	r3, [r3, #8]
 8015368:	2b01      	cmp	r3, #1
 801536a:	d002      	beq.n	8015372 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 801536c:	2b09      	cmp	r3, #9
 801536e:	d073      	beq.n	8015458 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>
 8015370:	e08a      	b.n	8015488 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x210>
    case kTfLiteFloat32: {
      tflite::reference_ops::Conv(
          ConvParamsFloat(params, data.reference_op_data),
 8015372:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8015376:	f107 0308 	add.w	r3, r7, #8
 801537a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 801537e:	4618      	mov	r0, r3
 8015380:	f7fc fd53 	bl	8011e2a <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
 8015384:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015388:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801538c:	4618      	mov	r0, r3
 801538e:	f7fd f910 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8015392:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8015396:	f7fc f93f 	bl	8011618 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801539a:	4680      	mov	r8, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 801539c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80153a0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7fd f904 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 80153aa:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80153ae:	f7fc f933 	bl	8011618 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80153b2:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 80153b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80153b8:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80153bc:	4618      	mov	r0, r3
 80153be:	f7fd f8f8 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 80153c2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80153c6:	f7fc f927 	bl	8011618 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80153ca:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 80153cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80153d0:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80153d4:	4618      	mov	r0, r3
 80153d6:	f7fd f8ec 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 80153da:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80153de:	f7fc f92a 	bl	8011636 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80153e2:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(output),
          tflite::micro::GetTensorShape(nullptr), nullptr);
 80153e4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80153e8:	2100      	movs	r1, #0
 80153ea:	4618      	mov	r0, r3
 80153ec:	f7fd f8e1 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 80153f0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80153f4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80153f8:	f107 0008 	add.w	r0, r7, #8
 80153fc:	2300      	movs	r3, #0
 80153fe:	9306      	str	r3, [sp, #24]
 8015400:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015404:	9305      	str	r3, [sp, #20]
 8015406:	9604      	str	r6, [sp, #16]
 8015408:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801540c:	9303      	str	r3, [sp, #12]
 801540e:	9502      	str	r5, [sp, #8]
 8015410:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015414:	9301      	str	r3, [sp, #4]
 8015416:	9400      	str	r4, [sp, #0]
 8015418:	4613      	mov	r3, r2
 801541a:	4642      	mov	r2, r8
 801541c:	f7ff f845 	bl	80144aa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
          tflite::micro::GetTensorShape(nullptr), nullptr);
 8015420:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015424:	4618      	mov	r0, r3
 8015426:	f7f6 fbf0 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
 801542a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801542e:	4618      	mov	r0, r3
 8015430:	f7f6 fbeb 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 8015434:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015438:	4618      	mov	r0, r3
 801543a:	f7f6 fbe6 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 801543e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015442:	4618      	mov	r0, r3
 8015444:	f7f6 fbe1 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8015448:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801544c:	4618      	mov	r0, r3
 801544e:	f7f6 fbdc 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8015452:	bf00      	nop
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
 8015454:	2300      	movs	r3, #0
 8015456:	e027      	b.n	80154a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
 8015458:	2300      	movs	r3, #0
 801545a:	9304      	str	r3, [sp, #16]
 801545c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015460:	9303      	str	r3, [sp, #12]
 8015462:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015466:	9302      	str	r3, [sp, #8]
 8015468:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801546c:	9301      	str	r3, [sp, #4]
 801546e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015472:	9300      	str	r3, [sp, #0]
 8015474:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015478:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801547c:	6839      	ldr	r1, [r7, #0]
 801547e:	6878      	ldr	r0, [r7, #4]
 8015480:	f7ff fcdc 	bl	8014e3c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>
 8015484:	4603      	mov	r3, r0
                                     bias, output, nullptr);
 8015486:	e00f      	b.n	80154a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	695c      	ldr	r4, [r3, #20]
 801548c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015490:	7a1b      	ldrb	r3, [r3, #8]
 8015492:	4618      	mov	r0, r3
 8015494:	f7f2 ffac 	bl	80083f0 <TfLiteTypeGetName>
 8015498:	4602      	mov	r2, r0
 801549a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801549e:	7a1b      	ldrb	r3, [r3, #8]
 80154a0:	490d      	ldr	r1, [pc, #52]	; (80154d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x260>)
 80154a2:	6878      	ldr	r0, [r7, #4]
 80154a4:	47a0      	blx	r4
      return kTfLiteError;
 80154a6:	2301      	movs	r3, #1
}
 80154a8:	4618      	mov	r0, r3
 80154aa:	37d0      	adds	r7, #208	; 0xd0
 80154ac:	46bd      	mov	sp, r7
 80154ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154b2:	bf00      	nop
 80154b4:	0802c1f0 	.word	0x0802c1f0
 80154b8:	0802c1f4 	.word	0x0802c1f4
 80154bc:	0802c1f8 	.word	0x0802c1f8
 80154c0:	0802c1fc 	.word	0x0802c1fc
 80154c4:	0802b11c 	.word	0x0802b11c
 80154c8:	0802b12c 	.word	0x0802b12c
 80154cc:	0802b068 	.word	0x0802b068
 80154d0:	0802b100 	.word	0x0802b100
 80154d4:	0802b138 	.word	0x0802b138
 80154d8:	0802b1ac 	.word	0x0802b1ac

080154dc <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 80154dc:	b4b0      	push	{r4, r5, r7}
 80154de:	b083      	sub	sp, #12
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	4a07      	ldr	r2, [pc, #28]	; (8015504 <_ZN6tflite16Register_CONV_2DEv+0x28>)
 80154e8:	461c      	mov	r4, r3
 80154ea:	4615      	mov	r5, r2
 80154ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80154ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80154f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80154f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80154f8:	6878      	ldr	r0, [r7, #4]
 80154fa:	370c      	adds	r7, #12
 80154fc:	46bd      	mov	sp, r7
 80154fe:	bcb0      	pop	{r4, r5, r7}
 8015500:	4770      	bx	lr
 8015502:	bf00      	nop
 8015504:	0802b1c8 	.word	0x0802b1c8

08015508 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8015508:	b590      	push	{r4, r7, lr}
 801550a:	ed2d 8b02 	vpush	{d8}
 801550e:	b0a9      	sub	sp, #164	; 0xa4
 8015510:	af02      	add	r7, sp, #8
 8015512:	60f8      	str	r0, [r7, #12]
 8015514:	60b9      	str	r1, [r7, #8]
 8015516:	607a      	str	r2, [r7, #4]
 8015518:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015520:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8015528:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015530:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8015538:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015540:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015548:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int depth_multiplier = params.depth_multiplier;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8015550:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_min = params.float_activation_min;
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015556:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_max = params.float_activation_max;
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801555c:	653b      	str	r3, [r7, #80]	; 0x50
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801555e:	68b8      	ldr	r0, [r7, #8]
 8015560:	f7f6 fb69 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015564:	4603      	mov	r3, r0
 8015566:	2b04      	cmp	r3, #4
 8015568:	d001      	beq.n	801556e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x66>
 801556a:	f00f fca8 	bl	8024ebe <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 801556e:	6838      	ldr	r0, [r7, #0]
 8015570:	f7f6 fb61 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015574:	4603      	mov	r3, r0
 8015576:	2b04      	cmp	r3, #4
 8015578:	d001      	beq.n	801557e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x76>
 801557a:	f00f fca0 	bl	8024ebe <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801557e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015582:	f7f6 fb58 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015586:	4603      	mov	r3, r0
 8015588:	2b04      	cmp	r3, #4
 801558a:	d001      	beq.n	8015590 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x88>
 801558c:	f00f fc97 	bl	8024ebe <abort>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8015590:	2300      	movs	r3, #0
 8015592:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8015596:	2100      	movs	r1, #0
 8015598:	68b8      	ldr	r0, [r7, #8]
 801559a:	f7fc fb51 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801559e:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 80155a0:	2303      	movs	r3, #3
 80155a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80155a6:	2103      	movs	r1, #3
 80155a8:	6838      	ldr	r0, [r7, #0]
 80155aa:	f7fc fb49 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80155ae:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_height = input_shape.Dims(1);
 80155b0:	2101      	movs	r1, #1
 80155b2:	68b8      	ldr	r0, [r7, #8]
 80155b4:	f7fb fa7e 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80155b8:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 80155ba:	2102      	movs	r1, #2
 80155bc:	68b8      	ldr	r0, [r7, #8]
 80155be:	f7fb fa79 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80155c2:	6438      	str	r0, [r7, #64]	; 0x40
  const int input_depth = input_shape.Dims(3);
 80155c4:	2103      	movs	r1, #3
 80155c6:	68b8      	ldr	r0, [r7, #8]
 80155c8:	f7fb fa74 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80155cc:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_height = filter_shape.Dims(1);
 80155ce:	2101      	movs	r1, #1
 80155d0:	6838      	ldr	r0, [r7, #0]
 80155d2:	f7fb fa6f 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80155d6:	63b8      	str	r0, [r7, #56]	; 0x38
  const int filter_width = filter_shape.Dims(2);
 80155d8:	2102      	movs	r1, #2
 80155da:	6838      	ldr	r0, [r7, #0]
 80155dc:	f7fb fa6a 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80155e0:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
 80155e2:	2101      	movs	r1, #1
 80155e4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80155e8:	f7fb fa64 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80155ec:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
 80155ee:	2102      	movs	r1, #2
 80155f0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80155f4:	f7fb fa5e 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80155f8:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 80155fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80155fe:	fb02 f303 	mul.w	r3, r2, r3
 8015602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015604:	429a      	cmp	r2, r3
 8015606:	d001      	beq.n	801560c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x104>
 8015608:	f00f fc59 	bl	8024ebe <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 801560c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015610:	f7fb fa88 	bl	8010b24 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8015614:	4602      	mov	r2, r0
 8015616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015618:	4293      	cmp	r3, r2
 801561a:	d001      	beq.n	8015620 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x118>
 801561c:	f00f fc4f 	bl	8024ebe <abort>

  for (int b = 0; b < batches; ++b) {
 8015620:	2300      	movs	r3, #0
 8015622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015626:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801562a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801562c:	429a      	cmp	r2, r3
 801562e:	f280 80eb 	bge.w	8015808 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x300>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8015632:	2300      	movs	r3, #0
 8015634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015638:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801563e:	429a      	cmp	r2, r3
 8015640:	f280 80dc 	bge.w	80157fc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2f4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8015644:	2300      	movs	r3, #0
 8015646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801564a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801564e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015650:	429a      	cmp	r2, r3
 8015652:	f280 80cd 	bge.w	80157f0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2e8>
        for (int ic = 0; ic < input_depth; ++ic) {
 8015656:	2300      	movs	r3, #0
 8015658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801565c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015662:	429a      	cmp	r2, r3
 8015664:	f280 80be 	bge.w	80157e4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2dc>
          for (int m = 0; m < depth_multiplier; m++) {
 8015668:	2300      	movs	r3, #0
 801566a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801566e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015674:	429a      	cmp	r2, r3
 8015676:	f280 80af 	bge.w	80157d8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2d0>
            const int oc = m + ic * depth_multiplier;
 801567a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801567e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015680:	fb02 f303 	mul.w	r3, r2, r3
 8015684:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015688:	4413      	add	r3, r2
 801568a:	62bb      	str	r3, [r7, #40]	; 0x28
            const int in_x_origin = (out_x * stride_width) - pad_width;
 801568c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015690:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015692:	fb02 f203 	mul.w	r2, r2, r3
 8015696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015698:	1ad3      	subs	r3, r2, r3
 801569a:	627b      	str	r3, [r7, #36]	; 0x24
            const int in_y_origin = (out_y * stride_height) - pad_height;
 801569c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80156a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80156a2:	fb02 f203 	mul.w	r2, r2, r3
 80156a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156a8:	1ad3      	subs	r3, r2, r3
 80156aa:	623b      	str	r3, [r7, #32]
            float total = 0.f;
 80156ac:	f04f 0300 	mov.w	r3, #0
 80156b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80156b4:	2300      	movs	r3, #0
 80156b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80156b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80156ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156bc:	429a      	cmp	r2, r3
 80156be:	da54      	bge.n	801576a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x262>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80156c0:	2300      	movs	r3, #0
 80156c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80156c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80156c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156c8:	429a      	cmp	r2, r3
 80156ca:	da4a      	bge.n	8015762 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25a>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 80156cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80156ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80156d0:	fb02 f303 	mul.w	r3, r2, r3
 80156d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156d6:	4413      	add	r3, r2
 80156d8:	61fb      	str	r3, [r7, #28]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 80156da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80156dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80156de:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 80156e2:	6a3a      	ldr	r2, [r7, #32]
 80156e4:	4413      	add	r3, r2
 80156e6:	61bb      	str	r3, [r7, #24]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 80156e8:	69fb      	ldr	r3, [r7, #28]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	db35      	blt.n	801575a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 80156ee:	69fa      	ldr	r2, [r7, #28]
 80156f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80156f2:	429a      	cmp	r2, r3
 80156f4:	da31      	bge.n	801575a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 80156f6:	69bb      	ldr	r3, [r7, #24]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	db2e      	blt.n	801575a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 80156fc:	69ba      	ldr	r2, [r7, #24]
 80156fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015700:	429a      	cmp	r2, r3
 8015702:	da2a      	bge.n	801575a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
 8015704:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015708:	9300      	str	r3, [sp, #0]
 801570a:	69fb      	ldr	r3, [r7, #28]
 801570c:	69ba      	ldr	r2, [r7, #24]
 801570e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8015712:	68b8      	ldr	r0, [r7, #8]
 8015714:	f7fc fa3c 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015718:	4603      	mov	r3, r0
 801571a:	009b      	lsls	r3, r3, #2
 801571c:	687a      	ldr	r2, [r7, #4]
 801571e:	4413      	add	r3, r2
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	617b      	str	r3, [r7, #20]
                  float filter_value = filter_data[Offset(
 8015724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015726:	9300      	str	r3, [sp, #0]
 8015728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801572a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801572c:	2100      	movs	r1, #0
 801572e:	6838      	ldr	r0, [r7, #0]
 8015730:	f7fc fa2e 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015734:	4603      	mov	r3, r0
                      filter_shape, 0, filter_y, filter_x, oc)];
 8015736:	009b      	lsls	r3, r3, #2
 8015738:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801573c:	4413      	add	r3, r2
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	613b      	str	r3, [r7, #16]
                  total += (input_value * filter_value);
 8015742:	ed97 7a05 	vldr	s14, [r7, #20]
 8015746:	edd7 7a04 	vldr	s15, [r7, #16]
 801574a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801574e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8015752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015756:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 801575a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801575c:	3301      	adds	r3, #1
 801575e:	67bb      	str	r3, [r7, #120]	; 0x78
 8015760:	e7b0      	b.n	80156c4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1bc>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8015762:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015764:	3301      	adds	r3, #1
 8015766:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015768:	e7a6      	b.n	80156b8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b0>
                }
              }
            }
            float bias_value = 0.0f;
 801576a:	f04f 0300 	mov.w	r3, #0
 801576e:	677b      	str	r3, [r7, #116]	; 0x74
            if (bias_data) {
 8015770:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015774:	2b00      	cmp	r3, #0
 8015776:	d006      	beq.n	8015786 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x27e>
              bias_value = bias_data[oc];
 8015778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801577a:	009b      	lsls	r3, r3, #2
 801577c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8015780:	4413      	add	r3, r2
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	677b      	str	r3, [r7, #116]	; 0x74
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
 8015786:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801578a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801578e:	ee37 8a27 	vadd.f32	s16, s14, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8015792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015794:	9300      	str	r3, [sp, #0]
 8015796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801579a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801579e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80157a2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80157a6:	f7fc f9f3 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80157aa:	4603      	mov	r3, r0
 80157ac:	009b      	lsls	r3, r3, #2
 80157ae:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80157b2:	18d4      	adds	r4, r2, r3
                ActivationFunctionWithMinMax(total + bias_value,
 80157b4:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 80157b8:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 80157bc:	eeb0 0a48 	vmov.f32	s0, s16
 80157c0:	f7fc ff2f 	bl	8012622 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 80157c4:	eef0 7a40 	vmov.f32	s15, s0
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 80157c8:	edc4 7a00 	vstr	s15, [r4]
          for (int m = 0; m < depth_multiplier; m++) {
 80157cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80157d0:	3301      	adds	r3, #1
 80157d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80157d6:	e74a      	b.n	801566e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x166>
        for (int ic = 0; ic < input_depth; ++ic) {
 80157d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80157dc:	3301      	adds	r3, #1
 80157de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80157e2:	e73b      	b.n	801565c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x154>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80157e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80157e8:	3301      	adds	r3, #1
 80157ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80157ee:	e72c      	b.n	801564a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x142>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80157f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80157f4:	3301      	adds	r3, #1
 80157f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80157fa:	e71d      	b.n	8015638 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x130>
  for (int b = 0; b < batches; ++b) {
 80157fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015800:	3301      	adds	r3, #1
 8015802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015806:	e70e      	b.n	8015626 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11e>
          }
        }
      }
    }
  }
}
 8015808:	bf00      	nop
 801580a:	379c      	adds	r7, #156	; 0x9c
 801580c:	46bd      	mov	sp, r7
 801580e:	ecbd 8b02 	vpop	{d8}
 8015812:	bd90      	pop	{r4, r7, pc}

08015814 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8015814:	b590      	push	{r4, r7, lr}
 8015816:	b0ab      	sub	sp, #172	; 0xac
 8015818:	af02      	add	r7, sp, #8
 801581a:	60f8      	str	r0, [r7, #12]
 801581c:	60b9      	str	r1, [r7, #8]
 801581e:	607a      	str	r2, [r7, #4]
 8015820:	603b      	str	r3, [r7, #0]
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8015832:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801583a:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8015842:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801584a:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015852:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int depth_multiplier = params.depth_multiplier;
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801585a:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32_t input_offset = params.input_offset;
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	695b      	ldr	r3, [r3, #20]
 8015860:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t output_offset = params.output_offset;
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	69db      	ldr	r3, [r3, #28]
 8015866:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_activation_min = params.quantized_activation_min;
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801586c:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015872:	617b      	str	r3, [r7, #20]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8015874:	6838      	ldr	r0, [r7, #0]
 8015876:	f7f6 f9de 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801587a:	4603      	mov	r3, r0
 801587c:	2b04      	cmp	r3, #4
 801587e:	d001      	beq.n	8015884 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x70>
 8015880:	f00f fb1d 	bl	8024ebe <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8015884:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015888:	f7f6 f9d5 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801588c:	4603      	mov	r3, r0
 801588e:	2b04      	cmp	r3, #4
 8015890:	d001      	beq.n	8015896 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x82>
 8015892:	f00f fb14 	bl	8024ebe <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8015896:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 801589a:	f7f6 f9cc 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801589e:	4603      	mov	r3, r0
 80158a0:	2b04      	cmp	r3, #4
 80158a2:	d001      	beq.n	80158a8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
 80158a4:	f00f fb0b 	bl	8024ebe <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 80158a8:	69ba      	ldr	r2, [r7, #24]
 80158aa:	697b      	ldr	r3, [r7, #20]
 80158ac:	429a      	cmp	r2, r3
 80158ae:	dd01      	ble.n	80158b4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
 80158b0:	f00f fb05 	bl	8024ebe <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80158b4:	2300      	movs	r3, #0
 80158b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80158ba:	2100      	movs	r1, #0
 80158bc:	6838      	ldr	r0, [r7, #0]
 80158be:	f7fc f9bf 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80158c2:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 80158c4:	2303      	movs	r3, #3
 80158c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80158ca:	2103      	movs	r1, #3
 80158cc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80158d0:	f7fc f9b6 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80158d4:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_height = input_shape.Dims(1);
 80158d6:	2101      	movs	r1, #1
 80158d8:	6838      	ldr	r0, [r7, #0]
 80158da:	f7fb f8eb 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80158de:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_width = input_shape.Dims(2);
 80158e0:	2102      	movs	r1, #2
 80158e2:	6838      	ldr	r0, [r7, #0]
 80158e4:	f7fb f8e6 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80158e8:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = input_shape.Dims(3);
 80158ea:	2103      	movs	r1, #3
 80158ec:	6838      	ldr	r0, [r7, #0]
 80158ee:	f7fb f8e1 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80158f2:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int filter_height = filter_shape.Dims(1);
 80158f4:	2101      	movs	r1, #1
 80158f6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80158fa:	f7fb f8db 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80158fe:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_width = filter_shape.Dims(2);
 8015900:	2102      	movs	r1, #2
 8015902:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015906:	f7fb f8d5 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801590a:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_height = output_shape.Dims(1);
 801590c:	2101      	movs	r1, #1
 801590e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8015912:	f7fb f8cf 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015916:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_width = output_shape.Dims(2);
 8015918:	2102      	movs	r1, #2
 801591a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 801591e:	f7fb f8c9 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015922:	63f8      	str	r0, [r7, #60]	; 0x3c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 8015924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015926:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015928:	fb02 f303 	mul.w	r3, r2, r3
 801592c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801592e:	429a      	cmp	r2, r3
 8015930:	d001      	beq.n	8015936 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x122>
 8015932:	f00f fac4 	bl	8024ebe <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8015936:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801593a:	f7fb f8f3 	bl	8010b24 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801593e:	4602      	mov	r2, r0
 8015940:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015942:	4293      	cmp	r3, r2
 8015944:	d001      	beq.n	801594a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x136>
 8015946:	f00f faba 	bl	8024ebe <abort>

  for (int batch = 0; batch < batches; ++batch) {
 801594a:	2300      	movs	r3, #0
 801594c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015950:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015956:	429a      	cmp	r2, r3
 8015958:	f280 811a 	bge.w	8015b90 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801595c:	2300      	movs	r3, #0
 801595e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015962:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015968:	429a      	cmp	r2, r3
 801596a:	f280 810b 	bge.w	8015b84 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801596e:	2300      	movs	r3, #0
 8015970:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015974:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801597a:	429a      	cmp	r2, r3
 801597c:	f280 80fc 	bge.w	8015b78 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x364>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8015980:	2300      	movs	r3, #0
 8015982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015986:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801598a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801598c:	429a      	cmp	r2, r3
 801598e:	f280 80ed 	bge.w	8015b6c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x358>
          for (int m = 0; m < depth_multiplier; ++m) {
 8015992:	2300      	movs	r3, #0
 8015994:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015998:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801599c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801599e:	429a      	cmp	r2, r3
 80159a0:	f280 80de 	bge.w	8015b60 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34c>
            const int output_channel = m + in_channel * depth_multiplier;
 80159a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80159a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80159aa:	fb02 f303 	mul.w	r3, r2, r3
 80159ae:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80159b2:	4413      	add	r3, r2
 80159b4:	63bb      	str	r3, [r7, #56]	; 0x38
            const int in_x_origin = (out_x * stride_width) - pad_width;
 80159b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80159ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80159be:	fb02 f203 	mul.w	r2, r2, r3
 80159c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80159c4:	1ad3      	subs	r3, r2, r3
 80159c6:	637b      	str	r3, [r7, #52]	; 0x34
            const int in_y_origin = (out_y * stride_height) - pad_height;
 80159c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80159cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80159ce:	fb02 f203 	mul.w	r2, r2, r3
 80159d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80159d4:	1ad3      	subs	r3, r2, r3
 80159d6:	633b      	str	r3, [r7, #48]	; 0x30
            int32_t acc = 0;
 80159d8:	2300      	movs	r3, #0
 80159da:	613b      	str	r3, [r7, #16]
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80159dc:	2300      	movs	r3, #0
 80159de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80159e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80159e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80159e8:	429a      	cmp	r2, r3
 80159ea:	da68      	bge.n	8015abe <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2aa>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80159ec:	2300      	movs	r3, #0
 80159ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80159f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80159f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80159f8:	429a      	cmp	r2, r3
 80159fa:	da5a      	bge.n	8015ab2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29e>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 80159fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80159fe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015a02:	fb02 f303 	mul.w	r3, r2, r3
 8015a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a08:	4413      	add	r3, r2
 8015a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8015a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a0e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015a12:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8015a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a18:	4413      	add	r3, r2
 8015a1a:	62bb      	str	r3, [r7, #40]	; 0x28
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8015a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	db0c      	blt.n	8015a3c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8015a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a26:	429a      	cmp	r2, r3
 8015a28:	da08      	bge.n	8015a3c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8015a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	db05      	blt.n	8015a3c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8015a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a34:	429a      	cmp	r2, r3
 8015a36:	da01      	bge.n	8015a3c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8015a38:	2301      	movs	r3, #1
 8015a3a:	e000      	b.n	8015a3e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 8015a3c:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 8015a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    (in_y < input_height);
                if (is_point_inside_image) {
 8015a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d02d      	beq.n	8015aa6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
                  int32_t input_val = input_data[Offset(
 8015a4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015a4e:	9300      	str	r3, [sp, #0]
 8015a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015a54:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8015a58:	6838      	ldr	r0, [r7, #0]
 8015a5a:	f7fc f899 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	461a      	mov	r2, r3
                      input_shape, batch, in_y, in_x, in_channel)];
 8015a62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8015a66:	4413      	add	r3, r2
 8015a68:	f993 3000 	ldrsb.w	r3, [r3]
 8015a6c:	623b      	str	r3, [r7, #32]
                  int32_t filter_val = filter_data[Offset(
 8015a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a70:	9300      	str	r3, [sp, #0]
 8015a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015a76:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015a7a:	2100      	movs	r1, #0
 8015a7c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015a80:	f7fc f886 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015a84:	4603      	mov	r3, r0
 8015a86:	461a      	mov	r2, r3
                      filter_shape, 0, filter_y, filter_x, output_channel)];
 8015a88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015a8c:	4413      	add	r3, r2
 8015a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8015a92:	61fb      	str	r3, [r7, #28]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 8015a94:	6a3a      	ldr	r2, [r7, #32]
 8015a96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015a98:	4413      	add	r3, r2
 8015a9a:	69fa      	ldr	r2, [r7, #28]
 8015a9c:	fb02 f203 	mul.w	r2, r2, r3
 8015aa0:	693b      	ldr	r3, [r7, #16]
 8015aa2:	4413      	add	r3, r2
 8015aa4:	613b      	str	r3, [r7, #16]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8015aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015aaa:	3301      	adds	r3, #1
 8015aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015ab0:	e79f      	b.n	80159f2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1de>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8015ab2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015ab6:	3301      	adds	r3, #1
 8015ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015abc:	e791      	b.n	80159e2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ce>
                }
              }
            }
            if (bias_data) {
 8015abe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d008      	beq.n	8015ad8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>
              acc += bias_data[output_channel];
 8015ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ac8:	009b      	lsls	r3, r3, #2
 8015aca:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8015ace:	4413      	add	r3, r2
 8015ad0:	681a      	ldr	r2, [r3, #0]
 8015ad2:	693b      	ldr	r3, [r7, #16]
 8015ad4:	4413      	add	r3, r2
 8015ad6:	613b      	str	r3, [r7, #16]
            }
            acc = MultiplyByQuantizedMultiplier(
 8015ad8:	6938      	ldr	r0, [r7, #16]
                acc, output_multiplier[output_channel],
 8015ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015adc:	009b      	lsls	r3, r3, #2
 8015ade:	68ba      	ldr	r2, [r7, #8]
 8015ae0:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 8015ae2:	6819      	ldr	r1, [r3, #0]
                output_shift[output_channel]);
 8015ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ae6:	009b      	lsls	r3, r3, #2
 8015ae8:	687a      	ldr	r2, [r7, #4]
 8015aea:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	461a      	mov	r2, r3
 8015af0:	f7fb f870 	bl	8010bd4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8015af4:	4603      	mov	r3, r0
 8015af6:	613b      	str	r3, [r7, #16]
            acc += output_offset;
 8015af8:	693a      	ldr	r2, [r7, #16]
 8015afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015afc:	4413      	add	r3, r2
 8015afe:	613b      	str	r3, [r7, #16]
            acc = std::max(acc, output_activation_min);
 8015b00:	f107 0218 	add.w	r2, r7, #24
 8015b04:	f107 0310 	add.w	r3, r7, #16
 8015b08:	4611      	mov	r1, r2
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	f7f5 ff1e 	bl	800b94c <_ZSt3maxIlERKT_S2_S2_>
 8015b10:	4603      	mov	r3, r0
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	613b      	str	r3, [r7, #16]
            acc = std::min(acc, output_activation_max);
 8015b16:	f107 0214 	add.w	r2, r7, #20
 8015b1a:	f107 0310 	add.w	r3, r7, #16
 8015b1e:	4611      	mov	r1, r2
 8015b20:	4618      	mov	r0, r3
 8015b22:	f7f5 feff 	bl	800b924 <_ZSt3minIlERKT_S2_S2_>
 8015b26:	4603      	mov	r3, r0
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	613b      	str	r3, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
 8015b2c:	693c      	ldr	r4, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
 8015b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b30:	9300      	str	r3, [sp, #0]
 8015b32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015b36:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015b3a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8015b3e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8015b42:	f7fc f825 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015b46:	4603      	mov	r3, r0
 8015b48:	461a      	mov	r2, r3
                               output_channel)] = static_cast<int8_t>(acc);
 8015b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015b4e:	4413      	add	r3, r2
 8015b50:	b262      	sxtb	r2, r4
 8015b52:	701a      	strb	r2, [r3, #0]
          for (int m = 0; m < depth_multiplier; ++m) {
 8015b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015b58:	3301      	adds	r3, #1
 8015b5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015b5e:	e71b      	b.n	8015998 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8015b60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015b64:	3301      	adds	r3, #1
 8015b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015b6a:	e70c      	b.n	8015986 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x172>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8015b6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015b70:	3301      	adds	r3, #1
 8015b72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015b76:	e6fd      	b.n	8015974 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x160>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8015b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015b7c:	3301      	adds	r3, #1
 8015b7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015b82:	e6ee      	b.n	8015962 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14e>
  for (int batch = 0; batch < batches; ++batch) {
 8015b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015b88:	3301      	adds	r3, #1
 8015b8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015b8e:	e6df      	b.n	8015950 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13c>
          }
        }
      }
    }
  }
}
 8015b90:	bf00      	nop
 8015b92:	37a4      	adds	r7, #164	; 0xa4
 8015b94:	46bd      	mov	sp, r7
 8015b96:	bd90      	pop	{r4, r7, pc}

08015b98 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b084      	sub	sp, #16
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	60f8      	str	r0, [r7, #12]
 8015ba0:	60b9      	str	r1, [r7, #8]
 8015ba2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d101      	bne.n	8015bb0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8015bac:	f00f f987 	bl	8024ebe <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015bb4:	2138      	movs	r1, #56	; 0x38
 8015bb6:	68f8      	ldr	r0, [r7, #12]
 8015bb8:	4798      	blx	r3
 8015bba:	4603      	mov	r3, r0
}
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	3710      	adds	r7, #16
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd80      	pop	{r7, pc}

08015bc4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8015bc4:	b5b0      	push	{r4, r5, r7, lr}
 8015bc6:	b0c6      	sub	sp, #280	; 0x118
 8015bc8:	af08      	add	r7, sp, #32
 8015bca:	6078      	str	r0, [r7, #4]
 8015bcc:	6039      	str	r1, [r7, #0]
 8015bce:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 8015bd0:	683b      	ldr	r3, [r7, #0]
 8015bd2:	691b      	ldr	r3, [r3, #16]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d101      	bne.n	8015bdc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8015bd8:	f00f f971 	bl	8024ebe <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	695b      	ldr	r3, [r3, #20]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d101      	bne.n	8015be8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 8015be4:	f00f f96b 	bl	8024ebe <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8015be8:	683b      	ldr	r3, [r7, #0]
 8015bea:	691b      	ldr	r3, [r3, #16]
 8015bec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  const auto& params =
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	695b      	ldr	r3, [r3, #20]
 8015bf4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));

  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
 8015bf8:	4baa      	ldr	r3, [pc, #680]	; (8015ea4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	461a      	mov	r2, r3
 8015bfe:	6839      	ldr	r1, [r7, #0]
 8015c00:	6878      	ldr	r0, [r7, #4]
 8015c02:	f7f5 fa57 	bl	800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8015c06:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  TF_LITE_ENSURE(context, input != nullptr);
 8015c0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d10a      	bne.n	8015c28 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x64>
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	695c      	ldr	r4, [r3, #20]
 8015c16:	4ba4      	ldr	r3, [pc, #656]	; (8015ea8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 8015c18:	9300      	str	r3, [sp, #0]
 8015c1a:	2338      	movs	r3, #56	; 0x38
 8015c1c:	4aa3      	ldr	r2, [pc, #652]	; (8015eac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015c1e:	49a4      	ldr	r1, [pc, #656]	; (8015eb0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015c20:	6878      	ldr	r0, [r7, #4]
 8015c22:	47a0      	blx	r4
 8015c24:	2401      	movs	r4, #1
 8015c26:	e22a      	b.n	801607e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
  const TfLiteTensor* filter =
      GetInput(context, node, kDepthwiseConvWeightsTensor);
 8015c28:	4ba2      	ldr	r3, [pc, #648]	; (8015eb4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	6839      	ldr	r1, [r7, #0]
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	f7f5 fa3f 	bl	800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8015c36:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
  TF_LITE_ENSURE(context, filter != nullptr);
 8015c3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d10a      	bne.n	8015c58 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x94>
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	695c      	ldr	r4, [r3, #20]
 8015c46:	4b9c      	ldr	r3, [pc, #624]	; (8015eb8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
 8015c48:	9300      	str	r3, [sp, #0]
 8015c4a:	233b      	movs	r3, #59	; 0x3b
 8015c4c:	4a97      	ldr	r2, [pc, #604]	; (8015eac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015c4e:	4998      	ldr	r1, [pc, #608]	; (8015eb0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015c50:	6878      	ldr	r0, [r7, #4]
 8015c52:	47a0      	blx	r4
 8015c54:	2401      	movs	r4, #1
 8015c56:	e212      	b.n	801607e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
 8015c58:	4b98      	ldr	r3, [pc, #608]	; (8015ebc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	461a      	mov	r2, r3
 8015c5e:	6839      	ldr	r1, [r7, #0]
 8015c60:	6878      	ldr	r0, [r7, #4]
 8015c62:	f7f5 fa37 	bl	800b0d4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8015c66:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  TF_LITE_ENSURE(context, output != nullptr);
 8015c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d10a      	bne.n	8015c88 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	695c      	ldr	r4, [r3, #20]
 8015c76:	4b92      	ldr	r3, [pc, #584]	; (8015ec0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
 8015c78:	9300      	str	r3, [sp, #0]
 8015c7a:	233d      	movs	r3, #61	; 0x3d
 8015c7c:	4a8b      	ldr	r2, [pc, #556]	; (8015eac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015c7e:	498c      	ldr	r1, [pc, #560]	; (8015eb0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015c80:	6878      	ldr	r0, [r7, #4]
 8015c82:	47a0      	blx	r4
 8015c84:	2401      	movs	r4, #1
 8015c86:	e1fa      	b.n	801607e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>

  const TfLiteType data_type = input->type;
 8015c88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015c8c:	781b      	ldrb	r3, [r3, #0]
 8015c8e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  int input_width = SizeOfDimension(input, 2);
 8015c92:	2102      	movs	r1, #2
 8015c94:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8015c98:	f7f5 f945 	bl	800af26 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8015c9c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  int input_height = SizeOfDimension(input, 1);
 8015ca0:	2101      	movs	r1, #1
 8015ca2:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8015ca6:	f7f5 f93e 	bl	800af26 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8015caa:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
  int filter_width = SizeOfDimension(filter, 2);
 8015cae:	2102      	movs	r1, #2
 8015cb0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8015cb4:	f7f5 f937 	bl	800af26 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8015cb8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  int filter_height = SizeOfDimension(filter, 1);
 8015cbc:	2101      	movs	r1, #1
 8015cbe:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8015cc2:	f7f5 f930 	bl	800af26 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8015cc6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  int output_width = SizeOfDimension(output, 2);
 8015cca:	2102      	movs	r1, #2
 8015ccc:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8015cd0:	f7f5 f929 	bl	800af26 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8015cd4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  int output_height = SizeOfDimension(output, 1);
 8015cd8:	2101      	movs	r1, #1
 8015cda:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8015cde:	f7f5 f922 	bl	800af26 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8015ce2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if (input->type == kTfLiteInt8) {
 8015ce6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015cea:	781b      	ldrb	r3, [r3, #0]
 8015cec:	2b09      	cmp	r3, #9
 8015cee:	f040 80b1 	bne.w	8015e54 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x290>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8015cf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015cfa:	2b01      	cmp	r3, #1
 8015cfc:	d014      	beq.n	8015d28 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	695c      	ldr	r4, [r3, #20]
 8015d02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015d06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015d0a:	461a      	mov	r2, r3
 8015d0c:	2301      	movs	r3, #1
 8015d0e:	9303      	str	r3, [sp, #12]
 8015d10:	9202      	str	r2, [sp, #8]
 8015d12:	4b6c      	ldr	r3, [pc, #432]	; (8015ec4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
 8015d14:	9301      	str	r3, [sp, #4]
 8015d16:	4b6c      	ldr	r3, [pc, #432]	; (8015ec8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
 8015d18:	9300      	str	r3, [sp, #0]
 8015d1a:	2348      	movs	r3, #72	; 0x48
 8015d1c:	4a63      	ldr	r2, [pc, #396]	; (8015eac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015d1e:	496b      	ldr	r1, [pc, #428]	; (8015ecc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	47a0      	blx	r4
 8015d24:	2401      	movs	r4, #1
 8015d26:	e1aa      	b.n	801607e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
                      kTfLiteAffineQuantization);

    // All per-channel quantized tensors need valid zero point and scale arrays.
    const auto* affine_quantization =
 8015d28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
 8015d32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d10a      	bne.n	8015d50 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	695c      	ldr	r4, [r3, #20]
 8015d3e:	4b64      	ldr	r3, [pc, #400]	; (8015ed0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
 8015d40:	9300      	str	r3, [sp, #0]
 8015d42:	234f      	movs	r3, #79	; 0x4f
 8015d44:	4a59      	ldr	r2, [pc, #356]	; (8015eac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015d46:	495a      	ldr	r1, [pc, #360]	; (8015eb0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015d48:	6878      	ldr	r0, [r7, #4]
 8015d4a:	47a0      	blx	r4
 8015d4c:	2401      	movs	r4, #1
 8015d4e:	e196      	b.n	801607e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 8015d50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d10a      	bne.n	8015d70 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	695c      	ldr	r4, [r3, #20]
 8015d5e:	4b5d      	ldr	r3, [pc, #372]	; (8015ed4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
 8015d60:	9300      	str	r3, [sp, #0]
 8015d62:	2350      	movs	r3, #80	; 0x50
 8015d64:	4a51      	ldr	r2, [pc, #324]	; (8015eac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015d66:	4952      	ldr	r1, [pc, #328]	; (8015eb0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015d68:	6878      	ldr	r0, [r7, #4]
 8015d6a:	47a0      	blx	r4
 8015d6c:	2401      	movs	r4, #1
 8015d6e:	e186      	b.n	801607e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
 8015d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015d74:	685b      	ldr	r3, [r3, #4]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d10a      	bne.n	8015d90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1cc>
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	695c      	ldr	r4, [r3, #20]
 8015d7e:	4b56      	ldr	r3, [pc, #344]	; (8015ed8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>)
 8015d80:	9300      	str	r3, [sp, #0]
 8015d82:	2351      	movs	r3, #81	; 0x51
 8015d84:	4a49      	ldr	r2, [pc, #292]	; (8015eac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015d86:	494a      	ldr	r1, [pc, #296]	; (8015eb0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015d88:	6878      	ldr	r0, [r7, #4]
 8015d8a:	47a0      	blx	r4
 8015d8c:	2401      	movs	r4, #1
 8015d8e:	e176      	b.n	801607e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(
 8015d90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	2b01      	cmp	r3, #1
 8015d9a:	d018      	beq.n	8015dce <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20a>
 8015d9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	681a      	ldr	r2, [r3, #0]
 8015da4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015da8:	6899      	ldr	r1, [r3, #8]
 8015daa:	4b4c      	ldr	r3, [pc, #304]	; (8015edc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	009b      	lsls	r3, r3, #2
 8015db0:	440b      	add	r3, r1
 8015db2:	685b      	ldr	r3, [r3, #4]
 8015db4:	429a      	cmp	r2, r3
 8015db6:	d00a      	beq.n	8015dce <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20a>
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	695c      	ldr	r4, [r3, #20]
 8015dbc:	4b48      	ldr	r3, [pc, #288]	; (8015ee0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x31c>)
 8015dbe:	9300      	str	r3, [sp, #0]
 8015dc0:	2352      	movs	r3, #82	; 0x52
 8015dc2:	4a3a      	ldr	r2, [pc, #232]	; (8015eac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015dc4:	493a      	ldr	r1, [pc, #232]	; (8015eb0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015dc6:	6878      	ldr	r0, [r7, #4]
 8015dc8:	47a0      	blx	r4
 8015dca:	2401      	movs	r4, #1
 8015dcc:	e157      	b.n	801607e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
        context, affine_quantization->scale->size == 1 ||
                     affine_quantization->scale->size ==
                         filter->dims->data[kDepthwiseConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 8015dce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	681a      	ldr	r2, [r3, #0]
 8015dd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	429a      	cmp	r2, r3
 8015de0:	d016      	beq.n	8015e10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	695c      	ldr	r4, [r3, #20]
 8015de6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8015df2:	6852      	ldr	r2, [r2, #4]
 8015df4:	6812      	ldr	r2, [r2, #0]
 8015df6:	9203      	str	r2, [sp, #12]
 8015df8:	9302      	str	r3, [sp, #8]
 8015dfa:	4b3a      	ldr	r3, [pc, #232]	; (8015ee4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x320>)
 8015dfc:	9301      	str	r3, [sp, #4]
 8015dfe:	4b3a      	ldr	r3, [pc, #232]	; (8015ee8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
 8015e00:	9300      	str	r3, [sp, #0]
 8015e02:	2356      	movs	r3, #86	; 0x56
 8015e04:	4a29      	ldr	r2, [pc, #164]	; (8015eac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015e06:	4931      	ldr	r1, [pc, #196]	; (8015ecc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	47a0      	blx	r4
 8015e0c:	2401      	movs	r4, #1
 8015e0e:	e136      	b.n	801607e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
                      affine_quantization->zero_point->size);

    // Allocate memory for per-channel quantization parameters
    const int num_channels =
        filter->dims->data[kDepthwiseConvQuantizedDimension];
 8015e10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015e14:	689a      	ldr	r2, [r3, #8]
 8015e16:	4b31      	ldr	r3, [pc, #196]	; (8015edc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
 8015e18:	681b      	ldr	r3, [r3, #0]
    const int num_channels =
 8015e1a:	009b      	lsls	r3, r3, #2
 8015e1c:	4413      	add	r3, r2
 8015e1e:	685b      	ldr	r3, [r3, #4]
 8015e20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    data->reference_op_data.per_channel_output_multiplier =
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 8015e28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8015e2c:	0092      	lsls	r2, r2, #2
 8015e2e:	4611      	mov	r1, r2
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	4798      	blx	r3
 8015e34:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_multiplier =
 8015e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015e3a:	625a      	str	r2, [r3, #36]	; 0x24
    data->reference_op_data.per_channel_output_shift =
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 8015e40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8015e44:	0092      	lsls	r2, r2, #2
 8015e46:	4611      	mov	r1, r2
 8015e48:	6878      	ldr	r0, [r7, #4]
 8015e4a:	4798      	blx	r3
 8015e4c:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_shift =
 8015e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015e52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
 8015e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015e58:	9306      	str	r3, [sp, #24]
 8015e5a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8015e5e:	9305      	str	r3, [sp, #20]
 8015e60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015e64:	9304      	str	r3, [sp, #16]
 8015e66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015e6a:	9303      	str	r3, [sp, #12]
 8015e6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015e70:	9302      	str	r3, [sp, #8]
 8015e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015e76:	9301      	str	r3, [sp, #4]
 8015e78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015e7c:	9300      	str	r3, [sp, #0]
 8015e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015e82:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8015e86:	6839      	ldr	r1, [r7, #0]
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f7fc fa37 	bl	80122fc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 8015e8e:	4603      	mov	r3, r0
 8015e90:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8015e94:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d027      	beq.n	8015eec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>
 8015e9c:	f897 40bf 	ldrb.w	r4, [r7, #191]	; 0xbf
 8015ea0:	e0ed      	b.n	801607e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
 8015ea2:	bf00      	nop
 8015ea4:	0802c204 	.word	0x0802c204
 8015ea8:	0802b33c 	.word	0x0802b33c
 8015eac:	0802b2d8 	.word	0x0802b2d8
 8015eb0:	0802b324 	.word	0x0802b324
 8015eb4:	0802c208 	.word	0x0802c208
 8015eb8:	0802b350 	.word	0x0802b350
 8015ebc:	0802c210 	.word	0x0802c210
 8015ec0:	0802b364 	.word	0x0802b364
 8015ec4:	0802b394 	.word	0x0802b394
 8015ec8:	0802b3b0 	.word	0x0802b3b0
 8015ecc:	0802b378 	.word	0x0802b378
 8015ed0:	0802b3cc 	.word	0x0802b3cc
 8015ed4:	0802b3e0 	.word	0x0802b3e0
 8015ed8:	0802b3fc 	.word	0x0802b3fc
 8015edc:	0802c214 	.word	0x0802c214
 8015ee0:	0802b41c 	.word	0x0802b41c
 8015ee4:	0802b4a0 	.word	0x0802b4a0
 8015ee8:	0802b4c8 	.word	0x0802b4c8
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, data_type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 8015eec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015ef0:	781b      	ldrb	r3, [r3, #0]
 8015ef2:	2b09      	cmp	r3, #9
 8015ef4:	f040 80c2 	bne.w	801607c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4b8>
    RuntimeShape input_shape = GetTensorShape(input);
 8015ef8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015efc:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8015f00:	4618      	mov	r0, r3
 8015f02:	f7f5 fefc 	bl	800bcfe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 8015f06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015f0a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7f5 fef5 	bl	800bcfe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape filter_shape = GetTensorShape(filter);
 8015f14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015f18:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f7f5 feee 	bl	800bcfe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8015f22:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015f26:	4618      	mov	r0, r3
 8015f28:	f7f5 fe85 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	2b04      	cmp	r3, #4
 8015f30:	d001      	beq.n	8015f36 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x372>
 8015f32:	f00e ffc4 	bl	8024ebe <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8015f36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	f7f5 fe7b 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015f40:	4603      	mov	r3, r0
 8015f42:	2b04      	cmp	r3, #4
 8015f44:	d001      	beq.n	8015f4a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x386>
 8015f46:	f00e ffba 	bl	8024ebe <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8015f4a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f7f5 fe71 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015f54:	4603      	mov	r3, r0
 8015f56:	2b04      	cmp	r3, #4
 8015f58:	d001      	beq.n	8015f5e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x39a>
 8015f5a:	f00e ffb0 	bl	8024ebe <abort>

    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 8015f5e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8015f62:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8015f66:	2300      	movs	r3, #0
 8015f68:	2100      	movs	r1, #0
 8015f6a:	f7fb fe69 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015f6e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    const int output_depth = MatchingDim(output_shape, 3, filter_shape, 3);
 8015f72:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8015f76:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8015f7a:	2303      	movs	r3, #3
 8015f7c:	2103      	movs	r1, #3
 8015f7e:	f7fb fe5f 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015f82:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
    TFLITE_DCHECK_EQ(batch_size, 1); /* Only batch = 1 is supported */
 8015f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015f8a:	2b01      	cmp	r3, #1
 8015f8c:	d001      	beq.n	8015f92 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3ce>
 8015f8e:	f00e ff96 	bl	8024ebe <abort>

    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 8015f92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015f96:	657b      	str	r3, [r7, #84]	; 0x54
    input_dims.h = input_height;
 8015f98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015f9c:	65bb      	str	r3, [r7, #88]	; 0x58
    input_dims.w = input_width;
 8015f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
    input_dims.c = input_shape.Dims(3);
 8015fa4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015fa8:	2103      	movs	r1, #3
 8015faa:	4618      	mov	r0, r3
 8015fac:	f7fa fd82 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	663b      	str	r3, [r7, #96]	; 0x60

    cmsis_nn_dims filter_dims;
    filter_dims.n = 1;
 8015fb4:	2301      	movs	r3, #1
 8015fb6:	647b      	str	r3, [r7, #68]	; 0x44
    filter_dims.h = filter_height;
 8015fb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015fbc:	64bb      	str	r3, [r7, #72]	; 0x48
    filter_dims.w = filter_width;
 8015fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
    filter_dims.c = output_depth;
 8015fc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015fc8:	653b      	str	r3, [r7, #80]	; 0x50

    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 8015fca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015fce:	637b      	str	r3, [r7, #52]	; 0x34
    output_dims.h = output_height;
 8015fd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015fd4:	63bb      	str	r3, [r7, #56]	; 0x38
    output_dims.w = output_width;
 8015fd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015fda:	63fb      	str	r3, [r7, #60]	; 0x3c
    output_dims.c = output_depth;
 8015fdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015fe0:	643b      	str	r3, [r7, #64]	; 0x40

    cmsis_nn_dw_conv_params dw_conv_params;
    dw_conv_params.padding.h = data->reference_op_data.padding.height;
 8015fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015fe6:	685b      	ldr	r3, [r3, #4]
 8015fe8:	623b      	str	r3, [r7, #32]
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
 8015fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	61fb      	str	r3, [r7, #28]

    const int32_t buf_size = arm_depthwise_conv_wrapper_s8_get_buffer_size(
 8015ff2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015ff6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8015ffa:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8015ffe:	f107 0008 	add.w	r0, r7, #8
 8016002:	f006 f9bd 	bl	801c380 <arm_depthwise_conv_wrapper_s8_get_buffer_size>
 8016006:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        &dw_conv_params, &input_dims, &filter_dims, &output_dims);

    if (buf_size > 0) {
 801600a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801600e:	2b00      	cmp	r3, #0
 8016010:	dd13      	ble.n	801603a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x476>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016016:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801601a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801601e:	3234      	adds	r2, #52	; 0x34
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	4798      	blx	r3
 8016024:	4603      	mov	r3, r0
 8016026:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 801602a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 801602e:	2b00      	cmp	r3, #0
 8016030:	d008      	beq.n	8016044 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x480>
 8016032:	f897 40af 	ldrb.w	r4, [r7, #175]	; 0xaf
 8016036:	2500      	movs	r5, #0
 8016038:	e005      	b.n	8016046 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x482>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 801603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801603e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016042:	635a      	str	r2, [r3, #52]	; 0x34
    RuntimeShape filter_shape = GetTensorShape(filter);
 8016044:	2501      	movs	r5, #1
 8016046:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801604a:	4618      	mov	r0, r3
 801604c:	f7f5 fddd 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
 8016050:	2d01      	cmp	r5, #1
 8016052:	d001      	beq.n	8016058 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x494>
 8016054:	2500      	movs	r5, #0
 8016056:	e000      	b.n	801605a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x496>
    RuntimeShape output_shape = GetTensorShape(output);
 8016058:	2501      	movs	r5, #1
 801605a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801605e:	4618      	mov	r0, r3
 8016060:	f7f5 fdd3 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
 8016064:	2d01      	cmp	r5, #1
 8016066:	d001      	beq.n	801606c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4a8>
 8016068:	2500      	movs	r5, #0
 801606a:	e000      	b.n	801606e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4aa>
    RuntimeShape input_shape = GetTensorShape(input);
 801606c:	2501      	movs	r5, #1
 801606e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016072:	4618      	mov	r0, r3
 8016074:	f7f5 fdc9 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
 8016078:	2d01      	cmp	r5, #1
 801607a:	d100      	bne.n	801607e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    }
  }
  return kTfLiteOk;
 801607c:	2400      	movs	r4, #0
 801607e:	4623      	mov	r3, r4
}
 8016080:	4618      	mov	r0, r3
 8016082:	37f8      	adds	r7, #248	; 0xf8
 8016084:	46bd      	mov	sp, r7
 8016086:	bdb0      	pop	{r4, r5, r7, pc}

08016088 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             const TfLiteDepthwiseConvParams& params,
                             const OpData& data, const TfLiteEvalTensor* input,
                             const TfLiteEvalTensor* filter,
                             const TfLiteEvalTensor* bias,
                             TfLiteEvalTensor* output) {
 8016088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801608a:	b0f1      	sub	sp, #452	; 0x1c4
 801608c:	af08      	add	r7, sp, #32
 801608e:	f107 0414 	add.w	r4, r7, #20
 8016092:	6020      	str	r0, [r4, #0]
 8016094:	f107 0010 	add.w	r0, r7, #16
 8016098:	6001      	str	r1, [r0, #0]
 801609a:	f107 010c 	add.w	r1, r7, #12
 801609e:	600a      	str	r2, [r1, #0]
 80160a0:	f107 0208 	add.w	r2, r7, #8
 80160a4:	6013      	str	r3, [r2, #0]
  cmsis_nn_dw_conv_params dw_conv_params;
  dw_conv_params.dilation.h = params.dilation_height_factor;
 80160a6:	f107 030c 	add.w	r3, r7, #12
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	699b      	ldr	r3, [r3, #24]
 80160ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  dw_conv_params.dilation.w = params.dilation_width_factor;
 80160b2:	f107 030c 	add.w	r3, r7, #12
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	695b      	ldr	r3, [r3, #20]
 80160ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  // Call to reference implementation can be removed when dilation is supported
  // in the optimized implementations.
  if (1 == dw_conv_params.dilation.h && 1 == dw_conv_params.dilation.w) {
 80160be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80160c2:	2b01      	cmp	r3, #1
 80160c4:	f040 8170 	bne.w	80163a8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x320>
 80160c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80160cc:	2b01      	cmp	r3, #1
 80160ce:	f040 816b 	bne.w	80163a8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x320>
    dw_conv_params.input_offset = -data.reference_op_data.input_zero_point;
 80160d2:	f107 0308 	add.w	r3, r7, #8
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	691b      	ldr	r3, [r3, #16]
 80160da:	425b      	negs	r3, r3
 80160dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    dw_conv_params.output_offset = data.reference_op_data.output_zero_point;
 80160e0:	f107 0308 	add.w	r3, r7, #8
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	699b      	ldr	r3, [r3, #24]
 80160e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    dw_conv_params.stride.h = params.stride_height;
 80160ec:	f107 030c 	add.w	r3, r7, #12
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	689b      	ldr	r3, [r3, #8]
 80160f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    dw_conv_params.stride.w = params.stride_width;
 80160f8:	f107 030c 	add.w	r3, r7, #12
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	685b      	ldr	r3, [r3, #4]
 8016100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    dw_conv_params.padding.h = data.reference_op_data.padding.height;
 8016104:	f107 0308 	add.w	r3, r7, #8
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	685b      	ldr	r3, [r3, #4]
 801610c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    dw_conv_params.padding.w = data.reference_op_data.padding.width;
 8016110:	f107 0308 	add.w	r3, r7, #8
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    // TODO(b/130439627): Use calculated value for clamping.
    dw_conv_params.activation.min = std::numeric_limits<int8_t>::min();
 801611c:	f7f4 feb9 	bl	800ae92 <_ZNSt14numeric_limitsIaE3minEv>
 8016120:	4603      	mov	r3, r0
 8016122:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    dw_conv_params.activation.max = std::numeric_limits<int8_t>::max();
 8016126:	f7f4 febd 	bl	800aea4 <_ZNSt14numeric_limitsIaE3maxEv>
 801612a:	4603      	mov	r3, r0
 801612c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    dw_conv_params.ch_mult = params.depth_multiplier;
 8016130:	f107 030c 	add.w	r3, r7, #12
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	68db      	ldr	r3, [r3, #12]
 8016138:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier =
        data.reference_op_data.per_channel_output_multiplier;
 801613c:	f107 0308 	add.w	r3, r7, #8
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier =
 8016144:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift = data.reference_op_data.per_channel_output_shift;
 8016148:	f107 0308 	add.w	r3, r7, #8
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016150:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8016154:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016158:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 801615c:	4618      	mov	r0, r3
 801615e:	f7fc fa28 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8016162:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016166:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 801616a:	4618      	mov	r0, r3
 801616c:	f7fc fa21 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8016170:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016174:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8016178:	4618      	mov	r0, r3
 801617a:	f7fc fa1a 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 801617e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016182:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8016186:	4618      	mov	r0, r3
 8016188:	f7fc fa13 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    TFLITE_DCHECK_LE(dw_conv_params.activation.min,
 801618c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8016190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016194:	429a      	cmp	r2, r3
 8016196:	dd01      	ble.n	801619c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x114>
 8016198:	f00e fe91 	bl	8024ebe <abort>
                     dw_conv_params.activation.max);

    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 801619c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80161a0:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80161a4:	2300      	movs	r3, #0
 80161a6:	2100      	movs	r1, #0
 80161a8:	f7fb fd4a 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80161ac:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 80161b0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80161b4:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80161b8:	2303      	movs	r3, #3
 80161ba:	2103      	movs	r1, #3
 80161bc:	f7fb fd40 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80161c0:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198

    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 80161c4:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 80161c8:	f7fb fa46 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80161cc:	4603      	mov	r3, r0
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	bf14      	ite	ne
 80161d2:	2301      	movne	r3, #1
 80161d4:	2300      	moveq	r3, #0
 80161d6:	b2db      	uxtb	r3, r3
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d00b      	beq.n	80161f4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x16c>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80161dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80161e0:	4618      	mov	r0, r3
 80161e2:	f7fa fc9f 	bl	8010b24 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80161e6:	4602      	mov	r2, r0
 80161e8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80161ec:	4293      	cmp	r3, r2
 80161ee:	d001      	beq.n	80161f4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x16c>
 80161f0:	f00e fe65 	bl	8024ebe <abort>
    }

    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 80161f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80161f8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80161fc:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 80161fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016202:	2101      	movs	r1, #1
 8016204:	4618      	mov	r0, r3
 8016206:	f7fa fc55 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801620a:	4602      	mov	r2, r0
 801620c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016210:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 8016212:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016216:	2102      	movs	r1, #2
 8016218:	4618      	mov	r0, r3
 801621a:	f7fa fc4b 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801621e:	4602      	mov	r2, r0
 8016220:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016224:	609a      	str	r2, [r3, #8]
    input_dims.c = input_shape.Dims(3);
 8016226:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801622a:	2103      	movs	r1, #3
 801622c:	4618      	mov	r0, r3
 801622e:	f7fa fc41 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016232:	4602      	mov	r2, r0
 8016234:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016238:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(0);
 801623a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801623e:	2100      	movs	r1, #0
 8016240:	4618      	mov	r0, r3
 8016242:	f7fa fc37 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016246:	4602      	mov	r2, r0
 8016248:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801624c:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 801624e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016252:	2101      	movs	r1, #1
 8016254:	4618      	mov	r0, r3
 8016256:	f7fa fc2d 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801625a:	4602      	mov	r2, r0
 801625c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016260:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 8016262:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016266:	2102      	movs	r1, #2
 8016268:	4618      	mov	r0, r3
 801626a:	f7fa fc23 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801626e:	4602      	mov	r2, r0
 8016270:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016274:	609a      	str	r2, [r3, #8]
    filter_dims.c = output_depth;
 8016276:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801627a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 801627e:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 8016280:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016284:	2201      	movs	r2, #1
 8016286:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 8016288:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801628c:	2201      	movs	r2, #1
 801628e:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 8016290:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016294:	2201      	movs	r2, #1
 8016296:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 8016298:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801629c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80162a0:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 80162a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80162a6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80162aa:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 80162ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80162b0:	2101      	movs	r1, #1
 80162b2:	4618      	mov	r0, r3
 80162b4:	f7fa fbfe 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80162b8:	4602      	mov	r2, r0
 80162ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80162be:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 80162c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80162c4:	2102      	movs	r1, #2
 80162c6:	4618      	mov	r0, r3
 80162c8:	f7fa fbf4 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80162cc:	4602      	mov	r2, r0
 80162ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80162d2:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 80162d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80162d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80162dc:	60da      	str	r2, [r3, #12]

    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 80162de:	f107 031c 	add.w	r3, r7, #28
 80162e2:	2200      	movs	r2, #0
 80162e4:	601a      	str	r2, [r3, #0]
    /* 'size' is unused */
    ctx.size = 0;
 80162e6:	f107 031c 	add.w	r3, r7, #28
 80162ea:	2200      	movs	r2, #0
 80162ec:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 80162ee:	f107 0308 	add.w	r3, r7, #8
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	db0f      	blt.n	801631a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x292>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 80162fa:	f107 0314 	add.w	r3, r7, #20
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016302:	f107 0208 	add.w	r2, r7, #8
 8016306:	6812      	ldr	r2, [r2, #0]
 8016308:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801630a:	f107 0214 	add.w	r2, r7, #20
 801630e:	6810      	ldr	r0, [r2, #0]
 8016310:	4798      	blx	r3
 8016312:	4602      	mov	r2, r0
 8016314:	f107 031c 	add.w	r3, r7, #28
 8016318:	601a      	str	r2, [r3, #0]
    }

    TFLITE_DCHECK_EQ(
 801631a:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 801631e:	f7fb f99b 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8016322:	4605      	mov	r5, r0
 8016324:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8016328:	f7fb f996 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801632c:	4606      	mov	r6, r0
 801632e:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8016332:	f7fb fc12 	bl	8011b5a <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8016336:	6078      	str	r0, [r7, #4]
 8016338:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 801633c:	f7fb f99b 	bl	8011676 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8016340:	4603      	mov	r3, r0
 8016342:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8016346:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801634a:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 801634e:	f107 001c 	add.w	r0, r7, #28
 8016352:	9306      	str	r3, [sp, #24]
 8016354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016358:	9305      	str	r3, [sp, #20]
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	9304      	str	r3, [sp, #16]
 801635e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016362:	9303      	str	r3, [sp, #12]
 8016364:	9602      	str	r6, [sp, #8]
 8016366:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801636a:	9301      	str	r3, [sp, #4]
 801636c:	9500      	str	r5, [sp, #0]
 801636e:	4623      	mov	r3, r4
 8016370:	f005 ffa3 	bl	801c2ba <arm_depthwise_conv_wrapper_s8>
 8016374:	4603      	mov	r3, r0
 8016376:	2b00      	cmp	r3, #0
 8016378:	d001      	beq.n	801637e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x2f6>
 801637a:	f00e fda0 	bl	8024ebe <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 801637e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016382:	4618      	mov	r0, r3
 8016384:	f7f5 fc41 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8016388:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801638c:	4618      	mov	r0, r3
 801638e:	f7f5 fc3c 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8016392:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016396:	4618      	mov	r0, r3
 8016398:	f7f5 fc37 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801639c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80163a0:	4618      	mov	r0, r3
 80163a2:	f7f5 fc32 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &dw_conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 80163a6:	e06e      	b.n	8016486 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x3fe>
  } else {
    reference_integer_ops::DepthwiseConvPerChannel(
        DepthwiseConvParamsQuantized(params, data.reference_op_data),
 80163a8:	f107 0308 	add.w	r3, r7, #8
 80163ac:	681a      	ldr	r2, [r3, #0]
 80163ae:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80163b2:	f107 030c 	add.w	r3, r7, #12
 80163b6:	6819      	ldr	r1, [r3, #0]
 80163b8:	f7fb ff49 	bl	801224e <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 80163bc:	f107 0308 	add.w	r3, r7, #8
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 80163c4:	f107 0308 	add.w	r3, r7, #8
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 80163cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80163d0:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 80163d4:	4618      	mov	r0, r3
 80163d6:	f7fc f8ec 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 80163da:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80163de:	f7fb f93b 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80163e2:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 80163e4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80163e8:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80163ec:	4618      	mov	r0, r3
 80163ee:	f7fc f8e0 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 80163f2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80163f6:	f7fb f92f 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80163fa:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 80163fc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8016400:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8016404:	4618      	mov	r0, r3
 8016406:	f7fc f8d4 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 801640a:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 801640e:	f7fb fba4 	bl	8011b5a <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8016412:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 8016414:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016418:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 801641c:	4618      	mov	r0, r3
 801641e:	f7fc f8c8 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 8016422:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8016426:	f7fb f926 	bl	8011676 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801642a:	4603      	mov	r3, r0
 801642c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8016430:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8016434:	9306      	str	r3, [sp, #24]
 8016436:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801643a:	9305      	str	r3, [sp, #20]
 801643c:	683b      	ldr	r3, [r7, #0]
 801643e:	9304      	str	r3, [sp, #16]
 8016440:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8016444:	9303      	str	r3, [sp, #12]
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	9302      	str	r3, [sp, #8]
 801644a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801644e:	9301      	str	r3, [sp, #4]
 8016450:	9600      	str	r6, [sp, #0]
 8016452:	4613      	mov	r3, r2
 8016454:	462a      	mov	r2, r5
 8016456:	4621      	mov	r1, r4
 8016458:	f7ff f9dc 	bl	8015814 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 801645c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016460:	4618      	mov	r0, r3
 8016462:	f7f5 fbd2 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 8016466:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801646a:	4618      	mov	r0, r3
 801646c:	f7f5 fbcd 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 8016470:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016474:	4618      	mov	r0, r3
 8016476:	f7f5 fbc8 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 801647a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801647e:	4618      	mov	r0, r3
 8016480:	f7f5 fbc3 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
}
 8016484:	bf00      	nop
 8016486:	bf00      	nop
 8016488:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 801648c:	46bd      	mov	sp, r7
 801648e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016490 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8016490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016492:	b0b7      	sub	sp, #220	; 0xdc
 8016494:	af06      	add	r7, sp, #24
 8016496:	6078      	str	r0, [r7, #4]
 8016498:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801649a:	683b      	ldr	r3, [r7, #0]
 801649c:	691b      	ldr	r3, [r3, #16]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d101      	bne.n	80164a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 80164a2:	f00e fd0c 	bl	8024ebe <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80164a6:	683b      	ldr	r3, [r7, #0]
 80164a8:	695b      	ldr	r3, [r3, #20]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d101      	bne.n	80164b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22>
 80164ae:	f00e fd06 	bl	8024ebe <abort>

  const auto& params =
 80164b2:	683b      	ldr	r3, [r7, #0]
 80164b4:	695b      	ldr	r3, [r3, #20]
 80164b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));
  const OpData& data = *(static_cast<OpData*>(node->user_data));
 80164ba:	683b      	ldr	r3, [r7, #0]
 80164bc:	691b      	ldr	r3, [r3, #16]
 80164be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
 80164c2:	4b60      	ldr	r3, [pc, #384]	; (8016644 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b4>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	461a      	mov	r2, r3
 80164c8:	6839      	ldr	r1, [r7, #0]
 80164ca:	6878      	ldr	r0, [r7, #4]
 80164cc:	f7fa fbd6 	bl	8010c7c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80164d0:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
 80164d4:	4b5c      	ldr	r3, [pc, #368]	; (8016648 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b8>)
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	461a      	mov	r2, r3
 80164da:	6839      	ldr	r1, [r7, #0]
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	f7fa fbbd 	bl	8010c5c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80164e2:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
 80164e6:	4b59      	ldr	r3, [pc, #356]	; (801664c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1bc>)
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	461a      	mov	r2, r3
 80164ec:	6839      	ldr	r1, [r7, #0]
 80164ee:	6878      	ldr	r0, [r7, #4]
 80164f0:	f7fa fbb4 	bl	8010c5c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80164f4:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 80164f8:	6838      	ldr	r0, [r7, #0]
 80164fa:	f7fb fb14 	bl	8011b26 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80164fe:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
 8016500:	2b03      	cmp	r3, #3
 8016502:	d108      	bne.n	8016516 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
 8016504:	4b52      	ldr	r3, [pc, #328]	; (8016650 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>)
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	461a      	mov	r2, r3
 801650a:	6839      	ldr	r1, [r7, #0]
 801650c:	6878      	ldr	r0, [r7, #4]
 801650e:	f7fa fba5 	bl	8010c5c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8016512:	4603      	mov	r3, r0
 8016514:	e000      	b.n	8016518 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x88>
 8016516:	2300      	movs	r3, #0
          : nullptr;
 8016518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  switch (input->type) {  // Already know in/out types are same.
 801651c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016520:	7a1b      	ldrb	r3, [r3, #8]
 8016522:	2b01      	cmp	r3, #1
 8016524:	d002      	beq.n	801652c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
 8016526:	2b09      	cmp	r3, #9
 8016528:	d061      	beq.n	80165ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
 801652a:	e075      	b.n	8016618 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x188>
    case kTfLiteFloat32: {
      tflite::reference_ops::DepthwiseConv(
          DepthwiseConvParamsFloat(params, data.reference_op_data),
 801652c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016530:	f107 0308 	add.w	r3, r7, #8
 8016534:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8016538:	4618      	mov	r0, r3
 801653a:	f7fb fe47 	bl	80121cc <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
 801653e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016542:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8016546:	4618      	mov	r0, r3
 8016548:	f7fc f833 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 801654c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8016550:	f7fb f862 	bl	8011618 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8016554:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8016556:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801655a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 801655e:	4618      	mov	r0, r3
 8016560:	f7fc f827 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 8016564:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016568:	f7fb f856 	bl	8011618 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801656c:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 801656e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016572:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8016576:	4618      	mov	r0, r3
 8016578:	f7fc f81b 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 801657c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8016580:	f7fb f84a 	bl	8011618 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8016584:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 8016586:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801658a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801658e:	4618      	mov	r0, r3
 8016590:	f7fc f80f 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 8016594:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8016598:	f7fb f84d 	bl	8011636 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801659c:	4603      	mov	r3, r0
 801659e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80165a2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80165a6:	f107 0008 	add.w	r0, r7, #8
 80165aa:	9304      	str	r3, [sp, #16]
 80165ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80165b0:	9303      	str	r3, [sp, #12]
 80165b2:	9502      	str	r5, [sp, #8]
 80165b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80165b8:	9301      	str	r3, [sp, #4]
 80165ba:	9400      	str	r4, [sp, #0]
 80165bc:	4613      	mov	r3, r2
 80165be:	4632      	mov	r2, r6
 80165c0:	f7fe ffa2 	bl	8015508 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 80165c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80165c8:	4618      	mov	r0, r3
 80165ca:	f7f5 fb1e 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 80165ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80165d2:	4618      	mov	r0, r3
 80165d4:	f7f5 fb19 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 80165d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80165dc:	4618      	mov	r0, r3
 80165de:	f7f5 fb14 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 80165e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80165e6:	4618      	mov	r0, r3
 80165e8:	f7f5 fb0f 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 80165ec:	e025      	b.n	801663a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1aa>
    }
    case kTfLiteInt8:
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
 80165ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80165f2:	9303      	str	r3, [sp, #12]
 80165f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80165f8:	9302      	str	r3, [sp, #8]
 80165fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80165fe:	9301      	str	r3, [sp, #4]
 8016600:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016604:	9300      	str	r3, [sp, #0]
 8016606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801660a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801660e:	6839      	ldr	r1, [r7, #0]
 8016610:	6878      	ldr	r0, [r7, #4]
 8016612:	f7ff fd39 	bl	8016088 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>
                              output);
      break;
 8016616:	e010      	b.n	801663a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1aa>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	695c      	ldr	r4, [r3, #20]
 801661c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016620:	7a1b      	ldrb	r3, [r3, #8]
 8016622:	4618      	mov	r0, r3
 8016624:	f7f1 fee4 	bl	80083f0 <TfLiteTypeGetName>
 8016628:	4602      	mov	r2, r0
 801662a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801662e:	7a1b      	ldrb	r3, [r3, #8]
 8016630:	4908      	ldr	r1, [pc, #32]	; (8016654 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
 8016632:	6878      	ldr	r0, [r7, #4]
 8016634:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8016636:	2301      	movs	r3, #1
 8016638:	e000      	b.n	801663c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ac>
  }
  return kTfLiteOk;
 801663a:	2300      	movs	r3, #0
}
 801663c:	4618      	mov	r0, r3
 801663e:	37c4      	adds	r7, #196	; 0xc4
 8016640:	46bd      	mov	sp, r7
 8016642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016644:	0802c210 	.word	0x0802c210
 8016648:	0802c204 	.word	0x0802c204
 801664c:	0802c208 	.word	0x0802c208
 8016650:	0802c20c 	.word	0x0802c20c
 8016654:	0802b4ec 	.word	0x0802b4ec

08016658 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
 8016658:	b4b0      	push	{r4, r5, r7}
 801665a:	b083      	sub	sp, #12
 801665c:	af00      	add	r7, sp, #0
 801665e:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	4a07      	ldr	r2, [pc, #28]	; (8016680 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x28>)
 8016664:	461c      	mov	r4, r3
 8016666:	4615      	mov	r5, r2
 8016668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801666a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801666c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	370c      	adds	r7, #12
 8016678:	46bd      	mov	sp, r7
 801667a:	bcb0      	pop	{r4, r5, r7}
 801667c:	4770      	bx	lr
 801667e:	bf00      	nop
 8016680:	0802b508 	.word	0x0802b508

08016684 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
 8016684:	b590      	push	{r4, r7, lr}
 8016686:	ed2d 8b02 	vpush	{d8}
 801668a:	b0a7      	sub	sp, #156	; 0x9c
 801668c:	af02      	add	r7, sp, #8
 801668e:	60f8      	str	r0, [r7, #12]
 8016690:	60b9      	str	r1, [r7, #8]
 8016692:	607a      	str	r2, [r7, #4]
 8016694:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8016696:	68b8      	ldr	r0, [r7, #8]
 8016698:	f7f5 facd 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801669c:	4603      	mov	r3, r0
 801669e:	2b04      	cmp	r3, #4
 80166a0:	d001      	beq.n	80166a6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 80166a2:	f00e fc0c 	bl	8024ebe <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80166a6:	6838      	ldr	r0, [r7, #0]
 80166a8:	f7f5 fac5 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80166ac:	4603      	mov	r3, r0
 80166ae:	2b04      	cmp	r3, #4
 80166b0:	d001      	beq.n	80166b6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 80166b2:	f00e fc04 	bl	8024ebe <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80166b6:	2300      	movs	r3, #0
 80166b8:	683a      	ldr	r2, [r7, #0]
 80166ba:	2100      	movs	r1, #0
 80166bc:	68b8      	ldr	r0, [r7, #8]
 80166be:	f7fb fabf 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80166c2:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80166c4:	2303      	movs	r3, #3
 80166c6:	683a      	ldr	r2, [r7, #0]
 80166c8:	2103      	movs	r1, #3
 80166ca:	68b8      	ldr	r0, [r7, #8]
 80166cc:	f7fb fab8 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80166d0:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 80166d2:	2101      	movs	r1, #1
 80166d4:	68b8      	ldr	r0, [r7, #8]
 80166d6:	f7fa f9ed 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80166da:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 80166dc:	2102      	movs	r1, #2
 80166de:	68b8      	ldr	r0, [r7, #8]
 80166e0:	f7fa f9e8 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80166e4:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 80166e6:	2101      	movs	r1, #1
 80166e8:	6838      	ldr	r0, [r7, #0]
 80166ea:	f7fa f9e3 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80166ee:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 80166f0:	2102      	movs	r1, #2
 80166f2:	6838      	ldr	r0, [r7, #0]
 80166f4:	f7fa f9de 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80166f8:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	68db      	ldr	r3, [r3, #12]
 80166fe:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	691b      	ldr	r3, [r3, #16]
 8016704:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8016706:	2300      	movs	r3, #0
 8016708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801670c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016712:	429a      	cmp	r2, r3
 8016714:	f280 80f0 	bge.w	80168f8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x274>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016718:	2300      	movs	r3, #0
 801671a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801671e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016724:	429a      	cmp	r2, r3
 8016726:	f280 80e1 	bge.w	80168ec <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x268>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801672a:	2300      	movs	r3, #0
 801672c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016730:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016734:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016736:	429a      	cmp	r2, r3
 8016738:	f280 80d2 	bge.w	80168e0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x25c>
        for (int channel = 0; channel < depth; ++channel) {
 801673c:	2300      	movs	r3, #0
 801673e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016742:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016746:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016748:	429a      	cmp	r2, r3
 801674a:	f280 80c3 	bge.w	80168d4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x250>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 801674e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016752:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016754:	fb02 f303 	mul.w	r3, r2, r3
 8016758:	68fa      	ldr	r2, [r7, #12]
 801675a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 801675e:	1a9b      	subs	r3, r3, r2
 8016760:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8016762:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016766:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016768:	fb02 f303 	mul.w	r3, r2, r3
 801676c:	68fa      	ldr	r2, [r7, #12]
 801676e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8016772:	1a9b      	subs	r3, r3, r2
 8016774:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8016776:	2300      	movs	r3, #0
 8016778:	617b      	str	r3, [r7, #20]
 801677a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801677c:	425b      	negs	r3, r3
 801677e:	61bb      	str	r3, [r7, #24]
 8016780:	f107 0218 	add.w	r2, r7, #24
 8016784:	f107 0314 	add.w	r3, r7, #20
 8016788:	4611      	mov	r1, r2
 801678a:	4618      	mov	r0, r3
 801678c:	f7f5 f8b6 	bl	800b8fc <_ZSt3maxIiERKT_S2_S2_>
 8016790:	4603      	mov	r3, r0
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	f103 0018 	add.w	r0, r3, #24
 801679c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801679e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167a0:	1ad3      	subs	r3, r2, r3
 80167a2:	61fb      	str	r3, [r7, #28]
 80167a4:	f107 031c 	add.w	r3, r7, #28
 80167a8:	4619      	mov	r1, r3
 80167aa:	f7fb fec8 	bl	801253e <_ZSt3minIiERKT_S2_S2_>
 80167ae:	4603      	mov	r3, r0
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 80167b4:	2300      	movs	r3, #0
 80167b6:	623b      	str	r3, [r7, #32]
 80167b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80167ba:	425b      	negs	r3, r3
 80167bc:	627b      	str	r3, [r7, #36]	; 0x24
 80167be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80167c2:	f107 0320 	add.w	r3, r7, #32
 80167c6:	4611      	mov	r1, r2
 80167c8:	4618      	mov	r0, r3
 80167ca:	f7f5 f897 	bl	800b8fc <_ZSt3maxIiERKT_S2_S2_>
 80167ce:	4603      	mov	r3, r0
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	f103 0014 	add.w	r0, r3, #20
 80167da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80167dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80167de:	1ad3      	subs	r3, r2, r3
 80167e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80167e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80167e6:	4619      	mov	r1, r3
 80167e8:	f7fb fea9 	bl	801253e <_ZSt3minIiERKT_S2_S2_>
 80167ec:	4603      	mov	r3, r0
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	63bb      	str	r3, [r7, #56]	; 0x38
          float total = 0.f;
 80167f2:	f04f 0300 	mov.w	r3, #0
 80167f6:	67fb      	str	r3, [r7, #124]	; 0x7c
          float filter_count = 0;
 80167f8:	f04f 0300 	mov.w	r3, #0
 80167fc:	67bb      	str	r3, [r7, #120]	; 0x78
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80167fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016800:	677b      	str	r3, [r7, #116]	; 0x74
 8016802:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016806:	429a      	cmp	r2, r3
 8016808:	da33      	bge.n	8016872 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ee>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801680a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801680c:	673b      	str	r3, [r7, #112]	; 0x70
 801680e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016812:	429a      	cmp	r2, r3
 8016814:	da29      	bge.n	801686a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1e6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8016816:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801681a:	4413      	add	r3, r2
 801681c:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 801681e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016822:	4413      	add	r3, r2
 8016824:	633b      	str	r3, [r7, #48]	; 0x30
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8016826:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801682a:	9300      	str	r3, [sp, #0]
 801682c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801682e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016830:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8016834:	68b8      	ldr	r0, [r7, #8]
 8016836:	f7fb f9ab 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801683a:	4603      	mov	r3, r0
 801683c:	009b      	lsls	r3, r3, #2
 801683e:	687a      	ldr	r2, [r7, #4]
 8016840:	4413      	add	r3, r2
 8016842:	edd3 7a00 	vldr	s15, [r3]
              total +=
 8016846:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 801684a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801684e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              filter_count++;
 8016852:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8016856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801685a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801685e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8016862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016864:	3301      	adds	r3, #1
 8016866:	673b      	str	r3, [r7, #112]	; 0x70
 8016868:	e7d1      	b.n	801680e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801686a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801686c:	3301      	adds	r3, #1
 801686e:	677b      	str	r3, [r7, #116]	; 0x74
 8016870:	e7c7      	b.n	8016802 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17e>
            }
          }
          const float average = total / filter_count;
 8016872:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8016876:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 801687a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801687e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	edd3 8a0a 	vldr	s17, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801688e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016892:	9300      	str	r3, [sp, #0]
 8016894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016898:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801689c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80168a0:	6838      	ldr	r0, [r7, #0]
 80168a2:	f7fb f975 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80168a6:	4603      	mov	r3, r0
 80168a8:	009b      	lsls	r3, r3, #2
 80168aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80168ae:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 80168b0:	eeb0 1a68 	vmov.f32	s2, s17
 80168b4:	eef0 0a48 	vmov.f32	s1, s16
 80168b8:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80168bc:	f7fb feb1 	bl	8012622 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 80168c0:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 80168c4:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 80168c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80168cc:	3301      	adds	r3, #1
 80168ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80168d2:	e736      	b.n	8016742 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xbe>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80168d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80168d8:	3301      	adds	r3, #1
 80168da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80168de:	e727      	b.n	8016730 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xac>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80168e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80168e4:	3301      	adds	r3, #1
 80168e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80168ea:	e718      	b.n	801671e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 80168ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80168f0:	3301      	adds	r3, #1
 80168f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80168f6:	e709      	b.n	801670c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 80168f8:	bf00      	nop
 80168fa:	3794      	adds	r7, #148	; 0x94
 80168fc:	46bd      	mov	sp, r7
 80168fe:	ecbd 8b02 	vpop	{d8}
 8016902:	bd90      	pop	{r4, r7, pc}

08016904 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
 8016904:	b590      	push	{r4, r7, lr}
 8016906:	ed2d 8b04 	vpush	{d8-d9}
 801690a:	b0a5      	sub	sp, #148	; 0x94
 801690c:	af02      	add	r7, sp, #8
 801690e:	60f8      	str	r0, [r7, #12]
 8016910:	60b9      	str	r1, [r7, #8]
 8016912:	607a      	str	r2, [r7, #4]
 8016914:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8016916:	68b8      	ldr	r0, [r7, #8]
 8016918:	f7f5 f98d 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801691c:	4603      	mov	r3, r0
 801691e:	2b04      	cmp	r3, #4
 8016920:	d001      	beq.n	8016926 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 8016922:	f00e facc 	bl	8024ebe <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8016926:	6838      	ldr	r0, [r7, #0]
 8016928:	f7f5 f985 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801692c:	4603      	mov	r3, r0
 801692e:	2b04      	cmp	r3, #4
 8016930:	d001      	beq.n	8016936 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8016932:	f00e fac4 	bl	8024ebe <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8016936:	2300      	movs	r3, #0
 8016938:	683a      	ldr	r2, [r7, #0]
 801693a:	2100      	movs	r1, #0
 801693c:	68b8      	ldr	r0, [r7, #8]
 801693e:	f7fb f97f 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016942:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8016944:	2303      	movs	r3, #3
 8016946:	683a      	ldr	r2, [r7, #0]
 8016948:	2103      	movs	r1, #3
 801694a:	68b8      	ldr	r0, [r7, #8]
 801694c:	f7fb f978 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016950:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8016952:	2101      	movs	r1, #1
 8016954:	68b8      	ldr	r0, [r7, #8]
 8016956:	f7fa f8ad 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801695a:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 801695c:	2102      	movs	r1, #2
 801695e:	68b8      	ldr	r0, [r7, #8]
 8016960:	f7fa f8a8 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016964:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8016966:	2101      	movs	r1, #1
 8016968:	6838      	ldr	r0, [r7, #0]
 801696a:	f7fa f8a3 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801696e:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8016970:	2102      	movs	r1, #2
 8016972:	6838      	ldr	r0, [r7, #0]
 8016974:	f7fa f89e 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016978:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	68db      	ldr	r3, [r3, #12]
 801697e:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	691b      	ldr	r3, [r3, #16]
 8016984:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8016986:	2300      	movs	r3, #0
 8016988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801698c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016992:	429a      	cmp	r2, r3
 8016994:	f280 80d4 	bge.w	8016b40 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x23c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016998:	2300      	movs	r3, #0
 801699a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801699e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80169a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80169a4:	429a      	cmp	r2, r3
 80169a6:	f280 80c5 	bge.w	8016b34 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x230>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80169aa:	2300      	movs	r3, #0
 80169ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80169ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80169b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80169b2:	429a      	cmp	r2, r3
 80169b4:	f280 80b8 	bge.w	8016b28 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x224>
        for (int channel = 0; channel < depth; ++channel) {
 80169b8:	2300      	movs	r3, #0
 80169ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80169bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80169be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80169c0:	429a      	cmp	r2, r3
 80169c2:	f280 80ad 	bge.w	8016b20 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x21c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 80169c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80169c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80169ca:	fb02 f303 	mul.w	r3, r2, r3
 80169ce:	68fa      	ldr	r2, [r7, #12]
 80169d0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 80169d4:	1a9b      	subs	r3, r3, r2
 80169d6:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 80169d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80169dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80169de:	fb02 f303 	mul.w	r3, r2, r3
 80169e2:	68fa      	ldr	r2, [r7, #12]
 80169e4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 80169e8:	1a9b      	subs	r3, r3, r2
 80169ea:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 80169ec:	2300      	movs	r3, #0
 80169ee:	61bb      	str	r3, [r7, #24]
 80169f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169f2:	425b      	negs	r3, r3
 80169f4:	61fb      	str	r3, [r7, #28]
 80169f6:	f107 021c 	add.w	r2, r7, #28
 80169fa:	f107 0318 	add.w	r3, r7, #24
 80169fe:	4611      	mov	r1, r2
 8016a00:	4618      	mov	r0, r3
 8016a02:	f7f4 ff7b 	bl	800b8fc <_ZSt3maxIiERKT_S2_S2_>
 8016a06:	4603      	mov	r3, r0
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	f103 0018 	add.w	r0, r3, #24
 8016a12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016a16:	1ad3      	subs	r3, r2, r3
 8016a18:	623b      	str	r3, [r7, #32]
 8016a1a:	f107 0320 	add.w	r3, r7, #32
 8016a1e:	4619      	mov	r1, r3
 8016a20:	f7fb fd8d 	bl	801253e <_ZSt3minIiERKT_S2_S2_>
 8016a24:	4603      	mov	r3, r0
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8016a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016a30:	425b      	negs	r3, r3
 8016a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8016a34:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016a3c:	4611      	mov	r1, r2
 8016a3e:	4618      	mov	r0, r3
 8016a40:	f7f4 ff5c 	bl	800b8fc <_ZSt3maxIiERKT_S2_S2_>
 8016a44:	4603      	mov	r3, r0
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	f103 0014 	add.w	r0, r3, #20
 8016a50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016a54:	1ad3      	subs	r3, r2, r3
 8016a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016a5c:	4619      	mov	r1, r3
 8016a5e:	f7fb fd6e 	bl	801253e <_ZSt3minIiERKT_S2_S2_>
 8016a62:	4603      	mov	r3, r0
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	63bb      	str	r3, [r7, #56]	; 0x38
          float max = std::numeric_limits<float>::lowest();
 8016a68:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8016a6c:	617b      	str	r3, [r7, #20]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8016a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a70:	677b      	str	r3, [r7, #116]	; 0x74
 8016a72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a76:	429a      	cmp	r2, r3
 8016a78:	da2b      	bge.n	8016ad2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ce>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8016a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a7c:	673b      	str	r3, [r7, #112]	; 0x70
 8016a7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a82:	429a      	cmp	r2, r3
 8016a84:	da21      	bge.n	8016aca <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8016a86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016a88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016a8a:	4413      	add	r3, r2
 8016a8c:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8016a8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a92:	4413      	add	r3, r2
 8016a94:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8016a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016a98:	9300      	str	r3, [sp, #0]
 8016a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a9e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8016aa2:	68b8      	ldr	r0, [r7, #8]
 8016aa4:	f7fb f874 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	009b      	lsls	r3, r3, #2
 8016aac:	687a      	ldr	r2, [r7, #4]
 8016aae:	441a      	add	r2, r3
 8016ab0:	f107 0314 	add.w	r3, r7, #20
 8016ab4:	4611      	mov	r1, r2
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	f7f4 f9ae 	bl	800ae18 <_ZSt3maxIfERKT_S2_S2_>
 8016abc:	4603      	mov	r3, r0
              max = std::max(
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	617b      	str	r3, [r7, #20]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8016ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016ac4:	3301      	adds	r3, #1
 8016ac6:	673b      	str	r3, [r7, #112]	; 0x70
 8016ac8:	e7d9      	b.n	8016a7e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8016aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016acc:	3301      	adds	r3, #1
 8016ace:	677b      	str	r3, [r7, #116]	; 0x74
 8016ad0:	e7cf      	b.n	8016a72 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16e>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8016ad2:	ed97 8a05 	vldr	s16, [r7, #20]
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8016ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016ae4:	9300      	str	r3, [sp, #0]
 8016ae6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016ae8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016aec:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8016af0:	6838      	ldr	r0, [r7, #0]
 8016af2:	f7fb f84d 	bl	8011b90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016af6:	4603      	mov	r3, r0
 8016af8:	009b      	lsls	r3, r3, #2
 8016afa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016afe:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8016b00:	eeb0 1a49 	vmov.f32	s2, s18
 8016b04:	eef0 0a68 	vmov.f32	s1, s17
 8016b08:	eeb0 0a48 	vmov.f32	s0, s16
 8016b0c:	f7fb fd89 	bl	8012622 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8016b10:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8016b14:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8016b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016b1a:	3301      	adds	r3, #1
 8016b1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8016b1e:	e74d      	b.n	80169bc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xb8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016b20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016b22:	3301      	adds	r3, #1
 8016b24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016b26:	e742      	b.n	80169ae <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xaa>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016b28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016b2c:	3301      	adds	r3, #1
 8016b2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016b32:	e734      	b.n	801699e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 8016b34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016b38:	3301      	adds	r3, #1
 8016b3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016b3e:	e725      	b.n	801698c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 8016b40:	bf00      	nop
 8016b42:	378c      	adds	r7, #140	; 0x8c
 8016b44:	46bd      	mov	sp, r7
 8016b46:	ecbd 8b04 	vpop	{d8-d9}
 8016b4a:	bd90      	pop	{r4, r7, pc}

08016b4c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input, TfLiteTensor* output,
                             OpData* data) {
 8016b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b4e:	b099      	sub	sp, #100	; 0x64
 8016b50:	af08      	add	r7, sp, #32
 8016b52:	6278      	str	r0, [r7, #36]	; 0x24
 8016b54:	6239      	str	r1, [r7, #32]
 8016b56:	61fa      	str	r2, [r7, #28]
 8016b58:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 8016b5a:	2101      	movs	r1, #1
 8016b5c:	69f8      	ldr	r0, [r7, #28]
 8016b5e:	f7f4 f9e2 	bl	800af26 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8016b62:	63f8      	str	r0, [r7, #60]	; 0x3c
  int width = SizeOfDimension(input, 2);
 8016b64:	2102      	movs	r1, #2
 8016b66:	69f8      	ldr	r0, [r7, #28]
 8016b68:	f7f4 f9dd 	bl	800af26 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8016b6c:	63b8      	str	r0, [r7, #56]	; 0x38

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 8016b6e:	6a3b      	ldr	r3, [r7, #32]
 8016b70:	689d      	ldr	r5, [r3, #8]
 8016b72:	6a3b      	ldr	r3, [r7, #32]
 8016b74:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 8016b76:	6a3b      	ldr	r3, [r7, #32]
 8016b78:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 8016b7a:	6a3a      	ldr	r2, [r7, #32]
 8016b7c:	68d2      	ldr	r2, [r2, #12]
 8016b7e:	6a39      	ldr	r1, [r7, #32]
 8016b80:	7809      	ldrb	r1, [r1, #0]
 8016b82:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8016b84:	6078      	str	r0, [r7, #4]
 8016b86:	f107 0408 	add.w	r4, r7, #8
 8016b8a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8016b8e:	9007      	str	r0, [sp, #28]
 8016b90:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8016b94:	9006      	str	r0, [sp, #24]
 8016b96:	9105      	str	r1, [sp, #20]
 8016b98:	9204      	str	r2, [sp, #16]
 8016b9a:	9303      	str	r3, [sp, #12]
 8016b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b9e:	9302      	str	r3, [sp, #8]
 8016ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ba2:	9301      	str	r3, [sp, #4]
 8016ba4:	2301      	movs	r3, #1
 8016ba6:	9300      	str	r3, [sp, #0]
 8016ba8:	2301      	movs	r3, #1
 8016baa:	4632      	mov	r2, r6
 8016bac:	4629      	mov	r1, r5
 8016bae:	4620      	mov	r0, r4
 8016bb0:	f7fb f8f1 	bl	8011d96 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8016bb4:	687c      	ldr	r4, [r7, #4]
 8016bb6:	f107 0308 	add.w	r3, r7, #8
 8016bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if (input->type == kTfLiteFloat32) {
 8016bc0:	69fb      	ldr	r3, [r7, #28]
 8016bc2:	781b      	ldrb	r3, [r3, #0]
 8016bc4:	2b01      	cmp	r3, #1
 8016bc6:	d10a      	bne.n	8016bde <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x92>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
 8016bc8:	6a3b      	ldr	r3, [r7, #32]
 8016bca:	7d18      	ldrb	r0, [r3, #20]
 8016bcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016bce:	f103 011c 	add.w	r1, r3, #28
 8016bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016bd4:	3320      	adds	r3, #32
 8016bd6:	461a      	mov	r2, r3
 8016bd8:	f7fb fab6 	bl	8012148 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
 8016bdc:	e01e      	b.n	8016c1c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
                             &data->activation_max_f32);
  } else {
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8016bde:	6a3b      	ldr	r3, [r7, #32]
 8016be0:	7d19      	ldrb	r1, [r3, #20]
 8016be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016be4:	f103 0214 	add.w	r2, r3, #20
 8016be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016bea:	3318      	adds	r3, #24
 8016bec:	9300      	str	r3, [sp, #0]
 8016bee:	4613      	mov	r3, r2
 8016bf0:	69ba      	ldr	r2, [r7, #24]
 8016bf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016bf4:	f7f4 fe2a 	bl	800b84c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8016bf8:	4603      	mov	r3, r0
 8016bfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016bfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d002      	beq.n	8016c0c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xc0>
 8016c06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016c0a:	e00c      	b.n	8016c26 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xda>
        context, params->activation, output, &data->activation_min,
        &data->activation_max));
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 8016c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016c0e:	695a      	ldr	r2, [r3, #20]
 8016c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016c12:	699b      	ldr	r3, [r3, #24]
 8016c14:	429a      	cmp	r2, r3
 8016c16:	dd01      	ble.n	8016c1c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
 8016c18:	f00e f951 	bl	8024ebe <abort>
  }

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8016c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016c22:	611a      	str	r2, [r3, #16]

  return kTfLiteOk;
 8016c24:	2300      	movs	r3, #0
}
 8016c26:	4618      	mov	r0, r3
 8016c28:	3744      	adds	r7, #68	; 0x44
 8016c2a:	46bd      	mov	sp, r7
 8016c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016c2e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116AverageEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSG_>:

void AverageEvalFloat(const TfLiteContext* context, const TfLiteNode* node,
                      const TfLitePoolParams* params, const OpData& data,
                      const TfLiteEvalTensor* input, TfLiteEvalTensor* output) {
 8016c2e:	b590      	push	{r4, r7, lr}
 8016c30:	b0a1      	sub	sp, #132	; 0x84
 8016c32:	af02      	add	r7, sp, #8
 8016c34:	60f8      	str	r0, [r7, #12]
 8016c36:	60b9      	str	r1, [r7, #8]
 8016c38:	607a      	str	r2, [r7, #4]
 8016c3a:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	7d1b      	ldrb	r3, [r3, #20]
 8016c40:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016c44:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7fb fa7d 	bl	8012148 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);

  PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	689b      	ldr	r3, [r3, #8]
 8016c52:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	685b      	ldr	r3, [r3, #4]
 8016c58:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	691b      	ldr	r3, [r3, #16]
 8016c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	68db      	ldr	r3, [r3, #12]
 8016c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	685b      	ldr	r3, [r3, #4]
 8016c6a:	b21b      	sxth	r3, r3
 8016c6c:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 8016c6e:	683b      	ldr	r3, [r7, #0]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	b21b      	sxth	r3, r3
 8016c74:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = activation_min;
 8016c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c78:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = activation_max;
 8016c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8016c7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016c82:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8016c86:	4618      	mov	r0, r3
 8016c88:	f7fb fc93 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8016c8c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8016c90:	f7fa fcc2 	bl	8011618 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8016c94:	4604      	mov	r4, r0
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
 8016c96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016c9a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	f7fb fc87 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8016ca4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8016ca8:	f7fa fcc5 	bl	8011636 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8016cac:	4602      	mov	r2, r0
 8016cae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016cb2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8016cb6:	f107 0014 	add.w	r0, r7, #20
 8016cba:	9200      	str	r2, [sp, #0]
 8016cbc:	4622      	mov	r2, r4
 8016cbe:	f7ff fce1 	bl	8016684 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                             tflite::micro::GetTensorShape(output),
 8016cc2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f7f4 ff9f 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8016ccc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7f4 ff9a 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<float>(output));
}
 8016cd6:	bf00      	nop
 8016cd8:	377c      	adds	r7, #124	; 0x7c
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	bd90      	pop	{r4, r7, pc}

08016cde <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>:

void AverageEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
                          const TfLitePoolParams* params, const OpData& data,
                          const TfLiteEvalTensor* input,
                          TfLiteEvalTensor* output) {
 8016cde:	b590      	push	{r4, r7, lr}
 8016ce0:	b0ab      	sub	sp, #172	; 0xac
 8016ce2:	af04      	add	r7, sp, #16
 8016ce4:	60f8      	str	r0, [r7, #12]
 8016ce6:	60b9      	str	r1, [r7, #8]
 8016ce8:	607a      	str	r2, [r7, #4]
 8016cea:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteInt8);
 8016cec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016cf0:	7a1b      	ldrb	r3, [r3, #8]
 8016cf2:	2b09      	cmp	r3, #9
 8016cf4:	d001      	beq.n	8016cfa <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x1c>
 8016cf6:	f00e f8e2 	bl	8024ebe <abort>

  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8016cfa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016cfe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8016d02:	4618      	mov	r0, r3
 8016d04:	f7fb fc55 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8016d08:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	f7f4 ff92 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016d12:	4603      	mov	r3, r0
 8016d14:	2b04      	cmp	r3, #4
 8016d16:	d001      	beq.n	8016d1c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x3e>
 8016d18:	f00e f8d1 	bl	8024ebe <abort>

  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8016d1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016d20:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8016d24:	4618      	mov	r0, r3
 8016d26:	f7fb fc44 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8016d2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7f4 ff81 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016d34:	4603      	mov	r3, r0
 8016d36:	2b04      	cmp	r3, #4
 8016d38:	d001      	beq.n	8016d3e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x60>
 8016d3a:	f00e f8c0 	bl	8024ebe <abort>

  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8016d3e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8016d42:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8016d46:	2303      	movs	r3, #3
 8016d48:	2103      	movs	r1, #3
 8016d4a:	f7fa ff79 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016d4e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  cmsis_nn_dims input_dims;
  input_dims.n = 1;
 8016d52:	2301      	movs	r3, #1
 8016d54:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 8016d56:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016d5a:	2101      	movs	r1, #1
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	f7f9 fea9 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016d62:	4603      	mov	r3, r0
 8016d64:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 8016d66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016d6a:	2102      	movs	r1, #2
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f7f9 fea1 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016d72:	4603      	mov	r3, r0
 8016d74:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = depth;
 8016d76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016d7a:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims output_dims;
  output_dims.n = 1;
 8016d7c:	2301      	movs	r3, #1
 8016d7e:	647b      	str	r3, [r7, #68]	; 0x44
  output_dims.h = output_shape.Dims(1);
 8016d80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016d84:	2101      	movs	r1, #1
 8016d86:	4618      	mov	r0, r3
 8016d88:	f7f9 fe94 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016d8c:	4603      	mov	r3, r0
 8016d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  output_dims.w = output_shape.Dims(2);
 8016d90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016d94:	2102      	movs	r1, #2
 8016d96:	4618      	mov	r0, r3
 8016d98:	f7f9 fe8c 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  output_dims.c = depth;
 8016da0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016da4:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_pool_params pool_params;
  pool_params.stride.h = params->stride_height;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	689b      	ldr	r3, [r3, #8]
 8016daa:	633b      	str	r3, [r7, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	685b      	ldr	r3, [r3, #4]
 8016db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pool_params.padding.h = data.padding.height;
 8016db2:	683b      	ldr	r3, [r7, #0]
 8016db4:	685b      	ldr	r3, [r3, #4]
 8016db6:	63bb      	str	r3, [r7, #56]	; 0x38
  pool_params.padding.w = data.padding.width;
 8016db8:	683b      	ldr	r3, [r7, #0]
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	637b      	str	r3, [r7, #52]	; 0x34
  pool_params.activation.min = data.activation_min;
 8016dbe:	683b      	ldr	r3, [r7, #0]
 8016dc0:	695b      	ldr	r3, [r3, #20]
 8016dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  pool_params.activation.max = data.activation_max;
 8016dc4:	683b      	ldr	r3, [r7, #0]
 8016dc6:	699b      	ldr	r3, [r3, #24]
 8016dc8:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims filter_dims;
  filter_dims.n = 1;
 8016dca:	2301      	movs	r3, #1
 8016dcc:	61fb      	str	r3, [r7, #28]
  filter_dims.h = params->filter_height;
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	691b      	ldr	r3, [r3, #16]
 8016dd2:	623b      	str	r3, [r7, #32]
  filter_dims.w = params->filter_width;
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	68db      	ldr	r3, [r3, #12]
 8016dd8:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.c = 1;
 8016dda:	2301      	movs	r3, #1
 8016ddc:	62bb      	str	r3, [r7, #40]	; 0x28

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 8016dde:	2300      	movs	r3, #0
 8016de0:	617b      	str	r3, [r7, #20]
  ctx.size = 0;
 8016de2:	2300      	movs	r3, #0
 8016de4:	61bb      	str	r3, [r7, #24]
  if (data.buffer_idx > -1) {
 8016de6:	683b      	ldr	r3, [r7, #0]
 8016de8:	691b      	ldr	r3, [r3, #16]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	db08      	blt.n	8016e00 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x122>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016df2:	683a      	ldr	r2, [r7, #0]
 8016df4:	6912      	ldr	r2, [r2, #16]
 8016df6:	4611      	mov	r1, r2
 8016df8:	68f8      	ldr	r0, [r7, #12]
 8016dfa:	4798      	blx	r3
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	617b      	str	r3, [r7, #20]
  }

  TFLITE_DCHECK_EQ(arm_avgpool_s8(&ctx, &pool_params, &input_dims,
 8016e00:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8016e04:	f7fa fc28 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8016e08:	4604      	mov	r4, r0
 8016e0a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016e0e:	f7fa fc32 	bl	8011676 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8016e12:	4603      	mov	r3, r0
 8016e14:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8016e18:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8016e1c:	f107 0014 	add.w	r0, r7, #20
 8016e20:	9302      	str	r3, [sp, #8]
 8016e22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016e26:	9301      	str	r3, [sp, #4]
 8016e28:	f107 031c 	add.w	r3, r7, #28
 8016e2c:	9300      	str	r3, [sp, #0]
 8016e2e:	4623      	mov	r3, r4
 8016e30:	f00a f9e6 	bl	8021200 <arm_avgpool_s8>
 8016e34:	4603      	mov	r3, r0
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d001      	beq.n	8016e3e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x160>
 8016e3a:	f00e f840 	bl	8024ebe <abort>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8016e3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016e42:	4618      	mov	r0, r3
 8016e44:	f7f4 fee1 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8016e48:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	f7f4 fedc 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
                                  tflite::micro::GetTensorData<int8_t>(input),
                                  &filter_dims, &output_dims,
                                  tflite::micro::GetTensorData<int8_t>(output)),
                   ARM_MATH_SUCCESS);
}
 8016e52:	bf00      	nop
 8016e54:	379c      	adds	r7, #156	; 0x9c
 8016e56:	46bd      	mov	sp, r7
 8016e58:	bd90      	pop	{r4, r7, pc}

08016e5a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>:

void MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,
                  TfLitePoolParams* params, const OpData& data,
                  const TfLiteEvalTensor* input, TfLiteEvalTensor* output) {
 8016e5a:	b590      	push	{r4, r7, lr}
 8016e5c:	b0a1      	sub	sp, #132	; 0x84
 8016e5e:	af02      	add	r7, sp, #8
 8016e60:	60f8      	str	r0, [r7, #12]
 8016e62:	60b9      	str	r1, [r7, #8]
 8016e64:	607a      	str	r2, [r7, #4]
 8016e66:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	7d1b      	ldrb	r3, [r3, #20]
 8016e6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016e70:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8016e74:	4618      	mov	r0, r3
 8016e76:	f7fb f967 	bl	8012148 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	689b      	ldr	r3, [r3, #8]
 8016e7e:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	685b      	ldr	r3, [r3, #4]
 8016e84:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	691b      	ldr	r3, [r3, #16]
 8016e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	68db      	ldr	r3, [r3, #12]
 8016e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 8016e92:	683b      	ldr	r3, [r7, #0]
 8016e94:	685b      	ldr	r3, [r3, #4]
 8016e96:	b21b      	sxth	r3, r3
 8016e98:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 8016e9a:	683b      	ldr	r3, [r7, #0]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	b21b      	sxth	r3, r3
 8016ea0:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = data.activation_min_f32;
 8016ea2:	683b      	ldr	r3, [r7, #0]
 8016ea4:	69db      	ldr	r3, [r3, #28]
 8016ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = data.activation_max_f32;
 8016ea8:	683b      	ldr	r3, [r7, #0]
 8016eaa:	6a1b      	ldr	r3, [r3, #32]
 8016eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8016eae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016eb2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f7fb fb7b 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8016ebc:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8016ec0:	f7fa fbaa 	bl	8011618 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8016ec4:	4604      	mov	r4, r0
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
 8016ec6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016eca:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8016ece:	4618      	mov	r0, r3
 8016ed0:	f7fb fb6f 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8016ed4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8016ed8:	f7fa fbad 	bl	8011636 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8016edc:	4602      	mov	r2, r0
 8016ede:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016ee2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8016ee6:	f107 0014 	add.w	r0, r7, #20
 8016eea:	9200      	str	r2, [sp, #0]
 8016eec:	4622      	mov	r2, r4
 8016eee:	f7ff fd09 	bl	8016904 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         tflite::micro::GetTensorShape(output),
 8016ef2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f7f4 fe87 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8016efc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7f4 fe82 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorData<float>(output));
}
 8016f06:	bf00      	nop
 8016f08:	377c      	adds	r7, #124	; 0x7c
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	bd90      	pop	{r4, r7, pc}

08016f0e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>:

TfLiteStatus MaxEvalInt8(TfLiteContext* context, const TfLiteNode* node,
                         const TfLitePoolParams* params, const OpData& data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
 8016f0e:	b590      	push	{r4, r7, lr}
 8016f10:	b0ab      	sub	sp, #172	; 0xac
 8016f12:	af04      	add	r7, sp, #16
 8016f14:	60f8      	str	r0, [r7, #12]
 8016f16:	60b9      	str	r1, [r7, #8]
 8016f18:	607a      	str	r2, [r7, #4]
 8016f1a:	603b      	str	r3, [r7, #0]
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8016f1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016f20:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8016f24:	4618      	mov	r0, r3
 8016f26:	f7fb fb44 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8016f2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016f2e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8016f32:	4618      	mov	r0, r3
 8016f34:	f7fb fb3d 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8016f38:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8016f3c:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8016f40:	2303      	movs	r3, #3
 8016f42:	2103      	movs	r1, #3
 8016f44:	f7fa fe7c 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016f48:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  cmsis_nn_dims input_dims;
  input_dims.n = 1;
 8016f4c:	2301      	movs	r3, #1
 8016f4e:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 8016f50:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016f54:	2101      	movs	r1, #1
 8016f56:	4618      	mov	r0, r3
 8016f58:	f7f9 fdac 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 8016f60:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016f64:	2102      	movs	r1, #2
 8016f66:	4618      	mov	r0, r3
 8016f68:	f7f9 fda4 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016f6c:	4603      	mov	r3, r0
 8016f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = depth;
 8016f70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016f74:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims output_dims;
  output_dims.n = 1;
 8016f76:	2301      	movs	r3, #1
 8016f78:	647b      	str	r3, [r7, #68]	; 0x44
  output_dims.h = output_shape.Dims(1);
 8016f7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016f7e:	2101      	movs	r1, #1
 8016f80:	4618      	mov	r0, r3
 8016f82:	f7f9 fd97 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016f86:	4603      	mov	r3, r0
 8016f88:	64bb      	str	r3, [r7, #72]	; 0x48
  output_dims.w = output_shape.Dims(2);
 8016f8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016f8e:	2102      	movs	r1, #2
 8016f90:	4618      	mov	r0, r3
 8016f92:	f7f9 fd8f 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016f96:	4603      	mov	r3, r0
 8016f98:	64fb      	str	r3, [r7, #76]	; 0x4c
  output_dims.c = depth;
 8016f9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016f9e:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_pool_params pool_params;
  pool_params.stride.h = params->stride_height;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	689b      	ldr	r3, [r3, #8]
 8016fa4:	633b      	str	r3, [r7, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	685b      	ldr	r3, [r3, #4]
 8016faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  pool_params.padding.h = data.padding.height;
 8016fac:	683b      	ldr	r3, [r7, #0]
 8016fae:	685b      	ldr	r3, [r3, #4]
 8016fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  pool_params.padding.w = data.padding.width;
 8016fb2:	683b      	ldr	r3, [r7, #0]
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	637b      	str	r3, [r7, #52]	; 0x34
  pool_params.activation.min = data.activation_min;
 8016fb8:	683b      	ldr	r3, [r7, #0]
 8016fba:	695b      	ldr	r3, [r3, #20]
 8016fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  pool_params.activation.max = data.activation_max;
 8016fbe:	683b      	ldr	r3, [r7, #0]
 8016fc0:	699b      	ldr	r3, [r3, #24]
 8016fc2:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims filter_dims;
  filter_dims.n = 1;
 8016fc4:	2301      	movs	r3, #1
 8016fc6:	61fb      	str	r3, [r7, #28]
  filter_dims.h = params->filter_height;
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	691b      	ldr	r3, [r3, #16]
 8016fcc:	623b      	str	r3, [r7, #32]
  filter_dims.w = params->filter_width;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	68db      	ldr	r3, [r3, #12]
 8016fd2:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.c = 1;
 8016fd4:	2301      	movs	r3, #1
 8016fd6:	62bb      	str	r3, [r7, #40]	; 0x28

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 8016fd8:	2300      	movs	r3, #0
 8016fda:	617b      	str	r3, [r7, #20]
  ctx.size = 0;
 8016fdc:	2300      	movs	r3, #0
 8016fde:	61bb      	str	r3, [r7, #24]
  if (data.buffer_idx > -1) {
 8016fe0:	683b      	ldr	r3, [r7, #0]
 8016fe2:	691b      	ldr	r3, [r3, #16]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	db08      	blt.n	8016ffa <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xec>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016fec:	683a      	ldr	r2, [r7, #0]
 8016fee:	6912      	ldr	r2, [r2, #16]
 8016ff0:	4611      	mov	r1, r2
 8016ff2:	68f8      	ldr	r0, [r7, #12]
 8016ff4:	4798      	blx	r3
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	617b      	str	r3, [r7, #20]
  }

  TFLITE_DCHECK_EQ(
 8016ffa:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8016ffe:	f7fa fb2b 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8017002:	4604      	mov	r4, r0
 8017004:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8017008:	f7fa fb35 	bl	8011676 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801700c:	4603      	mov	r3, r0
 801700e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8017012:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8017016:	f107 0014 	add.w	r0, r7, #20
 801701a:	9302      	str	r3, [sp, #8]
 801701c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017020:	9301      	str	r3, [sp, #4]
 8017022:	f107 031c 	add.w	r3, r7, #28
 8017026:	9300      	str	r3, [sp, #0]
 8017028:	4623      	mov	r3, r4
 801702a:	f00a fb26 	bl	802167a <arm_max_pool_s8>
 801702e:	4603      	mov	r3, r0
 8017030:	2b00      	cmp	r3, #0
 8017032:	d001      	beq.n	8017038 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x12a>
 8017034:	f00d ff43 	bl	8024ebe <abort>
                      tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
                      &output_dims,
                      tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 8017038:	2400      	movs	r4, #0
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801703a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801703e:	4618      	mov	r0, r3
 8017040:	f7f4 fde3 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8017044:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017048:	4618      	mov	r0, r3
 801704a:	f7f4 fdde 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 801704e:	4623      	mov	r3, r4
}
 8017050:	4618      	mov	r0, r3
 8017052:	379c      	adds	r7, #156	; 0x9c
 8017054:	46bd      	mov	sp, r7
 8017056:	bd90      	pop	{r4, r7, pc}

08017058 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8017058:	b580      	push	{r7, lr}
 801705a:	b084      	sub	sp, #16
 801705c:	af00      	add	r7, sp, #0
 801705e:	60f8      	str	r0, [r7, #12]
 8017060:	60b9      	str	r1, [r7, #8]
 8017062:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017068:	2b00      	cmp	r3, #0
 801706a:	d101      	bne.n	8017070 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x18>
 801706c:	f00d ff27 	bl	8024ebe <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017074:	2124      	movs	r1, #36	; 0x24
 8017076:	68f8      	ldr	r0, [r7, #12]
 8017078:	4798      	blx	r3
 801707a:	4603      	mov	r3, r0
}
 801707c:	4618      	mov	r0, r3
 801707e:	3710      	adds	r7, #16
 8017080:	46bd      	mov	sp, r7
 8017082:	bd80      	pop	{r7, pc}

08017084 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8017084:	b590      	push	{r4, r7, lr}
 8017086:	b08b      	sub	sp, #44	; 0x2c
 8017088:	af02      	add	r7, sp, #8
 801708a:	6078      	str	r0, [r7, #4]
 801708c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801708e:	683b      	ldr	r3, [r7, #0]
 8017090:	691b      	ldr	r3, [r3, #16]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d101      	bne.n	801709a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8017096:	f00d ff12 	bl	8024ebe <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801709a:	683b      	ldr	r3, [r7, #0]
 801709c:	695b      	ldr	r3, [r3, #20]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d101      	bne.n	80170a6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x22>
 80170a2:	f00d ff0c 	bl	8024ebe <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 80170a6:	683b      	ldr	r3, [r7, #0]
 80170a8:	691b      	ldr	r3, [r3, #16]
 80170aa:	61fb      	str	r3, [r7, #28]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 80170ac:	683b      	ldr	r3, [r7, #0]
 80170ae:	695b      	ldr	r3, [r3, #20]
 80170b0:	61bb      	str	r3, [r7, #24]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80170b2:	2200      	movs	r2, #0
 80170b4:	6839      	ldr	r1, [r7, #0]
 80170b6:	6878      	ldr	r0, [r7, #4]
 80170b8:	f7f3 fffc 	bl	800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80170bc:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 80170be:	697b      	ldr	r3, [r7, #20]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d10a      	bne.n	80170da <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x56>
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	695c      	ldr	r4, [r3, #20]
 80170c8:	4b18      	ldr	r3, [pc, #96]	; (801712c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 80170ca:	9300      	str	r3, [sp, #0]
 80170cc:	23f2      	movs	r3, #242	; 0xf2
 80170ce:	4a18      	ldr	r2, [pc, #96]	; (8017130 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
 80170d0:	4918      	ldr	r1, [pc, #96]	; (8017134 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 80170d2:	6878      	ldr	r0, [r7, #4]
 80170d4:	47a0      	blx	r4
 80170d6:	2301      	movs	r3, #1
 80170d8:	e023      	b.n	8017122 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x9e>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80170da:	2200      	movs	r2, #0
 80170dc:	6839      	ldr	r1, [r7, #0]
 80170de:	6878      	ldr	r0, [r7, #4]
 80170e0:	f7f3 fff8 	bl	800b0d4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80170e4:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, output != nullptr);
 80170e6:	693b      	ldr	r3, [r7, #16]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d10a      	bne.n	8017102 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	695c      	ldr	r4, [r3, #20]
 80170f0:	4b11      	ldr	r3, [pc, #68]	; (8017138 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 80170f2:	9300      	str	r3, [sp, #0]
 80170f4:	23f4      	movs	r3, #244	; 0xf4
 80170f6:	4a0e      	ldr	r2, [pc, #56]	; (8017130 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
 80170f8:	490e      	ldr	r1, [pc, #56]	; (8017134 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 80170fa:	6878      	ldr	r0, [r7, #4]
 80170fc:	47a0      	blx	r4
 80170fe:	2301      	movs	r3, #1
 8017100:	e00f      	b.n	8017122 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x9e>

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 8017102:	69fb      	ldr	r3, [r7, #28]
 8017104:	9300      	str	r3, [sp, #0]
 8017106:	693b      	ldr	r3, [r7, #16]
 8017108:	697a      	ldr	r2, [r7, #20]
 801710a:	69b9      	ldr	r1, [r7, #24]
 801710c:	6878      	ldr	r0, [r7, #4]
 801710e:	f7ff fd1d 	bl	8016b4c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 8017112:	4603      	mov	r3, r0
 8017114:	73fb      	strb	r3, [r7, #15]
 8017116:	7bfb      	ldrb	r3, [r7, #15]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d001      	beq.n	8017120 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x9c>
 801711c:	7bfb      	ldrb	r3, [r7, #15]
 801711e:	e000      	b.n	8017122 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x9e>

  return kTfLiteOk;
 8017120:	2300      	movs	r3, #0
}
 8017122:	4618      	mov	r0, r3
 8017124:	3724      	adds	r7, #36	; 0x24
 8017126:	46bd      	mov	sp, r7
 8017128:	bd90      	pop	{r4, r7, pc}
 801712a:	bf00      	nop
 801712c:	0802b678 	.word	0x0802b678
 8017130:	0802b618 	.word	0x0802b618
 8017134:	0802b660 	.word	0x0802b660
 8017138:	0802b68c 	.word	0x0802b68c

0801713c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 801713c:	b5b0      	push	{r4, r5, r7, lr}
 801713e:	b09a      	sub	sp, #104	; 0x68
 8017140:	af02      	add	r7, sp, #8
 8017142:	6078      	str	r0, [r7, #4]
 8017144:	6039      	str	r1, [r7, #0]
 8017146:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	691b      	ldr	r3, [r3, #16]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d101      	bne.n	8017154 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8017150:	f00d feb5 	bl	8024ebe <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8017154:	683b      	ldr	r3, [r7, #0]
 8017156:	695b      	ldr	r3, [r3, #20]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d101      	bne.n	8017160 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x24>
 801715c:	f00d feaf 	bl	8024ebe <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8017160:	683b      	ldr	r3, [r7, #0]
 8017162:	691b      	ldr	r3, [r3, #16]
 8017164:	65fb      	str	r3, [r7, #92]	; 0x5c
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8017166:	683b      	ldr	r3, [r7, #0]
 8017168:	695b      	ldr	r3, [r3, #20]
 801716a:	65bb      	str	r3, [r7, #88]	; 0x58

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801716c:	2200      	movs	r2, #0
 801716e:	6839      	ldr	r1, [r7, #0]
 8017170:	6878      	ldr	r0, [r7, #4]
 8017172:	f7f3 ff9f 	bl	800b0b4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8017176:	6578      	str	r0, [r7, #84]	; 0x54
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8017178:	2200      	movs	r2, #0
 801717a:	6839      	ldr	r1, [r7, #0]
 801717c:	6878      	ldr	r0, [r7, #4]
 801717e:	f7f3 ffa9 	bl	800b0d4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8017182:	6538      	str	r0, [r7, #80]	; 0x50

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 8017184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017186:	9300      	str	r3, [sp, #0]
 8017188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801718a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801718c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801718e:	6878      	ldr	r0, [r7, #4]
 8017190:	f7ff fcdc 	bl	8016b4c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 8017194:	4603      	mov	r3, r0
 8017196:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801719a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d002      	beq.n	80171a8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 80171a2:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 80171a6:	e064      	b.n	8017272 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>

  if (input->type == kTfLiteInt8) {
 80171a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171aa:	781b      	ldrb	r3, [r3, #0]
 80171ac:	2b09      	cmp	r3, #9
 80171ae:	d15f      	bne.n	8017270 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x134>
    RuntimeShape input_shape = GetTensorShape(input);
 80171b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80171b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80171b6:	4618      	mov	r0, r3
 80171b8:	f7f4 fda1 	bl	800bcfe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80171bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80171c0:	4618      	mov	r0, r3
 80171c2:	f7f4 fd38 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80171c6:	4603      	mov	r3, r0
 80171c8:	2b04      	cmp	r3, #4
 80171ca:	d001      	beq.n	80171d0 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x94>
 80171cc:	f00d fe77 	bl	8024ebe <abort>

    RuntimeShape output_shape = GetTensorShape(output);
 80171d0:	f107 030c 	add.w	r3, r7, #12
 80171d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80171d6:	4618      	mov	r0, r3
 80171d8:	f7f4 fd91 	bl	800bcfe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80171dc:	f107 030c 	add.w	r3, r7, #12
 80171e0:	4618      	mov	r0, r3
 80171e2:	f7f4 fd28 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80171e6:	4603      	mov	r3, r0
 80171e8:	2b04      	cmp	r3, #4
 80171ea:	d001      	beq.n	80171f0 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xb4>
 80171ec:	f00d fe67 	bl	8024ebe <abort>

    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80171f0:	f107 020c 	add.w	r2, r7, #12
 80171f4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80171f8:	2303      	movs	r3, #3
 80171fa:	2103      	movs	r1, #3
 80171fc:	f7fa fd20 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017200:	64b8      	str	r0, [r7, #72]	; 0x48
    const int output_width = output_shape.Dims(2);
 8017202:	f107 030c 	add.w	r3, r7, #12
 8017206:	2102      	movs	r1, #2
 8017208:	4618      	mov	r0, r3
 801720a:	f7f9 fc53 	bl	8010ab4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801720e:	6478      	str	r0, [r7, #68]	; 0x44

    const int32_t buffer_size =
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 8017210:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8017212:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017214:	f00a f904 	bl	8021420 <arm_avgpool_s8_get_buffer_size>
 8017218:	6438      	str	r0, [r7, #64]	; 0x40

    if (buffer_size > 0) {
 801721a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801721c:	2b00      	cmp	r3, #0
 801721e:	dd11      	ble.n	8017244 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017224:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017226:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017228:	3210      	adds	r2, #16
 801722a:	6878      	ldr	r0, [r7, #4]
 801722c:	4798      	blx	r3
 801722e:	4603      	mov	r3, r0
 8017230:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8017234:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017238:	2b00      	cmp	r3, #0
 801723a:	d007      	beq.n	801724c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x110>
 801723c:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8017240:	2500      	movs	r5, #0
 8017242:	e004      	b.n	801724e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x112>
          context, buffer_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 8017244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801724a:	611a      	str	r2, [r3, #16]
    RuntimeShape output_shape = GetTensorShape(output);
 801724c:	2501      	movs	r5, #1
 801724e:	f107 030c 	add.w	r3, r7, #12
 8017252:	4618      	mov	r0, r3
 8017254:	f7f4 fcd9 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
 8017258:	2d01      	cmp	r5, #1
 801725a:	d001      	beq.n	8017260 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x124>
 801725c:	2500      	movs	r5, #0
 801725e:	e000      	b.n	8017262 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x126>
    RuntimeShape input_shape = GetTensorShape(input);
 8017260:	2501      	movs	r5, #1
 8017262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017266:	4618      	mov	r0, r3
 8017268:	f7f4 fccf 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
 801726c:	2d01      	cmp	r5, #1
 801726e:	d100      	bne.n	8017272 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>
    }
  }
  return kTfLiteOk;
 8017270:	2400      	movs	r4, #0
 8017272:	4623      	mov	r3, r4
}
 8017274:	4618      	mov	r0, r3
 8017276:	3760      	adds	r7, #96	; 0x60
 8017278:	46bd      	mov	sp, r7
 801727a:	bdb0      	pop	{r4, r5, r7, pc}

0801727c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 801727c:	b590      	push	{r4, r7, lr}
 801727e:	b089      	sub	sp, #36	; 0x24
 8017280:	af02      	add	r7, sp, #8
 8017282:	6078      	str	r0, [r7, #4]
 8017284:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8017286:	683b      	ldr	r3, [r7, #0]
 8017288:	695b      	ldr	r3, [r3, #20]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d101      	bne.n	8017292 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801728e:	f00d fe16 	bl	8024ebe <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8017292:	683b      	ldr	r3, [r7, #0]
 8017294:	695b      	ldr	r3, [r3, #20]
 8017296:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 8017298:	683b      	ldr	r3, [r7, #0]
 801729a:	691b      	ldr	r3, [r3, #16]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d101      	bne.n	80172a4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x28>
 80172a0:	f00d fe0d 	bl	8024ebe <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 80172a4:	683b      	ldr	r3, [r7, #0]
 80172a6:	691b      	ldr	r3, [r3, #16]
 80172a8:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 80172aa:	2200      	movs	r2, #0
 80172ac:	6839      	ldr	r1, [r7, #0]
 80172ae:	6878      	ldr	r0, [r7, #4]
 80172b0:	f7f9 fcd4 	bl	8010c5c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80172b4:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 80172b6:	2200      	movs	r2, #0
 80172b8:	6839      	ldr	r1, [r7, #0]
 80172ba:	6878      	ldr	r0, [r7, #4]
 80172bc:	f7f9 fcde 	bl	8010c7c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80172c0:	60b8      	str	r0, [r7, #8]

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	7a1b      	ldrb	r3, [r3, #8]
 80172c6:	2b01      	cmp	r3, #1
 80172c8:	d002      	beq.n	80172d0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x54>
 80172ca:	2b09      	cmp	r3, #9
 80172cc:	d00b      	beq.n	80172e6 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6a>
 80172ce:	e015      	b.n	80172fc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x80>
    case kTfLiteFloat32:
      AverageEvalFloat(context, node, params, data, input, output);
 80172d0:	68bb      	ldr	r3, [r7, #8]
 80172d2:	9301      	str	r3, [sp, #4]
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	9300      	str	r3, [sp, #0]
 80172d8:	693b      	ldr	r3, [r7, #16]
 80172da:	697a      	ldr	r2, [r7, #20]
 80172dc:	6839      	ldr	r1, [r7, #0]
 80172de:	6878      	ldr	r0, [r7, #4]
 80172e0:	f7ff fca5 	bl	8016c2e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116AverageEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSG_>
      break;
 80172e4:	e018      	b.n	8017318 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x9c>
    case kTfLiteInt8:
      AverageEvalQuantized(context, node, params, data, input, output);
 80172e6:	68bb      	ldr	r3, [r7, #8]
 80172e8:	9301      	str	r3, [sp, #4]
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	9300      	str	r3, [sp, #0]
 80172ee:	693b      	ldr	r3, [r7, #16]
 80172f0:	697a      	ldr	r2, [r7, #20]
 80172f2:	6839      	ldr	r1, [r7, #0]
 80172f4:	6878      	ldr	r0, [r7, #4]
 80172f6:	f7ff fcf2 	bl	8016cde <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>
      break;
 80172fa:	e00d      	b.n	8017318 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x9c>
    default:
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	695c      	ldr	r4, [r3, #20]
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	7a1b      	ldrb	r3, [r3, #8]
 8017304:	4618      	mov	r0, r3
 8017306:	f7f1 f873 	bl	80083f0 <TfLiteTypeGetName>
 801730a:	4603      	mov	r3, r0
 801730c:	461a      	mov	r2, r3
 801730e:	4905      	ldr	r1, [pc, #20]	; (8017324 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
 8017310:	6878      	ldr	r0, [r7, #4]
 8017312:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8017314:	2301      	movs	r3, #1
 8017316:	e000      	b.n	801731a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x9e>
  }
  return kTfLiteOk;
 8017318:	2300      	movs	r3, #0
}
 801731a:	4618      	mov	r0, r3
 801731c:	371c      	adds	r7, #28
 801731e:	46bd      	mov	sp, r7
 8017320:	bd90      	pop	{r4, r7, pc}
 8017322:	bf00      	nop
 8017324:	0802b6a0 	.word	0x0802b6a0

08017328 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 8017328:	b590      	push	{r4, r7, lr}
 801732a:	b089      	sub	sp, #36	; 0x24
 801732c:	af02      	add	r7, sp, #8
 801732e:	6078      	str	r0, [r7, #4]
 8017330:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	695b      	ldr	r3, [r3, #20]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d101      	bne.n	801733e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801733a:	f00d fdc0 	bl	8024ebe <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 801733e:	683b      	ldr	r3, [r7, #0]
 8017340:	695b      	ldr	r3, [r3, #20]
 8017342:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 8017344:	683b      	ldr	r3, [r7, #0]
 8017346:	691b      	ldr	r3, [r3, #16]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d101      	bne.n	8017350 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x28>
 801734c:	f00d fdb7 	bl	8024ebe <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8017350:	683b      	ldr	r3, [r7, #0]
 8017352:	691b      	ldr	r3, [r3, #16]
 8017354:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8017356:	2200      	movs	r2, #0
 8017358:	6839      	ldr	r1, [r7, #0]
 801735a:	6878      	ldr	r0, [r7, #4]
 801735c:	f7f9 fc7e 	bl	8010c5c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8017360:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8017362:	2200      	movs	r2, #0
 8017364:	6839      	ldr	r1, [r7, #0]
 8017366:	6878      	ldr	r0, [r7, #4]
 8017368:	f7f9 fc88 	bl	8010c7c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801736c:	60b8      	str	r0, [r7, #8]

  switch (input->type) {
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	7a1b      	ldrb	r3, [r3, #8]
 8017372:	2b01      	cmp	r3, #1
 8017374:	d002      	beq.n	801737c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x54>
 8017376:	2b09      	cmp	r3, #9
 8017378:	d00b      	beq.n	8017392 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a>
 801737a:	e015      	b.n	80173a8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x80>
    case kTfLiteFloat32:
      MaxEvalFloat(context, node, params, data, input, output);
 801737c:	68bb      	ldr	r3, [r7, #8]
 801737e:	9301      	str	r3, [sp, #4]
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	9300      	str	r3, [sp, #0]
 8017384:	693b      	ldr	r3, [r7, #16]
 8017386:	697a      	ldr	r2, [r7, #20]
 8017388:	6839      	ldr	r1, [r7, #0]
 801738a:	6878      	ldr	r0, [r7, #4]
 801738c:	f7ff fd65 	bl	8016e5a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>
      break;
 8017390:	e018      	b.n	80173c4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9c>
    case kTfLiteInt8:
      MaxEvalInt8(context, node, params, data, input, output);
 8017392:	68bb      	ldr	r3, [r7, #8]
 8017394:	9301      	str	r3, [sp, #4]
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	9300      	str	r3, [sp, #0]
 801739a:	693b      	ldr	r3, [r7, #16]
 801739c:	697a      	ldr	r2, [r7, #20]
 801739e:	6839      	ldr	r1, [r7, #0]
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	f7ff fdb4 	bl	8016f0e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>
      break;
 80173a6:	e00d      	b.n	80173c4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9c>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	695c      	ldr	r4, [r3, #20]
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	7a1b      	ldrb	r3, [r3, #8]
 80173b0:	4618      	mov	r0, r3
 80173b2:	f7f1 f81d 	bl	80083f0 <TfLiteTypeGetName>
 80173b6:	4603      	mov	r3, r0
 80173b8:	461a      	mov	r2, r3
 80173ba:	4905      	ldr	r1, [pc, #20]	; (80173d0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
 80173bc:	6878      	ldr	r0, [r7, #4]
 80173be:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 80173c0:	2301      	movs	r3, #1
 80173c2:	e000      	b.n	80173c6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
  }
  return kTfLiteOk;
 80173c4:	2300      	movs	r3, #0
}
 80173c6:	4618      	mov	r0, r3
 80173c8:	371c      	adds	r7, #28
 80173ca:	46bd      	mov	sp, r7
 80173cc:	bd90      	pop	{r4, r7, pc}
 80173ce:	bf00      	nop
 80173d0:	0802b6cc 	.word	0x0802b6cc

080173d4 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>:

}  // namespace pooling

TfLiteRegistration Register_AVERAGE_POOL_2D() {
 80173d4:	b4b0      	push	{r4, r5, r7}
 80173d6:	b083      	sub	sp, #12
 80173d8:	af00      	add	r7, sp, #0
 80173da:	6078      	str	r0, [r7, #4]
          /*prepare=*/pooling::AveragePrepare,
          /*invoke=*/pooling::AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	4a07      	ldr	r2, [pc, #28]	; (80173fc <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv+0x28>)
 80173e0:	461c      	mov	r4, r3
 80173e2:	4615      	mov	r5, r2
 80173e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80173e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80173e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80173ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80173f0:	6878      	ldr	r0, [r7, #4]
 80173f2:	370c      	adds	r7, #12
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bcb0      	pop	{r4, r5, r7}
 80173f8:	4770      	bx	lr
 80173fa:	bf00      	nop
 80173fc:	0802b6f0 	.word	0x0802b6f0

08017400 <_ZN6tflite26generic_int16_table_lookupEsPKs>:

// int16_t func table lookup, e.g., lookup exp() and 1/(1+x) used in softmax
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 8017400:	b580      	push	{r7, lr}
 8017402:	b086      	sub	sp, #24
 8017404:	af00      	add	r7, sp, #0
 8017406:	4603      	mov	r3, r0
 8017408:	6039      	str	r1, [r7, #0]
 801740a:	80fb      	strh	r3, [r7, #6]
  // 512 base value, lut[513] only for calculate slope
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 801740c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017410:	11db      	asrs	r3, r3, #7
 8017412:	b29b      	uxth	r3, r3
 8017414:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017418:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 801741a:	8afb      	ldrh	r3, [r7, #22]
 801741c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017420:	d306      	bcc.n	8017430 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x30>
 8017422:	4b1b      	ldr	r3, [pc, #108]	; (8017490 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 8017424:	4a1b      	ldr	r2, [pc, #108]	; (8017494 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 8017426:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801742a:	481b      	ldr	r0, [pc, #108]	; (8017498 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 801742c:	f00d fd4e 	bl	8024ecc <__assert_func>
  int16_t offset = value & 0x7f;
 8017430:	88fb      	ldrh	r3, [r7, #6]
 8017432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017436:	82bb      	strh	r3, [r7, #20]

  // base and slope are Q0.15
  int16_t base = lut[index];
 8017438:	8afb      	ldrh	r3, [r7, #22]
 801743a:	005b      	lsls	r3, r3, #1
 801743c:	683a      	ldr	r2, [r7, #0]
 801743e:	4413      	add	r3, r2
 8017440:	881b      	ldrh	r3, [r3, #0]
 8017442:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 8017444:	8afb      	ldrh	r3, [r7, #22]
 8017446:	3301      	adds	r3, #1
 8017448:	005b      	lsls	r3, r3, #1
 801744a:	683a      	ldr	r2, [r7, #0]
 801744c:	4413      	add	r3, r2
 801744e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017452:	b29a      	uxth	r2, r3
 8017454:	8afb      	ldrh	r3, [r7, #22]
 8017456:	005b      	lsls	r3, r3, #1
 8017458:	6839      	ldr	r1, [r7, #0]
 801745a:	440b      	add	r3, r1
 801745c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017460:	b29b      	uxth	r3, r3
 8017462:	1ad3      	subs	r3, r2, r3
 8017464:	b29b      	uxth	r3, r3
 8017466:	823b      	strh	r3, [r7, #16]

  // Q0.15 * Q0.7 = Q0.22
  // Round and convert from Q0.22 to Q0.15
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 8017468:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801746c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017470:	fb02 f303 	mul.w	r3, r2, r3
 8017474:	3340      	adds	r3, #64	; 0x40
 8017476:	11db      	asrs	r3, r3, #7
 8017478:	60fb      	str	r3, [r7, #12]

  // Q0.15 + Q0.15
  return base + delta;
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	b29a      	uxth	r2, r3
 801747e:	8a7b      	ldrh	r3, [r7, #18]
 8017480:	4413      	add	r3, r2
 8017482:	b29b      	uxth	r3, r3
 8017484:	b21b      	sxth	r3, r3
}
 8017486:	4618      	mov	r0, r3
 8017488:	3718      	adds	r7, #24
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}
 801748e:	bf00      	nop
 8017490:	0802b730 	.word	0x0802b730
 8017494:	0802b75c 	.word	0x0802b75c
 8017498:	0802b7a0 	.word	0x0802b7a0

0801749c <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 801749c:	b580      	push	{r7, lr}
 801749e:	b088      	sub	sp, #32
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	60f8      	str	r0, [r7, #12]
 80174a4:	60b9      	str	r1, [r7, #8]
 80174a6:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	4618      	mov	r0, r3
 80174ac:	f7fb f93e 	bl	801272c <_ZN6tflite17CountLeadingZerosImEEiT_>
 80174b0:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 80174b2:	68ba      	ldr	r2, [r7, #8]
 80174b4:	69fb      	ldr	r3, [r7, #28]
 80174b6:	1ad2      	subs	r2, r2, r3
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 80174bc:	68fa      	ldr	r2, [r7, #12]
 80174be:	69fb      	ldr	r3, [r7, #28]
 80174c0:	fa02 f303 	lsl.w	r3, r2, r3
 80174c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 80174c8:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 80174ca:	69b8      	ldr	r0, [r7, #24]
 80174cc:	f7fb fa51 	bl	8012972 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80174d0:	4603      	mov	r3, r0
 80174d2:	4618      	mov	r0, r3
 80174d4:	f7fb fa5e 	bl	8012994 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 80174d8:	4603      	mov	r3, r0
 80174da:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 80174dc:	f107 0314 	add.w	r3, r7, #20
 80174e0:	4618      	mov	r0, r3
 80174e2:	f7fb f935 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80174e6:	4603      	mov	r3, r0
 80174e8:	681b      	ldr	r3, [r3, #0]
}
 80174ea:	4618      	mov	r0, r3
 80174ec:	3720      	adds	r7, #32
 80174ee:	46bd      	mov	sp, r7
 80174f0:	bd80      	pop	{r7, pc}

080174f2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 80174f2:	b580      	push	{r7, lr}
 80174f4:	ed2d 8b02 	vpush	{d8}
 80174f8:	b08e      	sub	sp, #56	; 0x38
 80174fa:	af00      	add	r7, sp, #0
 80174fc:	60f8      	str	r0, [r7, #12]
 80174fe:	60b9      	str	r1, [r7, #8]
 8017500:	607a      	str	r2, [r7, #4]
 8017502:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8017504:	68b8      	ldr	r0, [r7, #8]
 8017506:	f7f4 fb96 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801750a:	4603      	mov	r3, r0
 801750c:	3b01      	subs	r3, #1
 801750e:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8017510:	683a      	ldr	r2, [r7, #0]
 8017512:	6a39      	ldr	r1, [r7, #32]
 8017514:	68b8      	ldr	r0, [r7, #8]
 8017516:	f7fb f8da 	bl	80126ce <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801751a:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801751c:	6a3b      	ldr	r3, [r7, #32]
 801751e:	683a      	ldr	r2, [r7, #0]
 8017520:	6a39      	ldr	r1, [r7, #32]
 8017522:	68b8      	ldr	r0, [r7, #8]
 8017524:	f7fa fb8c 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017528:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 801752a:	2300      	movs	r3, #0
 801752c:	637b      	str	r3, [r7, #52]	; 0x34
 801752e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017530:	69fb      	ldr	r3, [r7, #28]
 8017532:	429a      	cmp	r2, r3
 8017534:	f280 8087 	bge.w	8017646 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 8017538:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 801753c:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 801753e:	2300      	movs	r3, #0
 8017540:	633b      	str	r3, [r7, #48]	; 0x30
 8017542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017544:	69bb      	ldr	r3, [r7, #24]
 8017546:	429a      	cmp	r2, r3
 8017548:	da15      	bge.n	8017576 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 801754a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801754c:	69ba      	ldr	r2, [r7, #24]
 801754e:	fb02 f203 	mul.w	r2, r2, r3
 8017552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017554:	4413      	add	r3, r2
 8017556:	009b      	lsls	r3, r3, #2
 8017558:	687a      	ldr	r2, [r7, #4]
 801755a:	441a      	add	r2, r3
 801755c:	f107 0310 	add.w	r3, r7, #16
 8017560:	4611      	mov	r1, r2
 8017562:	4618      	mov	r0, r3
 8017564:	f7f3 fc58 	bl	800ae18 <_ZSt3maxIfERKT_S2_S2_>
 8017568:	4603      	mov	r3, r0
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 801756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017570:	3301      	adds	r3, #1
 8017572:	633b      	str	r3, [r7, #48]	; 0x30
 8017574:	e7e5      	b.n	8017542 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 8017576:	f04f 0300 	mov.w	r3, #0
 801757a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 801757c:	2300      	movs	r3, #0
 801757e:	62bb      	str	r3, [r7, #40]	; 0x28
 8017580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017582:	69bb      	ldr	r3, [r7, #24]
 8017584:	429a      	cmp	r2, r3
 8017586:	da36      	bge.n	80175f6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8017588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801758a:	69ba      	ldr	r2, [r7, #24]
 801758c:	fb02 f203 	mul.w	r2, r2, r3
 8017590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017592:	4413      	add	r3, r2
 8017594:	009b      	lsls	r3, r3, #2
 8017596:	687a      	ldr	r2, [r7, #4]
 8017598:	4413      	add	r3, r2
 801759a:	ed93 7a00 	vldr	s14, [r3]
 801759e:	edd7 7a04 	vldr	s15, [r7, #16]
 80175a2:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175ac:	4610      	mov	r0, r2
 80175ae:	4619      	mov	r1, r3
 80175b0:	f7e9 fb16 	bl	8000be0 <__aeabi_d2f>
 80175b4:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 80175b8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80175bc:	eeb0 0a67 	vmov.f32	s0, s15
 80175c0:	f7fa ffd1 	bl	8012566 <_ZSt3expf>
 80175c4:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 80175c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175ca:	69ba      	ldr	r2, [r7, #24]
 80175cc:	fb02 f203 	mul.w	r2, r2, r3
 80175d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175d2:	4413      	add	r3, r2
 80175d4:	009b      	lsls	r3, r3, #2
 80175d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80175d8:	4413      	add	r3, r2
 80175da:	697a      	ldr	r2, [r7, #20]
 80175dc:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 80175de:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80175e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80175e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80175ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 80175ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f0:	3301      	adds	r3, #1
 80175f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80175f4:	e7c4      	b.n	8017580 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 80175f6:	2300      	movs	r3, #0
 80175f8:	627b      	str	r3, [r7, #36]	; 0x24
 80175fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175fc:	69bb      	ldr	r3, [r7, #24]
 80175fe:	429a      	cmp	r2, r3
 8017600:	da1d      	bge.n	801763e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 8017602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017604:	69ba      	ldr	r2, [r7, #24]
 8017606:	fb02 f203 	mul.w	r2, r2, r3
 801760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801760c:	4413      	add	r3, r2
 801760e:	009b      	lsls	r3, r3, #2
 8017610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017612:	4413      	add	r3, r2
 8017614:	edd3 6a00 	vldr	s13, [r3]
 8017618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801761a:	69ba      	ldr	r2, [r7, #24]
 801761c:	fb02 f203 	mul.w	r2, r2, r3
 8017620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017622:	4413      	add	r3, r2
 8017624:	009b      	lsls	r3, r3, #2
 8017626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017628:	4413      	add	r3, r2
 801762a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801762e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017632:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 8017636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017638:	3301      	adds	r3, #1
 801763a:	627b      	str	r3, [r7, #36]	; 0x24
 801763c:	e7dd      	b.n	80175fa <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 801763e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017640:	3301      	adds	r3, #1
 8017642:	637b      	str	r3, [r7, #52]	; 0x34
 8017644:	e773      	b.n	801752e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 8017646:	bf00      	nop
 8017648:	3738      	adds	r7, #56	; 0x38
 801764a:	46bd      	mov	sp, r7
 801764c:	ecbd 8b02 	vpop	{d8}
 8017650:	bd80      	pop	{r7, pc}
	...

08017654 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 8017654:	b580      	push	{r7, lr}
 8017656:	b08a      	sub	sp, #40	; 0x28
 8017658:	af00      	add	r7, sp, #0
 801765a:	60f8      	str	r0, [r7, #12]
 801765c:	60b9      	str	r1, [r7, #8]
 801765e:	607a      	str	r2, [r7, #4]
 8017660:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 8017662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017664:	687a      	ldr	r2, [r7, #4]
 8017666:	fb02 f203 	mul.w	r2, r2, r3
 801766a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801766c:	4413      	add	r3, r2
 801766e:	005b      	lsls	r3, r3, #1
 8017670:	68ba      	ldr	r2, [r7, #8]
 8017672:	4413      	add	r3, r2
 8017674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017678:	461a      	mov	r2, r3
 801767a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801767e:	1ad3      	subs	r3, r2, r3
 8017680:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	6899      	ldr	r1, [r3, #8]
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 801768a:	461a      	mov	r2, r3
 801768c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801768e:	f7f9 faa1 	bl	8010bd4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8017692:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 8017694:	6a3b      	ldr	r3, [r7, #32]
 8017696:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 801769a:	337f      	adds	r3, #127	; 0x7f
 801769c:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801769e:	4b12      	ldr	r3, [pc, #72]	; (80176e8 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 80176a0:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 80176a2:	f107 0214 	add.w	r2, r7, #20
 80176a6:	f107 0310 	add.w	r3, r7, #16
 80176aa:	4611      	mov	r1, r2
 80176ac:	4618      	mov	r0, r3
 80176ae:	f7f4 f94d 	bl	800b94c <_ZSt3maxIlERKT_S2_S2_>
 80176b2:	4602      	mov	r2, r0
 80176b4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80176b8:	61bb      	str	r3, [r7, #24]
 80176ba:	f107 0318 	add.w	r3, r7, #24
 80176be:	4619      	mov	r1, r3
 80176c0:	4610      	mov	r0, r2
 80176c2:	f7f4 f92f 	bl	800b924 <_ZSt3minIlERKT_S2_S2_>
 80176c6:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 80176c8:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 80176ca:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80176d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80176d4:	4611      	mov	r1, r2
 80176d6:	4618      	mov	r0, r3
 80176d8:	f7ff fe92 	bl	8017400 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 80176dc:	4603      	mov	r3, r0
}
 80176de:	4618      	mov	r0, r3
 80176e0:	3728      	adds	r7, #40	; 0x28
 80176e2:	46bd      	mov	sp, r7
 80176e4:	bd80      	pop	{r7, pc}
 80176e6:	bf00      	nop
 80176e8:	ffff8000 	.word	0xffff8000

080176ec <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 80176ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176f0:	b0a1      	sub	sp, #132	; 0x84
 80176f2:	af02      	add	r7, sp, #8
 80176f4:	6178      	str	r0, [r7, #20]
 80176f6:	6139      	str	r1, [r7, #16]
 80176f8:	60fa      	str	r2, [r7, #12]
 80176fa:	60bb      	str	r3, [r7, #8]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80176fc:	6938      	ldr	r0, [r7, #16]
 80176fe:	f7f4 fa9a 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017702:	4603      	mov	r3, r0
 8017704:	3b01      	subs	r3, #1
 8017706:	663b      	str	r3, [r7, #96]	; 0x60
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8017708:	68ba      	ldr	r2, [r7, #8]
 801770a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801770c:	6938      	ldr	r0, [r7, #16]
 801770e:	f7fa ffde 	bl	80126ce <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8017712:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8017714:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017716:	68ba      	ldr	r2, [r7, #8]
 8017718:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801771a:	6938      	ldr	r0, [r7, #16]
 801771c:	f7fa fa90 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017720:	65b8      	str	r0, [r7, #88]	; 0x58

  for (int i = 0; i < outer_size; ++i) {
 8017722:	2300      	movs	r3, #0
 8017724:	677b      	str	r3, [r7, #116]	; 0x74
 8017726:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801772a:	429a      	cmp	r2, r3
 801772c:	f280 8119 	bge.w	8017962 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x276>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 8017730:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017734:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 8017736:	2300      	movs	r3, #0
 8017738:	673b      	str	r3, [r7, #112]	; 0x70
 801773a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801773c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801773e:	429a      	cmp	r2, r3
 8017740:	da16      	bge.n	8017770 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x84>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8017742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017744:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017746:	fb02 f203 	mul.w	r2, r2, r3
 801774a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801774c:	4413      	add	r3, r2
 801774e:	005b      	lsls	r3, r3, #1
 8017750:	68fa      	ldr	r2, [r7, #12]
 8017752:	441a      	add	r2, r3
 8017754:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8017758:	4611      	mov	r1, r2
 801775a:	4618      	mov	r0, r3
 801775c:	f7fa ff13 	bl	8012586 <_ZSt3maxIsERKT_S2_S2_>
 8017760:	4603      	mov	r3, r0
 8017762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017766:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 8017768:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801776a:	3301      	adds	r3, #1
 801776c:	673b      	str	r3, [r7, #112]	; 0x70
 801776e:	e7e4      	b.n	801773a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x4e>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 8017770:	2300      	movs	r3, #0
 8017772:	66fb      	str	r3, [r7, #108]	; 0x6c
    int16_t* exp_results_Q015 = output_data + i * depth;
 8017774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017776:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017778:	fb02 f303 	mul.w	r3, r2, r3
 801777c:	005b      	lsls	r3, r3, #1
 801777e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8017782:	4413      	add	r3, r2
 8017784:	657b      	str	r3, [r7, #84]	; 0x54
    for (int c = 0; c < depth; ++c) {
 8017786:	2300      	movs	r3, #0
 8017788:	66bb      	str	r3, [r7, #104]	; 0x68
 801778a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801778c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801778e:	429a      	cmp	r2, r3
 8017790:	da1f      	bge.n	80177d2 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xe6>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8017792:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
      exp_results_Q015[c] =
 8017796:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017798:	005b      	lsls	r3, r3, #1
 801779a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801779c:	18d6      	adds	r6, r2, r3
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801779e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80177a0:	9301      	str	r3, [sp, #4]
 80177a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80177a4:	9300      	str	r3, [sp, #0]
 80177a6:	460b      	mov	r3, r1
 80177a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80177aa:	68f9      	ldr	r1, [r7, #12]
 80177ac:	6978      	ldr	r0, [r7, #20]
 80177ae:	f7ff ff51 	bl	8017654 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 80177b2:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 80177b4:	8033      	strh	r3, [r6, #0]
      sum_of_exps += exp_results_Q015[c];
 80177b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80177b8:	005b      	lsls	r3, r3, #1
 80177ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80177bc:	4413      	add	r3, r2
 80177be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80177c2:	461a      	mov	r2, r3
 80177c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80177c6:	4413      	add	r3, r2
 80177c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (int c = 0; c < depth; ++c) {
 80177ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80177cc:	3301      	adds	r3, #1
 80177ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80177d0:	e7db      	b.n	801778a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9e>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 80177d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80177d4:	4618      	mov	r0, r3
 80177d6:	f7fa ffa9 	bl	801272c <_ZN6tflite17CountLeadingZerosImEEiT_>
 80177da:	4603      	mov	r3, r0
 80177dc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 80177e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80177e2:	461a      	mov	r2, r3
 80177e4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80177e8:	f897 1053 	ldrb.w	r1, [r7, #83]	; 0x53
 80177ec:	3901      	subs	r1, #1
 80177ee:	f1a1 0620 	sub.w	r6, r1, #32
 80177f2:	f1c1 0020 	rsb	r0, r1, #32
 80177f6:	fa03 f501 	lsl.w	r5, r3, r1
 80177fa:	fa02 f606 	lsl.w	r6, r2, r6
 80177fe:	4335      	orrs	r5, r6
 8017800:	fa22 f000 	lsr.w	r0, r2, r0
 8017804:	4305      	orrs	r5, r0
 8017806:	fa02 f401 	lsl.w	r4, r2, r1
 801780a:	f514 5300 	adds.w	r3, r4, #8192	; 0x2000
 801780e:	603b      	str	r3, [r7, #0]
 8017810:	f145 0300 	adc.w	r3, r5, #0
 8017814:	607b      	str	r3, [r7, #4]
         (1 << 13)) >>
 8017816:	f04f 0200 	mov.w	r2, #0
 801781a:	f04f 0300 	mov.w	r3, #0
 801781e:	6839      	ldr	r1, [r7, #0]
 8017820:	0b8a      	lsrs	r2, r1, #14
 8017822:	6879      	ldr	r1, [r7, #4]
 8017824:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8017828:	6879      	ldr	r1, [r7, #4]
 801782a:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 801782c:	4613      	mov	r3, r2
 801782e:	64fb      	str	r3, [r7, #76]	; 0x4c
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 8017830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017832:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 8017836:	623b      	str	r3, [r7, #32]
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8017838:	4b4c      	ldr	r3, [pc, #304]	; (801796c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x280>)
 801783a:	62bb      	str	r3, [r7, #40]	; 0x28
                 static_cast<int32_t>(32767)));
 801783c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017840:	f107 0320 	add.w	r3, r7, #32
 8017844:	4611      	mov	r1, r2
 8017846:	4618      	mov	r0, r3
 8017848:	f7f4 f880 	bl	800b94c <_ZSt3maxIlERKT_S2_S2_>
 801784c:	4602      	mov	r2, r0
 801784e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017858:	4619      	mov	r1, r3
 801785a:	4610      	mov	r0, r2
 801785c:	f7f4 f862 	bl	800b924 <_ZSt3minIlERKT_S2_S2_>
 8017860:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8017862:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 8017864:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 8017868:	697b      	ldr	r3, [r7, #20]
 801786a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 801786c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8017870:	4611      	mov	r1, r2
 8017872:	4618      	mov	r0, r3
 8017874:	f7ff fdc4 	bl	8017400 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 8017878:	4603      	mov	r3, r0
 801787a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 801787e:	2300      	movs	r3, #0
 8017880:	667b      	str	r3, [r7, #100]	; 0x64
 8017882:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017884:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017886:	429a      	cmp	r2, r3
 8017888:	da67      	bge.n	801795a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x26e>
      uint8_t right_shift = 31 - headroom_plus_one;
 801788a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801788e:	f1c3 031f 	rsb	r3, r3, #31
 8017892:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      int64_t round = 1 << (right_shift - 1);
 8017896:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801789a:	3b01      	subs	r3, #1
 801789c:	2201      	movs	r2, #1
 801789e:	fa02 f303 	lsl.w	r3, r2, r3
 80178a2:	461a      	mov	r2, r3
 80178a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80178a8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80178ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80178ae:	005b      	lsls	r3, r3, #1
 80178b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80178b2:	4413      	add	r3, r2
 80178b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80178b8:	b218      	sxth	r0, r3
 80178ba:	ea4f 71e0 	mov.w	r1, r0, asr #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 80178be:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80178c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80178c6:	fb02 fc01 	mul.w	ip, r2, r1
 80178ca:	fb00 f603 	mul.w	r6, r0, r3
 80178ce:	4466      	add	r6, ip
 80178d0:	fba0 2302 	umull	r2, r3, r0, r2
 80178d4:	18f1      	adds	r1, r6, r3
 80178d6:	460b      	mov	r3, r1
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 80178d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80178dc:	eb12 0a00 	adds.w	sl, r2, r0
 80178e0:	eb43 0b01 	adc.w	fp, r3, r1
                        round) >>
                       right_shift;
 80178e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
                        round) >>
 80178e8:	f1c3 0120 	rsb	r1, r3, #32
 80178ec:	f1b3 0220 	subs.w	r2, r3, #32
 80178f0:	fa2a f803 	lsr.w	r8, sl, r3
 80178f4:	fa0b f101 	lsl.w	r1, fp, r1
 80178f8:	ea48 0801 	orr.w	r8, r8, r1
 80178fc:	d403      	bmi.n	8017906 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x21a>
 80178fe:	fa4b f202 	asr.w	r2, fp, r2
 8017902:	ea48 0802 	orr.w	r8, r8, r2
 8017906:	fa4b f903 	asr.w	r9, fp, r3
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801790a:	4643      	mov	r3, r8
 801790c:	61fb      	str	r3, [r7, #28]
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 801790e:	2300      	movs	r3, #0
 8017910:	633b      	str	r3, [r7, #48]	; 0x30
                   static_cast<int32_t>(32767)));
 8017912:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017916:	f107 031c 	add.w	r3, r7, #28
 801791a:	4611      	mov	r1, r2
 801791c:	4618      	mov	r0, r3
 801791e:	f7f4 f815 	bl	800b94c <_ZSt3maxIlERKT_S2_S2_>
 8017922:	4602      	mov	r2, r0
 8017924:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017928:	637b      	str	r3, [r7, #52]	; 0x34
 801792a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801792e:	4619      	mov	r1, r3
 8017930:	4610      	mov	r0, r2
 8017932:	f7f3 fff7 	bl	800b924 <_ZSt3minIlERKT_S2_S2_>
 8017936:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 8017938:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 801793a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801793c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801793e:	fb02 f203 	mul.w	r2, r2, r3
 8017942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017944:	4413      	add	r3, r2
 8017946:	005b      	lsls	r3, r3, #1
 8017948:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801794c:	4413      	add	r3, r2
 801794e:	b20a      	sxth	r2, r1
 8017950:	801a      	strh	r2, [r3, #0]
    for (int c = 0; c < depth; ++c) {
 8017952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017954:	3301      	adds	r3, #1
 8017956:	667b      	str	r3, [r7, #100]	; 0x64
 8017958:	e793      	b.n	8017882 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x196>
  for (int i = 0; i < outer_size; ++i) {
 801795a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801795c:	3301      	adds	r3, #1
 801795e:	677b      	str	r3, [r7, #116]	; 0x74
 8017960:	e6e1      	b.n	8017726 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x3a>
    }
  }
}
 8017962:	bf00      	nop
 8017964:	377c      	adds	r7, #124	; 0x7c
 8017966:	46bd      	mov	sp, r7
 8017968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801796c:	ffff8000 	.word	0xffff8000

08017970 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 8017970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017974:	b0b0      	sub	sp, #192	; 0xc0
 8017976:	af04      	add	r7, sp, #16
 8017978:	60f8      	str	r0, [r7, #12]
 801797a:	60b9      	str	r1, [r7, #8]
 801797c:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteInt8) {
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	7a1b      	ldrb	r3, [r3, #8]
 8017982:	2b09      	cmp	r3, #9
 8017984:	d17b      	bne.n	8017a7e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10e>
    if (output->type == kTfLiteInt16) {
 8017986:	68bb      	ldr	r3, [r7, #8]
 8017988:	7a1b      	ldrb	r3, [r3, #8]
 801798a:	2b07      	cmp	r3, #7
 801798c:	d127      	bne.n	80179de <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x6e>
      tflite::reference_ops::Softmax(
          op_data, tflite::micro::GetTensorShape(input),
 801798e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017992:	68f9      	ldr	r1, [r7, #12]
 8017994:	4618      	mov	r0, r3
 8017996:	f7fa fe0c 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 801799a:	68f8      	ldr	r0, [r7, #12]
 801799c:	f7f9 fe5c 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80179a0:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
 80179a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80179a6:	68b9      	ldr	r1, [r7, #8]
 80179a8:	4618      	mov	r0, r3
 80179aa:	f7fa fe02 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 80179ae:	68b8      	ldr	r0, [r7, #8]
 80179b0:	f7fb fe5b 	bl	801366a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 80179b4:	4602      	mov	r2, r0
 80179b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80179ba:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80179be:	9200      	str	r2, [sp, #0]
 80179c0:	4622      	mov	r2, r4
 80179c2:	6878      	ldr	r0, [r7, #4]
 80179c4:	f000 f916 	bl	8017bf4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 80179c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80179cc:	4618      	mov	r0, r3
 80179ce:	f7f4 f91c 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 80179d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80179d6:	4618      	mov	r0, r3
 80179d8:	f7f4 f917 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 80179dc:	e076      	b.n	8017acc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x15c>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 80179de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80179e2:	68f9      	ldr	r1, [r7, #12]
 80179e4:	4618      	mov	r0, r3
 80179e6:	f7fa fde4 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 80179ea:	f107 0314 	add.w	r3, r7, #20
 80179ee:	68b9      	ldr	r1, [r7, #8]
 80179f0:	4618      	mov	r0, r3
 80179f2:	f7fa fdde 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 80179f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80179fa:	4618      	mov	r0, r3
 80179fc:	f7f4 f91b 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017a00:	4603      	mov	r3, r0
 8017a02:	3b01      	subs	r3, #1
 8017a04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8017a08:	f107 0214 	add.w	r2, r7, #20
 8017a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017a10:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8017a14:	4618      	mov	r0, r3
 8017a16:	f7fa fe5a 	bl	80126ce <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8017a1a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8017a1e:	f107 0214 	add.w	r2, r7, #20
 8017a22:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017a2a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8017a2e:	f7fa f907 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017a32:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 8017a36:	68f8      	ldr	r0, [r7, #12]
 8017a38:	f7f9 fe0e 	bl	8011658 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8017a3c:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	689e      	ldr	r6, [r3, #8]
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 8017a4a:	68b8      	ldr	r0, [r7, #8]
 8017a4c:	f7f9 fe13 	bl	8011676 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8017a50:	4603      	mov	r3, r0
 8017a52:	9302      	str	r3, [sp, #8]
 8017a54:	9501      	str	r5, [sp, #4]
 8017a56:	9400      	str	r4, [sp, #0]
 8017a58:	4633      	mov	r3, r6
 8017a5a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8017a5e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8017a62:	4640      	mov	r0, r8
 8017a64:	f009 fed4 	bl	8021810 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 8017a68:	f107 0314 	add.w	r3, r7, #20
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	f7f4 f8cc 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 8017a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017a76:	4618      	mov	r0, r3
 8017a78:	f7f4 f8c7 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
}
 8017a7c:	e026      	b.n	8017acc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x15c>
        op_data, tflite::micro::GetTensorShape(input),
 8017a7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8017a82:	68f9      	ldr	r1, [r7, #12]
 8017a84:	4618      	mov	r0, r3
 8017a86:	f7fa fd94 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8017a8a:	68f8      	ldr	r0, [r7, #12]
 8017a8c:	f7fa fd48 	bl	8012520 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 8017a90:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 8017a92:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017a96:	68b9      	ldr	r1, [r7, #8]
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f7fa fd8a 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8017a9e:	68b8      	ldr	r0, [r7, #8]
 8017aa0:	f7fb fde3 	bl	801366a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8017aa4:	4602      	mov	r2, r0
 8017aa6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017aaa:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8017aae:	9200      	str	r2, [sp, #0]
 8017ab0:	4622      	mov	r2, r4
 8017ab2:	6878      	ldr	r0, [r7, #4]
 8017ab4:	f7ff fe1a 	bl	80176ec <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 8017ab8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017abc:	4618      	mov	r0, r3
 8017abe:	f7f4 f8a4 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 8017ac2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	f7f4 f89f 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
}
 8017acc:	bf00      	nop
 8017ace:	37b0      	adds	r7, #176	; 0xb0
 8017ad0:	46bd      	mov	sp, r7
 8017ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017ad8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8017ad8:	b5b0      	push	{r4, r5, r7, lr}
 8017ada:	b0a0      	sub	sp, #128	; 0x80
 8017adc:	af02      	add	r7, sp, #8
 8017ade:	6078      	str	r0, [r7, #4]
 8017ae0:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8017ae2:	2200      	movs	r2, #0
 8017ae4:	6839      	ldr	r1, [r7, #0]
 8017ae6:	6878      	ldr	r0, [r7, #4]
 8017ae8:	f7f9 f8b8 	bl	8010c5c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8017aec:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8017aee:	2200      	movs	r2, #0
 8017af0:	6839      	ldr	r1, [r7, #0]
 8017af2:	6878      	ldr	r0, [r7, #4]
 8017af4:	f7f9 f8c2 	bl	8010c7c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8017af8:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 8017afa:	683b      	ldr	r3, [r7, #0]
 8017afc:	691b      	ldr	r3, [r3, #16]
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d101      	bne.n	8017b06 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8017b02:	f00d f9dc 	bl	8024ebe <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 8017b06:	683b      	ldr	r3, [r7, #0]
 8017b08:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 8017b0a:	f107 0408 	add.w	r4, r7, #8
 8017b0e:	461d      	mov	r5, r3
 8017b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017b20:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 8017b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017b26:	7a1b      	ldrb	r3, [r3, #8]
 8017b28:	2b09      	cmp	r3, #9
 8017b2a:	d030      	beq.n	8017b8e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 8017b2c:	2b09      	cmp	r3, #9
 8017b2e:	dc37      	bgt.n	8017ba0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
 8017b30:	2b01      	cmp	r3, #1
 8017b32:	d002      	beq.n	8017b3a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x62>
 8017b34:	2b07      	cmp	r3, #7
 8017b36:	d02a      	beq.n	8017b8e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 8017b38:	e032      	b.n	8017ba0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
    case kTfLiteFloat32: {
      tflite::reference_ops::Softmax(
          data, tflite::micro::GetTensorShape(input),
 8017b3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017b3e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8017b40:	4618      	mov	r0, r3
 8017b42:	f7fa fd36 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8017b46:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8017b48:	f7f9 fd66 	bl	8011618 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8017b4c:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 8017b4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8017b52:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8017b54:	4618      	mov	r0, r3
 8017b56:	f7fa fd2c 	bl	80125b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8017b5a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8017b5c:	f7f9 fd6b 	bl	8011636 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8017b60:	4602      	mov	r2, r0
 8017b62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8017b66:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8017b6a:	f107 0008 	add.w	r0, r7, #8
 8017b6e:	9200      	str	r2, [sp, #0]
 8017b70:	4622      	mov	r2, r4
 8017b72:	f7ff fcbe 	bl	80174f2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 8017b76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	f7f4 f845 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
          data, tflite::micro::GetTensorShape(input),
 8017b80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017b84:	4618      	mov	r0, r3
 8017b86:	f7f4 f840 	bl	800bc0a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	e016      	b.n	8017bbc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    case kTfLiteInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, data);
 8017b8e:	f107 0308 	add.w	r3, r7, #8
 8017b92:	461a      	mov	r2, r3
 8017b94:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8017b96:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8017b98:	f7ff feea 	bl	8017970 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	e00d      	b.n	8017bbc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	695c      	ldr	r4, [r3, #20]
 8017ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017ba6:	7a1b      	ldrb	r3, [r3, #8]
 8017ba8:	4618      	mov	r0, r3
 8017baa:	f7f0 fc21 	bl	80083f0 <TfLiteTypeGetName>
 8017bae:	4602      	mov	r2, r0
 8017bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017bb2:	7a1b      	ldrb	r3, [r3, #8]
 8017bb4:	4903      	ldr	r1, [pc, #12]	; (8017bc4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>)
 8017bb6:	6878      	ldr	r0, [r7, #4]
 8017bb8:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8017bba:	2301      	movs	r3, #1
  }
}
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	3778      	adds	r7, #120	; 0x78
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8017bc4:	0802b814 	.word	0x0802b814

08017bc8 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 8017bc8:	b4b0      	push	{r4, r5, r7}
 8017bca:	b083      	sub	sp, #12
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	4a07      	ldr	r2, [pc, #28]	; (8017bf0 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8017bd4:	461c      	mov	r4, r3
 8017bd6:	4615      	mov	r5, r2
 8017bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017bdc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8017be0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8017be4:	6878      	ldr	r0, [r7, #4]
 8017be6:	370c      	adds	r7, #12
 8017be8:	46bd      	mov	sp, r7
 8017bea:	bcb0      	pop	{r4, r5, r7}
 8017bec:	4770      	bx	lr
 8017bee:	bf00      	nop
 8017bf0:	0802b830 	.word	0x0802b830

08017bf4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8017bf4:	b590      	push	{r4, r7, lr}
 8017bf6:	b09f      	sub	sp, #124	; 0x7c
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	60f8      	str	r0, [r7, #12]
 8017bfc:	60b9      	str	r1, [r7, #8]
 8017bfe:	607a      	str	r2, [r7, #4]
 8017c00:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	689b      	ldr	r3, [r3, #8]
 8017c06:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	68db      	ldr	r3, [r3, #12]
 8017c0c:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	699b      	ldr	r3, [r3, #24]
 8017c12:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8017c14:	68b8      	ldr	r0, [r7, #8]
 8017c16:	f7f4 f80e 	bl	800bc36 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	3b01      	subs	r3, #1
 8017c1e:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8017c20:	683a      	ldr	r2, [r7, #0]
 8017c22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017c24:	68b8      	ldr	r0, [r7, #8]
 8017c26:	f7fa fd52 	bl	80126ce <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8017c2a:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8017c2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017c2e:	683a      	ldr	r2, [r7, #0]
 8017c30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017c32:	68b8      	ldr	r0, [r7, #8]
 8017c34:	f7fa f804 	bl	8011c40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017c38:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	677b      	str	r3, [r7, #116]	; 0x74
 8017c3e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017c42:	429a      	cmp	r2, r3
 8017c44:	f280 80f0 	bge.w	8017e28 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8017c48:	2380      	movs	r3, #128	; 0x80
 8017c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8017c4e:	2300      	movs	r3, #0
 8017c50:	673b      	str	r3, [r7, #112]	; 0x70
 8017c52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c56:	429a      	cmp	r2, r3
 8017c58:	da17      	bge.n	8017c8a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8017c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017c5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017c5e:	fb02 f203 	mul.w	r2, r2, r3
 8017c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017c64:	4413      	add	r3, r2
 8017c66:	461a      	mov	r2, r3
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	441a      	add	r2, r3
 8017c6c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8017c70:	4611      	mov	r1, r2
 8017c72:	4618      	mov	r0, r3
 8017c74:	f7fb fafb 	bl	801326e <_ZSt3maxIaERKT_S2_S2_>
 8017c78:	4603      	mov	r3, r0
 8017c7a:	f993 3000 	ldrsb.w	r3, [r3]
 8017c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8017c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017c84:	3301      	adds	r3, #1
 8017c86:	673b      	str	r3, [r7, #112]	; 0x70
 8017c88:	e7e3      	b.n	8017c52 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8017c8a:	f000 f8d1 	bl	8017e30 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8017c8e:	4603      	mov	r3, r0
 8017c90:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8017c92:	2300      	movs	r3, #0
 8017c94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017c96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c9a:	429a      	cmp	r2, r3
 8017c9c:	da30      	bge.n	8017d00 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8017c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017ca0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017ca2:	fb02 f203 	mul.w	r2, r2, r3
 8017ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017ca8:	4413      	add	r3, r2
 8017caa:	461a      	mov	r2, r3
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	4413      	add	r3, r2
 8017cb0:	f993 3000 	ldrsb.w	r3, [r3]
 8017cb4:	461a      	mov	r2, r3
 8017cb6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8017cba:	1ad3      	subs	r3, r2, r3
 8017cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8017cbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017cc2:	429a      	cmp	r2, r3
 8017cc4:	db18      	blt.n	8017cf8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8017cc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017cc8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8017cca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8017ccc:	f7fc fbda 	bl	8014484 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8017cd0:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8017cd2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8017cd4:	f7fa febe 	bl	8012a54 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8017cd8:	4603      	mov	r3, r0
 8017cda:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8017cdc:	69f8      	ldr	r0, [r7, #28]
 8017cde:	f7fa fecb 	bl	8012a78 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	f7fb f80f 	bl	8012d08 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8017cea:	4603      	mov	r3, r0
 8017cec:	4619      	mov	r1, r3
 8017cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cf0:	f7fb f824 	bl	8012d3c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8017cf4:	4603      	mov	r3, r0
 8017cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8017cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017cfa:	3301      	adds	r3, #1
 8017cfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017cfe:	e7ca      	b.n	8017c96 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8017d00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017d04:	4618      	mov	r0, r3
 8017d06:	f7fb fa8a 	bl	801321e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8017d0a:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8017d12:	210c      	movs	r1, #12
 8017d14:	4618      	mov	r0, r3
 8017d16:	f7ff fbc1 	bl	801749c <_ZN6tflite13GetReciprocalEliPi>
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f7fa fe28 	bl	8012972 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8017d22:	4603      	mov	r3, r0
 8017d24:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8017d26:	2300      	movs	r3, #0
 8017d28:	66bb      	str	r3, [r7, #104]	; 0x68
 8017d2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	da76      	bge.n	8017e20 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8017d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017d34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017d36:	fb02 f203 	mul.w	r2, r2, r3
 8017d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017d3c:	4413      	add	r3, r2
 8017d3e:	461a      	mov	r2, r3
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	4413      	add	r3, r2
 8017d44:	f993 3000 	ldrsb.w	r3, [r3]
 8017d48:	461a      	mov	r2, r3
 8017d4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8017d4e:	1ad3      	subs	r3, r2, r3
 8017d50:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8017d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017d56:	429a      	cmp	r2, r3
 8017d58:	db50      	blt.n	8017dfc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8017d5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017d5c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8017d5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017d60:	f7fc fb90 	bl	8014484 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8017d64:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8017d66:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017d68:	f7fa fe74 	bl	8012a54 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8017d6c:	4603      	mov	r3, r0
 8017d6e:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8017d70:	69b8      	ldr	r0, [r7, #24]
 8017d72:	f7fa fe81 	bl	8012a78 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8017d76:	4603      	mov	r3, r0
 8017d78:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8017d7a:	6979      	ldr	r1, [r7, #20]
 8017d7c:	6a38      	ldr	r0, [r7, #32]
 8017d7e:	f7fb f9f9 	bl	8013174 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8017d82:	4603      	mov	r3, r0
 8017d84:	633b      	str	r3, [r7, #48]	; 0x30
 8017d86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f7fa fce0 	bl	8012750 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8017d90:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8017d92:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8017d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d96:	320f      	adds	r2, #15
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8017d98:	4611      	mov	r1, r2
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	f7f9 fa84 	bl	80112a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8017da0:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8017da2:	f7f3 f897 	bl	800aed4 <_ZNSt14numeric_limitsIsE3minEv>
 8017da6:	4603      	mov	r3, r0
 8017da8:	461a      	mov	r2, r3
            unsat_output +
 8017daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017dac:	4413      	add	r3, r2
        const int32_t shifted_output =
 8017dae:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8017db0:	f7f3 f89a 	bl	800aee8 <_ZNSt14numeric_limitsIsE3maxEv>
 8017db4:	4603      	mov	r3, r0
 8017db6:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8017db8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8017dbc:	f107 0310 	add.w	r3, r7, #16
 8017dc0:	4611      	mov	r1, r2
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	f7f3 fdae 	bl	800b924 <_ZSt3minIlERKT_S2_S2_>
 8017dc8:	4604      	mov	r4, r0
 8017dca:	f7f3 f883 	bl	800aed4 <_ZNSt14numeric_limitsIsE3minEv>
 8017dce:	4603      	mov	r3, r0
 8017dd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8017dd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017dd6:	4619      	mov	r1, r3
 8017dd8:	4620      	mov	r0, r4
 8017dda:	f7f3 fdb7 	bl	800b94c <_ZSt3maxIlERKT_S2_S2_>
 8017dde:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8017de0:	6819      	ldr	r1, [r3, #0]
 8017de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017de4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017de6:	fb02 f203 	mul.w	r2, r2, r3
 8017dea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017dec:	4413      	add	r3, r2
 8017dee:	005b      	lsls	r3, r3, #1
 8017df0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017df4:	4413      	add	r3, r2
 8017df6:	b20a      	sxth	r2, r1
 8017df8:	801a      	strh	r2, [r3, #0]
 8017dfa:	e00d      	b.n	8017e18 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8017dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017dfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017e00:	fb02 f203 	mul.w	r2, r2, r3
 8017e04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017e06:	4413      	add	r3, r2
 8017e08:	005b      	lsls	r3, r3, #1
 8017e0a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017e0e:	18d4      	adds	r4, r2, r3
 8017e10:	f7f3 f860 	bl	800aed4 <_ZNSt14numeric_limitsIsE3minEv>
 8017e14:	4603      	mov	r3, r0
 8017e16:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8017e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017e1a:	3301      	adds	r3, #1
 8017e1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8017e1e:	e784      	b.n	8017d2a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 8017e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017e22:	3301      	adds	r3, #1
 8017e24:	677b      	str	r3, [r7, #116]	; 0x74
 8017e26:	e70a      	b.n	8017c3e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8017e28:	bf00      	nop
 8017e2a:	377c      	adds	r7, #124	; 0x7c
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	bd90      	pop	{r4, r7, pc}

08017e30 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8017e30:	b580      	push	{r7, lr}
 8017e32:	af00      	add	r7, sp, #0
 8017e34:	2000      	movs	r0, #0
 8017e36:	f000 f803 	bl	8017e40 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	bd80      	pop	{r7, pc}

08017e40 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8017e40:	b590      	push	{r4, r7, lr}
 8017e42:	b085      	sub	sp, #20
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8017e48:	f107 030c 	add.w	r3, r7, #12
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	f7fb f9e6 	bl	801321e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8017e52:	4604      	mov	r4, r0
 8017e54:	6878      	ldr	r0, [r7, #4]
 8017e56:	f7f9 fdeb 	bl	8011a30 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8017e5a:	4603      	mov	r3, r0
 8017e5c:	6023      	str	r3, [r4, #0]
    return retval;
 8017e5e:	68fb      	ldr	r3, [r7, #12]
  }
 8017e60:	4618      	mov	r0, r3
 8017e62:	3714      	adds	r7, #20
 8017e64:	46bd      	mov	sp, r7
 8017e66:	bd90      	pop	{r4, r7, pc}

08017e68 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 8017e68:	b480      	push	{r7}
 8017e6a:	b083      	sub	sp, #12
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
 8017e70:	4a04      	ldr	r2, [pc, #16]	; (8017e84 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	601a      	str	r2, [r3, #0]
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	4618      	mov	r0, r3
 8017e7a:	370c      	adds	r7, #12
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e82:	4770      	bx	lr
 8017e84:	0802c240 	.word	0x0802c240

08017e88 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 8017e88:	b480      	push	{r7}
 8017e8a:	b083      	sub	sp, #12
 8017e8c:	af00      	add	r7, sp, #0
 8017e8e:	6078      	str	r0, [r7, #4]
 8017e90:	4a04      	ldr	r2, [pc, #16]	; (8017ea4 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	601a      	str	r2, [r3, #0]
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	4618      	mov	r0, r3
 8017e9a:	370c      	adds	r7, #12
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea2:	4770      	bx	lr
 8017ea4:	0802c240 	.word	0x0802c240

08017ea8 <_ZN6tflite13MemoryPlannerD0Ev>:
 8017ea8:	b580      	push	{r7, lr}
 8017eaa:	b082      	sub	sp, #8
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	6078      	str	r0, [r7, #4]
 8017eb0:	6878      	ldr	r0, [r7, #4]
 8017eb2:	f7ff ffe9 	bl	8017e88 <_ZN6tflite13MemoryPlannerD1Ev>
 8017eb6:	2104      	movs	r1, #4
 8017eb8:	6878      	ldr	r0, [r7, #4]
 8017eba:	f00c fd7a 	bl	80249b2 <_ZdlPvj>
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	3708      	adds	r7, #8
 8017ec4:	46bd      	mov	sp, r7
 8017ec6:	bd80      	pop	{r7, pc}

08017ec8 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 8017ec8:	b480      	push	{r7}
 8017eca:	b083      	sub	sp, #12
 8017ecc:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 8017ece:	2328      	movs	r3, #40	; 0x28
 8017ed0:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 8017ed2:	2328      	movs	r3, #40	; 0x28
  }
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	370c      	adds	r7, #12
 8017ed8:	46bd      	mov	sp, r7
 8017eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ede:	4770      	bx	lr

08017ee0 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
}  // namespace

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 8017ee0:	b480      	push	{r7}
 8017ee2:	b089      	sub	sp, #36	; 0x24
 8017ee4:	af00      	add	r7, sp, #0
 8017ee6:	60f8      	str	r0, [r7, #12]
 8017ee8:	60b9      	str	r1, [r7, #8]
 8017eea:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 8017eec:	2300      	movs	r3, #0
 8017eee:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8017ef0:	2301      	movs	r3, #1
 8017ef2:	61bb      	str	r3, [r7, #24]
 8017ef4:	69ba      	ldr	r2, [r7, #24]
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	429a      	cmp	r2, r3
 8017efa:	da4c      	bge.n	8017f96 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 8017efc:	69bb      	ldr	r3, [r7, #24]
 8017efe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017f02:	3b01      	subs	r3, #1
 8017f04:	009b      	lsls	r3, r3, #2
 8017f06:	68fa      	ldr	r2, [r7, #12]
 8017f08:	4413      	add	r3, r2
 8017f0a:	681a      	ldr	r2, [r3, #0]
 8017f0c:	69bb      	ldr	r3, [r7, #24]
 8017f0e:	009b      	lsls	r3, r3, #2
 8017f10:	68f9      	ldr	r1, [r7, #12]
 8017f12:	440b      	add	r3, r1
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	429a      	cmp	r2, r3
 8017f18:	da39      	bge.n	8017f8e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 8017f1a:	69bb      	ldr	r3, [r7, #24]
 8017f1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017f20:	3b01      	subs	r3, #1
 8017f22:	009b      	lsls	r3, r3, #2
 8017f24:	68fa      	ldr	r2, [r7, #12]
 8017f26:	4413      	add	r3, r2
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 8017f2c:	69bb      	ldr	r3, [r7, #24]
 8017f2e:	009b      	lsls	r3, r3, #2
 8017f30:	68fa      	ldr	r2, [r7, #12]
 8017f32:	441a      	add	r2, r3
 8017f34:	69bb      	ldr	r3, [r7, #24]
 8017f36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017f3a:	3b01      	subs	r3, #1
 8017f3c:	009b      	lsls	r3, r3, #2
 8017f3e:	68f9      	ldr	r1, [r7, #12]
 8017f40:	440b      	add	r3, r1
 8017f42:	6812      	ldr	r2, [r2, #0]
 8017f44:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 8017f46:	69bb      	ldr	r3, [r7, #24]
 8017f48:	009b      	lsls	r3, r3, #2
 8017f4a:	68fa      	ldr	r2, [r7, #12]
 8017f4c:	4413      	add	r3, r2
 8017f4e:	697a      	ldr	r2, [r7, #20]
 8017f50:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 8017f52:	69bb      	ldr	r3, [r7, #24]
 8017f54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017f58:	3b01      	subs	r3, #1
 8017f5a:	009b      	lsls	r3, r3, #2
 8017f5c:	68ba      	ldr	r2, [r7, #8]
 8017f5e:	4413      	add	r3, r2
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 8017f64:	69bb      	ldr	r3, [r7, #24]
 8017f66:	009b      	lsls	r3, r3, #2
 8017f68:	68ba      	ldr	r2, [r7, #8]
 8017f6a:	441a      	add	r2, r3
 8017f6c:	69bb      	ldr	r3, [r7, #24]
 8017f6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017f72:	3b01      	subs	r3, #1
 8017f74:	009b      	lsls	r3, r3, #2
 8017f76:	68b9      	ldr	r1, [r7, #8]
 8017f78:	440b      	add	r3, r1
 8017f7a:	6812      	ldr	r2, [r2, #0]
 8017f7c:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 8017f7e:	69bb      	ldr	r3, [r7, #24]
 8017f80:	009b      	lsls	r3, r3, #2
 8017f82:	68ba      	ldr	r2, [r7, #8]
 8017f84:	4413      	add	r3, r2
 8017f86:	693a      	ldr	r2, [r7, #16]
 8017f88:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 8017f8a:	2301      	movs	r3, #1
 8017f8c:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8017f8e:	69bb      	ldr	r3, [r7, #24]
 8017f90:	3301      	adds	r3, #1
 8017f92:	61bb      	str	r3, [r7, #24]
 8017f94:	e7ae      	b.n	8017ef4 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 8017f96:	7ffb      	ldrb	r3, [r7, #31]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d000      	beq.n	8017f9e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 8017f9c:	e7a6      	b.n	8017eec <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 8017f9e:	bf00      	nop
 8017fa0:	3724      	adds	r7, #36	; 0x24
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa8:	4770      	bx	lr
	...

08017fac <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 8017fac:	b590      	push	{r4, r7, lr}
 8017fae:	b087      	sub	sp, #28
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	60f8      	str	r0, [r7, #12]
 8017fb4:	60b9      	str	r1, [r7, #8]
 8017fb6:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	4618      	mov	r0, r3
 8017fbc:	f7ff ff54 	bl	8017e68 <_ZN6tflite13MemoryPlannerC1Ev>
 8017fc0:	4a22      	ldr	r2, [pc, #136]	; (801804c <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	601a      	str	r2, [r3, #0]
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	2200      	movs	r2, #0
 8017fca:	609a      	str	r2, [r3, #8]
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	2201      	movs	r2, #1
 8017fd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 8017fd4:	687c      	ldr	r4, [r7, #4]
 8017fd6:	f7ff ff77 	bl	8017ec8 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 8017fda:	4603      	mov	r3, r0
 8017fdc:	fbb4 f3f3 	udiv	r3, r4, r3
 8017fe0:	461a      	mov	r2, r3
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 8017fe6:	68bb      	ldr	r3, [r7, #8]
 8017fe8:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	697a      	ldr	r2, [r7, #20]
 8017fee:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	685b      	ldr	r3, [r3, #4]
 8017ff4:	011b      	lsls	r3, r3, #4
 8017ff6:	697a      	ldr	r2, [r7, #20]
 8017ff8:	4413      	add	r3, r2
 8017ffa:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	697a      	ldr	r2, [r7, #20]
 8018000:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	685b      	ldr	r3, [r3, #4]
 8018006:	009b      	lsls	r3, r3, #2
 8018008:	697a      	ldr	r2, [r7, #20]
 801800a:	4413      	add	r3, r2
 801800c:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	697a      	ldr	r2, [r7, #20]
 8018012:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	685b      	ldr	r3, [r3, #4]
 8018018:	009b      	lsls	r3, r3, #2
 801801a:	697a      	ldr	r2, [r7, #20]
 801801c:	4413      	add	r3, r2
 801801e:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	697a      	ldr	r2, [r7, #20]
 8018024:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 8018026:	68fb      	ldr	r3, [r7, #12]
 8018028:	685b      	ldr	r3, [r3, #4]
 801802a:	461a      	mov	r2, r3
 801802c:	4613      	mov	r3, r2
 801802e:	005b      	lsls	r3, r3, #1
 8018030:	4413      	add	r3, r2
 8018032:	009b      	lsls	r3, r3, #2
 8018034:	461a      	mov	r2, r3
 8018036:	697b      	ldr	r3, [r7, #20]
 8018038:	4413      	add	r3, r2
 801803a:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	697a      	ldr	r2, [r7, #20]
 8018040:	625a      	str	r2, [r3, #36]	; 0x24
}
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	4618      	mov	r0, r3
 8018046:	371c      	adds	r7, #28
 8018048:	46bd      	mov	sp, r7
 801804a:	bd90      	pop	{r4, r7, pc}
 801804c:	0802c220 	.word	0x0802c220

08018050 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8018050:	b580      	push	{r7, lr}
 8018052:	b082      	sub	sp, #8
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
 8018058:	4a05      	ldr	r2, [pc, #20]	; (8018070 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	601a      	str	r2, [r3, #0]
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	4618      	mov	r0, r3
 8018062:	f7ff ff11 	bl	8017e88 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	4618      	mov	r0, r3
 801806a:	3708      	adds	r7, #8
 801806c:	46bd      	mov	sp, r7
 801806e:	bd80      	pop	{r7, pc}
 8018070:	0802c220 	.word	0x0802c220

08018074 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8018074:	b580      	push	{r7, lr}
 8018076:	b082      	sub	sp, #8
 8018078:	af00      	add	r7, sp, #0
 801807a:	6078      	str	r0, [r7, #4]
}
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f7ff ffe7 	bl	8018050 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8018082:	212c      	movs	r1, #44	; 0x2c
 8018084:	6878      	ldr	r0, [r7, #4]
 8018086:	f00c fc94 	bl	80249b2 <_ZdlPvj>
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	4618      	mov	r0, r3
 801808e:	3708      	adds	r7, #8
 8018090:	46bd      	mov	sp, r7
 8018092:	bd80      	pop	{r7, pc}

08018094 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 8018094:	b580      	push	{r7, lr}
 8018096:	b086      	sub	sp, #24
 8018098:	af00      	add	r7, sp, #0
 801809a:	60f8      	str	r0, [r7, #12]
 801809c:	60b9      	str	r1, [r7, #8]
 801809e:	607a      	str	r2, [r7, #4]
 80180a0:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	689a      	ldr	r2, [r3, #8]
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	685b      	ldr	r3, [r3, #4]
 80180aa:	429a      	cmp	r2, r3
 80180ac:	db08      	blt.n	80180c0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	685b      	ldr	r3, [r3, #4]
 80180b2:	461a      	mov	r2, r3
 80180b4:	4913      	ldr	r1, [pc, #76]	; (8018104 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 80180b6:	68b8      	ldr	r0, [r7, #8]
 80180b8:	f7f0 fa16 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 80180bc:	2301      	movs	r3, #1
 80180be:	e01d      	b.n	80180fc <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 80180c0:	68fb      	ldr	r3, [r7, #12]
 80180c2:	68da      	ldr	r2, [r3, #12]
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	689b      	ldr	r3, [r3, #8]
 80180c8:	011b      	lsls	r3, r3, #4
 80180ca:	4413      	add	r3, r2
 80180cc:	617b      	str	r3, [r7, #20]
  current->size = size;
 80180ce:	697b      	ldr	r3, [r7, #20]
 80180d0:	687a      	ldr	r2, [r7, #4]
 80180d2:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 80180d4:	697b      	ldr	r3, [r7, #20]
 80180d6:	683a      	ldr	r2, [r7, #0]
 80180d8:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 80180da:	697b      	ldr	r3, [r7, #20]
 80180dc:	6a3a      	ldr	r2, [r7, #32]
 80180de:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 80180e0:	697b      	ldr	r3, [r7, #20]
 80180e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80180e6:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	689b      	ldr	r3, [r3, #8]
 80180ec:	1c5a      	adds	r2, r3, #1
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	2201      	movs	r2, #1
 80180f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 80180fa:	2300      	movs	r3, #0
}
 80180fc:	4618      	mov	r0, r3
 80180fe:	3718      	adds	r7, #24
 8018100:	46bd      	mov	sp, r7
 8018102:	bd80      	pop	{r7, pc}
 8018104:	0802b940 	.word	0x0802b940

08018108 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 8018108:	b590      	push	{r4, r7, lr}
 801810a:	b089      	sub	sp, #36	; 0x24
 801810c:	af02      	add	r7, sp, #8
 801810e:	60f8      	str	r0, [r7, #12]
 8018110:	60b9      	str	r1, [r7, #8]
 8018112:	607a      	str	r2, [r7, #4]
 8018114:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	68da      	ldr	r2, [r3, #12]
 801811a:	68fb      	ldr	r3, [r7, #12]
 801811c:	689b      	ldr	r3, [r3, #8]
 801811e:	011b      	lsls	r3, r3, #4
 8018120:	4413      	add	r3, r2
 8018122:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	3308      	adds	r3, #8
 801812a:	681c      	ldr	r4, [r3, #0]
 801812c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801812e:	9300      	str	r3, [sp, #0]
 8018130:	683b      	ldr	r3, [r7, #0]
 8018132:	687a      	ldr	r2, [r7, #4]
 8018134:	68b9      	ldr	r1, [r7, #8]
 8018136:	68f8      	ldr	r0, [r7, #12]
 8018138:	47a0      	blx	r4
 801813a:	4603      	mov	r3, r0
 801813c:	2b00      	cmp	r3, #0
 801813e:	bf14      	ite	ne
 8018140:	2301      	movne	r3, #1
 8018142:	2300      	moveq	r3, #0
 8018144:	b2db      	uxtb	r3, r3
 8018146:	2b00      	cmp	r3, #0
 8018148:	d001      	beq.n	801814e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 801814a:	2301      	movs	r3, #1
 801814c:	e003      	b.n	8018156 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 801814e:	697b      	ldr	r3, [r7, #20]
 8018150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018152:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 8018154:	2300      	movs	r3, #0
}
 8018156:	4618      	mov	r0, r3
 8018158:	371c      	adds	r7, #28
 801815a:	46bd      	mov	sp, r7
 801815c:	bd90      	pop	{r4, r7, pc}

0801815e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 801815e:	b480      	push	{r7}
 8018160:	b087      	sub	sp, #28
 8018162:	af00      	add	r7, sp, #0
 8018164:	60f8      	str	r0, [r7, #12]
 8018166:	60b9      	str	r1, [r7, #8]
 8018168:	607a      	str	r2, [r7, #4]
 801816a:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	68da      	ldr	r2, [r3, #12]
 8018170:	68bb      	ldr	r3, [r7, #8]
 8018172:	685b      	ldr	r3, [r3, #4]
 8018174:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 8018176:	4413      	add	r3, r2
 8018178:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 801817a:	697b      	ldr	r3, [r7, #20]
 801817c:	689b      	ldr	r3, [r3, #8]
 801817e:	683a      	ldr	r2, [r7, #0]
 8018180:	429a      	cmp	r2, r3
 8018182:	da01      	bge.n	8018188 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 8018184:	2300      	movs	r3, #0
 8018186:	e007      	b.n	8018198 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 8018188:	697b      	ldr	r3, [r7, #20]
 801818a:	68db      	ldr	r3, [r3, #12]
 801818c:	687a      	ldr	r2, [r7, #4]
 801818e:	429a      	cmp	r2, r3
 8018190:	dd01      	ble.n	8018196 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 8018192:	2300      	movs	r3, #0
 8018194:	e000      	b.n	8018198 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 8018196:	2301      	movs	r3, #1
}
 8018198:	4618      	mov	r0, r3
 801819a:	371c      	adds	r7, #28
 801819c:	46bd      	mov	sp, r7
 801819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a2:	4770      	bx	lr

080181a4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b086      	sub	sp, #24
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	60f8      	str	r0, [r7, #12]
 80181ac:	60b9      	str	r1, [r7, #8]
 80181ae:	607a      	str	r2, [r7, #4]
 80181b0:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 80181b2:	2300      	movs	r3, #0
 80181b4:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 80181b6:	68bb      	ldr	r3, [r7, #8]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d10b      	bne.n	80181d4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	699a      	ldr	r2, [r3, #24]
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	6a1b      	ldr	r3, [r3, #32]
 80181c4:	4619      	mov	r1, r3
 80181c6:	460b      	mov	r3, r1
 80181c8:	005b      	lsls	r3, r3, #1
 80181ca:	440b      	add	r3, r1
 80181cc:	009b      	lsls	r3, r3, #2
 80181ce:	4413      	add	r3, r2
 80181d0:	613b      	str	r3, [r7, #16]
 80181d2:	e011      	b.n	80181f8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 80181d4:	68bb      	ldr	r3, [r7, #8]
 80181d6:	689b      	ldr	r3, [r3, #8]
 80181d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80181dc:	d101      	bne.n	80181e2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 80181de:	2300      	movs	r3, #0
 80181e0:	e029      	b.n	8018236 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 80181e2:	68fb      	ldr	r3, [r7, #12]
 80181e4:	699a      	ldr	r2, [r3, #24]
 80181e6:	68bb      	ldr	r3, [r7, #8]
 80181e8:	689b      	ldr	r3, [r3, #8]
 80181ea:	4619      	mov	r1, r3
 80181ec:	460b      	mov	r3, r1
 80181ee:	005b      	lsls	r3, r3, #1
 80181f0:	440b      	add	r3, r1
 80181f2:	009b      	lsls	r3, r3, #2
 80181f4:	4413      	add	r3, r2
 80181f6:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 80181f8:	683b      	ldr	r3, [r7, #0]
 80181fa:	687a      	ldr	r2, [r7, #4]
 80181fc:	6939      	ldr	r1, [r7, #16]
 80181fe:	68f8      	ldr	r0, [r7, #12]
 8018200:	f7ff ffad 	bl	801815e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 8018204:	4603      	mov	r3, r0
 8018206:	2b00      	cmp	r3, #0
 8018208:	d002      	beq.n	8018210 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 801820a:	693b      	ldr	r3, [r7, #16]
 801820c:	617b      	str	r3, [r7, #20]
      break;
 801820e:	e011      	b.n	8018234 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 8018210:	693b      	ldr	r3, [r7, #16]
 8018212:	689b      	ldr	r3, [r3, #8]
 8018214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018218:	d00b      	beq.n	8018232 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	699a      	ldr	r2, [r3, #24]
 801821e:	693b      	ldr	r3, [r7, #16]
 8018220:	689b      	ldr	r3, [r3, #8]
 8018222:	4619      	mov	r1, r3
 8018224:	460b      	mov	r3, r1
 8018226:	005b      	lsls	r3, r3, #1
 8018228:	440b      	add	r3, r1
 801822a:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 801822c:	4413      	add	r3, r2
 801822e:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8018230:	e7e2      	b.n	80181f8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 8018232:	bf00      	nop
  } while (true);
  return result;
 8018234:	697b      	ldr	r3, [r7, #20]
}
 8018236:	4618      	mov	r0, r3
 8018238:	3718      	adds	r7, #24
 801823a:	46bd      	mov	sp, r7
 801823c:	bd80      	pop	{r7, pc}

0801823e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 801823e:	b580      	push	{r7, lr}
 8018240:	b098      	sub	sp, #96	; 0x60
 8018242:	af00      	add	r7, sp, #0
 8018244:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801824c:	f083 0301 	eor.w	r3, r3, #1
 8018250:	b2db      	uxtb	r3, r3
 8018252:	2b00      	cmp	r3, #0
 8018254:	f040 815f 	bne.w	8018516 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	689b      	ldr	r3, [r3, #8]
 801825c:	2b00      	cmp	r3, #0
 801825e:	f000 815a 	beq.w	8018516 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	2200      	movs	r2, #0
 8018266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	689b      	ldr	r3, [r3, #8]
 801826e:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 8018270:	2300      	movs	r3, #0
 8018272:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8018274:	2300      	movs	r3, #0
 8018276:	657b      	str	r3, [r7, #84]	; 0x54
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	689b      	ldr	r3, [r3, #8]
 801827c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801827e:	429a      	cmp	r2, r3
 8018280:	da4d      	bge.n	801831e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	68da      	ldr	r2, [r3, #12]
 8018286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018288:	011b      	lsls	r3, r3, #4
 801828a:	4413      	add	r3, r2
 801828c:	685b      	ldr	r3, [r3, #4]
 801828e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018292:	d11e      	bne.n	80182d2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 8018294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018296:	3b01      	subs	r3, #1
 8018298:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	68da      	ldr	r2, [r3, #12]
 801829e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80182a0:	011b      	lsls	r3, r3, #4
 80182a2:	441a      	add	r2, r3
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	6919      	ldr	r1, [r3, #16]
 80182a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80182aa:	009b      	lsls	r3, r3, #2
 80182ac:	440b      	add	r3, r1
 80182ae:	6812      	ldr	r2, [r2, #0]
 80182b0:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	695a      	ldr	r2, [r3, #20]
 80182b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80182b8:	009b      	lsls	r3, r3, #2
 80182ba:	4413      	add	r3, r2
 80182bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80182be:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80182c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80182c6:	009b      	lsls	r3, r3, #2
 80182c8:	4413      	add	r3, r2
 80182ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80182ce:	601a      	str	r2, [r3, #0]
 80182d0:	e021      	b.n	8018316 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	68da      	ldr	r2, [r3, #12]
 80182d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80182d8:	011b      	lsls	r3, r3, #4
 80182da:	441a      	add	r2, r3
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	6919      	ldr	r1, [r3, #16]
 80182e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80182e2:	009b      	lsls	r3, r3, #2
 80182e4:	440b      	add	r3, r1
 80182e6:	6812      	ldr	r2, [r2, #0]
 80182e8:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	695a      	ldr	r2, [r3, #20]
 80182ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80182f0:	009b      	lsls	r3, r3, #2
 80182f2:	4413      	add	r3, r2
 80182f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80182f6:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	68da      	ldr	r2, [r3, #12]
 80182fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80182fe:	011b      	lsls	r3, r3, #4
 8018300:	441a      	add	r2, r3
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8018306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018308:	009b      	lsls	r3, r3, #2
 801830a:	440b      	add	r3, r1
 801830c:	6852      	ldr	r2, [r2, #4]
 801830e:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 8018310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018312:	3301      	adds	r3, #1
 8018314:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8018316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018318:	3301      	adds	r3, #1
 801831a:	657b      	str	r3, [r7, #84]	; 0x54
 801831c:	e7ac      	b.n	8018278 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	691a      	ldr	r2, [r3, #16]
 8018322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018324:	009b      	lsls	r3, r3, #2
 8018326:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	695a      	ldr	r2, [r3, #20]
 801832c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801832e:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8018330:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8018336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018338:	1ad3      	subs	r3, r2, r3
 801833a:	461a      	mov	r2, r3
 801833c:	f7ff fdd0 	bl	8017ee0 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	2200      	movs	r2, #0
 8018344:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	2201      	movs	r2, #1
 801834a:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	699a      	ldr	r2, [r3, #24]
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	6a1b      	ldr	r3, [r3, #32]
 8018354:	4619      	mov	r1, r3
 8018356:	460b      	mov	r3, r1
 8018358:	005b      	lsls	r3, r3, #1
 801835a:	440b      	add	r3, r1
 801835c:	009b      	lsls	r3, r3, #2
 801835e:	4413      	add	r3, r2
 8018360:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 8018362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018368:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	695b      	ldr	r3, [r3, #20]
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 8018372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018376:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	68da      	ldr	r2, [r3, #12]
 801837c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801837e:	011b      	lsls	r3, r3, #4
 8018380:	4413      	add	r3, r2
 8018382:	685b      	ldr	r3, [r3, #4]
 8018384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018388:	d106      	bne.n	8018398 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801838e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018390:	009b      	lsls	r3, r3, #2
 8018392:	4413      	add	r3, r2
 8018394:	2200      	movs	r2, #0
 8018396:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801839c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801839e:	009b      	lsls	r3, r3, #2
 80183a0:	4413      	add	r3, r2
 80183a2:	681a      	ldr	r2, [r3, #0]
 80183a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80183a6:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 80183a8:	2301      	movs	r3, #1
 80183aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	689b      	ldr	r3, [r3, #8]
 80183b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80183b2:	429a      	cmp	r2, r3
 80183b4:	f280 80b0 	bge.w	8018518 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	695a      	ldr	r2, [r3, #20]
 80183bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80183be:	009b      	lsls	r3, r3, #2
 80183c0:	4413      	add	r3, r2
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	68da      	ldr	r2, [r3, #12]
 80183ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80183cc:	011b      	lsls	r3, r3, #4
 80183ce:	4413      	add	r3, r2
 80183d0:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 80183d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 80183d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183da:	689b      	ldr	r3, [r3, #8]
 80183dc:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 80183de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183e0:	68db      	ldr	r3, [r3, #12]
 80183e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 80183e4:	2300      	movs	r3, #0
 80183e6:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 80183e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183ea:	685b      	ldr	r3, [r3, #4]
 80183ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80183f0:	d12d      	bne.n	801844e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 80183f2:	2300      	movs	r3, #0
 80183f4:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 80183f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80183fc:	6878      	ldr	r0, [r7, #4]
 80183fe:	f7ff fed1 	bl	80181a4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 8018402:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 8018404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018406:	2b00      	cmp	r3, #0
 8018408:	d012      	beq.n	8018430 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	68da      	ldr	r2, [r3, #12]
 801840e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018410:	685b      	ldr	r3, [r3, #4]
 8018412:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 8018414:	4413      	add	r3, r2
 8018416:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 8018418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801841a:	681a      	ldr	r2, [r3, #0]
 801841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801841e:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 8018420:	4413      	add	r3, r2
 8018422:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 8018424:	6a3a      	ldr	r2, [r7, #32]
 8018426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018428:	429a      	cmp	r2, r3
 801842a:	dd01      	ble.n	8018430 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 801842c:	6a3b      	ldr	r3, [r7, #32]
 801842e:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 8018430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018432:	2b00      	cmp	r3, #0
 8018434:	d00f      	beq.n	8018456 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 8018436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018438:	681a      	ldr	r2, [r3, #0]
 801843a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801843c:	1ad3      	subs	r3, r2, r3
 801843e:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 8018440:	69fa      	ldr	r2, [r7, #28]
 8018442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018444:	429a      	cmp	r2, r3
 8018446:	da08      	bge.n	801845a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 8018448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801844a:	647b      	str	r3, [r7, #68]	; 0x44
      }
 801844c:	e7d3      	b.n	80183f6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 801844e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018450:	685b      	ldr	r3, [r3, #4]
 8018452:	64bb      	str	r3, [r7, #72]	; 0x48
 8018454:	e002      	b.n	801845c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 8018456:	bf00      	nop
 8018458:	e000      	b.n	801845c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 801845a:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018462:	009b      	lsls	r3, r3, #2
 8018464:	4413      	add	r3, r2
 8018466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018468:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	699a      	ldr	r2, [r3, #24]
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	69db      	ldr	r3, [r3, #28]
 8018472:	4619      	mov	r1, r3
 8018474:	460b      	mov	r3, r1
 8018476:	005b      	lsls	r3, r3, #1
 8018478:	440b      	add	r3, r1
 801847a:	009b      	lsls	r3, r3, #2
 801847c:	4413      	add	r3, r2
 801847e:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 8018480:	69bb      	ldr	r3, [r7, #24]
 8018482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018484:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 8018486:	69bb      	ldr	r3, [r7, #24]
 8018488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801848a:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	69db      	ldr	r3, [r3, #28]
 8018490:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	69db      	ldr	r3, [r3, #28]
 8018496:	1c5a      	adds	r2, r3, #1
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 801849c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80184a2:	429a      	cmp	r2, r3
 80184a4:	da09      	bge.n	80184ba <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 80184a6:	69bb      	ldr	r3, [r7, #24]
 80184a8:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	6a1a      	ldr	r2, [r3, #32]
 80184ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80184b0:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	697a      	ldr	r2, [r7, #20]
 80184b6:	621a      	str	r2, [r3, #32]
 80184b8:	e029      	b.n	801850e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 80184ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80184bc:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 80184be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184c0:	689b      	ldr	r3, [r3, #8]
 80184c2:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 80184c4:	693b      	ldr	r3, [r7, #16]
 80184c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80184ca:	d107      	bne.n	80184dc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 80184cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184ce:	697a      	ldr	r2, [r7, #20]
 80184d0:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 80184d2:	69bb      	ldr	r3, [r7, #24]
 80184d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80184d8:	609a      	str	r2, [r3, #8]
          break;
 80184da:	e018      	b.n	801850e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	6999      	ldr	r1, [r3, #24]
 80184e0:	693a      	ldr	r2, [r7, #16]
 80184e2:	4613      	mov	r3, r2
 80184e4:	005b      	lsls	r3, r3, #1
 80184e6:	4413      	add	r3, r2
 80184e8:	009b      	lsls	r3, r3, #2
 80184ea:	440b      	add	r3, r1
 80184ec:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80184f4:	429a      	cmp	r2, r3
 80184f6:	da07      	bge.n	8018508 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 80184f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184fa:	689a      	ldr	r2, [r3, #8]
 80184fc:	69bb      	ldr	r3, [r7, #24]
 80184fe:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 8018500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018502:	697a      	ldr	r2, [r7, #20]
 8018504:	609a      	str	r2, [r3, #8]
          break;
 8018506:	e002      	b.n	801850e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	643b      	str	r3, [r7, #64]	; 0x40
      }
 801850c:	e7d7      	b.n	80184be <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 801850e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018510:	3301      	adds	r3, #1
 8018512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018514:	e74a      	b.n	80183ac <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 8018516:	bf00      	nop
    }
  }
}
 8018518:	3760      	adds	r7, #96	; 0x60
 801851a:	46bd      	mov	sp, r7
 801851c:	bd80      	pop	{r7, pc}

0801851e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 801851e:	b580      	push	{r7, lr}
 8018520:	b086      	sub	sp, #24
 8018522:	af00      	add	r7, sp, #0
 8018524:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 8018526:	6878      	ldr	r0, [r7, #4]
 8018528:	f7ff fe89 	bl	801823e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	689b      	ldr	r3, [r3, #8]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d101      	bne.n	8018538 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 8018534:	2300      	movs	r3, #0
 8018536:	e035      	b.n	80185a4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	699a      	ldr	r2, [r3, #24]
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	6a1b      	ldr	r3, [r3, #32]
 8018540:	4619      	mov	r1, r3
 8018542:	460b      	mov	r3, r1
 8018544:	005b      	lsls	r3, r3, #1
 8018546:	440b      	add	r3, r1
 8018548:	009b      	lsls	r3, r3, #2
 801854a:	4413      	add	r3, r2
 801854c:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 801854e:	2300      	movs	r3, #0
 8018550:	613b      	str	r3, [r7, #16]
  while (entry) {
 8018552:	697b      	ldr	r3, [r7, #20]
 8018554:	2b00      	cmp	r3, #0
 8018556:	d024      	beq.n	80185a2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	68da      	ldr	r2, [r3, #12]
 801855c:	697b      	ldr	r3, [r7, #20]
 801855e:	685b      	ldr	r3, [r3, #4]
 8018560:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 8018562:	4413      	add	r3, r2
 8018564:	60fb      	str	r3, [r7, #12]
    const size_t current_size = entry->offset + requirements->size;
 8018566:	697b      	ldr	r3, [r7, #20]
 8018568:	681a      	ldr	r2, [r3, #0]
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	4413      	add	r3, r2
 8018570:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 8018572:	68ba      	ldr	r2, [r7, #8]
 8018574:	693b      	ldr	r3, [r7, #16]
 8018576:	429a      	cmp	r2, r3
 8018578:	d901      	bls.n	801857e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 801857a:	68bb      	ldr	r3, [r7, #8]
 801857c:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 801857e:	697b      	ldr	r3, [r7, #20]
 8018580:	689b      	ldr	r3, [r3, #8]
 8018582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018586:	d00b      	beq.n	80185a0 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	699a      	ldr	r2, [r3, #24]
 801858c:	697b      	ldr	r3, [r7, #20]
 801858e:	689b      	ldr	r3, [r3, #8]
 8018590:	4619      	mov	r1, r3
 8018592:	460b      	mov	r3, r1
 8018594:	005b      	lsls	r3, r3, #1
 8018596:	440b      	add	r3, r1
 8018598:	009b      	lsls	r3, r3, #2
 801859a:	4413      	add	r3, r2
 801859c:	617b      	str	r3, [r7, #20]
  while (entry) {
 801859e:	e7d8      	b.n	8018552 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 80185a0:	bf00      	nop
  }
  return max_size;
 80185a2:	693b      	ldr	r3, [r7, #16]
}
 80185a4:	4618      	mov	r0, r3
 80185a6:	3718      	adds	r7, #24
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}

080185ac <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 80185ac:	b480      	push	{r7}
 80185ae:	b083      	sub	sp, #12
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	6078      	str	r0, [r7, #4]
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	689b      	ldr	r3, [r3, #8]
 80185b8:	4618      	mov	r0, r3
 80185ba:	370c      	adds	r7, #12
 80185bc:	46bd      	mov	sp, r7
 80185be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185c2:	4770      	bx	lr

080185c4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b084      	sub	sp, #16
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	60f8      	str	r0, [r7, #12]
 80185cc:	60b9      	str	r1, [r7, #8]
 80185ce:	607a      	str	r2, [r7, #4]
 80185d0:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 80185d2:	68f8      	ldr	r0, [r7, #12]
 80185d4:	f7ff fe33 	bl	801823e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	db04      	blt.n	80185e8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	689b      	ldr	r3, [r3, #8]
 80185e2:	687a      	ldr	r2, [r7, #4]
 80185e4:	429a      	cmp	r2, r3
 80185e6:	db08      	blt.n	80185fa <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	689b      	ldr	r3, [r3, #8]
 80185ec:	687a      	ldr	r2, [r7, #4]
 80185ee:	4909      	ldr	r1, [pc, #36]	; (8018614 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 80185f0:	68b8      	ldr	r0, [r7, #8]
 80185f2:	f7ef ff79 	bl	80084e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 80185f6:	2301      	movs	r3, #1
 80185f8:	e008      	b.n	801860c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	009b      	lsls	r3, r3, #2
 8018602:	4413      	add	r3, r2
 8018604:	681a      	ldr	r2, [r3, #0]
 8018606:	683b      	ldr	r3, [r7, #0]
 8018608:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801860a:	2300      	movs	r3, #0
}
 801860c:	4618      	mov	r0, r3
 801860e:	3710      	adds	r7, #16
 8018610:	46bd      	mov	sp, r7
 8018612:	bd80      	pop	{r7, pc}
 8018614:	0802b9b4 	.word	0x0802b9b4

08018618 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b08e      	sub	sp, #56	; 0x38
 801861c:	af08      	add	r7, sp, #32
 801861e:	60f8      	str	r0, [r7, #12]
 8018620:	60b9      	str	r1, [r7, #8]
 8018622:	607a      	str	r2, [r7, #4]
 8018624:	603b      	str	r3, [r7, #0]
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
 8018626:	2300      	movs	r3, #0
 8018628:	75fb      	strb	r3, [r7, #23]
    if (output_dims->w % 4 != 0)
 801862a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801862c:	689b      	ldr	r3, [r3, #8]
 801862e:	f003 0303 	and.w	r3, r3, #3
 8018632:	2b00      	cmp	r3, #0
 8018634:	d002      	beq.n	801863c <arm_convolve_1_x_n_s8+0x24>
    {
        status = ARM_MATH_SIZE_MISMATCH;
 8018636:	23fd      	movs	r3, #253	; 0xfd
 8018638:	75fb      	strb	r3, [r7, #23]
        goto out;
 801863a:	e015      	b.n	8018668 <arm_convolve_1_x_n_s8+0x50>
        }
        output_data += (3 * output_ch);
    }

#else
    status = arm_convolve_s8(ctx,
 801863c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801863e:	9306      	str	r3, [sp, #24]
 8018640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018642:	9305      	str	r3, [sp, #20]
 8018644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018646:	9304      	str	r3, [sp, #16]
 8018648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801864a:	9303      	str	r3, [sp, #12]
 801864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801864e:	9302      	str	r3, [sp, #8]
 8018650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018652:	9301      	str	r3, [sp, #4]
 8018654:	6a3b      	ldr	r3, [r7, #32]
 8018656:	9300      	str	r3, [sp, #0]
 8018658:	683b      	ldr	r3, [r7, #0]
 801865a:	687a      	ldr	r2, [r7, #4]
 801865c:	68b9      	ldr	r1, [r7, #8]
 801865e:	68f8      	ldr	r0, [r7, #12]
 8018660:	f000 f87d 	bl	801875e <arm_convolve_s8>
 8018664:	4603      	mov	r3, r0
 8018666:	75fb      	strb	r3, [r7, #23]
                             output_data);
#endif

out:
    /* Return to application */
    return status;
 8018668:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801866c:	4618      	mov	r0, r3
 801866e:	3718      	adds	r7, #24
 8018670:	46bd      	mov	sp, r7
 8018672:	bd80      	pop	{r7, pc}

08018674 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 8018674:	b480      	push	{r7}
 8018676:	b083      	sub	sp, #12
 8018678:	af00      	add	r7, sp, #0
 801867a:	6078      	str	r0, [r7, #4]
 801867c:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	68db      	ldr	r3, [r3, #12]
 8018682:	683a      	ldr	r2, [r7, #0]
 8018684:	6892      	ldr	r2, [r2, #8]
 8018686:	fb02 f303 	mul.w	r3, r2, r3
 801868a:	683a      	ldr	r2, [r7, #0]
 801868c:	6852      	ldr	r2, [r2, #4]
 801868e:	fb02 f303 	mul.w	r3, r2, r3
 8018692:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 8018694:	4618      	mov	r0, r3
 8018696:	370c      	adds	r7, #12
 8018698:	46bd      	mov	sp, r7
 801869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801869e:	4770      	bx	lr

080186a0 <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
 80186a0:	b5b0      	push	{r4, r5, r7, lr}
 80186a2:	b092      	sub	sp, #72	; 0x48
 80186a4:	af0a      	add	r7, sp, #40	; 0x28
 80186a6:	60f8      	str	r0, [r7, #12]
 80186a8:	60b9      	str	r1, [r7, #8]
 80186aa:	607a      	str	r2, [r7, #4]
 80186ac:	603b      	str	r3, [r7, #0]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 80186ae:	683b      	ldr	r3, [r7, #0]
 80186b0:	68db      	ldr	r3, [r3, #12]
 80186b2:	f003 0303 	and.w	r3, r3, #3
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d10f      	bne.n	80186da <arm_convolve_1x1_s8_fast+0x3a>
 80186ba:	68bb      	ldr	r3, [r7, #8]
 80186bc:	691b      	ldr	r3, [r3, #16]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d10b      	bne.n	80186da <arm_convolve_1x1_s8_fast+0x3a>
 80186c2:	68bb      	ldr	r3, [r7, #8]
 80186c4:	695b      	ldr	r3, [r3, #20]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d107      	bne.n	80186da <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 80186ca:	68bb      	ldr	r3, [r7, #8]
 80186cc:	689b      	ldr	r3, [r3, #8]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 80186ce:	2b01      	cmp	r3, #1
 80186d0:	d103      	bne.n	80186da <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 80186d2:	68bb      	ldr	r3, [r7, #8]
 80186d4:	68db      	ldr	r3, [r3, #12]
 80186d6:	2b01      	cmp	r3, #1
 80186d8:	d002      	beq.n	80186e0 <arm_convolve_1x1_s8_fast+0x40>
    {
        return ARM_MATH_SIZE_MISMATCH;
 80186da:	f06f 0302 	mvn.w	r3, #2
 80186de:	e02f      	b.n	8018740 <arm_convolve_1x1_s8_fast+0xa0>
    }

#else
    /* Run the following code as reference implementation for Cortex-M processors with or without DSP extension */

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 80186e0:	683b      	ldr	r3, [r7, #0]
 80186e2:	689b      	ldr	r3, [r3, #8]
 80186e4:	683a      	ldr	r2, [r7, #0]
 80186e6:	6852      	ldr	r2, [r2, #4]
 80186e8:	fb02 f303 	mul.w	r3, r2, r3
 80186ec:	683a      	ldr	r2, [r7, #0]
 80186ee:	6812      	ldr	r2, [r2, #0]
 80186f0:	fb02 f303 	mul.w	r3, r2, r3
 80186f4:	61fb      	str	r3, [r7, #28]
    const int32_t rhs_rows = output_dims->c;
 80186f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186f8:	68db      	ldr	r3, [r3, #12]
 80186fa:	61bb      	str	r3, [r7, #24]
    const int32_t rhs_cols = input_dims->c;
 80186fc:	683b      	ldr	r3, [r7, #0]
 80186fe:	68db      	ldr	r3, [r3, #12]
 8018700:	617b      	str	r3, [r7, #20]

    arm_nn_mat_mult_nt_t_s8(input_data,
                            filter_data,
                            bias_data,
                            output_data,
                            quant_params->multiplier,
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	681b      	ldr	r3, [r3, #0]
                            quant_params->shift,
 8018706:	687a      	ldr	r2, [r7, #4]
 8018708:	6852      	ldr	r2, [r2, #4]
    arm_nn_mat_mult_nt_t_s8(input_data,
 801870a:	68b9      	ldr	r1, [r7, #8]
 801870c:	6809      	ldr	r1, [r1, #0]
 801870e:	68b8      	ldr	r0, [r7, #8]
 8018710:	6840      	ldr	r0, [r0, #4]
 8018712:	68bc      	ldr	r4, [r7, #8]
 8018714:	6a24      	ldr	r4, [r4, #32]
 8018716:	68bd      	ldr	r5, [r7, #8]
 8018718:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 801871a:	9508      	str	r5, [sp, #32]
 801871c:	9407      	str	r4, [sp, #28]
 801871e:	9006      	str	r0, [sp, #24]
 8018720:	9105      	str	r1, [sp, #20]
 8018722:	6979      	ldr	r1, [r7, #20]
 8018724:	9104      	str	r1, [sp, #16]
 8018726:	69b9      	ldr	r1, [r7, #24]
 8018728:	9103      	str	r1, [sp, #12]
 801872a:	69f9      	ldr	r1, [r7, #28]
 801872c:	9102      	str	r1, [sp, #8]
 801872e:	9201      	str	r2, [sp, #4]
 8018730:	9300      	str	r3, [sp, #0]
 8018732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018736:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801873a:	f005 f95a 	bl	801d9f2 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801873e:	2300      	movs	r3, #0
}
 8018740:	4618      	mov	r0, r3
 8018742:	3720      	adds	r7, #32
 8018744:	46bd      	mov	sp, r7
 8018746:	bdb0      	pop	{r4, r5, r7, pc}

08018748 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
 8018748:	b480      	push	{r7}
 801874a:	b083      	sub	sp, #12
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
    (void)input_dims;
    return 0;
 8018750:	2300      	movs	r3, #0
}
 8018752:	4618      	mov	r0, r3
 8018754:	370c      	adds	r7, #12
 8018756:	46bd      	mov	sp, r7
 8018758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801875c:	4770      	bx	lr

0801875e <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
 801875e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018762:	b0db      	sub	sp, #364	; 0x16c
 8018764:	af08      	add	r7, sp, #32
 8018766:	f107 040c 	add.w	r4, r7, #12
 801876a:	6020      	str	r0, [r4, #0]
 801876c:	f107 0008 	add.w	r0, r7, #8
 8018770:	6001      	str	r1, [r0, #0]
 8018772:	1d39      	adds	r1, r7, #4
 8018774:	600a      	str	r2, [r1, #0]
 8018776:	463a      	mov	r2, r7
 8018778:	6013      	str	r3, [r2, #0]
    (void)bias_dims;
    q15_t *buffer_a = (q15_t *)ctx->buf;
 801877a:	f107 030c 	add.w	r3, r7, #12
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    const uint16_t input_batches = input_dims->n;
 8018786:	463b      	mov	r3, r7
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
    const uint16_t input_x = input_dims->w;
 8018790:	463b      	mov	r3, r7
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	689b      	ldr	r3, [r3, #8]
 8018796:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
    const uint16_t input_y = input_dims->h;
 801879a:	463b      	mov	r3, r7
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	685b      	ldr	r3, [r3, #4]
 80187a0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
    const uint16_t input_ch = input_dims->c;
 80187a4:	463b      	mov	r3, r7
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	68db      	ldr	r3, [r3, #12]
 80187aa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
    const uint16_t kernel_x = filter_dims->w;
 80187ae:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80187b2:	689b      	ldr	r3, [r3, #8]
 80187b4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
    const uint16_t kernel_y = filter_dims->h;
 80187b8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80187bc:	685b      	ldr	r3, [r3, #4]
 80187be:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
    const uint16_t output_x = output_dims->w;
 80187c2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80187c6:	689b      	ldr	r3, [r3, #8]
 80187c8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    const uint16_t output_y = output_dims->h;
 80187cc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80187d0:	685b      	ldr	r3, [r3, #4]
 80187d2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    const uint16_t output_ch = output_dims->c;
 80187d6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80187da:	68db      	ldr	r3, [r3, #12]
 80187dc:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    const uint16_t pad_x = conv_params->padding.w;
 80187e0:	f107 0308 	add.w	r3, r7, #8
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	691b      	ldr	r3, [r3, #16]
 80187e8:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    const uint16_t pad_y = conv_params->padding.h;
 80187ec:	f107 0308 	add.w	r3, r7, #8
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	695b      	ldr	r3, [r3, #20]
 80187f4:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
    const uint16_t stride_x = conv_params->stride.w;
 80187f8:	f107 0308 	add.w	r3, r7, #8
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	689b      	ldr	r3, [r3, #8]
 8018800:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
    const uint16_t stride_y = conv_params->stride.h;
 8018804:	f107 0308 	add.w	r3, r7, #8
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	68db      	ldr	r3, [r3, #12]
 801880c:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    const int32_t input_offset = conv_params->input_offset;
 8018810:	f107 0308 	add.w	r3, r7, #8
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const int32_t out_offset = conv_params->output_offset;
 801881c:	f107 0308 	add.w	r3, r7, #8
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	685b      	ldr	r3, [r3, #4]
 8018824:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    const int32_t out_activation_min = conv_params->activation.min;
 8018828:	f107 0308 	add.w	r3, r7, #8
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	6a1b      	ldr	r3, [r3, #32]
 8018830:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    const int32_t out_activation_max = conv_params->activation.max;
 8018834:	f107 0308 	add.w	r3, r7, #8
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801883c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int32_t *output_mult = quant_params->multiplier;
 8018840:	1d3b      	adds	r3, r7, #4
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    int32_t *output_shift = quant_params->shift;
 801884a:	1d3b      	adds	r3, r7, #4
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	685b      	ldr	r3, [r3, #4]
 8018850:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 8018854:	2300      	movs	r3, #0
 8018856:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801885a:	e337      	b.n	8018ecc <arm_convolve_s8+0x76e>

#elif defined(ARM_MATH_DSP)
        int32_t i_out_y, i_out_x, i_ker_y, i_ker_x;

        /* Generate two columns from the input tensor a GEMM computation */
        q15_t *two_column_buf = buffer_a;
 801885c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018860:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        q7_t *out = output_data;
 8018864:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018868:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        /* This part implements the im2col function */
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 801886c:	2300      	movs	r3, #0
 801886e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8018872:	e0da      	b.n	8018a2a <arm_convolve_s8+0x2cc>
        {
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 8018874:	2300      	movs	r3, #0
 8018876:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801887a:	e0ca      	b.n	8018a12 <arm_convolve_s8+0x2b4>
            {
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 801887c:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8018880:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8018884:	fb02 f203 	mul.w	r2, r2, r3
 8018888:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 801888c:	1ad3      	subs	r3, r2, r3
 801888e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8018892:	e065      	b.n	8018960 <arm_convolve_s8+0x202>
                {
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 8018894:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8018898:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801889c:	fb02 f203 	mul.w	r2, r2, r3
 80188a0:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 80188a4:	1ad3      	subs	r3, r2, r3
 80188a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80188aa:	e044      	b.n	8018936 <arm_convolve_s8+0x1d8>
                         i_ker_x++)
                    {
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 80188ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	db0f      	blt.n	80188d4 <arm_convolve_s8+0x176>
 80188b4:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80188b8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80188bc:	429a      	cmp	r2, r3
 80188be:	da09      	bge.n	80188d4 <arm_convolve_s8+0x176>
 80188c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	db05      	blt.n	80188d4 <arm_convolve_s8+0x176>
 80188c8:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80188cc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80188d0:	429a      	cmp	r2, r3
 80188d2:	db09      	blt.n	80188e8 <arm_convolve_s8+0x18a>
                        {
                            /* Filling 0 for out-of-bound paddings */
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 80188d4:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80188d8:	005b      	lsls	r3, r3, #1
 80188da:	461a      	mov	r2, r3
 80188dc:	2100      	movs	r1, #0
 80188de:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80188e2:	f00c fb8f 	bl	8025004 <memset>
 80188e6:	e019      	b.n	801891c <arm_convolve_s8+0x1be>
                        }
                        else
                        {
                            /* Copying the pixel data to column */
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 80188e8:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80188ec:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80188f0:	fb02 f203 	mul.w	r2, r2, r3
 80188f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80188f8:	4413      	add	r3, r2
 80188fa:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80188fe:	fb02 f303 	mul.w	r3, r2, r3
 8018902:	461a      	mov	r2, r3
 8018904:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8018908:	1898      	adds	r0, r3, r2
 801890a:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 801890e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8018912:	b21b      	sxth	r3, r3
 8018914:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8018918:	f008 fb6f 	bl	8020ffa <arm_q7_to_q15_with_offset>
                                                      two_column_buf,
                                                      input_ch,
                                                      input_offset);
                        }
                        two_column_buf += input_ch;
 801891c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8018920:	005b      	lsls	r3, r3, #1
 8018922:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8018926:	4413      	add	r3, r2
 8018928:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                         i_ker_x++)
 801892c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8018930:	3301      	adds	r3, #1
 8018932:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 8018936:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 801893a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801893e:	fb02 f203 	mul.w	r2, r2, r3
 8018942:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8018946:	1ad2      	subs	r2, r2, r3
 8018948:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 801894c:	4413      	add	r3, r2
 801894e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8018952:	429a      	cmp	r2, r3
 8018954:	dbaa      	blt.n	80188ac <arm_convolve_s8+0x14e>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 8018956:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801895a:	3301      	adds	r3, #1
 801895c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8018960:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8018964:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8018968:	fb02 f203 	mul.w	r2, r2, r3
 801896c:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8018970:	1ad2      	subs	r2, r2, r3
 8018972:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8018976:	4413      	add	r3, r2
 8018978:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801897c:	429a      	cmp	r2, r3
 801897e:	db89      	blt.n	8018894 <arm_convolve_s8+0x136>
                    }
                }

                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 8018980:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8018984:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8018988:	fb02 f303 	mul.w	r3, r2, r3
 801898c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8018990:	fb02 f303 	mul.w	r3, r2, r3
 8018994:	009b      	lsls	r3, r3, #2
 8018996:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801899a:	4413      	add	r3, r2
 801899c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80189a0:	429a      	cmp	r2, r3
 80189a2:	d131      	bne.n	8018a08 <arm_convolve_s8+0x2aa>
                {
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 80189a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80189a8:	b21b      	sxth	r3, r3
 80189aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80189ae:	b212      	sxth	r2, r2
 80189b0:	f8b7 0110 	ldrh.w	r0, [r7, #272]	; 0x110
 80189b4:	f8b7 110c 	ldrh.w	r1, [r7, #268]	; 0x10c
 80189b8:	fb10 f101 	smulbb	r1, r0, r1
 80189bc:	b289      	uxth	r1, r1
 80189be:	f8b7 010e 	ldrh.w	r0, [r7, #270]	; 0x10e
 80189c2:	fb10 f101 	smulbb	r1, r0, r1
 80189c6:	b289      	uxth	r1, r1
 80189c8:	f8b7 4106 	ldrh.w	r4, [r7, #262]	; 0x106
 80189cc:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80189d0:	9006      	str	r0, [sp, #24]
 80189d2:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 80189d6:	9005      	str	r0, [sp, #20]
 80189d8:	9104      	str	r1, [sp, #16]
 80189da:	9203      	str	r2, [sp, #12]
 80189dc:	9302      	str	r3, [sp, #8]
 80189de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80189e2:	9301      	str	r3, [sp, #4]
 80189e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80189e8:	9300      	str	r3, [sp, #0]
 80189ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80189ee:	4622      	mov	r2, r4
 80189f0:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80189f4:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 80189f8:	f003 fcdb 	bl	801c3b2 <arm_nn_mat_mult_kernel_s8_s16>
 80189fc:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
                                                        input_ch * kernel_y * kernel_x,
                                                        bias_data,
                                                        out);

                    /* counter reset */
                    two_column_buf = buffer_a;
 8018a00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018a04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 8018a08:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8018a0c:	3301      	adds	r3, #1
 8018a0e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8018a12:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8018a16:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8018a1a:	429a      	cmp	r2, r3
 8018a1c:	f6ff af2e 	blt.w	801887c <arm_convolve_s8+0x11e>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 8018a20:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8018a24:	3301      	adds	r3, #1
 8018a26:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8018a2a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8018a2e:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8018a32:	429a      	cmp	r2, r3
 8018a34:	f6ff af1e 	blt.w	8018874 <arm_convolve_s8+0x116>
                }
            }
        }

        /* left-over because odd number of output pixels */
        if (two_column_buf != buffer_a)
 8018a38:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8018a3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018a40:	429a      	cmp	r2, r3
 8018a42:	f000 821e 	beq.w	8018e82 <arm_convolve_s8+0x724>
        {
            const q7_t *ker_a = filter_data;
 8018a46:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8018a4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            int i;

            for (i = 0; i < output_ch; i++)
 8018a4e:	2300      	movs	r3, #0
 8018a50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8018a54:	e20e      	b.n	8018e74 <arm_convolve_s8+0x716>
            {
                /* Load the accumulator with bias first */
                q31_t sum = 0;
 8018a56:	2300      	movs	r3, #0
 8018a58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                if (bias_data)
 8018a5c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d008      	beq.n	8018a76 <arm_convolve_s8+0x318>
                {
                    sum = bias_data[i];
 8018a64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8018a68:	009b      	lsls	r3, r3, #2
 8018a6a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8018a6e:	4413      	add	r3, r2
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                }

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;
 8018a76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018a7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8018a7e:	601a      	str	r2, [r3, #0]

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 8018a80:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8018a84:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8018a88:	fb02 f303 	mul.w	r3, r2, r3
 8018a8c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8018a90:	fb02 f303 	mul.w	r3, r2, r3
 8018a94:	109b      	asrs	r3, r3, #2
 8018a96:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

                while (col_count)
 8018a9a:	e0ea      	b.n	8018c72 <arm_convolve_s8+0x514>
 8018a9c:	f107 031c 	add.w	r3, r7, #28
 8018aa0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8018aa4:	601a      	str	r2, [r3, #0]
 8018aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8018aae:	f107 0320 	add.w	r3, r7, #32
 8018ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8018ab6:	f107 031c 	add.w	r3, r7, #28
 8018aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 8018abe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	461a      	mov	r2, r3
 8018ac8:	f107 0318 	add.w	r3, r7, #24
 8018acc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8018ace:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	1d1a      	adds	r2, r3, #4
 8018ad6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018ada:	601a      	str	r2, [r3, #0]

    return (val);
 8018adc:	f107 0318 	add.w	r3, r7, #24
 8018ae0:	681b      	ldr	r3, [r3, #0]
 * @brief read and expand one q7 word into two q15 words
 */

__STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
{
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8018ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8018ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018aee:	2308      	movs	r3, #8
 8018af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 8018af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018af8:	f003 031f 	and.w	r3, r3, #31
 8018afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (op2 == 0U)
 8018b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d102      	bne.n	8018b0e <arm_convolve_s8+0x3b0>
  {
    return op1;
 8018b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018b0c:	e005      	b.n	8018b1a <arm_convolve_s8+0x3bc>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 8018b0e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018b12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018b16:	fa62 f303 	ror.w	r3, r2, r3
 8018b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8018b1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018b22:	fa2f f383 	sxtb16	r3, r3
 8018b26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return(result);
 8018b2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    q31_t inAbuf2 = __SXTB16(inA);
 8018b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018b36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8018b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018b3e:	fa2f f383 	sxtb16	r3, r3
 8018b42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8018b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018b4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8018b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018b52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8018b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018b58:	67bb      	str	r3, [r7, #120]	; 0x78
 8018b5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018b5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8018b5e:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8018b62:	677b      	str	r3, [r7, #116]	; 0x74
 8018b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018b66:	461a      	mov	r2, r3
 8018b68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b6c:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8018b6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018b72:	673b      	str	r3, [r7, #112]	; 0x70
 8018b74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018b78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018b7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018b7e:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8018b82:	66bb      	str	r3, [r7, #104]	; 0x68
 8018b84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018b86:	461a      	mov	r2, r3
 8018b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018b8c:	601a      	str	r2, [r3, #0]
#else
    *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
    *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
#endif

    return source;
 8018b8e:	f107 031c 	add.w	r3, r7, #28
 8018b92:	681b      	ldr	r3, [r3, #0]
                {
                    q31_t ker_a1, ker_a2;
                    q31_t ip_b1, ip_b2;

                    ker_a = read_and_pad(ker_a, &ker_a1, &ker_a2);
 8018b94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8018b98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    memcpy(&val, *in_q15, 4);
 8018ba0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	461a      	mov	r2, r3
 8018baa:	f107 0314 	add.w	r3, r7, #20
 8018bae:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8018bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	1d1a      	adds	r2, r3, #4
 8018bb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018bbc:	601a      	str	r2, [r3, #0]
    return (val);
 8018bbe:	f107 0314 	add.w	r3, r7, #20
 8018bc2:	681b      	ldr	r3, [r3, #0]

                    ip_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 8018bc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                    sum = __SMLAD(ker_a1, ip_b1, sum);
 8018bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	4619      	mov	r1, r3
 8018bd0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8018bd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8018bd8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8018bdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8018be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018be4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018be8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018bec:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8018bf0:	fb23 1302 	smlad	r3, r3, r2, r1
 8018bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 8018bf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018bfc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8018c00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018c04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    memcpy(&val, *in_q15, 4);
 8018c08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	461a      	mov	r2, r3
 8018c12:	f107 0310 	add.w	r3, r7, #16
 8018c16:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8018c18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	1d1a      	adds	r2, r3, #4
 8018c20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018c24:	601a      	str	r2, [r3, #0]
    return (val);
 8018c26:	f107 0310 	add.w	r3, r7, #16
 8018c2a:	681b      	ldr	r3, [r3, #0]
                    ip_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 8018c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    sum = __SMLAD(ker_a2, ip_b2, sum);
 8018c30:	f107 0320 	add.w	r3, r7, #32
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	4619      	mov	r1, r3
 8018c38:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8018c3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8018c40:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8018c44:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8018c48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018c50:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8018c54:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8018c58:	fb23 1302 	smlad	r3, r3, r2, r1
 8018c5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 8018c60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018c64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                    col_count--;
 8018c68:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8018c6c:	3b01      	subs	r3, #1
 8018c6e:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (col_count)
 8018c72:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	f47f af10 	bne.w	8018a9c <arm_convolve_s8+0x33e>
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 8018c7c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8018c80:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8018c84:	fb12 f303 	smulbb	r3, r2, r3
 8018c88:	b29b      	uxth	r3, r3
 8018c8a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8018c8e:	fb12 f303 	smulbb	r3, r2, r3
 8018c92:	b29b      	uxth	r3, r3
 8018c94:	f003 0303 	and.w	r3, r3, #3
 8018c98:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (col_count)
 8018c9c:	e021      	b.n	8018ce2 <arm_convolve_s8+0x584>
                {
                    q7_t ker_a1 = *ker_a++;
 8018c9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8018ca2:	1c5a      	adds	r2, r3, #1
 8018ca4:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8018ca8:	781b      	ldrb	r3, [r3, #0]
 8018caa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
                    q15_t ip_b1 = *ip_as_col++;
 8018cae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	1c99      	adds	r1, r3, #2
 8018cb6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8018cba:	6011      	str	r1, [r2, #0]
 8018cbc:	881b      	ldrh	r3, [r3, #0]
 8018cbe:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
                    sum += ker_a1 * ip_b1;
 8018cc2:	f997 30e3 	ldrsb.w	r3, [r7, #227]	; 0xe3
 8018cc6:	f9b7 20e0 	ldrsh.w	r2, [r7, #224]	; 0xe0
 8018cca:	fb02 f303 	mul.w	r3, r2, r3
 8018cce:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8018cd2:	4413      	add	r3, r2
 8018cd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    col_count--;
 8018cd8:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8018cdc:	3b01      	subs	r3, #1
 8018cde:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (col_count)
 8018ce2:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d1d9      	bne.n	8018c9e <arm_convolve_s8+0x540>
                }

                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 8018cea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8018cee:	009b      	lsls	r3, r3, #2
 8018cf0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8018cf4:	4413      	add	r3, r2
 8018cf6:	681a      	ldr	r2, [r3, #0]
 8018cf8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8018cfc:	009b      	lsls	r3, r3, #2
 8018cfe:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8018d02:	440b      	add	r3, r1
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8018d0a:	6679      	str	r1, [r7, #100]	; 0x64
 8018d0c:	663a      	str	r2, [r7, #96]	; 0x60
 8018d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018d12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018d16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018d18:	fa02 f303 	lsl.w	r3, r2, r3
 8018d1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8018d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018d20:	657b      	str	r3, [r7, #84]	; 0x54
    q31_t result = 0;
 8018d22:	2300      	movs	r3, #0
 8018d24:	653b      	str	r3, [r7, #80]	; 0x50
    mult.word.low = 1 << 30;
 8018d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018d2e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8018d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018d34:	2200      	movs	r2, #0
 8018d36:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8018d38:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8018d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018d3e:	4618      	mov	r0, r3
 8018d40:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8018d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018d46:	461a      	mov	r2, r3
 8018d48:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8018d4c:	fb02 fc01 	mul.w	ip, r2, r1
 8018d50:	fb00 f603 	mul.w	r6, r0, r3
 8018d54:	4466      	add	r6, ip
 8018d56:	fba0 2302 	umull	r2, r3, r0, r2
 8018d5a:	18f1      	adds	r1, r6, r3
 8018d5c:	460b      	mov	r3, r1
 8018d5e:	eb14 0802 	adds.w	r8, r4, r2
 8018d62:	eb45 0903 	adc.w	r9, r5, r3
 8018d66:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
    result = (int32_t)(mult.long_long >> 31);
 8018d6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8018d6e:	f04f 0200 	mov.w	r2, #0
 8018d72:	f04f 0300 	mov.w	r3, #0
 8018d76:	0fc2      	lsrs	r2, r0, #31
 8018d78:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8018d7c:	17cb      	asrs	r3, r1, #31
 8018d7e:	4613      	mov	r3, r2
 8018d80:	653b      	str	r3, [r7, #80]	; 0x50
    return result;
 8018d82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	dc02      	bgt.n	8018d90 <arm_convolve_s8+0x632>
 8018d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018d8c:	425b      	negs	r3, r3
 8018d8e:	e000      	b.n	8018d92 <arm_convolve_s8+0x634>
 8018d90:	2300      	movs	r3, #0
 8018d92:	64fa      	str	r2, [r7, #76]	; 0x4c
 8018d94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018d98:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018d9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018d9e:	2200      	movs	r2, #0
 8018da0:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018da2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018da6:	2201      	movs	r2, #1
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	409a      	lsls	r2, r3
 8018dac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018db0:	3a01      	subs	r2, #1
 8018db2:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8018db4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018db8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018dbc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018dbe:	6812      	ldr	r2, [r2, #0]
 8018dc0:	400a      	ands	r2, r1
 8018dc2:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8018dc4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018dc8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018dcc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018dce:	6812      	ldr	r2, [r2, #0]
 8018dd0:	fa41 f202 	asr.w	r2, r1, r2
 8018dd4:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8018dd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018dda:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018dde:	6812      	ldr	r2, [r2, #0]
 8018de0:	1052      	asrs	r2, r2, #1
 8018de2:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8018de4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	da06      	bge.n	8018dfc <arm_convolve_s8+0x69e>
        threshold++;
 8018dee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018df2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8018df6:	6812      	ldr	r2, [r2, #0]
 8018df8:	3201      	adds	r2, #1
 8018dfa:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8018dfc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8018e00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018e04:	6812      	ldr	r2, [r2, #0]
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	429a      	cmp	r2, r3
 8018e0a:	dd06      	ble.n	8018e1a <arm_convolve_s8+0x6bc>
        result++;
 8018e0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018e10:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8018e14:	6812      	ldr	r2, [r2, #0]
 8018e16:	3201      	adds	r2, #1
 8018e18:	601a      	str	r2, [r3, #0]
    return result;
 8018e1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018e1e:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018e20:	bf00      	nop
 8018e22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                sum += out_offset;
 8018e26:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8018e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018e2e:	4413      	add	r3, r2
 8018e30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                sum = MAX(sum, out_activation_min);
 8018e34:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8018e38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8018e3c:	4293      	cmp	r3, r2
 8018e3e:	bfb8      	it	lt
 8018e40:	4613      	movlt	r3, r2
 8018e42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                sum = MIN(sum, out_activation_max);
 8018e46:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8018e4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8018e4e:	4293      	cmp	r3, r2
 8018e50:	bfa8      	it	ge
 8018e52:	4613      	movge	r3, r2
 8018e54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                *out++ = (q7_t)sum;
 8018e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8018e5c:	1c5a      	adds	r2, r3, #1
 8018e5e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8018e62:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8018e66:	b252      	sxtb	r2, r2
 8018e68:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_ch; i++)
 8018e6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8018e6e:	3301      	adds	r3, #1
 8018e70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8018e74:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8018e78:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8018e7c:	429a      	cmp	r2, r3
 8018e7e:	f6ff adea 	blt.w	8018a56 <arm_convolve_s8+0x2f8>
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 8018e82:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8018e86:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 8018e8a:	fb02 f303 	mul.w	r3, r2, r3
 8018e8e:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8018e92:	fb02 f303 	mul.w	r3, r2, r3
 8018e96:	461a      	mov	r2, r3
 8018e98:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8018e9c:	4413      	add	r3, r2
 8018e9e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
        output_data += (output_x * output_y * output_ch);
 8018ea2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8018ea6:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8018eaa:	fb02 f303 	mul.w	r3, r2, r3
 8018eae:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8018eb2:	fb02 f303 	mul.w	r3, r2, r3
 8018eb6:	461a      	mov	r2, r3
 8018eb8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018ebc:	4413      	add	r3, r2
 8018ebe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 8018ec2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8018ec6:	3301      	adds	r3, #1
 8018ec8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8018ecc:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8018ed0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8018ed4:	429a      	cmp	r2, r3
 8018ed6:	f6ff acc1 	blt.w	801885c <arm_convolve_s8+0xfe>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8018eda:	2300      	movs	r3, #0
}
 8018edc:	4618      	mov	r0, r3
 8018ede:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8018ee2:	46bd      	mov	sp, r7
 8018ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08018ee8 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 8018ee8:	b480      	push	{r7}
 8018eea:	b083      	sub	sp, #12
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
 8018ef0:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	68db      	ldr	r3, [r3, #12]
 8018ef6:	683a      	ldr	r2, [r7, #0]
 8018ef8:	6892      	ldr	r2, [r2, #8]
 8018efa:	fb02 f303 	mul.w	r3, r2, r3
 8018efe:	683a      	ldr	r2, [r7, #0]
 8018f00:	6852      	ldr	r2, [r2, #4]
 8018f02:	fb02 f303 	mul.w	r3, r2, r3
 8018f06:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 8018f08:	4618      	mov	r0, r3
 8018f0a:	370c      	adds	r7, #12
 8018f0c:	46bd      	mov	sp, r7
 8018f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f12:	4770      	bx	lr

08018f14 <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
 8018f14:	b580      	push	{r7, lr}
 8018f16:	b08c      	sub	sp, #48	; 0x30
 8018f18:	af08      	add	r7, sp, #32
 8018f1a:	60f8      	str	r0, [r7, #12]
 8018f1c:	60b9      	str	r1, [r7, #8]
 8018f1e:	607a      	str	r2, [r7, #4]
 8018f20:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8018f22:	68bb      	ldr	r3, [r7, #8]
 8018f24:	691b      	ldr	r3, [r3, #16]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d12f      	bne.n	8018f8a <arm_convolve_wrapper_s8+0x76>
 8018f2a:	68bb      	ldr	r3, [r7, #8]
 8018f2c:	695b      	ldr	r3, [r3, #20]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d12b      	bne.n	8018f8a <arm_convolve_wrapper_s8+0x76>
 8018f32:	683b      	ldr	r3, [r7, #0]
 8018f34:	68db      	ldr	r3, [r3, #12]
 8018f36:	f003 0303 	and.w	r3, r3, #3
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d125      	bne.n	8018f8a <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8018f3e:	68bb      	ldr	r3, [r7, #8]
 8018f40:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8018f42:	2b01      	cmp	r3, #1
 8018f44:	d121      	bne.n	8018f8a <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8018f46:	68bb      	ldr	r3, [r7, #8]
 8018f48:	68db      	ldr	r3, [r3, #12]
 8018f4a:	2b01      	cmp	r3, #1
 8018f4c:	d11d      	bne.n	8018f8a <arm_convolve_wrapper_s8+0x76>
 8018f4e:	69fb      	ldr	r3, [r7, #28]
 8018f50:	689b      	ldr	r3, [r3, #8]
 8018f52:	2b01      	cmp	r3, #1
 8018f54:	d119      	bne.n	8018f8a <arm_convolve_wrapper_s8+0x76>
 8018f56:	69fb      	ldr	r3, [r7, #28]
 8018f58:	685b      	ldr	r3, [r3, #4]
 8018f5a:	2b01      	cmp	r3, #1
 8018f5c:	d115      	bne.n	8018f8a <arm_convolve_wrapper_s8+0x76>
    {
        return arm_convolve_1x1_s8_fast(ctx,
 8018f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f60:	9306      	str	r3, [sp, #24]
 8018f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f64:	9305      	str	r3, [sp, #20]
 8018f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f68:	9304      	str	r3, [sp, #16]
 8018f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f6c:	9303      	str	r3, [sp, #12]
 8018f6e:	6a3b      	ldr	r3, [r7, #32]
 8018f70:	9302      	str	r3, [sp, #8]
 8018f72:	69fb      	ldr	r3, [r7, #28]
 8018f74:	9301      	str	r3, [sp, #4]
 8018f76:	69bb      	ldr	r3, [r7, #24]
 8018f78:	9300      	str	r3, [sp, #0]
 8018f7a:	683b      	ldr	r3, [r7, #0]
 8018f7c:	687a      	ldr	r2, [r7, #4]
 8018f7e:	68b9      	ldr	r1, [r7, #8]
 8018f80:	68f8      	ldr	r0, [r7, #12]
 8018f82:	f7ff fb8d 	bl	80186a0 <arm_convolve_1x1_s8_fast>
 8018f86:	4603      	mov	r3, r0
 8018f88:	e040      	b.n	801900c <arm_convolve_wrapper_s8+0xf8>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8018f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f8c:	685b      	ldr	r3, [r3, #4]
 8018f8e:	2b01      	cmp	r3, #1
 8018f90:	d127      	bne.n	8018fe2 <arm_convolve_wrapper_s8+0xce>
 8018f92:	683b      	ldr	r3, [r7, #0]
 8018f94:	685b      	ldr	r3, [r3, #4]
 8018f96:	2b01      	cmp	r3, #1
 8018f98:	d123      	bne.n	8018fe2 <arm_convolve_wrapper_s8+0xce>
 8018f9a:	69fb      	ldr	r3, [r7, #28]
 8018f9c:	685b      	ldr	r3, [r3, #4]
 8018f9e:	2b01      	cmp	r3, #1
 8018fa0:	d11f      	bne.n	8018fe2 <arm_convolve_wrapper_s8+0xce>
 8018fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fa4:	689b      	ldr	r3, [r3, #8]
 8018fa6:	f003 0303 	and.w	r3, r3, #3
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d119      	bne.n	8018fe2 <arm_convolve_wrapper_s8+0xce>
             (input_dims->n == 1))
 8018fae:	683b      	ldr	r3, [r7, #0]
 8018fb0:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8018fb2:	2b01      	cmp	r3, #1
 8018fb4:	d115      	bne.n	8018fe2 <arm_convolve_wrapper_s8+0xce>
    {
        return arm_convolve_1_x_n_s8(ctx,
 8018fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fb8:	9306      	str	r3, [sp, #24]
 8018fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fbc:	9305      	str	r3, [sp, #20]
 8018fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fc0:	9304      	str	r3, [sp, #16]
 8018fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fc4:	9303      	str	r3, [sp, #12]
 8018fc6:	6a3b      	ldr	r3, [r7, #32]
 8018fc8:	9302      	str	r3, [sp, #8]
 8018fca:	69fb      	ldr	r3, [r7, #28]
 8018fcc:	9301      	str	r3, [sp, #4]
 8018fce:	69bb      	ldr	r3, [r7, #24]
 8018fd0:	9300      	str	r3, [sp, #0]
 8018fd2:	683b      	ldr	r3, [r7, #0]
 8018fd4:	687a      	ldr	r2, [r7, #4]
 8018fd6:	68b9      	ldr	r1, [r7, #8]
 8018fd8:	68f8      	ldr	r0, [r7, #12]
 8018fda:	f7ff fb1d 	bl	8018618 <arm_convolve_1_x_n_s8>
 8018fde:	4603      	mov	r3, r0
 8018fe0:	e014      	b.n	801900c <arm_convolve_wrapper_s8+0xf8>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
 8018fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fe4:	9306      	str	r3, [sp, #24]
 8018fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fe8:	9305      	str	r3, [sp, #20]
 8018fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fec:	9304      	str	r3, [sp, #16]
 8018fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ff0:	9303      	str	r3, [sp, #12]
 8018ff2:	6a3b      	ldr	r3, [r7, #32]
 8018ff4:	9302      	str	r3, [sp, #8]
 8018ff6:	69fb      	ldr	r3, [r7, #28]
 8018ff8:	9301      	str	r3, [sp, #4]
 8018ffa:	69bb      	ldr	r3, [r7, #24]
 8018ffc:	9300      	str	r3, [sp, #0]
 8018ffe:	683b      	ldr	r3, [r7, #0]
 8019000:	687a      	ldr	r2, [r7, #4]
 8019002:	68b9      	ldr	r1, [r7, #8]
 8019004:	68f8      	ldr	r0, [r7, #12]
 8019006:	f7ff fbaa 	bl	801875e <arm_convolve_s8>
 801900a:	4603      	mov	r3, r0
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 801900c:	4618      	mov	r0, r3
 801900e:	3710      	adds	r7, #16
 8019010:	46bd      	mov	sp, r7
 8019012:	bd80      	pop	{r7, pc}

08019014 <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
 8019014:	b580      	push	{r7, lr}
 8019016:	b084      	sub	sp, #16
 8019018:	af00      	add	r7, sp, #0
 801901a:	60f8      	str	r0, [r7, #12]
 801901c:	60b9      	str	r1, [r7, #8]
 801901e:	607a      	str	r2, [r7, #4]
 8019020:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	691b      	ldr	r3, [r3, #16]
 8019026:	2b00      	cmp	r3, #0
 8019028:	d11e      	bne.n	8019068 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	695b      	ldr	r3, [r3, #20]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d11a      	bne.n	8019068 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8019032:	68bb      	ldr	r3, [r7, #8]
 8019034:	68db      	ldr	r3, [r3, #12]
 8019036:	f003 0303 	and.w	r3, r3, #3
 801903a:	2b00      	cmp	r3, #0
 801903c:	d114      	bne.n	8019068 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8019042:	2b01      	cmp	r3, #1
 8019044:	d110      	bne.n	8019068 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	68db      	ldr	r3, [r3, #12]
 801904a:	2b01      	cmp	r3, #1
 801904c:	d10c      	bne.n	8019068 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	689b      	ldr	r3, [r3, #8]
 8019052:	2b01      	cmp	r3, #1
 8019054:	d108      	bne.n	8019068 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	685b      	ldr	r3, [r3, #4]
 801905a:	2b01      	cmp	r3, #1
 801905c:	d104      	bne.n	8019068 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 801905e:	68b8      	ldr	r0, [r7, #8]
 8019060:	f7ff fb72 	bl	8018748 <arm_convolve_1x1_s8_fast_get_buffer_size>
 8019064:	4603      	mov	r3, r0
 8019066:	e020      	b.n	80190aa <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8019068:	683b      	ldr	r3, [r7, #0]
 801906a:	685b      	ldr	r3, [r3, #4]
 801906c:	2b01      	cmp	r3, #1
 801906e:	d117      	bne.n	80190a0 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8019070:	68bb      	ldr	r3, [r7, #8]
 8019072:	685b      	ldr	r3, [r3, #4]
 8019074:	2b01      	cmp	r3, #1
 8019076:	d113      	bne.n	80190a0 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	685b      	ldr	r3, [r3, #4]
 801907c:	2b01      	cmp	r3, #1
 801907e:	d10f      	bne.n	80190a0 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8019080:	683b      	ldr	r3, [r7, #0]
 8019082:	689b      	ldr	r3, [r3, #8]
 8019084:	f003 0303 	and.w	r3, r3, #3
 8019088:	2b00      	cmp	r3, #0
 801908a:	d109      	bne.n	80190a0 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
             (input_dims->n == 1))
 801908c:	68bb      	ldr	r3, [r7, #8]
 801908e:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8019090:	2b01      	cmp	r3, #1
 8019092:	d105      	bne.n	80190a0 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 8019094:	6879      	ldr	r1, [r7, #4]
 8019096:	68b8      	ldr	r0, [r7, #8]
 8019098:	f7ff faec 	bl	8018674 <arm_convolve_1_x_n_s8_get_buffer_size>
 801909c:	4603      	mov	r3, r0
 801909e:	e004      	b.n	80190aa <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 80190a0:	6879      	ldr	r1, [r7, #4]
 80190a2:	68b8      	ldr	r0, [r7, #8]
 80190a4:	f7ff ff20 	bl	8018ee8 <arm_convolve_s8_get_buffer_size>
 80190a8:	4603      	mov	r3, r0
    }
}
 80190aa:	4618      	mov	r0, r3
 80190ac:	3710      	adds	r7, #16
 80190ae:	46bd      	mov	sp, r7
 80190b0:	bd80      	pop	{r7, pc}

080190b2 <arm_depthwise_conv_3x3_s8>:
                                     const q7_t *kernel,
                                     const cmsis_nn_dims *bias_dims,
                                     const int32_t *bias,
                                     const cmsis_nn_dims *output_dims,
                                     q7_t *output)
{
 80190b2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80190b6:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 80190ba:	af00      	add	r7, sp, #0
 80190bc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80190c0:	6020      	str	r0, [r4, #0]
 80190c2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80190c6:	6001      	str	r1, [r0, #0]
 80190c8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80190cc:	600a      	str	r2, [r1, #0]
 80190ce:	f107 0220 	add.w	r2, r7, #32
 80190d2:	6013      	str	r3, [r2, #0]
    (void)ctx;
    (void)bias_dims;

    const int32_t input_x = input_dims->w;
 80190d4:	f107 0320 	add.w	r3, r7, #32
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	689b      	ldr	r3, [r3, #8]
 80190dc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    const int32_t input_y = input_dims->h;
 80190e0:	f107 0320 	add.w	r3, r7, #32
 80190e4:	681b      	ldr	r3, [r3, #0]
 80190e6:	685b      	ldr	r3, [r3, #4]
 80190e8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    const int32_t input_ch = input_dims->c;
 80190ec:	f107 0320 	add.w	r3, r7, #32
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	68db      	ldr	r3, [r3, #12]
 80190f4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    const int32_t output_ch = output_dims->c;
 80190f8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80190fc:	68db      	ldr	r3, [r3, #12]
 80190fe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    const int32_t pad_x = dw_conv_params->padding.w;
 8019102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	695b      	ldr	r3, [r3, #20]
 801910a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    const int32_t pad_y = dw_conv_params->padding.h;
 801910e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	699b      	ldr	r3, [r3, #24]
 8019116:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    const int32_t stride_x = dw_conv_params->stride.w;
 801911a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	68db      	ldr	r3, [r3, #12]
 8019122:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    const int32_t stride_y = dw_conv_params->stride.h;
 8019126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	691b      	ldr	r3, [r3, #16]
 801912e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    const int32_t *output_shift = quant_params->shift;
 8019132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	685b      	ldr	r3, [r3, #4]
 801913a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    const int32_t *output_mult = quant_params->multiplier;
 801913e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    const int32_t output_x = output_dims->w;
 801914a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801914e:	689b      	ldr	r3, [r3, #8]
 8019150:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    const int32_t output_y = output_dims->h;
 8019154:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8019158:	685b      	ldr	r3, [r3, #4]
 801915a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    const int32_t output_offset = dw_conv_params->output_offset;
 801915e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	685b      	ldr	r3, [r3, #4]
 8019166:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    const int32_t input_offset = dw_conv_params->input_offset;
 801916a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    const int32_t output_activation_min = dw_conv_params->activation.min;
 8019176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801917e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    const int32_t output_activation_max = dw_conv_params->activation.max;
 8019182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801918a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
 801918e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019192:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8019196:	429a      	cmp	r2, r3
 8019198:	d003      	beq.n	80191a2 <arm_depthwise_conv_3x3_s8+0xf0>
    {
        return ARM_MATH_SIZE_MISMATCH;
 801919a:	f06f 0302 	mvn.w	r3, #2
 801919e:	f000 bf70 	b.w	801a082 <arm_depthwise_conv_3x3_s8+0xfd0>
    }
    /* Check input constraints pad_x <= 1 */
    if (pad_x > 1 || filter_dims->w != 3 || filter_dims->h != 3)
 80191a2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80191a6:	2b01      	cmp	r3, #1
 80191a8:	dc09      	bgt.n	80191be <arm_depthwise_conv_3x3_s8+0x10c>
 80191aa:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80191ae:	689b      	ldr	r3, [r3, #8]
 80191b0:	2b03      	cmp	r3, #3
 80191b2:	d104      	bne.n	80191be <arm_depthwise_conv_3x3_s8+0x10c>
 80191b4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80191b8:	685b      	ldr	r3, [r3, #4]
 80191ba:	2b03      	cmp	r3, #3
 80191bc:	d003      	beq.n	80191c6 <arm_depthwise_conv_3x3_s8+0x114>
    {
        return ARM_MATH_ARGUMENT_ERROR;
 80191be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80191c2:	f000 bf5e 	b.w	801a082 <arm_depthwise_conv_3x3_s8+0xfd0>
    }

    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 80191c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80191ca:	425b      	negs	r3, r3
 80191cc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80191d0:	2300      	movs	r3, #0
 80191d2:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 80191d6:	2300      	movs	r3, #0
 80191d8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80191dc:	f000 bf49 	b.w	801a072 <arm_depthwise_conv_3x3_s8+0xfc0>
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 80191e0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80191e4:	425b      	negs	r3, r3
 80191e6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 80191ea:	2300      	movs	r3, #0
 80191ec:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80191f0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	dc03      	bgt.n	8019200 <arm_depthwise_conv_3x3_s8+0x14e>
 80191f8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80191fc:	425b      	negs	r3, r3
 80191fe:	e000      	b.n	8019202 <arm_depthwise_conv_3x3_s8+0x150>
 8019200:	2300      	movs	r3, #0
 8019202:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8019206:	f000 bf21 	b.w	801a04c <arm_depthwise_conv_3x3_s8+0xf9a>
        {
            int32_t in_ch = 0;
 801920a:	2300      	movs	r3, #0
 801920c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
            int32_t ker_w_start = MAX(0, -in_w);
 8019210:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8019214:	2b00      	cmp	r3, #0
 8019216:	dc03      	bgt.n	8019220 <arm_depthwise_conv_3x3_s8+0x16e>
 8019218:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801921c:	425b      	negs	r3, r3
 801921e:	e000      	b.n	8019222 <arm_depthwise_conv_3x3_s8+0x170>
 8019220:	2300      	movs	r3, #0
 8019222:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

            for (; in_ch <= (input_ch - 4); in_ch += 4)
 8019226:	f000 bd50 	b.w	8019cca <arm_depthwise_conv_3x3_s8+0xc18>
            {
                int32_t out_buff0 = bias[in_ch + 0];
 801922a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801922e:	009b      	lsls	r3, r3, #2
 8019230:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8019234:	4413      	add	r3, r2
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                int32_t out_buff1 = bias[in_ch + 1];
 801923c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019240:	3301      	adds	r3, #1
 8019242:	009b      	lsls	r3, r3, #2
 8019244:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8019248:	4413      	add	r3, r2
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                int32_t out_buff2 = bias[in_ch + 2];
 8019250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019254:	3302      	adds	r3, #2
 8019256:	009b      	lsls	r3, r3, #2
 8019258:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801925c:	4413      	add	r3, r2
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                int32_t out_buff3 = bias[in_ch + 3];
 8019264:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019268:	3303      	adds	r3, #3
 801926a:	009b      	lsls	r3, r3, #2
 801926c:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8019270:	4413      	add	r3, r2
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
 8019278:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801927c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8019280:	4413      	add	r3, r2
 8019282:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019286:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 801928a:	fb01 f202 	mul.w	r2, r1, r2
 801928e:	fb02 f303 	mul.w	r3, r2, r3
 8019292:	4619      	mov	r1, r3
 8019294:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8019298:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801929c:	fb02 f303 	mul.w	r3, r2, r3
 80192a0:	18ca      	adds	r2, r1, r3
 80192a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80192a6:	4413      	add	r3, r2
 80192a8:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 80192ac:	4413      	add	r3, r2
 80192ae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 80192b2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80192b6:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80192ba:	fb02 f203 	mul.w	r2, r2, r3
 80192be:	4613      	mov	r3, r2
 80192c0:	005b      	lsls	r3, r3, #1
 80192c2:	4413      	add	r3, r2
 80192c4:	461a      	mov	r2, r3
 80192c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80192ca:	4413      	add	r3, r2
 80192cc:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80192d0:	4413      	add	r3, r2
 80192d2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 80192d6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80192da:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80192de:	e17a      	b.n	80195d6 <arm_depthwise_conv_3x3_s8+0x524>
                {
                    int32_t in_val = 0;
 80192e0:	2300      	movs	r3, #0
 80192e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                    int32_t ker_val = 0;
 80192e6:	2300      	movs	r3, #0
 80192e8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                    if (ker_w_start == 0)
 80192ec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d169      	bne.n	80193c8 <arm_depthwise_conv_3x3_s8+0x316>
 80192f4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80192f8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80192fc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8019304:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019308:	601a      	str	r2, [r3, #0]
    return (val);
 801930a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801930e:	681b      	ldr	r3, [r3, #0]
                    {
                        in_val = arm_nn_read_q7x4(input_ptr);
 8019310:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8019314:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8019318:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 801931c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8019324:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019328:	601a      	str	r2, [r3, #0]
    return (val);
 801932a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801932e:	681b      	ldr	r3, [r3, #0]
                        ker_val = arm_nn_read_q7x4(kernel_ptr);
 8019330:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 8019334:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019338:	b25b      	sxtb	r3, r3
 801933a:	461a      	mov	r2, r3
 801933c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019340:	4413      	add	r3, r2
 8019342:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019346:	b252      	sxtb	r2, r2
 8019348:	fb02 f303 	mul.w	r3, r2, r3
 801934c:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019350:	4413      	add	r3, r2
 8019352:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 8019356:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801935a:	121b      	asrs	r3, r3, #8
 801935c:	b25b      	sxtb	r3, r3
 801935e:	461a      	mov	r2, r3
 8019360:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019364:	4413      	add	r3, r2
 8019366:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801936a:	1212      	asrs	r2, r2, #8
 801936c:	b252      	sxtb	r2, r2
 801936e:	fb02 f303 	mul.w	r3, r2, r3
 8019372:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8019376:	4413      	add	r3, r2
 8019378:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 801937c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019380:	141b      	asrs	r3, r3, #16
 8019382:	b25b      	sxtb	r3, r3
 8019384:	461a      	mov	r2, r3
 8019386:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801938a:	4413      	add	r3, r2
 801938c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019390:	1412      	asrs	r2, r2, #16
 8019392:	b252      	sxtb	r2, r2
 8019394:	fb02 f303 	mul.w	r3, r2, r3
 8019398:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801939c:	4413      	add	r3, r2
 801939e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 80193a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80193a6:	161b      	asrs	r3, r3, #24
 80193a8:	b25b      	sxtb	r3, r3
 80193aa:	461a      	mov	r2, r3
 80193ac:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80193b0:	4413      	add	r3, r2
 80193b2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80193b6:	1612      	asrs	r2, r2, #24
 80193b8:	b252      	sxtb	r2, r2
 80193ba:	fb02 f303 	mul.w	r3, r2, r3
 80193be:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 80193c2:	4413      	add	r3, r2
 80193c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
                    }

                    in_val = arm_nn_read_q7x4(input_ptr + input_ch);
 80193c8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80193cc:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80193d0:	4413      	add	r3, r2
 80193d2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80193d6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80193de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80193e2:	601a      	str	r2, [r3, #0]
    return (val);
 80193e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                    ker_val = arm_nn_read_q7x4(kernel_ptr + input_ch);
 80193ee:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80193f2:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80193f6:	4413      	add	r3, r2
 80193f8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80193fc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8019404:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019408:	601a      	str	r2, [r3, #0]
    return (val);
 801940a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                    out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 8019414:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019418:	b25b      	sxtb	r3, r3
 801941a:	461a      	mov	r2, r3
 801941c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019420:	4413      	add	r3, r2
 8019422:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019426:	b252      	sxtb	r2, r2
 8019428:	fb02 f303 	mul.w	r3, r2, r3
 801942c:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019430:	4413      	add	r3, r2
 8019432:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                    out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 8019436:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801943a:	121b      	asrs	r3, r3, #8
 801943c:	b25b      	sxtb	r3, r3
 801943e:	461a      	mov	r2, r3
 8019440:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019444:	4413      	add	r3, r2
 8019446:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801944a:	1212      	asrs	r2, r2, #8
 801944c:	b252      	sxtb	r2, r2
 801944e:	fb02 f303 	mul.w	r3, r2, r3
 8019452:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8019456:	4413      	add	r3, r2
 8019458:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 801945c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019460:	141b      	asrs	r3, r3, #16
 8019462:	b25b      	sxtb	r3, r3
 8019464:	461a      	mov	r2, r3
 8019466:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801946a:	4413      	add	r3, r2
 801946c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019470:	1412      	asrs	r2, r2, #16
 8019472:	b252      	sxtb	r2, r2
 8019474:	fb02 f303 	mul.w	r3, r2, r3
 8019478:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801947c:	4413      	add	r3, r2
 801947e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                    out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 8019482:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019486:	161b      	asrs	r3, r3, #24
 8019488:	b25b      	sxtb	r3, r3
 801948a:	461a      	mov	r2, r3
 801948c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019490:	4413      	add	r3, r2
 8019492:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019496:	1612      	asrs	r2, r2, #24
 8019498:	b252      	sxtb	r2, r2
 801949a:	fb02 f303 	mul.w	r3, r2, r3
 801949e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 80194a2:	4413      	add	r3, r2
 80194a4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                    if ((input_x - in_w) >= 3)
 80194a8:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80194ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80194b0:	1ad3      	subs	r3, r2, r3
 80194b2:	2b02      	cmp	r3, #2
 80194b4:	dd73      	ble.n	801959e <arm_depthwise_conv_3x3_s8+0x4ec>
                    {
                        in_val = arm_nn_read_q7x4(input_ptr + (input_ch << 1));
 80194b6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80194ba:	005b      	lsls	r3, r3, #1
 80194bc:	461a      	mov	r2, r3
 80194be:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80194c2:	4413      	add	r3, r2
 80194c4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80194c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80194d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80194d4:	601a      	str	r2, [r3, #0]
    return (val);
 80194d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                        ker_val = arm_nn_read_q7x4(kernel_ptr + (input_ch << 1));
 80194e0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80194e4:	005b      	lsls	r3, r3, #1
 80194e6:	461a      	mov	r2, r3
 80194e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80194ec:	4413      	add	r3, r2
 80194ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80194f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80194fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80194fe:	601a      	str	r2, [r3, #0]
    return (val);
 8019500:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 801950a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801950e:	b25b      	sxtb	r3, r3
 8019510:	461a      	mov	r2, r3
 8019512:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019516:	4413      	add	r3, r2
 8019518:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801951c:	b252      	sxtb	r2, r2
 801951e:	fb02 f303 	mul.w	r3, r2, r3
 8019522:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019526:	4413      	add	r3, r2
 8019528:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 801952c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019530:	121b      	asrs	r3, r3, #8
 8019532:	b25b      	sxtb	r3, r3
 8019534:	461a      	mov	r2, r3
 8019536:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801953a:	4413      	add	r3, r2
 801953c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019540:	1212      	asrs	r2, r2, #8
 8019542:	b252      	sxtb	r2, r2
 8019544:	fb02 f303 	mul.w	r3, r2, r3
 8019548:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801954c:	4413      	add	r3, r2
 801954e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 8019552:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019556:	141b      	asrs	r3, r3, #16
 8019558:	b25b      	sxtb	r3, r3
 801955a:	461a      	mov	r2, r3
 801955c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019560:	4413      	add	r3, r2
 8019562:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019566:	1412      	asrs	r2, r2, #16
 8019568:	b252      	sxtb	r2, r2
 801956a:	fb02 f303 	mul.w	r3, r2, r3
 801956e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8019572:	4413      	add	r3, r2
 8019574:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 8019578:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801957c:	161b      	asrs	r3, r3, #24
 801957e:	b25b      	sxtb	r3, r3
 8019580:	461a      	mov	r2, r3
 8019582:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019586:	4413      	add	r3, r2
 8019588:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801958c:	1612      	asrs	r2, r2, #24
 801958e:	b252      	sxtb	r2, r2
 8019590:	fb02 f303 	mul.w	r3, r2, r3
 8019594:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8019598:	4413      	add	r3, r2
 801959a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
                    }

                    input_ptr += (input_ch * input_x);
 801959e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80195a2:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80195a6:	fb02 f303 	mul.w	r3, r2, r3
 80195aa:	461a      	mov	r2, r3
 80195ac:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80195b0:	4413      	add	r3, r2
 80195b2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
                    kernel_ptr += (input_ch * 3);
 80195b6:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80195ba:	4613      	mov	r3, r2
 80195bc:	005b      	lsls	r3, r3, #1
 80195be:	4413      	add	r3, r2
 80195c0:	461a      	mov	r2, r3
 80195c2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80195c6:	4413      	add	r3, r2
 80195c8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 80195cc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80195d0:	3301      	adds	r3, #1
 80195d2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80195d6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80195da:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80195de:	1ad3      	subs	r3, r2, r3
 80195e0:	2b03      	cmp	r3, #3
 80195e2:	bfa8      	it	ge
 80195e4:	2303      	movge	r3, #3
 80195e6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80195ea:	429a      	cmp	r2, r3
 80195ec:	f6ff ae78 	blt.w	80192e0 <arm_depthwise_conv_3x3_s8+0x22e>
                }

                out_buff0 = arm_nn_requantize(out_buff0, output_mult[in_ch + 0], output_shift[in_ch + 0]);
 80195f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80195f4:	009b      	lsls	r3, r3, #2
 80195f6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80195fa:	4413      	add	r3, r2
 80195fc:	6819      	ldr	r1, [r3, #0]
 80195fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019602:	009b      	lsls	r3, r3, #2
 8019604:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8019608:	4413      	add	r3, r2
 801960a:	681a      	ldr	r2, [r3, #0]
 801960c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8019610:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 8019614:	6018      	str	r0, [r3, #0]
 8019616:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801961a:	6019      	str	r1, [r3, #0]
 801961c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8019620:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019622:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801962c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8019630:	6812      	ldr	r2, [r2, #0]
 8019632:	409a      	lsls	r2, r3
 8019634:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8019638:	601a      	str	r2, [r3, #0]
 801963a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801963e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8019642:	6812      	ldr	r2, [r2, #0]
 8019644:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8019646:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801964a:	2200      	movs	r2, #0
 801964c:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801964e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8019652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019656:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8019658:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801965c:	2200      	movs	r2, #0
 801965e:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8019660:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8019664:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	4618      	mov	r0, r3
 801966c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8019670:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	461a      	mov	r2, r3
 8019678:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801967c:	fb02 f501 	mul.w	r5, r2, r1
 8019680:	fb00 f403 	mul.w	r4, r0, r3
 8019684:	442c      	add	r4, r5
 8019686:	fba0 2302 	umull	r2, r3, r0, r2
 801968a:	18e1      	adds	r1, r4, r3
 801968c:	460b      	mov	r3, r1
 801968e:	eb18 0102 	adds.w	r1, r8, r2
 8019692:	60b9      	str	r1, [r7, #8]
 8019694:	eb49 0303 	adc.w	r3, r9, r3
 8019698:	60fb      	str	r3, [r7, #12]
 801969a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801969e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    result = (int32_t)(mult.long_long >> 31);
 80196a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80196a6:	f04f 0200 	mov.w	r2, #0
 80196aa:	f04f 0300 	mov.w	r3, #0
 80196ae:	0fc2      	lsrs	r2, r0, #31
 80196b0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80196b4:	17cb      	asrs	r3, r1, #31
 80196b6:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80196ba:	4613      	mov	r3, r2
 80196bc:	600b      	str	r3, [r1, #0]
    return result;
 80196be:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80196c2:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80196c4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	dc04      	bgt.n	80196d8 <arm_depthwise_conv_3x3_s8+0x626>
 80196ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	425b      	negs	r3, r3
 80196d6:	e000      	b.n	80196da <arm_depthwise_conv_3x3_s8+0x628>
 80196d8:	2300      	movs	r3, #0
 80196da:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80196de:	6011      	str	r1, [r2, #0]
 80196e0:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80196e4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80196e6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80196ea:	2200      	movs	r2, #0
 80196ec:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80196ee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80196f2:	2201      	movs	r2, #1
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	409a      	lsls	r2, r3
 80196f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80196fc:	3a01      	subs	r2, #1
 80196fe:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8019700:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8019704:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8019708:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801970c:	6809      	ldr	r1, [r1, #0]
 801970e:	6812      	ldr	r2, [r2, #0]
 8019710:	400a      	ands	r2, r1
 8019712:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8019714:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8019718:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801971c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8019720:	6809      	ldr	r1, [r1, #0]
 8019722:	6812      	ldr	r2, [r2, #0]
 8019724:	fa41 f202 	asr.w	r2, r1, r2
 8019728:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801972a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801972e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8019732:	6812      	ldr	r2, [r2, #0]
 8019734:	1052      	asrs	r2, r2, #1
 8019736:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8019738:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	2b00      	cmp	r3, #0
 8019740:	da06      	bge.n	8019750 <arm_depthwise_conv_3x3_s8+0x69e>
        threshold++;
 8019742:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8019746:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 801974a:	6812      	ldr	r2, [r2, #0]
 801974c:	3201      	adds	r2, #1
 801974e:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8019750:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8019754:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8019758:	6812      	ldr	r2, [r2, #0]
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	429a      	cmp	r2, r3
 801975e:	dd06      	ble.n	801976e <arm_depthwise_conv_3x3_s8+0x6bc>
        result++;
 8019760:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8019764:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8019768:	6812      	ldr	r2, [r2, #0]
 801976a:	3201      	adds	r2, #1
 801976c:	601a      	str	r2, [r3, #0]
    return result;
 801976e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8019772:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019774:	bf00      	nop
 8019776:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 = arm_nn_requantize(out_buff1, output_mult[in_ch + 1], output_shift[in_ch + 1]);
 801977a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801977e:	3301      	adds	r3, #1
 8019780:	009b      	lsls	r3, r3, #2
 8019782:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8019786:	4413      	add	r3, r2
 8019788:	6819      	ldr	r1, [r3, #0]
 801978a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801978e:	3301      	adds	r3, #1
 8019790:	009b      	lsls	r3, r3, #2
 8019792:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8019796:	4413      	add	r3, r2
 8019798:	681a      	ldr	r2, [r3, #0]
 801979a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801979e:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 80197a2:	6018      	str	r0, [r3, #0]
 80197a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80197a8:	6019      	str	r1, [r3, #0]
 80197aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80197ae:	601a      	str	r2, [r3, #0]
 80197b0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80197ba:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80197be:	6812      	ldr	r2, [r2, #0]
 80197c0:	409a      	lsls	r2, r3
 80197c2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80197c6:	601a      	str	r2, [r3, #0]
 80197c8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80197cc:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80197d0:	6812      	ldr	r2, [r2, #0]
 80197d2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80197d4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80197d8:	2200      	movs	r2, #0
 80197da:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 80197dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80197e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80197e4:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 80197e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80197ea:	2200      	movs	r2, #0
 80197ec:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80197ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80197f2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	4618      	mov	r0, r3
 80197fa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80197fe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	461a      	mov	r2, r3
 8019806:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801980a:	fb02 f501 	mul.w	r5, r2, r1
 801980e:	fb00 f403 	mul.w	r4, r0, r3
 8019812:	442c      	add	r4, r5
 8019814:	fba0 2302 	umull	r2, r3, r0, r2
 8019818:	18e1      	adds	r1, r4, r3
 801981a:	460b      	mov	r3, r1
 801981c:	eb18 0102 	adds.w	r1, r8, r2
 8019820:	6139      	str	r1, [r7, #16]
 8019822:	eb49 0303 	adc.w	r3, r9, r3
 8019826:	617b      	str	r3, [r7, #20]
 8019828:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801982c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 8019830:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8019834:	f04f 0200 	mov.w	r2, #0
 8019838:	f04f 0300 	mov.w	r3, #0
 801983c:	0fc2      	lsrs	r2, r0, #31
 801983e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8019842:	17cb      	asrs	r3, r1, #31
 8019844:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8019848:	4613      	mov	r3, r2
 801984a:	600b      	str	r3, [r1, #0]
    return result;
 801984c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8019850:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019852:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	2b00      	cmp	r3, #0
 801985a:	dc04      	bgt.n	8019866 <arm_depthwise_conv_3x3_s8+0x7b4>
 801985c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	425b      	negs	r3, r3
 8019864:	e000      	b.n	8019868 <arm_depthwise_conv_3x3_s8+0x7b6>
 8019866:	2300      	movs	r3, #0
 8019868:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801986c:	6011      	str	r1, [r2, #0]
 801986e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8019872:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019874:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8019878:	2200      	movs	r2, #0
 801987a:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801987c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8019880:	2201      	movs	r2, #1
 8019882:	681b      	ldr	r3, [r3, #0]
 8019884:	409a      	lsls	r2, r3
 8019886:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801988a:	3a01      	subs	r2, #1
 801988c:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801988e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8019892:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8019896:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801989a:	6809      	ldr	r1, [r1, #0]
 801989c:	6812      	ldr	r2, [r2, #0]
 801989e:	400a      	ands	r2, r1
 80198a0:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80198a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80198a6:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80198aa:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80198ae:	6809      	ldr	r1, [r1, #0]
 80198b0:	6812      	ldr	r2, [r2, #0]
 80198b2:	fa41 f202 	asr.w	r2, r1, r2
 80198b6:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80198b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80198bc:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80198c0:	6812      	ldr	r2, [r2, #0]
 80198c2:	1052      	asrs	r2, r2, #1
 80198c4:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80198c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	da06      	bge.n	80198de <arm_depthwise_conv_3x3_s8+0x82c>
        threshold++;
 80198d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80198d4:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80198d8:	6812      	ldr	r2, [r2, #0]
 80198da:	3201      	adds	r2, #1
 80198dc:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 80198de:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80198e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80198e6:	6812      	ldr	r2, [r2, #0]
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	429a      	cmp	r2, r3
 80198ec:	dd06      	ble.n	80198fc <arm_depthwise_conv_3x3_s8+0x84a>
        result++;
 80198ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80198f2:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80198f6:	6812      	ldr	r2, [r2, #0]
 80198f8:	3201      	adds	r2, #1
 80198fa:	601a      	str	r2, [r3, #0]
    return result;
 80198fc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8019900:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019902:	bf00      	nop
 8019904:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 = arm_nn_requantize(out_buff2, output_mult[in_ch + 2], output_shift[in_ch + 2]);
 8019908:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801990c:	3302      	adds	r3, #2
 801990e:	009b      	lsls	r3, r3, #2
 8019910:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8019914:	4413      	add	r3, r2
 8019916:	681a      	ldr	r2, [r3, #0]
 8019918:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801991c:	3302      	adds	r3, #2
 801991e:	009b      	lsls	r3, r3, #2
 8019920:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8019924:	440b      	add	r3, r1
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 801992c:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8019930:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8019934:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8019938:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801993c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019940:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8019944:	fa02 f303 	lsl.w	r3, r2, r3
 8019948:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801994c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019950:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    q31_t result = 0;
 8019954:	2300      	movs	r3, #0
 8019956:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    mult.word.low = 1 << 30;
 801995a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801995e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019962:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8019964:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019968:	2200      	movs	r2, #0
 801996a:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801996c:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8019970:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8019974:	4618      	mov	r0, r3
 8019976:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801997a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801997e:	461a      	mov	r2, r3
 8019980:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8019984:	fb02 f501 	mul.w	r5, r2, r1
 8019988:	fb00 f403 	mul.w	r4, r0, r3
 801998c:	442c      	add	r4, r5
 801998e:	fba0 2302 	umull	r2, r3, r0, r2
 8019992:	18e1      	adds	r1, r4, r3
 8019994:	460b      	mov	r3, r1
 8019996:	eb18 0102 	adds.w	r1, r8, r2
 801999a:	61b9      	str	r1, [r7, #24]
 801999c:	eb49 0303 	adc.w	r3, r9, r3
 80199a0:	61fb      	str	r3, [r7, #28]
 80199a2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80199a6:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 80199aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80199ae:	f04f 0200 	mov.w	r2, #0
 80199b2:	f04f 0300 	mov.w	r3, #0
 80199b6:	0fc2      	lsrs	r2, r0, #31
 80199b8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80199bc:	17cb      	asrs	r3, r1, #31
 80199be:	4613      	mov	r3, r2
 80199c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    return result;
 80199c4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80199c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	dc03      	bgt.n	80199d8 <arm_depthwise_conv_3x3_s8+0x926>
 80199d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80199d4:	425b      	negs	r3, r3
 80199d6:	e000      	b.n	80199da <arm_depthwise_conv_3x3_s8+0x928>
 80199d8:	2300      	movs	r3, #0
 80199da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80199de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    q31_t result = 0;
 80199e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80199e6:	2200      	movs	r2, #0
 80199e8:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80199ea:	2201      	movs	r2, #1
 80199ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80199f0:	409a      	lsls	r2, r3
 80199f2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80199f6:	3a01      	subs	r2, #1
 80199f8:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 80199fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80199fe:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8019a02:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8019a06:	6812      	ldr	r2, [r2, #0]
 8019a08:	400a      	ands	r2, r1
 8019a0a:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8019a0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8019a10:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8019a14:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8019a18:	fa41 f202 	asr.w	r2, r1, r2
 8019a1c:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8019a1e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8019a22:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8019a26:	6812      	ldr	r2, [r2, #0]
 8019a28:	1052      	asrs	r2, r2, #1
 8019a2a:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8019a2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	da06      	bge.n	8019a44 <arm_depthwise_conv_3x3_s8+0x992>
        threshold++;
 8019a36:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8019a3a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8019a3e:	6812      	ldr	r2, [r2, #0]
 8019a40:	3201      	adds	r2, #1
 8019a42:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8019a44:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8019a48:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8019a4c:	6812      	ldr	r2, [r2, #0]
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	429a      	cmp	r2, r3
 8019a52:	dd06      	ble.n	8019a62 <arm_depthwise_conv_3x3_s8+0x9b0>
        result++;
 8019a54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8019a58:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8019a5c:	6812      	ldr	r2, [r2, #0]
 8019a5e:	3201      	adds	r2, #1
 8019a60:	601a      	str	r2, [r3, #0]
    return result;
 8019a62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8019a66:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019a68:	bf00      	nop
 8019a6a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 = arm_nn_requantize(out_buff3, output_mult[in_ch + 3], output_shift[in_ch + 3]);
 8019a6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019a72:	3303      	adds	r3, #3
 8019a74:	009b      	lsls	r3, r3, #2
 8019a76:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8019a7a:	4413      	add	r3, r2
 8019a7c:	681a      	ldr	r2, [r3, #0]
 8019a7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019a82:	3303      	adds	r3, #3
 8019a84:	009b      	lsls	r3, r3, #2
 8019a86:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8019a8a:	440b      	add	r3, r1
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 8019a92:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8019a96:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8019a9a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8019a9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019aa2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019aa6:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8019aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8019aae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8019ab2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8019ab6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    q31_t result = 0;
 8019aba:	2300      	movs	r3, #0
 8019abc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    mult.word.low = 1 << 30;
 8019ac0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019ac4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019ac8:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8019aca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019ace:	2200      	movs	r2, #0
 8019ad0:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8019ad2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8019ad6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8019ada:	4618      	mov	r0, r3
 8019adc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8019ae0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8019ae4:	461a      	mov	r2, r3
 8019ae6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8019aea:	fb02 f501 	mul.w	r5, r2, r1
 8019aee:	fb00 f403 	mul.w	r4, r0, r3
 8019af2:	442c      	add	r4, r5
 8019af4:	fba0 2302 	umull	r2, r3, r0, r2
 8019af8:	18e1      	adds	r1, r4, r3
 8019afa:	460b      	mov	r3, r1
 8019afc:	eb18 0a02 	adds.w	sl, r8, r2
 8019b00:	eb49 0b03 	adc.w	fp, r9, r3
 8019b04:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
    result = (int32_t)(mult.long_long >> 31);
 8019b08:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8019b0c:	f04f 0200 	mov.w	r2, #0
 8019b10:	f04f 0300 	mov.w	r3, #0
 8019b14:	0fc2      	lsrs	r2, r0, #31
 8019b16:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8019b1a:	17cb      	asrs	r3, r1, #31
 8019b1c:	4613      	mov	r3, r2
 8019b1e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    return result;
 8019b22:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019b26:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	dc03      	bgt.n	8019b36 <arm_depthwise_conv_3x3_s8+0xa84>
 8019b2e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019b32:	425b      	negs	r3, r3
 8019b34:	e000      	b.n	8019b38 <arm_depthwise_conv_3x3_s8+0xa86>
 8019b36:	2300      	movs	r3, #0
 8019b38:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8019b3c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    q31_t result = 0;
 8019b40:	2300      	movs	r3, #0
 8019b42:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019b46:	2201      	movs	r2, #1
 8019b48:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8019b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8019b50:	3b01      	subs	r3, #1
 8019b52:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    int32_t remainder = remainder_mask & dividend;
 8019b56:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8019b5a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8019b5e:	4013      	ands	r3, r2
 8019b60:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    result = dividend >> exponent;
 8019b64:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8019b68:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8019b6c:	fa42 f303 	asr.w	r3, r2, r3
 8019b70:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    q31_t threshold = remainder_mask >> 1;
 8019b74:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8019b78:	105b      	asrs	r3, r3, #1
 8019b7a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    if (result < 0)
 8019b7e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	da04      	bge.n	8019b90 <arm_depthwise_conv_3x3_s8+0xade>
        threshold++;
 8019b86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8019b8a:	3301      	adds	r3, #1
 8019b8c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    if (remainder > threshold)
 8019b90:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8019b94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8019b98:	429a      	cmp	r2, r3
 8019b9a:	dd04      	ble.n	8019ba6 <arm_depthwise_conv_3x3_s8+0xaf4>
        result++;
 8019b9c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8019ba0:	3301      	adds	r3, #1
 8019ba2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    return result;
 8019ba6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019baa:	bf00      	nop
 8019bac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                out_buff0 += output_offset;
 8019bb0:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019bb4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019bb8:	4413      	add	r3, r2
 8019bba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 += output_offset;
 8019bbe:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8019bc2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019bc6:	4413      	add	r3, r2
 8019bc8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 += output_offset;
 8019bcc:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8019bd0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019bd4:	4413      	add	r3, r2
 8019bd6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 += output_offset;
 8019bda:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8019bde:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019be2:	4413      	add	r3, r2
 8019be4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                out_buff0 = MIN(MAX(out_buff0, output_activation_min), output_activation_max);
 8019be8:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8019bec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8019bf0:	4293      	cmp	r3, r2
 8019bf2:	bfb8      	it	lt
 8019bf4:	4613      	movlt	r3, r2
 8019bf6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8019bfa:	4293      	cmp	r3, r2
 8019bfc:	bfa8      	it	ge
 8019bfe:	4613      	movge	r3, r2
 8019c00:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 = MIN(MAX(out_buff1, output_activation_min), output_activation_max);
 8019c04:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8019c08:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019c0c:	4293      	cmp	r3, r2
 8019c0e:	bfb8      	it	lt
 8019c10:	4613      	movlt	r3, r2
 8019c12:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8019c16:	4293      	cmp	r3, r2
 8019c18:	bfa8      	it	ge
 8019c1a:	4613      	movge	r3, r2
 8019c1c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
 8019c20:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8019c24:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8019c28:	4293      	cmp	r3, r2
 8019c2a:	bfb8      	it	lt
 8019c2c:	4613      	movlt	r3, r2
 8019c2e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8019c32:	4293      	cmp	r3, r2
 8019c34:	bfa8      	it	ge
 8019c36:	4613      	movge	r3, r2
 8019c38:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 = MIN(MAX(out_buff3, output_activation_min), output_activation_max);
 8019c3c:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8019c40:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8019c44:	4293      	cmp	r3, r2
 8019c46:	bfb8      	it	lt
 8019c48:	4613      	movlt	r3, r2
 8019c4a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8019c4e:	4293      	cmp	r3, r2
 8019c50:	bfa8      	it	ge
 8019c52:	4613      	movge	r3, r2
 8019c54:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                output[out_idx++] = (int8_t)out_buff0;
 8019c58:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019c5c:	1c5a      	adds	r2, r3, #1
 8019c5e:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8019c62:	461a      	mov	r2, r3
 8019c64:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8019c68:	4413      	add	r3, r2
 8019c6a:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019c6e:	b252      	sxtb	r2, r2
 8019c70:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff1;
 8019c72:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019c76:	1c5a      	adds	r2, r3, #1
 8019c78:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8019c7c:	461a      	mov	r2, r3
 8019c7e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8019c82:	4413      	add	r3, r2
 8019c84:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8019c88:	b252      	sxtb	r2, r2
 8019c8a:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff2;
 8019c8c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019c90:	1c5a      	adds	r2, r3, #1
 8019c92:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8019c96:	461a      	mov	r2, r3
 8019c98:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8019c9c:	4413      	add	r3, r2
 8019c9e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8019ca2:	b252      	sxtb	r2, r2
 8019ca4:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff3;
 8019ca6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019caa:	1c5a      	adds	r2, r3, #1
 8019cac:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8019cb0:	461a      	mov	r2, r3
 8019cb2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8019cb6:	4413      	add	r3, r2
 8019cb8:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8019cbc:	b252      	sxtb	r2, r2
 8019cbe:	701a      	strb	r2, [r3, #0]
            for (; in_ch <= (input_ch - 4); in_ch += 4)
 8019cc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019cc4:	3304      	adds	r3, #4
 8019cc6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8019cca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019cce:	3b03      	subs	r3, #3
 8019cd0:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8019cd4:	429a      	cmp	r2, r3
 8019cd6:	f6ff aaa8 	blt.w	801922a <arm_depthwise_conv_3x3_s8+0x178>
            }

            // Leftover
            for (; in_ch < input_ch; ++in_ch)
 8019cda:	e1a4      	b.n	801a026 <arm_depthwise_conv_3x3_s8+0xf74>
            {
                int32_t out_buff = bias[in_ch];
 8019cdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019ce0:	009b      	lsls	r3, r3, #2
 8019ce2:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8019ce6:	4413      	add	r3, r2
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
 8019cee:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8019cf2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8019cf6:	4413      	add	r3, r2
 8019cf8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019cfc:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8019d00:	fb01 f202 	mul.w	r2, r1, r2
 8019d04:	fb02 f303 	mul.w	r3, r2, r3
 8019d08:	4619      	mov	r1, r3
 8019d0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8019d0e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019d12:	fb02 f303 	mul.w	r3, r2, r3
 8019d16:	18ca      	adds	r2, r1, r3
 8019d18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019d1c:	4413      	add	r3, r2
 8019d1e:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8019d22:	4413      	add	r3, r2
 8019d24:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 8019d28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019d2c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8019d30:	fb02 f203 	mul.w	r2, r2, r3
 8019d34:	4613      	mov	r3, r2
 8019d36:	005b      	lsls	r3, r3, #1
 8019d38:	4413      	add	r3, r2
 8019d3a:	461a      	mov	r2, r3
 8019d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019d40:	4413      	add	r3, r2
 8019d42:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8019d46:	4413      	add	r3, r2
 8019d48:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 8019d4c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8019d50:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8019d54:	e06f      	b.n	8019e36 <arm_depthwise_conv_3x3_s8+0xd84>
                {
                    if (ker_w_start == 0)
 8019d56:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d112      	bne.n	8019d84 <arm_depthwise_conv_3x3_s8+0xcd2>
                    {
                        out_buff += (*(input_ptr) + input_offset) * *(kernel_ptr);
 8019d5e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8019d62:	f993 3000 	ldrsb.w	r3, [r3]
 8019d66:	461a      	mov	r2, r3
 8019d68:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019d6c:	4413      	add	r3, r2
 8019d6e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8019d72:	f992 2000 	ldrsb.w	r2, [r2]
 8019d76:	fb02 f303 	mul.w	r3, r2, r3
 8019d7a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019d7e:	4413      	add	r3, r2
 8019d80:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                    }

                    out_buff += (*(input_ptr + input_ch) + input_offset) * *(kernel_ptr + input_ch);
 8019d84:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019d88:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8019d8c:	4413      	add	r3, r2
 8019d8e:	f993 3000 	ldrsb.w	r3, [r3]
 8019d92:	461a      	mov	r2, r3
 8019d94:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019d98:	4413      	add	r3, r2
 8019d9a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019d9e:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8019da2:	440a      	add	r2, r1
 8019da4:	f992 2000 	ldrsb.w	r2, [r2]
 8019da8:	fb02 f303 	mul.w	r3, r2, r3
 8019dac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019db0:	4413      	add	r3, r2
 8019db2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

                    if ((input_x - in_w) >= 3)
 8019db6:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8019dba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8019dbe:	1ad3      	subs	r3, r2, r3
 8019dc0:	2b02      	cmp	r3, #2
 8019dc2:	dd1c      	ble.n	8019dfe <arm_depthwise_conv_3x3_s8+0xd4c>
                    {
                        out_buff += (*(input_ptr + (input_ch << 1)) + input_offset) * *(kernel_ptr + (input_ch << 1));
 8019dc4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019dc8:	005b      	lsls	r3, r3, #1
 8019dca:	461a      	mov	r2, r3
 8019dcc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8019dd0:	4413      	add	r3, r2
 8019dd2:	f993 3000 	ldrsb.w	r3, [r3]
 8019dd6:	461a      	mov	r2, r3
 8019dd8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019ddc:	4413      	add	r3, r2
 8019dde:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019de2:	0052      	lsls	r2, r2, #1
 8019de4:	4611      	mov	r1, r2
 8019de6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8019dea:	440a      	add	r2, r1
 8019dec:	f992 2000 	ldrsb.w	r2, [r2]
 8019df0:	fb02 f303 	mul.w	r3, r2, r3
 8019df4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019df8:	4413      	add	r3, r2
 8019dfa:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                    }

                    input_ptr += (input_ch * input_x);
 8019dfe:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019e02:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8019e06:	fb02 f303 	mul.w	r3, r2, r3
 8019e0a:	461a      	mov	r2, r3
 8019e0c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8019e10:	4413      	add	r3, r2
 8019e12:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
                    kernel_ptr += (input_ch * 3);
 8019e16:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019e1a:	4613      	mov	r3, r2
 8019e1c:	005b      	lsls	r3, r3, #1
 8019e1e:	4413      	add	r3, r2
 8019e20:	461a      	mov	r2, r3
 8019e22:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8019e26:	4413      	add	r3, r2
 8019e28:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 8019e2c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8019e30:	3301      	adds	r3, #1
 8019e32:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8019e36:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8019e3a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8019e3e:	1ad3      	subs	r3, r2, r3
 8019e40:	2b03      	cmp	r3, #3
 8019e42:	bfa8      	it	ge
 8019e44:	2303      	movge	r3, #3
 8019e46:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8019e4a:	429a      	cmp	r2, r3
 8019e4c:	db83      	blt.n	8019d56 <arm_depthwise_conv_3x3_s8+0xca4>
                }

                out_buff = arm_nn_requantize(out_buff, output_mult[in_ch], output_shift[in_ch]);
 8019e4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019e52:	009b      	lsls	r3, r3, #2
 8019e54:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8019e58:	4413      	add	r3, r2
 8019e5a:	6819      	ldr	r1, [r3, #0]
 8019e5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019e60:	009b      	lsls	r3, r3, #2
 8019e62:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8019e66:	4413      	add	r3, r2
 8019e68:	681a      	ldr	r2, [r3, #0]
 8019e6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8019e6e:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8019e72:	6018      	str	r0, [r3, #0]
 8019e74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8019e78:	6019      	str	r1, [r3, #0]
 8019e7a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019e7e:	601a      	str	r2, [r3, #0]
 8019e80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e8a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8019e8e:	6812      	ldr	r2, [r2, #0]
 8019e90:	409a      	lsls	r2, r3
 8019e92:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8019e96:	601a      	str	r2, [r3, #0]
 8019e98:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8019e9c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8019ea0:	6812      	ldr	r2, [r2, #0]
 8019ea2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8019ea4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8019ea8:	2200      	movs	r2, #0
 8019eaa:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8019eac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019eb4:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8019eb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019eba:	2200      	movs	r2, #0
 8019ebc:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8019ebe:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8019ec2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	4618      	mov	r0, r3
 8019eca:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8019ece:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	461a      	mov	r2, r3
 8019ed6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8019eda:	fb02 f501 	mul.w	r5, r2, r1
 8019ede:	fb00 f403 	mul.w	r4, r0, r3
 8019ee2:	442c      	add	r4, r5
 8019ee4:	fba0 2302 	umull	r2, r3, r0, r2
 8019ee8:	18e1      	adds	r1, r4, r3
 8019eea:	460b      	mov	r3, r1
 8019eec:	eb18 0102 	adds.w	r1, r8, r2
 8019ef0:	6039      	str	r1, [r7, #0]
 8019ef2:	eb49 0303 	adc.w	r3, r9, r3
 8019ef6:	607b      	str	r3, [r7, #4]
 8019ef8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019efc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 8019f00:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8019f04:	f04f 0200 	mov.w	r2, #0
 8019f08:	f04f 0300 	mov.w	r3, #0
 8019f0c:	0fc2      	lsrs	r2, r0, #31
 8019f0e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8019f12:	17cb      	asrs	r3, r1, #31
 8019f14:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8019f18:	4613      	mov	r3, r2
 8019f1a:	600b      	str	r3, [r1, #0]
    return result;
 8019f1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8019f20:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019f22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	dc04      	bgt.n	8019f36 <arm_depthwise_conv_3x3_s8+0xe84>
 8019f2c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	425b      	negs	r3, r3
 8019f34:	e000      	b.n	8019f38 <arm_depthwise_conv_3x3_s8+0xe86>
 8019f36:	2300      	movs	r3, #0
 8019f38:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8019f3c:	6011      	str	r1, [r2, #0]
 8019f3e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8019f42:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019f44:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8019f48:	2200      	movs	r2, #0
 8019f4a:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019f4c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8019f50:	2201      	movs	r2, #1
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	409a      	lsls	r2, r3
 8019f56:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8019f5a:	3a01      	subs	r2, #1
 8019f5c:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8019f5e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8019f62:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8019f66:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8019f6a:	6809      	ldr	r1, [r1, #0]
 8019f6c:	6812      	ldr	r2, [r2, #0]
 8019f6e:	400a      	ands	r2, r1
 8019f70:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8019f72:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8019f76:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8019f7a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8019f7e:	6809      	ldr	r1, [r1, #0]
 8019f80:	6812      	ldr	r2, [r2, #0]
 8019f82:	fa41 f202 	asr.w	r2, r1, r2
 8019f86:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8019f88:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8019f8c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8019f90:	6812      	ldr	r2, [r2, #0]
 8019f92:	1052      	asrs	r2, r2, #1
 8019f94:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8019f96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	da06      	bge.n	8019fae <arm_depthwise_conv_3x3_s8+0xefc>
        threshold++;
 8019fa0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8019fa4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8019fa8:	6812      	ldr	r2, [r2, #0]
 8019faa:	3201      	adds	r2, #1
 8019fac:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8019fae:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8019fb2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8019fb6:	6812      	ldr	r2, [r2, #0]
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	429a      	cmp	r2, r3
 8019fbc:	dd06      	ble.n	8019fcc <arm_depthwise_conv_3x3_s8+0xf1a>
        result++;
 8019fbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8019fc2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8019fc6:	6812      	ldr	r2, [r2, #0]
 8019fc8:	3201      	adds	r2, #1
 8019fca:	601a      	str	r2, [r3, #0]
    return result;
 8019fcc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8019fd0:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019fd2:	bf00      	nop
 8019fd4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                out_buff += output_offset;
 8019fd8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019fdc:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019fe0:	4413      	add	r3, r2
 8019fe2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                out_buff = MIN(MAX(out_buff, output_activation_min), output_activation_max);
 8019fe6:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8019fea:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019fee:	4293      	cmp	r3, r2
 8019ff0:	bfb8      	it	lt
 8019ff2:	4613      	movlt	r3, r2
 8019ff4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8019ff8:	4293      	cmp	r3, r2
 8019ffa:	bfa8      	it	ge
 8019ffc:	4613      	movge	r3, r2
 8019ffe:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                output[out_idx++] = (int8_t)out_buff;
 801a002:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801a006:	1c5a      	adds	r2, r3, #1
 801a008:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801a00c:	461a      	mov	r2, r3
 801a00e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801a012:	4413      	add	r3, r2
 801a014:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a018:	b252      	sxtb	r2, r2
 801a01a:	701a      	strb	r2, [r3, #0]
            for (; in_ch < input_ch; ++in_ch)
 801a01c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a020:	3301      	adds	r3, #1
 801a022:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801a026:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 801a02a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a02e:	429a      	cmp	r2, r3
 801a030:	f6ff ae54 	blt.w	8019cdc <arm_depthwise_conv_3x3_s8+0xc2a>
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801a034:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801a038:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801a03c:	4413      	add	r3, r2
 801a03e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 801a042:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801a046:	3301      	adds	r3, #1
 801a048:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801a04c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a050:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801a054:	429a      	cmp	r2, r3
 801a056:	f6ff a8d8 	blt.w	801920a <arm_depthwise_conv_3x3_s8+0x158>
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801a05a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801a05e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801a062:	4413      	add	r3, r2
 801a064:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 801a068:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801a06c:	3301      	adds	r3, #1
 801a06e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 801a072:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801a076:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801a07a:	429a      	cmp	r2, r3
 801a07c:	f6ff a8b0 	blt.w	80191e0 <arm_depthwise_conv_3x3_s8+0x12e>
            }
        }
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801a080:	2300      	movs	r3, #0
}
 801a082:	4618      	mov	r0, r3
 801a084:	f507 7705 	add.w	r7, r7, #532	; 0x214
 801a088:	46bd      	mov	sp, r7
 801a08a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801a08e:	4770      	bx	lr

0801a090 <depthwise_conv_s8_mult_4>:
                                     const int32_t output_y,
                                     const int32_t output_offset,
                                     const int32_t input_offset,
                                     const int32_t output_activation_min,
                                     const int32_t output_activation_max)
{
 801a090:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801a094:	b0d7      	sub	sp, #348	; 0x15c
 801a096:	af00      	add	r7, sp, #0
 801a098:	f107 0424 	add.w	r4, r7, #36	; 0x24
 801a09c:	6020      	str	r0, [r4, #0]
 801a09e:	f107 0020 	add.w	r0, r7, #32
 801a0a2:	6001      	str	r1, [r0, #0]
 801a0a4:	f107 011c 	add.w	r1, r7, #28
 801a0a8:	600a      	str	r2, [r1, #0]
 801a0aa:	f107 0218 	add.w	r2, r7, #24
 801a0ae:	6013      	str	r3, [r2, #0]
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801a0b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 801a0b4:	425b      	negs	r3, r3
 801a0b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801a0ba:	2300      	movs	r3, #0
 801a0bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 801a0c0:	2300      	movs	r3, #0
 801a0c2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801a0c6:	f000 bcb3 	b.w	801aa30 <depthwise_conv_s8_mult_4+0x9a0>
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801a0ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801a0ce:	425b      	negs	r3, r3
 801a0d0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801a0d4:	2300      	movs	r3, #0
 801a0d6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801a0da:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	dc03      	bgt.n	801a0ea <depthwise_conv_s8_mult_4+0x5a>
 801a0e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801a0e6:	425b      	negs	r3, r3
 801a0e8:	e000      	b.n	801a0ec <depthwise_conv_s8_mult_4+0x5c>
 801a0ea:	2300      	movs	r3, #0
 801a0ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801a0f0:	f000 bc8b 	b.w	801aa0a <depthwise_conv_s8_mult_4+0x97a>
        {
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
 801a0f4:	2300      	movs	r3, #0
 801a0f6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801a0fa:	2300      	movs	r3, #0
 801a0fc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801a100:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a104:	2b00      	cmp	r3, #0
 801a106:	dc03      	bgt.n	801a110 <depthwise_conv_s8_mult_4+0x80>
 801a108:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a10c:	425b      	negs	r3, r3
 801a10e:	e000      	b.n	801a112 <depthwise_conv_s8_mult_4+0x82>
 801a110:	2300      	movs	r3, #0
 801a112:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801a116:	f000 bc65 	b.w	801a9e4 <depthwise_conv_s8_mult_4+0x954>
                 ++in_ch, out_ch += ch_mult)
            {
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
 801a11a:	2300      	movs	r3, #0
 801a11c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801a120:	f000 bc4d 	b.w	801a9be <depthwise_conv_s8_mult_4+0x92e>
                {
                    int32_t out_buff[4];

                    out_buff[0] = bias[out_ch + 0 + mult_tile];
 801a124:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801a128:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a12c:	4413      	add	r3, r2
 801a12e:	009b      	lsls	r3, r3, #2
 801a130:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801a134:	4413      	add	r3, r2
 801a136:	681a      	ldr	r2, [r3, #0]
 801a138:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a13c:	601a      	str	r2, [r3, #0]
                    out_buff[1] = bias[out_ch + 1 + mult_tile];
 801a13e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a142:	1c5a      	adds	r2, r3, #1
 801a144:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a148:	4413      	add	r3, r2
 801a14a:	009b      	lsls	r3, r3, #2
 801a14c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801a150:	4413      	add	r3, r2
 801a152:	681a      	ldr	r2, [r3, #0]
 801a154:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a158:	605a      	str	r2, [r3, #4]
                    out_buff[2] = bias[out_ch + 2 + mult_tile];
 801a15a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a15e:	1c9a      	adds	r2, r3, #2
 801a160:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a164:	4413      	add	r3, r2
 801a166:	009b      	lsls	r3, r3, #2
 801a168:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801a16c:	4413      	add	r3, r2
 801a16e:	681a      	ldr	r2, [r3, #0]
 801a170:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a174:	609a      	str	r2, [r3, #8]
                    out_buff[3] = bias[out_ch + 3 + mult_tile];
 801a176:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a17a:	1cda      	adds	r2, r3, #3
 801a17c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a180:	4413      	add	r3, r2
 801a182:	009b      	lsls	r3, r3, #2
 801a184:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801a188:	4413      	add	r3, r2
 801a18a:	681a      	ldr	r2, [r3, #0]
 801a18c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a190:	60da      	str	r2, [r3, #12]

                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
 801a192:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a196:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801a19a:	e0cd      	b.n	801a338 <depthwise_conv_s8_mult_4+0x2a8>
                    {
                        int32_t ker_idx = ker_h * (output_ch * kernel_x) + ker_w_start * output_ch + out_ch;
 801a19c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801a1a0:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 801a1a4:	fb02 f303 	mul.w	r3, r2, r3
 801a1a8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801a1ac:	fb02 f203 	mul.w	r2, r2, r3
 801a1b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801a1b4:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 801a1b8:	fb01 f303 	mul.w	r3, r1, r3
 801a1bc:	4413      	add	r3, r2
 801a1be:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801a1c2:	4413      	add	r3, r2
 801a1c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                        int32_t in_idx = (in_h + ker_h) * (input_ch * input_x) + in_w * input_ch + in_ch;
 801a1c8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801a1cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801a1d0:	4413      	add	r3, r2
 801a1d2:	f107 0218 	add.w	r2, r7, #24
 801a1d6:	f107 0120 	add.w	r1, r7, #32
 801a1da:	6812      	ldr	r2, [r2, #0]
 801a1dc:	6809      	ldr	r1, [r1, #0]
 801a1de:	fb01 f202 	mul.w	r2, r1, r2
 801a1e2:	fb02 f203 	mul.w	r2, r2, r3
 801a1e6:	f107 0118 	add.w	r1, r7, #24
 801a1ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a1ee:	6809      	ldr	r1, [r1, #0]
 801a1f0:	fb01 f303 	mul.w	r3, r1, r3
 801a1f4:	4413      	add	r3, r2
 801a1f6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801a1fa:	4413      	add	r3, r2
 801a1fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
 801a200:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801a204:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801a208:	e081      	b.n	801a30e <depthwise_conv_s8_mult_4+0x27e>
                             ++ker_w, ker_idx += output_ch)
                        {
                            int32_t in_val = input[in_idx + ker_w * input_ch] + input_offset;
 801a20a:	f107 0218 	add.w	r2, r7, #24
 801a20e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a212:	6812      	ldr	r2, [r2, #0]
 801a214:	fb02 f203 	mul.w	r2, r2, r3
 801a218:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a21c:	4413      	add	r3, r2
 801a21e:	461a      	mov	r2, r3
 801a220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	4413      	add	r3, r2
 801a228:	f993 3000 	ldrsb.w	r3, [r3]
 801a22c:	461a      	mov	r2, r3
 801a22e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801a232:	4413      	add	r3, r2
 801a234:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                            out_buff[0] += in_val * kernel[ker_idx + 0 + mult_tile];
 801a238:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a23c:	681a      	ldr	r2, [r3, #0]
 801a23e:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 801a242:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a246:	440b      	add	r3, r1
 801a248:	4619      	mov	r1, r3
 801a24a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801a24e:	440b      	add	r3, r1
 801a250:	f993 3000 	ldrsb.w	r3, [r3]
 801a254:	4619      	mov	r1, r3
 801a256:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a25a:	fb03 f301 	mul.w	r3, r3, r1
 801a25e:	441a      	add	r2, r3
 801a260:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a264:	601a      	str	r2, [r3, #0]
                            out_buff[1] += in_val * kernel[ker_idx + 1 + mult_tile];
 801a266:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a26a:	685a      	ldr	r2, [r3, #4]
 801a26c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801a270:	1c59      	adds	r1, r3, #1
 801a272:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a276:	440b      	add	r3, r1
 801a278:	4619      	mov	r1, r3
 801a27a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801a27e:	440b      	add	r3, r1
 801a280:	f993 3000 	ldrsb.w	r3, [r3]
 801a284:	4619      	mov	r1, r3
 801a286:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a28a:	fb03 f301 	mul.w	r3, r3, r1
 801a28e:	441a      	add	r2, r3
 801a290:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a294:	605a      	str	r2, [r3, #4]
                            out_buff[2] += in_val * kernel[ker_idx + 2 + mult_tile];
 801a296:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a29a:	689a      	ldr	r2, [r3, #8]
 801a29c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801a2a0:	1c99      	adds	r1, r3, #2
 801a2a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a2a6:	440b      	add	r3, r1
 801a2a8:	4619      	mov	r1, r3
 801a2aa:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801a2ae:	440b      	add	r3, r1
 801a2b0:	f993 3000 	ldrsb.w	r3, [r3]
 801a2b4:	4619      	mov	r1, r3
 801a2b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a2ba:	fb03 f301 	mul.w	r3, r3, r1
 801a2be:	441a      	add	r2, r3
 801a2c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a2c4:	609a      	str	r2, [r3, #8]
                            out_buff[3] += in_val * kernel[ker_idx + 3 + mult_tile];
 801a2c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a2ca:	68da      	ldr	r2, [r3, #12]
 801a2cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801a2d0:	1cd9      	adds	r1, r3, #3
 801a2d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a2d6:	440b      	add	r3, r1
 801a2d8:	4619      	mov	r1, r3
 801a2da:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801a2de:	440b      	add	r3, r1
 801a2e0:	f993 3000 	ldrsb.w	r3, [r3]
 801a2e4:	4619      	mov	r1, r3
 801a2e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a2ea:	fb03 f301 	mul.w	r3, r3, r1
 801a2ee:	441a      	add	r2, r3
 801a2f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a2f4:	60da      	str	r2, [r3, #12]
                             ++ker_w, ker_idx += output_ch)
 801a2f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a2fa:	3301      	adds	r3, #1
 801a2fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801a300:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801a304:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801a308:	4413      	add	r3, r2
 801a30a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
 801a30e:	f107 0320 	add.w	r3, r7, #32
 801a312:	681a      	ldr	r2, [r3, #0]
 801a314:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a318:	1ad2      	subs	r2, r2, r3
 801a31a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a31e:	4293      	cmp	r3, r2
 801a320:	bfa8      	it	ge
 801a322:	4613      	movge	r3, r2
 801a324:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801a328:	429a      	cmp	r2, r3
 801a32a:	f6ff af6e 	blt.w	801a20a <depthwise_conv_s8_mult_4+0x17a>
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
 801a32e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801a332:	3301      	adds	r3, #1
 801a334:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801a338:	f107 031c 	add.w	r3, r7, #28
 801a33c:	681a      	ldr	r2, [r3, #0]
 801a33e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801a342:	1ad2      	subs	r2, r2, r3
 801a344:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801a348:	4293      	cmp	r3, r2
 801a34a:	bfa8      	it	ge
 801a34c:	4613      	movge	r3, r2
 801a34e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801a352:	429a      	cmp	r2, r3
 801a354:	f6ff af22 	blt.w	801a19c <depthwise_conv_s8_mult_4+0x10c>
                    res = vmaxq_s32(res, vdupq_n_s32(output_activation_min));
                    res = vminq_s32(res, vdupq_n_s32(output_activation_max));
                    vstrbq_s32(output, res);
                    output += 4;
#else
                    out_buff[0] = arm_nn_requantize(
 801a358:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a35c:	6819      	ldr	r1, [r3, #0]
                        out_buff[0], output_mult[out_ch + 0 + mult_tile], output_shift[out_ch + 0 + mult_tile]);
 801a35e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801a362:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a366:	4413      	add	r3, r2
 801a368:	009b      	lsls	r3, r3, #2
 801a36a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a36e:	4413      	add	r3, r2
                    out_buff[0] = arm_nn_requantize(
 801a370:	681a      	ldr	r2, [r3, #0]
                        out_buff[0], output_mult[out_ch + 0 + mult_tile], output_shift[out_ch + 0 + mult_tile]);
 801a372:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 801a376:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a37a:	4403      	add	r3, r0
 801a37c:	009b      	lsls	r3, r3, #2
 801a37e:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801a382:	4403      	add	r3, r0
                    out_buff[0] = arm_nn_requantize(
 801a384:	681b      	ldr	r3, [r3, #0]
 801a386:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801a38a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801a38e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801a392:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a396:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a39a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a39e:	fa02 f303 	lsl.w	r3, r2, r3
 801a3a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 801a3a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a3a8:	67bb      	str	r3, [r7, #120]	; 0x78
    q31_t result = 0;
 801a3aa:	2300      	movs	r3, #0
 801a3ac:	677b      	str	r3, [r7, #116]	; 0x74
    mult.word.low = 1 << 30;
 801a3ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a3b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a3b6:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a3b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a3bc:	2200      	movs	r2, #0
 801a3be:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a3c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 801a3c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a3c6:	461a      	mov	r2, r3
 801a3c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801a3cc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801a3ce:	4608      	mov	r0, r1
 801a3d0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801a3d4:	fb00 f503 	mul.w	r5, r0, r3
 801a3d8:	fb02 f401 	mul.w	r4, r2, r1
 801a3dc:	442c      	add	r4, r5
 801a3de:	fba2 2300 	umull	r2, r3, r2, r0
 801a3e2:	18e1      	adds	r1, r4, r3
 801a3e4:	460b      	mov	r3, r1
 801a3e6:	eb18 0102 	adds.w	r1, r8, r2
 801a3ea:	6039      	str	r1, [r7, #0]
 801a3ec:	eb49 0303 	adc.w	r3, r9, r3
 801a3f0:	607b      	str	r3, [r7, #4]
 801a3f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 801a3f6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    result = (int32_t)(mult.long_long >> 31);
 801a3fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801a3fe:	f04f 0200 	mov.w	r2, #0
 801a402:	f04f 0300 	mov.w	r3, #0
 801a406:	0fc2      	lsrs	r2, r0, #31
 801a408:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a40c:	17cb      	asrs	r3, r1, #31
 801a40e:	4613      	mov	r3, r2
 801a410:	677b      	str	r3, [r7, #116]	; 0x74
    return result;
 801a412:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a418:	2b00      	cmp	r3, #0
 801a41a:	dc03      	bgt.n	801a424 <depthwise_conv_s8_mult_4+0x394>
 801a41c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a420:	425b      	negs	r3, r3
 801a422:	e000      	b.n	801a426 <depthwise_conv_s8_mult_4+0x396>
 801a424:	2300      	movs	r3, #0
 801a426:	673a      	str	r2, [r7, #112]	; 0x70
 801a428:	66fb      	str	r3, [r7, #108]	; 0x6c
    q31_t result = 0;
 801a42a:	2300      	movs	r3, #0
 801a42c:	66bb      	str	r3, [r7, #104]	; 0x68
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a42e:	2201      	movs	r2, #1
 801a430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a432:	fa02 f303 	lsl.w	r3, r2, r3
 801a436:	3b01      	subs	r3, #1
 801a438:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t remainder = remainder_mask & dividend;
 801a43a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801a43c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a43e:	4013      	ands	r3, r2
 801a440:	663b      	str	r3, [r7, #96]	; 0x60
    result = dividend >> exponent;
 801a442:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801a444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a446:	fa42 f303 	asr.w	r3, r2, r3
 801a44a:	66bb      	str	r3, [r7, #104]	; 0x68
    q31_t threshold = remainder_mask >> 1;
 801a44c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a44e:	105b      	asrs	r3, r3, #1
 801a450:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (result < 0)
 801a452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a454:	2b00      	cmp	r3, #0
 801a456:	da02      	bge.n	801a45e <depthwise_conv_s8_mult_4+0x3ce>
        threshold++;
 801a458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a45a:	3301      	adds	r3, #1
 801a45c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (remainder > threshold)
 801a45e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a462:	429a      	cmp	r2, r3
 801a464:	dd02      	ble.n	801a46c <depthwise_conv_s8_mult_4+0x3dc>
        result++;
 801a466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a468:	3301      	adds	r3, #1
 801a46a:	66bb      	str	r3, [r7, #104]	; 0x68
    return result;
 801a46c:	6eba      	ldr	r2, [r7, #104]	; 0x68
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a46e:	bf00      	nop
 801a470:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a474:	601a      	str	r2, [r3, #0]
                    out_buff[1] = arm_nn_requantize(
 801a476:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a47a:	6859      	ldr	r1, [r3, #4]
                        out_buff[1], output_mult[out_ch + 1 + mult_tile], output_shift[out_ch + 1 + mult_tile]);
 801a47c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a480:	1c5a      	adds	r2, r3, #1
 801a482:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a486:	4413      	add	r3, r2
 801a488:	009b      	lsls	r3, r3, #2
 801a48a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a48e:	4413      	add	r3, r2
                    out_buff[1] = arm_nn_requantize(
 801a490:	681a      	ldr	r2, [r3, #0]
                        out_buff[1], output_mult[out_ch + 1 + mult_tile], output_shift[out_ch + 1 + mult_tile]);
 801a492:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a496:	1c58      	adds	r0, r3, #1
 801a498:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a49c:	4403      	add	r3, r0
 801a49e:	009b      	lsls	r3, r3, #2
 801a4a0:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801a4a4:	4403      	add	r3, r0
                    out_buff[1] = arm_nn_requantize(
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 801a4ac:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801a4b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801a4b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a4b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a4bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801a4c0:	fa02 f303 	lsl.w	r3, r2, r3
 801a4c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801a4c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a4cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q31_t result = 0;
 801a4d0:	2300      	movs	r3, #0
 801a4d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    mult.word.low = 1 << 30;
 801a4d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a4da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a4de:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a4e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a4e4:	2200      	movs	r2, #0
 801a4e6:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a4e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 801a4ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a4f0:	461a      	mov	r2, r3
 801a4f2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801a4f6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801a4fa:	4608      	mov	r0, r1
 801a4fc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801a500:	fb00 f503 	mul.w	r5, r0, r3
 801a504:	fb02 f401 	mul.w	r4, r2, r1
 801a508:	442c      	add	r4, r5
 801a50a:	fba2 2300 	umull	r2, r3, r2, r0
 801a50e:	18e1      	adds	r1, r4, r3
 801a510:	460b      	mov	r3, r1
 801a512:	eb18 0102 	adds.w	r1, r8, r2
 801a516:	60b9      	str	r1, [r7, #8]
 801a518:	eb49 0303 	adc.w	r3, r9, r3
 801a51c:	60fb      	str	r3, [r7, #12]
 801a51e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801a522:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    result = (int32_t)(mult.long_long >> 31);
 801a526:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801a52a:	f04f 0200 	mov.w	r2, #0
 801a52e:	f04f 0300 	mov.w	r3, #0
 801a532:	0fc2      	lsrs	r2, r0, #31
 801a534:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a538:	17cb      	asrs	r3, r1, #31
 801a53a:	4613      	mov	r3, r2
 801a53c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return result;
 801a540:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a544:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a548:	2b00      	cmp	r3, #0
 801a54a:	dc03      	bgt.n	801a554 <depthwise_conv_s8_mult_4+0x4c4>
 801a54c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a550:	425b      	negs	r3, r3
 801a552:	e000      	b.n	801a556 <depthwise_conv_s8_mult_4+0x4c6>
 801a554:	2300      	movs	r3, #0
 801a556:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801a55a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    q31_t result = 0;
 801a55e:	2300      	movs	r3, #0
 801a560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a564:	2201      	movs	r2, #1
 801a566:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a56a:	fa02 f303 	lsl.w	r3, r2, r3
 801a56e:	3b01      	subs	r3, #1
 801a570:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int32_t remainder = remainder_mask & dividend;
 801a574:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801a578:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a57c:	4013      	ands	r3, r2
 801a57e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    result = dividend >> exponent;
 801a582:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801a586:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a58a:	fa42 f303 	asr.w	r3, r2, r3
 801a58e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    q31_t threshold = remainder_mask >> 1;
 801a592:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a596:	105b      	asrs	r3, r3, #1
 801a598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (result < 0)
 801a59c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	da04      	bge.n	801a5ae <depthwise_conv_s8_mult_4+0x51e>
        threshold++;
 801a5a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a5a8:	3301      	adds	r3, #1
 801a5aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (remainder > threshold)
 801a5ae:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801a5b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a5b6:	429a      	cmp	r2, r3
 801a5b8:	dd04      	ble.n	801a5c4 <depthwise_conv_s8_mult_4+0x534>
        result++;
 801a5ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a5be:	3301      	adds	r3, #1
 801a5c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return result;
 801a5c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a5c8:	bf00      	nop
 801a5ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a5ce:	605a      	str	r2, [r3, #4]
                    out_buff[2] = arm_nn_requantize(
 801a5d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a5d4:	6899      	ldr	r1, [r3, #8]
                        out_buff[2], output_mult[out_ch + 2 + mult_tile], output_shift[out_ch + 2 + mult_tile]);
 801a5d6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a5da:	1c9a      	adds	r2, r3, #2
 801a5dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a5e0:	4413      	add	r3, r2
 801a5e2:	009b      	lsls	r3, r3, #2
 801a5e4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a5e8:	4413      	add	r3, r2
                    out_buff[2] = arm_nn_requantize(
 801a5ea:	681a      	ldr	r2, [r3, #0]
                        out_buff[2], output_mult[out_ch + 2 + mult_tile], output_shift[out_ch + 2 + mult_tile]);
 801a5ec:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a5f0:	1c98      	adds	r0, r3, #2
 801a5f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a5f6:	4403      	add	r3, r0
 801a5f8:	009b      	lsls	r3, r3, #2
 801a5fa:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801a5fe:	4403      	add	r3, r0
                    out_buff[2] = arm_nn_requantize(
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 801a606:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 801a60a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801a60e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a612:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a616:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801a61a:	fa02 f303 	lsl.w	r3, r2, r3
 801a61e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801a622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    q31_t result = 0;
 801a62a:	2300      	movs	r3, #0
 801a62c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mult.word.low = 1 << 30;
 801a630:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a634:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a638:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a63a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a63e:	2200      	movs	r2, #0
 801a640:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a642:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 801a646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801a64a:	461a      	mov	r2, r3
 801a64c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801a650:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801a654:	4608      	mov	r0, r1
 801a656:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801a65a:	fb00 f503 	mul.w	r5, r0, r3
 801a65e:	fb02 f401 	mul.w	r4, r2, r1
 801a662:	442c      	add	r4, r5
 801a664:	fba2 2300 	umull	r2, r3, r2, r0
 801a668:	18e1      	adds	r1, r4, r3
 801a66a:	460b      	mov	r3, r1
 801a66c:	eb18 0102 	adds.w	r1, r8, r2
 801a670:	6139      	str	r1, [r7, #16]
 801a672:	eb49 0303 	adc.w	r3, r9, r3
 801a676:	617b      	str	r3, [r7, #20]
 801a678:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801a67c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 801a680:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801a684:	f04f 0200 	mov.w	r2, #0
 801a688:	f04f 0300 	mov.w	r3, #0
 801a68c:	0fc2      	lsrs	r2, r0, #31
 801a68e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a692:	17cb      	asrs	r3, r1, #31
 801a694:	4613      	mov	r3, r2
 801a696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    return result;
 801a69a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a69e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	dc03      	bgt.n	801a6ae <depthwise_conv_s8_mult_4+0x61e>
 801a6a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a6aa:	425b      	negs	r3, r3
 801a6ac:	e000      	b.n	801a6b0 <depthwise_conv_s8_mult_4+0x620>
 801a6ae:	2300      	movs	r3, #0
 801a6b0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 801a6b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    q31_t result = 0;
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a6be:	2201      	movs	r2, #1
 801a6c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801a6c4:	fa02 f303 	lsl.w	r3, r2, r3
 801a6c8:	3b01      	subs	r3, #1
 801a6ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int32_t remainder = remainder_mask & dividend;
 801a6ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801a6d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a6d6:	4013      	ands	r3, r2
 801a6d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result = dividend >> exponent;
 801a6dc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801a6e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801a6e4:	fa42 f303 	asr.w	r3, r2, r3
 801a6e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    q31_t threshold = remainder_mask >> 1;
 801a6ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a6f0:	105b      	asrs	r3, r3, #1
 801a6f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (result < 0)
 801a6f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	da04      	bge.n	801a708 <depthwise_conv_s8_mult_4+0x678>
        threshold++;
 801a6fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801a702:	3301      	adds	r3, #1
 801a704:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (remainder > threshold)
 801a708:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801a70c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801a710:	429a      	cmp	r2, r3
 801a712:	dd04      	ble.n	801a71e <depthwise_conv_s8_mult_4+0x68e>
        result++;
 801a714:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801a718:	3301      	adds	r3, #1
 801a71a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    return result;
 801a71e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a722:	bf00      	nop
 801a724:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a728:	609a      	str	r2, [r3, #8]
                    out_buff[3] = arm_nn_requantize(
 801a72a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a72e:	68d9      	ldr	r1, [r3, #12]
                        out_buff[3], output_mult[out_ch + 3 + mult_tile], output_shift[out_ch + 3 + mult_tile]);
 801a730:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a734:	1cda      	adds	r2, r3, #3
 801a736:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a73a:	4413      	add	r3, r2
 801a73c:	009b      	lsls	r3, r3, #2
 801a73e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a742:	4413      	add	r3, r2
                    out_buff[3] = arm_nn_requantize(
 801a744:	681a      	ldr	r2, [r3, #0]
                        out_buff[3], output_mult[out_ch + 3 + mult_tile], output_shift[out_ch + 3 + mult_tile]);
 801a746:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a74a:	1cd8      	adds	r0, r3, #3
 801a74c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a750:	4403      	add	r3, r0
 801a752:	009b      	lsls	r3, r3, #2
 801a754:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801a758:	4403      	add	r3, r0
                    out_buff[3] = arm_nn_requantize(
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 801a760:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 801a764:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801a768:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a76c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a770:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801a774:	fa02 f303 	lsl.w	r3, r2, r3
 801a778:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801a77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801a780:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    q31_t result = 0;
 801a784:	2300      	movs	r3, #0
 801a786:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    mult.word.low = 1 << 30;
 801a78a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a78e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a792:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a798:	2200      	movs	r2, #0
 801a79a:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a79c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 801a7a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801a7a4:	461a      	mov	r2, r3
 801a7a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801a7aa:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 801a7ae:	4608      	mov	r0, r1
 801a7b0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801a7b4:	fb00 f503 	mul.w	r5, r0, r3
 801a7b8:	fb02 f401 	mul.w	r4, r2, r1
 801a7bc:	442c      	add	r4, r5
 801a7be:	fba2 2300 	umull	r2, r3, r2, r0
 801a7c2:	18e1      	adds	r1, r4, r3
 801a7c4:	460b      	mov	r3, r1
 801a7c6:	eb18 0a02 	adds.w	sl, r8, r2
 801a7ca:	eb49 0b03 	adc.w	fp, r9, r3
 801a7ce:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
    result = (int32_t)(mult.long_long >> 31);
 801a7d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801a7d6:	f04f 0200 	mov.w	r2, #0
 801a7da:	f04f 0300 	mov.w	r3, #0
 801a7de:	0fc2      	lsrs	r2, r0, #31
 801a7e0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a7e4:	17cb      	asrs	r3, r1, #31
 801a7e6:	4613      	mov	r3, r2
 801a7e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    return result;
 801a7ec:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a7f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	dc03      	bgt.n	801a800 <depthwise_conv_s8_mult_4+0x770>
 801a7f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a7fc:	425b      	negs	r3, r3
 801a7fe:	e000      	b.n	801a802 <depthwise_conv_s8_mult_4+0x772>
 801a800:	2300      	movs	r3, #0
 801a802:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 801a806:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    q31_t result = 0;
 801a80a:	2300      	movs	r3, #0
 801a80c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a810:	2201      	movs	r2, #1
 801a812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801a816:	fa02 f303 	lsl.w	r3, r2, r3
 801a81a:	3b01      	subs	r3, #1
 801a81c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    int32_t remainder = remainder_mask & dividend;
 801a820:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801a824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a828:	4013      	ands	r3, r2
 801a82a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    result = dividend >> exponent;
 801a82e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801a832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801a836:	fa42 f303 	asr.w	r3, r2, r3
 801a83a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    q31_t threshold = remainder_mask >> 1;
 801a83e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a842:	105b      	asrs	r3, r3, #1
 801a844:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (result < 0)
 801a848:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	da04      	bge.n	801a85a <depthwise_conv_s8_mult_4+0x7ca>
        threshold++;
 801a850:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a854:	3301      	adds	r3, #1
 801a856:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (remainder > threshold)
 801a85a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801a85e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a862:	429a      	cmp	r2, r3
 801a864:	dd04      	ble.n	801a870 <depthwise_conv_s8_mult_4+0x7e0>
        result++;
 801a866:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801a86a:	3301      	adds	r3, #1
 801a86c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    return result;
 801a870:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a874:	bf00      	nop
 801a876:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a87a:	60da      	str	r2, [r3, #12]

                    out_buff[0] += output_offset;
 801a87c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a880:	681a      	ldr	r2, [r3, #0]
 801a882:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a886:	441a      	add	r2, r3
 801a888:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a88c:	601a      	str	r2, [r3, #0]
                    out_buff[1] += output_offset;
 801a88e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a892:	685a      	ldr	r2, [r3, #4]
 801a894:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a898:	441a      	add	r2, r3
 801a89a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a89e:	605a      	str	r2, [r3, #4]
                    out_buff[2] += output_offset;
 801a8a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a8a4:	689a      	ldr	r2, [r3, #8]
 801a8a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a8aa:	441a      	add	r2, r3
 801a8ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a8b0:	609a      	str	r2, [r3, #8]
                    out_buff[3] += output_offset;
 801a8b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a8b6:	68da      	ldr	r2, [r3, #12]
 801a8b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a8bc:	441a      	add	r2, r3
 801a8be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a8c2:	60da      	str	r2, [r3, #12]

                    out_buff[0] = MIN(MAX(out_buff[0], output_activation_min), output_activation_max);
 801a8c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a8c8:	681a      	ldr	r2, [r3, #0]
 801a8ca:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801a8ce:	429a      	cmp	r2, r3
 801a8d0:	bfb8      	it	lt
 801a8d2:	461a      	movlt	r2, r3
 801a8d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a8d8:	429a      	cmp	r2, r3
 801a8da:	bfa8      	it	ge
 801a8dc:	461a      	movge	r2, r3
 801a8de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a8e2:	601a      	str	r2, [r3, #0]
                    out_buff[1] = MIN(MAX(out_buff[1], output_activation_min), output_activation_max);
 801a8e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a8e8:	685a      	ldr	r2, [r3, #4]
 801a8ea:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801a8ee:	429a      	cmp	r2, r3
 801a8f0:	bfb8      	it	lt
 801a8f2:	461a      	movlt	r2, r3
 801a8f4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a8f8:	429a      	cmp	r2, r3
 801a8fa:	bfa8      	it	ge
 801a8fc:	461a      	movge	r2, r3
 801a8fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a902:	605a      	str	r2, [r3, #4]
                    out_buff[2] = MIN(MAX(out_buff[2], output_activation_min), output_activation_max);
 801a904:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a908:	689a      	ldr	r2, [r3, #8]
 801a90a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801a90e:	429a      	cmp	r2, r3
 801a910:	bfb8      	it	lt
 801a912:	461a      	movlt	r2, r3
 801a914:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a918:	429a      	cmp	r2, r3
 801a91a:	bfa8      	it	ge
 801a91c:	461a      	movge	r2, r3
 801a91e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a922:	609a      	str	r2, [r3, #8]
                    out_buff[3] = MIN(MAX(out_buff[3], output_activation_min), output_activation_max);
 801a924:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a928:	68da      	ldr	r2, [r3, #12]
 801a92a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801a92e:	429a      	cmp	r2, r3
 801a930:	bfb8      	it	lt
 801a932:	461a      	movlt	r2, r3
 801a934:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a938:	429a      	cmp	r2, r3
 801a93a:	bfa8      	it	ge
 801a93c:	461a      	movge	r2, r3
 801a93e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a942:	60da      	str	r2, [r3, #12]

                    output[out_idx++] = (int8_t)out_buff[0];
 801a944:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a948:	6819      	ldr	r1, [r3, #0]
 801a94a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801a94e:	1c5a      	adds	r2, r3, #1
 801a950:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801a954:	461a      	mov	r2, r3
 801a956:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801a95a:	4413      	add	r3, r2
 801a95c:	b24a      	sxtb	r2, r1
 801a95e:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[1];
 801a960:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a964:	6859      	ldr	r1, [r3, #4]
 801a966:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801a96a:	1c5a      	adds	r2, r3, #1
 801a96c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801a970:	461a      	mov	r2, r3
 801a972:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801a976:	4413      	add	r3, r2
 801a978:	b24a      	sxtb	r2, r1
 801a97a:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[2];
 801a97c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a980:	6899      	ldr	r1, [r3, #8]
 801a982:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801a986:	1c5a      	adds	r2, r3, #1
 801a988:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801a98c:	461a      	mov	r2, r3
 801a98e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801a992:	4413      	add	r3, r2
 801a994:	b24a      	sxtb	r2, r1
 801a996:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[3];
 801a998:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a99c:	68d9      	ldr	r1, [r3, #12]
 801a99e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801a9a2:	1c5a      	adds	r2, r3, #1
 801a9a4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801a9a8:	461a      	mov	r2, r3
 801a9aa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801a9ae:	4413      	add	r3, r2
 801a9b0:	b24a      	sxtb	r2, r1
 801a9b2:	701a      	strb	r2, [r3, #0]
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
 801a9b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a9b8:	3304      	adds	r3, #4
 801a9ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801a9be:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801a9c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a9c6:	429a      	cmp	r2, r3
 801a9c8:	f6ff abac 	blt.w	801a124 <depthwise_conv_s8_mult_4+0x94>
                 ++in_ch, out_ch += ch_mult)
 801a9cc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801a9d0:	3301      	adds	r3, #1
 801a9d2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801a9d6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801a9da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a9de:	4413      	add	r3, r2
 801a9e0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
 801a9e4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801a9e8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801a9ec:	429a      	cmp	r2, r3
 801a9ee:	f6ff ab94 	blt.w	801a11a <depthwise_conv_s8_mult_4+0x8a>
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801a9f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801a9f6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801a9fa:	4413      	add	r3, r2
 801a9fc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801aa00:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801aa04:	3301      	adds	r3, #1
 801aa06:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801aa0a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801aa0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801aa12:	429a      	cmp	r2, r3
 801aa14:	f6ff ab6e 	blt.w	801a0f4 <depthwise_conv_s8_mult_4+0x64>
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801aa18:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801aa1c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801aa20:	4413      	add	r3, r2
 801aa22:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801aa26:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801aa2a:	3301      	adds	r3, #1
 801aa2c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 801aa30:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801aa34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801aa38:	429a      	cmp	r2, r3
 801aa3a:	f6ff ab46 	blt.w	801a0ca <depthwise_conv_s8_mult_4+0x3a>
#endif
                }
            }
        }
    }
}
 801aa3e:	bf00      	nop
 801aa40:	bf00      	nop
 801aa42:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 801aa46:	46bd      	mov	sp, r7
 801aa48:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801aa4c:	4770      	bx	lr

0801aa4e <depthwise_conv_s8_generic>:
                                      const uint16_t output_y,
                                      const int32_t output_offset,
                                      const int32_t input_offset,
                                      const int32_t output_activation_min,
                                      const int32_t output_activation_max)
{
 801aa4e:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801aa52:	b0a4      	sub	sp, #144	; 0x90
 801aa54:	af00      	add	r7, sp, #0
 801aa56:	60f8      	str	r0, [r7, #12]
 801aa58:	4608      	mov	r0, r1
 801aa5a:	4611      	mov	r1, r2
 801aa5c:	461a      	mov	r2, r3
 801aa5e:	4603      	mov	r3, r0
 801aa60:	817b      	strh	r3, [r7, #10]
 801aa62:	460b      	mov	r3, r1
 801aa64:	813b      	strh	r3, [r7, #8]
 801aa66:	4613      	mov	r3, r2
 801aa68:	80fb      	strh	r3, [r7, #6]
    (void)output_ch;
    int i_out = 0;
 801aa6a:	2300      	movs	r3, #0
 801aa6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801aa70:	2300      	movs	r3, #0
 801aa72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801aa76:	e165      	b.n	801ad44 <depthwise_conv_s8_generic+0x2f6>
    {
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
 801aa78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801aa7c:	b29b      	uxth	r3, r3
 801aa7e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 801aa82:	fb12 f303 	smulbb	r3, r2, r3
 801aa86:	b29a      	uxth	r2, r3
 801aa88:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 801aa8c:	1ad3      	subs	r3, r2, r3
 801aa8e:	b29b      	uxth	r3, r3
 801aa90:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801aa94:	2300      	movs	r3, #0
 801aa96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801aa9a:	e147      	b.n	801ad2c <depthwise_conv_s8_generic+0x2de>
        {
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
 801aa9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801aaa0:	b29b      	uxth	r3, r3
 801aaa2:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 801aaa6:	fb12 f303 	smulbb	r3, r2, r3
 801aaaa:	b29a      	uxth	r2, r3
 801aaac:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 801aab0:	1ad3      	subs	r3, r2, r3
 801aab2:	b29b      	uxth	r3, r3
 801aab4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
            for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 801aab8:	2300      	movs	r3, #0
 801aaba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801aabe:	e12a      	b.n	801ad16 <depthwise_conv_s8_generic+0x2c8>
            {
                for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
 801aac0:	2300      	movs	r3, #0
 801aac2:	67fb      	str	r3, [r7, #124]	; 0x7c
 801aac4:	e11c      	b.n	801ad00 <depthwise_conv_s8_generic+0x2b2>
                {
                    const int idx_out_ch = i_ch_mult + i_input_ch * ch_mult;
 801aac6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 801aaca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801aace:	fb02 f303 	mul.w	r3, r2, r3
 801aad2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801aad4:	4413      	add	r3, r2
 801aad6:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t acc_0;
                    /* Condition for kernel start dimension: (base_idx_<x,y> + ker_<x,y>_start) >= 0 */
                    const int ker_y_start = MAX(0, -base_idx_y);
 801aad8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801aadc:	2b00      	cmp	r3, #0
 801aade:	dc03      	bgt.n	801aae8 <depthwise_conv_s8_generic+0x9a>
 801aae0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801aae4:	425b      	negs	r3, r3
 801aae6:	e000      	b.n	801aaea <depthwise_conv_s8_generic+0x9c>
 801aae8:	2300      	movs	r3, #0
 801aaea:	667b      	str	r3, [r7, #100]	; 0x64
                    const int ker_x_start = MAX(0, -base_idx_x);
 801aaec:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	dc03      	bgt.n	801aafc <depthwise_conv_s8_generic+0xae>
 801aaf4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801aaf8:	425b      	negs	r3, r3
 801aafa:	e000      	b.n	801aafe <depthwise_conv_s8_generic+0xb0>
 801aafc:	2300      	movs	r3, #0
 801aafe:	663b      	str	r3, [r7, #96]	; 0x60
                    /* Condition for kernel end dimension: (base_idx_<x,y> + ker_<x,y>_end) < input_<x,y> */
                    const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
 801ab00:	893a      	ldrh	r2, [r7, #8]
 801ab02:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801ab06:	1ad2      	subs	r2, r2, r3
 801ab08:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 801ab0c:	4293      	cmp	r3, r2
 801ab0e:	bfa8      	it	ge
 801ab10:	4613      	movge	r3, r2
 801ab12:	65fb      	str	r3, [r7, #92]	; 0x5c
                    const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
 801ab14:	897a      	ldrh	r2, [r7, #10]
 801ab16:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801ab1a:	1ad2      	subs	r2, r2, r3
 801ab1c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 801ab20:	4293      	cmp	r3, r2
 801ab22:	bfa8      	it	ge
 801ab24:	4613      	movge	r3, r2
 801ab26:	65bb      	str	r3, [r7, #88]	; 0x58
                    acc_0 = bias[idx_out_ch];
 801ab28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ab2a:	009b      	lsls	r3, r3, #2
 801ab2c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801ab30:	4413      	add	r3, r2
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	67bb      	str	r3, [r7, #120]	; 0x78

                    for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801ab36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ab38:	677b      	str	r3, [r7, #116]	; 0x74
 801ab3a:	e048      	b.n	801abce <depthwise_conv_s8_generic+0x180>
                    {
                        const int32_t idx_y = base_idx_y + i_ker_y;
 801ab3c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801ab40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ab42:	4413      	add	r3, r2
 801ab44:	657b      	str	r3, [r7, #84]	; 0x54
                        for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 801ab46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ab48:	673b      	str	r3, [r7, #112]	; 0x70
 801ab4a:	e039      	b.n	801abc0 <depthwise_conv_s8_generic+0x172>
                        {
                            const int32_t idx_x = base_idx_x + i_ker_x;
 801ab4c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801ab50:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801ab52:	4413      	add	r3, r2
 801ab54:	653b      	str	r3, [r7, #80]	; 0x50
                            int32_t idx_0 = (idx_y * input_x + idx_x) * input_ch + i_input_ch;
 801ab56:	897b      	ldrh	r3, [r7, #10]
 801ab58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ab5a:	fb02 f203 	mul.w	r2, r2, r3
 801ab5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab60:	4413      	add	r3, r2
 801ab62:	88fa      	ldrh	r2, [r7, #6]
 801ab64:	fb02 f303 	mul.w	r3, r2, r3
 801ab68:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801ab6c:	4413      	add	r3, r2
 801ab6e:	64fb      	str	r3, [r7, #76]	; 0x4c
                            int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch_mult) + idx_out_ch;
 801ab70:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 801ab74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ab76:	fb02 f203 	mul.w	r2, r2, r3
 801ab7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ab7c:	4413      	add	r3, r2
 801ab7e:	88fa      	ldrh	r2, [r7, #6]
 801ab80:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 801ab84:	fb01 f202 	mul.w	r2, r1, r2
 801ab88:	fb02 f303 	mul.w	r3, r2, r3
 801ab8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ab8e:	4413      	add	r3, r2
 801ab90:	64bb      	str	r3, [r7, #72]	; 0x48

                            acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
 801ab92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ab94:	68fa      	ldr	r2, [r7, #12]
 801ab96:	4413      	add	r3, r2
 801ab98:	f993 3000 	ldrsb.w	r3, [r3]
 801ab9c:	461a      	mov	r2, r3
 801ab9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801aba2:	4413      	add	r3, r2
 801aba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801aba6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801abaa:	440a      	add	r2, r1
 801abac:	f992 2000 	ldrsb.w	r2, [r2]
 801abb0:	fb02 f303 	mul.w	r3, r2, r3
 801abb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801abb6:	4413      	add	r3, r2
 801abb8:	67bb      	str	r3, [r7, #120]	; 0x78
                        for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 801abba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801abbc:	3301      	adds	r3, #1
 801abbe:	673b      	str	r3, [r7, #112]	; 0x70
 801abc0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801abc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801abc4:	429a      	cmp	r2, r3
 801abc6:	dbc1      	blt.n	801ab4c <depthwise_conv_s8_generic+0xfe>
                    for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801abc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801abca:	3301      	adds	r3, #1
 801abcc:	677b      	str	r3, [r7, #116]	; 0x74
 801abce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801abd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801abd2:	429a      	cmp	r2, r3
 801abd4:	dbb2      	blt.n	801ab3c <depthwise_conv_s8_generic+0xee>
                        }
                    }

                    /* Requantize and clamp output to provided range */
                    acc_0 = arm_nn_requantize(acc_0, output_mult[idx_out_ch], output_shift[idx_out_ch]);
 801abd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801abd8:	009b      	lsls	r3, r3, #2
 801abda:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801abde:	4413      	add	r3, r2
 801abe0:	681a      	ldr	r2, [r3, #0]
 801abe2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801abe4:	009b      	lsls	r3, r3, #2
 801abe6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801abea:	440b      	add	r3, r1
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801abf0:	6479      	str	r1, [r7, #68]	; 0x44
 801abf2:	643a      	str	r2, [r7, #64]	; 0x40
 801abf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801abf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801abf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801abfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801abfe:	fa02 f303 	lsl.w	r3, r2, r3
 801ac02:	63bb      	str	r3, [r7, #56]	; 0x38
 801ac04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ac06:	637b      	str	r3, [r7, #52]	; 0x34
    q31_t result = 0;
 801ac08:	2300      	movs	r3, #0
 801ac0a:	633b      	str	r3, [r7, #48]	; 0x30
    mult.word.low = 1 << 30;
 801ac0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ac10:	613b      	str	r3, [r7, #16]
    mult.word.high = 0;
 801ac12:	2300      	movs	r3, #0
 801ac14:	617b      	str	r3, [r7, #20]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801ac16:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801ac1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac1c:	4618      	mov	r0, r3
 801ac1e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801ac22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac24:	461a      	mov	r2, r3
 801ac26:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801ac2a:	fb02 fc01 	mul.w	ip, r2, r1
 801ac2e:	fb00 f603 	mul.w	r6, r0, r3
 801ac32:	4466      	add	r6, ip
 801ac34:	fba0 2302 	umull	r2, r3, r0, r2
 801ac38:	18f1      	adds	r1, r6, r3
 801ac3a:	460b      	mov	r3, r1
 801ac3c:	eb14 0802 	adds.w	r8, r4, r2
 801ac40:	eb45 0903 	adc.w	r9, r5, r3
 801ac44:	e9c7 8904 	strd	r8, r9, [r7, #16]
    result = (int32_t)(mult.long_long >> 31);
 801ac48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801ac4c:	f04f 0200 	mov.w	r2, #0
 801ac50:	f04f 0300 	mov.w	r3, #0
 801ac54:	0fc2      	lsrs	r2, r0, #31
 801ac56:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801ac5a:	17cb      	asrs	r3, r1, #31
 801ac5c:	4613      	mov	r3, r2
 801ac5e:	633b      	str	r3, [r7, #48]	; 0x30
    return result;
 801ac60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ac62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	dc02      	bgt.n	801ac6e <depthwise_conv_s8_generic+0x220>
 801ac68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ac6a:	425b      	negs	r3, r3
 801ac6c:	e000      	b.n	801ac70 <depthwise_conv_s8_generic+0x222>
 801ac6e:	2300      	movs	r3, #0
 801ac70:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ac72:	62bb      	str	r3, [r7, #40]	; 0x28
    q31_t result = 0;
 801ac74:	2300      	movs	r3, #0
 801ac76:	627b      	str	r3, [r7, #36]	; 0x24
    const q31_t remainder_mask = (1 << exponent) - 1;
 801ac78:	2201      	movs	r2, #1
 801ac7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac7c:	fa02 f303 	lsl.w	r3, r2, r3
 801ac80:	3b01      	subs	r3, #1
 801ac82:	623b      	str	r3, [r7, #32]
    int32_t remainder = remainder_mask & dividend;
 801ac84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ac86:	6a3b      	ldr	r3, [r7, #32]
 801ac88:	4013      	ands	r3, r2
 801ac8a:	61fb      	str	r3, [r7, #28]
    result = dividend >> exponent;
 801ac8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ac8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac90:	fa42 f303 	asr.w	r3, r2, r3
 801ac94:	627b      	str	r3, [r7, #36]	; 0x24
    q31_t threshold = remainder_mask >> 1;
 801ac96:	6a3b      	ldr	r3, [r7, #32]
 801ac98:	105b      	asrs	r3, r3, #1
 801ac9a:	61bb      	str	r3, [r7, #24]
    if (result < 0)
 801ac9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	da02      	bge.n	801aca8 <depthwise_conv_s8_generic+0x25a>
        threshold++;
 801aca2:	69bb      	ldr	r3, [r7, #24]
 801aca4:	3301      	adds	r3, #1
 801aca6:	61bb      	str	r3, [r7, #24]
    if (remainder > threshold)
 801aca8:	69fa      	ldr	r2, [r7, #28]
 801acaa:	69bb      	ldr	r3, [r7, #24]
 801acac:	429a      	cmp	r2, r3
 801acae:	dd02      	ble.n	801acb6 <depthwise_conv_s8_generic+0x268>
        result++;
 801acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acb2:	3301      	adds	r3, #1
 801acb4:	627b      	str	r3, [r7, #36]	; 0x24
    return result;
 801acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801acb8:	bf00      	nop
 801acba:	67bb      	str	r3, [r7, #120]	; 0x78
                    acc_0 += output_offset;
 801acbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801acbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801acc2:	4413      	add	r3, r2
 801acc4:	67bb      	str	r3, [r7, #120]	; 0x78
                    acc_0 = MAX(acc_0, output_activation_min);
 801acc6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801acc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801accc:	4293      	cmp	r3, r2
 801acce:	bfb8      	it	lt
 801acd0:	4613      	movlt	r3, r2
 801acd2:	67bb      	str	r3, [r7, #120]	; 0x78
                    acc_0 = MIN(acc_0, output_activation_max);
 801acd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801acd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801acda:	4293      	cmp	r3, r2
 801acdc:	bfa8      	it	ge
 801acde:	4613      	movge	r3, r2
 801ace0:	67bb      	str	r3, [r7, #120]	; 0x78

                    output[i_out++] = acc_0;
 801ace2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ace6:	1c5a      	adds	r2, r3, #1
 801ace8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801acec:	461a      	mov	r2, r3
 801acee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801acf2:	4413      	add	r3, r2
 801acf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801acf6:	b252      	sxtb	r2, r2
 801acf8:	701a      	strb	r2, [r3, #0]
                for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
 801acfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801acfc:	3301      	adds	r3, #1
 801acfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 801ad00:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 801ad04:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801ad06:	429a      	cmp	r2, r3
 801ad08:	f6ff aedd 	blt.w	801aac6 <depthwise_conv_s8_generic+0x78>
            for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 801ad0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ad10:	3301      	adds	r3, #1
 801ad12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801ad16:	88fb      	ldrh	r3, [r7, #6]
 801ad18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801ad1c:	429a      	cmp	r2, r3
 801ad1e:	f6ff aecf 	blt.w	801aac0 <depthwise_conv_s8_generic+0x72>
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801ad22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ad26:	3301      	adds	r3, #1
 801ad28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801ad2c:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 801ad30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801ad34:	429a      	cmp	r2, r3
 801ad36:	f6ff aeb1 	blt.w	801aa9c <depthwise_conv_s8_generic+0x4e>
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801ad3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ad3e:	3301      	adds	r3, #1
 801ad40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801ad44:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 801ad48:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801ad4c:	429a      	cmp	r2, r3
 801ad4e:	f6ff ae93 	blt.w	801aa78 <depthwise_conv_s8_generic+0x2a>
                }
            }
        }
    }
}
 801ad52:	bf00      	nop
 801ad54:	bf00      	nop
 801ad56:	3790      	adds	r7, #144	; 0x90
 801ad58:	46bd      	mov	sp, r7
 801ad5a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801ad5e:	4770      	bx	lr

0801ad60 <arm_depthwise_conv_s8>:
                                 const q7_t *kernel,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output)
{
 801ad60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad64:	b0a4      	sub	sp, #144	; 0x90
 801ad66:	af14      	add	r7, sp, #80	; 0x50
 801ad68:	63f8      	str	r0, [r7, #60]	; 0x3c
 801ad6a:	63b9      	str	r1, [r7, #56]	; 0x38
 801ad6c:	637a      	str	r2, [r7, #52]	; 0x34
 801ad6e:	633b      	str	r3, [r7, #48]	; 0x30
    (void)dw_conv_params->dilation;
    (void)bias_dims;
    (void)ctx;

    if (dw_conv_params->ch_mult % 4 == 0)
 801ad70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad72:	689b      	ldr	r3, [r3, #8]
 801ad74:	f003 0303 	and.w	r3, r3, #3
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d157      	bne.n	801ae2c <arm_depthwise_conv_s8+0xcc>
    {
        depthwise_conv_s8_mult_4(input,
 801ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad7e:	689b      	ldr	r3, [r3, #8]
 801ad80:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ad82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad84:	685a      	ldr	r2, [r3, #4]
 801ad86:	62ba      	str	r2, [r7, #40]	; 0x28
 801ad88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad8a:	68d8      	ldr	r0, [r3, #12]
 801ad8c:	6278      	str	r0, [r7, #36]	; 0x24
 801ad8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ad90:	68de      	ldr	r6, [r3, #12]
 801ad92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad94:	689c      	ldr	r4, [r3, #8]
 801ad96:	623c      	str	r4, [r7, #32]
 801ad98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ad9a:	689d      	ldr	r5, [r3, #8]
 801ad9c:	61fd      	str	r5, [r7, #28]
 801ad9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ada0:	6859      	ldr	r1, [r3, #4]
 801ada2:	61b9      	str	r1, [r7, #24]
 801ada4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ada6:	6958      	ldr	r0, [r3, #20]
 801ada8:	6178      	str	r0, [r7, #20]
 801adaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adac:	699b      	ldr	r3, [r3, #24]
 801adae:	613b      	str	r3, [r7, #16]
 801adb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adb2:	68da      	ldr	r2, [r3, #12]
 801adb4:	60fa      	str	r2, [r7, #12]
 801adb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adb8:	691c      	ldr	r4, [r3, #16]
 801adba:	60bc      	str	r4, [r7, #8]
                                 dw_conv_params->padding.h,
                                 dw_conv_params->stride.w,
                                 dw_conv_params->stride.h,
                                 bias,
                                 output,
                                 quant_params->shift,
 801adbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adbe:	685d      	ldr	r5, [r3, #4]
 801adc0:	607d      	str	r5, [r7, #4]
                                 quant_params->multiplier,
 801adc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adc4:	6819      	ldr	r1, [r3, #0]
 801adc6:	6039      	str	r1, [r7, #0]
        depthwise_conv_s8_mult_4(input,
 801adc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801adca:	689d      	ldr	r5, [r3, #8]
 801adcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801adce:	685c      	ldr	r4, [r3, #4]
 801add0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801add2:	6858      	ldr	r0, [r3, #4]
 801add4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801add6:	6819      	ldr	r1, [r3, #0]
 801add8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801addc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ade0:	9312      	str	r3, [sp, #72]	; 0x48
 801ade2:	9211      	str	r2, [sp, #68]	; 0x44
 801ade4:	9110      	str	r1, [sp, #64]	; 0x40
 801ade6:	900f      	str	r0, [sp, #60]	; 0x3c
 801ade8:	940e      	str	r4, [sp, #56]	; 0x38
 801adea:	950d      	str	r5, [sp, #52]	; 0x34
 801adec:	6839      	ldr	r1, [r7, #0]
 801adee:	910c      	str	r1, [sp, #48]	; 0x30
 801adf0:	687d      	ldr	r5, [r7, #4]
 801adf2:	950b      	str	r5, [sp, #44]	; 0x2c
 801adf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801adf6:	930a      	str	r3, [sp, #40]	; 0x28
 801adf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801adfa:	9309      	str	r3, [sp, #36]	; 0x24
 801adfc:	68bc      	ldr	r4, [r7, #8]
 801adfe:	9408      	str	r4, [sp, #32]
 801ae00:	68fa      	ldr	r2, [r7, #12]
 801ae02:	9207      	str	r2, [sp, #28]
 801ae04:	693b      	ldr	r3, [r7, #16]
 801ae06:	9306      	str	r3, [sp, #24]
 801ae08:	6978      	ldr	r0, [r7, #20]
 801ae0a:	9005      	str	r0, [sp, #20]
 801ae0c:	69b9      	ldr	r1, [r7, #24]
 801ae0e:	9104      	str	r1, [sp, #16]
 801ae10:	69fd      	ldr	r5, [r7, #28]
 801ae12:	9503      	str	r5, [sp, #12]
 801ae14:	6a3c      	ldr	r4, [r7, #32]
 801ae16:	9402      	str	r4, [sp, #8]
 801ae18:	9601      	str	r6, [sp, #4]
 801ae1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ae1c:	9300      	str	r3, [sp, #0]
 801ae1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ae22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ae24:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801ae26:	f7ff f933 	bl	801a090 <depthwise_conv_s8_mult_4>
 801ae2a:	e063      	b.n	801aef4 <arm_depthwise_conv_s8+0x194>
                                 dw_conv_params->activation.max);
    }
    else
    {
        depthwise_conv_s8_generic(input,
                                  input_dims->w,
 801ae2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae2e:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801ae30:	fa1f fc83 	uxth.w	ip, r3
                                  input_dims->h,
 801ae34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae36:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801ae38:	fa1f fe83 	uxth.w	lr, r3
                                  input_dims->c,
 801ae3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae3e:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801ae40:	fa1f f883 	uxth.w	r8, r3
                                  kernel,
                                  output_dims->c,
 801ae44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ae46:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801ae48:	b29e      	uxth	r6, r3
                                  dw_conv_params->ch_mult,
 801ae4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae4c:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801ae4e:	b29b      	uxth	r3, r3
 801ae50:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  filter_dims->w,
 801ae52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ae54:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801ae56:	b29a      	uxth	r2, r3
 801ae58:	62ba      	str	r2, [r7, #40]	; 0x28
                                  filter_dims->h,
 801ae5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ae5c:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801ae5e:	b299      	uxth	r1, r3
 801ae60:	6279      	str	r1, [r7, #36]	; 0x24
                                  dw_conv_params->padding.w,
 801ae62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae64:	695b      	ldr	r3, [r3, #20]
        depthwise_conv_s8_generic(input,
 801ae66:	b298      	uxth	r0, r3
 801ae68:	6238      	str	r0, [r7, #32]
                                  dw_conv_params->padding.h,
 801ae6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae6c:	699b      	ldr	r3, [r3, #24]
        depthwise_conv_s8_generic(input,
 801ae6e:	b29c      	uxth	r4, r3
 801ae70:	61fc      	str	r4, [r7, #28]
                                  dw_conv_params->stride.w,
 801ae72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae74:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801ae76:	b29d      	uxth	r5, r3
 801ae78:	61bd      	str	r5, [r7, #24]
                                  dw_conv_params->stride.h,
 801ae7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae7c:	691b      	ldr	r3, [r3, #16]
        depthwise_conv_s8_generic(input,
 801ae7e:	b29b      	uxth	r3, r3
 801ae80:	617b      	str	r3, [r7, #20]
                                  bias,
                                  output,
                                  quant_params->shift,
 801ae82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae84:	685a      	ldr	r2, [r3, #4]
 801ae86:	613a      	str	r2, [r7, #16]
                                  quant_params->multiplier,
 801ae88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae8a:	6819      	ldr	r1, [r3, #0]
 801ae8c:	60f9      	str	r1, [r7, #12]
                                  output_dims->w,
 801ae8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ae90:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801ae92:	b29d      	uxth	r5, r3
                                  output_dims->h,
 801ae94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ae96:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801ae98:	b29c      	uxth	r4, r3
 801ae9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae9c:	6858      	ldr	r0, [r3, #4]
 801ae9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aea0:	6819      	ldr	r1, [r3, #0]
 801aea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aeaa:	9312      	str	r3, [sp, #72]	; 0x48
 801aeac:	9211      	str	r2, [sp, #68]	; 0x44
 801aeae:	9110      	str	r1, [sp, #64]	; 0x40
 801aeb0:	900f      	str	r0, [sp, #60]	; 0x3c
 801aeb2:	940e      	str	r4, [sp, #56]	; 0x38
 801aeb4:	950d      	str	r5, [sp, #52]	; 0x34
 801aeb6:	68f9      	ldr	r1, [r7, #12]
 801aeb8:	910c      	str	r1, [sp, #48]	; 0x30
 801aeba:	693a      	ldr	r2, [r7, #16]
 801aebc:	920b      	str	r2, [sp, #44]	; 0x2c
 801aebe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801aec0:	930a      	str	r3, [sp, #40]	; 0x28
 801aec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801aec4:	9309      	str	r3, [sp, #36]	; 0x24
 801aec6:	697b      	ldr	r3, [r7, #20]
 801aec8:	9308      	str	r3, [sp, #32]
 801aeca:	69bd      	ldr	r5, [r7, #24]
 801aecc:	9507      	str	r5, [sp, #28]
 801aece:	69fc      	ldr	r4, [r7, #28]
 801aed0:	9406      	str	r4, [sp, #24]
 801aed2:	6a38      	ldr	r0, [r7, #32]
 801aed4:	9005      	str	r0, [sp, #20]
 801aed6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801aed8:	9104      	str	r1, [sp, #16]
 801aeda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aedc:	9203      	str	r2, [sp, #12]
 801aede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aee0:	9302      	str	r3, [sp, #8]
 801aee2:	9601      	str	r6, [sp, #4]
 801aee4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801aee6:	9300      	str	r3, [sp, #0]
 801aee8:	4643      	mov	r3, r8
 801aeea:	4672      	mov	r2, lr
 801aeec:	4661      	mov	r1, ip
 801aeee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801aef0:	f7ff fdad 	bl	801aa4e <depthwise_conv_s8_generic>
                                  dw_conv_params->activation.min,
                                  dw_conv_params->activation.max);
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801aef4:	2300      	movs	r3, #0
}
 801aef6:	4618      	mov	r0, r3
 801aef8:	3740      	adds	r7, #64	; 0x40
 801aefa:	46bd      	mov	sp, r7
 801aefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801af00 <arm_depthwise_conv_s8_opt>:
                                     const q7_t *kernel,
                                     const cmsis_nn_dims *bias_dims,
                                     const int32_t *bias,
                                     const cmsis_nn_dims *output_dims,
                                     q7_t *output)
{
 801af00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801af04:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
 801af08:	af00      	add	r7, sp, #0
 801af0a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 801af0e:	6020      	str	r0, [r4, #0]
 801af10:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801af14:	6001      	str	r1, [r0, #0]
 801af16:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801af1a:	600a      	str	r2, [r1, #0]
 801af1c:	f107 0220 	add.w	r2, r7, #32
 801af20:	6013      	str	r3, [r2, #0]

    const int32_t input_ch = input_dims->c;
 801af22:	f107 0320 	add.w	r3, r7, #32
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	68db      	ldr	r3, [r3, #12]
 801af2a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
    const int32_t output_ch = output_dims->c;
 801af2e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801af32:	68db      	ldr	r3, [r3, #12]
 801af34:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
 801af38:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801af3c:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801af40:	429a      	cmp	r2, r3
 801af42:	d003      	beq.n	801af4c <arm_depthwise_conv_s8_opt+0x4c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 801af44:	f06f 0302 	mvn.w	r3, #2
 801af48:	f001 b99b 	b.w	801c282 <arm_depthwise_conv_s8_opt+0x1382>
    }
#ifdef ARM_MATH_DSP
    const int32_t input_x = input_dims->w;
 801af4c:	f107 0320 	add.w	r3, r7, #32
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	689b      	ldr	r3, [r3, #8]
 801af54:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
    const int32_t input_y = input_dims->h;
 801af58:	f107 0320 	add.w	r3, r7, #32
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	685b      	ldr	r3, [r3, #4]
 801af60:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
    const int32_t kernel_x = filter_dims->w;
 801af64:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 801af68:	689b      	ldr	r3, [r3, #8]
 801af6a:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
    const int32_t kernel_y = filter_dims->h;
 801af6e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 801af72:	685b      	ldr	r3, [r3, #4]
 801af74:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
    const int32_t pad_x = dw_conv_params->padding.w;
 801af78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	695b      	ldr	r3, [r3, #20]
 801af80:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
    const int32_t pad_y = dw_conv_params->padding.h;
 801af84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	699b      	ldr	r3, [r3, #24]
 801af8c:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
    const int32_t stride_x = dw_conv_params->stride.w;
 801af90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	68db      	ldr	r3, [r3, #12]
 801af98:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
    const int32_t stride_y = dw_conv_params->stride.h;
 801af9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	691b      	ldr	r3, [r3, #16]
 801afa4:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
    const int32_t *output_shift = quant_params->shift;
 801afa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	685b      	ldr	r3, [r3, #4]
 801afb0:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
    const int32_t *output_mult = quant_params->multiplier;
 801afb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
    const int32_t output_x = output_dims->w;
 801afc0:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801afc4:	689b      	ldr	r3, [r3, #8]
 801afc6:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
    const int32_t output_y = output_dims->h;
 801afca:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801afce:	685b      	ldr	r3, [r3, #4]
 801afd0:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
    const int32_t output_offset = dw_conv_params->output_offset;
 801afd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	685b      	ldr	r3, [r3, #4]
 801afdc:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
    const int32_t input_offset = dw_conv_params->input_offset;
 801afe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
    const int32_t output_activation_min = dw_conv_params->activation.min;
 801afec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aff4:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
    const int32_t output_activation_max = dw_conv_params->activation.max;
 801aff8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b000:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
    q15_t *buffer_a = (q15_t *)ctx->buf;
 801b004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    }

#else // ARM_MATH_DSP
    (void)bias_dims;
    /* Run the following code in cores using DSP extension */
    q15_t *const col_buffer_start = buffer_a;
 801b010:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801b014:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    q15_t *col_buffer = col_buffer_start;
 801b018:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b01c:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
    const int32_t *const bias_start_pos = bias;
 801b020:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801b024:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    const q31_t *const out_mult_start_pos = output_mult;
 801b028:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801b02c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    const q31_t *const out_shift_start_pos = output_shift;
 801b030:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801b034:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    uint16_t row_count;
    uint16_t row_shift;

    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801b038:	2300      	movs	r3, #0
 801b03a:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801b03e:	f001 b918 	b.w	801c272 <arm_depthwise_conv_s8_opt+0x1372>
    {
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
 801b042:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801b046:	b29a      	uxth	r2, r3
 801b048:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 801b04c:	b29b      	uxth	r3, r3
 801b04e:	fb12 f303 	smulbb	r3, r2, r3
 801b052:	b29a      	uxth	r2, r3
 801b054:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 801b058:	b29b      	uxth	r3, r3
 801b05a:	1ad3      	subs	r3, r2, r3
 801b05c:	b29b      	uxth	r3, r3
 801b05e:	f8a7 328a 	strh.w	r3, [r7, #650]	; 0x28a
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801b062:	2300      	movs	r3, #0
 801b064:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 801b068:	f001 b8f7 	b.w	801c25a <arm_depthwise_conv_s8_opt+0x135a>
        {
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
 801b06c:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 801b070:	b29a      	uxth	r2, r3
 801b072:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 801b076:	b29b      	uxth	r3, r3
 801b078:	fb12 f303 	smulbb	r3, r2, r3
 801b07c:	b29a      	uxth	r2, r3
 801b07e:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 801b082:	b29b      	uxth	r3, r3
 801b084:	1ad3      	subs	r3, r2, r3
 801b086:	b29b      	uxth	r3, r3
 801b088:	f8a7 3288 	strh.w	r3, [r7, #648]	; 0x288

            /* Out of bounds is only considered for the y axis as it provides a contiguous zero'ing opportunity than
               along the x axis */
            const int ker_y_start = MAX(0, -base_idx_y);
 801b08c:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 801b090:	2b00      	cmp	r3, #0
 801b092:	dc03      	bgt.n	801b09c <arm_depthwise_conv_s8_opt+0x19c>
 801b094:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 801b098:	425b      	negs	r3, r3
 801b09a:	e000      	b.n	801b09e <arm_depthwise_conv_s8_opt+0x19e>
 801b09c:	2300      	movs	r3, #0
 801b09e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
            /* Condition for kernel end dimension: (base_idx_y + ker_y_end) < input_y */
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
 801b0a2:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 801b0a6:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 801b0aa:	1ad3      	subs	r3, r2, r3
 801b0ac:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801b0b0:	4293      	cmp	r3, r2
 801b0b2:	bfa8      	it	ge
 801b0b4:	4613      	movge	r3, r2
 801b0b6:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280

            int32_t index = 0;
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
            if (ker_y_start != 0)
 801b0c0:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d023      	beq.n	801b110 <arm_depthwise_conv_s8_opt+0x210>
            {
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
 801b0c8:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801b0cc:	005b      	lsls	r3, r3, #1
 801b0ce:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801b0d2:	18d0      	adds	r0, r2, r3
 801b0d4:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b0d8:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b0dc:	fb02 f303 	mul.w	r3, r2, r3
 801b0e0:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 801b0e4:	fb02 f303 	mul.w	r3, r2, r3
 801b0e8:	005b      	lsls	r3, r3, #1
 801b0ea:	461a      	mov	r2, r3
 801b0ec:	2100      	movs	r1, #0
 801b0ee:	f009 ff89 	bl	8025004 <memset>
                index += (kernel_x * input_ch) * ker_y_start;
 801b0f2:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b0f6:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b0fa:	fb02 f303 	mul.w	r3, r2, r3
 801b0fe:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 801b102:	fb02 f303 	mul.w	r3, r2, r3
 801b106:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 801b10a:	4413      	add	r3, r2
 801b10c:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
            }

            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801b110:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801b114:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 801b118:	e064      	b.n	801b1e4 <arm_depthwise_conv_s8_opt+0x2e4>
            {
                const int32_t idx_y = base_idx_y + i_ker_y;
 801b11a:	f9b7 228a 	ldrsh.w	r2, [r7, #650]	; 0x28a
 801b11e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801b122:	f8d7 1308 	ldr.w	r1, [r7, #776]	; 0x308
 801b126:	440a      	add	r2, r1
 801b128:	601a      	str	r2, [r3, #0]

                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 801b12a:	2300      	movs	r3, #0
 801b12c:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801b130:	e04d      	b.n	801b1ce <arm_depthwise_conv_s8_opt+0x2ce>
                {
                    const int32_t idx_x = base_idx_x + i_ker_x;
 801b132:	f9b7 2288 	ldrsh.w	r2, [r7, #648]	; 0x288
 801b136:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801b13a:	f8d7 1304 	ldr.w	r1, [r7, #772]	; 0x304
 801b13e:	440a      	add	r2, r1
 801b140:	601a      	str	r2, [r3, #0]
                    if (idx_x < 0 || idx_x >= input_x)
 801b142:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801b146:	681b      	ldr	r3, [r3, #0]
 801b148:	2b00      	cmp	r3, #0
 801b14a:	db06      	blt.n	801b15a <arm_depthwise_conv_s8_opt+0x25a>
 801b14c:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801b150:	681a      	ldr	r2, [r3, #0]
 801b152:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 801b156:	429a      	cmp	r2, r3
 801b158:	db0d      	blt.n	801b176 <arm_depthwise_conv_s8_opt+0x276>
                    {
                        memset(&col_buffer[index], 0, input_ch * sizeof(q15_t));
 801b15a:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801b15e:	005b      	lsls	r3, r3, #1
 801b160:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801b164:	18d0      	adds	r0, r2, r3
 801b166:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b16a:	005b      	lsls	r3, r3, #1
 801b16c:	461a      	mov	r2, r3
 801b16e:	2100      	movs	r1, #0
 801b170:	f009 ff48 	bl	8025004 <memset>
 801b174:	e01f      	b.n	801b1b6 <arm_depthwise_conv_s8_opt+0x2b6>
                    }
                    else
                    {
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
 801b176:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 801b180:	fb02 f203 	mul.w	r2, r2, r3
 801b184:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801b188:	681b      	ldr	r3, [r3, #0]
 801b18a:	4413      	add	r3, r2
 801b18c:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b190:	fb02 f303 	mul.w	r3, r2, r3
 801b194:	461a      	mov	r2, r3
 801b196:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 801b19a:	1898      	adds	r0, r3, r2
                                                  &col_buffer[index],
 801b19c:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801b1a0:	005b      	lsls	r3, r3, #1
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
 801b1a2:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801b1a6:	18d1      	adds	r1, r2, r3
 801b1a8:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b1ac:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801b1b0:	b21b      	sxth	r3, r3
 801b1b2:	f005 ff22 	bl	8020ffa <arm_q7_to_q15_with_offset>
                                                  input_ch,
                                                  input_offset);
                    }
                    index += input_ch;
 801b1b6:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 801b1ba:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b1be:	4413      	add	r3, r2
 801b1c0:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 801b1c4:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 801b1c8:	3301      	adds	r3, #1
 801b1ca:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801b1ce:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 801b1d2:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b1d6:	429a      	cmp	r2, r3
 801b1d8:	dbab      	blt.n	801b132 <arm_depthwise_conv_s8_opt+0x232>
            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801b1da:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 801b1de:	3301      	adds	r3, #1
 801b1e0:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 801b1e4:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 801b1e8:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801b1ec:	429a      	cmp	r2, r3
 801b1ee:	db94      	blt.n	801b11a <arm_depthwise_conv_s8_opt+0x21a>
                }
            }

            const int diff = kernel_y - ker_y_end;
 801b1f0:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801b1f4:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801b1f8:	1ad3      	subs	r3, r2, r3
 801b1fa:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
            if (diff != 0)
 801b1fe:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 801b202:	2b00      	cmp	r3, #0
 801b204:	d014      	beq.n	801b230 <arm_depthwise_conv_s8_opt+0x330>
            {
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * diff * sizeof(q15_t));
 801b206:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801b20a:	005b      	lsls	r3, r3, #1
 801b20c:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801b210:	18d0      	adds	r0, r2, r3
 801b212:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b216:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b21a:	fb02 f303 	mul.w	r3, r2, r3
 801b21e:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 801b222:	fb02 f303 	mul.w	r3, r2, r3
 801b226:	005b      	lsls	r3, r3, #1
 801b228:	461a      	mov	r2, r3
 801b22a:	2100      	movs	r1, #0
 801b22c:	f009 feea 	bl	8025004 <memset>
            }

            row_count = output_ch / 4;
 801b230:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801b234:	2b00      	cmp	r3, #0
 801b236:	da00      	bge.n	801b23a <arm_depthwise_conv_s8_opt+0x33a>
 801b238:	3303      	adds	r3, #3
 801b23a:	109b      	asrs	r3, r3, #2
 801b23c:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            row_shift = 0;
 801b240:	2300      	movs	r3, #0
 801b242:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318
            bias = bias_start_pos;
 801b246:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 801b24a:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
            output_mult = out_mult_start_pos;
 801b24e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801b252:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
            output_shift = out_shift_start_pos;
 801b256:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b25a:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

            while (row_count)
 801b25e:	f000 bea2 	b.w	801bfa6 <arm_depthwise_conv_s8_opt+0x10a6>
            {
                q31_t sum = *bias++;
 801b262:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801b266:	1d1a      	adds	r2, r3, #4
 801b268:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                q31_t sum_2 = *bias++;
 801b272:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801b276:	1d1a      	adds	r2, r3, #4
 801b278:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                q31_t sum_3 = *bias++;
 801b282:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801b286:	1d1a      	adds	r2, r3, #4
 801b288:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                q31_t sum_4 = *bias++;
 801b292:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801b296:	1d1a      	adds	r2, r3, #4
 801b298:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                uint16_t col_count = (kernel_x * kernel_y) / 2;
 801b2a2:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b2a6:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801b2aa:	fb02 f303 	mul.w	r3, r2, r3
 801b2ae:	0fda      	lsrs	r2, r3, #31
 801b2b0:	4413      	add	r3, r2
 801b2b2:	105b      	asrs	r3, r3, #1
 801b2b4:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                q15_t *col_pos = col_buffer_start + row_shift;
 801b2b8:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801b2bc:	005b      	lsls	r3, r3, #1
 801b2be:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801b2c2:	4413      	add	r3, r2
 801b2c4:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
                const q7_t *row_pos = kernel + row_shift;
 801b2c8:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801b2cc:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 801b2d0:	4413      	add	r3, r2
 801b2d2:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                row_shift += 4;
 801b2d6:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801b2da:	3304      	adds	r3, #4
 801b2dc:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318

                while (col_count)
 801b2e0:	e25b      	b.n	801b79a <arm_depthwise_conv_s8_opt+0x89a>
 801b2e2:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801b2e6:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801b2ea:	601a      	str	r2, [r3, #0]
 801b2ec:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801b2f0:	681b      	ldr	r3, [r3, #0]
 801b2f2:	681b      	ldr	r3, [r3, #0]
 801b2f4:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b2f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b2fa:	601a      	str	r2, [r3, #0]
    return (val);
 801b2fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b300:	681b      	ldr	r3, [r3, #0]
                    /* General idea is to read 4 + 4 (input, kernel) pair and re-arrange them in the right order to
                    use in a SMLAD instruction . One run of this loop produces 4 partial outputs with 8 MACs. */
                    /* Note: variable names can be improved here to align with rows and columns. */
                    q31_t ip_a1, ip_a2, ip_b1, ip_b2, op_a, op_b, op_c;
                    /* Read 4 weights */
                    ip_b1 = arm_nn_read_q7x4(row_pos);
 801b302:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
                    ip_a1 = arm_nn_read_q7x4(row_pos + input_ch);
 801b306:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b30a:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801b30e:	441a      	add	r2, r3
 801b310:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801b314:	601a      	str	r2, [r3, #0]
 801b316:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b320:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b324:	601a      	str	r2, [r3, #0]
    return (val);
 801b326:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 801b330:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801b334:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801b338:	601a      	str	r2, [r3, #0]
 801b33a:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801b33e:	681b      	ldr	r3, [r3, #0]
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801b344:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b348:	601a      	str	r2, [r3, #0]
    return (val);
 801b34a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b34e:	681b      	ldr	r3, [r3, #0]
                    op_a = arm_nn_read_q15x2(col_pos);
 801b350:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = arm_nn_read_q15x2(col_pos + input_ch);
 801b354:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b358:	005b      	lsls	r3, r3, #1
 801b35a:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801b35e:	441a      	add	r2, r3
 801b360:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801b364:	601a      	str	r2, [r3, #0]
 801b366:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801b370:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b374:	601a      	str	r2, [r3, #0]
    return (val);
 801b376:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

                    ip_a2 = __SXTB16(ip_b1);
 801b380:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 801b384:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801b388:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b38a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	fa2f f283 	sxtb16	r2, r3
 801b394:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801b398:	601a      	str	r2, [r3, #0]
  return(result);
 801b39a:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
                    ip_b1 = __SXTB16(__ROR(ip_b1, 8));
 801b3a4:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 801b3a8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801b3ac:	601a      	str	r2, [r3, #0]
 801b3ae:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801b3b2:	2208      	movs	r2, #8
 801b3b4:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801b3b6:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801b3ba:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 801b3be:	6812      	ldr	r2, [r2, #0]
 801b3c0:	f002 021f 	and.w	r2, r2, #31
 801b3c4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801b3c6:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d103      	bne.n	801b3d8 <arm_depthwise_conv_s8_opt+0x4d8>
    return op1;
 801b3d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	e007      	b.n	801b3e8 <arm_depthwise_conv_s8_opt+0x4e8>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b3d8:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801b3dc:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801b3e0:	6812      	ldr	r2, [r2, #0]
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	fa62 f303 	ror.w	r3, r2, r3
 801b3e8:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 801b3ec:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b3ee:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	fa2f f283 	sxtb16	r2, r3
 801b3f8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801b3fc:	601a      	str	r2, [r3, #0]
  return(result);
 801b3fe:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c

                    ip_b2 = __SXTB16(ip_a1);
 801b408:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801b40c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801b410:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b412:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	fa2f f283 	sxtb16	r2, r3
 801b41c:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801b420:	601a      	str	r2, [r3, #0]
  return(result);
 801b422:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801b426:	681b      	ldr	r3, [r3, #0]
 801b428:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
                    ip_a1 = __SXTB16(__ROR(ip_a1, 8));
 801b42c:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801b430:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801b434:	601a      	str	r2, [r3, #0]
 801b436:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801b43a:	2208      	movs	r2, #8
 801b43c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801b43e:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801b442:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801b446:	6812      	ldr	r2, [r2, #0]
 801b448:	f002 021f 	and.w	r2, r2, #31
 801b44c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801b44e:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	2b00      	cmp	r3, #0
 801b456:	d103      	bne.n	801b460 <arm_depthwise_conv_s8_opt+0x560>
    return op1;
 801b458:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	e007      	b.n	801b470 <arm_depthwise_conv_s8_opt+0x570>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b460:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 801b464:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801b468:	6812      	ldr	r2, [r2, #0]
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	fa62 f303 	ror.w	r3, r2, r3
 801b470:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 801b474:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b476:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	fa2f f283 	sxtb16	r2, r3
 801b480:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801b484:	601a      	str	r2, [r3, #0]
  return(result);
 801b486:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268

                    op_c = __PKHBT(op_b, op_a, 16);
 801b490:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801b494:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 801b498:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801b49c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 801b4a0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801b4a4:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801b4a8:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801b4ac:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 801b4b0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b4b4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
                    op_a = __PKHTB(op_b, op_a, 16);
 801b4b8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801b4bc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 801b4c0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801b4c4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 801b4c8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801b4cc:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801b4d0:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 801b4d4:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 801b4d8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801b4dc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = __PKHBT(ip_b2, ip_a2, 16);
 801b4e0:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801b4e4:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 801b4e8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801b4ec:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 801b4f0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b4f4:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801b4f8:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801b4fc:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 801b500:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b504:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum = __SMLAD(op_c, op_b, sum);
 801b508:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 801b50c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801b510:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801b514:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801b518:	6018      	str	r0, [r3, #0]
 801b51a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801b51e:	6019      	str	r1, [r3, #0]
 801b520:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801b524:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b526:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 801b530:	6812      	ldr	r2, [r2, #0]
 801b532:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 801b536:	6809      	ldr	r1, [r1, #0]
 801b538:	fb23 1202 	smlad	r2, r3, r2, r1
 801b53c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801b540:	601a      	str	r2, [r3, #0]
  return(result);
 801b542:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300

                    op_b = __PKHBT(ip_b1, ip_a1, 16);
 801b54c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801b550:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 801b554:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801b558:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801b55c:	601a      	str	r2, [r3, #0]
 801b55e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801b562:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801b566:	6812      	ldr	r2, [r2, #0]
 801b568:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 801b56c:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801b570:	601a      	str	r2, [r3, #0]
 801b572:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801b576:	681b      	ldr	r3, [r3, #0]
 801b578:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_2 = __SMLAD(op_a, op_b, sum_2);
 801b57c:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 801b580:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801b584:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801b588:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801b58c:	6018      	str	r0, [r3, #0]
 801b58e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801b592:	6019      	str	r1, [r3, #0]
 801b594:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801b598:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b59a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 801b5a4:	6812      	ldr	r2, [r2, #0]
 801b5a6:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 801b5aa:	6809      	ldr	r1, [r1, #0]
 801b5ac:	fb23 1202 	smlad	r2, r3, r2, r1
 801b5b0:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801b5b4:	601a      	str	r2, [r3, #0]
  return(result);
 801b5b6:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc

                    op_a = arm_nn_read_q15x2(col_pos + 2);
 801b5c0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801b5c4:	1d1a      	adds	r2, r3, #4
 801b5c6:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801b5ca:	601a      	str	r2, [r3, #0]
 801b5cc:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801b5d0:	681b      	ldr	r3, [r3, #0]
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801b5d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b5da:	601a      	str	r2, [r3, #0]
    return (val);
 801b5dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = arm_nn_read_q15x2(col_pos + input_ch + 2);
 801b5e6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b5ea:	3302      	adds	r3, #2
 801b5ec:	005b      	lsls	r3, r3, #1
 801b5ee:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801b5f2:	441a      	add	r2, r3
 801b5f4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801b5f8:	601a      	str	r2, [r3, #0]
 801b5fa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801b5fe:	681b      	ldr	r3, [r3, #0]
 801b600:	681b      	ldr	r3, [r3, #0]
 801b602:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801b604:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b608:	601a      	str	r2, [r3, #0]
    return (val);
 801b60a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

                    op_c = __PKHBT(op_b, op_a, 16);
 801b614:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801b618:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 801b61c:	601a      	str	r2, [r3, #0]
 801b61e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801b622:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801b626:	601a      	str	r2, [r3, #0]
 801b628:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 801b632:	6812      	ldr	r2, [r2, #0]
 801b634:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 801b638:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801b63c:	601a      	str	r2, [r3, #0]
 801b63e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
                    op_a = __PKHTB(op_b, op_a, 16);
 801b648:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801b64c:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 801b650:	601a      	str	r2, [r3, #0]
 801b652:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801b656:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801b65a:	601a      	str	r2, [r3, #0]
 801b65c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801b660:	681b      	ldr	r3, [r3, #0]
 801b662:	f507 7204 	add.w	r2, r7, #528	; 0x210
 801b666:	6812      	ldr	r2, [r2, #0]
 801b668:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801b66c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801b670:	601a      	str	r2, [r3, #0]
 801b672:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = __PKHTB(ip_a2, ip_b2, 16);
 801b67c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801b680:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801b684:	601a      	str	r2, [r3, #0]
 801b686:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801b68a:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801b68e:	601a      	str	r2, [r3, #0]
 801b690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	f507 7201 	add.w	r2, r7, #516	; 0x204
 801b69a:	6812      	ldr	r2, [r2, #0]
 801b69c:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801b6a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801b6a4:	601a      	str	r2, [r3, #0]
 801b6a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801b6aa:	681b      	ldr	r3, [r3, #0]
 801b6ac:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_3 = __SMLAD(op_c, op_b, sum_3);
 801b6b0:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 801b6b4:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801b6b8:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801b6bc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801b6c0:	6018      	str	r0, [r3, #0]
 801b6c2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801b6c6:	6019      	str	r1, [r3, #0]
 801b6c8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b6cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b6ce:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 801b6d8:	6812      	ldr	r2, [r2, #0]
 801b6da:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 801b6de:	6809      	ldr	r1, [r1, #0]
 801b6e0:	fb23 1202 	smlad	r2, r3, r2, r1
 801b6e4:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801b6e8:	601a      	str	r2, [r3, #0]
  return(result);
 801b6ea:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8

                    op_b = __PKHTB(ip_a1, ip_b1, 16);
 801b6f4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801b6f8:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801b6fc:	601a      	str	r2, [r3, #0]
 801b6fe:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801b702:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 801b706:	601a      	str	r2, [r3, #0]
 801b708:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801b712:	6812      	ldr	r2, [r2, #0]
 801b714:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801b718:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801b71c:	601a      	str	r2, [r3, #0]
 801b71e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_4 = __SMLAD(op_a, op_b, sum_4);
 801b728:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 801b72c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801b730:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801b734:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801b738:	6018      	str	r0, [r3, #0]
 801b73a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801b73e:	6019      	str	r1, [r3, #0]
 801b740:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801b744:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b746:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 801b750:	6812      	ldr	r2, [r2, #0]
 801b752:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 801b756:	6809      	ldr	r1, [r1, #0]
 801b758:	fb23 1202 	smlad	r2, r3, r2, r1
 801b75c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801b760:	601a      	str	r2, [r3, #0]
  return(result);
 801b762:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                    row_pos += input_ch << 1;
 801b76c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b770:	005b      	lsls	r3, r3, #1
 801b772:	461a      	mov	r2, r3
 801b774:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801b778:	4413      	add	r3, r2
 801b77a:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                    col_pos += input_ch << 1;
 801b77e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b782:	005b      	lsls	r3, r3, #1
 801b784:	005b      	lsls	r3, r3, #1
 801b786:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801b78a:	4413      	add	r3, r2
 801b78c:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
                    col_count--;
 801b790:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801b794:	3b01      	subs	r3, #1
 801b796:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 801b79a:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	f47f ad9f 	bne.w	801b2e2 <arm_depthwise_conv_s8_opt+0x3e2>
                }

                col_count = (kernel_x * kernel_y) & 0x1;
 801b7a4:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b7a8:	b29a      	uxth	r2, r3
 801b7aa:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801b7ae:	b29b      	uxth	r3, r3
 801b7b0:	fb12 f303 	smulbb	r3, r2, r3
 801b7b4:	b29b      	uxth	r3, r3
 801b7b6:	f003 0301 	and.w	r3, r3, #1
 801b7ba:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 801b7be:	e059      	b.n	801b874 <arm_depthwise_conv_s8_opt+0x974>
                {
                    sum += row_pos[0] * col_pos[0];
 801b7c0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801b7c4:	f993 3000 	ldrsb.w	r3, [r3]
 801b7c8:	461a      	mov	r2, r3
 801b7ca:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801b7ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b7d2:	fb03 f302 	mul.w	r3, r3, r2
 801b7d6:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801b7da:	4413      	add	r3, r2
 801b7dc:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                    sum_2 += row_pos[1] * col_pos[1];
 801b7e0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801b7e4:	3301      	adds	r3, #1
 801b7e6:	f993 3000 	ldrsb.w	r3, [r3]
 801b7ea:	461a      	mov	r2, r3
 801b7ec:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801b7f0:	3302      	adds	r3, #2
 801b7f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b7f6:	fb03 f302 	mul.w	r3, r3, r2
 801b7fa:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801b7fe:	4413      	add	r3, r2
 801b800:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                    sum_3 += row_pos[2] * col_pos[2];
 801b804:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801b808:	3302      	adds	r3, #2
 801b80a:	f993 3000 	ldrsb.w	r3, [r3]
 801b80e:	461a      	mov	r2, r3
 801b810:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801b814:	3304      	adds	r3, #4
 801b816:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b81a:	fb03 f302 	mul.w	r3, r3, r2
 801b81e:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801b822:	4413      	add	r3, r2
 801b824:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                    sum_4 += row_pos[3] * col_pos[3];
 801b828:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801b82c:	3303      	adds	r3, #3
 801b82e:	f993 3000 	ldrsb.w	r3, [r3]
 801b832:	461a      	mov	r2, r3
 801b834:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801b838:	3306      	adds	r3, #6
 801b83a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b83e:	fb03 f302 	mul.w	r3, r3, r2
 801b842:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801b846:	4413      	add	r3, r2
 801b848:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                    row_pos += input_ch;
 801b84c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b850:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801b854:	4413      	add	r3, r2
 801b856:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                    col_pos += input_ch;
 801b85a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b85e:	005b      	lsls	r3, r3, #1
 801b860:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801b864:	4413      	add	r3, r2
 801b866:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec

                    col_count--;
 801b86a:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801b86e:	3b01      	subs	r3, #1
 801b870:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 801b874:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d1a1      	bne.n	801b7c0 <arm_depthwise_conv_s8_opt+0x8c0>
                }
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
 801b87c:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801b880:	1d1a      	adds	r2, r3, #4
 801b882:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801b886:	6819      	ldr	r1, [r3, #0]
 801b888:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801b88c:	1d1a      	adds	r2, r3, #4
 801b88e:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801b892:	681a      	ldr	r2, [r3, #0]
 801b894:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801b898:	f8d7 0300 	ldr.w	r0, [r7, #768]	; 0x300
 801b89c:	6018      	str	r0, [r3, #0]
 801b89e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801b8a2:	6019      	str	r1, [r3, #0]
 801b8a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801b8a8:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b8aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801b8ae:	681b      	ldr	r3, [r3, #0]
 801b8b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b8b4:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801b8b8:	6812      	ldr	r2, [r2, #0]
 801b8ba:	409a      	lsls	r2, r3
 801b8bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801b8c0:	601a      	str	r2, [r3, #0]
 801b8c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801b8c6:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 801b8ca:	6812      	ldr	r2, [r2, #0]
 801b8cc:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801b8ce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801b8d2:	2200      	movs	r2, #0
 801b8d4:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801b8d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b8da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801b8de:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801b8e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b8e4:	2200      	movs	r2, #0
 801b8e6:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b8e8:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 801b8ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	4618      	mov	r0, r3
 801b8f4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801b8f8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	461a      	mov	r2, r3
 801b900:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801b904:	fb02 f501 	mul.w	r5, r2, r1
 801b908:	fb00 f403 	mul.w	r4, r0, r3
 801b90c:	442c      	add	r4, r5
 801b90e:	fba0 2302 	umull	r2, r3, r0, r2
 801b912:	18e1      	adds	r1, r4, r3
 801b914:	460b      	mov	r3, r1
 801b916:	eb18 0102 	adds.w	r1, r8, r2
 801b91a:	60b9      	str	r1, [r7, #8]
 801b91c:	eb49 0303 	adc.w	r3, r9, r3
 801b920:	60fb      	str	r3, [r7, #12]
 801b922:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801b926:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    result = (int32_t)(mult.long_long >> 31);
 801b92a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801b92e:	f04f 0200 	mov.w	r2, #0
 801b932:	f04f 0300 	mov.w	r3, #0
 801b936:	0fc2      	lsrs	r2, r0, #31
 801b938:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801b93c:	17cb      	asrs	r3, r1, #31
 801b93e:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 801b942:	4613      	mov	r3, r2
 801b944:	600b      	str	r3, [r1, #0]
    return result;
 801b946:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801b94a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b94c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	2b00      	cmp	r3, #0
 801b954:	dc04      	bgt.n	801b960 <arm_depthwise_conv_s8_opt+0xa60>
 801b956:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801b95a:	681b      	ldr	r3, [r3, #0]
 801b95c:	425b      	negs	r3, r3
 801b95e:	e000      	b.n	801b962 <arm_depthwise_conv_s8_opt+0xa62>
 801b960:	2300      	movs	r3, #0
 801b962:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801b966:	6011      	str	r1, [r2, #0]
 801b968:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801b96c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b96e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b972:	2200      	movs	r2, #0
 801b974:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b976:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801b97a:	2201      	movs	r2, #1
 801b97c:	681b      	ldr	r3, [r3, #0]
 801b97e:	409a      	lsls	r2, r3
 801b980:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801b984:	3a01      	subs	r2, #1
 801b986:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801b988:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801b98c:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801b990:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801b994:	6809      	ldr	r1, [r1, #0]
 801b996:	6812      	ldr	r2, [r2, #0]
 801b998:	400a      	ands	r2, r1
 801b99a:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801b99c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b9a0:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801b9a4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801b9a8:	6809      	ldr	r1, [r1, #0]
 801b9aa:	6812      	ldr	r2, [r2, #0]
 801b9ac:	fa41 f202 	asr.w	r2, r1, r2
 801b9b0:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801b9b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801b9b6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801b9ba:	6812      	ldr	r2, [r2, #0]
 801b9bc:	1052      	asrs	r2, r2, #1
 801b9be:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801b9c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b9c4:	681b      	ldr	r3, [r3, #0]
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	da06      	bge.n	801b9d8 <arm_depthwise_conv_s8_opt+0xad8>
        threshold++;
 801b9ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801b9ce:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 801b9d2:	6812      	ldr	r2, [r2, #0]
 801b9d4:	3201      	adds	r2, #1
 801b9d6:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801b9d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801b9dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801b9e0:	6812      	ldr	r2, [r2, #0]
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	429a      	cmp	r2, r3
 801b9e6:	dd06      	ble.n	801b9f6 <arm_depthwise_conv_s8_opt+0xaf6>
        result++;
 801b9e8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b9ec:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801b9f0:	6812      	ldr	r2, [r2, #0]
 801b9f2:	3201      	adds	r2, #1
 801b9f4:	601a      	str	r2, [r3, #0]
    return result;
 801b9f6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b9fa:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b9fc:	bf00      	nop
 801b9fe:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum += output_offset;
 801ba02:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801ba06:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801ba0a:	4413      	add	r3, r2
 801ba0c:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum = MAX(sum, output_activation_min);
 801ba10:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801ba14:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801ba18:	4293      	cmp	r3, r2
 801ba1a:	bfb8      	it	lt
 801ba1c:	4613      	movlt	r3, r2
 801ba1e:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum = MIN(sum, output_activation_max);
 801ba22:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801ba26:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801ba2a:	4293      	cmp	r3, r2
 801ba2c:	bfa8      	it	ge
 801ba2e:	4613      	movge	r3, r2
 801ba30:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                *output++ = (q7_t)sum;
 801ba34:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801ba38:	1c5a      	adds	r2, r3, #1
 801ba3a:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801ba3e:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801ba42:	b252      	sxtb	r2, r2
 801ba44:	701a      	strb	r2, [r3, #0]

                sum_2 = arm_nn_requantize(sum_2, *output_mult++, *output_shift++);
 801ba46:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801ba4a:	1d1a      	adds	r2, r3, #4
 801ba4c:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801ba50:	6819      	ldr	r1, [r3, #0]
 801ba52:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801ba56:	1d1a      	adds	r2, r3, #4
 801ba58:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801ba5c:	681a      	ldr	r2, [r3, #0]
 801ba5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801ba62:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 801ba66:	6018      	str	r0, [r3, #0]
 801ba68:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801ba6c:	6019      	str	r1, [r3, #0]
 801ba6e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ba72:	601a      	str	r2, [r3, #0]
 801ba74:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba7e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801ba82:	6812      	ldr	r2, [r2, #0]
 801ba84:	409a      	lsls	r2, r3
 801ba86:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801ba8a:	601a      	str	r2, [r3, #0]
 801ba8c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801ba90:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 801ba94:	6812      	ldr	r2, [r2, #0]
 801ba96:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801ba98:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801ba9c:	2200      	movs	r2, #0
 801ba9e:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801baa0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801baa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801baa8:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801baaa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801baae:	2200      	movs	r2, #0
 801bab0:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801bab2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801bab6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	4618      	mov	r0, r3
 801babe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801bac2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	461a      	mov	r2, r3
 801baca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801bace:	fb02 f501 	mul.w	r5, r2, r1
 801bad2:	fb00 f403 	mul.w	r4, r0, r3
 801bad6:	442c      	add	r4, r5
 801bad8:	fba0 2302 	umull	r2, r3, r0, r2
 801badc:	18e1      	adds	r1, r4, r3
 801bade:	460b      	mov	r3, r1
 801bae0:	eb18 0102 	adds.w	r1, r8, r2
 801bae4:	6139      	str	r1, [r7, #16]
 801bae6:	eb49 0303 	adc.w	r3, r9, r3
 801baea:	617b      	str	r3, [r7, #20]
 801baec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801baf0:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 801baf4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801baf8:	f04f 0200 	mov.w	r2, #0
 801bafc:	f04f 0300 	mov.w	r3, #0
 801bb00:	0fc2      	lsrs	r2, r0, #31
 801bb02:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801bb06:	17cb      	asrs	r3, r1, #31
 801bb08:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 801bb0c:	4613      	mov	r3, r2
 801bb0e:	600b      	str	r3, [r1, #0]
    return result;
 801bb10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801bb14:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bb16:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	2b00      	cmp	r3, #0
 801bb1e:	dc04      	bgt.n	801bb2a <arm_depthwise_conv_s8_opt+0xc2a>
 801bb20:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	425b      	negs	r3, r3
 801bb28:	e000      	b.n	801bb2c <arm_depthwise_conv_s8_opt+0xc2c>
 801bb2a:	2300      	movs	r3, #0
 801bb2c:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801bb30:	6011      	str	r1, [r2, #0]
 801bb32:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801bb36:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801bb38:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bb3c:	2200      	movs	r2, #0
 801bb3e:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801bb40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801bb44:	2201      	movs	r2, #1
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	409a      	lsls	r2, r3
 801bb4a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801bb4e:	3a01      	subs	r2, #1
 801bb50:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801bb52:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801bb56:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801bb5a:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801bb5e:	6809      	ldr	r1, [r1, #0]
 801bb60:	6812      	ldr	r2, [r2, #0]
 801bb62:	400a      	ands	r2, r1
 801bb64:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801bb66:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bb6a:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801bb6e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801bb72:	6809      	ldr	r1, [r1, #0]
 801bb74:	6812      	ldr	r2, [r2, #0]
 801bb76:	fa41 f202 	asr.w	r2, r1, r2
 801bb7a:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801bb7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801bb80:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801bb84:	6812      	ldr	r2, [r2, #0]
 801bb86:	1052      	asrs	r2, r2, #1
 801bb88:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801bb8a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bb8e:	681b      	ldr	r3, [r3, #0]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	da06      	bge.n	801bba2 <arm_depthwise_conv_s8_opt+0xca2>
        threshold++;
 801bb94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801bb98:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801bb9c:	6812      	ldr	r2, [r2, #0]
 801bb9e:	3201      	adds	r2, #1
 801bba0:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801bba2:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801bba6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801bbaa:	6812      	ldr	r2, [r2, #0]
 801bbac:	681b      	ldr	r3, [r3, #0]
 801bbae:	429a      	cmp	r2, r3
 801bbb0:	dd06      	ble.n	801bbc0 <arm_depthwise_conv_s8_opt+0xcc0>
        result++;
 801bbb2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bbb6:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801bbba:	6812      	ldr	r2, [r2, #0]
 801bbbc:	3201      	adds	r2, #1
 801bbbe:	601a      	str	r2, [r3, #0]
    return result;
 801bbc0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bbc4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bbc6:	bf00      	nop
 801bbc8:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 += output_offset;
 801bbcc:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801bbd0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801bbd4:	4413      	add	r3, r2
 801bbd6:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 = MAX(sum_2, output_activation_min);
 801bbda:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801bbde:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801bbe2:	4293      	cmp	r3, r2
 801bbe4:	bfb8      	it	lt
 801bbe6:	4613      	movlt	r3, r2
 801bbe8:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 = MIN(sum_2, output_activation_max);
 801bbec:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801bbf0:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801bbf4:	4293      	cmp	r3, r2
 801bbf6:	bfa8      	it	ge
 801bbf8:	4613      	movge	r3, r2
 801bbfa:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                *output++ = (q7_t)sum_2;
 801bbfe:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801bc02:	1c5a      	adds	r2, r3, #1
 801bc04:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801bc08:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801bc0c:	b252      	sxtb	r2, r2
 801bc0e:	701a      	strb	r2, [r3, #0]
                sum_3 = arm_nn_requantize(sum_3, *output_mult++, *output_shift++);
 801bc10:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801bc14:	1d1a      	adds	r2, r3, #4
 801bc16:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801bc1a:	6819      	ldr	r1, [r3, #0]
 801bc1c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801bc20:	1d1a      	adds	r2, r3, #4
 801bc22:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801bc26:	681a      	ldr	r2, [r3, #0]
 801bc28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801bc2c:	f8d7 02f8 	ldr.w	r0, [r7, #760]	; 0x2f8
 801bc30:	6018      	str	r0, [r3, #0]
 801bc32:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801bc36:	6019      	str	r1, [r3, #0]
 801bc38:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801bc3c:	601a      	str	r2, [r3, #0]
 801bc3e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801bc42:	681b      	ldr	r3, [r3, #0]
 801bc44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801bc4c:	6812      	ldr	r2, [r2, #0]
 801bc4e:	409a      	lsls	r2, r3
 801bc50:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801bc54:	601a      	str	r2, [r3, #0]
 801bc56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801bc5a:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 801bc5e:	6812      	ldr	r2, [r2, #0]
 801bc60:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801bc62:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801bc66:	2200      	movs	r2, #0
 801bc68:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801bc6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bc6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801bc72:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801bc74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bc78:	2200      	movs	r2, #0
 801bc7a:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801bc7c:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 801bc80:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	4618      	mov	r0, r3
 801bc88:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801bc8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801bc90:	681b      	ldr	r3, [r3, #0]
 801bc92:	461a      	mov	r2, r3
 801bc94:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801bc98:	fb02 f501 	mul.w	r5, r2, r1
 801bc9c:	fb00 f403 	mul.w	r4, r0, r3
 801bca0:	442c      	add	r4, r5
 801bca2:	fba0 2302 	umull	r2, r3, r0, r2
 801bca6:	18e1      	adds	r1, r4, r3
 801bca8:	460b      	mov	r3, r1
 801bcaa:	eb18 0102 	adds.w	r1, r8, r2
 801bcae:	61b9      	str	r1, [r7, #24]
 801bcb0:	eb49 0303 	adc.w	r3, r9, r3
 801bcb4:	61fb      	str	r3, [r7, #28]
 801bcb6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801bcba:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 801bcbe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801bcc2:	f04f 0200 	mov.w	r2, #0
 801bcc6:	f04f 0300 	mov.w	r3, #0
 801bcca:	0fc2      	lsrs	r2, r0, #31
 801bccc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801bcd0:	17cb      	asrs	r3, r1, #31
 801bcd2:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 801bcd6:	4613      	mov	r3, r2
 801bcd8:	600b      	str	r3, [r1, #0]
    return result;
 801bcda:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801bcde:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bce0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801bce4:	681b      	ldr	r3, [r3, #0]
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	dc04      	bgt.n	801bcf4 <arm_depthwise_conv_s8_opt+0xdf4>
 801bcea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	425b      	negs	r3, r3
 801bcf2:	e000      	b.n	801bcf6 <arm_depthwise_conv_s8_opt+0xdf6>
 801bcf4:	2300      	movs	r3, #0
 801bcf6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 801bcfa:	6011      	str	r1, [r2, #0]
 801bcfc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 801bd00:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801bd02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801bd06:	2200      	movs	r2, #0
 801bd08:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801bd0a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801bd0e:	2201      	movs	r2, #1
 801bd10:	681b      	ldr	r3, [r3, #0]
 801bd12:	409a      	lsls	r2, r3
 801bd14:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801bd18:	3a01      	subs	r2, #1
 801bd1a:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801bd1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801bd20:	f507 718c 	add.w	r1, r7, #280	; 0x118
 801bd24:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801bd28:	6809      	ldr	r1, [r1, #0]
 801bd2a:	6812      	ldr	r2, [r2, #0]
 801bd2c:	400a      	ands	r2, r1
 801bd2e:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801bd30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801bd34:	f507 718c 	add.w	r1, r7, #280	; 0x118
 801bd38:	f507 728a 	add.w	r2, r7, #276	; 0x114
 801bd3c:	6809      	ldr	r1, [r1, #0]
 801bd3e:	6812      	ldr	r2, [r2, #0]
 801bd40:	fa41 f202 	asr.w	r2, r1, r2
 801bd44:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801bd46:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801bd4a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801bd4e:	6812      	ldr	r2, [r2, #0]
 801bd50:	1052      	asrs	r2, r2, #1
 801bd52:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801bd54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	da06      	bge.n	801bd6c <arm_depthwise_conv_s8_opt+0xe6c>
        threshold++;
 801bd5e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801bd62:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801bd66:	6812      	ldr	r2, [r2, #0]
 801bd68:	3201      	adds	r2, #1
 801bd6a:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801bd6c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801bd70:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801bd74:	6812      	ldr	r2, [r2, #0]
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	429a      	cmp	r2, r3
 801bd7a:	dd06      	ble.n	801bd8a <arm_depthwise_conv_s8_opt+0xe8a>
        result++;
 801bd7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801bd80:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801bd84:	6812      	ldr	r2, [r2, #0]
 801bd86:	3201      	adds	r2, #1
 801bd88:	601a      	str	r2, [r3, #0]
    return result;
 801bd8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801bd8e:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bd90:	bf00      	nop
 801bd92:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 += output_offset;
 801bd96:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801bd9a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801bd9e:	4413      	add	r3, r2
 801bda0:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 = MAX(sum_3, output_activation_min);
 801bda4:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801bda8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801bdac:	4293      	cmp	r3, r2
 801bdae:	bfb8      	it	lt
 801bdb0:	4613      	movlt	r3, r2
 801bdb2:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 = MIN(sum_3, output_activation_max);
 801bdb6:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801bdba:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801bdbe:	4293      	cmp	r3, r2
 801bdc0:	bfa8      	it	ge
 801bdc2:	4613      	movge	r3, r2
 801bdc4:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                *output++ = (q7_t)sum_3;
 801bdc8:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801bdcc:	1c5a      	adds	r2, r3, #1
 801bdce:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801bdd2:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801bdd6:	b252      	sxtb	r2, r2
 801bdd8:	701a      	strb	r2, [r3, #0]

                sum_4 = arm_nn_requantize(sum_4, *output_mult++, *output_shift++);
 801bdda:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801bdde:	1d1a      	adds	r2, r3, #4
 801bde0:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801bde4:	6819      	ldr	r1, [r3, #0]
 801bde6:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801bdea:	1d1a      	adds	r2, r3, #4
 801bdec:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801bdf0:	681a      	ldr	r2, [r3, #0]
 801bdf2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801bdf6:	f8d7 02f4 	ldr.w	r0, [r7, #756]	; 0x2f4
 801bdfa:	6018      	str	r0, [r3, #0]
 801bdfc:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801be00:	6019      	str	r1, [r3, #0]
 801be02:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801be06:	601a      	str	r2, [r3, #0]
 801be08:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801be0c:	681b      	ldr	r3, [r3, #0]
 801be0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801be12:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801be16:	6812      	ldr	r2, [r2, #0]
 801be18:	409a      	lsls	r2, r3
 801be1a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801be1e:	601a      	str	r2, [r3, #0]
 801be20:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801be24:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 801be28:	6812      	ldr	r2, [r2, #0]
 801be2a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801be2c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801be30:	2200      	movs	r2, #0
 801be32:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801be34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801be38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801be3c:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801be3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801be42:	2200      	movs	r2, #0
 801be44:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801be46:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 801be4a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801be4e:	681b      	ldr	r3, [r3, #0]
 801be50:	4618      	mov	r0, r3
 801be52:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801be56:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801be5a:	681b      	ldr	r3, [r3, #0]
 801be5c:	461a      	mov	r2, r3
 801be5e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801be62:	fb02 f501 	mul.w	r5, r2, r1
 801be66:	fb00 f403 	mul.w	r4, r0, r3
 801be6a:	442c      	add	r4, r5
 801be6c:	fba0 2302 	umull	r2, r3, r0, r2
 801be70:	18e1      	adds	r1, r4, r3
 801be72:	460b      	mov	r3, r1
 801be74:	eb18 0a02 	adds.w	sl, r8, r2
 801be78:	eb49 0b03 	adc.w	fp, r9, r3
 801be7c:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
    result = (int32_t)(mult.long_long >> 31);
 801be80:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801be84:	f04f 0200 	mov.w	r2, #0
 801be88:	f04f 0300 	mov.w	r3, #0
 801be8c:	0fc2      	lsrs	r2, r0, #31
 801be8e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801be92:	17cb      	asrs	r3, r1, #31
 801be94:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 801be98:	4613      	mov	r3, r2
 801be9a:	600b      	str	r3, [r1, #0]
    return result;
 801be9c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801bea0:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bea2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	dc04      	bgt.n	801beb6 <arm_depthwise_conv_s8_opt+0xfb6>
 801beac:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801beb0:	681b      	ldr	r3, [r3, #0]
 801beb2:	425b      	negs	r3, r3
 801beb4:	e000      	b.n	801beb8 <arm_depthwise_conv_s8_opt+0xfb8>
 801beb6:	2300      	movs	r3, #0
 801beb8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801bebc:	6011      	str	r1, [r2, #0]
 801bebe:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 801bec2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801bec4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801bec8:	2200      	movs	r2, #0
 801beca:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801becc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801bed0:	2201      	movs	r2, #1
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	409a      	lsls	r2, r3
 801bed6:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801beda:	3a01      	subs	r2, #1
 801bedc:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801bede:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801bee2:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 801bee6:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 801beea:	6809      	ldr	r1, [r1, #0]
 801beec:	6812      	ldr	r2, [r2, #0]
 801beee:	400a      	ands	r2, r1
 801bef0:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801bef2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801bef6:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 801befa:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 801befe:	6809      	ldr	r1, [r1, #0]
 801bf00:	6812      	ldr	r2, [r2, #0]
 801bf02:	fa41 f202 	asr.w	r2, r1, r2
 801bf06:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801bf08:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801bf0c:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 801bf10:	6812      	ldr	r2, [r2, #0]
 801bf12:	1052      	asrs	r2, r2, #1
 801bf14:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801bf16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801bf1a:	681b      	ldr	r3, [r3, #0]
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	da06      	bge.n	801bf2e <arm_depthwise_conv_s8_opt+0x102e>
        threshold++;
 801bf20:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801bf24:	f507 729a 	add.w	r2, r7, #308	; 0x134
 801bf28:	6812      	ldr	r2, [r2, #0]
 801bf2a:	3201      	adds	r2, #1
 801bf2c:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801bf2e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801bf32:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801bf36:	6812      	ldr	r2, [r2, #0]
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	429a      	cmp	r2, r3
 801bf3c:	dd06      	ble.n	801bf4c <arm_depthwise_conv_s8_opt+0x104c>
        result++;
 801bf3e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801bf42:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801bf46:	6812      	ldr	r2, [r2, #0]
 801bf48:	3201      	adds	r2, #1
 801bf4a:	601a      	str	r2, [r3, #0]
    return result;
 801bf4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801bf50:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bf52:	bf00      	nop
 801bf54:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 += output_offset;
 801bf58:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801bf5c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801bf60:	4413      	add	r3, r2
 801bf62:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 = MAX(sum_4, output_activation_min);
 801bf66:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801bf6a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801bf6e:	4293      	cmp	r3, r2
 801bf70:	bfb8      	it	lt
 801bf72:	4613      	movlt	r3, r2
 801bf74:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 = MIN(sum_4, output_activation_max);
 801bf78:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801bf7c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801bf80:	4293      	cmp	r3, r2
 801bf82:	bfa8      	it	ge
 801bf84:	4613      	movge	r3, r2
 801bf86:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                *output++ = (q7_t)sum_4;
 801bf8a:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801bf8e:	1c5a      	adds	r2, r3, #1
 801bf90:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801bf94:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801bf98:	b252      	sxtb	r2, r2
 801bf9a:	701a      	strb	r2, [r3, #0]

                row_count--;
 801bf9c:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801bfa0:	3b01      	subs	r3, #1
 801bfa2:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 801bfa6:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	f47f a959 	bne.w	801b262 <arm_depthwise_conv_s8_opt+0x362>
            }

            row_count = output_ch & 0x3;
 801bfb0:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801bfb4:	b29b      	uxth	r3, r3
 801bfb6:	f003 0303 	and.w	r3, r3, #3
 801bfba:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 801bfbe:	e13e      	b.n	801c23e <arm_depthwise_conv_s8_opt+0x133e>
            {
                q15_t *col_pos = col_buffer_start + row_shift;
 801bfc0:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801bfc4:	005b      	lsls	r3, r3, #1
 801bfc6:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801bfca:	4413      	add	r3, r2
 801bfcc:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
                const q7_t *row_pos = kernel + row_shift;
 801bfd0:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801bfd4:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 801bfd8:	4413      	add	r3, r2
 801bfda:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
                q31_t sum = *bias++;
 801bfde:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801bfe2:	1d1a      	adds	r2, r3, #4
 801bfe4:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                const uint16_t col_count = (kernel_x * kernel_y);
 801bfee:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801bff2:	b29a      	uxth	r2, r3
 801bff4:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801bff8:	b29b      	uxth	r3, r3
 801bffa:	fb12 f303 	smulbb	r3, r2, r3
 801bffe:	f8a7 3272 	strh.w	r3, [r7, #626]	; 0x272
                row_shift += 1;
 801c002:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801c006:	3301      	adds	r3, #1
 801c008:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318

                for (int i = 0; i < col_count; i++)
 801c00c:	2300      	movs	r3, #0
 801c00e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801c012:	e024      	b.n	801c05e <arm_depthwise_conv_s8_opt+0x115e>
                {
                    sum += row_pos[i * input_ch] * col_pos[i * input_ch];
 801c014:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801c018:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801c01c:	fb02 f303 	mul.w	r3, r2, r3
 801c020:	461a      	mov	r2, r3
 801c022:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801c026:	4413      	add	r3, r2
 801c028:	f993 3000 	ldrsb.w	r3, [r3]
 801c02c:	4619      	mov	r1, r3
 801c02e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801c032:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801c036:	fb02 f303 	mul.w	r3, r2, r3
 801c03a:	005b      	lsls	r3, r3, #1
 801c03c:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 801c040:	4413      	add	r3, r2
 801c042:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c046:	fb03 f301 	mul.w	r3, r3, r1
 801c04a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c04e:	4413      	add	r3, r2
 801c050:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                for (int i = 0; i < col_count; i++)
 801c054:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801c058:	3301      	adds	r3, #1
 801c05a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801c05e:	f8b7 3272 	ldrh.w	r3, [r7, #626]	; 0x272
 801c062:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 801c066:	429a      	cmp	r2, r3
 801c068:	dbd4      	blt.n	801c014 <arm_depthwise_conv_s8_opt+0x1114>
                }
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
 801c06a:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801c06e:	1d1a      	adds	r2, r3, #4
 801c070:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801c074:	6819      	ldr	r1, [r3, #0]
 801c076:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801c07a:	1d1a      	adds	r2, r3, #4
 801c07c:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801c080:	681a      	ldr	r2, [r3, #0]
 801c082:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c086:	f8d7 02e4 	ldr.w	r0, [r7, #740]	; 0x2e4
 801c08a:	6018      	str	r0, [r3, #0]
 801c08c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801c090:	6019      	str	r1, [r3, #0]
 801c092:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c096:	601a      	str	r2, [r3, #0]
 801c098:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c0a2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801c0a6:	6812      	ldr	r2, [r2, #0]
 801c0a8:	409a      	lsls	r2, r3
 801c0aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801c0ae:	601a      	str	r2, [r3, #0]
 801c0b0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c0b4:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801c0b8:	6812      	ldr	r2, [r2, #0]
 801c0ba:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801c0bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c0c0:	2200      	movs	r2, #0
 801c0c2:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801c0c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c0c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c0cc:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801c0ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c0d6:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 801c0da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801c0de:	681b      	ldr	r3, [r3, #0]
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801c0e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c0ea:	681b      	ldr	r3, [r3, #0]
 801c0ec:	461a      	mov	r2, r3
 801c0ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801c0f2:	fb02 f501 	mul.w	r5, r2, r1
 801c0f6:	fb00 f403 	mul.w	r4, r0, r3
 801c0fa:	442c      	add	r4, r5
 801c0fc:	fba0 2302 	umull	r2, r3, r0, r2
 801c100:	18e1      	adds	r1, r4, r3
 801c102:	460b      	mov	r3, r1
 801c104:	eb18 0102 	adds.w	r1, r8, r2
 801c108:	6039      	str	r1, [r7, #0]
 801c10a:	eb49 0303 	adc.w	r3, r9, r3
 801c10e:	607b      	str	r3, [r7, #4]
 801c110:	e9d7 3400 	ldrd	r3, r4, [r7]
 801c114:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 801c118:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801c11c:	f04f 0200 	mov.w	r2, #0
 801c120:	f04f 0300 	mov.w	r3, #0
 801c124:	0fc2      	lsrs	r2, r0, #31
 801c126:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801c12a:	17cb      	asrs	r3, r1, #31
 801c12c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801c130:	4613      	mov	r3, r2
 801c132:	600b      	str	r3, [r1, #0]
    return result;
 801c134:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c138:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c13a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	2b00      	cmp	r3, #0
 801c142:	dc04      	bgt.n	801c14e <arm_depthwise_conv_s8_opt+0x124e>
 801c144:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	425b      	negs	r3, r3
 801c14c:	e000      	b.n	801c150 <arm_depthwise_conv_s8_opt+0x1250>
 801c14e:	2300      	movs	r3, #0
 801c150:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801c154:	6011      	str	r1, [r2, #0]
 801c156:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801c15a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c15c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c160:	2200      	movs	r2, #0
 801c162:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c164:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c168:	2201      	movs	r2, #1
 801c16a:	681b      	ldr	r3, [r3, #0]
 801c16c:	409a      	lsls	r2, r3
 801c16e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801c172:	3a01      	subs	r2, #1
 801c174:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801c176:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c17a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801c17e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801c182:	6809      	ldr	r1, [r1, #0]
 801c184:	6812      	ldr	r2, [r2, #0]
 801c186:	400a      	ands	r2, r1
 801c188:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801c18a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c18e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801c192:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801c196:	6809      	ldr	r1, [r1, #0]
 801c198:	6812      	ldr	r2, [r2, #0]
 801c19a:	fa41 f202 	asr.w	r2, r1, r2
 801c19e:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801c1a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801c1a4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801c1a8:	6812      	ldr	r2, [r2, #0]
 801c1aa:	1052      	asrs	r2, r2, #1
 801c1ac:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801c1ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c1b2:	681b      	ldr	r3, [r3, #0]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	da06      	bge.n	801c1c6 <arm_depthwise_conv_s8_opt+0x12c6>
        threshold++;
 801c1b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801c1bc:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801c1c0:	6812      	ldr	r2, [r2, #0]
 801c1c2:	3201      	adds	r2, #1
 801c1c4:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801c1c6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801c1ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801c1ce:	6812      	ldr	r2, [r2, #0]
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	429a      	cmp	r2, r3
 801c1d4:	dd06      	ble.n	801c1e4 <arm_depthwise_conv_s8_opt+0x12e4>
        result++;
 801c1d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c1da:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801c1de:	6812      	ldr	r2, [r2, #0]
 801c1e0:	3201      	adds	r2, #1
 801c1e2:	601a      	str	r2, [r3, #0]
    return result;
 801c1e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c1e8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c1ea:	bf00      	nop
 801c1ec:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum += output_offset;
 801c1f0:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c1f4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801c1f8:	4413      	add	r3, r2
 801c1fa:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum = MAX(sum, output_activation_min);
 801c1fe:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c202:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801c206:	4293      	cmp	r3, r2
 801c208:	bfb8      	it	lt
 801c20a:	4613      	movlt	r3, r2
 801c20c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum = MIN(sum, output_activation_max);
 801c210:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c214:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801c218:	4293      	cmp	r3, r2
 801c21a:	bfa8      	it	ge
 801c21c:	4613      	movge	r3, r2
 801c21e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                *output++ = (q7_t)sum;
 801c222:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801c226:	1c5a      	adds	r2, r3, #1
 801c228:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801c22c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c230:	b252      	sxtb	r2, r2
 801c232:	701a      	strb	r2, [r3, #0]

                row_count--;
 801c234:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801c238:	3b01      	subs	r3, #1
 801c23a:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 801c23e:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801c242:	2b00      	cmp	r3, #0
 801c244:	f47f aebc 	bne.w	801bfc0 <arm_depthwise_conv_s8_opt+0x10c0>
            }

            // clear counter and pointers
            col_buffer = col_buffer_start;
 801c248:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c24c:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801c250:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 801c254:	3301      	adds	r3, #1
 801c256:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 801c25a:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 801c25e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 801c262:	429a      	cmp	r2, r3
 801c264:	f6fe af02 	blt.w	801b06c <arm_depthwise_conv_s8_opt+0x16c>
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801c268:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801c26c:	3301      	adds	r3, #1
 801c26e:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801c272:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 801c276:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 801c27a:	429a      	cmp	r2, r3
 801c27c:	f6fe aee1 	blt.w	801b042 <arm_depthwise_conv_s8_opt+0x142>
                                 output_dims,
                                 output);
#endif /* ARM_MATH_MVEI | ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801c280:	2300      	movs	r3, #0
}
 801c282:	4618      	mov	r0, r3
 801c284:	f507 774a 	add.w	r7, r7, #808	; 0x328
 801c288:	46bd      	mov	sp, r7
 801c28a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801c28e <arm_depthwise_conv_s8_opt_get_buffer_size>:

int32_t arm_depthwise_conv_s8_opt_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 801c28e:	b480      	push	{r7}
 801c290:	b083      	sub	sp, #12
 801c292:	af00      	add	r7, sp, #0
 801c294:	6078      	str	r0, [r7, #4]
 801c296:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_MVEI)
    /* The + 4 accounts for out of bounds read of the lhs buffers in the *_nt_t_* functions.  */
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t) + 4;
#elif defined(ARM_MATH_DSP)
    return (input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	68db      	ldr	r3, [r3, #12]
 801c29c:	683a      	ldr	r2, [r7, #0]
 801c29e:	6892      	ldr	r2, [r2, #8]
 801c2a0:	fb02 f303 	mul.w	r3, r2, r3
 801c2a4:	683a      	ldr	r2, [r7, #0]
 801c2a6:	6852      	ldr	r2, [r2, #4]
 801c2a8:	fb02 f303 	mul.w	r3, r2, r3
 801c2ac:	005b      	lsls	r3, r3, #1
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 801c2ae:	4618      	mov	r0, r3
 801c2b0:	370c      	adds	r7, #12
 801c2b2:	46bd      	mov	sp, r7
 801c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2b8:	4770      	bx	lr

0801c2ba <arm_depthwise_conv_wrapper_s8>:
                                         const q7_t *filter,
                                         const cmsis_nn_dims *bias_dims,
                                         const int32_t *bias,
                                         const cmsis_nn_dims *output_dims,
                                         q7_t *output)
{
 801c2ba:	b580      	push	{r7, lr}
 801c2bc:	b08e      	sub	sp, #56	; 0x38
 801c2be:	af08      	add	r7, sp, #32
 801c2c0:	60f8      	str	r0, [r7, #12]
 801c2c2:	60b9      	str	r1, [r7, #8]
 801c2c4:	607a      	str	r2, [r7, #4]
 801c2c6:	603b      	str	r3, [r7, #0]
    arm_status status = ARM_MATH_SUCCESS;
 801c2c8:	2300      	movs	r3, #0
 801c2ca:	75fb      	strb	r3, [r7, #23]
    if (1 == dw_conv_params->ch_mult)
 801c2cc:	68bb      	ldr	r3, [r7, #8]
 801c2ce:	689b      	ldr	r3, [r3, #8]
 801c2d0:	2b01      	cmp	r3, #1
 801c2d2:	d139      	bne.n	801c348 <arm_depthwise_conv_wrapper_s8+0x8e>
    {
#if !defined(ARM_MATH_MVEI)
        if ((filter_dims->w == 3) && (filter_dims->h == 3) && (dw_conv_params->padding.h <= 1))
 801c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2d6:	689b      	ldr	r3, [r3, #8]
 801c2d8:	2b03      	cmp	r3, #3
 801c2da:	d11e      	bne.n	801c31a <arm_depthwise_conv_wrapper_s8+0x60>
 801c2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2de:	685b      	ldr	r3, [r3, #4]
 801c2e0:	2b03      	cmp	r3, #3
 801c2e2:	d11a      	bne.n	801c31a <arm_depthwise_conv_wrapper_s8+0x60>
 801c2e4:	68bb      	ldr	r3, [r7, #8]
 801c2e6:	699b      	ldr	r3, [r3, #24]
 801c2e8:	2b01      	cmp	r3, #1
 801c2ea:	dc16      	bgt.n	801c31a <arm_depthwise_conv_wrapper_s8+0x60>
        {
            status = arm_depthwise_conv_3x3_s8(ctx,
 801c2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2ee:	9306      	str	r3, [sp, #24]
 801c2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c2f2:	9305      	str	r3, [sp, #20]
 801c2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2f6:	9304      	str	r3, [sp, #16]
 801c2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2fa:	9303      	str	r3, [sp, #12]
 801c2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2fe:	9302      	str	r3, [sp, #8]
 801c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c302:	9301      	str	r3, [sp, #4]
 801c304:	6a3b      	ldr	r3, [r7, #32]
 801c306:	9300      	str	r3, [sp, #0]
 801c308:	683b      	ldr	r3, [r7, #0]
 801c30a:	687a      	ldr	r2, [r7, #4]
 801c30c:	68b9      	ldr	r1, [r7, #8]
 801c30e:	68f8      	ldr	r0, [r7, #12]
 801c310:	f7fc fecf 	bl	80190b2 <arm_depthwise_conv_3x3_s8>
 801c314:	4603      	mov	r3, r0
 801c316:	75fb      	strb	r3, [r7, #23]
 801c318:	e02c      	b.n	801c374 <arm_depthwise_conv_wrapper_s8+0xba>
                                               output);
        }
        else
#endif
        {
            status = arm_depthwise_conv_s8_opt(ctx,
 801c31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c31c:	9306      	str	r3, [sp, #24]
 801c31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c320:	9305      	str	r3, [sp, #20]
 801c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c324:	9304      	str	r3, [sp, #16]
 801c326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c328:	9303      	str	r3, [sp, #12]
 801c32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c32c:	9302      	str	r3, [sp, #8]
 801c32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c330:	9301      	str	r3, [sp, #4]
 801c332:	6a3b      	ldr	r3, [r7, #32]
 801c334:	9300      	str	r3, [sp, #0]
 801c336:	683b      	ldr	r3, [r7, #0]
 801c338:	687a      	ldr	r2, [r7, #4]
 801c33a:	68b9      	ldr	r1, [r7, #8]
 801c33c:	68f8      	ldr	r0, [r7, #12]
 801c33e:	f7fe fddf 	bl	801af00 <arm_depthwise_conv_s8_opt>
 801c342:	4603      	mov	r3, r0
 801c344:	75fb      	strb	r3, [r7, #23]
 801c346:	e015      	b.n	801c374 <arm_depthwise_conv_wrapper_s8+0xba>
                                               output);
        }
    }
    else
    {
        status = arm_depthwise_conv_s8(ctx,
 801c348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c34a:	9306      	str	r3, [sp, #24]
 801c34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c34e:	9305      	str	r3, [sp, #20]
 801c350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c352:	9304      	str	r3, [sp, #16]
 801c354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c356:	9303      	str	r3, [sp, #12]
 801c358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c35a:	9302      	str	r3, [sp, #8]
 801c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c35e:	9301      	str	r3, [sp, #4]
 801c360:	6a3b      	ldr	r3, [r7, #32]
 801c362:	9300      	str	r3, [sp, #0]
 801c364:	683b      	ldr	r3, [r7, #0]
 801c366:	687a      	ldr	r2, [r7, #4]
 801c368:	68b9      	ldr	r1, [r7, #8]
 801c36a:	68f8      	ldr	r0, [r7, #12]
 801c36c:	f7fe fcf8 	bl	801ad60 <arm_depthwise_conv_s8>
 801c370:	4603      	mov	r3, r0
 801c372:	75fb      	strb	r3, [r7, #23]
                                       output_dims,
                                       output);
    }

    /* Return to application */
    return status;
 801c374:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c378:	4618      	mov	r0, r3
 801c37a:	3718      	adds	r7, #24
 801c37c:	46bd      	mov	sp, r7
 801c37e:	bd80      	pop	{r7, pc}

0801c380 <arm_depthwise_conv_wrapper_s8_get_buffer_size>:

int32_t arm_depthwise_conv_wrapper_s8_get_buffer_size(const cmsis_nn_dw_conv_params *dw_conv_params,
                                                      const cmsis_nn_dims *input_dims,
                                                      const cmsis_nn_dims *filter_dims,
                                                      const cmsis_nn_dims *output_dims)
{
 801c380:	b580      	push	{r7, lr}
 801c382:	b086      	sub	sp, #24
 801c384:	af00      	add	r7, sp, #0
 801c386:	60f8      	str	r0, [r7, #12]
 801c388:	60b9      	str	r1, [r7, #8]
 801c38a:	607a      	str	r2, [r7, #4]
 801c38c:	603b      	str	r3, [r7, #0]
    (void)dw_conv_params;
    int32_t size = 0;
 801c38e:	2300      	movs	r3, #0
 801c390:	617b      	str	r3, [r7, #20]

    if (input_dims->c == output_dims->c)
 801c392:	68bb      	ldr	r3, [r7, #8]
 801c394:	68da      	ldr	r2, [r3, #12]
 801c396:	683b      	ldr	r3, [r7, #0]
 801c398:	68db      	ldr	r3, [r3, #12]
 801c39a:	429a      	cmp	r2, r3
 801c39c:	d104      	bne.n	801c3a8 <arm_depthwise_conv_wrapper_s8_get_buffer_size+0x28>
    {
        size = arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims);
 801c39e:	6879      	ldr	r1, [r7, #4]
 801c3a0:	68b8      	ldr	r0, [r7, #8]
 801c3a2:	f7ff ff74 	bl	801c28e <arm_depthwise_conv_s8_opt_get_buffer_size>
 801c3a6:	6178      	str	r0, [r7, #20]
    }

    return size;
 801c3a8:	697b      	ldr	r3, [r7, #20]
}
 801c3aa:	4618      	mov	r0, r3
 801c3ac:	3718      	adds	r7, #24
 801c3ae:	46bd      	mov	sp, r7
 801c3b0:	bd80      	pop	{r7, pc}

0801c3b2 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 801c3b2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801c3b6:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 801c3ba:	af00      	add	r7, sp, #0
 801c3bc:	f107 0434 	add.w	r4, r7, #52	; 0x34
 801c3c0:	6020      	str	r0, [r4, #0]
 801c3c2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801c3c6:	6001      	str	r1, [r0, #0]
 801c3c8:	4611      	mov	r1, r2
 801c3ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801c3ce:	6013      	str	r3, [r2, #0]
 801c3d0:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 801c3d4:	460b      	mov	r3, r1
 801c3d6:	8013      	strh	r3, [r2, #0]

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 801c3d8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801c3dc:	881b      	ldrh	r3, [r3, #0]
 801c3de:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 801c3e2:	4413      	add	r3, r2
 801c3e4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    const int32_t *bias = output_bias;
 801c3e8:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801c3ec:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

    uint16_t row_count = output_ch / 2;
 801c3f0:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801c3f4:	881b      	ldrh	r3, [r3, #0]
 801c3f6:	085b      	lsrs	r3, r3, #1
 801c3f8:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
    const q7_t *ip_a0 = input_a;
 801c3fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c400:	681b      	ldr	r3, [r3, #0]
 801c402:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
    /* this loop over rows in A */
    while (row_count)
 801c406:	f000 bee9 	b.w	801d1dc <arm_nn_mat_mult_kernel_s8_s16+0xe2a>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 801c40a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801c40e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 801c416:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801c41a:	681a      	ldr	r2, [r3, #0]
 801c41c:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801c420:	005b      	lsls	r3, r3, #1
 801c422:	441a      	add	r2, r3
 801c424:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c428:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 801c42a:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801c42e:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801c432:	4413      	add	r3, r2
 801c434:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

        /* Init accumulator with bias for channel N and N + 1 */
        q31_t ch_0_out_0 = *bias;
 801c438:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        q31_t ch_0_out_1 = *bias++;
 801c442:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801c446:	1d1a      	adds	r2, r3, #4
 801c448:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 801c44c:	681b      	ldr	r3, [r3, #0]
 801c44e:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        q31_t ch_1_out_0 = *bias;
 801c452:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        q31_t ch_1_out_1 = *bias++;
 801c45c:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801c460:	1d1a      	adds	r2, r3, #4
 801c462:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

        uint16_t col_count = num_col_a / 4;
 801c46c:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801c470:	089b      	lsrs	r3, r3, #2
 801c472:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        /* accumulate over the vector */
        while (col_count)
 801c476:	e2a0      	b.n	801c9ba <arm_nn_mat_mult_kernel_s8_s16+0x608>
 801c478:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801c47c:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801c480:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801c482:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	461a      	mov	r2, r3
 801c48e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c492:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801c494:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	1d1a      	adds	r2, r3, #4
 801c49e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	601a      	str	r2, [r3, #0]
    return (val);
 801c4a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c4aa:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02, a11, a12;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801c4ac:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 801c4b0:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801c4b4:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 801c4b8:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801c4ba:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801c4be:	681b      	ldr	r3, [r3, #0]
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	681b      	ldr	r3, [r3, #0]
 801c4c4:	461a      	mov	r2, r3
 801c4c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c4ca:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801c4cc:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	681b      	ldr	r3, [r3, #0]
 801c4d4:	1d1a      	adds	r2, r3, #4
 801c4d6:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	601a      	str	r2, [r3, #0]
    return (val);
 801c4de:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c4e2:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801c4e4:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 801c4e8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c4ec:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801c4f0:	601a      	str	r2, [r3, #0]
 801c4f2:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 801c4f6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801c4fa:	601a      	str	r2, [r3, #0]
 801c4fc:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 801c500:	f107 0298 	add.w	r2, r7, #152	; 0x98
 801c504:	601a      	str	r2, [r3, #0]
 801c506:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801c50a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801c50e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801c510:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	681b      	ldr	r3, [r3, #0]
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	461a      	mov	r2, r3
 801c51c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c520:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c522:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	681b      	ldr	r3, [r3, #0]
 801c52a:	1d1a      	adds	r2, r3, #4
 801c52c:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	601a      	str	r2, [r3, #0]
    return (val);
 801c534:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c538:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801c53a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801c53e:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 801c540:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801c544:	681a      	ldr	r2, [r3, #0]
 801c546:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801c54a:	601a      	str	r2, [r3, #0]
 801c54c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801c550:	2208      	movs	r2, #8
 801c552:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801c554:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 801c558:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801c55c:	681b      	ldr	r3, [r3, #0]
 801c55e:	f003 031f 	and.w	r3, r3, #31
 801c562:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c564:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801c568:	681b      	ldr	r3, [r3, #0]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d103      	bne.n	801c576 <arm_nn_mat_mult_kernel_s8_s16+0x1c4>
    return op1;
 801c56e:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	e007      	b.n	801c586 <arm_nn_mat_mult_kernel_s8_s16+0x1d4>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c576:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801c57a:	f507 712e 	add.w	r1, r7, #696	; 0x2b8
 801c57e:	681a      	ldr	r2, [r3, #0]
 801c580:	680b      	ldr	r3, [r1, #0]
 801c582:	fa62 f303 	ror.w	r3, r2, r3
 801c586:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 801c58a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c58c:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	fa2f f283 	sxtb16	r2, r3
 801c596:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801c59a:	601a      	str	r2, [r3, #0]
  return(result);
 801c59c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801c5a0:	681a      	ldr	r2, [r3, #0]
 801c5a2:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801c5a6:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 801c5a8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801c5ac:	681a      	ldr	r2, [r3, #0]
 801c5ae:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 801c5b2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c5b4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 801c5b8:	681b      	ldr	r3, [r3, #0]
 801c5ba:	fa2f f283 	sxtb16	r2, r3
 801c5be:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 801c5c2:	601a      	str	r2, [r3, #0]
  return(result);
 801c5c4:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 801c5c8:	681a      	ldr	r2, [r3, #0]
 801c5ca:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801c5ce:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801c5d0:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 801c5d4:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801c5d8:	681b      	ldr	r3, [r3, #0]
 801c5da:	6013      	str	r3, [r2, #0]
 801c5dc:	f507 7226 	add.w	r2, r7, #664	; 0x298
 801c5e0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	6013      	str	r3, [r2, #0]
 801c5e8:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 801c5ec:	681a      	ldr	r2, [r3, #0]
 801c5ee:	f507 7326 	add.w	r3, r7, #664	; 0x298
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 801c5f8:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801c5fc:	601a      	str	r2, [r3, #0]
 801c5fe:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801c602:	681b      	ldr	r3, [r3, #0]
 801c604:	461a      	mov	r2, r3
 801c606:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801c60e:	f507 7224 	add.w	r2, r7, #656	; 0x290
 801c612:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801c616:	681b      	ldr	r3, [r3, #0]
 801c618:	6013      	str	r3, [r2, #0]
 801c61a:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 801c61e:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	6013      	str	r3, [r2, #0]
 801c626:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801c62a:	681a      	ldr	r2, [r3, #0]
 801c62c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 801c630:	681b      	ldr	r3, [r3, #0]
 801c632:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 801c636:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801c63a:	601a      	str	r2, [r3, #0]
 801c63c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	461a      	mov	r2, r3
 801c644:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 801c648:	681b      	ldr	r3, [r3, #0]
 801c64a:	601a      	str	r2, [r3, #0]
    return source;
 801c64c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c650:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 801c652:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 801c656:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801c65a:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 801c65e:	601a      	str	r2, [r3, #0]
 801c660:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801c664:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801c668:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c66c:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 801c670:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801c674:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
    memcpy(&val, *in_q7, 4);
 801c678:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	681b      	ldr	r3, [r3, #0]
 801c680:	461a      	mov	r2, r3
 801c682:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c686:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c688:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	1d1a      	adds	r2, r3, #4
 801c690:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801c694:	601a      	str	r2, [r3, #0]
    return (val);
 801c696:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c69a:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801c69c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 801c6a0:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 801c6a4:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801c6a8:	2308      	movs	r3, #8
 801c6aa:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
  op2 %= 32U;
 801c6ae:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801c6b2:	f003 031f 	and.w	r3, r3, #31
 801c6b6:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
  if (op2 == 0U)
 801c6ba:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d102      	bne.n	801c6c8 <arm_nn_mat_mult_kernel_s8_s16+0x316>
    return op1;
 801c6c2:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 801c6c6:	e005      	b.n	801c6d4 <arm_nn_mat_mult_kernel_s8_s16+0x322>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c6c8:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 801c6cc:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801c6d0:	fa62 f303 	ror.w	r3, r2, r3
 801c6d4:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c6d8:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 801c6dc:	fa2f f383 	sxtb16	r3, r3
 801c6e0:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
  return(result);
 801c6e4:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 801c6e8:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
    q31_t inAbuf2 = __SXTB16(inA);
 801c6ec:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 801c6f0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801c6f4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c6f6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801c6fa:	681b      	ldr	r3, [r3, #0]
 801c6fc:	fa2f f283 	sxtb16	r2, r3
 801c700:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 801c704:	601a      	str	r2, [r3, #0]
  return(result);
 801c706:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 801c70a:	681a      	ldr	r2, [r3, #0]
 801c70c:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 801c710:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801c712:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 801c716:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801c71a:	601a      	str	r2, [r3, #0]
 801c71c:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 801c720:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	6013      	str	r3, [r2, #0]
 801c728:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 801c72c:	681a      	ldr	r2, [r3, #0]
 801c72e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 801c738:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 801c73c:	601a      	str	r2, [r3, #0]
 801c73e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	461a      	mov	r2, r3
 801c746:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 801c74a:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801c74c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801c750:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	6013      	str	r3, [r2, #0]
 801c758:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 801c75c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801c760:	601a      	str	r2, [r3, #0]
 801c762:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801c766:	681a      	ldr	r2, [r3, #0]
 801c768:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 801c76c:	681b      	ldr	r3, [r3, #0]
 801c76e:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 801c772:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 801c776:	601a      	str	r2, [r3, #0]
 801c778:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 801c77c:	681b      	ldr	r3, [r3, #0]
 801c77e:	461a      	mov	r2, r3
 801c780:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801c784:	601a      	str	r2, [r3, #0]
    return source;
 801c786:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801c78a:	681b      	ldr	r3, [r3, #0]
            ip_a1 = read_and_pad(ip_a1, &a11, &a12);
 801c78c:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 801c790:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	4619      	mov	r1, r3
 801c798:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 801c79c:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 801c7a0:	f8c7 1324 	str.w	r1, [r7, #804]	; 0x324
 801c7a4:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801c7a8:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c7ac:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 801c7b0:	f8d7 1320 	ldr.w	r1, [r7, #800]	; 0x320
 801c7b4:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 801c7b8:	fb22 3301 	smlad	r3, r2, r1, r3
 801c7bc:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
  return(result);
 801c7c0:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 801c7c4:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 801c7c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801c7cc:	681b      	ldr	r3, [r3, #0]
 801c7ce:	4619      	mov	r1, r3
 801c7d0:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 801c7d4:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801c7d8:	f8c7 1334 	str.w	r1, [r7, #820]	; 0x334
 801c7dc:	f8c7 2330 	str.w	r2, [r7, #816]	; 0x330
 801c7e0:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c7e4:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 801c7e8:	f8d7 1330 	ldr.w	r1, [r7, #816]	; 0x330
 801c7ec:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 801c7f0:	fb22 3301 	smlad	r3, r2, r1, r3
 801c7f4:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
  return(result);
 801c7f8:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 801c7fc:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
            ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 801c800:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	4619      	mov	r1, r3
 801c808:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 801c80c:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 801c810:	f8c7 1344 	str.w	r1, [r7, #836]	; 0x344
 801c814:	f8c7 2340 	str.w	r2, [r7, #832]	; 0x340
 801c818:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c81c:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 801c820:	f8d7 1340 	ldr.w	r1, [r7, #832]	; 0x340
 801c824:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 801c828:	fb22 3301 	smlad	r3, r2, r1, r3
 801c82c:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
  return(result);
 801c830:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 801c834:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
            ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 801c838:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801c83c:	681b      	ldr	r3, [r3, #0]
 801c83e:	4619      	mov	r1, r3
 801c840:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 801c844:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 801c848:	f8c7 1354 	str.w	r1, [r7, #852]	; 0x354
 801c84c:	f8c7 2350 	str.w	r2, [r7, #848]	; 0x350
 801c850:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c854:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 801c858:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 801c85c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 801c860:	fb22 3301 	smlad	r3, r2, r1, r3
 801c864:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
  return(result);
 801c868:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 801c86c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 801c870:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801c874:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
    memcpy(&val, *in_q15, 4);
 801c878:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801c87c:	681b      	ldr	r3, [r3, #0]
 801c87e:	681b      	ldr	r3, [r3, #0]
 801c880:	461a      	mov	r2, r3
 801c882:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801c886:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801c888:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801c88c:	681b      	ldr	r3, [r3, #0]
 801c88e:	1d1a      	adds	r2, r3, #4
 801c890:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801c894:	601a      	str	r2, [r3, #0]
    return (val);
 801c896:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801c89a:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801c89c:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 801c8a0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c8a4:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
    memcpy(&val, *in_q15, 4);
 801c8a8:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801c8ac:	681b      	ldr	r3, [r3, #0]
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	461a      	mov	r2, r3
 801c8b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c8b6:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801c8b8:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	1d1a      	adds	r2, r3, #4
 801c8c0:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801c8c4:	601a      	str	r2, [r3, #0]
    return (val);
 801c8c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c8ca:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801c8cc:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 801c8d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c8d4:	681b      	ldr	r3, [r3, #0]
 801c8d6:	4619      	mov	r1, r3
 801c8d8:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 801c8dc:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 801c8e0:	f8c7 136c 	str.w	r1, [r7, #876]	; 0x36c
 801c8e4:	f8c7 2368 	str.w	r2, [r7, #872]	; 0x368
 801c8e8:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c8ec:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 801c8f0:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 801c8f4:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 801c8f8:	fb22 3301 	smlad	r3, r2, r1, r3
 801c8fc:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
  return(result);
 801c900:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801c904:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 801c908:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c90c:	681b      	ldr	r3, [r3, #0]
 801c90e:	4619      	mov	r1, r3
 801c910:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 801c914:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801c918:	f8c7 137c 	str.w	r1, [r7, #892]	; 0x37c
 801c91c:	f8c7 2378 	str.w	r2, [r7, #888]	; 0x378
 801c920:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c924:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 801c928:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 801c92c:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 801c930:	fb22 3301 	smlad	r3, r2, r1, r3
 801c934:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
  return(result);
 801c938:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 801c93c:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 801c940:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c944:	681b      	ldr	r3, [r3, #0]
 801c946:	4619      	mov	r1, r3
 801c948:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 801c94c:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 801c950:	f8c7 138c 	str.w	r1, [r7, #908]	; 0x38c
 801c954:	f8c7 2388 	str.w	r2, [r7, #904]	; 0x388
 801c958:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c95c:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 801c960:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801c964:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 801c968:	fb22 3301 	smlad	r3, r2, r1, r3
 801c96c:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
  return(result);
 801c970:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 801c974:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 801c978:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c97c:	681b      	ldr	r3, [r3, #0]
 801c97e:	4619      	mov	r1, r3
 801c980:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 801c984:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 801c988:	f8c7 139c 	str.w	r1, [r7, #924]	; 0x39c
 801c98c:	f8c7 2398 	str.w	r2, [r7, #920]	; 0x398
 801c990:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c994:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 801c998:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 801c99c:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 801c9a0:	fb22 3301 	smlad	r3, r2, r1, r3
 801c9a4:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
  return(result);
 801c9a8:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801c9ac:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

            col_count--;
 801c9b0:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 801c9b4:	3b01      	subs	r3, #1
 801c9b6:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        while (col_count)
 801c9ba:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	f47f ad5a 	bne.w	801c478 <arm_nn_mat_mult_kernel_s8_s16+0xc6>
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 801c9c4:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801c9c8:	f003 0303 	and.w	r3, r3, #3
 801c9cc:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        while (col_count)
 801c9d0:	e054      	b.n	801ca7c <arm_nn_mat_mult_kernel_s8_s16+0x6ca>
        {
            q7_t a0 = *ip_a0++;
 801c9d2:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 801c9d6:	1c5a      	adds	r2, r3, #1
 801c9d8:	f8c7 23e0 	str.w	r2, [r7, #992]	; 0x3e0
 801c9dc:	781b      	ldrb	r3, [r3, #0]
 801c9de:	f887 33af 	strb.w	r3, [r7, #943]	; 0x3af
            q15_t b0 = *ip_b0++;
 801c9e2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801c9e6:	681a      	ldr	r2, [r3, #0]
 801c9e8:	1c91      	adds	r1, r2, #2
 801c9ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801c9ee:	6019      	str	r1, [r3, #0]
 801c9f0:	8813      	ldrh	r3, [r2, #0]
 801c9f2:	f8a7 33ac 	strh.w	r3, [r7, #940]	; 0x3ac
            q7_t a1 = *ip_a1++;
 801c9f6:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 801c9fa:	1c5a      	adds	r2, r3, #1
 801c9fc:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 801ca00:	781b      	ldrb	r3, [r3, #0]
 801ca02:	f887 33ab 	strb.w	r3, [r7, #939]	; 0x3ab
            q15_t b1 = *ip_b1++;
 801ca06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ca0a:	681a      	ldr	r2, [r3, #0]
 801ca0c:	1c91      	adds	r1, r2, #2
 801ca0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ca12:	6019      	str	r1, [r3, #0]
 801ca14:	8813      	ldrh	r3, [r2, #0]
 801ca16:	f8a7 33a8 	strh.w	r3, [r7, #936]	; 0x3a8

            ch_0_out_0 += a0 * b0;
 801ca1a:	f997 33af 	ldrsb.w	r3, [r7, #943]	; 0x3af
 801ca1e:	f9b7 23ac 	ldrsh.w	r2, [r7, #940]	; 0x3ac
 801ca22:	fb02 f303 	mul.w	r3, r2, r3
 801ca26:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 801ca2a:	4413      	add	r3, r2
 801ca2c:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            ch_0_out_1 += a0 * b1;
 801ca30:	f997 33af 	ldrsb.w	r3, [r7, #943]	; 0x3af
 801ca34:	f9b7 23a8 	ldrsh.w	r2, [r7, #936]	; 0x3a8
 801ca38:	fb02 f303 	mul.w	r3, r2, r3
 801ca3c:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 801ca40:	4413      	add	r3, r2
 801ca42:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
            ch_1_out_0 += a1 * b0;
 801ca46:	f997 33ab 	ldrsb.w	r3, [r7, #939]	; 0x3ab
 801ca4a:	f9b7 23ac 	ldrsh.w	r2, [r7, #940]	; 0x3ac
 801ca4e:	fb02 f303 	mul.w	r3, r2, r3
 801ca52:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 801ca56:	4413      	add	r3, r2
 801ca58:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
            ch_1_out_1 += a1 * b1;
 801ca5c:	f997 33ab 	ldrsb.w	r3, [r7, #939]	; 0x3ab
 801ca60:	f9b7 23a8 	ldrsh.w	r2, [r7, #936]	; 0x3a8
 801ca64:	fb02 f303 	mul.w	r3, r2, r3
 801ca68:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801ca6c:	4413      	add	r3, r2
 801ca6e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
            col_count--;
 801ca72:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 801ca76:	3b01      	subs	r3, #1
 801ca78:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        while (col_count)
 801ca7c:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	d1a6      	bne.n	801c9d2 <arm_nn_mat_mult_kernel_s8_s16+0x620>
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 801ca84:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801ca88:	6818      	ldr	r0, [r3, #0]
 801ca8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ca8e:	681b      	ldr	r3, [r3, #0]
 801ca90:	6819      	ldr	r1, [r3, #0]
 801ca92:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 801ca96:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 801ca9a:	6013      	str	r3, [r2, #0]
 801ca9c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801caa0:	6018      	str	r0, [r3, #0]
 801caa2:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801caa6:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801caa8:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801cab2:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	fa03 f202 	lsl.w	r2, r3, r2
 801cabc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801cac0:	601a      	str	r2, [r3, #0]
 801cac2:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801cac6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801cace:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801cad2:	2200      	movs	r2, #0
 801cad4:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801cad6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801cada:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801cade:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801cae0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801cae4:	2200      	movs	r2, #0
 801cae6:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801cae8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801caec:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	4618      	mov	r0, r3
 801caf4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801caf8:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801cafc:	681b      	ldr	r3, [r3, #0]
 801cafe:	461a      	mov	r2, r3
 801cb00:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801cb04:	fb02 f501 	mul.w	r5, r2, r1
 801cb08:	fb00 f403 	mul.w	r4, r0, r3
 801cb0c:	442c      	add	r4, r5
 801cb0e:	fba0 2302 	umull	r2, r3, r0, r2
 801cb12:	18e1      	adds	r1, r4, r3
 801cb14:	460b      	mov	r3, r1
 801cb16:	eb18 0102 	adds.w	r1, r8, r2
 801cb1a:	60b9      	str	r1, [r7, #8]
 801cb1c:	eb49 0303 	adc.w	r3, r9, r3
 801cb20:	60fb      	str	r3, [r7, #12]
 801cb22:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801cb26:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
    result = (int32_t)(mult.long_long >> 31);
 801cb2a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801cb2e:	f04f 0000 	mov.w	r0, #0
 801cb32:	f04f 0100 	mov.w	r1, #0
 801cb36:	0fd0      	lsrs	r0, r2, #31
 801cb38:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801cb3c:	17d9      	asrs	r1, r3, #31
 801cb3e:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 801cb42:	4603      	mov	r3, r0
 801cb44:	6013      	str	r3, [r2, #0]
    return result;
 801cb46:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801cb4a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801cb4c:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801cb50:	681b      	ldr	r3, [r3, #0]
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	dc04      	bgt.n	801cb60 <arm_nn_mat_mult_kernel_s8_s16+0x7ae>
 801cb56:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	425a      	negs	r2, r3
 801cb5e:	e000      	b.n	801cb62 <arm_nn_mat_mult_kernel_s8_s16+0x7b0>
 801cb60:	2200      	movs	r2, #0
 801cb62:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801cb66:	6019      	str	r1, [r3, #0]
 801cb68:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801cb6c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801cb6e:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801cb72:	2200      	movs	r2, #0
 801cb74:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801cb76:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801cb7a:	2201      	movs	r2, #1
 801cb7c:	681b      	ldr	r3, [r3, #0]
 801cb7e:	fa02 f303 	lsl.w	r3, r2, r3
 801cb82:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801cb86:	3b01      	subs	r3, #1
 801cb88:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801cb8a:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 801cb8e:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 801cb92:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801cb96:	6812      	ldr	r2, [r2, #0]
 801cb98:	681b      	ldr	r3, [r3, #0]
 801cb9a:	4013      	ands	r3, r2
 801cb9c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801cb9e:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 801cba2:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 801cba6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801cbaa:	6812      	ldr	r2, [r2, #0]
 801cbac:	681b      	ldr	r3, [r3, #0]
 801cbae:	fa42 f303 	asr.w	r3, r2, r3
 801cbb2:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801cbb4:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801cbb8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801cbbc:	681b      	ldr	r3, [r3, #0]
 801cbbe:	105b      	asrs	r3, r3, #1
 801cbc0:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801cbc2:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	da06      	bge.n	801cbda <arm_nn_mat_mult_kernel_s8_s16+0x828>
        threshold++;
 801cbcc:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801cbd0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801cbd4:	681b      	ldr	r3, [r3, #0]
 801cbd6:	3301      	adds	r3, #1
 801cbd8:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801cbda:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801cbde:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 801cbe2:	681a      	ldr	r2, [r3, #0]
 801cbe4:	680b      	ldr	r3, [r1, #0]
 801cbe6:	429a      	cmp	r2, r3
 801cbe8:	dd06      	ble.n	801cbf8 <arm_nn_mat_mult_kernel_s8_s16+0x846>
        result++;
 801cbea:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 801cbee:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801cbf2:	681b      	ldr	r3, [r3, #0]
 801cbf4:	3301      	adds	r3, #1
 801cbf6:	6013      	str	r3, [r2, #0]
    return result;
 801cbf8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801cbfc:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801cbfe:	bf00      	nop
 801cc00:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        ch_0_out_0 += out_offset;
 801cc04:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 801cc08:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801cc0c:	4413      	add	r3, r2
 801cc0e:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 801cc12:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801cc16:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 801cc1a:	4293      	cmp	r3, r2
 801cc1c:	bfb8      	it	lt
 801cc1e:	4613      	movlt	r3, r2
 801cc20:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 801cc24:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801cc28:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 801cc2c:	4293      	cmp	r3, r2
 801cc2e:	bfa8      	it	ge
 801cc30:	4613      	movge	r3, r2
 801cc32:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        *out_0++ = (q7_t)ch_0_out_0;
 801cc36:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 801cc3a:	1c53      	adds	r3, r2, #1
 801cc3c:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 801cc40:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 801cc44:	b25b      	sxtb	r3, r3
 801cc46:	7013      	strb	r3, [r2, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 801cc48:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801cc4c:	6818      	ldr	r0, [r3, #0]
 801cc4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cc52:	681b      	ldr	r3, [r3, #0]
 801cc54:	6819      	ldr	r1, [r3, #0]
 801cc56:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 801cc5a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801cc5e:	6013      	str	r3, [r2, #0]
 801cc60:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801cc64:	6018      	str	r0, [r3, #0]
 801cc66:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801cc6a:	6019      	str	r1, [r3, #0]
 801cc6c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801cc76:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	fa03 f202 	lsl.w	r2, r3, r2
 801cc80:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801cc84:	601a      	str	r2, [r3, #0]
 801cc86:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 801cc8a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801cc92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801cc96:	2200      	movs	r2, #0
 801cc98:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801cc9a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cc9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801cca2:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801cca4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cca8:	2200      	movs	r2, #0
 801ccaa:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801ccac:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 801ccb0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801ccb4:	681b      	ldr	r3, [r3, #0]
 801ccb6:	4618      	mov	r0, r3
 801ccb8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801ccbc:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801ccc0:	681b      	ldr	r3, [r3, #0]
 801ccc2:	461a      	mov	r2, r3
 801ccc4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801ccc8:	fb02 f501 	mul.w	r5, r2, r1
 801cccc:	fb00 f403 	mul.w	r4, r0, r3
 801ccd0:	442c      	add	r4, r5
 801ccd2:	fba0 2302 	umull	r2, r3, r0, r2
 801ccd6:	18e1      	adds	r1, r4, r3
 801ccd8:	460b      	mov	r3, r1
 801ccda:	eb18 0102 	adds.w	r1, r8, r2
 801ccde:	6139      	str	r1, [r7, #16]
 801cce0:	eb49 0303 	adc.w	r3, r9, r3
 801cce4:	617b      	str	r3, [r7, #20]
 801cce6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801ccea:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
    result = (int32_t)(mult.long_long >> 31);
 801ccee:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801ccf2:	f04f 0000 	mov.w	r0, #0
 801ccf6:	f04f 0100 	mov.w	r1, #0
 801ccfa:	0fd0      	lsrs	r0, r2, #31
 801ccfc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801cd00:	17d9      	asrs	r1, r3, #31
 801cd02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801cd06:	4603      	mov	r3, r0
 801cd08:	6013      	str	r3, [r2, #0]
    return result;
 801cd0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801cd0e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801cd10:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	2b00      	cmp	r3, #0
 801cd18:	dc04      	bgt.n	801cd24 <arm_nn_mat_mult_kernel_s8_s16+0x972>
 801cd1a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801cd1e:	681b      	ldr	r3, [r3, #0]
 801cd20:	425a      	negs	r2, r3
 801cd22:	e000      	b.n	801cd26 <arm_nn_mat_mult_kernel_s8_s16+0x974>
 801cd24:	2200      	movs	r2, #0
 801cd26:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801cd2a:	6019      	str	r1, [r3, #0]
 801cd2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801cd30:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801cd32:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801cd36:	2200      	movs	r2, #0
 801cd38:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801cd3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801cd3e:	2201      	movs	r2, #1
 801cd40:	681b      	ldr	r3, [r3, #0]
 801cd42:	fa02 f303 	lsl.w	r3, r2, r3
 801cd46:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801cd4a:	3b01      	subs	r3, #1
 801cd4c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801cd4e:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 801cd52:	f507 7201 	add.w	r2, r7, #516	; 0x204
 801cd56:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801cd5a:	6812      	ldr	r2, [r2, #0]
 801cd5c:	681b      	ldr	r3, [r3, #0]
 801cd5e:	4013      	ands	r3, r2
 801cd60:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801cd62:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 801cd66:	f507 7201 	add.w	r2, r7, #516	; 0x204
 801cd6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801cd6e:	6812      	ldr	r2, [r2, #0]
 801cd70:	681b      	ldr	r3, [r3, #0]
 801cd72:	fa42 f303 	asr.w	r3, r2, r3
 801cd76:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801cd78:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 801cd7c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801cd80:	681b      	ldr	r3, [r3, #0]
 801cd82:	105b      	asrs	r3, r3, #1
 801cd84:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801cd86:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801cd8a:	681b      	ldr	r3, [r3, #0]
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	da06      	bge.n	801cd9e <arm_nn_mat_mult_kernel_s8_s16+0x9ec>
        threshold++;
 801cd90:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 801cd94:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801cd98:	681b      	ldr	r3, [r3, #0]
 801cd9a:	3301      	adds	r3, #1
 801cd9c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801cd9e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801cda2:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 801cda6:	681a      	ldr	r2, [r3, #0]
 801cda8:	680b      	ldr	r3, [r1, #0]
 801cdaa:	429a      	cmp	r2, r3
 801cdac:	dd06      	ble.n	801cdbc <arm_nn_mat_mult_kernel_s8_s16+0xa0a>
        result++;
 801cdae:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 801cdb2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801cdb6:	681b      	ldr	r3, [r3, #0]
 801cdb8:	3301      	adds	r3, #1
 801cdba:	6013      	str	r3, [r2, #0]
    return result;
 801cdbc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801cdc0:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801cdc2:	bf00      	nop
 801cdc4:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        ch_0_out_1 += out_offset;
 801cdc8:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 801cdcc:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801cdd0:	4413      	add	r3, r2
 801cdd2:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801cdd6:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801cdda:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 801cdde:	4293      	cmp	r3, r2
 801cde0:	bfb8      	it	lt
 801cde2:	4613      	movlt	r3, r2
 801cde4:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801cde8:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801cdec:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 801cdf0:	4293      	cmp	r3, r2
 801cdf2:	bfa8      	it	ge
 801cdf4:	4613      	movge	r3, r2
 801cdf6:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        *out_1++ = (q7_t)ch_0_out_1;
 801cdfa:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801cdfe:	1c53      	adds	r3, r2, #1
 801ce00:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 801ce04:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801ce08:	b25b      	sxtb	r3, r3
 801ce0a:	7013      	strb	r3, [r2, #0]
        out_mult++;
 801ce0c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801ce10:	3304      	adds	r3, #4
 801ce12:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
        out_shift++;
 801ce16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801ce1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ce1e:	681b      	ldr	r3, [r3, #0]
 801ce20:	3304      	adds	r3, #4
 801ce22:	6013      	str	r3, [r2, #0]

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 801ce24:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801ce28:	6818      	ldr	r0, [r3, #0]
 801ce2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	6819      	ldr	r1, [r3, #0]
 801ce32:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 801ce36:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 801ce3a:	6013      	str	r3, [r2, #0]
 801ce3c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801ce40:	6018      	str	r0, [r3, #0]
 801ce42:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801ce46:	6019      	str	r1, [r3, #0]
 801ce48:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801ce4c:	681b      	ldr	r3, [r3, #0]
 801ce4e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801ce52:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 801ce56:	681b      	ldr	r3, [r3, #0]
 801ce58:	fa03 f202 	lsl.w	r2, r3, r2
 801ce5c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801ce60:	601a      	str	r2, [r3, #0]
 801ce62:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 801ce66:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801ce6a:	681b      	ldr	r3, [r3, #0]
 801ce6c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801ce6e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801ce72:	2200      	movs	r2, #0
 801ce74:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801ce76:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ce7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801ce7e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801ce80:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ce84:	2200      	movs	r2, #0
 801ce86:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801ce88:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 801ce8c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	4618      	mov	r0, r3
 801ce94:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801ce98:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	461a      	mov	r2, r3
 801cea0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801cea4:	fb02 f501 	mul.w	r5, r2, r1
 801cea8:	fb00 f403 	mul.w	r4, r0, r3
 801ceac:	442c      	add	r4, r5
 801ceae:	fba0 2302 	umull	r2, r3, r0, r2
 801ceb2:	18e1      	adds	r1, r4, r3
 801ceb4:	460b      	mov	r3, r1
 801ceb6:	eb18 0102 	adds.w	r1, r8, r2
 801ceba:	61b9      	str	r1, [r7, #24]
 801cebc:	eb49 0303 	adc.w	r3, r9, r3
 801cec0:	61fb      	str	r3, [r7, #28]
 801cec2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801cec6:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    result = (int32_t)(mult.long_long >> 31);
 801ceca:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801cece:	f04f 0000 	mov.w	r0, #0
 801ced2:	f04f 0100 	mov.w	r1, #0
 801ced6:	0fd0      	lsrs	r0, r2, #31
 801ced8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801cedc:	17d9      	asrs	r1, r3, #31
 801cede:	f507 720e 	add.w	r2, r7, #568	; 0x238
 801cee2:	4603      	mov	r3, r0
 801cee4:	6013      	str	r3, [r2, #0]
    return result;
 801cee6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801ceea:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ceec:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801cef0:	681b      	ldr	r3, [r3, #0]
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	dc04      	bgt.n	801cf00 <arm_nn_mat_mult_kernel_s8_s16+0xb4e>
 801cef6:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801cefa:	681b      	ldr	r3, [r3, #0]
 801cefc:	425a      	negs	r2, r3
 801cefe:	e000      	b.n	801cf02 <arm_nn_mat_mult_kernel_s8_s16+0xb50>
 801cf00:	2200      	movs	r2, #0
 801cf02:	f507 730d 	add.w	r3, r7, #564	; 0x234
 801cf06:	6019      	str	r1, [r3, #0]
 801cf08:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801cf0c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801cf0e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801cf12:	2200      	movs	r2, #0
 801cf14:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801cf16:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801cf1a:	2201      	movs	r2, #1
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	fa02 f303 	lsl.w	r3, r2, r3
 801cf22:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801cf26:	3b01      	subs	r3, #1
 801cf28:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801cf2a:	f507 7109 	add.w	r1, r7, #548	; 0x224
 801cf2e:	f507 720d 	add.w	r2, r7, #564	; 0x234
 801cf32:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801cf36:	6812      	ldr	r2, [r2, #0]
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	4013      	ands	r3, r2
 801cf3c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801cf3e:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 801cf42:	f507 720d 	add.w	r2, r7, #564	; 0x234
 801cf46:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801cf4a:	6812      	ldr	r2, [r2, #0]
 801cf4c:	681b      	ldr	r3, [r3, #0]
 801cf4e:	fa42 f303 	asr.w	r3, r2, r3
 801cf52:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801cf54:	f507 7208 	add.w	r2, r7, #544	; 0x220
 801cf58:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801cf5c:	681b      	ldr	r3, [r3, #0]
 801cf5e:	105b      	asrs	r3, r3, #1
 801cf60:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801cf62:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801cf66:	681b      	ldr	r3, [r3, #0]
 801cf68:	2b00      	cmp	r3, #0
 801cf6a:	da06      	bge.n	801cf7a <arm_nn_mat_mult_kernel_s8_s16+0xbc8>
        threshold++;
 801cf6c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 801cf70:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	3301      	adds	r3, #1
 801cf78:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801cf7a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801cf7e:	f507 7108 	add.w	r1, r7, #544	; 0x220
 801cf82:	681a      	ldr	r2, [r3, #0]
 801cf84:	680b      	ldr	r3, [r1, #0]
 801cf86:	429a      	cmp	r2, r3
 801cf88:	dd06      	ble.n	801cf98 <arm_nn_mat_mult_kernel_s8_s16+0xbe6>
        result++;
 801cf8a:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 801cf8e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	3301      	adds	r3, #1
 801cf96:	6013      	str	r3, [r2, #0]
    return result;
 801cf98:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801cf9c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801cf9e:	bf00      	nop
 801cfa0:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        ch_1_out_0 += out_offset;
 801cfa4:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 801cfa8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801cfac:	4413      	add	r3, r2
 801cfae:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 801cfb2:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801cfb6:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 801cfba:	4293      	cmp	r3, r2
 801cfbc:	bfb8      	it	lt
 801cfbe:	4613      	movlt	r3, r2
 801cfc0:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 801cfc4:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801cfc8:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 801cfcc:	4293      	cmp	r3, r2
 801cfce:	bfa8      	it	ge
 801cfd0:	4613      	movge	r3, r2
 801cfd2:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        *out_0++ = (q7_t)ch_1_out_0;
 801cfd6:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 801cfda:	1c53      	adds	r3, r2, #1
 801cfdc:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 801cfe0:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 801cfe4:	b25b      	sxtb	r3, r3
 801cfe6:	7013      	strb	r3, [r2, #0]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 801cfe8:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801cfec:	6818      	ldr	r0, [r3, #0]
 801cfee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cff2:	681b      	ldr	r3, [r3, #0]
 801cff4:	6819      	ldr	r1, [r3, #0]
 801cff6:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 801cffa:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 801cffe:	6013      	str	r3, [r2, #0]
 801d000:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801d004:	6018      	str	r0, [r3, #0]
 801d006:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801d00a:	6019      	str	r1, [r3, #0]
 801d00c:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801d016:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 801d01a:	681b      	ldr	r3, [r3, #0]
 801d01c:	fa03 f202 	lsl.w	r2, r3, r2
 801d020:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801d024:	601a      	str	r2, [r3, #0]
 801d026:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 801d02a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d032:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801d036:	2200      	movs	r2, #0
 801d038:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801d03a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d03e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d042:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801d044:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d048:	2200      	movs	r2, #0
 801d04a:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d04c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801d050:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801d054:	681b      	ldr	r3, [r3, #0]
 801d056:	4618      	mov	r0, r3
 801d058:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d05c:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801d060:	681b      	ldr	r3, [r3, #0]
 801d062:	461a      	mov	r2, r3
 801d064:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d068:	fb02 f501 	mul.w	r5, r2, r1
 801d06c:	fb00 f403 	mul.w	r4, r0, r3
 801d070:	442c      	add	r4, r5
 801d072:	fba0 2302 	umull	r2, r3, r0, r2
 801d076:	18e1      	adds	r1, r4, r3
 801d078:	460b      	mov	r3, r1
 801d07a:	eb18 0102 	adds.w	r1, r8, r2
 801d07e:	6239      	str	r1, [r7, #32]
 801d080:	eb49 0303 	adc.w	r3, r9, r3
 801d084:	627b      	str	r3, [r7, #36]	; 0x24
 801d086:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801d08a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
    result = (int32_t)(mult.long_long >> 31);
 801d08e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 801d092:	f04f 0000 	mov.w	r0, #0
 801d096:	f04f 0100 	mov.w	r1, #0
 801d09a:	0fd0      	lsrs	r0, r2, #31
 801d09c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801d0a0:	17d9      	asrs	r1, r3, #31
 801d0a2:	f507 721a 	add.w	r2, r7, #616	; 0x268
 801d0a6:	4603      	mov	r3, r0
 801d0a8:	6013      	str	r3, [r2, #0]
    return result;
 801d0aa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801d0ae:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d0b0:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801d0b4:	681b      	ldr	r3, [r3, #0]
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	dc04      	bgt.n	801d0c4 <arm_nn_mat_mult_kernel_s8_s16+0xd12>
 801d0ba:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	425a      	negs	r2, r3
 801d0c2:	e000      	b.n	801d0c6 <arm_nn_mat_mult_kernel_s8_s16+0xd14>
 801d0c4:	2200      	movs	r2, #0
 801d0c6:	f507 7319 	add.w	r3, r7, #612	; 0x264
 801d0ca:	6019      	str	r1, [r3, #0]
 801d0cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801d0d0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d0d2:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801d0d6:	2200      	movs	r2, #0
 801d0d8:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d0da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801d0de:	2201      	movs	r2, #1
 801d0e0:	681b      	ldr	r3, [r3, #0]
 801d0e2:	fa02 f303 	lsl.w	r3, r2, r3
 801d0e6:	f507 7216 	add.w	r2, r7, #600	; 0x258
 801d0ea:	3b01      	subs	r3, #1
 801d0ec:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801d0ee:	f507 7115 	add.w	r1, r7, #596	; 0x254
 801d0f2:	f507 7219 	add.w	r2, r7, #612	; 0x264
 801d0f6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801d0fa:	6812      	ldr	r2, [r2, #0]
 801d0fc:	681b      	ldr	r3, [r3, #0]
 801d0fe:	4013      	ands	r3, r2
 801d100:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801d102:	f507 7117 	add.w	r1, r7, #604	; 0x25c
 801d106:	f507 7219 	add.w	r2, r7, #612	; 0x264
 801d10a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801d10e:	6812      	ldr	r2, [r2, #0]
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	fa42 f303 	asr.w	r3, r2, r3
 801d116:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801d118:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801d11c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801d120:	681b      	ldr	r3, [r3, #0]
 801d122:	105b      	asrs	r3, r3, #1
 801d124:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801d126:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	da06      	bge.n	801d13e <arm_nn_mat_mult_kernel_s8_s16+0xd8c>
        threshold++;
 801d130:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801d134:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801d138:	681b      	ldr	r3, [r3, #0]
 801d13a:	3301      	adds	r3, #1
 801d13c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801d13e:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801d142:	f507 7114 	add.w	r1, r7, #592	; 0x250
 801d146:	681a      	ldr	r2, [r3, #0]
 801d148:	680b      	ldr	r3, [r1, #0]
 801d14a:	429a      	cmp	r2, r3
 801d14c:	dd06      	ble.n	801d15c <arm_nn_mat_mult_kernel_s8_s16+0xdaa>
        result++;
 801d14e:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 801d152:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801d156:	681b      	ldr	r3, [r3, #0]
 801d158:	3301      	adds	r3, #1
 801d15a:	6013      	str	r3, [r2, #0]
    return result;
 801d15c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801d160:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d162:	bf00      	nop
 801d164:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        ch_1_out_1 += out_offset;
 801d168:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801d16c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801d170:	4413      	add	r3, r2
 801d172:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 801d176:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801d17a:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801d17e:	4293      	cmp	r3, r2
 801d180:	bfb8      	it	lt
 801d182:	4613      	movlt	r3, r2
 801d184:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 801d188:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801d18c:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801d190:	4293      	cmp	r3, r2
 801d192:	bfa8      	it	ge
 801d194:	4613      	movge	r3, r2
 801d196:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        *out_1++ = (q7_t)ch_1_out_1;
 801d19a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801d19e:	1c53      	adds	r3, r2, #1
 801d1a0:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 801d1a4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 801d1a8:	b25b      	sxtb	r3, r3
 801d1aa:	7013      	strb	r3, [r2, #0]
        out_mult++;
 801d1ac:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801d1b0:	3304      	adds	r3, #4
 801d1b2:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
        out_shift++;
 801d1b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d1ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	3304      	adds	r3, #4
 801d1c2:	6013      	str	r3, [r2, #0]

        /* skip row */
        ip_a0 += num_col_a;
 801d1c4:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801d1c8:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801d1cc:	4413      	add	r3, r2
 801d1ce:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        row_count--;
 801d1d2:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 801d1d6:	3b01      	subs	r3, #1
 801d1d8:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
    while (row_count)
 801d1dc:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	f47f a912 	bne.w	801c40a <arm_nn_mat_mult_kernel_s8_s16+0x58>
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 801d1e6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801d1ea:	881b      	ldrh	r3, [r3, #0]
 801d1ec:	f003 0301 	and.w	r3, r3, #1
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	f000 83ed 	beq.w	801d9d0 <arm_nn_mat_mult_kernel_s8_s16+0x161e>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 801d1f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801d1fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801d1fe:	6812      	ldr	r2, [r2, #0]
 801d200:	601a      	str	r2, [r3, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 801d202:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801d206:	681a      	ldr	r2, [r3, #0]
 801d208:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801d20c:	005b      	lsls	r3, r3, #1
 801d20e:	441a      	add	r2, r3
 801d210:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d214:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 801d216:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        q31_t ch_0_out_1 = *bias++;
 801d220:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801d224:	1d1a      	adds	r2, r3, #4
 801d226:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 801d22a:	681b      	ldr	r3, [r3, #0]
 801d22c:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0

        uint16_t col_count = num_col_a >> 2;
 801d230:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801d234:	089b      	lsrs	r3, r3, #2
 801d236:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 801d23a:	e1bb      	b.n	801d5b4 <arm_nn_mat_mult_kernel_s8_s16+0x1202>
 801d23c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d240:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801d244:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801d246:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d24a:	681b      	ldr	r3, [r3, #0]
 801d24c:	681b      	ldr	r3, [r3, #0]
 801d24e:	681b      	ldr	r3, [r3, #0]
 801d250:	461a      	mov	r2, r3
 801d252:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801d256:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d258:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d25c:	681b      	ldr	r3, [r3, #0]
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	1d1a      	adds	r2, r3, #4
 801d262:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	601a      	str	r2, [r3, #0]
    return (val);
 801d26a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801d26e:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801d270:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 801d274:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801d278:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801d27c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801d27e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	681b      	ldr	r3, [r3, #0]
 801d288:	461a      	mov	r2, r3
 801d28a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d28e:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d290:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801d294:	681b      	ldr	r3, [r3, #0]
 801d296:	681b      	ldr	r3, [r3, #0]
 801d298:	1d1a      	adds	r2, r3, #4
 801d29a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	601a      	str	r2, [r3, #0]
    return (val);
 801d2a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d2a6:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801d2a8:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 801d2ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d2b0:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801d2b4:	601a      	str	r2, [r3, #0]
 801d2b6:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801d2ba:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801d2be:	601a      	str	r2, [r3, #0]
 801d2c0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801d2c4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d2c8:	601a      	str	r2, [r3, #0]
 801d2ca:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801d2ce:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801d2d2:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801d2d4:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801d2d8:	681b      	ldr	r3, [r3, #0]
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	461a      	mov	r2, r3
 801d2e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d2e4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801d2e6:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801d2ea:	681b      	ldr	r3, [r3, #0]
 801d2ec:	681b      	ldr	r3, [r3, #0]
 801d2ee:	1d1a      	adds	r2, r3, #4
 801d2f0:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801d2f4:	681b      	ldr	r3, [r3, #0]
 801d2f6:	601a      	str	r2, [r3, #0]
    return (val);
 801d2f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d2fc:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801d2fe:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801d302:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 801d304:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801d308:	681a      	ldr	r2, [r3, #0]
 801d30a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801d30e:	601a      	str	r2, [r3, #0]
 801d310:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801d314:	2208      	movs	r2, #8
 801d316:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801d318:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801d31c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801d320:	6812      	ldr	r2, [r2, #0]
 801d322:	f002 021f 	and.w	r2, r2, #31
 801d326:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801d328:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801d32c:	681b      	ldr	r3, [r3, #0]
 801d32e:	2b00      	cmp	r3, #0
 801d330:	d103      	bne.n	801d33a <arm_nn_mat_mult_kernel_s8_s16+0xf88>
    return op1;
 801d332:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801d336:	681b      	ldr	r3, [r3, #0]
 801d338:	e007      	b.n	801d34a <arm_nn_mat_mult_kernel_s8_s16+0xf98>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d33a:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 801d33e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801d342:	6812      	ldr	r2, [r2, #0]
 801d344:	681b      	ldr	r3, [r3, #0]
 801d346:	fa62 f303 	ror.w	r3, r2, r3
 801d34a:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 801d34e:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d350:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	fa2f f283 	sxtb16	r2, r3
 801d35a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801d35e:	601a      	str	r2, [r3, #0]
  return(result);
 801d360:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801d364:	681a      	ldr	r2, [r3, #0]
 801d366:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801d36a:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 801d36c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801d370:	681a      	ldr	r2, [r3, #0]
 801d372:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801d376:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d378:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801d37c:	681b      	ldr	r3, [r3, #0]
 801d37e:	fa2f f283 	sxtb16	r2, r3
 801d382:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801d386:	601a      	str	r2, [r3, #0]
  return(result);
 801d388:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801d38c:	681a      	ldr	r2, [r3, #0]
 801d38e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801d392:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801d394:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801d398:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 801d39c:	6812      	ldr	r2, [r2, #0]
 801d39e:	601a      	str	r2, [r3, #0]
 801d3a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801d3a4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801d3a8:	6812      	ldr	r2, [r2, #0]
 801d3aa:	601a      	str	r2, [r3, #0]
 801d3ac:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801d3b6:	6812      	ldr	r2, [r2, #0]
 801d3b8:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801d3bc:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801d3c0:	601a      	str	r2, [r3, #0]
 801d3c2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801d3c6:	681b      	ldr	r3, [r3, #0]
 801d3c8:	461a      	mov	r2, r3
 801d3ca:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801d3d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801d3d6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801d3da:	6812      	ldr	r2, [r2, #0]
 801d3dc:	601a      	str	r2, [r3, #0]
 801d3de:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801d3e2:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 801d3e6:	6812      	ldr	r2, [r2, #0]
 801d3e8:	601a      	str	r2, [r3, #0]
 801d3ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801d3ee:	681b      	ldr	r3, [r3, #0]
 801d3f0:	f507 729a 	add.w	r2, r7, #308	; 0x134
 801d3f4:	6812      	ldr	r2, [r2, #0]
 801d3f6:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 801d3fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d3fe:	601a      	str	r2, [r3, #0]
 801d400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	461a      	mov	r2, r3
 801d408:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801d40c:	681b      	ldr	r3, [r3, #0]
 801d40e:	601a      	str	r2, [r3, #0]
    return source;
 801d410:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d414:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 801d416:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 801d41a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d41e:	681b      	ldr	r3, [r3, #0]
 801d420:	4618      	mov	r0, r3
 801d422:	f8d7 13b4 	ldr.w	r1, [r7, #948]	; 0x3b4
 801d426:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801d42a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801d42e:	6018      	str	r0, [r3, #0]
 801d430:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801d434:	6019      	str	r1, [r3, #0]
 801d436:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801d43a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d43c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801d440:	681b      	ldr	r3, [r3, #0]
 801d442:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 801d446:	6812      	ldr	r2, [r2, #0]
 801d448:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 801d44c:	6809      	ldr	r1, [r1, #0]
 801d44e:	fb23 1202 	smlad	r2, r3, r2, r1
 801d452:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801d456:	601a      	str	r2, [r3, #0]
  return(result);
 801d458:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801d45c:	681b      	ldr	r3, [r3, #0]
 801d45e:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 801d462:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	4618      	mov	r0, r3
 801d46a:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 801d46e:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801d472:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801d476:	6018      	str	r0, [r3, #0]
 801d478:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801d47c:	6019      	str	r1, [r3, #0]
 801d47e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801d482:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d484:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801d488:	681b      	ldr	r3, [r3, #0]
 801d48a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 801d48e:	6812      	ldr	r2, [r2, #0]
 801d490:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 801d494:	6809      	ldr	r1, [r1, #0]
 801d496:	fb23 1202 	smlad	r2, r3, r2, r1
 801d49a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801d49e:	601a      	str	r2, [r3, #0]
  return(result);
 801d4a0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 801d4aa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801d4ae:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801d4b2:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801d4b4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801d4b8:	681b      	ldr	r3, [r3, #0]
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	681b      	ldr	r3, [r3, #0]
 801d4be:	461a      	mov	r2, r3
 801d4c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d4c4:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d4c6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	681b      	ldr	r3, [r3, #0]
 801d4ce:	1d1a      	adds	r2, r3, #4
 801d4d0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801d4d4:	681b      	ldr	r3, [r3, #0]
 801d4d6:	601a      	str	r2, [r3, #0]
    return (val);
 801d4d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d4dc:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801d4de:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 801d4e2:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801d4e6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801d4ea:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801d4ec:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801d4f0:	681b      	ldr	r3, [r3, #0]
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	681b      	ldr	r3, [r3, #0]
 801d4f6:	461a      	mov	r2, r3
 801d4f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d4fc:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d4fe:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801d502:	681b      	ldr	r3, [r3, #0]
 801d504:	681b      	ldr	r3, [r3, #0]
 801d506:	1d1a      	adds	r2, r3, #4
 801d508:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	601a      	str	r2, [r3, #0]
    return (val);
 801d510:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d514:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801d516:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 801d51a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d51e:	681b      	ldr	r3, [r3, #0]
 801d520:	4618      	mov	r0, r3
 801d522:	f8d7 13b4 	ldr.w	r1, [r7, #948]	; 0x3b4
 801d526:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801d52a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801d52e:	6018      	str	r0, [r3, #0]
 801d530:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801d534:	6019      	str	r1, [r3, #0]
 801d536:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801d53a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d53c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 801d546:	6812      	ldr	r2, [r2, #0]
 801d548:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 801d54c:	6809      	ldr	r1, [r1, #0]
 801d54e:	fb23 1202 	smlad	r2, r3, r2, r1
 801d552:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801d556:	601a      	str	r2, [r3, #0]
  return(result);
 801d558:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801d55c:	681b      	ldr	r3, [r3, #0]
 801d55e:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 801d562:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d566:	681b      	ldr	r3, [r3, #0]
 801d568:	4618      	mov	r0, r3
 801d56a:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 801d56e:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801d572:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801d576:	6018      	str	r0, [r3, #0]
 801d578:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801d57c:	6019      	str	r1, [r3, #0]
 801d57e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801d582:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d584:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801d588:	681b      	ldr	r3, [r3, #0]
 801d58a:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 801d58e:	6812      	ldr	r2, [r2, #0]
 801d590:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 801d594:	6809      	ldr	r1, [r1, #0]
 801d596:	fb23 1202 	smlad	r2, r3, r2, r1
 801d59a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801d59e:	601a      	str	r2, [r3, #0]
  return(result);
 801d5a0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801d5a4:	681b      	ldr	r3, [r3, #0]
 801d5a6:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0

            col_count--;
 801d5aa:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 801d5ae:	3b01      	subs	r3, #1
 801d5b0:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 801d5b4:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	f47f ae3f 	bne.w	801d23c <arm_nn_mat_mult_kernel_s8_s16+0xe8a>
        }
        col_count = num_col_a & 0x3;
 801d5be:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801d5c2:	f003 0303 	and.w	r3, r3, #3
 801d5c6:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 801d5ca:	e036      	b.n	801d63a <arm_nn_mat_mult_kernel_s8_s16+0x1288>
        {
            q7_t a0 = *ip_a0++;
 801d5cc:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 801d5d0:	1c5a      	adds	r2, r3, #1
 801d5d2:	f8c7 23e0 	str.w	r2, [r7, #992]	; 0x3e0
 801d5d6:	781b      	ldrb	r3, [r3, #0]
 801d5d8:	f887 33bd 	strb.w	r3, [r7, #957]	; 0x3bd
            q15_t b0 = *ip_b0++;
 801d5dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	1c99      	adds	r1, r3, #2
 801d5e4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801d5e8:	6011      	str	r1, [r2, #0]
 801d5ea:	881b      	ldrh	r3, [r3, #0]
 801d5ec:	f8a7 33ba 	strh.w	r3, [r7, #954]	; 0x3ba
            q15_t b1 = *ip_b1++;
 801d5f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d5f4:	681b      	ldr	r3, [r3, #0]
 801d5f6:	1c99      	adds	r1, r3, #2
 801d5f8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801d5fc:	6011      	str	r1, [r2, #0]
 801d5fe:	881b      	ldrh	r3, [r3, #0]
 801d600:	f8a7 33b8 	strh.w	r3, [r7, #952]	; 0x3b8

            ch_0_out_0 += a0 * b0;
 801d604:	f997 33bd 	ldrsb.w	r3, [r7, #957]	; 0x3bd
 801d608:	f9b7 23ba 	ldrsh.w	r2, [r7, #954]	; 0x3ba
 801d60c:	fb02 f303 	mul.w	r3, r2, r3
 801d610:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801d614:	4413      	add	r3, r2
 801d616:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
            ch_0_out_1 += a0 * b1;
 801d61a:	f997 33bd 	ldrsb.w	r3, [r7, #957]	; 0x3bd
 801d61e:	f9b7 23b8 	ldrsh.w	r2, [r7, #952]	; 0x3b8
 801d622:	fb02 f303 	mul.w	r3, r2, r3
 801d626:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801d62a:	4413      	add	r3, r2
 801d62c:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
            col_count--;
 801d630:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 801d634:	3b01      	subs	r3, #1
 801d636:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 801d63a:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 801d63e:	2b00      	cmp	r3, #0
 801d640:	d1c4      	bne.n	801d5cc <arm_nn_mat_mult_kernel_s8_s16+0x121a>
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 801d642:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801d646:	6819      	ldr	r1, [r3, #0]
 801d648:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d64c:	681b      	ldr	r3, [r3, #0]
 801d64e:	681a      	ldr	r2, [r3, #0]
 801d650:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801d654:	f8d7 03c4 	ldr.w	r0, [r7, #964]	; 0x3c4
 801d658:	6018      	str	r0, [r3, #0]
 801d65a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d65e:	6019      	str	r1, [r3, #0]
 801d660:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801d664:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d666:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801d66a:	681b      	ldr	r3, [r3, #0]
 801d66c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d670:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 801d674:	6812      	ldr	r2, [r2, #0]
 801d676:	409a      	lsls	r2, r3
 801d678:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801d67c:	601a      	str	r2, [r3, #0]
 801d67e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801d682:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801d686:	6812      	ldr	r2, [r2, #0]
 801d688:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d68a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d68e:	2200      	movs	r2, #0
 801d690:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801d692:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d696:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d69a:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801d69c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d6a0:	2200      	movs	r2, #0
 801d6a2:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d6a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801d6a8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801d6ac:	681b      	ldr	r3, [r3, #0]
 801d6ae:	4618      	mov	r0, r3
 801d6b0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d6b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	461a      	mov	r2, r3
 801d6bc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d6c0:	fb02 fc01 	mul.w	ip, r2, r1
 801d6c4:	fb00 f603 	mul.w	r6, r0, r3
 801d6c8:	4466      	add	r6, ip
 801d6ca:	fba0 2302 	umull	r2, r3, r0, r2
 801d6ce:	18f1      	adds	r1, r6, r3
 801d6d0:	460b      	mov	r3, r1
 801d6d2:	18a1      	adds	r1, r4, r2
 801d6d4:	6039      	str	r1, [r7, #0]
 801d6d6:	eb45 0303 	adc.w	r3, r5, r3
 801d6da:	607b      	str	r3, [r7, #4]
 801d6dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 801d6e0:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 801d6e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801d6e8:	f04f 0200 	mov.w	r2, #0
 801d6ec:	f04f 0300 	mov.w	r3, #0
 801d6f0:	0fc2      	lsrs	r2, r0, #31
 801d6f2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801d6f6:	17cb      	asrs	r3, r1, #31
 801d6f8:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 801d6fc:	4613      	mov	r3, r2
 801d6fe:	600b      	str	r3, [r1, #0]
    return result;
 801d700:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d704:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d706:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801d70a:	681b      	ldr	r3, [r3, #0]
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	dc04      	bgt.n	801d71a <arm_nn_mat_mult_kernel_s8_s16+0x1368>
 801d710:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801d714:	681b      	ldr	r3, [r3, #0]
 801d716:	425b      	negs	r3, r3
 801d718:	e000      	b.n	801d71c <arm_nn_mat_mult_kernel_s8_s16+0x136a>
 801d71a:	2300      	movs	r3, #0
 801d71c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801d720:	6011      	str	r1, [r2, #0]
 801d722:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801d726:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d728:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801d72c:	2200      	movs	r2, #0
 801d72e:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d730:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d734:	2201      	movs	r2, #1
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	409a      	lsls	r2, r3
 801d73a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d73e:	3a01      	subs	r2, #1
 801d740:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801d742:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801d746:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 801d74a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801d74e:	6809      	ldr	r1, [r1, #0]
 801d750:	6812      	ldr	r2, [r2, #0]
 801d752:	400a      	ands	r2, r1
 801d754:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801d756:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801d75a:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 801d75e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801d762:	6809      	ldr	r1, [r1, #0]
 801d764:	6812      	ldr	r2, [r2, #0]
 801d766:	fa41 f202 	asr.w	r2, r1, r2
 801d76a:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801d76c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d770:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801d774:	6812      	ldr	r2, [r2, #0]
 801d776:	1052      	asrs	r2, r2, #1
 801d778:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801d77a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	2b00      	cmp	r3, #0
 801d782:	da06      	bge.n	801d792 <arm_nn_mat_mult_kernel_s8_s16+0x13e0>
        threshold++;
 801d784:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d788:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 801d78c:	6812      	ldr	r2, [r2, #0]
 801d78e:	3201      	adds	r2, #1
 801d790:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801d792:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 801d796:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d79a:	6812      	ldr	r2, [r2, #0]
 801d79c:	681b      	ldr	r3, [r3, #0]
 801d79e:	429a      	cmp	r2, r3
 801d7a0:	dd06      	ble.n	801d7b0 <arm_nn_mat_mult_kernel_s8_s16+0x13fe>
        result++;
 801d7a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801d7a6:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801d7aa:	6812      	ldr	r2, [r2, #0]
 801d7ac:	3201      	adds	r2, #1
 801d7ae:	601a      	str	r2, [r3, #0]
    return result;
 801d7b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801d7b4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d7b6:	bf00      	nop
 801d7b8:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        ch_0_out_0 += out_offset;
 801d7bc:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801d7c0:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801d7c4:	4413      	add	r3, r2
 801d7c6:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 801d7ca:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801d7ce:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801d7d2:	4293      	cmp	r3, r2
 801d7d4:	bfb8      	it	lt
 801d7d6:	4613      	movlt	r3, r2
 801d7d8:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 801d7dc:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801d7e0:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801d7e4:	4293      	cmp	r3, r2
 801d7e6:	bfa8      	it	ge
 801d7e8:	4613      	movge	r3, r2
 801d7ea:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        *out_0++ = (q7_t)ch_0_out_0;
 801d7ee:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 801d7f2:	1c5a      	adds	r2, r3, #1
 801d7f4:	f8c7 2428 	str.w	r2, [r7, #1064]	; 0x428
 801d7f8:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801d7fc:	b252      	sxtb	r2, r2
 801d7fe:	701a      	strb	r2, [r3, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 801d800:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801d804:	6819      	ldr	r1, [r3, #0]
 801d806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d80a:	681b      	ldr	r3, [r3, #0]
 801d80c:	681a      	ldr	r2, [r3, #0]
 801d80e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801d812:	f8d7 03c0 	ldr.w	r0, [r7, #960]	; 0x3c0
 801d816:	6018      	str	r0, [r3, #0]
 801d818:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d81c:	6019      	str	r1, [r3, #0]
 801d81e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801d822:	601a      	str	r2, [r3, #0]
 801d824:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801d828:	681b      	ldr	r3, [r3, #0]
 801d82a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d82e:	f507 7292 	add.w	r2, r7, #292	; 0x124
 801d832:	6812      	ldr	r2, [r2, #0]
 801d834:	409a      	lsls	r2, r3
 801d836:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d83a:	601a      	str	r2, [r3, #0]
 801d83c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801d840:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801d844:	6812      	ldr	r2, [r2, #0]
 801d846:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d848:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801d84c:	2200      	movs	r2, #0
 801d84e:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801d850:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d854:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d858:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801d85a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d85e:	2200      	movs	r2, #0
 801d860:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d862:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801d866:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d86a:	681b      	ldr	r3, [r3, #0]
 801d86c:	4618      	mov	r0, r3
 801d86e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d872:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801d876:	681b      	ldr	r3, [r3, #0]
 801d878:	461a      	mov	r2, r3
 801d87a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d87e:	fb02 fc01 	mul.w	ip, r2, r1
 801d882:	fb00 f603 	mul.w	r6, r0, r3
 801d886:	4466      	add	r6, ip
 801d888:	fba0 2302 	umull	r2, r3, r0, r2
 801d88c:	18f1      	adds	r1, r6, r3
 801d88e:	460b      	mov	r3, r1
 801d890:	eb14 0a02 	adds.w	sl, r4, r2
 801d894:	eb45 0b03 	adc.w	fp, r5, r3
 801d898:	e9c7 ab16 	strd	sl, fp, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 801d89c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801d8a0:	f04f 0200 	mov.w	r2, #0
 801d8a4:	f04f 0300 	mov.w	r3, #0
 801d8a8:	0fc2      	lsrs	r2, r0, #31
 801d8aa:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801d8ae:	17cb      	asrs	r3, r1, #31
 801d8b0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801d8b4:	4613      	mov	r3, r2
 801d8b6:	600b      	str	r3, [r1, #0]
    return result;
 801d8b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801d8bc:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d8be:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801d8c2:	681b      	ldr	r3, [r3, #0]
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	dc04      	bgt.n	801d8d2 <arm_nn_mat_mult_kernel_s8_s16+0x1520>
 801d8c8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	425b      	negs	r3, r3
 801d8d0:	e000      	b.n	801d8d4 <arm_nn_mat_mult_kernel_s8_s16+0x1522>
 801d8d2:	2300      	movs	r3, #0
 801d8d4:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801d8d8:	6011      	str	r1, [r2, #0]
 801d8da:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801d8de:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d8e0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801d8e4:	2200      	movs	r2, #0
 801d8e6:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d8e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d8ec:	2201      	movs	r2, #1
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	409a      	lsls	r2, r3
 801d8f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801d8f6:	3a01      	subs	r2, #1
 801d8f8:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801d8fa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801d8fe:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 801d902:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801d906:	6809      	ldr	r1, [r1, #0]
 801d908:	6812      	ldr	r2, [r2, #0]
 801d90a:	400a      	ands	r2, r1
 801d90c:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801d90e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801d912:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 801d916:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801d91a:	6809      	ldr	r1, [r1, #0]
 801d91c:	6812      	ldr	r2, [r2, #0]
 801d91e:	fa41 f202 	asr.w	r2, r1, r2
 801d922:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801d924:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d928:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801d92c:	6812      	ldr	r2, [r2, #0]
 801d92e:	1052      	asrs	r2, r2, #1
 801d930:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801d932:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801d936:	681b      	ldr	r3, [r3, #0]
 801d938:	2b00      	cmp	r3, #0
 801d93a:	da06      	bge.n	801d94a <arm_nn_mat_mult_kernel_s8_s16+0x1598>
        threshold++;
 801d93c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d940:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801d944:	6812      	ldr	r2, [r2, #0]
 801d946:	3201      	adds	r2, #1
 801d948:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801d94a:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 801d94e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d952:	6812      	ldr	r2, [r2, #0]
 801d954:	681b      	ldr	r3, [r3, #0]
 801d956:	429a      	cmp	r2, r3
 801d958:	dd06      	ble.n	801d968 <arm_nn_mat_mult_kernel_s8_s16+0x15b6>
        result++;
 801d95a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801d95e:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801d962:	6812      	ldr	r2, [r2, #0]
 801d964:	3201      	adds	r2, #1
 801d966:	601a      	str	r2, [r3, #0]
    return result;
 801d968:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801d96c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d96e:	bf00      	nop
 801d970:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        ch_0_out_1 += out_offset;
 801d974:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801d978:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801d97c:	4413      	add	r3, r2
 801d97e:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801d982:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801d986:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801d98a:	4293      	cmp	r3, r2
 801d98c:	bfb8      	it	lt
 801d98e:	4613      	movlt	r3, r2
 801d990:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801d994:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801d998:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801d99c:	4293      	cmp	r3, r2
 801d99e:	bfa8      	it	ge
 801d9a0:	4613      	movge	r3, r2
 801d9a2:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        *out_1++ = (q7_t)ch_0_out_1;
 801d9a6:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 801d9aa:	1c5a      	adds	r2, r3, #1
 801d9ac:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 801d9b0:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801d9b4:	b252      	sxtb	r2, r2
 801d9b6:	701a      	strb	r2, [r3, #0]
        out_mult++;
 801d9b8:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801d9bc:	3304      	adds	r3, #4
 801d9be:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
        out_shift++;
 801d9c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d9c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d9ca:	6812      	ldr	r2, [r2, #0]
 801d9cc:	3204      	adds	r2, #4
 801d9ce:	601a      	str	r2, [r3, #0]
    }

    out_0 += output_ch;
 801d9d0:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801d9d4:	881b      	ldrh	r3, [r3, #0]
 801d9d6:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 801d9da:	4413      	add	r3, r2
 801d9dc:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428

    /* return the new output pointer with offset */
    return out_0;
 801d9e0:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 801d9e4:	4618      	mov	r0, r3
 801d9e6:	f507 777c 	add.w	r7, r7, #1008	; 0x3f0
 801d9ea:	46bd      	mov	sp, r7
 801d9ec:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801d9f0:	4770      	bx	lr

0801d9f2 <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 801d9f2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801d9f6:	f5ad 6d24 	sub.w	sp, sp, #2624	; 0xa40
 801d9fa:	af00      	add	r7, sp, #0
 801d9fc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801da00:	6020      	str	r0, [r4, #0]
 801da02:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801da06:	6001      	str	r1, [r0, #0]
 801da08:	f107 0134 	add.w	r1, r7, #52	; 0x34
 801da0c:	600a      	str	r2, [r1, #0]
 801da0e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801da12:	6013      	str	r3, [r2, #0]
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 801da14:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801da18:	3b04      	subs	r3, #4
 801da1a:	f8c7 39ec 	str.w	r3, [r7, #2540]	; 0x9ec

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801da1e:	2300      	movs	r3, #0
 801da20:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c
 801da24:	f003 b977 	b.w	8020d16 <arm_nn_mat_mult_nt_t_s8+0x3324>
    {
        const q7_t *lhs_ptr = &lhs[0];
 801da28:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801da2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801da30:	681b      	ldr	r3, [r3, #0]
 801da32:	6013      	str	r3, [r2, #0]
        q7_t *dst_ptr = &dst[0];
 801da34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801da38:	681b      	ldr	r3, [r3, #0]
 801da3a:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38

        q31_t lhs_offset_contribution0 = 0;
 801da3e:	2300      	movs	r3, #0
 801da40:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
        q31_t lhs_offset_contribution1 = 0;
 801da44:	2300      	movs	r3, #0
 801da46:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30

        for (int32_t x = 0; x < rhs_cols; ++x)
 801da4a:	2300      	movs	r3, #0
 801da4c:	f8c7 3a2c 	str.w	r3, [r7, #2604]	; 0xa2c
 801da50:	e024      	b.n	801da9c <arm_nn_mat_mult_nt_t_s8+0xaa>
        {
            lhs_offset_contribution0 += rhs[x];
 801da52:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801da56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801da5a:	681b      	ldr	r3, [r3, #0]
 801da5c:	4413      	add	r3, r2
 801da5e:	f993 3000 	ldrsb.w	r3, [r3]
 801da62:	461a      	mov	r2, r3
 801da64:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801da68:	4413      	add	r3, r2
 801da6a:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 801da6e:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801da72:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801da76:	4413      	add	r3, r2
 801da78:	461a      	mov	r2, r3
 801da7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801da7e:	681b      	ldr	r3, [r3, #0]
 801da80:	4413      	add	r3, r2
 801da82:	f993 3000 	ldrsb.w	r3, [r3]
 801da86:	461a      	mov	r2, r3
 801da88:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801da8c:	4413      	add	r3, r2
 801da8e:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        for (int32_t x = 0; x < rhs_cols; ++x)
 801da92:	f8d7 3a2c 	ldr.w	r3, [r7, #2604]	; 0xa2c
 801da96:	3301      	adds	r3, #1
 801da98:	f8c7 3a2c 	str.w	r3, [r7, #2604]	; 0xa2c
 801da9c:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801daa0:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801daa4:	429a      	cmp	r2, r3
 801daa6:	dbd4      	blt.n	801da52 <arm_nn_mat_mult_nt_t_s8+0x60>
        }

        lhs_offset_contribution0 *= lhs_offset;
 801daa8:	f8d7 2a34 	ldr.w	r2, [r7, #2612]	; 0xa34
 801daac:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 801dab0:	fb03 f302 	mul.w	r3, r3, r2
 801dab4:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
        lhs_offset_contribution1 *= lhs_offset;
 801dab8:	f8d7 2a30 	ldr.w	r2, [r7, #2608]	; 0xa30
 801dabc:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 801dac0:	fb03 f302 	mul.w	r3, r3, r2
 801dac4:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        if (bias)
 801dac8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801dacc:	681b      	ldr	r3, [r3, #0]
 801dace:	2b00      	cmp	r3, #0
 801dad0:	d01a      	beq.n	801db08 <arm_nn_mat_mult_nt_t_s8+0x116>
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 801dad2:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801dad6:	009a      	lsls	r2, r3, #2
 801dad8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801dadc:	681b      	ldr	r3, [r3, #0]
 801dade:	4413      	add	r3, r2
 801dae0:	681a      	ldr	r2, [r3, #0]
 801dae2:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801dae6:	4413      	add	r3, r2
 801dae8:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 801daec:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801daf0:	3301      	adds	r3, #1
 801daf2:	009a      	lsls	r2, r3, #2
 801daf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801daf8:	681b      	ldr	r3, [r3, #0]
 801dafa:	4413      	add	r3, r2
 801dafc:	681a      	ldr	r2, [r3, #0]
 801dafe:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801db02:	4413      	add	r3, r2
 801db04:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 801db08:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 801db0c:	105b      	asrs	r3, r3, #1
 801db0e:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28

        while (lhs_rows_idx)
 801db12:	f001 bf48 	b.w	801f9a6 <arm_nn_mat_mult_nt_t_s8+0x1fb4>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801db16:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 801db1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801db1e:	681b      	ldr	r3, [r3, #0]
 801db20:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 801db22:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801db26:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            q31_t res01 = lhs_offset_contribution1;
 801db2a:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801db2e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            q31_t res10 = lhs_offset_contribution0;
 801db32:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801db36:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            q31_t res11 = lhs_offset_contribution1;
 801db3a:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801db3e:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            int32_t rhs_cols_idx = 0;
 801db42:	2300      	movs	r3, #0
 801db44:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14

            q31_t val0, val1, val2, val3, val4, val5;

            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801db48:	f001 baee 	b.w	801f128 <arm_nn_mat_mult_nt_t_s8+0x1736>
 801db4c:	f207 522c 	addw	r2, r7, #1324	; 0x52c
 801db50:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801db54:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801db56:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801db5a:	681b      	ldr	r3, [r3, #0]
 801db5c:	681b      	ldr	r3, [r3, #0]
 801db5e:	681b      	ldr	r3, [r3, #0]
 801db60:	461a      	mov	r2, r3
 801db62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801db66:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801db68:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801db6c:	681b      	ldr	r3, [r3, #0]
 801db6e:	681b      	ldr	r3, [r3, #0]
 801db70:	1d1a      	adds	r2, r3, #4
 801db72:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801db76:	681b      	ldr	r3, [r3, #0]
 801db78:	601a      	str	r2, [r3, #0]
    return (val);
 801db7a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801db7e:	681b      	ldr	r3, [r3, #0]
            {
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801db80:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val2 = __SXTB16(val1);
 801db84:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801db88:	f207 5334 	addw	r3, r7, #1332	; 0x534
 801db8c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801db8e:	f207 5334 	addw	r3, r7, #1332	; 0x534
 801db92:	681b      	ldr	r3, [r3, #0]
 801db94:	fa2f f283 	sxtb16	r2, r3
 801db98:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 801db9c:	601a      	str	r2, [r3, #0]
  return(result);
 801db9e:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 801dba2:	681b      	ldr	r3, [r3, #0]
 801dba4:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801dba8:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 801dbac:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801dbb0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801dbb2:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801dbb6:	681b      	ldr	r3, [r3, #0]
 801dbb8:	681b      	ldr	r3, [r3, #0]
 801dbba:	681b      	ldr	r3, [r3, #0]
 801dbbc:	461a      	mov	r2, r3
 801dbbe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801dbc2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801dbc4:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801dbc8:	681b      	ldr	r3, [r3, #0]
 801dbca:	681b      	ldr	r3, [r3, #0]
 801dbcc:	1d1a      	adds	r2, r3, #4
 801dbce:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801dbd2:	681b      	ldr	r3, [r3, #0]
 801dbd4:	601a      	str	r2, [r3, #0]
    return (val);
 801dbd6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801dbda:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801dbdc:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801dbe0:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801dbe4:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 801dbe8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801dbea:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 801dbee:	681b      	ldr	r3, [r3, #0]
 801dbf0:	fa2f f283 	sxtb16	r2, r3
 801dbf4:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 801dbf8:	601a      	str	r2, [r3, #0]
  return(result);
 801dbfa:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 801dbfe:	681b      	ldr	r3, [r3, #0]
 801dc00:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801dc04:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801dc08:	681a      	ldr	r2, [r3, #0]
 801dc0a:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801dc0e:	441a      	add	r2, r3
 801dc10:	f207 5344 	addw	r3, r7, #1348	; 0x544
 801dc14:	601a      	str	r2, [r3, #0]
 801dc16:	f207 5344 	addw	r3, r7, #1348	; 0x544
 801dc1a:	681b      	ldr	r3, [r3, #0]
 801dc1c:	681b      	ldr	r3, [r3, #0]
 801dc1e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801dc20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801dc24:	601a      	str	r2, [r3, #0]
    return (val);
 801dc26:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val1 = __SXTB16_RORn(val1, 8);
 801dc30:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801dc34:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 801dc38:	601a      	str	r2, [r3, #0]
 801dc3a:	f207 525c 	addw	r2, r7, #1372	; 0x55c
 801dc3e:	2308      	movs	r3, #8
 801dc40:	6013      	str	r3, [r2, #0]
 801dc42:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 801dc46:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 801dc4a:	681b      	ldr	r3, [r3, #0]
 801dc4c:	6013      	str	r3, [r2, #0]
 801dc4e:	f207 5254 	addw	r2, r7, #1364	; 0x554
 801dc52:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 801dc56:	681b      	ldr	r3, [r3, #0]
 801dc58:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801dc5a:	f207 5254 	addw	r2, r7, #1364	; 0x554
 801dc5e:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801dc62:	681b      	ldr	r3, [r3, #0]
 801dc64:	f003 031f 	and.w	r3, r3, #31
 801dc68:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801dc6a:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801dc6e:	681b      	ldr	r3, [r3, #0]
 801dc70:	2b00      	cmp	r3, #0
 801dc72:	d103      	bne.n	801dc7c <arm_nn_mat_mult_nt_t_s8+0x28a>
    return op1;
 801dc74:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 801dc78:	681a      	ldr	r2, [r3, #0]
 801dc7a:	e006      	b.n	801dc8a <arm_nn_mat_mult_nt_t_s8+0x298>
  return (op1 >> op2) | (op1 << (32U - op2));
 801dc7c:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 801dc80:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801dc84:	6812      	ldr	r2, [r2, #0]
 801dc86:	681b      	ldr	r3, [r3, #0]
 801dc88:	41da      	rors	r2, r3
 801dc8a:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 801dc8e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801dc90:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 801dc94:	681b      	ldr	r3, [r3, #0]
 801dc96:	fa2f f283 	sxtb16	r2, r3
 801dc9a:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 801dc9e:	601a      	str	r2, [r3, #0]
  return(result);
 801dca0:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 801dca4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801dca6:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 801dcaa:	601a      	str	r2, [r3, #0]
  return result;
 801dcac:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 801dcb0:	681b      	ldr	r3, [r3, #0]
 801dcb2:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801dcb6:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801dcba:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 801dcbe:	601a      	str	r2, [r3, #0]
 801dcc0:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 801dcc4:	2308      	movs	r3, #8
 801dcc6:	6013      	str	r3, [r2, #0]
 801dcc8:	f207 5274 	addw	r2, r7, #1396	; 0x574
 801dccc:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 801dcd0:	681b      	ldr	r3, [r3, #0]
 801dcd2:	6013      	str	r3, [r2, #0]
 801dcd4:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 801dcd8:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 801dcdc:	681b      	ldr	r3, [r3, #0]
 801dcde:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801dce0:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 801dce4:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801dce8:	681b      	ldr	r3, [r3, #0]
 801dcea:	f003 031f 	and.w	r3, r3, #31
 801dcee:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801dcf0:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801dcf4:	681b      	ldr	r3, [r3, #0]
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d103      	bne.n	801dd02 <arm_nn_mat_mult_nt_t_s8+0x310>
    return op1;
 801dcfa:	f207 5374 	addw	r3, r7, #1396	; 0x574
 801dcfe:	681a      	ldr	r2, [r3, #0]
 801dd00:	e006      	b.n	801dd10 <arm_nn_mat_mult_nt_t_s8+0x31e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801dd02:	f207 5274 	addw	r2, r7, #1396	; 0x574
 801dd06:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801dd0a:	6812      	ldr	r2, [r2, #0]
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	41da      	rors	r2, r3
 801dd10:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 801dd14:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801dd16:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 801dd1a:	681b      	ldr	r3, [r3, #0]
 801dd1c:	fa2f f283 	sxtb16	r2, r3
 801dd20:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 801dd24:	601a      	str	r2, [r3, #0]
  return(result);
 801dd26:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 801dd2a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801dd2c:	f207 5364 	addw	r3, r7, #1380	; 0x564
 801dd30:	601a      	str	r2, [r3, #0]
  return result;
 801dd32:	f207 5364 	addw	r3, r7, #1380	; 0x564
 801dd36:	681b      	ldr	r3, [r3, #0]
 801dd38:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801dd3c:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801dd40:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801dd44:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801dd48:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 801dd4c:	601a      	str	r2, [r3, #0]
 801dd4e:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 801dd52:	6019      	str	r1, [r3, #0]
 801dd54:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801dd58:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801dd5a:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 801dd5e:	6819      	ldr	r1, [r3, #0]
 801dd60:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 801dd64:	681a      	ldr	r2, [r3, #0]
 801dd66:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801dd6a:	681b      	ldr	r3, [r3, #0]
 801dd6c:	fb21 3202 	smlad	r2, r1, r2, r3
 801dd70:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801dd74:	601a      	str	r2, [r3, #0]
  return(result);
 801dd76:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801dd7a:	681b      	ldr	r3, [r3, #0]
 801dd7c:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801dd80:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801dd84:	f207 5394 	addw	r3, r7, #1428	; 0x594
 801dd88:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801dd8a:	f207 5394 	addw	r3, r7, #1428	; 0x594
 801dd8e:	681b      	ldr	r3, [r3, #0]
 801dd90:	fa2f f283 	sxtb16	r2, r3
 801dd94:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 801dd98:	601a      	str	r2, [r3, #0]
  return(result);
 801dd9a:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 801dd9e:	681b      	ldr	r3, [r3, #0]
 801dda0:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801dda4:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801dda8:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801ddac:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801ddb0:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 801ddb4:	601a      	str	r2, [r3, #0]
 801ddb6:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 801ddba:	6019      	str	r1, [r3, #0]
 801ddbc:	f207 539c 	addw	r3, r7, #1436	; 0x59c
 801ddc0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ddc2:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 801ddc6:	6819      	ldr	r1, [r3, #0]
 801ddc8:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 801ddcc:	681a      	ldr	r2, [r3, #0]
 801ddce:	f207 539c 	addw	r3, r7, #1436	; 0x59c
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	fb21 3202 	smlad	r2, r1, r2, r3
 801ddd8:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 801dddc:	601a      	str	r2, [r3, #0]
  return(result);
 801ddde:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 801dde2:	681b      	ldr	r3, [r3, #0]
 801dde4:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801dde8:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801ddec:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 801ddf0:	601a      	str	r2, [r3, #0]
 801ddf2:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 801ddf6:	2308      	movs	r3, #8
 801ddf8:	6013      	str	r3, [r2, #0]
 801ddfa:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 801ddfe:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 801de02:	681b      	ldr	r3, [r3, #0]
 801de04:	6013      	str	r3, [r2, #0]
 801de06:	f207 52b4 	addw	r2, r7, #1460	; 0x5b4
 801de0a:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801de12:	f207 52b4 	addw	r2, r7, #1460	; 0x5b4
 801de16:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801de1a:	681b      	ldr	r3, [r3, #0]
 801de1c:	f003 031f 	and.w	r3, r3, #31
 801de20:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801de22:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801de26:	681b      	ldr	r3, [r3, #0]
 801de28:	2b00      	cmp	r3, #0
 801de2a:	d103      	bne.n	801de34 <arm_nn_mat_mult_nt_t_s8+0x442>
    return op1;
 801de2c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801de30:	681a      	ldr	r2, [r3, #0]
 801de32:	e006      	b.n	801de42 <arm_nn_mat_mult_nt_t_s8+0x450>
  return (op1 >> op2) | (op1 << (32U - op2));
 801de34:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 801de38:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801de3c:	6812      	ldr	r2, [r2, #0]
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	41da      	rors	r2, r3
 801de42:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 801de46:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801de48:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 801de4c:	681b      	ldr	r3, [r3, #0]
 801de4e:	fa2f f283 	sxtb16	r2, r3
 801de52:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 801de56:	601a      	str	r2, [r3, #0]
  return(result);
 801de58:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 801de5c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801de5e:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 801de62:	601a      	str	r2, [r3, #0]
  return result;
 801de64:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 801de68:	681b      	ldr	r3, [r3, #0]
 801de6a:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801de6e:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801de72:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801de76:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801de7a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 801de7e:	601a      	str	r2, [r3, #0]
 801de80:	f207 53cc 	addw	r3, r7, #1484	; 0x5cc
 801de84:	6019      	str	r1, [r3, #0]
 801de86:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 801de8a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801de8c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 801de90:	6819      	ldr	r1, [r3, #0]
 801de92:	f207 53cc 	addw	r3, r7, #1484	; 0x5cc
 801de96:	681a      	ldr	r2, [r3, #0]
 801de98:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 801de9c:	681b      	ldr	r3, [r3, #0]
 801de9e:	fb21 3202 	smlad	r2, r1, r2, r3
 801dea2:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 801dea6:	601a      	str	r2, [r3, #0]
  return(result);
 801dea8:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 801deac:	681b      	ldr	r3, [r3, #0]
 801deae:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801deb2:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801deb6:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801deba:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801debe:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 801dec2:	601a      	str	r2, [r3, #0]
 801dec4:	f207 53dc 	addw	r3, r7, #1500	; 0x5dc
 801dec8:	6019      	str	r1, [r3, #0]
 801deca:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 801dece:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ded0:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 801ded4:	6819      	ldr	r1, [r3, #0]
 801ded6:	f207 53dc 	addw	r3, r7, #1500	; 0x5dc
 801deda:	681a      	ldr	r2, [r3, #0]
 801dedc:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 801dee0:	681b      	ldr	r3, [r3, #0]
 801dee2:	fb21 3202 	smlad	r2, r1, r2, r3
 801dee6:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 801deea:	601a      	str	r2, [r3, #0]
  return(result);
 801deec:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 801def0:	681b      	ldr	r3, [r3, #0]
 801def2:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801def6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801defa:	681a      	ldr	r2, [r3, #0]
 801defc:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801df00:	441a      	add	r2, r3
 801df02:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 801df06:	601a      	str	r2, [r3, #0]
 801df08:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 801df0c:	681b      	ldr	r3, [r3, #0]
 801df0e:	681b      	ldr	r3, [r3, #0]
 801df10:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801df12:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801df16:	601a      	str	r2, [r3, #0]
    return (val);
 801df18:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801df1c:	681b      	ldr	r3, [r3, #0]
 801df1e:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801df22:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801df26:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 801df2a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801df2c:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 801df30:	681b      	ldr	r3, [r3, #0]
 801df32:	fa2f f283 	sxtb16	r2, r3
 801df36:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801df3a:	601a      	str	r2, [r3, #0]
  return(result);
 801df3c:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801df40:	681b      	ldr	r3, [r3, #0]
 801df42:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801df46:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801df4a:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 801df4e:	601a      	str	r2, [r3, #0]
 801df50:	f207 6204 	addw	r2, r7, #1540	; 0x604
 801df54:	2308      	movs	r3, #8
 801df56:	6013      	str	r3, [r2, #0]
 801df58:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801df5c:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 801df60:	681b      	ldr	r3, [r3, #0]
 801df62:	6013      	str	r3, [r2, #0]
 801df64:	f207 52fc 	addw	r2, r7, #1532	; 0x5fc
 801df68:	f207 6304 	addw	r3, r7, #1540	; 0x604
 801df6c:	681b      	ldr	r3, [r3, #0]
 801df6e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801df70:	f207 52fc 	addw	r2, r7, #1532	; 0x5fc
 801df74:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	f003 031f 	and.w	r3, r3, #31
 801df7e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801df80:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801df84:	681b      	ldr	r3, [r3, #0]
 801df86:	2b00      	cmp	r3, #0
 801df88:	d103      	bne.n	801df92 <arm_nn_mat_mult_nt_t_s8+0x5a0>
    return op1;
 801df8a:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 801df8e:	681a      	ldr	r2, [r3, #0]
 801df90:	e006      	b.n	801dfa0 <arm_nn_mat_mult_nt_t_s8+0x5ae>
  return (op1 >> op2) | (op1 << (32U - op2));
 801df92:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801df96:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801df9a:	6812      	ldr	r2, [r2, #0]
 801df9c:	681b      	ldr	r3, [r3, #0]
 801df9e:	41da      	rors	r2, r3
 801dfa0:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 801dfa4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801dfa6:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	fa2f f283 	sxtb16	r2, r3
 801dfb0:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 801dfb4:	601a      	str	r2, [r3, #0]
  return(result);
 801dfb6:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 801dfba:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801dfbc:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 801dfc0:	601a      	str	r2, [r3, #0]
  return result;
 801dfc2:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 801dfc6:	681b      	ldr	r3, [r3, #0]
 801dfc8:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801dfcc:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801dfd0:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801dfd4:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801dfd8:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 801dfdc:	601a      	str	r2, [r3, #0]
 801dfde:	f207 6314 	addw	r3, r7, #1556	; 0x614
 801dfe2:	6019      	str	r1, [r3, #0]
 801dfe4:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801dfe8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801dfea:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 801dfee:	6819      	ldr	r1, [r3, #0]
 801dff0:	f207 6314 	addw	r3, r7, #1556	; 0x614
 801dff4:	681a      	ldr	r2, [r3, #0]
 801dff6:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801dffa:	681b      	ldr	r3, [r3, #0]
 801dffc:	fb21 3202 	smlad	r2, r1, r2, r3
 801e000:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 801e004:	601a      	str	r2, [r3, #0]
  return(result);
 801e006:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 801e00a:	681b      	ldr	r3, [r3, #0]
 801e00c:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801e010:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e014:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801e018:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801e01c:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 801e020:	601a      	str	r2, [r3, #0]
 801e022:	f207 6324 	addw	r3, r7, #1572	; 0x624
 801e026:	6019      	str	r1, [r3, #0]
 801e028:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801e02c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e02e:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 801e032:	6819      	ldr	r1, [r3, #0]
 801e034:	f207 6324 	addw	r3, r7, #1572	; 0x624
 801e038:	681a      	ldr	r2, [r3, #0]
 801e03a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801e03e:	681b      	ldr	r3, [r3, #0]
 801e040:	fb21 3202 	smlad	r2, r1, r2, r3
 801e044:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 801e048:	601a      	str	r2, [r3, #0]
  return(result);
 801e04a:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 801e04e:	681b      	ldr	r3, [r3, #0]
 801e050:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801e054:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e058:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801e05c:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801e060:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 801e064:	601a      	str	r2, [r3, #0]
 801e066:	f207 6334 	addw	r3, r7, #1588	; 0x634
 801e06a:	6019      	str	r1, [r3, #0]
 801e06c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e070:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e072:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 801e076:	6819      	ldr	r1, [r3, #0]
 801e078:	f207 6334 	addw	r3, r7, #1588	; 0x634
 801e07c:	681a      	ldr	r2, [r3, #0]
 801e07e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e082:	681b      	ldr	r3, [r3, #0]
 801e084:	fb21 3202 	smlad	r2, r1, r2, r3
 801e088:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 801e08c:	601a      	str	r2, [r3, #0]
  return(result);
 801e08e:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 801e092:	681b      	ldr	r3, [r3, #0]
 801e094:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801e098:	f207 623c 	addw	r2, r7, #1596	; 0x63c
 801e09c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801e0a0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e0a2:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801e0a6:	681b      	ldr	r3, [r3, #0]
 801e0a8:	681b      	ldr	r3, [r3, #0]
 801e0aa:	681b      	ldr	r3, [r3, #0]
 801e0ac:	461a      	mov	r2, r3
 801e0ae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801e0b2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e0b4:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	681b      	ldr	r3, [r3, #0]
 801e0bc:	1d1a      	adds	r2, r3, #4
 801e0be:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801e0c2:	681b      	ldr	r3, [r3, #0]
 801e0c4:	601a      	str	r2, [r3, #0]
    return (val);
 801e0c6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801e0ca:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801e0cc:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801e0d0:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e0d4:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801e0d8:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801e0dc:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 801e0e0:	601a      	str	r2, [r3, #0]
 801e0e2:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 801e0e6:	6019      	str	r1, [r3, #0]
 801e0e8:	f207 6344 	addw	r3, r7, #1604	; 0x644
 801e0ec:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e0ee:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 801e0f2:	6819      	ldr	r1, [r3, #0]
 801e0f4:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 801e0f8:	681a      	ldr	r2, [r3, #0]
 801e0fa:	f207 6344 	addw	r3, r7, #1604	; 0x644
 801e0fe:	681b      	ldr	r3, [r3, #0]
 801e100:	fb21 3202 	smlad	r2, r1, r2, r3
 801e104:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801e108:	601a      	str	r2, [r3, #0]
  return(result);
 801e10a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801e10e:	681b      	ldr	r3, [r3, #0]
 801e110:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801e114:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801e118:	681a      	ldr	r2, [r3, #0]
 801e11a:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801e11e:	441a      	add	r2, r3
 801e120:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801e124:	601a      	str	r2, [r3, #0]
 801e126:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801e12a:	681b      	ldr	r3, [r3, #0]
 801e12c:	681b      	ldr	r3, [r3, #0]
 801e12e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801e130:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e134:	601a      	str	r2, [r3, #0]
    return (val);
 801e136:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801e140:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801e144:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 801e148:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e14a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 801e14e:	681b      	ldr	r3, [r3, #0]
 801e150:	fa2f f283 	sxtb16	r2, r3
 801e154:	f207 6354 	addw	r3, r7, #1620	; 0x654
 801e158:	601a      	str	r2, [r3, #0]
  return(result);
 801e15a:	f207 6354 	addw	r3, r7, #1620	; 0x654
 801e15e:	681b      	ldr	r3, [r3, #0]
 801e160:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801e164:	f207 625c 	addw	r2, r7, #1628	; 0x65c
 801e168:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e16c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e16e:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	681b      	ldr	r3, [r3, #0]
 801e176:	681b      	ldr	r3, [r3, #0]
 801e178:	461a      	mov	r2, r3
 801e17a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801e17e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e180:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801e184:	681b      	ldr	r3, [r3, #0]
 801e186:	681b      	ldr	r3, [r3, #0]
 801e188:	1d1a      	adds	r2, r3, #4
 801e18a:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	601a      	str	r2, [r3, #0]
    return (val);
 801e192:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801e196:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801e198:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801e19c:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e1a0:	f207 6364 	addw	r3, r7, #1636	; 0x664
 801e1a4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e1a6:	f207 6364 	addw	r3, r7, #1636	; 0x664
 801e1aa:	681b      	ldr	r3, [r3, #0]
 801e1ac:	fa2f f283 	sxtb16	r2, r3
 801e1b0:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801e1b4:	601a      	str	r2, [r3, #0]
  return(result);
 801e1b6:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 801e1c0:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801e1c4:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 801e1c8:	601a      	str	r2, [r3, #0]
 801e1ca:	f207 627c 	addw	r2, r7, #1660	; 0x67c
 801e1ce:	2308      	movs	r3, #8
 801e1d0:	6013      	str	r3, [r2, #0]
 801e1d2:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 801e1d6:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 801e1da:	681b      	ldr	r3, [r3, #0]
 801e1dc:	6013      	str	r3, [r2, #0]
 801e1de:	f207 6274 	addw	r2, r7, #1652	; 0x674
 801e1e2:	f207 637c 	addw	r3, r7, #1660	; 0x67c
 801e1e6:	681b      	ldr	r3, [r3, #0]
 801e1e8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e1ea:	f207 6274 	addw	r2, r7, #1652	; 0x674
 801e1ee:	f207 6374 	addw	r3, r7, #1652	; 0x674
 801e1f2:	681b      	ldr	r3, [r3, #0]
 801e1f4:	f003 031f 	and.w	r3, r3, #31
 801e1f8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e1fa:	f207 6374 	addw	r3, r7, #1652	; 0x674
 801e1fe:	681b      	ldr	r3, [r3, #0]
 801e200:	2b00      	cmp	r3, #0
 801e202:	d103      	bne.n	801e20c <arm_nn_mat_mult_nt_t_s8+0x81a>
    return op1;
 801e204:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801e208:	681a      	ldr	r2, [r3, #0]
 801e20a:	e006      	b.n	801e21a <arm_nn_mat_mult_nt_t_s8+0x828>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e20c:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 801e210:	f207 6374 	addw	r3, r7, #1652	; 0x674
 801e214:	6812      	ldr	r2, [r2, #0]
 801e216:	681b      	ldr	r3, [r3, #0]
 801e218:	41da      	rors	r2, r3
 801e21a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 801e21e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e220:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 801e224:	681b      	ldr	r3, [r3, #0]
 801e226:	fa2f f283 	sxtb16	r2, r3
 801e22a:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 801e22e:	601a      	str	r2, [r3, #0]
  return(result);
 801e230:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 801e234:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e236:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 801e23a:	601a      	str	r2, [r3, #0]
  return result;
 801e23c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 801e240:	681b      	ldr	r3, [r3, #0]
 801e242:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801e246:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e24a:	f207 639c 	addw	r3, r7, #1692	; 0x69c
 801e24e:	601a      	str	r2, [r3, #0]
 801e250:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 801e254:	2308      	movs	r3, #8
 801e256:	6013      	str	r3, [r2, #0]
 801e258:	f207 6294 	addw	r2, r7, #1684	; 0x694
 801e25c:	f207 639c 	addw	r3, r7, #1692	; 0x69c
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	6013      	str	r3, [r2, #0]
 801e264:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 801e268:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 801e26c:	681b      	ldr	r3, [r3, #0]
 801e26e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e270:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 801e274:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	f003 031f 	and.w	r3, r3, #31
 801e27e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e280:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	2b00      	cmp	r3, #0
 801e288:	d103      	bne.n	801e292 <arm_nn_mat_mult_nt_t_s8+0x8a0>
    return op1;
 801e28a:	f207 6394 	addw	r3, r7, #1684	; 0x694
 801e28e:	681a      	ldr	r2, [r3, #0]
 801e290:	e006      	b.n	801e2a0 <arm_nn_mat_mult_nt_t_s8+0x8ae>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e292:	f207 6294 	addw	r2, r7, #1684	; 0x694
 801e296:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801e29a:	6812      	ldr	r2, [r2, #0]
 801e29c:	681b      	ldr	r3, [r3, #0]
 801e29e:	41da      	rors	r2, r3
 801e2a0:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 801e2a4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e2a6:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 801e2aa:	681b      	ldr	r3, [r3, #0]
 801e2ac:	fa2f f283 	sxtb16	r2, r3
 801e2b0:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 801e2b4:	601a      	str	r2, [r3, #0]
  return(result);
 801e2b6:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 801e2ba:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e2bc:	f207 6384 	addw	r3, r7, #1668	; 0x684
 801e2c0:	601a      	str	r2, [r3, #0]
  return result;
 801e2c2:	f207 6384 	addw	r3, r7, #1668	; 0x684
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801e2cc:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e2d0:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801e2d4:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801e2d8:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 801e2dc:	601a      	str	r2, [r3, #0]
 801e2de:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 801e2e2:	6019      	str	r1, [r3, #0]
 801e2e4:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 801e2e8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e2ea:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 801e2ee:	6819      	ldr	r1, [r3, #0]
 801e2f0:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 801e2f4:	681a      	ldr	r2, [r3, #0]
 801e2f6:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 801e2fa:	681b      	ldr	r3, [r3, #0]
 801e2fc:	fb21 3202 	smlad	r2, r1, r2, r3
 801e300:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801e304:	601a      	str	r2, [r3, #0]
  return(result);
 801e306:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801e30a:	681b      	ldr	r3, [r3, #0]
 801e30c:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801e310:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801e314:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 801e318:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e31a:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 801e31e:	681b      	ldr	r3, [r3, #0]
 801e320:	fa2f f283 	sxtb16	r2, r3
 801e324:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801e328:	601a      	str	r2, [r3, #0]
  return(result);
 801e32a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801e334:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e338:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801e33c:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801e340:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 801e344:	601a      	str	r2, [r3, #0]
 801e346:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 801e34a:	6019      	str	r1, [r3, #0]
 801e34c:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 801e350:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e352:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 801e356:	6819      	ldr	r1, [r3, #0]
 801e358:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 801e35c:	681a      	ldr	r2, [r3, #0]
 801e35e:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	fb21 3202 	smlad	r2, r1, r2, r3
 801e368:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 801e36c:	601a      	str	r2, [r3, #0]
  return(result);
 801e36e:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801e378:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801e37c:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 801e380:	601a      	str	r2, [r3, #0]
 801e382:	f207 62dc 	addw	r2, r7, #1756	; 0x6dc
 801e386:	2308      	movs	r3, #8
 801e388:	6013      	str	r3, [r2, #0]
 801e38a:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 801e38e:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 801e392:	681b      	ldr	r3, [r3, #0]
 801e394:	6013      	str	r3, [r2, #0]
 801e396:	f207 62d4 	addw	r2, r7, #1748	; 0x6d4
 801e39a:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 801e39e:	681b      	ldr	r3, [r3, #0]
 801e3a0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e3a2:	f207 62d4 	addw	r2, r7, #1748	; 0x6d4
 801e3a6:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 801e3aa:	681b      	ldr	r3, [r3, #0]
 801e3ac:	f003 031f 	and.w	r3, r3, #31
 801e3b0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e3b2:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 801e3b6:	681b      	ldr	r3, [r3, #0]
 801e3b8:	2b00      	cmp	r3, #0
 801e3ba:	d103      	bne.n	801e3c4 <arm_nn_mat_mult_nt_t_s8+0x9d2>
    return op1;
 801e3bc:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 801e3c0:	681a      	ldr	r2, [r3, #0]
 801e3c2:	e006      	b.n	801e3d2 <arm_nn_mat_mult_nt_t_s8+0x9e0>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e3c4:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 801e3c8:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 801e3cc:	6812      	ldr	r2, [r2, #0]
 801e3ce:	681b      	ldr	r3, [r3, #0]
 801e3d0:	41da      	rors	r2, r3
 801e3d2:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 801e3d6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e3d8:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 801e3dc:	681b      	ldr	r3, [r3, #0]
 801e3de:	fa2f f283 	sxtb16	r2, r3
 801e3e2:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 801e3e6:	601a      	str	r2, [r3, #0]
  return(result);
 801e3e8:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 801e3ec:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e3ee:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 801e3f2:	601a      	str	r2, [r3, #0]
  return result;
 801e3f4:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 801e3f8:	681b      	ldr	r3, [r3, #0]
 801e3fa:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801e3fe:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e402:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801e406:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801e40a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801e40e:	601a      	str	r2, [r3, #0]
 801e410:	f207 63ec 	addw	r3, r7, #1772	; 0x6ec
 801e414:	6019      	str	r1, [r3, #0]
 801e416:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 801e41a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e41c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801e420:	6819      	ldr	r1, [r3, #0]
 801e422:	f207 63ec 	addw	r3, r7, #1772	; 0x6ec
 801e426:	681a      	ldr	r2, [r3, #0]
 801e428:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 801e42c:	681b      	ldr	r3, [r3, #0]
 801e42e:	fb21 3202 	smlad	r2, r1, r2, r3
 801e432:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 801e436:	601a      	str	r2, [r3, #0]
  return(result);
 801e438:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 801e43c:	681b      	ldr	r3, [r3, #0]
 801e43e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801e442:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e446:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801e44a:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801e44e:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 801e452:	601a      	str	r2, [r3, #0]
 801e454:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 801e458:	6019      	str	r1, [r3, #0]
 801e45a:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 801e45e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e460:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 801e464:	6819      	ldr	r1, [r3, #0]
 801e466:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 801e46a:	681a      	ldr	r2, [r3, #0]
 801e46c:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 801e470:	681b      	ldr	r3, [r3, #0]
 801e472:	fb21 3202 	smlad	r2, r1, r2, r3
 801e476:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 801e47a:	601a      	str	r2, [r3, #0]
  return(result);
 801e47c:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 801e480:	681b      	ldr	r3, [r3, #0]
 801e482:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801e486:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e48a:	681a      	ldr	r2, [r3, #0]
 801e48c:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801e490:	441a      	add	r2, r3
 801e492:	f207 7304 	addw	r3, r7, #1796	; 0x704
 801e496:	601a      	str	r2, [r3, #0]
 801e498:	f207 7304 	addw	r3, r7, #1796	; 0x704
 801e49c:	681b      	ldr	r3, [r3, #0]
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801e4a2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e4a6:	601a      	str	r2, [r3, #0]
    return (val);
 801e4a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e4ac:	681b      	ldr	r3, [r3, #0]
 801e4ae:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801e4b2:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e4b6:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 801e4ba:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e4bc:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 801e4c0:	681b      	ldr	r3, [r3, #0]
 801e4c2:	fa2f f283 	sxtb16	r2, r3
 801e4c6:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 801e4ca:	601a      	str	r2, [r3, #0]
  return(result);
 801e4cc:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 801e4d0:	681b      	ldr	r3, [r3, #0]
 801e4d2:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801e4d6:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e4da:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 801e4de:	601a      	str	r2, [r3, #0]
 801e4e0:	f207 7224 	addw	r2, r7, #1828	; 0x724
 801e4e4:	2308      	movs	r3, #8
 801e4e6:	6013      	str	r3, [r2, #0]
 801e4e8:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 801e4ec:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 801e4f0:	681b      	ldr	r3, [r3, #0]
 801e4f2:	6013      	str	r3, [r2, #0]
 801e4f4:	f207 721c 	addw	r2, r7, #1820	; 0x71c
 801e4f8:	f207 7324 	addw	r3, r7, #1828	; 0x724
 801e4fc:	681b      	ldr	r3, [r3, #0]
 801e4fe:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e500:	f207 721c 	addw	r2, r7, #1820	; 0x71c
 801e504:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 801e508:	681b      	ldr	r3, [r3, #0]
 801e50a:	f003 031f 	and.w	r3, r3, #31
 801e50e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e510:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 801e514:	681b      	ldr	r3, [r3, #0]
 801e516:	2b00      	cmp	r3, #0
 801e518:	d103      	bne.n	801e522 <arm_nn_mat_mult_nt_t_s8+0xb30>
    return op1;
 801e51a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801e51e:	681a      	ldr	r2, [r3, #0]
 801e520:	e006      	b.n	801e530 <arm_nn_mat_mult_nt_t_s8+0xb3e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e522:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 801e526:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 801e52a:	6812      	ldr	r2, [r2, #0]
 801e52c:	681b      	ldr	r3, [r3, #0]
 801e52e:	41da      	rors	r2, r3
 801e530:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 801e534:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e536:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 801e53a:	681b      	ldr	r3, [r3, #0]
 801e53c:	fa2f f283 	sxtb16	r2, r3
 801e540:	f207 7314 	addw	r3, r7, #1812	; 0x714
 801e544:	601a      	str	r2, [r3, #0]
  return(result);
 801e546:	f207 7314 	addw	r3, r7, #1812	; 0x714
 801e54a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e54c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 801e550:	601a      	str	r2, [r3, #0]
  return result;
 801e552:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 801e556:	681b      	ldr	r3, [r3, #0]
 801e558:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801e55c:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e560:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801e564:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801e568:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 801e56c:	601a      	str	r2, [r3, #0]
 801e56e:	f207 7334 	addw	r3, r7, #1844	; 0x734
 801e572:	6019      	str	r1, [r3, #0]
 801e574:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 801e578:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e57a:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 801e57e:	6819      	ldr	r1, [r3, #0]
 801e580:	f207 7334 	addw	r3, r7, #1844	; 0x734
 801e584:	681a      	ldr	r2, [r3, #0]
 801e586:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 801e58a:	681b      	ldr	r3, [r3, #0]
 801e58c:	fb21 3202 	smlad	r2, r1, r2, r3
 801e590:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 801e594:	601a      	str	r2, [r3, #0]
  return(result);
 801e596:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 801e59a:	681b      	ldr	r3, [r3, #0]
 801e59c:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801e5a0:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e5a4:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801e5a8:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801e5ac:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 801e5b0:	601a      	str	r2, [r3, #0]
 801e5b2:	f207 7344 	addw	r3, r7, #1860	; 0x744
 801e5b6:	6019      	str	r1, [r3, #0]
 801e5b8:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 801e5bc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e5be:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 801e5c2:	6819      	ldr	r1, [r3, #0]
 801e5c4:	f207 7344 	addw	r3, r7, #1860	; 0x744
 801e5c8:	681a      	ldr	r2, [r3, #0]
 801e5ca:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 801e5ce:	681b      	ldr	r3, [r3, #0]
 801e5d0:	fb21 3202 	smlad	r2, r1, r2, r3
 801e5d4:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 801e5d8:	601a      	str	r2, [r3, #0]
  return(result);
 801e5da:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 801e5de:	681b      	ldr	r3, [r3, #0]
 801e5e0:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801e5e4:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e5e8:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801e5ec:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801e5f0:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 801e5f4:	601a      	str	r2, [r3, #0]
 801e5f6:	f207 7354 	addw	r3, r7, #1876	; 0x754
 801e5fa:	6019      	str	r1, [r3, #0]
 801e5fc:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801e600:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e602:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 801e606:	6819      	ldr	r1, [r3, #0]
 801e608:	f207 7354 	addw	r3, r7, #1876	; 0x754
 801e60c:	681a      	ldr	r2, [r3, #0]
 801e60e:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	fb21 3202 	smlad	r2, r1, r2, r3
 801e618:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 801e61c:	601a      	str	r2, [r3, #0]
  return(result);
 801e61e:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 801e622:	681b      	ldr	r3, [r3, #0]
 801e624:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801e628:	f207 725c 	addw	r2, r7, #1884	; 0x75c
 801e62c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801e630:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e632:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 801e636:	681b      	ldr	r3, [r3, #0]
 801e638:	681b      	ldr	r3, [r3, #0]
 801e63a:	681b      	ldr	r3, [r3, #0]
 801e63c:	461a      	mov	r2, r3
 801e63e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801e642:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e644:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 801e648:	681b      	ldr	r3, [r3, #0]
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	1d1a      	adds	r2, r3, #4
 801e64e:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 801e652:	681b      	ldr	r3, [r3, #0]
 801e654:	601a      	str	r2, [r3, #0]
    return (val);
 801e656:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801e65a:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801e65c:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801e660:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e664:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801e668:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801e66c:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 801e670:	601a      	str	r2, [r3, #0]
 801e672:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 801e676:	6019      	str	r1, [r3, #0]
 801e678:	f207 7364 	addw	r3, r7, #1892	; 0x764
 801e67c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e67e:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 801e682:	6819      	ldr	r1, [r3, #0]
 801e684:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 801e688:	681a      	ldr	r2, [r3, #0]
 801e68a:	f207 7364 	addw	r3, r7, #1892	; 0x764
 801e68e:	681b      	ldr	r3, [r3, #0]
 801e690:	fb21 3202 	smlad	r2, r1, r2, r3
 801e694:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 801e698:	601a      	str	r2, [r3, #0]
  return(result);
 801e69a:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 801e69e:	681b      	ldr	r3, [r3, #0]
 801e6a0:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801e6a4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801e6a8:	681a      	ldr	r2, [r3, #0]
 801e6aa:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801e6ae:	441a      	add	r2, r3
 801e6b0:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 801e6b4:	601a      	str	r2, [r3, #0]
 801e6b6:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 801e6ba:	681b      	ldr	r3, [r3, #0]
 801e6bc:	681b      	ldr	r3, [r3, #0]
 801e6be:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801e6c0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e6c4:	601a      	str	r2, [r3, #0]
    return (val);
 801e6c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e6ca:	681b      	ldr	r3, [r3, #0]
 801e6cc:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801e6d0:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801e6d4:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 801e6d8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e6da:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 801e6de:	681b      	ldr	r3, [r3, #0]
 801e6e0:	fa2f f283 	sxtb16	r2, r3
 801e6e4:	f207 7374 	addw	r3, r7, #1908	; 0x774
 801e6e8:	601a      	str	r2, [r3, #0]
  return(result);
 801e6ea:	f207 7374 	addw	r3, r7, #1908	; 0x774
 801e6ee:	681b      	ldr	r3, [r3, #0]
 801e6f0:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801e6f4:	f207 727c 	addw	r2, r7, #1916	; 0x77c
 801e6f8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e6fc:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e6fe:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 801e702:	681b      	ldr	r3, [r3, #0]
 801e704:	681b      	ldr	r3, [r3, #0]
 801e706:	681b      	ldr	r3, [r3, #0]
 801e708:	461a      	mov	r2, r3
 801e70a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801e70e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e710:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 801e714:	681b      	ldr	r3, [r3, #0]
 801e716:	681b      	ldr	r3, [r3, #0]
 801e718:	1d1a      	adds	r2, r3, #4
 801e71a:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	601a      	str	r2, [r3, #0]
    return (val);
 801e722:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801e726:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801e728:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801e72c:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e730:	f207 7384 	addw	r3, r7, #1924	; 0x784
 801e734:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e736:	f207 7384 	addw	r3, r7, #1924	; 0x784
 801e73a:	681b      	ldr	r3, [r3, #0]
 801e73c:	fa2f f283 	sxtb16	r2, r3
 801e740:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801e744:	601a      	str	r2, [r3, #0]
  return(result);
 801e746:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801e74a:	681b      	ldr	r3, [r3, #0]
 801e74c:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 801e750:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801e754:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801e758:	601a      	str	r2, [r3, #0]
 801e75a:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 801e75e:	2308      	movs	r3, #8
 801e760:	6013      	str	r3, [r2, #0]
 801e762:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 801e766:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801e76a:	681b      	ldr	r3, [r3, #0]
 801e76c:	6013      	str	r3, [r2, #0]
 801e76e:	f207 7294 	addw	r2, r7, #1940	; 0x794
 801e772:	f207 739c 	addw	r3, r7, #1948	; 0x79c
 801e776:	681b      	ldr	r3, [r3, #0]
 801e778:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e77a:	f207 7294 	addw	r2, r7, #1940	; 0x794
 801e77e:	f207 7394 	addw	r3, r7, #1940	; 0x794
 801e782:	681b      	ldr	r3, [r3, #0]
 801e784:	f003 031f 	and.w	r3, r3, #31
 801e788:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e78a:	f207 7394 	addw	r3, r7, #1940	; 0x794
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	2b00      	cmp	r3, #0
 801e792:	d103      	bne.n	801e79c <arm_nn_mat_mult_nt_t_s8+0xdaa>
    return op1;
 801e794:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 801e798:	681a      	ldr	r2, [r3, #0]
 801e79a:	e006      	b.n	801e7aa <arm_nn_mat_mult_nt_t_s8+0xdb8>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e79c:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 801e7a0:	f207 7394 	addw	r3, r7, #1940	; 0x794
 801e7a4:	6812      	ldr	r2, [r2, #0]
 801e7a6:	681b      	ldr	r3, [r3, #0]
 801e7a8:	41da      	rors	r2, r3
 801e7aa:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 801e7ae:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e7b0:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 801e7b4:	681b      	ldr	r3, [r3, #0]
 801e7b6:	fa2f f283 	sxtb16	r2, r3
 801e7ba:	f207 738c 	addw	r3, r7, #1932	; 0x78c
 801e7be:	601a      	str	r2, [r3, #0]
  return(result);
 801e7c0:	f207 738c 	addw	r3, r7, #1932	; 0x78c
 801e7c4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e7c6:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 801e7ca:	601a      	str	r2, [r3, #0]
  return result;
 801e7cc:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 801e7d0:	681b      	ldr	r3, [r3, #0]
 801e7d2:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801e7d6:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e7da:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 801e7de:	601a      	str	r2, [r3, #0]
 801e7e0:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 801e7e4:	2308      	movs	r3, #8
 801e7e6:	6013      	str	r3, [r2, #0]
 801e7e8:	f207 72b4 	addw	r2, r7, #1972	; 0x7b4
 801e7ec:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 801e7f0:	681b      	ldr	r3, [r3, #0]
 801e7f2:	6013      	str	r3, [r2, #0]
 801e7f4:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 801e7f8:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 801e7fc:	681b      	ldr	r3, [r3, #0]
 801e7fe:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e800:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 801e804:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 801e808:	681b      	ldr	r3, [r3, #0]
 801e80a:	f003 031f 	and.w	r3, r3, #31
 801e80e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e810:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 801e814:	681b      	ldr	r3, [r3, #0]
 801e816:	2b00      	cmp	r3, #0
 801e818:	d103      	bne.n	801e822 <arm_nn_mat_mult_nt_t_s8+0xe30>
    return op1;
 801e81a:	f207 73b4 	addw	r3, r7, #1972	; 0x7b4
 801e81e:	681a      	ldr	r2, [r3, #0]
 801e820:	e006      	b.n	801e830 <arm_nn_mat_mult_nt_t_s8+0xe3e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e822:	f207 72b4 	addw	r2, r7, #1972	; 0x7b4
 801e826:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 801e82a:	6812      	ldr	r2, [r2, #0]
 801e82c:	681b      	ldr	r3, [r3, #0]
 801e82e:	41da      	rors	r2, r3
 801e830:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 801e834:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e836:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 801e83a:	681b      	ldr	r3, [r3, #0]
 801e83c:	fa2f f283 	sxtb16	r2, r3
 801e840:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 801e844:	601a      	str	r2, [r3, #0]
  return(result);
 801e846:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 801e84a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e84c:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 801e850:	601a      	str	r2, [r3, #0]
  return result;
 801e852:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 801e856:	681b      	ldr	r3, [r3, #0]
 801e858:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801e85c:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e860:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801e864:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801e868:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 801e86c:	601a      	str	r2, [r3, #0]
 801e86e:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 801e872:	6019      	str	r1, [r3, #0]
 801e874:	f207 73c4 	addw	r3, r7, #1988	; 0x7c4
 801e878:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e87a:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 801e87e:	6819      	ldr	r1, [r3, #0]
 801e880:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 801e884:	681a      	ldr	r2, [r3, #0]
 801e886:	f207 73c4 	addw	r3, r7, #1988	; 0x7c4
 801e88a:	681b      	ldr	r3, [r3, #0]
 801e88c:	fb21 3202 	smlad	r2, r1, r2, r3
 801e890:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 801e894:	601a      	str	r2, [r3, #0]
  return(result);
 801e896:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 801e89a:	681b      	ldr	r3, [r3, #0]
 801e89c:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801e8a0:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801e8a4:	f207 73d4 	addw	r3, r7, #2004	; 0x7d4
 801e8a8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e8aa:	f207 73d4 	addw	r3, r7, #2004	; 0x7d4
 801e8ae:	681b      	ldr	r3, [r3, #0]
 801e8b0:	fa2f f283 	sxtb16	r2, r3
 801e8b4:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 801e8b8:	601a      	str	r2, [r3, #0]
  return(result);
 801e8ba:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 801e8be:	681b      	ldr	r3, [r3, #0]
 801e8c0:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801e8c4:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e8c8:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801e8cc:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801e8d0:	f207 73e4 	addw	r3, r7, #2020	; 0x7e4
 801e8d4:	601a      	str	r2, [r3, #0]
 801e8d6:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 801e8da:	6019      	str	r1, [r3, #0]
 801e8dc:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 801e8e0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e8e2:	f207 73e4 	addw	r3, r7, #2020	; 0x7e4
 801e8e6:	6819      	ldr	r1, [r3, #0]
 801e8e8:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 801e8ec:	681a      	ldr	r2, [r3, #0]
 801e8ee:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 801e8f2:	681b      	ldr	r3, [r3, #0]
 801e8f4:	fb21 3202 	smlad	r2, r1, r2, r3
 801e8f8:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 801e8fc:	601a      	str	r2, [r3, #0]
  return(result);
 801e8fe:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 801e902:	681b      	ldr	r3, [r3, #0]
 801e904:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801e908:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801e90c:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 801e910:	601a      	str	r2, [r3, #0]
 801e912:	f207 72fc 	addw	r2, r7, #2044	; 0x7fc
 801e916:	2308      	movs	r3, #8
 801e918:	6013      	str	r3, [r2, #0]
 801e91a:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 801e91e:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 801e922:	681b      	ldr	r3, [r3, #0]
 801e924:	6013      	str	r3, [r2, #0]
 801e926:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 801e92a:	f207 73fc 	addw	r3, r7, #2044	; 0x7fc
 801e92e:	681b      	ldr	r3, [r3, #0]
 801e930:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e932:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 801e936:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 801e93a:	681b      	ldr	r3, [r3, #0]
 801e93c:	f003 031f 	and.w	r3, r3, #31
 801e940:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e942:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 801e946:	681b      	ldr	r3, [r3, #0]
 801e948:	2b00      	cmp	r3, #0
 801e94a:	d103      	bne.n	801e954 <arm_nn_mat_mult_nt_t_s8+0xf62>
    return op1;
 801e94c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 801e950:	681a      	ldr	r2, [r3, #0]
 801e952:	e006      	b.n	801e962 <arm_nn_mat_mult_nt_t_s8+0xf70>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e954:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 801e958:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 801e95c:	6812      	ldr	r2, [r2, #0]
 801e95e:	681b      	ldr	r3, [r3, #0]
 801e960:	41da      	rors	r2, r3
 801e962:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801e966:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e968:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801e96c:	681b      	ldr	r3, [r3, #0]
 801e96e:	fa2f f283 	sxtb16	r2, r3
 801e972:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 801e976:	601a      	str	r2, [r3, #0]
  return(result);
 801e978:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 801e97c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e97e:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 801e982:	601a      	str	r2, [r3, #0]
  return result;
 801e984:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 801e988:	681b      	ldr	r3, [r3, #0]
 801e98a:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801e98e:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e992:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801e996:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801e99a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801e99e:	601a      	str	r2, [r3, #0]
 801e9a0:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 801e9a4:	6019      	str	r1, [r3, #0]
 801e9a6:	f607 0308 	addw	r3, r7, #2056	; 0x808
 801e9aa:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e9ac:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801e9b0:	6819      	ldr	r1, [r3, #0]
 801e9b2:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 801e9b6:	681a      	ldr	r2, [r3, #0]
 801e9b8:	f607 0308 	addw	r3, r7, #2056	; 0x808
 801e9bc:	681b      	ldr	r3, [r3, #0]
 801e9be:	fb21 3202 	smlad	r2, r1, r2, r3
 801e9c2:	f607 0304 	addw	r3, r7, #2052	; 0x804
 801e9c6:	601a      	str	r2, [r3, #0]
  return(result);
 801e9c8:	f607 0304 	addw	r3, r7, #2052	; 0x804
 801e9cc:	681b      	ldr	r3, [r3, #0]
 801e9ce:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801e9d2:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e9d6:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801e9da:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801e9de:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 801e9e2:	601a      	str	r2, [r3, #0]
 801e9e4:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 801e9e8:	6019      	str	r1, [r3, #0]
 801e9ea:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801e9ee:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e9f0:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 801e9f4:	6819      	ldr	r1, [r3, #0]
 801e9f6:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 801e9fa:	681a      	ldr	r2, [r3, #0]
 801e9fc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801ea00:	681b      	ldr	r3, [r3, #0]
 801ea02:	fb21 3202 	smlad	r2, r1, r2, r3
 801ea06:	f607 0314 	addw	r3, r7, #2068	; 0x814
 801ea0a:	601a      	str	r2, [r3, #0]
  return(result);
 801ea0c:	f607 0314 	addw	r3, r7, #2068	; 0x814
 801ea10:	681b      	ldr	r3, [r3, #0]
 801ea12:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801ea16:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ea1a:	681a      	ldr	r2, [r3, #0]
 801ea1c:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801ea20:	441a      	add	r2, r3
 801ea22:	f607 0324 	addw	r3, r7, #2084	; 0x824
 801ea26:	601a      	str	r2, [r3, #0]
 801ea28:	f607 0324 	addw	r3, r7, #2084	; 0x824
 801ea2c:	681b      	ldr	r3, [r3, #0]
 801ea2e:	681b      	ldr	r3, [r3, #0]
 801ea30:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ea32:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ea36:	601a      	str	r2, [r3, #0]
    return (val);
 801ea38:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ea3c:	681b      	ldr	r3, [r3, #0]
 801ea3e:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801ea42:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ea46:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 801ea4a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ea4c:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 801ea50:	681b      	ldr	r3, [r3, #0]
 801ea52:	fa2f f283 	sxtb16	r2, r3
 801ea56:	f607 0328 	addw	r3, r7, #2088	; 0x828
 801ea5a:	601a      	str	r2, [r3, #0]
  return(result);
 801ea5c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 801ea60:	681b      	ldr	r3, [r3, #0]
 801ea62:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801ea66:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ea6a:	f607 0348 	addw	r3, r7, #2120	; 0x848
 801ea6e:	601a      	str	r2, [r3, #0]
 801ea70:	f607 0244 	addw	r2, r7, #2116	; 0x844
 801ea74:	2308      	movs	r3, #8
 801ea76:	6013      	str	r3, [r2, #0]
 801ea78:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 801ea7c:	f607 0348 	addw	r3, r7, #2120	; 0x848
 801ea80:	681b      	ldr	r3, [r3, #0]
 801ea82:	6013      	str	r3, [r2, #0]
 801ea84:	f607 023c 	addw	r2, r7, #2108	; 0x83c
 801ea88:	f607 0344 	addw	r3, r7, #2116	; 0x844
 801ea8c:	681b      	ldr	r3, [r3, #0]
 801ea8e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ea90:	f607 023c 	addw	r2, r7, #2108	; 0x83c
 801ea94:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	f003 031f 	and.w	r3, r3, #31
 801ea9e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801eaa0:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	2b00      	cmp	r3, #0
 801eaa8:	d103      	bne.n	801eab2 <arm_nn_mat_mult_nt_t_s8+0x10c0>
    return op1;
 801eaaa:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 801eaae:	681a      	ldr	r2, [r3, #0]
 801eab0:	e006      	b.n	801eac0 <arm_nn_mat_mult_nt_t_s8+0x10ce>
  return (op1 >> op2) | (op1 << (32U - op2));
 801eab2:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 801eab6:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801eaba:	6812      	ldr	r2, [r2, #0]
 801eabc:	681b      	ldr	r3, [r3, #0]
 801eabe:	41da      	rors	r2, r3
 801eac0:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801eac4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801eac6:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801eaca:	681b      	ldr	r3, [r3, #0]
 801eacc:	fa2f f283 	sxtb16	r2, r3
 801ead0:	f607 0334 	addw	r3, r7, #2100	; 0x834
 801ead4:	601a      	str	r2, [r3, #0]
  return(result);
 801ead6:	f607 0334 	addw	r3, r7, #2100	; 0x834
 801eada:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801eadc:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 801eae0:	601a      	str	r2, [r3, #0]
  return result;
 801eae2:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 801eae6:	681b      	ldr	r3, [r3, #0]
 801eae8:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801eaec:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801eaf0:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801eaf4:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801eaf8:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801eafc:	601a      	str	r2, [r3, #0]
 801eafe:	f607 0354 	addw	r3, r7, #2132	; 0x854
 801eb02:	6019      	str	r1, [r3, #0]
 801eb04:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801eb08:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801eb0a:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801eb0e:	6819      	ldr	r1, [r3, #0]
 801eb10:	f607 0354 	addw	r3, r7, #2132	; 0x854
 801eb14:	681a      	ldr	r2, [r3, #0]
 801eb16:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	fb21 3202 	smlad	r2, r1, r2, r3
 801eb20:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 801eb24:	601a      	str	r2, [r3, #0]
  return(result);
 801eb26:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 801eb2a:	681b      	ldr	r3, [r3, #0]
 801eb2c:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801eb30:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801eb34:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801eb38:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801eb3c:	f607 0368 	addw	r3, r7, #2152	; 0x868
 801eb40:	601a      	str	r2, [r3, #0]
 801eb42:	f607 0364 	addw	r3, r7, #2148	; 0x864
 801eb46:	6019      	str	r1, [r3, #0]
 801eb48:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801eb4c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801eb4e:	f607 0368 	addw	r3, r7, #2152	; 0x868
 801eb52:	6819      	ldr	r1, [r3, #0]
 801eb54:	f607 0364 	addw	r3, r7, #2148	; 0x864
 801eb58:	681a      	ldr	r2, [r3, #0]
 801eb5a:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801eb5e:	681b      	ldr	r3, [r3, #0]
 801eb60:	fb21 3202 	smlad	r2, r1, r2, r3
 801eb64:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 801eb68:	601a      	str	r2, [r3, #0]
  return(result);
 801eb6a:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 801eb6e:	681b      	ldr	r3, [r3, #0]
 801eb70:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801eb74:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801eb78:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801eb7c:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801eb80:	f607 0378 	addw	r3, r7, #2168	; 0x878
 801eb84:	601a      	str	r2, [r3, #0]
 801eb86:	f607 0374 	addw	r3, r7, #2164	; 0x874
 801eb8a:	6019      	str	r1, [r3, #0]
 801eb8c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 801eb90:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801eb92:	f607 0378 	addw	r3, r7, #2168	; 0x878
 801eb96:	6819      	ldr	r1, [r3, #0]
 801eb98:	f607 0374 	addw	r3, r7, #2164	; 0x874
 801eb9c:	681a      	ldr	r2, [r3, #0]
 801eb9e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 801eba2:	681b      	ldr	r3, [r3, #0]
 801eba4:	fb21 3202 	smlad	r2, r1, r2, r3
 801eba8:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 801ebac:	601a      	str	r2, [r3, #0]
  return(result);
 801ebae:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 801ebb2:	681b      	ldr	r3, [r3, #0]
 801ebb4:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801ebb8:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 801ebbc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801ebc0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801ebc2:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 801ebc6:	681b      	ldr	r3, [r3, #0]
 801ebc8:	681b      	ldr	r3, [r3, #0]
 801ebca:	681b      	ldr	r3, [r3, #0]
 801ebcc:	461a      	mov	r2, r3
 801ebce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801ebd2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ebd4:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 801ebd8:	681b      	ldr	r3, [r3, #0]
 801ebda:	681b      	ldr	r3, [r3, #0]
 801ebdc:	1d1a      	adds	r2, r3, #4
 801ebde:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 801ebe2:	681b      	ldr	r3, [r3, #0]
 801ebe4:	601a      	str	r2, [r3, #0]
    return (val);
 801ebe6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801ebea:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801ebec:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801ebf0:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ebf4:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801ebf8:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801ebfc:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 801ec00:	601a      	str	r2, [r3, #0]
 801ec02:	f607 0388 	addw	r3, r7, #2184	; 0x888
 801ec06:	6019      	str	r1, [r3, #0]
 801ec08:	f607 0384 	addw	r3, r7, #2180	; 0x884
 801ec0c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ec0e:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 801ec12:	6819      	ldr	r1, [r3, #0]
 801ec14:	f607 0388 	addw	r3, r7, #2184	; 0x888
 801ec18:	681a      	ldr	r2, [r3, #0]
 801ec1a:	f607 0384 	addw	r3, r7, #2180	; 0x884
 801ec1e:	681b      	ldr	r3, [r3, #0]
 801ec20:	fb21 3202 	smlad	r2, r1, r2, r3
 801ec24:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 801ec28:	601a      	str	r2, [r3, #0]
  return(result);
 801ec2a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 801ec2e:	681b      	ldr	r3, [r3, #0]
 801ec30:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801ec34:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801ec38:	681a      	ldr	r2, [r3, #0]
 801ec3a:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801ec3e:	441a      	add	r2, r3
 801ec40:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 801ec44:	601a      	str	r2, [r3, #0]
 801ec46:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 801ec4a:	681b      	ldr	r3, [r3, #0]
 801ec4c:	681b      	ldr	r3, [r3, #0]
 801ec4e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ec50:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ec54:	601a      	str	r2, [r3, #0]
    return (val);
 801ec56:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ec5a:	681b      	ldr	r3, [r3, #0]
 801ec5c:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801ec60:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801ec64:	f607 0398 	addw	r3, r7, #2200	; 0x898
 801ec68:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ec6a:	f607 0398 	addw	r3, r7, #2200	; 0x898
 801ec6e:	681b      	ldr	r3, [r3, #0]
 801ec70:	fa2f f283 	sxtb16	r2, r3
 801ec74:	f607 0394 	addw	r3, r7, #2196	; 0x894
 801ec78:	601a      	str	r2, [r3, #0]
  return(result);
 801ec7a:	f607 0394 	addw	r3, r7, #2196	; 0x894
 801ec7e:	681b      	ldr	r3, [r3, #0]
 801ec80:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801ec84:	f607 029c 	addw	r2, r7, #2204	; 0x89c
 801ec88:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ec8c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801ec8e:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 801ec92:	681b      	ldr	r3, [r3, #0]
 801ec94:	681b      	ldr	r3, [r3, #0]
 801ec96:	681b      	ldr	r3, [r3, #0]
 801ec98:	461a      	mov	r2, r3
 801ec9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801ec9e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801eca0:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 801eca4:	681b      	ldr	r3, [r3, #0]
 801eca6:	681b      	ldr	r3, [r3, #0]
 801eca8:	1d1a      	adds	r2, r3, #4
 801ecaa:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 801ecae:	681b      	ldr	r3, [r3, #0]
 801ecb0:	601a      	str	r2, [r3, #0]
    return (val);
 801ecb2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801ecb6:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801ecb8:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801ecbc:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ecc0:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 801ecc4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ecc6:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 801ecca:	681b      	ldr	r3, [r3, #0]
 801eccc:	fa2f f283 	sxtb16	r2, r3
 801ecd0:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 801ecd4:	601a      	str	r2, [r3, #0]
  return(result);
 801ecd6:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 801ecda:	681b      	ldr	r3, [r3, #0]
 801ecdc:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 801ece0:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801ece4:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 801ece8:	601a      	str	r2, [r3, #0]
 801ecea:	f607 02bc 	addw	r2, r7, #2236	; 0x8bc
 801ecee:	2308      	movs	r3, #8
 801ecf0:	6013      	str	r3, [r2, #0]
 801ecf2:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 801ecf6:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	6013      	str	r3, [r2, #0]
 801ecfe:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 801ed02:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 801ed06:	681b      	ldr	r3, [r3, #0]
 801ed08:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ed0a:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 801ed0e:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 801ed12:	681b      	ldr	r3, [r3, #0]
 801ed14:	f003 031f 	and.w	r3, r3, #31
 801ed18:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ed1a:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 801ed1e:	681b      	ldr	r3, [r3, #0]
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	d103      	bne.n	801ed2c <arm_nn_mat_mult_nt_t_s8+0x133a>
    return op1;
 801ed24:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 801ed28:	681a      	ldr	r2, [r3, #0]
 801ed2a:	e006      	b.n	801ed3a <arm_nn_mat_mult_nt_t_s8+0x1348>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ed2c:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 801ed30:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 801ed34:	6812      	ldr	r2, [r2, #0]
 801ed36:	681b      	ldr	r3, [r3, #0]
 801ed38:	41da      	rors	r2, r3
 801ed3a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 801ed3e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ed40:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 801ed44:	681b      	ldr	r3, [r3, #0]
 801ed46:	fa2f f283 	sxtb16	r2, r3
 801ed4a:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 801ed4e:	601a      	str	r2, [r3, #0]
  return(result);
 801ed50:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 801ed54:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ed56:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 801ed5a:	601a      	str	r2, [r3, #0]
  return result;
 801ed5c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 801ed60:	681b      	ldr	r3, [r3, #0]
 801ed62:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801ed66:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ed6a:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 801ed6e:	601a      	str	r2, [r3, #0]
 801ed70:	f607 02d8 	addw	r2, r7, #2264	; 0x8d8
 801ed74:	2308      	movs	r3, #8
 801ed76:	6013      	str	r3, [r2, #0]
 801ed78:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 801ed7c:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 801ed80:	681b      	ldr	r3, [r3, #0]
 801ed82:	6013      	str	r3, [r2, #0]
 801ed84:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 801ed88:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 801ed8c:	681b      	ldr	r3, [r3, #0]
 801ed8e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ed90:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 801ed94:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 801ed98:	681b      	ldr	r3, [r3, #0]
 801ed9a:	f003 031f 	and.w	r3, r3, #31
 801ed9e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801eda0:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 801eda4:	681b      	ldr	r3, [r3, #0]
 801eda6:	2b00      	cmp	r3, #0
 801eda8:	d103      	bne.n	801edb2 <arm_nn_mat_mult_nt_t_s8+0x13c0>
    return op1;
 801edaa:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 801edae:	681a      	ldr	r2, [r3, #0]
 801edb0:	e006      	b.n	801edc0 <arm_nn_mat_mult_nt_t_s8+0x13ce>
  return (op1 >> op2) | (op1 << (32U - op2));
 801edb2:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 801edb6:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 801edba:	6812      	ldr	r2, [r2, #0]
 801edbc:	681b      	ldr	r3, [r3, #0]
 801edbe:	41da      	rors	r2, r3
 801edc0:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 801edc4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801edc6:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 801edca:	681b      	ldr	r3, [r3, #0]
 801edcc:	fa2f f283 	sxtb16	r2, r3
 801edd0:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 801edd4:	601a      	str	r2, [r3, #0]
  return(result);
 801edd6:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 801edda:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801eddc:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 801ede0:	601a      	str	r2, [r3, #0]
  return result;
 801ede2:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 801ede6:	681b      	ldr	r3, [r3, #0]
 801ede8:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801edec:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801edf0:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801edf4:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801edf8:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 801edfc:	601a      	str	r2, [r3, #0]
 801edfe:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 801ee02:	6019      	str	r1, [r3, #0]
 801ee04:	f607 03e4 	addw	r3, r7, #2276	; 0x8e4
 801ee08:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ee0a:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 801ee0e:	6819      	ldr	r1, [r3, #0]
 801ee10:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 801ee14:	681a      	ldr	r2, [r3, #0]
 801ee16:	f607 03e4 	addw	r3, r7, #2276	; 0x8e4
 801ee1a:	681b      	ldr	r3, [r3, #0]
 801ee1c:	fb21 3202 	smlad	r2, r1, r2, r3
 801ee20:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 801ee24:	601a      	str	r2, [r3, #0]
  return(result);
 801ee26:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 801ee2a:	681b      	ldr	r3, [r3, #0]
 801ee2c:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801ee30:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801ee34:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 801ee38:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ee3a:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 801ee3e:	681b      	ldr	r3, [r3, #0]
 801ee40:	fa2f f283 	sxtb16	r2, r3
 801ee44:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 801ee48:	601a      	str	r2, [r3, #0]
  return(result);
 801ee4a:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 801ee4e:	681b      	ldr	r3, [r3, #0]
 801ee50:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801ee54:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ee58:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801ee5c:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801ee60:	f607 1304 	addw	r3, r7, #2308	; 0x904
 801ee64:	601a      	str	r2, [r3, #0]
 801ee66:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801ee6a:	6019      	str	r1, [r3, #0]
 801ee6c:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 801ee70:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ee72:	f607 1304 	addw	r3, r7, #2308	; 0x904
 801ee76:	6819      	ldr	r1, [r3, #0]
 801ee78:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801ee7c:	681a      	ldr	r2, [r3, #0]
 801ee7e:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 801ee82:	681b      	ldr	r3, [r3, #0]
 801ee84:	fb21 3202 	smlad	r2, r1, r2, r3
 801ee88:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 801ee8c:	601a      	str	r2, [r3, #0]
  return(result);
 801ee8e:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 801ee92:	681b      	ldr	r3, [r3, #0]
 801ee94:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801ee98:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801ee9c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 801eea0:	601a      	str	r2, [r3, #0]
 801eea2:	f607 121c 	addw	r2, r7, #2332	; 0x91c
 801eea6:	2308      	movs	r3, #8
 801eea8:	6013      	str	r3, [r2, #0]
 801eeaa:	f607 1218 	addw	r2, r7, #2328	; 0x918
 801eeae:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 801eeb2:	681b      	ldr	r3, [r3, #0]
 801eeb4:	6013      	str	r3, [r2, #0]
 801eeb6:	f607 1214 	addw	r2, r7, #2324	; 0x914
 801eeba:	f607 131c 	addw	r3, r7, #2332	; 0x91c
 801eebe:	681b      	ldr	r3, [r3, #0]
 801eec0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801eec2:	f607 1214 	addw	r2, r7, #2324	; 0x914
 801eec6:	f607 1314 	addw	r3, r7, #2324	; 0x914
 801eeca:	681b      	ldr	r3, [r3, #0]
 801eecc:	f003 031f 	and.w	r3, r3, #31
 801eed0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801eed2:	f607 1314 	addw	r3, r7, #2324	; 0x914
 801eed6:	681b      	ldr	r3, [r3, #0]
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	d103      	bne.n	801eee4 <arm_nn_mat_mult_nt_t_s8+0x14f2>
    return op1;
 801eedc:	f607 1318 	addw	r3, r7, #2328	; 0x918
 801eee0:	681a      	ldr	r2, [r3, #0]
 801eee2:	e006      	b.n	801eef2 <arm_nn_mat_mult_nt_t_s8+0x1500>
  return (op1 >> op2) | (op1 << (32U - op2));
 801eee4:	f607 1218 	addw	r2, r7, #2328	; 0x918
 801eee8:	f607 1314 	addw	r3, r7, #2324	; 0x914
 801eeec:	6812      	ldr	r2, [r2, #0]
 801eeee:	681b      	ldr	r3, [r3, #0]
 801eef0:	41da      	rors	r2, r3
 801eef2:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 801eef6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801eef8:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 801eefc:	681b      	ldr	r3, [r3, #0]
 801eefe:	fa2f f283 	sxtb16	r2, r3
 801ef02:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 801ef06:	601a      	str	r2, [r3, #0]
  return(result);
 801ef08:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 801ef0c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ef0e:	f607 1308 	addw	r3, r7, #2312	; 0x908
 801ef12:	601a      	str	r2, [r3, #0]
  return result;
 801ef14:	f607 1308 	addw	r3, r7, #2312	; 0x908
 801ef18:	681b      	ldr	r3, [r3, #0]
 801ef1a:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801ef1e:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801ef22:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801ef26:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801ef2a:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 801ef2e:	601a      	str	r2, [r3, #0]
 801ef30:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 801ef34:	6019      	str	r1, [r3, #0]
 801ef36:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801ef3a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ef3c:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 801ef40:	6819      	ldr	r1, [r3, #0]
 801ef42:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 801ef46:	681a      	ldr	r2, [r3, #0]
 801ef48:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801ef4c:	681b      	ldr	r3, [r3, #0]
 801ef4e:	fb21 3202 	smlad	r2, r1, r2, r3
 801ef52:	f607 1324 	addw	r3, r7, #2340	; 0x924
 801ef56:	601a      	str	r2, [r3, #0]
  return(result);
 801ef58:	f607 1324 	addw	r3, r7, #2340	; 0x924
 801ef5c:	681b      	ldr	r3, [r3, #0]
 801ef5e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801ef62:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ef66:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801ef6a:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801ef6e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801ef72:	601a      	str	r2, [r3, #0]
 801ef74:	f607 133c 	addw	r3, r7, #2364	; 0x93c
 801ef78:	6019      	str	r1, [r3, #0]
 801ef7a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801ef7e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ef80:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801ef84:	6819      	ldr	r1, [r3, #0]
 801ef86:	f607 133c 	addw	r3, r7, #2364	; 0x93c
 801ef8a:	681a      	ldr	r2, [r3, #0]
 801ef8c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801ef90:	681b      	ldr	r3, [r3, #0]
 801ef92:	fb21 3202 	smlad	r2, r1, r2, r3
 801ef96:	f607 1334 	addw	r3, r7, #2356	; 0x934
 801ef9a:	601a      	str	r2, [r3, #0]
  return(result);
 801ef9c:	f607 1334 	addw	r3, r7, #2356	; 0x934
 801efa0:	681b      	ldr	r3, [r3, #0]
 801efa2:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801efa6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801efaa:	681a      	ldr	r2, [r3, #0]
 801efac:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801efb0:	4413      	add	r3, r2
 801efb2:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 801efb6:	f8d7 3944 	ldr.w	r3, [r7, #2372]	; 0x944
 801efba:	681b      	ldr	r3, [r3, #0]
 801efbc:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801efbe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801efc2:	601a      	str	r2, [r3, #0]
    return (val);
 801efc4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801efc8:	681b      	ldr	r3, [r3, #0]
 801efca:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801efce:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 801efd2:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801efd6:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 801efda:	fa2f f383 	sxtb16	r3, r3
 801efde:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
  return(result);
 801efe2:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
 801efe6:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801efea:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 801efee:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
 801eff2:	2308      	movs	r3, #8
 801eff4:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801eff8:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 801effc:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 801f000:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801f004:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
  op2 %= 32U;
 801f008:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801f00c:	f003 031f 	and.w	r3, r3, #31
 801f010:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
  if (op2 == 0U)
 801f014:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801f018:	2b00      	cmp	r3, #0
 801f01a:	d102      	bne.n	801f022 <arm_nn_mat_mult_nt_t_s8+0x1630>
    return op1;
 801f01c:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 801f020:	e005      	b.n	801f02e <arm_nn_mat_mult_nt_t_s8+0x163c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f022:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 801f026:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801f02a:	fa62 f303 	ror.w	r3, r2, r3
 801f02e:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f032:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801f036:	fa2f f383 	sxtb16	r3, r3
 801f03a:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
  return(result);
 801f03e:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
    result = __SXTB16(__ROR(op1, rotate)) ;
 801f042:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
  return result;
 801f046:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 801f04a:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801f04e:	f8d7 19b4 	ldr.w	r1, [r7, #2484]	; 0x9b4
 801f052:	f8d7 29bc 	ldr.w	r2, [r7, #2492]	; 0x9bc
 801f056:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801f05a:	f8c7 1978 	str.w	r1, [r7, #2424]	; 0x978
 801f05e:	f8c7 2974 	str.w	r2, [r7, #2420]	; 0x974
 801f062:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f066:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 801f06a:	f8d7 2974 	ldr.w	r2, [r7, #2420]	; 0x974
 801f06e:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 801f072:	fb21 3302 	smlad	r3, r1, r2, r3
 801f076:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
  return(result);
 801f07a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801f07e:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801f082:	f8d7 19b4 	ldr.w	r1, [r7, #2484]	; 0x9b4
 801f086:	f8d7 29ac 	ldr.w	r2, [r7, #2476]	; 0x9ac
 801f08a:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801f08e:	f8c7 1988 	str.w	r1, [r7, #2440]	; 0x988
 801f092:	f8c7 2984 	str.w	r2, [r7, #2436]	; 0x984
 801f096:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f09a:	f8d7 1988 	ldr.w	r1, [r7, #2440]	; 0x988
 801f09e:	f8d7 2984 	ldr.w	r2, [r7, #2436]	; 0x984
 801f0a2:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 801f0a6:	fb21 3302 	smlad	r3, r1, r2, r3
 801f0aa:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
  return(result);
 801f0ae:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 801f0b2:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801f0b6:	f8d7 19b8 	ldr.w	r1, [r7, #2488]	; 0x9b8
 801f0ba:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801f0be:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801f0c2:	f8c7 1998 	str.w	r1, [r7, #2456]	; 0x998
 801f0c6:	f8c7 2994 	str.w	r2, [r7, #2452]	; 0x994
 801f0ca:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f0ce:	f8d7 1998 	ldr.w	r1, [r7, #2456]	; 0x998
 801f0d2:	f8d7 2994 	ldr.w	r2, [r7, #2452]	; 0x994
 801f0d6:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 801f0da:	fb21 3302 	smlad	r3, r1, r2, r3
 801f0de:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
  return(result);
 801f0e2:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 801f0e6:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val0, val4, res11);
 801f0ea:	f8d7 19b8 	ldr.w	r1, [r7, #2488]	; 0x9b8
 801f0ee:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801f0f2:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801f0f6:	f8c7 19a8 	str.w	r1, [r7, #2472]	; 0x9a8
 801f0fa:	f8c7 29a4 	str.w	r2, [r7, #2468]	; 0x9a4
 801f0fe:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f102:	f8d7 19a8 	ldr.w	r1, [r7, #2472]	; 0x9a8
 801f106:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801f10a:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 801f10e:	fb21 3302 	smlad	r3, r1, r2, r3
 801f112:	f8c7 399c 	str.w	r3, [r7, #2460]	; 0x99c
  return(result);
 801f116:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 801f11a:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801f11e:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801f122:	3310      	adds	r3, #16
 801f124:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
 801f128:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f12c:	f1a3 020f 	sub.w	r2, r3, #15
 801f130:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801f134:	4293      	cmp	r3, r2
 801f136:	f6fe ad09 	blt.w	801db4c <arm_nn_mat_mult_nt_t_s8+0x15a>
            }

            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801f13a:	e05c      	b.n	801f1f6 <arm_nn_mat_mult_nt_t_s8+0x1804>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 801f13c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f140:	681b      	ldr	r3, [r3, #0]
 801f142:	781b      	ldrb	r3, [r3, #0]
 801f144:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 801f148:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f14c:	681a      	ldr	r2, [r3, #0]
 801f14e:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f152:	4413      	add	r3, r2
 801f154:	781b      	ldrb	r3, [r3, #0]
 801f156:	f887 39c6 	strb.w	r3, [r7, #2502]	; 0x9c6
                q7_t lhs_value = lhs_ptr[0];
 801f15a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f15e:	681b      	ldr	r3, [r3, #0]
 801f160:	781b      	ldrb	r3, [r3, #0]
 801f162:	f887 39c5 	strb.w	r3, [r7, #2501]	; 0x9c5

                res00 += lhs_value * rhs_value0;
 801f166:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801f16a:	f997 39c7 	ldrsb.w	r3, [r7, #2503]	; 0x9c7
 801f16e:	fb03 f202 	mul.w	r2, r3, r2
 801f172:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801f176:	4413      	add	r3, r2
 801f178:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                res01 += lhs_value * rhs_value1;
 801f17c:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801f180:	f997 39c6 	ldrsb.w	r3, [r7, #2502]	; 0x9c6
 801f184:	fb03 f202 	mul.w	r2, r3, r2
 801f188:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 801f18c:	4413      	add	r3, r2
 801f18e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                lhs_value = lhs_ptr[rhs_cols];
 801f192:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f196:	681a      	ldr	r2, [r3, #0]
 801f198:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f19c:	4413      	add	r3, r2
 801f19e:	781b      	ldrb	r3, [r3, #0]
 801f1a0:	f887 39c5 	strb.w	r3, [r7, #2501]	; 0x9c5
                res10 += lhs_value * rhs_value0;
 801f1a4:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801f1a8:	f997 39c7 	ldrsb.w	r3, [r7, #2503]	; 0x9c7
 801f1ac:	fb03 f202 	mul.w	r2, r3, r2
 801f1b0:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801f1b4:	4413      	add	r3, r2
 801f1b6:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 += lhs_value * rhs_value1;
 801f1ba:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801f1be:	f997 39c6 	ldrsb.w	r3, [r7, #2502]	; 0x9c6
 801f1c2:	fb03 f202 	mul.w	r2, r3, r2
 801f1c6:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801f1ca:	4413      	add	r3, r2
 801f1cc:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                ++rhs_ptr;
 801f1d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f1d4:	681b      	ldr	r3, [r3, #0]
 801f1d6:	1c5a      	adds	r2, r3, #1
 801f1d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f1dc:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 801f1de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	1c5a      	adds	r2, r3, #1
 801f1e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f1ea:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801f1ec:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801f1f0:	3301      	adds	r3, #1
 801f1f2:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
 801f1f6:	f8d7 2a14 	ldr.w	r2, [r7, #2580]	; 0xa14
 801f1fa:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f1fe:	429a      	cmp	r2, r3
 801f200:	db9c      	blt.n	801f13c <arm_nn_mat_mult_nt_t_s8+0x174a>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801f202:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f206:	009a      	lsls	r2, r3, #2
 801f208:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801f20c:	4413      	add	r3, r2
 801f20e:	6818      	ldr	r0, [r3, #0]
 801f210:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f214:	009a      	lsls	r2, r3, #2
 801f216:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801f21a:	4413      	add	r3, r2
 801f21c:	6819      	ldr	r1, [r3, #0]
 801f21e:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 801f222:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801f226:	6013      	str	r3, [r2, #0]
 801f228:	f207 4394 	addw	r3, r7, #1172	; 0x494
 801f22c:	6018      	str	r0, [r3, #0]
 801f22e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801f232:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f234:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801f238:	681b      	ldr	r3, [r3, #0]
 801f23a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801f23e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801f242:	681b      	ldr	r3, [r3, #0]
 801f244:	fa03 f202 	lsl.w	r2, r3, r2
 801f248:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 801f24c:	601a      	str	r2, [r3, #0]
 801f24e:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 801f252:	f207 4394 	addw	r3, r7, #1172	; 0x494
 801f256:	681b      	ldr	r3, [r3, #0]
 801f258:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f25a:	f207 4284 	addw	r2, r7, #1156	; 0x484
 801f25e:	2300      	movs	r3, #0
 801f260:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801f262:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801f266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f26a:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801f26c:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801f270:	2300      	movs	r3, #0
 801f272:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801f274:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f278:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f27c:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 801f280:	681b      	ldr	r3, [r3, #0]
 801f282:	4618      	mov	r0, r3
 801f284:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801f288:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 801f28c:	681b      	ldr	r3, [r3, #0]
 801f28e:	461a      	mov	r2, r3
 801f290:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f294:	fb02 f501 	mul.w	r5, r2, r1
 801f298:	fb00 f403 	mul.w	r4, r0, r3
 801f29c:	442c      	add	r4, r5
 801f29e:	fba0 2302 	umull	r2, r3, r0, r2
 801f2a2:	18e1      	adds	r1, r4, r3
 801f2a4:	460b      	mov	r3, r1
 801f2a6:	eb18 0102 	adds.w	r1, r8, r2
 801f2aa:	6139      	str	r1, [r7, #16]
 801f2ac:	eb49 0303 	adc.w	r3, r9, r3
 801f2b0:	617b      	str	r3, [r7, #20]
 801f2b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f2b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801f2ba:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801f2be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2c6:	f04f 0000 	mov.w	r0, #0
 801f2ca:	f04f 0100 	mov.w	r1, #0
 801f2ce:	0fd0      	lsrs	r0, r2, #31
 801f2d0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801f2d4:	17d9      	asrs	r1, r3, #31
 801f2d6:	f207 4284 	addw	r2, r7, #1156	; 0x484
 801f2da:	4603      	mov	r3, r0
 801f2dc:	6013      	str	r3, [r2, #0]
    return result;
 801f2de:	f207 4384 	addw	r3, r7, #1156	; 0x484
 801f2e2:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f2e4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801f2e8:	681b      	ldr	r3, [r3, #0]
 801f2ea:	2b00      	cmp	r3, #0
 801f2ec:	dc04      	bgt.n	801f2f8 <arm_nn_mat_mult_nt_t_s8+0x1906>
 801f2ee:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801f2f2:	681b      	ldr	r3, [r3, #0]
 801f2f4:	425a      	negs	r2, r3
 801f2f6:	e000      	b.n	801f2fa <arm_nn_mat_mult_nt_t_s8+0x1908>
 801f2f8:	2200      	movs	r2, #0
 801f2fa:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801f2fe:	6019      	str	r1, [r3, #0]
 801f300:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 801f304:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801f306:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 801f30a:	2300      	movs	r3, #0
 801f30c:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801f30e:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 801f312:	2201      	movs	r2, #1
 801f314:	681b      	ldr	r3, [r3, #0]
 801f316:	fa02 f303 	lsl.w	r3, r2, r3
 801f31a:	f207 4274 	addw	r2, r7, #1140	; 0x474
 801f31e:	3b01      	subs	r3, #1
 801f320:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801f322:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 801f326:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 801f32a:	f207 4374 	addw	r3, r7, #1140	; 0x474
 801f32e:	6812      	ldr	r2, [r2, #0]
 801f330:	681b      	ldr	r3, [r3, #0]
 801f332:	4013      	ands	r3, r2
 801f334:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801f336:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 801f33a:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 801f33e:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 801f342:	6812      	ldr	r2, [r2, #0]
 801f344:	681b      	ldr	r3, [r3, #0]
 801f346:	fa42 f303 	asr.w	r3, r2, r3
 801f34a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801f34c:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 801f350:	f207 4374 	addw	r3, r7, #1140	; 0x474
 801f354:	681b      	ldr	r3, [r3, #0]
 801f356:	105b      	asrs	r3, r3, #1
 801f358:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801f35a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801f35e:	681b      	ldr	r3, [r3, #0]
 801f360:	2b00      	cmp	r3, #0
 801f362:	da06      	bge.n	801f372 <arm_nn_mat_mult_nt_t_s8+0x1980>
        threshold++;
 801f364:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 801f368:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 801f36c:	681b      	ldr	r3, [r3, #0]
 801f36e:	3301      	adds	r3, #1
 801f370:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801f372:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 801f376:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 801f37a:	6812      	ldr	r2, [r2, #0]
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	429a      	cmp	r2, r3
 801f380:	dd06      	ble.n	801f390 <arm_nn_mat_mult_nt_t_s8+0x199e>
        result++;
 801f382:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 801f386:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801f38a:	681b      	ldr	r3, [r3, #0]
 801f38c:	3301      	adds	r3, #1
 801f38e:	6013      	str	r3, [r2, #0]
    return result;
 801f390:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801f394:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f396:	bf00      	nop
 801f398:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801f39c:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f3a0:	3301      	adds	r3, #1
 801f3a2:	009a      	lsls	r2, r3, #2
 801f3a4:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801f3a8:	4413      	add	r3, r2
 801f3aa:	6818      	ldr	r0, [r3, #0]
 801f3ac:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f3b0:	3301      	adds	r3, #1
 801f3b2:	009a      	lsls	r2, r3, #2
 801f3b4:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801f3b8:	4413      	add	r3, r2
 801f3ba:	6819      	ldr	r1, [r3, #0]
 801f3bc:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 801f3c0:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 801f3c4:	6013      	str	r3, [r2, #0]
 801f3c6:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 801f3ca:	6018      	str	r0, [r3, #0]
 801f3cc:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801f3d0:	6019      	str	r1, [r3, #0]
 801f3d2:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801f3d6:	681b      	ldr	r3, [r3, #0]
 801f3d8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801f3dc:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 801f3e0:	681b      	ldr	r3, [r3, #0]
 801f3e2:	fa03 f202 	lsl.w	r2, r3, r2
 801f3e6:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 801f3ea:	601a      	str	r2, [r3, #0]
 801f3ec:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 801f3f0:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 801f3f4:	681b      	ldr	r3, [r3, #0]
 801f3f6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f3f8:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 801f3fc:	2300      	movs	r3, #0
 801f3fe:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801f400:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801f404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f408:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801f40a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801f40e:	2300      	movs	r3, #0
 801f410:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801f412:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801f416:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f41a:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 801f41e:	681b      	ldr	r3, [r3, #0]
 801f420:	4618      	mov	r0, r3
 801f422:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801f426:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 801f42a:	681b      	ldr	r3, [r3, #0]
 801f42c:	461a      	mov	r2, r3
 801f42e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f432:	fb02 f501 	mul.w	r5, r2, r1
 801f436:	fb00 f403 	mul.w	r4, r0, r3
 801f43a:	442c      	add	r4, r5
 801f43c:	fba0 2302 	umull	r2, r3, r0, r2
 801f440:	18e1      	adds	r1, r4, r3
 801f442:	460b      	mov	r3, r1
 801f444:	eb18 0102 	adds.w	r1, r8, r2
 801f448:	61b9      	str	r1, [r7, #24]
 801f44a:	eb49 0303 	adc.w	r3, r9, r3
 801f44e:	61fb      	str	r3, [r7, #28]
 801f450:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801f454:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801f458:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801f45c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801f460:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f464:	f04f 0000 	mov.w	r0, #0
 801f468:	f04f 0100 	mov.w	r1, #0
 801f46c:	0fd0      	lsrs	r0, r2, #31
 801f46e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801f472:	17d9      	asrs	r1, r3, #31
 801f474:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 801f478:	4603      	mov	r3, r0
 801f47a:	6013      	str	r3, [r2, #0]
    return result;
 801f47c:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 801f480:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f482:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801f486:	681b      	ldr	r3, [r3, #0]
 801f488:	2b00      	cmp	r3, #0
 801f48a:	dc04      	bgt.n	801f496 <arm_nn_mat_mult_nt_t_s8+0x1aa4>
 801f48c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801f490:	681b      	ldr	r3, [r3, #0]
 801f492:	425a      	negs	r2, r3
 801f494:	e000      	b.n	801f498 <arm_nn_mat_mult_nt_t_s8+0x1aa6>
 801f496:	2200      	movs	r2, #0
 801f498:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 801f49c:	6019      	str	r1, [r3, #0]
 801f49e:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 801f4a2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801f4a4:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 801f4a8:	2300      	movs	r3, #0
 801f4aa:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801f4ac:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 801f4b0:	2201      	movs	r2, #1
 801f4b2:	681b      	ldr	r3, [r3, #0]
 801f4b4:	fa02 f303 	lsl.w	r3, r2, r3
 801f4b8:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 801f4bc:	3b01      	subs	r3, #1
 801f4be:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801f4c0:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 801f4c4:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 801f4c8:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 801f4cc:	6812      	ldr	r2, [r2, #0]
 801f4ce:	681b      	ldr	r3, [r3, #0]
 801f4d0:	4013      	ands	r3, r2
 801f4d2:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801f4d4:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 801f4d8:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 801f4dc:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 801f4e0:	6812      	ldr	r2, [r2, #0]
 801f4e2:	681b      	ldr	r3, [r3, #0]
 801f4e4:	fa42 f303 	asr.w	r3, r2, r3
 801f4e8:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801f4ea:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 801f4ee:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 801f4f2:	681b      	ldr	r3, [r3, #0]
 801f4f4:	105b      	asrs	r3, r3, #1
 801f4f6:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801f4f8:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 801f4fc:	681b      	ldr	r3, [r3, #0]
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	da06      	bge.n	801f510 <arm_nn_mat_mult_nt_t_s8+0x1b1e>
        threshold++;
 801f502:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 801f506:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 801f50a:	681b      	ldr	r3, [r3, #0]
 801f50c:	3301      	adds	r3, #1
 801f50e:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801f510:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 801f514:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 801f518:	6812      	ldr	r2, [r2, #0]
 801f51a:	681b      	ldr	r3, [r3, #0]
 801f51c:	429a      	cmp	r2, r3
 801f51e:	dd06      	ble.n	801f52e <arm_nn_mat_mult_nt_t_s8+0x1b3c>
        result++;
 801f520:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 801f524:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 801f528:	681b      	ldr	r3, [r3, #0]
 801f52a:	3301      	adds	r3, #1
 801f52c:	6013      	str	r3, [r2, #0]
    return result;
 801f52e:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 801f532:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f534:	bf00      	nop
 801f536:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801f53a:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f53e:	009a      	lsls	r2, r3, #2
 801f540:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801f544:	4413      	add	r3, r2
 801f546:	6818      	ldr	r0, [r3, #0]
 801f548:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f54c:	009a      	lsls	r2, r3, #2
 801f54e:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801f552:	4413      	add	r3, r2
 801f554:	6819      	ldr	r1, [r3, #0]
 801f556:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 801f55a:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801f55e:	6013      	str	r3, [r2, #0]
 801f560:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 801f564:	6018      	str	r0, [r3, #0]
 801f566:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801f56a:	6019      	str	r1, [r3, #0]
 801f56c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801f570:	681b      	ldr	r3, [r3, #0]
 801f572:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801f576:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 801f57a:	681b      	ldr	r3, [r3, #0]
 801f57c:	fa03 f202 	lsl.w	r2, r3, r2
 801f580:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 801f584:	601a      	str	r2, [r3, #0]
 801f586:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 801f58a:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 801f58e:	681b      	ldr	r3, [r3, #0]
 801f590:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f592:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 801f596:	2300      	movs	r3, #0
 801f598:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801f59a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801f59e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f5a2:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801f5a4:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801f5a8:	2300      	movs	r3, #0
 801f5aa:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801f5ac:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f5b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f5b4:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 801f5b8:	681b      	ldr	r3, [r3, #0]
 801f5ba:	4618      	mov	r0, r3
 801f5bc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801f5c0:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 801f5c4:	681b      	ldr	r3, [r3, #0]
 801f5c6:	461a      	mov	r2, r3
 801f5c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f5cc:	fb02 f501 	mul.w	r5, r2, r1
 801f5d0:	fb00 f403 	mul.w	r4, r0, r3
 801f5d4:	442c      	add	r4, r5
 801f5d6:	fba0 2302 	umull	r2, r3, r0, r2
 801f5da:	18e1      	adds	r1, r4, r3
 801f5dc:	460b      	mov	r3, r1
 801f5de:	eb18 0102 	adds.w	r1, r8, r2
 801f5e2:	6239      	str	r1, [r7, #32]
 801f5e4:	eb49 0303 	adc.w	r3, r9, r3
 801f5e8:	627b      	str	r3, [r7, #36]	; 0x24
 801f5ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f5ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801f5f2:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801f5f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5fe:	f04f 0000 	mov.w	r0, #0
 801f602:	f04f 0100 	mov.w	r1, #0
 801f606:	0fd0      	lsrs	r0, r2, #31
 801f608:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801f60c:	17d9      	asrs	r1, r3, #31
 801f60e:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 801f612:	4603      	mov	r3, r0
 801f614:	6013      	str	r3, [r2, #0]
    return result;
 801f616:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 801f61a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f61c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801f620:	681b      	ldr	r3, [r3, #0]
 801f622:	2b00      	cmp	r3, #0
 801f624:	dc04      	bgt.n	801f630 <arm_nn_mat_mult_nt_t_s8+0x1c3e>
 801f626:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801f62a:	681b      	ldr	r3, [r3, #0]
 801f62c:	425a      	negs	r2, r3
 801f62e:	e000      	b.n	801f632 <arm_nn_mat_mult_nt_t_s8+0x1c40>
 801f630:	2200      	movs	r2, #0
 801f632:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 801f636:	6019      	str	r1, [r3, #0]
 801f638:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 801f63c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801f63e:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 801f642:	2300      	movs	r3, #0
 801f644:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801f646:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 801f64a:	2201      	movs	r2, #1
 801f64c:	681b      	ldr	r3, [r3, #0]
 801f64e:	fa02 f303 	lsl.w	r3, r2, r3
 801f652:	f207 42d4 	addw	r2, r7, #1236	; 0x4d4
 801f656:	3b01      	subs	r3, #1
 801f658:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801f65a:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 801f65e:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 801f662:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 801f666:	6812      	ldr	r2, [r2, #0]
 801f668:	681b      	ldr	r3, [r3, #0]
 801f66a:	4013      	ands	r3, r2
 801f66c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801f66e:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 801f672:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 801f676:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 801f67a:	6812      	ldr	r2, [r2, #0]
 801f67c:	681b      	ldr	r3, [r3, #0]
 801f67e:	fa42 f303 	asr.w	r3, r2, r3
 801f682:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801f684:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 801f688:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 801f68c:	681b      	ldr	r3, [r3, #0]
 801f68e:	105b      	asrs	r3, r3, #1
 801f690:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801f692:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801f696:	681b      	ldr	r3, [r3, #0]
 801f698:	2b00      	cmp	r3, #0
 801f69a:	da06      	bge.n	801f6aa <arm_nn_mat_mult_nt_t_s8+0x1cb8>
        threshold++;
 801f69c:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 801f6a0:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 801f6a4:	681b      	ldr	r3, [r3, #0]
 801f6a6:	3301      	adds	r3, #1
 801f6a8:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801f6aa:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 801f6ae:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 801f6b2:	6812      	ldr	r2, [r2, #0]
 801f6b4:	681b      	ldr	r3, [r3, #0]
 801f6b6:	429a      	cmp	r2, r3
 801f6b8:	dd06      	ble.n	801f6c8 <arm_nn_mat_mult_nt_t_s8+0x1cd6>
        result++;
 801f6ba:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 801f6be:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801f6c2:	681b      	ldr	r3, [r3, #0]
 801f6c4:	3301      	adds	r3, #1
 801f6c6:	6013      	str	r3, [r2, #0]
    return result;
 801f6c8:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801f6cc:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f6ce:	bf00      	nop
 801f6d0:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801f6d4:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f6d8:	3301      	adds	r3, #1
 801f6da:	009a      	lsls	r2, r3, #2
 801f6dc:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801f6e0:	4413      	add	r3, r2
 801f6e2:	6818      	ldr	r0, [r3, #0]
 801f6e4:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f6e8:	3301      	adds	r3, #1
 801f6ea:	009a      	lsls	r2, r3, #2
 801f6ec:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801f6f0:	4413      	add	r3, r2
 801f6f2:	6819      	ldr	r1, [r3, #0]
 801f6f4:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 801f6f8:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801f6fc:	6013      	str	r3, [r2, #0]
 801f6fe:	f207 5324 	addw	r3, r7, #1316	; 0x524
 801f702:	6018      	str	r0, [r3, #0]
 801f704:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f708:	6019      	str	r1, [r3, #0]
 801f70a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f70e:	681b      	ldr	r3, [r3, #0]
 801f710:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801f714:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801f718:	681b      	ldr	r3, [r3, #0]
 801f71a:	fa03 f202 	lsl.w	r2, r3, r2
 801f71e:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 801f722:	601a      	str	r2, [r3, #0]
 801f724:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 801f728:	f207 5324 	addw	r3, r7, #1316	; 0x524
 801f72c:	681b      	ldr	r3, [r3, #0]
 801f72e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f730:	f207 5214 	addw	r2, r7, #1300	; 0x514
 801f734:	2300      	movs	r3, #0
 801f736:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801f738:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801f73c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f740:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801f742:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801f746:	2300      	movs	r3, #0
 801f748:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801f74a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f74e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f752:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 801f756:	681b      	ldr	r3, [r3, #0]
 801f758:	4618      	mov	r0, r3
 801f75a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801f75e:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 801f762:	681b      	ldr	r3, [r3, #0]
 801f764:	461a      	mov	r2, r3
 801f766:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f76a:	fb02 f501 	mul.w	r5, r2, r1
 801f76e:	fb00 f403 	mul.w	r4, r0, r3
 801f772:	442c      	add	r4, r5
 801f774:	fba0 2302 	umull	r2, r3, r0, r2
 801f778:	18e1      	adds	r1, r4, r3
 801f77a:	460b      	mov	r3, r1
 801f77c:	eb18 0102 	adds.w	r1, r8, r2
 801f780:	62b9      	str	r1, [r7, #40]	; 0x28
 801f782:	eb49 0303 	adc.w	r3, r9, r3
 801f786:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f788:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f78c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801f790:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801f794:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f79c:	f04f 0000 	mov.w	r0, #0
 801f7a0:	f04f 0100 	mov.w	r1, #0
 801f7a4:	0fd0      	lsrs	r0, r2, #31
 801f7a6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801f7aa:	17d9      	asrs	r1, r3, #31
 801f7ac:	f207 5214 	addw	r2, r7, #1300	; 0x514
 801f7b0:	4603      	mov	r3, r0
 801f7b2:	6013      	str	r3, [r2, #0]
    return result;
 801f7b4:	f207 5314 	addw	r3, r7, #1300	; 0x514
 801f7b8:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f7ba:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f7be:	681b      	ldr	r3, [r3, #0]
 801f7c0:	2b00      	cmp	r3, #0
 801f7c2:	dc04      	bgt.n	801f7ce <arm_nn_mat_mult_nt_t_s8+0x1ddc>
 801f7c4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f7c8:	681b      	ldr	r3, [r3, #0]
 801f7ca:	425a      	negs	r2, r3
 801f7cc:	e000      	b.n	801f7d0 <arm_nn_mat_mult_nt_t_s8+0x1dde>
 801f7ce:	2200      	movs	r2, #0
 801f7d0:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 801f7d4:	6019      	str	r1, [r3, #0]
 801f7d6:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 801f7da:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801f7dc:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 801f7e0:	2300      	movs	r3, #0
 801f7e2:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801f7e4:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 801f7e8:	2201      	movs	r2, #1
 801f7ea:	681b      	ldr	r3, [r3, #0]
 801f7ec:	fa02 f303 	lsl.w	r3, r2, r3
 801f7f0:	f207 5204 	addw	r2, r7, #1284	; 0x504
 801f7f4:	3b01      	subs	r3, #1
 801f7f6:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801f7f8:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 801f7fc:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 801f800:	f207 5304 	addw	r3, r7, #1284	; 0x504
 801f804:	6812      	ldr	r2, [r2, #0]
 801f806:	681b      	ldr	r3, [r3, #0]
 801f808:	4013      	ands	r3, r2
 801f80a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801f80c:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 801f810:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 801f814:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 801f818:	6812      	ldr	r2, [r2, #0]
 801f81a:	681b      	ldr	r3, [r3, #0]
 801f81c:	fa42 f303 	asr.w	r3, r2, r3
 801f820:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801f822:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 801f826:	f207 5304 	addw	r3, r7, #1284	; 0x504
 801f82a:	681b      	ldr	r3, [r3, #0]
 801f82c:	105b      	asrs	r3, r3, #1
 801f82e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801f830:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 801f834:	681b      	ldr	r3, [r3, #0]
 801f836:	2b00      	cmp	r3, #0
 801f838:	da06      	bge.n	801f848 <arm_nn_mat_mult_nt_t_s8+0x1e56>
        threshold++;
 801f83a:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 801f83e:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 801f842:	681b      	ldr	r3, [r3, #0]
 801f844:	3301      	adds	r3, #1
 801f846:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801f848:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 801f84c:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 801f850:	6812      	ldr	r2, [r2, #0]
 801f852:	681b      	ldr	r3, [r3, #0]
 801f854:	429a      	cmp	r2, r3
 801f856:	dd06      	ble.n	801f866 <arm_nn_mat_mult_nt_t_s8+0x1e74>
        result++;
 801f858:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 801f85c:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 801f860:	681b      	ldr	r3, [r3, #0]
 801f862:	3301      	adds	r3, #1
 801f864:	6013      	str	r3, [r2, #0]
    return result;
 801f866:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 801f86a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f86c:	bf00      	nop
 801f86e:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            // Add offset
            res00 += dst_offset;
 801f872:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 801f876:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801f87a:	4413      	add	r3, r2
 801f87c:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 += dst_offset;
 801f880:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 801f884:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801f888:	4413      	add	r3, r2
 801f88a:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 += dst_offset;
 801f88e:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 801f892:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801f896:	4413      	add	r3, r2
 801f898:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 += dst_offset;
 801f89c:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 801f8a0:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801f8a4:	4413      	add	r3, r2
 801f8a6:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801f8aa:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 801f8ae:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801f8b2:	4293      	cmp	r3, r2
 801f8b4:	bfb8      	it	lt
 801f8b6:	4613      	movlt	r3, r2
 801f8b8:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res00 = MIN(res00, activation_max);
 801f8bc:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 801f8c0:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801f8c4:	4293      	cmp	r3, r2
 801f8c6:	bfa8      	it	ge
 801f8c8:	4613      	movge	r3, r2
 801f8ca:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 = MAX(res01, activation_min);
 801f8ce:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 801f8d2:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801f8d6:	4293      	cmp	r3, r2
 801f8d8:	bfb8      	it	lt
 801f8da:	4613      	movlt	r3, r2
 801f8dc:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res01 = MIN(res01, activation_max);
 801f8e0:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 801f8e4:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801f8e8:	4293      	cmp	r3, r2
 801f8ea:	bfa8      	it	ge
 801f8ec:	4613      	movge	r3, r2
 801f8ee:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 = MAX(res10, activation_min);
 801f8f2:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 801f8f6:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801f8fa:	4293      	cmp	r3, r2
 801f8fc:	bfb8      	it	lt
 801f8fe:	4613      	movlt	r3, r2
 801f900:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res10 = MIN(res10, activation_max);
 801f904:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 801f908:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801f90c:	4293      	cmp	r3, r2
 801f90e:	bfa8      	it	ge
 801f910:	4613      	movge	r3, r2
 801f912:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 = MAX(res11, activation_min);
 801f916:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 801f91a:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801f91e:	4293      	cmp	r3, r2
 801f920:	bfb8      	it	lt
 801f922:	4613      	movlt	r3, r2
 801f924:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
            res11 = MIN(res11, activation_max);
 801f928:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 801f92c:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801f930:	4293      	cmp	r3, r2
 801f932:	bfa8      	it	ge
 801f934:	4613      	movge	r3, r2
 801f936:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            dst_ptr[0] = (q7_t)res00;
 801f93a:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801f93e:	b25b      	sxtb	r3, r3
 801f940:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 801f944:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 801f946:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801f94a:	1c5a      	adds	r2, r3, #1
 801f94c:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 801f950:	b25b      	sxtb	r3, r3
 801f952:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 801f954:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801f958:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801f95c:	4413      	add	r3, r2
 801f95e:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38
            dst_ptr[0] = (q7_t)res10;
 801f962:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801f966:	b25b      	sxtb	r3, r3
 801f968:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 801f96c:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res11;
 801f96e:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801f972:	1c5a      	adds	r2, r3, #1
 801f974:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801f978:	b25b      	sxtb	r3, r3
 801f97a:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 801f97c:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801f980:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801f984:	4413      	add	r3, r2
 801f986:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38

            lhs_ptr += rhs_cols;
 801f98a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f98e:	681a      	ldr	r2, [r3, #0]
 801f990:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f994:	441a      	add	r2, r3
 801f996:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f99a:	601a      	str	r2, [r3, #0]

            lhs_rows_idx--;
 801f99c:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 801f9a0:	3b01      	subs	r3, #1
 801f9a2:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
        while (lhs_rows_idx)
 801f9a6:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 801f9aa:	2b00      	cmp	r3, #0
 801f9ac:	f47e a8b3 	bne.w	801db16 <arm_nn_mat_mult_nt_t_s8+0x124>
        }

        // Left-over rows
        if (lhs_rows % 2)
 801f9b0:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 801f9b4:	f003 0301 	and.w	r3, r3, #1
 801f9b8:	2b00      	cmp	r3, #0
 801f9ba:	f001 8195 	beq.w	8020ce8 <arm_nn_mat_mult_nt_t_s8+0x32f6>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801f9be:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 801f9c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f9c6:	681b      	ldr	r3, [r3, #0]
 801f9c8:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 801f9ca:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801f9ce:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            q31_t res01 = lhs_offset_contribution1;
 801f9d2:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801f9d6:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            int32_t rhs_cols_idx = 0;
 801f9da:	2300      	movs	r3, #0
 801f9dc:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08

            q31_t val0, val1, val2, val3, val4, val5;
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801f9e0:	f000 bf59 	b.w	8020896 <arm_nn_mat_mult_nt_t_s8+0x2ea4>
 801f9e4:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 801f9e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801f9ec:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801f9ee:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801f9f2:	681b      	ldr	r3, [r3, #0]
 801f9f4:	681b      	ldr	r3, [r3, #0]
 801f9f6:	681b      	ldr	r3, [r3, #0]
 801f9f8:	461a      	mov	r2, r3
 801f9fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801f9fe:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fa00:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801fa04:	681b      	ldr	r3, [r3, #0]
 801fa06:	681b      	ldr	r3, [r3, #0]
 801fa08:	1d1a      	adds	r2, r3, #4
 801fa0a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801fa0e:	681b      	ldr	r3, [r3, #0]
 801fa10:	601a      	str	r2, [r3, #0]
    return (val);
 801fa12:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801fa16:	681b      	ldr	r3, [r3, #0]
            {
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801fa18:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801fa1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801fa20:	681a      	ldr	r2, [r3, #0]
 801fa22:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801fa26:	441a      	add	r2, r3
 801fa28:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801fa2c:	601a      	str	r2, [r3, #0]
 801fa2e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801fa32:	681b      	ldr	r3, [r3, #0]
 801fa34:	681b      	ldr	r3, [r3, #0]
 801fa36:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801fa38:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801fa3c:	601a      	str	r2, [r3, #0]
    return (val);
 801fa3e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801fa42:	681b      	ldr	r3, [r3, #0]
 801fa44:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 801fa48:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 801fa4c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fa50:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801fa52:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801fa56:	681b      	ldr	r3, [r3, #0]
 801fa58:	681b      	ldr	r3, [r3, #0]
 801fa5a:	681b      	ldr	r3, [r3, #0]
 801fa5c:	461a      	mov	r2, r3
 801fa5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801fa62:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fa64:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801fa68:	681b      	ldr	r3, [r3, #0]
 801fa6a:	681b      	ldr	r3, [r3, #0]
 801fa6c:	1d1a      	adds	r2, r3, #4
 801fa6e:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801fa72:	681b      	ldr	r3, [r3, #0]
 801fa74:	601a      	str	r2, [r3, #0]
    return (val);
 801fa76:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801fa7a:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801fa7c:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 801fa80:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801fa84:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801fa88:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fa8a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801fa8e:	681b      	ldr	r3, [r3, #0]
 801fa90:	fa2f f283 	sxtb16	r2, r3
 801fa94:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801fa98:	601a      	str	r2, [r3, #0]
  return(result);
 801fa9a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801fa9e:	681b      	ldr	r3, [r3, #0]
 801faa0:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 801faa4:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801faa8:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801faac:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801faae:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801fab2:	681b      	ldr	r3, [r3, #0]
 801fab4:	fa2f f283 	sxtb16	r2, r3
 801fab8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801fabc:	601a      	str	r2, [r3, #0]
  return(result);
 801fabe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801fac2:	681b      	ldr	r3, [r3, #0]
 801fac4:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 801fac8:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801facc:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801fad0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fad2:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801fad6:	681b      	ldr	r3, [r3, #0]
 801fad8:	fa2f f283 	sxtb16	r2, r3
 801fadc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801fae0:	601a      	str	r2, [r3, #0]
  return(result);
 801fae2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801fae6:	681b      	ldr	r3, [r3, #0]
 801fae8:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 801faec:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801faf0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801faf4:	601a      	str	r2, [r3, #0]
 801faf6:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 801fafa:	2308      	movs	r3, #8
 801fafc:	6013      	str	r3, [r2, #0]
 801fafe:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801fb02:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801fb06:	681b      	ldr	r3, [r3, #0]
 801fb08:	6013      	str	r3, [r2, #0]
 801fb0a:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 801fb0e:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801fb12:	681b      	ldr	r3, [r3, #0]
 801fb14:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801fb16:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 801fb1a:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801fb1e:	681b      	ldr	r3, [r3, #0]
 801fb20:	f003 031f 	and.w	r3, r3, #31
 801fb24:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801fb26:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801fb2a:	681b      	ldr	r3, [r3, #0]
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	d103      	bne.n	801fb38 <arm_nn_mat_mult_nt_t_s8+0x2146>
    return op1;
 801fb30:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801fb34:	681a      	ldr	r2, [r3, #0]
 801fb36:	e006      	b.n	801fb46 <arm_nn_mat_mult_nt_t_s8+0x2154>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fb38:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801fb3c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801fb40:	6812      	ldr	r2, [r2, #0]
 801fb42:	681b      	ldr	r3, [r3, #0]
 801fb44:	41da      	rors	r2, r3
 801fb46:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801fb4a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fb4c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801fb50:	681b      	ldr	r3, [r3, #0]
 801fb52:	fa2f f283 	sxtb16	r2, r3
 801fb56:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801fb5a:	601a      	str	r2, [r3, #0]
  return(result);
 801fb5c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801fb60:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801fb62:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801fb66:	601a      	str	r2, [r3, #0]
  return result;
 801fb68:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801fb6c:	681b      	ldr	r3, [r3, #0]
 801fb6e:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 801fb72:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801fb76:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801fb7a:	601a      	str	r2, [r3, #0]
 801fb7c:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 801fb80:	2308      	movs	r3, #8
 801fb82:	6013      	str	r3, [r2, #0]
 801fb84:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801fb88:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801fb8c:	681b      	ldr	r3, [r3, #0]
 801fb8e:	6013      	str	r3, [r2, #0]
 801fb90:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 801fb94:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801fb98:	681b      	ldr	r3, [r3, #0]
 801fb9a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801fb9c:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 801fba0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801fba4:	681b      	ldr	r3, [r3, #0]
 801fba6:	f003 031f 	and.w	r3, r3, #31
 801fbaa:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801fbac:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801fbb0:	681b      	ldr	r3, [r3, #0]
 801fbb2:	2b00      	cmp	r3, #0
 801fbb4:	d103      	bne.n	801fbbe <arm_nn_mat_mult_nt_t_s8+0x21cc>
    return op1;
 801fbb6:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801fbba:	681a      	ldr	r2, [r3, #0]
 801fbbc:	e006      	b.n	801fbcc <arm_nn_mat_mult_nt_t_s8+0x21da>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fbbe:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801fbc2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801fbc6:	6812      	ldr	r2, [r2, #0]
 801fbc8:	681b      	ldr	r3, [r3, #0]
 801fbca:	41da      	rors	r2, r3
 801fbcc:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801fbd0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fbd2:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801fbd6:	681b      	ldr	r3, [r3, #0]
 801fbd8:	fa2f f283 	sxtb16	r2, r3
 801fbdc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801fbe0:	601a      	str	r2, [r3, #0]
  return(result);
 801fbe2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801fbe6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801fbe8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801fbec:	601a      	str	r2, [r3, #0]
  return result;
 801fbee:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801fbf2:	681b      	ldr	r3, [r3, #0]
 801fbf4:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 801fbf8:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801fbfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801fc00:	601a      	str	r2, [r3, #0]
 801fc02:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 801fc06:	2308      	movs	r3, #8
 801fc08:	6013      	str	r3, [r2, #0]
 801fc0a:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801fc0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	6013      	str	r3, [r2, #0]
 801fc16:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 801fc1a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801fc1e:	681b      	ldr	r3, [r3, #0]
 801fc20:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801fc22:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 801fc26:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801fc2a:	681b      	ldr	r3, [r3, #0]
 801fc2c:	f003 031f 	and.w	r3, r3, #31
 801fc30:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801fc32:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801fc36:	681b      	ldr	r3, [r3, #0]
 801fc38:	2b00      	cmp	r3, #0
 801fc3a:	d103      	bne.n	801fc44 <arm_nn_mat_mult_nt_t_s8+0x2252>
    return op1;
 801fc3c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801fc40:	681a      	ldr	r2, [r3, #0]
 801fc42:	e006      	b.n	801fc52 <arm_nn_mat_mult_nt_t_s8+0x2260>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fc44:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801fc48:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801fc4c:	6812      	ldr	r2, [r2, #0]
 801fc4e:	681b      	ldr	r3, [r3, #0]
 801fc50:	41da      	rors	r2, r3
 801fc52:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801fc56:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fc58:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801fc5c:	681b      	ldr	r3, [r3, #0]
 801fc5e:	fa2f f283 	sxtb16	r2, r3
 801fc62:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801fc66:	601a      	str	r2, [r3, #0]
  return(result);
 801fc68:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801fc6c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801fc6e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801fc72:	601a      	str	r2, [r3, #0]
  return result;
 801fc74:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801fc78:	681b      	ldr	r3, [r3, #0]
 801fc7a:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801fc7e:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 801fc82:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 801fc86:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 801fc8a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801fc8e:	601a      	str	r2, [r3, #0]
 801fc90:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801fc94:	6019      	str	r1, [r3, #0]
 801fc96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801fc9a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fc9c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801fca0:	6819      	ldr	r1, [r3, #0]
 801fca2:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801fca6:	681a      	ldr	r2, [r3, #0]
 801fca8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801fcac:	681b      	ldr	r3, [r3, #0]
 801fcae:	fb21 3202 	smlad	r2, r1, r2, r3
 801fcb2:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801fcb6:	601a      	str	r2, [r3, #0]
  return(result);
 801fcb8:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801fcbc:	681b      	ldr	r3, [r3, #0]
 801fcbe:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 801fcc2:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801fcc6:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 801fcca:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 801fcce:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801fcd2:	601a      	str	r2, [r3, #0]
 801fcd4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801fcd8:	6019      	str	r1, [r3, #0]
 801fcda:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801fcde:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fce0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801fce4:	6819      	ldr	r1, [r3, #0]
 801fce6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801fcea:	681a      	ldr	r2, [r3, #0]
 801fcec:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801fcf0:	681b      	ldr	r3, [r3, #0]
 801fcf2:	fb21 3202 	smlad	r2, r1, r2, r3
 801fcf6:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801fcfa:	601a      	str	r2, [r3, #0]
  return(result);
 801fcfc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801fd00:	681b      	ldr	r3, [r3, #0]
 801fd02:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 801fd06:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 801fd0a:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 801fd0e:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 801fd12:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801fd16:	601a      	str	r2, [r3, #0]
 801fd18:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801fd1c:	6019      	str	r1, [r3, #0]
 801fd1e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801fd22:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fd24:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801fd28:	6819      	ldr	r1, [r3, #0]
 801fd2a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801fd2e:	681a      	ldr	r2, [r3, #0]
 801fd30:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801fd34:	681b      	ldr	r3, [r3, #0]
 801fd36:	fb21 3202 	smlad	r2, r1, r2, r3
 801fd3a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801fd3e:	601a      	str	r2, [r3, #0]
  return(result);
 801fd40:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801fd44:	681b      	ldr	r3, [r3, #0]
 801fd46:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 801fd4a:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801fd4e:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 801fd52:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 801fd56:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801fd5a:	601a      	str	r2, [r3, #0]
 801fd5c:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801fd60:	6019      	str	r1, [r3, #0]
 801fd62:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801fd66:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fd68:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801fd6c:	6819      	ldr	r1, [r3, #0]
 801fd6e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801fd72:	681a      	ldr	r2, [r3, #0]
 801fd74:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801fd78:	681b      	ldr	r3, [r3, #0]
 801fd7a:	fb21 3202 	smlad	r2, r1, r2, r3
 801fd7e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 801fd82:	601a      	str	r2, [r3, #0]
  return(result);
 801fd84:	f507 730d 	add.w	r3, r7, #564	; 0x234
 801fd88:	681b      	ldr	r3, [r3, #0]
 801fd8a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 801fd8e:	f507 7211 	add.w	r2, r7, #580	; 0x244
 801fd92:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801fd96:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801fd98:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801fd9c:	681b      	ldr	r3, [r3, #0]
 801fd9e:	681b      	ldr	r3, [r3, #0]
 801fda0:	681b      	ldr	r3, [r3, #0]
 801fda2:	461a      	mov	r2, r3
 801fda4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801fda8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fdaa:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801fdae:	681b      	ldr	r3, [r3, #0]
 801fdb0:	681b      	ldr	r3, [r3, #0]
 801fdb2:	1d1a      	adds	r2, r3, #4
 801fdb4:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801fdb8:	681b      	ldr	r3, [r3, #0]
 801fdba:	601a      	str	r2, [r3, #0]
    return (val);
 801fdbc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801fdc0:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801fdc2:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801fdc6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801fdca:	681a      	ldr	r2, [r3, #0]
 801fdcc:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801fdd0:	441a      	add	r2, r3
 801fdd2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801fdd6:	601a      	str	r2, [r3, #0]
 801fdd8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801fddc:	681b      	ldr	r3, [r3, #0]
 801fdde:	681b      	ldr	r3, [r3, #0]
 801fde0:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801fde2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801fde6:	601a      	str	r2, [r3, #0]
    return (val);
 801fde8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801fdec:	681b      	ldr	r3, [r3, #0]
 801fdee:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 801fdf2:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 801fdf6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fdfa:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801fdfc:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 801fe00:	681b      	ldr	r3, [r3, #0]
 801fe02:	681b      	ldr	r3, [r3, #0]
 801fe04:	681b      	ldr	r3, [r3, #0]
 801fe06:	461a      	mov	r2, r3
 801fe08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801fe0c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fe0e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 801fe12:	681b      	ldr	r3, [r3, #0]
 801fe14:	681b      	ldr	r3, [r3, #0]
 801fe16:	1d1a      	adds	r2, r3, #4
 801fe18:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 801fe1c:	681b      	ldr	r3, [r3, #0]
 801fe1e:	601a      	str	r2, [r3, #0]
    return (val);
 801fe20:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801fe24:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801fe26:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 801fe2a:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801fe2e:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801fe32:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fe34:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801fe38:	681b      	ldr	r3, [r3, #0]
 801fe3a:	fa2f f283 	sxtb16	r2, r3
 801fe3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801fe42:	601a      	str	r2, [r3, #0]
  return(result);
 801fe44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 801fe4e:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801fe52:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801fe56:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fe58:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801fe5c:	681b      	ldr	r3, [r3, #0]
 801fe5e:	fa2f f283 	sxtb16	r2, r3
 801fe62:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801fe66:	601a      	str	r2, [r3, #0]
  return(result);
 801fe68:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801fe6c:	681b      	ldr	r3, [r3, #0]
 801fe6e:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 801fe72:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801fe76:	f507 7319 	add.w	r3, r7, #612	; 0x264
 801fe7a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fe7c:	f507 7319 	add.w	r3, r7, #612	; 0x264
 801fe80:	681b      	ldr	r3, [r3, #0]
 801fe82:	fa2f f283 	sxtb16	r2, r3
 801fe86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801fe8a:	601a      	str	r2, [r3, #0]
  return(result);
 801fe8c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801fe90:	681b      	ldr	r3, [r3, #0]
 801fe92:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 801fe96:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801fe9a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801fe9e:	601a      	str	r2, [r3, #0]
 801fea0:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 801fea4:	2308      	movs	r3, #8
 801fea6:	6013      	str	r3, [r2, #0]
 801fea8:	f507 721e 	add.w	r2, r7, #632	; 0x278
 801feac:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801feb0:	681b      	ldr	r3, [r3, #0]
 801feb2:	6013      	str	r3, [r2, #0]
 801feb4:	f507 721d 	add.w	r2, r7, #628	; 0x274
 801feb8:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 801febc:	681b      	ldr	r3, [r3, #0]
 801febe:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801fec0:	f507 721d 	add.w	r2, r7, #628	; 0x274
 801fec4:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801fec8:	681b      	ldr	r3, [r3, #0]
 801feca:	f003 031f 	and.w	r3, r3, #31
 801fece:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801fed0:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801fed4:	681b      	ldr	r3, [r3, #0]
 801fed6:	2b00      	cmp	r3, #0
 801fed8:	d103      	bne.n	801fee2 <arm_nn_mat_mult_nt_t_s8+0x24f0>
    return op1;
 801feda:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801fede:	681a      	ldr	r2, [r3, #0]
 801fee0:	e006      	b.n	801fef0 <arm_nn_mat_mult_nt_t_s8+0x24fe>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fee2:	f507 721e 	add.w	r2, r7, #632	; 0x278
 801fee6:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801feea:	6812      	ldr	r2, [r2, #0]
 801feec:	681b      	ldr	r3, [r3, #0]
 801feee:	41da      	rors	r2, r3
 801fef0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801fef4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fef6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801fefa:	681b      	ldr	r3, [r3, #0]
 801fefc:	fa2f f283 	sxtb16	r2, r3
 801ff00:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801ff04:	601a      	str	r2, [r3, #0]
  return(result);
 801ff06:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801ff0a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ff0c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801ff10:	601a      	str	r2, [r3, #0]
  return result;
 801ff12:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801ff16:	681b      	ldr	r3, [r3, #0]
 801ff18:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 801ff1c:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801ff20:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 801ff24:	601a      	str	r2, [r3, #0]
 801ff26:	f507 7226 	add.w	r2, r7, #664	; 0x298
 801ff2a:	2308      	movs	r3, #8
 801ff2c:	6013      	str	r3, [r2, #0]
 801ff2e:	f507 7225 	add.w	r2, r7, #660	; 0x294
 801ff32:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 801ff36:	681b      	ldr	r3, [r3, #0]
 801ff38:	6013      	str	r3, [r2, #0]
 801ff3a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 801ff3e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 801ff42:	681b      	ldr	r3, [r3, #0]
 801ff44:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ff46:	f507 7224 	add.w	r2, r7, #656	; 0x290
 801ff4a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801ff4e:	681b      	ldr	r3, [r3, #0]
 801ff50:	f003 031f 	and.w	r3, r3, #31
 801ff54:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ff56:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801ff5a:	681b      	ldr	r3, [r3, #0]
 801ff5c:	2b00      	cmp	r3, #0
 801ff5e:	d103      	bne.n	801ff68 <arm_nn_mat_mult_nt_t_s8+0x2576>
    return op1;
 801ff60:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801ff64:	681a      	ldr	r2, [r3, #0]
 801ff66:	e006      	b.n	801ff76 <arm_nn_mat_mult_nt_t_s8+0x2584>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ff68:	f507 7225 	add.w	r2, r7, #660	; 0x294
 801ff6c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801ff70:	6812      	ldr	r2, [r2, #0]
 801ff72:	681b      	ldr	r3, [r3, #0]
 801ff74:	41da      	rors	r2, r3
 801ff76:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 801ff7a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ff7c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 801ff80:	681b      	ldr	r3, [r3, #0]
 801ff82:	fa2f f283 	sxtb16	r2, r3
 801ff86:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801ff8a:	601a      	str	r2, [r3, #0]
  return(result);
 801ff8c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801ff90:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ff92:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801ff96:	601a      	str	r2, [r3, #0]
  return result;
 801ff98:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801ff9c:	681b      	ldr	r3, [r3, #0]
 801ff9e:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 801ffa2:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801ffa6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801ffaa:	601a      	str	r2, [r3, #0]
 801ffac:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 801ffb0:	2308      	movs	r3, #8
 801ffb2:	6013      	str	r3, [r2, #0]
 801ffb4:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 801ffb8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801ffbc:	681b      	ldr	r3, [r3, #0]
 801ffbe:	6013      	str	r3, [r2, #0]
 801ffc0:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 801ffc4:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 801ffc8:	681b      	ldr	r3, [r3, #0]
 801ffca:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ffcc:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 801ffd0:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801ffd4:	681b      	ldr	r3, [r3, #0]
 801ffd6:	f003 031f 	and.w	r3, r3, #31
 801ffda:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ffdc:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801ffe0:	681b      	ldr	r3, [r3, #0]
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	d103      	bne.n	801ffee <arm_nn_mat_mult_nt_t_s8+0x25fc>
    return op1;
 801ffe6:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801ffea:	681a      	ldr	r2, [r3, #0]
 801ffec:	e006      	b.n	801fffc <arm_nn_mat_mult_nt_t_s8+0x260a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ffee:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 801fff2:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801fff6:	6812      	ldr	r2, [r2, #0]
 801fff8:	681b      	ldr	r3, [r3, #0]
 801fffa:	41da      	rors	r2, r3
 801fffc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8020000:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020002:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8020006:	681b      	ldr	r3, [r3, #0]
 8020008:	fa2f f283 	sxtb16	r2, r3
 802000c:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8020010:	601a      	str	r2, [r3, #0]
  return(result);
 8020012:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8020016:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020018:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 802001c:	601a      	str	r2, [r3, #0]
  return result;
 802001e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8020022:	681b      	ldr	r3, [r3, #0]
 8020024:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 8020028:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 802002c:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 8020030:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8020034:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8020038:	601a      	str	r2, [r3, #0]
 802003a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 802003e:	6019      	str	r1, [r3, #0]
 8020040:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8020044:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020046:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 802004a:	6819      	ldr	r1, [r3, #0]
 802004c:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8020050:	681a      	ldr	r2, [r3, #0]
 8020052:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8020056:	681b      	ldr	r3, [r3, #0]
 8020058:	fb21 3202 	smlad	r2, r1, r2, r3
 802005c:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8020060:	601a      	str	r2, [r3, #0]
  return(result);
 8020062:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8020066:	681b      	ldr	r3, [r3, #0]
 8020068:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 802006c:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020070:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 8020074:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8020078:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 802007c:	601a      	str	r2, [r3, #0]
 802007e:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8020082:	6019      	str	r1, [r3, #0]
 8020084:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8020088:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802008a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 802008e:	6819      	ldr	r1, [r3, #0]
 8020090:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8020094:	681a      	ldr	r2, [r3, #0]
 8020096:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 802009a:	681b      	ldr	r3, [r3, #0]
 802009c:	fb21 3202 	smlad	r2, r1, r2, r3
 80200a0:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 80200a4:	601a      	str	r2, [r3, #0]
  return(result);
 80200a6:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 80200aa:	681b      	ldr	r3, [r3, #0]
 80200ac:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 80200b0:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 80200b4:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 80200b8:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 80200bc:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80200c0:	601a      	str	r2, [r3, #0]
 80200c2:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80200c6:	6019      	str	r1, [r3, #0]
 80200c8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80200cc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80200ce:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80200d2:	6819      	ldr	r1, [r3, #0]
 80200d4:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80200d8:	681a      	ldr	r2, [r3, #0]
 80200da:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80200de:	681b      	ldr	r3, [r3, #0]
 80200e0:	fb21 3202 	smlad	r2, r1, r2, r3
 80200e4:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80200e8:	601a      	str	r2, [r3, #0]
  return(result);
 80200ea:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80200ee:	681b      	ldr	r3, [r3, #0]
 80200f0:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 80200f4:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80200f8:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 80200fc:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8020100:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8020104:	601a      	str	r2, [r3, #0]
 8020106:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 802010a:	6019      	str	r1, [r3, #0]
 802010c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8020110:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020112:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8020116:	6819      	ldr	r1, [r3, #0]
 8020118:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 802011c:	681a      	ldr	r2, [r3, #0]
 802011e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8020122:	681b      	ldr	r3, [r3, #0]
 8020124:	fb21 3202 	smlad	r2, r1, r2, r3
 8020128:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 802012c:	601a      	str	r2, [r3, #0]
  return(result);
 802012e:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8020132:	681b      	ldr	r3, [r3, #0]
 8020134:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 8020138:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 802013c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020140:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8020142:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8020146:	681b      	ldr	r3, [r3, #0]
 8020148:	681b      	ldr	r3, [r3, #0]
 802014a:	681b      	ldr	r3, [r3, #0]
 802014c:	461a      	mov	r2, r3
 802014e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8020152:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020154:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8020158:	681b      	ldr	r3, [r3, #0]
 802015a:	681b      	ldr	r3, [r3, #0]
 802015c:	1d1a      	adds	r2, r3, #4
 802015e:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8020162:	681b      	ldr	r3, [r3, #0]
 8020164:	601a      	str	r2, [r3, #0]
    return (val);
 8020166:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802016a:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 802016c:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8020170:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020174:	681a      	ldr	r2, [r3, #0]
 8020176:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 802017a:	441a      	add	r2, r3
 802017c:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8020180:	601a      	str	r2, [r3, #0]
 8020182:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8020186:	681b      	ldr	r3, [r3, #0]
 8020188:	681b      	ldr	r3, [r3, #0]
 802018a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 802018c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020190:	601a      	str	r2, [r3, #0]
    return (val);
 8020192:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020196:	681b      	ldr	r3, [r3, #0]
 8020198:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 802019c:	f507 7241 	add.w	r2, r7, #772	; 0x304
 80201a0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80201a4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80201a6:	f507 7341 	add.w	r3, r7, #772	; 0x304
 80201aa:	681b      	ldr	r3, [r3, #0]
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	681b      	ldr	r3, [r3, #0]
 80201b0:	461a      	mov	r2, r3
 80201b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80201b6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80201b8:	f507 7341 	add.w	r3, r7, #772	; 0x304
 80201bc:	681b      	ldr	r3, [r3, #0]
 80201be:	681b      	ldr	r3, [r3, #0]
 80201c0:	1d1a      	adds	r2, r3, #4
 80201c2:	f507 7341 	add.w	r3, r7, #772	; 0x304
 80201c6:	681b      	ldr	r3, [r3, #0]
 80201c8:	601a      	str	r2, [r3, #0]
    return (val);
 80201ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80201ce:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80201d0:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 80201d4:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 80201d8:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80201dc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80201de:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80201e2:	681b      	ldr	r3, [r3, #0]
 80201e4:	fa2f f283 	sxtb16	r2, r3
 80201e8:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80201ec:	601a      	str	r2, [r3, #0]
  return(result);
 80201ee:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80201f2:	681b      	ldr	r3, [r3, #0]
 80201f4:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 80201f8:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80201fc:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8020200:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020202:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8020206:	681b      	ldr	r3, [r3, #0]
 8020208:	fa2f f283 	sxtb16	r2, r3
 802020c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8020210:	601a      	str	r2, [r3, #0]
  return(result);
 8020212:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8020216:	681b      	ldr	r3, [r3, #0]
 8020218:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 802021c:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8020220:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8020224:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020226:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 802022a:	681b      	ldr	r3, [r3, #0]
 802022c:	fa2f f283 	sxtb16	r2, r3
 8020230:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8020234:	601a      	str	r2, [r3, #0]
  return(result);
 8020236:	f507 7346 	add.w	r3, r7, #792	; 0x318
 802023a:	681b      	ldr	r3, [r3, #0]
 802023c:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 8020240:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 8020244:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8020248:	601a      	str	r2, [r3, #0]
 802024a:	f507 724d 	add.w	r2, r7, #820	; 0x334
 802024e:	2308      	movs	r3, #8
 8020250:	6013      	str	r3, [r2, #0]
 8020252:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8020256:	f507 734e 	add.w	r3, r7, #824	; 0x338
 802025a:	681b      	ldr	r3, [r3, #0]
 802025c:	6013      	str	r3, [r2, #0]
 802025e:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 8020262:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8020266:	681b      	ldr	r3, [r3, #0]
 8020268:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 802026a:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 802026e:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8020272:	681b      	ldr	r3, [r3, #0]
 8020274:	f003 031f 	and.w	r3, r3, #31
 8020278:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 802027a:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 802027e:	681b      	ldr	r3, [r3, #0]
 8020280:	2b00      	cmp	r3, #0
 8020282:	d103      	bne.n	802028c <arm_nn_mat_mult_nt_t_s8+0x289a>
    return op1;
 8020284:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8020288:	681a      	ldr	r2, [r3, #0]
 802028a:	e006      	b.n	802029a <arm_nn_mat_mult_nt_t_s8+0x28a8>
  return (op1 >> op2) | (op1 << (32U - op2));
 802028c:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8020290:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8020294:	6812      	ldr	r2, [r2, #0]
 8020296:	681b      	ldr	r3, [r3, #0]
 8020298:	41da      	rors	r2, r3
 802029a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 802029e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80202a0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80202a4:	681b      	ldr	r3, [r3, #0]
 80202a6:	fa2f f283 	sxtb16	r2, r3
 80202aa:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80202ae:	601a      	str	r2, [r3, #0]
  return(result);
 80202b0:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80202b4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80202b6:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80202ba:	601a      	str	r2, [r3, #0]
  return result;
 80202bc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80202c0:	681b      	ldr	r3, [r3, #0]
 80202c2:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 80202c6:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80202ca:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80202ce:	601a      	str	r2, [r3, #0]
 80202d0:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80202d4:	2308      	movs	r3, #8
 80202d6:	6013      	str	r3, [r2, #0]
 80202d8:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 80202dc:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80202e0:	681b      	ldr	r3, [r3, #0]
 80202e2:	6013      	str	r3, [r2, #0]
 80202e4:	f507 7252 	add.w	r2, r7, #840	; 0x348
 80202e8:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80202ec:	681b      	ldr	r3, [r3, #0]
 80202ee:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80202f0:	f507 7252 	add.w	r2, r7, #840	; 0x348
 80202f4:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80202f8:	681b      	ldr	r3, [r3, #0]
 80202fa:	f003 031f 	and.w	r3, r3, #31
 80202fe:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020300:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8020304:	681b      	ldr	r3, [r3, #0]
 8020306:	2b00      	cmp	r3, #0
 8020308:	d103      	bne.n	8020312 <arm_nn_mat_mult_nt_t_s8+0x2920>
    return op1;
 802030a:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 802030e:	681a      	ldr	r2, [r3, #0]
 8020310:	e006      	b.n	8020320 <arm_nn_mat_mult_nt_t_s8+0x292e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020312:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 8020316:	f507 7352 	add.w	r3, r7, #840	; 0x348
 802031a:	6812      	ldr	r2, [r2, #0]
 802031c:	681b      	ldr	r3, [r3, #0]
 802031e:	41da      	rors	r2, r3
 8020320:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8020324:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020326:	f507 7351 	add.w	r3, r7, #836	; 0x344
 802032a:	681b      	ldr	r3, [r3, #0]
 802032c:	fa2f f283 	sxtb16	r2, r3
 8020330:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8020334:	601a      	str	r2, [r3, #0]
  return(result);
 8020336:	f507 7350 	add.w	r3, r7, #832	; 0x340
 802033a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 802033c:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8020340:	601a      	str	r2, [r3, #0]
  return result;
 8020342:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8020346:	681b      	ldr	r3, [r3, #0]
 8020348:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 802034c:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8020350:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8020354:	601a      	str	r2, [r3, #0]
 8020356:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 802035a:	2308      	movs	r3, #8
 802035c:	6013      	str	r3, [r2, #0]
 802035e:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8020362:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8020366:	681b      	ldr	r3, [r3, #0]
 8020368:	6013      	str	r3, [r2, #0]
 802036a:	f507 7259 	add.w	r2, r7, #868	; 0x364
 802036e:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8020372:	681b      	ldr	r3, [r3, #0]
 8020374:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020376:	f507 7259 	add.w	r2, r7, #868	; 0x364
 802037a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802037e:	681b      	ldr	r3, [r3, #0]
 8020380:	f003 031f 	and.w	r3, r3, #31
 8020384:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020386:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802038a:	681b      	ldr	r3, [r3, #0]
 802038c:	2b00      	cmp	r3, #0
 802038e:	d103      	bne.n	8020398 <arm_nn_mat_mult_nt_t_s8+0x29a6>
    return op1;
 8020390:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8020394:	681a      	ldr	r2, [r3, #0]
 8020396:	e006      	b.n	80203a6 <arm_nn_mat_mult_nt_t_s8+0x29b4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020398:	f507 725a 	add.w	r2, r7, #872	; 0x368
 802039c:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80203a0:	6812      	ldr	r2, [r2, #0]
 80203a2:	681b      	ldr	r3, [r3, #0]
 80203a4:	41da      	rors	r2, r3
 80203a6:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80203aa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80203ac:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80203b0:	681b      	ldr	r3, [r3, #0]
 80203b2:	fa2f f283 	sxtb16	r2, r3
 80203b6:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80203ba:	601a      	str	r2, [r3, #0]
  return(result);
 80203bc:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80203c0:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80203c2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80203c6:	601a      	str	r2, [r3, #0]
  return result;
 80203c8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80203cc:	681b      	ldr	r3, [r3, #0]
 80203ce:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 80203d2:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 80203d6:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 80203da:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 80203de:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80203e2:	601a      	str	r2, [r3, #0]
 80203e4:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80203e8:	6019      	str	r1, [r3, #0]
 80203ea:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80203ee:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80203f0:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80203f4:	6819      	ldr	r1, [r3, #0]
 80203f6:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80203fa:	681a      	ldr	r2, [r3, #0]
 80203fc:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8020400:	681b      	ldr	r3, [r3, #0]
 8020402:	fb21 3202 	smlad	r2, r1, r2, r3
 8020406:	f507 735d 	add.w	r3, r7, #884	; 0x374
 802040a:	601a      	str	r2, [r3, #0]
  return(result);
 802040c:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8020410:	681b      	ldr	r3, [r3, #0]
 8020412:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 8020416:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 802041a:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 802041e:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8020422:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8020426:	601a      	str	r2, [r3, #0]
 8020428:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 802042c:	6019      	str	r1, [r3, #0]
 802042e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8020432:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020434:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8020438:	6819      	ldr	r1, [r3, #0]
 802043a:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 802043e:	681a      	ldr	r2, [r3, #0]
 8020440:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8020444:	681b      	ldr	r3, [r3, #0]
 8020446:	fb21 3202 	smlad	r2, r1, r2, r3
 802044a:	f507 7361 	add.w	r3, r7, #900	; 0x384
 802044e:	601a      	str	r2, [r3, #0]
  return(result);
 8020450:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8020454:	681b      	ldr	r3, [r3, #0]
 8020456:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 802045a:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 802045e:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 8020462:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8020466:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 802046a:	601a      	str	r2, [r3, #0]
 802046c:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 8020470:	6019      	str	r1, [r3, #0]
 8020472:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8020476:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020478:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 802047c:	6819      	ldr	r1, [r3, #0]
 802047e:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 8020482:	681a      	ldr	r2, [r3, #0]
 8020484:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8020488:	681b      	ldr	r3, [r3, #0]
 802048a:	fb21 3202 	smlad	r2, r1, r2, r3
 802048e:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8020492:	601a      	str	r2, [r3, #0]
  return(result);
 8020494:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8020498:	681b      	ldr	r3, [r3, #0]
 802049a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 802049e:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80204a2:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 80204a6:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 80204aa:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80204ae:	601a      	str	r2, [r3, #0]
 80204b0:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 80204b4:	6019      	str	r1, [r3, #0]
 80204b6:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80204ba:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80204bc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80204c0:	6819      	ldr	r1, [r3, #0]
 80204c2:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 80204c6:	681a      	ldr	r2, [r3, #0]
 80204c8:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80204cc:	681b      	ldr	r3, [r3, #0]
 80204ce:	fb21 3202 	smlad	r2, r1, r2, r3
 80204d2:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80204d6:	601a      	str	r2, [r3, #0]
  return(result);
 80204d8:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80204dc:	681b      	ldr	r3, [r3, #0]
 80204de:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 80204e2:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 80204e6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80204ea:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80204ec:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 80204f0:	681b      	ldr	r3, [r3, #0]
 80204f2:	681b      	ldr	r3, [r3, #0]
 80204f4:	681b      	ldr	r3, [r3, #0]
 80204f6:	461a      	mov	r2, r3
 80204f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80204fc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80204fe:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8020502:	681b      	ldr	r3, [r3, #0]
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	1d1a      	adds	r2, r3, #4
 8020508:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 802050c:	681b      	ldr	r3, [r3, #0]
 802050e:	601a      	str	r2, [r3, #0]
    return (val);
 8020510:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8020514:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8020516:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 802051a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802051e:	681a      	ldr	r2, [r3, #0]
 8020520:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 8020524:	441a      	add	r2, r3
 8020526:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 802052a:	601a      	str	r2, [r3, #0]
 802052c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8020530:	681b      	ldr	r3, [r3, #0]
 8020532:	681b      	ldr	r3, [r3, #0]
 8020534:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8020536:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 802053a:	601a      	str	r2, [r3, #0]
    return (val);
 802053c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8020540:	681b      	ldr	r3, [r3, #0]
 8020542:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 8020546:	f507 726f 	add.w	r2, r7, #956	; 0x3bc
 802054a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 802054e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8020550:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 8020554:	681b      	ldr	r3, [r3, #0]
 8020556:	681b      	ldr	r3, [r3, #0]
 8020558:	681b      	ldr	r3, [r3, #0]
 802055a:	461a      	mov	r2, r3
 802055c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8020560:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020562:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 8020566:	681b      	ldr	r3, [r3, #0]
 8020568:	681b      	ldr	r3, [r3, #0]
 802056a:	1d1a      	adds	r2, r3, #4
 802056c:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 8020570:	681b      	ldr	r3, [r3, #0]
 8020572:	601a      	str	r2, [r3, #0]
    return (val);
 8020574:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8020578:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 802057a:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 802057e:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 8020582:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8020586:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020588:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 802058c:	681b      	ldr	r3, [r3, #0]
 802058e:	fa2f f283 	sxtb16	r2, r3
 8020592:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8020596:	601a      	str	r2, [r3, #0]
  return(result);
 8020598:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 802059c:	681b      	ldr	r3, [r3, #0]
 802059e:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 80205a2:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80205a6:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80205aa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80205ac:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80205b0:	681b      	ldr	r3, [r3, #0]
 80205b2:	fa2f f283 	sxtb16	r2, r3
 80205b6:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80205ba:	601a      	str	r2, [r3, #0]
  return(result);
 80205bc:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80205c0:	681b      	ldr	r3, [r3, #0]
 80205c2:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 80205c6:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 80205ca:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 80205ce:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80205d0:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 80205d4:	681b      	ldr	r3, [r3, #0]
 80205d6:	fa2f f283 	sxtb16	r2, r3
 80205da:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80205de:	601a      	str	r2, [r3, #0]
  return(result);
 80205e0:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80205e4:	681b      	ldr	r3, [r3, #0]
 80205e6:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 80205ea:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 80205ee:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80205f2:	601a      	str	r2, [r3, #0]
 80205f4:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 80205f8:	2308      	movs	r3, #8
 80205fa:	6013      	str	r3, [r2, #0]
 80205fc:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8020600:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8020604:	681b      	ldr	r3, [r3, #0]
 8020606:	6013      	str	r3, [r2, #0]
 8020608:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 802060c:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8020610:	681b      	ldr	r3, [r3, #0]
 8020612:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020614:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8020618:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 802061c:	681b      	ldr	r3, [r3, #0]
 802061e:	f003 031f 	and.w	r3, r3, #31
 8020622:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020624:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8020628:	681b      	ldr	r3, [r3, #0]
 802062a:	2b00      	cmp	r3, #0
 802062c:	d103      	bne.n	8020636 <arm_nn_mat_mult_nt_t_s8+0x2c44>
    return op1;
 802062e:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8020632:	681a      	ldr	r2, [r3, #0]
 8020634:	e006      	b.n	8020644 <arm_nn_mat_mult_nt_t_s8+0x2c52>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020636:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 802063a:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 802063e:	6812      	ldr	r2, [r2, #0]
 8020640:	681b      	ldr	r3, [r3, #0]
 8020642:	41da      	rors	r2, r3
 8020644:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8020648:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802064a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 802064e:	681b      	ldr	r3, [r3, #0]
 8020650:	fa2f f283 	sxtb16	r2, r3
 8020654:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8020658:	601a      	str	r2, [r3, #0]
  return(result);
 802065a:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 802065e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020660:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8020664:	601a      	str	r2, [r3, #0]
  return result;
 8020666:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 802066a:	681b      	ldr	r3, [r3, #0]
 802066c:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 8020670:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020674:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8020678:	601a      	str	r2, [r3, #0]
 802067a:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 802067e:	2308      	movs	r3, #8
 8020680:	6013      	str	r3, [r2, #0]
 8020682:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8020686:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 802068a:	681b      	ldr	r3, [r3, #0]
 802068c:	6013      	str	r3, [r2, #0]
 802068e:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8020692:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8020696:	681b      	ldr	r3, [r3, #0]
 8020698:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 802069a:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 802069e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80206a2:	681b      	ldr	r3, [r3, #0]
 80206a4:	f003 031f 	and.w	r3, r3, #31
 80206a8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80206aa:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80206ae:	681b      	ldr	r3, [r3, #0]
 80206b0:	2b00      	cmp	r3, #0
 80206b2:	d103      	bne.n	80206bc <arm_nn_mat_mult_nt_t_s8+0x2cca>
    return op1;
 80206b4:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80206b8:	681a      	ldr	r2, [r3, #0]
 80206ba:	e006      	b.n	80206ca <arm_nn_mat_mult_nt_t_s8+0x2cd8>
  return (op1 >> op2) | (op1 << (32U - op2));
 80206bc:	f207 4204 	addw	r2, r7, #1028	; 0x404
 80206c0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80206c4:	6812      	ldr	r2, [r2, #0]
 80206c6:	681b      	ldr	r3, [r3, #0]
 80206c8:	41da      	rors	r2, r3
 80206ca:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80206ce:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80206d0:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80206d4:	681b      	ldr	r3, [r3, #0]
 80206d6:	fa2f f283 	sxtb16	r2, r3
 80206da:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80206de:	601a      	str	r2, [r3, #0]
  return(result);
 80206e0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80206e4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80206e6:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 80206ea:	601a      	str	r2, [r3, #0]
  return result;
 80206ec:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 80206f0:	681b      	ldr	r3, [r3, #0]
 80206f2:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 80206f6:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 80206fa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80206fe:	601a      	str	r2, [r3, #0]
 8020700:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8020704:	2308      	movs	r3, #8
 8020706:	6013      	str	r3, [r2, #0]
 8020708:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 802070c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8020710:	681b      	ldr	r3, [r3, #0]
 8020712:	6013      	str	r3, [r2, #0]
 8020714:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8020718:	f207 4324 	addw	r3, r7, #1060	; 0x424
 802071c:	681b      	ldr	r3, [r3, #0]
 802071e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020720:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8020724:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8020728:	681b      	ldr	r3, [r3, #0]
 802072a:	f003 031f 	and.w	r3, r3, #31
 802072e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020730:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8020734:	681b      	ldr	r3, [r3, #0]
 8020736:	2b00      	cmp	r3, #0
 8020738:	d103      	bne.n	8020742 <arm_nn_mat_mult_nt_t_s8+0x2d50>
    return op1;
 802073a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 802073e:	681a      	ldr	r2, [r3, #0]
 8020740:	e006      	b.n	8020750 <arm_nn_mat_mult_nt_t_s8+0x2d5e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020742:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8020746:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 802074a:	6812      	ldr	r2, [r2, #0]
 802074c:	681b      	ldr	r3, [r3, #0]
 802074e:	41da      	rors	r2, r3
 8020750:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8020754:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020756:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 802075a:	681b      	ldr	r3, [r3, #0]
 802075c:	fa2f f283 	sxtb16	r2, r3
 8020760:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8020764:	601a      	str	r2, [r3, #0]
  return(result);
 8020766:	f207 4314 	addw	r3, r7, #1044	; 0x414
 802076a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 802076c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8020770:	601a      	str	r2, [r3, #0]
  return result;
 8020772:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8020776:	681b      	ldr	r3, [r3, #0]
 8020778:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 802077c:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020780:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 8020784:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8020788:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 802078c:	601a      	str	r2, [r3, #0]
 802078e:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8020792:	6019      	str	r1, [r3, #0]
 8020794:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8020798:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802079a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 802079e:	6819      	ldr	r1, [r3, #0]
 80207a0:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80207a4:	681a      	ldr	r2, [r3, #0]
 80207a6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80207aa:	681b      	ldr	r3, [r3, #0]
 80207ac:	fb21 3202 	smlad	r2, r1, r2, r3
 80207b0:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80207b4:	601a      	str	r2, [r3, #0]
  return(result);
 80207b6:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80207ba:	681b      	ldr	r3, [r3, #0]
 80207bc:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 80207c0:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80207c4:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 80207c8:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 80207cc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80207d0:	601a      	str	r2, [r3, #0]
 80207d2:	f207 4344 	addw	r3, r7, #1092	; 0x444
 80207d6:	6019      	str	r1, [r3, #0]
 80207d8:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80207dc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80207de:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80207e2:	6819      	ldr	r1, [r3, #0]
 80207e4:	f207 4344 	addw	r3, r7, #1092	; 0x444
 80207e8:	681a      	ldr	r2, [r3, #0]
 80207ea:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80207ee:	681b      	ldr	r3, [r3, #0]
 80207f0:	fb21 3202 	smlad	r2, r1, r2, r3
 80207f4:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80207f8:	601a      	str	r2, [r3, #0]
  return(result);
 80207fa:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80207fe:	681b      	ldr	r3, [r3, #0]
 8020800:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 8020804:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020808:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 802080c:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8020810:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8020814:	601a      	str	r2, [r3, #0]
 8020816:	f207 4354 	addw	r3, r7, #1108	; 0x454
 802081a:	6019      	str	r1, [r3, #0]
 802081c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8020820:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020822:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8020826:	6819      	ldr	r1, [r3, #0]
 8020828:	f207 4354 	addw	r3, r7, #1108	; 0x454
 802082c:	681a      	ldr	r2, [r3, #0]
 802082e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8020832:	681b      	ldr	r3, [r3, #0]
 8020834:	fb21 3202 	smlad	r2, r1, r2, r3
 8020838:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 802083c:	601a      	str	r2, [r3, #0]
  return(result);
 802083e:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8020842:	681b      	ldr	r3, [r3, #0]
 8020844:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 8020848:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 802084c:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 8020850:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8020854:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8020858:	601a      	str	r2, [r3, #0]
 802085a:	f207 4364 	addw	r3, r7, #1124	; 0x464
 802085e:	6019      	str	r1, [r3, #0]
 8020860:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8020864:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020866:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 802086a:	6819      	ldr	r1, [r3, #0]
 802086c:	f207 4364 	addw	r3, r7, #1124	; 0x464
 8020870:	681a      	ldr	r2, [r3, #0]
 8020872:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8020876:	681b      	ldr	r3, [r3, #0]
 8020878:	fb21 3202 	smlad	r2, r1, r2, r3
 802087c:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8020880:	601a      	str	r2, [r3, #0]
  return(result);
 8020882:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8020886:	681b      	ldr	r3, [r3, #0]
 8020888:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 802088c:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 8020890:	3310      	adds	r3, #16
 8020892:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
 8020896:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 802089a:	f1a3 020f 	sub.w	r2, r3, #15
 802089e:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 80208a2:	4293      	cmp	r3, r2
 80208a4:	f6ff a89e 	blt.w	801f9e4 <arm_nn_mat_mult_nt_t_s8+0x1ff2>
            }

            // Left-over accumulations
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80208a8:	e03d      	b.n	8020926 <arm_nn_mat_mult_nt_t_s8+0x2f34>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 80208aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80208ae:	681b      	ldr	r3, [r3, #0]
 80208b0:	781b      	ldrb	r3, [r3, #0]
 80208b2:	f887 39e3 	strb.w	r3, [r7, #2531]	; 0x9e3
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 80208b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80208ba:	681a      	ldr	r2, [r3, #0]
 80208bc:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 80208c0:	4413      	add	r3, r2
 80208c2:	781b      	ldrb	r3, [r3, #0]
 80208c4:	f887 39e2 	strb.w	r3, [r7, #2530]	; 0x9e2
                q7_t lhs_value = lhs_ptr[0];
 80208c8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80208cc:	681b      	ldr	r3, [r3, #0]
 80208ce:	781b      	ldrb	r3, [r3, #0]
 80208d0:	f887 39e1 	strb.w	r3, [r7, #2529]	; 0x9e1

                res00 += lhs_value * rhs_value0;
 80208d4:	f997 29e1 	ldrsb.w	r2, [r7, #2529]	; 0x9e1
 80208d8:	f997 39e3 	ldrsb.w	r3, [r7, #2531]	; 0x9e3
 80208dc:	fb03 f202 	mul.w	r2, r3, r2
 80208e0:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 80208e4:	4413      	add	r3, r2
 80208e6:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 += lhs_value * rhs_value1;
 80208ea:	f997 29e1 	ldrsb.w	r2, [r7, #2529]	; 0x9e1
 80208ee:	f997 39e2 	ldrsb.w	r3, [r7, #2530]	; 0x9e2
 80208f2:	fb03 f202 	mul.w	r2, r3, r2
 80208f6:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 80208fa:	4413      	add	r3, r2
 80208fc:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

                ++rhs_ptr;
 8020900:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020904:	681b      	ldr	r3, [r3, #0]
 8020906:	1c5a      	adds	r2, r3, #1
 8020908:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802090c:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 802090e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020912:	681b      	ldr	r3, [r3, #0]
 8020914:	1c5a      	adds	r2, r3, #1
 8020916:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 802091a:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 802091c:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 8020920:	3301      	adds	r3, #1
 8020922:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
 8020926:	f8d7 2a08 	ldr.w	r2, [r7, #2568]	; 0xa08
 802092a:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 802092e:	429a      	cmp	r2, r3
 8020930:	dbbb      	blt.n	80208aa <arm_nn_mat_mult_nt_t_s8+0x2eb8>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 8020932:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020936:	009a      	lsls	r2, r3, #2
 8020938:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 802093c:	4413      	add	r3, r2
 802093e:	6818      	ldr	r0, [r3, #0]
 8020940:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020944:	009a      	lsls	r2, r3, #2
 8020946:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 802094a:	4413      	add	r3, r2
 802094c:	6819      	ldr	r1, [r3, #0]
 802094e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8020952:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 8020956:	6013      	str	r3, [r2, #0]
 8020958:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802095c:	6018      	str	r0, [r3, #0]
 802095e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8020962:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020964:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8020968:	681b      	ldr	r3, [r3, #0]
 802096a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 802096e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8020972:	681b      	ldr	r3, [r3, #0]
 8020974:	fa03 f202 	lsl.w	r2, r3, r2
 8020978:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 802097c:	601a      	str	r2, [r3, #0]
 802097e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8020982:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8020986:	681b      	ldr	r3, [r3, #0]
 8020988:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802098a:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 802098e:	2300      	movs	r3, #0
 8020990:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8020992:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8020996:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802099a:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 802099c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80209a0:	2300      	movs	r3, #0
 80209a2:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80209a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80209a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80209ac:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80209b0:	681b      	ldr	r3, [r3, #0]
 80209b2:	4618      	mov	r0, r3
 80209b4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80209b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80209bc:	681b      	ldr	r3, [r3, #0]
 80209be:	461a      	mov	r2, r3
 80209c0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80209c4:	fb02 f501 	mul.w	r5, r2, r1
 80209c8:	fb00 f403 	mul.w	r4, r0, r3
 80209cc:	442c      	add	r4, r5
 80209ce:	fba0 2302 	umull	r2, r3, r0, r2
 80209d2:	18e1      	adds	r1, r4, r3
 80209d4:	460b      	mov	r3, r1
 80209d6:	eb18 0102 	adds.w	r1, r8, r2
 80209da:	6039      	str	r1, [r7, #0]
 80209dc:	eb49 0303 	adc.w	r3, r9, r3
 80209e0:	607b      	str	r3, [r7, #4]
 80209e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80209e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80209ea:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 80209ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80209f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209f6:	f04f 0000 	mov.w	r0, #0
 80209fa:	f04f 0100 	mov.w	r1, #0
 80209fe:	0fd0      	lsrs	r0, r2, #31
 8020a00:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8020a04:	17d9      	asrs	r1, r3, #31
 8020a06:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8020a0a:	4603      	mov	r3, r0
 8020a0c:	6013      	str	r3, [r2, #0]
    return result;
 8020a0e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8020a12:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020a14:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8020a18:	681b      	ldr	r3, [r3, #0]
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	dc04      	bgt.n	8020a28 <arm_nn_mat_mult_nt_t_s8+0x3036>
 8020a1e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8020a22:	681b      	ldr	r3, [r3, #0]
 8020a24:	425a      	negs	r2, r3
 8020a26:	e000      	b.n	8020a2a <arm_nn_mat_mult_nt_t_s8+0x3038>
 8020a28:	2200      	movs	r2, #0
 8020a2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8020a2e:	6019      	str	r1, [r3, #0]
 8020a30:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8020a34:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8020a36:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8020a3a:	2300      	movs	r3, #0
 8020a3c:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8020a3e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8020a42:	2201      	movs	r2, #1
 8020a44:	681b      	ldr	r3, [r3, #0]
 8020a46:	fa02 f303 	lsl.w	r3, r2, r3
 8020a4a:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8020a4e:	3b01      	subs	r3, #1
 8020a50:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8020a52:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8020a56:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8020a5a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8020a5e:	6812      	ldr	r2, [r2, #0]
 8020a60:	681b      	ldr	r3, [r3, #0]
 8020a62:	4013      	ands	r3, r2
 8020a64:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8020a66:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8020a6a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8020a6e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8020a72:	6812      	ldr	r2, [r2, #0]
 8020a74:	681b      	ldr	r3, [r3, #0]
 8020a76:	fa42 f303 	asr.w	r3, r2, r3
 8020a7a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8020a7c:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8020a80:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8020a84:	681b      	ldr	r3, [r3, #0]
 8020a86:	105b      	asrs	r3, r3, #1
 8020a88:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8020a8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8020a8e:	681b      	ldr	r3, [r3, #0]
 8020a90:	2b00      	cmp	r3, #0
 8020a92:	da06      	bge.n	8020aa2 <arm_nn_mat_mult_nt_t_s8+0x30b0>
        threshold++;
 8020a94:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8020a98:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8020a9c:	681b      	ldr	r3, [r3, #0]
 8020a9e:	3301      	adds	r3, #1
 8020aa0:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8020aa2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020aa6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8020aaa:	6812      	ldr	r2, [r2, #0]
 8020aac:	681b      	ldr	r3, [r3, #0]
 8020aae:	429a      	cmp	r2, r3
 8020ab0:	dd06      	ble.n	8020ac0 <arm_nn_mat_mult_nt_t_s8+0x30ce>
        result++;
 8020ab2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8020ab6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8020aba:	681b      	ldr	r3, [r3, #0]
 8020abc:	3301      	adds	r3, #1
 8020abe:	6013      	str	r3, [r2, #0]
    return result;
 8020ac0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8020ac4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020ac6:	bf00      	nop
 8020ac8:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 8020acc:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020ad0:	3301      	adds	r3, #1
 8020ad2:	009a      	lsls	r2, r3, #2
 8020ad4:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 8020ad8:	4413      	add	r3, r2
 8020ada:	6818      	ldr	r0, [r3, #0]
 8020adc:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020ae0:	3301      	adds	r3, #1
 8020ae2:	009a      	lsls	r2, r3, #2
 8020ae4:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 8020ae8:	4413      	add	r3, r2
 8020aea:	6819      	ldr	r1, [r3, #0]
 8020aec:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8020af0:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 8020af4:	6013      	str	r3, [r2, #0]
 8020af6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8020afa:	6018      	str	r0, [r3, #0]
 8020afc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8020b00:	6019      	str	r1, [r3, #0]
 8020b02:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8020b06:	681b      	ldr	r3, [r3, #0]
 8020b08:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8020b0c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8020b10:	681b      	ldr	r3, [r3, #0]
 8020b12:	fa03 f202 	lsl.w	r2, r3, r2
 8020b16:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8020b1a:	601a      	str	r2, [r3, #0]
 8020b1c:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8020b20:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8020b24:	681b      	ldr	r3, [r3, #0]
 8020b26:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8020b28:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8020b2c:	2300      	movs	r3, #0
 8020b2e:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8020b30:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8020b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020b38:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8020b3a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8020b3e:	2300      	movs	r3, #0
 8020b40:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8020b42:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020b46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020b4a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8020b4e:	681b      	ldr	r3, [r3, #0]
 8020b50:	4618      	mov	r0, r3
 8020b52:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8020b56:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8020b5a:	681b      	ldr	r3, [r3, #0]
 8020b5c:	461a      	mov	r2, r3
 8020b5e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8020b62:	fb02 f501 	mul.w	r5, r2, r1
 8020b66:	fb00 f403 	mul.w	r4, r0, r3
 8020b6a:	442c      	add	r4, r5
 8020b6c:	fba0 2302 	umull	r2, r3, r0, r2
 8020b70:	18e1      	adds	r1, r4, r3
 8020b72:	460b      	mov	r3, r1
 8020b74:	eb18 0102 	adds.w	r1, r8, r2
 8020b78:	60b9      	str	r1, [r7, #8]
 8020b7a:	eb49 0303 	adc.w	r3, r9, r3
 8020b7e:	60fb      	str	r3, [r7, #12]
 8020b80:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020b84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020b88:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8020b8c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b94:	f04f 0000 	mov.w	r0, #0
 8020b98:	f04f 0100 	mov.w	r1, #0
 8020b9c:	0fd0      	lsrs	r0, r2, #31
 8020b9e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8020ba2:	17d9      	asrs	r1, r3, #31
 8020ba4:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8020ba8:	4603      	mov	r3, r0
 8020baa:	6013      	str	r3, [r2, #0]
    return result;
 8020bac:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8020bb0:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020bb2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8020bb6:	681b      	ldr	r3, [r3, #0]
 8020bb8:	2b00      	cmp	r3, #0
 8020bba:	dc04      	bgt.n	8020bc6 <arm_nn_mat_mult_nt_t_s8+0x31d4>
 8020bbc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8020bc0:	681b      	ldr	r3, [r3, #0]
 8020bc2:	425a      	negs	r2, r3
 8020bc4:	e000      	b.n	8020bc8 <arm_nn_mat_mult_nt_t_s8+0x31d6>
 8020bc6:	2200      	movs	r2, #0
 8020bc8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8020bcc:	6019      	str	r1, [r3, #0]
 8020bce:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8020bd2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8020bd4:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8020bd8:	2300      	movs	r3, #0
 8020bda:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8020bdc:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8020be0:	2201      	movs	r2, #1
 8020be2:	681b      	ldr	r3, [r3, #0]
 8020be4:	fa02 f303 	lsl.w	r3, r2, r3
 8020be8:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8020bec:	3b01      	subs	r3, #1
 8020bee:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8020bf0:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8020bf4:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8020bf8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8020bfc:	6812      	ldr	r2, [r2, #0]
 8020bfe:	681b      	ldr	r3, [r3, #0]
 8020c00:	4013      	ands	r3, r2
 8020c02:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8020c04:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8020c08:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8020c0c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8020c10:	6812      	ldr	r2, [r2, #0]
 8020c12:	681b      	ldr	r3, [r3, #0]
 8020c14:	fa42 f303 	asr.w	r3, r2, r3
 8020c18:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8020c1a:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8020c1e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8020c22:	681b      	ldr	r3, [r3, #0]
 8020c24:	105b      	asrs	r3, r3, #1
 8020c26:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8020c28:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8020c2c:	681b      	ldr	r3, [r3, #0]
 8020c2e:	2b00      	cmp	r3, #0
 8020c30:	da06      	bge.n	8020c40 <arm_nn_mat_mult_nt_t_s8+0x324e>
        threshold++;
 8020c32:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8020c36:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8020c3a:	681b      	ldr	r3, [r3, #0]
 8020c3c:	3301      	adds	r3, #1
 8020c3e:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8020c40:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8020c44:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8020c48:	6812      	ldr	r2, [r2, #0]
 8020c4a:	681b      	ldr	r3, [r3, #0]
 8020c4c:	429a      	cmp	r2, r3
 8020c4e:	dd06      	ble.n	8020c5e <arm_nn_mat_mult_nt_t_s8+0x326c>
        result++;
 8020c50:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8020c54:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8020c58:	681b      	ldr	r3, [r3, #0]
 8020c5a:	3301      	adds	r3, #1
 8020c5c:	6013      	str	r3, [r2, #0]
    return result;
 8020c5e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8020c62:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020c64:	bf00      	nop
 8020c66:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            // Add offset
            res00 += dst_offset;
 8020c6a:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 8020c6e:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8020c72:	4413      	add	r3, r2
 8020c74:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 += dst_offset;
 8020c78:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 8020c7c:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8020c80:	4413      	add	r3, r2
 8020c82:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            // Clamp the result
            res00 = MAX(res00, activation_min);
 8020c86:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 8020c8a:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8020c8e:	4293      	cmp	r3, r2
 8020c90:	bfb8      	it	lt
 8020c92:	4613      	movlt	r3, r2
 8020c94:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res00 = MIN(res00, activation_max);
 8020c98:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 8020c9c:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8020ca0:	4293      	cmp	r3, r2
 8020ca2:	bfa8      	it	ge
 8020ca4:	4613      	movge	r3, r2
 8020ca6:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 = MAX(res01, activation_min);
 8020caa:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 8020cae:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8020cb2:	4293      	cmp	r3, r2
 8020cb4:	bfb8      	it	lt
 8020cb6:	4613      	movlt	r3, r2
 8020cb8:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
            res01 = MIN(res01, activation_max);
 8020cbc:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 8020cc0:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8020cc4:	4293      	cmp	r3, r2
 8020cc6:	bfa8      	it	ge
 8020cc8:	4613      	movge	r3, r2
 8020cca:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            dst_ptr[0] = (q7_t)res00;
 8020cce:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 8020cd2:	b25b      	sxtb	r3, r3
 8020cd4:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 8020cd8:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 8020cda:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 8020cde:	1c5a      	adds	r2, r3, #1
 8020ce0:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 8020ce4:	b25b      	sxtb	r3, r3
 8020ce6:	7013      	strb	r3, [r2, #0]
        }

        rhs += 2 * rhs_cols;
 8020ce8:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8020cec:	005b      	lsls	r3, r3, #1
 8020cee:	4619      	mov	r1, r3
 8020cf0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8020cf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8020cf8:	681b      	ldr	r3, [r3, #0]
 8020cfa:	440b      	add	r3, r1
 8020cfc:	6013      	str	r3, [r2, #0]
        dst += 2;
 8020cfe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8020d02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020d06:	681b      	ldr	r3, [r3, #0]
 8020d08:	3302      	adds	r3, #2
 8020d0a:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8020d0c:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020d10:	3302      	adds	r3, #2
 8020d12:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c
 8020d16:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8020d1a:	1e5a      	subs	r2, r3, #1
 8020d1c:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020d20:	4293      	cmp	r3, r2
 8020d22:	f6fc ae81 	blt.w	801da28 <arm_nn_mat_mult_nt_t_s8+0x36>
    }

    if (rhs_rows % 2)
 8020d26:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8020d2a:	f003 0301 	and.w	r3, r3, #1
 8020d2e:	2b00      	cmp	r3, #0
 8020d30:	f000 815b 	beq.w	8020fea <arm_nn_mat_mult_nt_t_s8+0x35f8>
    {
        const q7_t *lhs_ptr = &lhs[0];
 8020d34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8020d38:	681b      	ldr	r3, [r3, #0]
 8020d3a:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
        q7_t *dst_ptr = &dst[0];
 8020d3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020d42:	681b      	ldr	r3, [r3, #0]
 8020d44:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 8020d48:	2300      	movs	r3, #0
 8020d4a:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 8020d4e:	e145      	b.n	8020fdc <arm_nn_mat_mult_nt_t_s8+0x35ea>
        {
            const q7_t *rhs_ptr = &rhs[0];
 8020d50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8020d54:	681b      	ldr	r3, [r3, #0]
 8020d56:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
            q31_t res00 = 0;
 8020d5a:	2300      	movs	r3, #0
 8020d5c:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            if (bias)
 8020d60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8020d64:	681b      	ldr	r3, [r3, #0]
 8020d66:	2b00      	cmp	r3, #0
 8020d68:	d00c      	beq.n	8020d84 <arm_nn_mat_mult_nt_t_s8+0x3392>
            {
                res00 = bias[rhs_rows - 1];
 8020d6a:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8020d6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8020d72:	3b01      	subs	r3, #1
 8020d74:	009b      	lsls	r3, r3, #2
 8020d76:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8020d7a:	6812      	ldr	r2, [r2, #0]
 8020d7c:	4413      	add	r3, r2
 8020d7e:	681b      	ldr	r3, [r3, #0]
 8020d80:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            }

            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8020d84:	2300      	movs	r3, #0
 8020d86:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
 8020d8a:	e029      	b.n	8020de0 <arm_nn_mat_mult_nt_t_s8+0x33ee>
            {
                q31_t rhs_value = rhs_ptr[0];
 8020d8c:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 8020d90:	f993 3000 	ldrsb.w	r3, [r3]
 8020d94:	f8c7 39e8 	str.w	r3, [r7, #2536]	; 0x9e8
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8020d98:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 8020d9c:	f993 3000 	ldrsb.w	r3, [r3]
 8020da0:	461a      	mov	r2, r3
 8020da2:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 8020da6:	4413      	add	r3, r2
 8020da8:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4

                res00 += lhs_value * rhs_value;
 8020dac:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 8020db0:	f8d7 29e8 	ldr.w	r2, [r7, #2536]	; 0x9e8
 8020db4:	fb02 f303 	mul.w	r3, r2, r3
 8020db8:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8020dbc:	4413      	add	r3, r2
 8020dbe:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

                ++rhs_ptr;
 8020dc2:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 8020dc6:	3301      	adds	r3, #1
 8020dc8:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
                ++lhs_ptr;
 8020dcc:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 8020dd0:	3301      	adds	r3, #1
 8020dd2:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8020dd6:	f8d7 39f0 	ldr.w	r3, [r7, #2544]	; 0x9f0
 8020dda:	3301      	adds	r3, #1
 8020ddc:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
 8020de0:	f8d7 29f0 	ldr.w	r2, [r7, #2544]	; 0x9f0
 8020de4:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8020de8:	429a      	cmp	r2, r3
 8020dea:	dbcf      	blt.n	8020d8c <arm_nn_mat_mult_nt_t_s8+0x339a>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 8020dec:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8020df0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8020df4:	3b01      	subs	r3, #1
 8020df6:	009b      	lsls	r3, r3, #2
 8020df8:	f8d7 2a60 	ldr.w	r2, [r7, #2656]	; 0xa60
 8020dfc:	4413      	add	r3, r2
 8020dfe:	6819      	ldr	r1, [r3, #0]
 8020e00:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8020e04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8020e08:	3b01      	subs	r3, #1
 8020e0a:	009b      	lsls	r3, r3, #2
 8020e0c:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 8020e10:	4413      	add	r3, r2
 8020e12:	681a      	ldr	r2, [r3, #0]
 8020e14:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8020e18:	f8d7 09f4 	ldr.w	r0, [r7, #2548]	; 0x9f4
 8020e1c:	6018      	str	r0, [r3, #0]
 8020e1e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8020e22:	6019      	str	r1, [r3, #0]
 8020e24:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020e28:	601a      	str	r2, [r3, #0]
 8020e2a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020e2e:	681b      	ldr	r3, [r3, #0]
 8020e30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020e34:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8020e38:	6812      	ldr	r2, [r2, #0]
 8020e3a:	409a      	lsls	r2, r3
 8020e3c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8020e40:	601a      	str	r2, [r3, #0]
 8020e42:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8020e46:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8020e4a:	6812      	ldr	r2, [r2, #0]
 8020e4c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8020e4e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8020e52:	2200      	movs	r2, #0
 8020e54:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8020e56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020e5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8020e5e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8020e60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020e64:	2200      	movs	r2, #0
 8020e66:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8020e68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020e6c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8020e70:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8020e74:	681b      	ldr	r3, [r3, #0]
 8020e76:	4618      	mov	r0, r3
 8020e78:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8020e7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8020e80:	681b      	ldr	r3, [r3, #0]
 8020e82:	461a      	mov	r2, r3
 8020e84:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8020e88:	fb02 fc01 	mul.w	ip, r2, r1
 8020e8c:	fb00 f603 	mul.w	r6, r0, r3
 8020e90:	4466      	add	r6, ip
 8020e92:	fba0 2302 	umull	r2, r3, r0, r2
 8020e96:	18f1      	adds	r1, r6, r3
 8020e98:	460b      	mov	r3, r1
 8020e9a:	eb14 0a02 	adds.w	sl, r4, r2
 8020e9e:	eb45 0b03 	adc.w	fp, r5, r3
 8020ea2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020ea6:	e9c3 ab00 	strd	sl, fp, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8020eaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020eb2:	f04f 0200 	mov.w	r2, #0
 8020eb6:	f04f 0300 	mov.w	r3, #0
 8020eba:	0fc2      	lsrs	r2, r0, #31
 8020ebc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8020ec0:	17cb      	asrs	r3, r1, #31
 8020ec2:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8020ec6:	4613      	mov	r3, r2
 8020ec8:	600b      	str	r3, [r1, #0]
    return result;
 8020eca:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8020ece:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020ed0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020ed4:	681b      	ldr	r3, [r3, #0]
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	dc04      	bgt.n	8020ee4 <arm_nn_mat_mult_nt_t_s8+0x34f2>
 8020eda:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020ede:	681b      	ldr	r3, [r3, #0]
 8020ee0:	425b      	negs	r3, r3
 8020ee2:	e000      	b.n	8020ee6 <arm_nn_mat_mult_nt_t_s8+0x34f4>
 8020ee4:	2300      	movs	r3, #0
 8020ee6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8020eea:	6011      	str	r1, [r2, #0]
 8020eec:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8020ef0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8020ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020ef6:	2200      	movs	r2, #0
 8020ef8:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8020efa:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8020efe:	2201      	movs	r2, #1
 8020f00:	681b      	ldr	r3, [r3, #0]
 8020f02:	409a      	lsls	r2, r3
 8020f04:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8020f08:	3a01      	subs	r2, #1
 8020f0a:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8020f0c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020f10:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8020f14:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8020f18:	6809      	ldr	r1, [r1, #0]
 8020f1a:	6812      	ldr	r2, [r2, #0]
 8020f1c:	400a      	ands	r2, r1
 8020f1e:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8020f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020f24:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8020f28:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8020f2c:	6809      	ldr	r1, [r1, #0]
 8020f2e:	6812      	ldr	r2, [r2, #0]
 8020f30:	fa41 f202 	asr.w	r2, r1, r2
 8020f34:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8020f36:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8020f3a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8020f3e:	6812      	ldr	r2, [r2, #0]
 8020f40:	1052      	asrs	r2, r2, #1
 8020f42:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8020f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020f48:	681b      	ldr	r3, [r3, #0]
 8020f4a:	2b00      	cmp	r3, #0
 8020f4c:	da06      	bge.n	8020f5c <arm_nn_mat_mult_nt_t_s8+0x356a>
        threshold++;
 8020f4e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8020f52:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8020f56:	6812      	ldr	r2, [r2, #0]
 8020f58:	3201      	adds	r2, #1
 8020f5a:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8020f5c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8020f60:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8020f64:	6812      	ldr	r2, [r2, #0]
 8020f66:	681b      	ldr	r3, [r3, #0]
 8020f68:	429a      	cmp	r2, r3
 8020f6a:	dd06      	ble.n	8020f7a <arm_nn_mat_mult_nt_t_s8+0x3588>
        result++;
 8020f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020f70:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8020f74:	6812      	ldr	r2, [r2, #0]
 8020f76:	3201      	adds	r2, #1
 8020f78:	601a      	str	r2, [r3, #0]
    return result;
 8020f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020f7e:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020f80:	bf00      	nop
 8020f82:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            // Add offset
            res00 += dst_offset;
 8020f86:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8020f8a:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8020f8e:	4413      	add	r3, r2
 8020f90:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            // Clamp the result
            res00 = MAX(res00, activation_min);
 8020f94:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8020f98:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8020f9c:	4293      	cmp	r3, r2
 8020f9e:	bfb8      	it	lt
 8020fa0:	4613      	movlt	r3, r2
 8020fa2:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            res00 = MIN(res00, activation_max);
 8020fa6:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8020faa:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8020fae:	4293      	cmp	r3, r2
 8020fb0:	bfa8      	it	ge
 8020fb2:	4613      	movge	r3, r2
 8020fb4:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            dst_ptr[0] = (q7_t)res00;
 8020fb8:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8020fbc:	b25a      	sxtb	r2, r3
 8020fbe:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 8020fc2:	701a      	strb	r2, [r3, #0]
            dst_ptr += rhs_rows;
 8020fc4:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8020fc8:	f8d7 2a00 	ldr.w	r2, [r7, #2560]	; 0xa00
 8020fcc:	4413      	add	r3, r2
 8020fce:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 8020fd2:	f8d7 39fc 	ldr.w	r3, [r7, #2556]	; 0x9fc
 8020fd6:	3301      	adds	r3, #1
 8020fd8:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 8020fdc:	f8d7 29fc 	ldr.w	r2, [r7, #2556]	; 0x9fc
 8020fe0:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 8020fe4:	429a      	cmp	r2, r3
 8020fe6:	f6ff aeb3 	blt.w	8020d50 <arm_nn_mat_mult_nt_t_s8+0x335e>
            dst_ptr[0] = (q7_t)res00;
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
 8020fea:	2300      	movs	r3, #0
}
 8020fec:	4618      	mov	r0, r3
 8020fee:	f507 6724 	add.w	r7, r7, #2624	; 0xa40
 8020ff2:	46bd      	mov	sp, r7
 8020ff4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8020ff8:	4770      	bx	lr

08020ffa <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
 8020ffa:	b480      	push	{r7}
 8020ffc:	b0a5      	sub	sp, #148	; 0x94
 8020ffe:	af00      	add	r7, sp, #0
 8021000:	60f8      	str	r0, [r7, #12]
 8021002:	60b9      	str	r1, [r7, #8]
 8021004:	607a      	str	r2, [r7, #4]
 8021006:	807b      	strh	r3, [r7, #2]
    q31_t in_q15x2_2;
    q31_t out_q15x2_1;
    q31_t out_q15x2_2;

    /*loop unrolling */
    block_cnt = block_size >> 2;
 8021008:	687b      	ldr	r3, [r7, #4]
 802100a:	089b      	lsrs	r3, r3, #2
 802100c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 8021010:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8021014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8021018:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802101c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8021020:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021024:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8021028:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 802102c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8021030:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021034:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (block_cnt > 0)
 8021036:	e070      	b.n	802111a <arm_q7_to_q15_with_offset+0x120>
 8021038:	f107 030c 	add.w	r3, r7, #12
 802103c:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 802103e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021040:	681b      	ldr	r3, [r3, #0]
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 8021046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021048:	681b      	ldr	r3, [r3, #0]
 802104a:	1d1a      	adds	r2, r3, #4
 802104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802104e:	601a      	str	r2, [r3, #0]
    return (val);
 8021050:	693b      	ldr	r3, [r7, #16]
    {
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in_q7x4 = arm_nn_read_q7x4_ia(&src);
 8021052:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
 8021054:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8021056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021058:	637b      	str	r3, [r7, #52]	; 0x34
 802105a:	2308      	movs	r3, #8
 802105c:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 802105e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021060:	f003 031f 	and.w	r3, r3, #31
 8021064:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 8021066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021068:	2b00      	cmp	r3, #0
 802106a:	d101      	bne.n	8021070 <arm_q7_to_q15_with_offset+0x76>
    return op1;
 802106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802106e:	e003      	b.n	8021078 <arm_q7_to_q15_with_offset+0x7e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8021070:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021074:	fa61 f303 	ror.w	r3, r1, r3
 8021078:	643a      	str	r2, [r7, #64]	; 0x40
 802107a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 802107c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802107e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021080:	fa23 f382 	sxtab16	r3, r3, r2
 8021084:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8021086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021088:	677b      	str	r3, [r7, #116]	; 0x74
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);
 802108a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 802108c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802108e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021090:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8021092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021096:	fa23 f382 	sxtab16	r3, r3, r2
 802109a:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 802109c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802109e:	673b      	str	r3, [r7, #112]	; 0x70

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 80210a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80210a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80210a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80210a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80210a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80210aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80210ac:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 80210b0:	667b      	str	r3, [r7, #100]	; 0x64
 80210b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80210b4:	663b      	str	r3, [r7, #96]	; 0x60
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 80210b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80210b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80210ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80210bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80210be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80210c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80210c2:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 80210c6:	657b      	str	r3, [r7, #84]	; 0x54
 80210c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80210ca:	653b      	str	r3, [r7, #80]	; 0x50
 80210cc:	f107 0308 	add.w	r3, r7, #8
 80210d0:	623b      	str	r3, [r7, #32]
 80210d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80210d4:	61fb      	str	r3, [r7, #28]
  @param[in]     src_q31   Input value to be written.
  @return        none
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;
 80210d6:	69fb      	ldr	r3, [r7, #28]
 80210d8:	61bb      	str	r3, [r7, #24]

    memcpy(*dest_q15, &val, 4);
 80210da:	6a3b      	ldr	r3, [r7, #32]
 80210dc:	681b      	ldr	r3, [r3, #0]
 80210de:	69ba      	ldr	r2, [r7, #24]
 80210e0:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 80210e2:	6a3b      	ldr	r3, [r7, #32]
 80210e4:	681b      	ldr	r3, [r3, #0]
 80210e6:	1d1a      	adds	r2, r3, #4
 80210e8:	6a3b      	ldr	r3, [r7, #32]
 80210ea:	601a      	str	r2, [r3, #0]
}
 80210ec:	bf00      	nop
 80210ee:	f107 0308 	add.w	r3, r7, #8
 80210f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80210f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80210f6:	627b      	str	r3, [r7, #36]	; 0x24
    q31_t val = src_q31;
 80210f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80210fa:	617b      	str	r3, [r7, #20]
    memcpy(*dest_q15, &val, 4);
 80210fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210fe:	681b      	ldr	r3, [r3, #0]
 8021100:	697a      	ldr	r2, [r7, #20]
 8021102:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 8021104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021106:	681b      	ldr	r3, [r3, #0]
 8021108:	1d1a      	adds	r2, r3, #4
 802110a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802110c:	601a      	str	r2, [r3, #0]
}
 802110e:	bf00      	nop

        arm_nn_write_q15x2_ia(&dst, out_q15x2_1);
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
 8021110:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021114:	3b01      	subs	r3, #1
 8021116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 802111a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802111e:	2b00      	cmp	r3, #0
 8021120:	dc8a      	bgt.n	8021038 <arm_q7_to_q15_with_offset+0x3e>
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
 8021122:	687b      	ldr	r3, [r7, #4]
 8021124:	f003 0303 	and.w	r3, r3, #3
 8021128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 802112c:	e012      	b.n	8021154 <arm_q7_to_q15_with_offset+0x15a>
    {
        *dst++ = (q15_t)*src++ + offset;
 802112e:	68fb      	ldr	r3, [r7, #12]
 8021130:	1c5a      	adds	r2, r3, #1
 8021132:	60fa      	str	r2, [r7, #12]
 8021134:	f993 3000 	ldrsb.w	r3, [r3]
 8021138:	b29a      	uxth	r2, r3
 802113a:	887b      	ldrh	r3, [r7, #2]
 802113c:	4413      	add	r3, r2
 802113e:	b299      	uxth	r1, r3
 8021140:	68bb      	ldr	r3, [r7, #8]
 8021142:	1c9a      	adds	r2, r3, #2
 8021144:	60ba      	str	r2, [r7, #8]
 8021146:	b20a      	sxth	r2, r1
 8021148:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        block_cnt--;
 802114a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802114e:	3b01      	subs	r3, #1
 8021150:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 8021154:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021158:	2b00      	cmp	r3, #0
 802115a:	dce8      	bgt.n	802112e <arm_q7_to_q15_with_offset+0x134>
    }
}
 802115c:	bf00      	nop
 802115e:	bf00      	nop
 8021160:	3794      	adds	r7, #148	; 0x94
 8021162:	46bd      	mov	sp, r7
 8021164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021168:	4770      	bx	lr

0802116a <scale_q31_to_q7_and_clamp>:
                                      q7_t *target,
                                      int32_t length,
                                      const int32_t count,
                                      const int act_min,
                                      const int act_max)
{
 802116a:	b480      	push	{r7}
 802116c:	b089      	sub	sp, #36	; 0x24
 802116e:	af00      	add	r7, sp, #0
 8021170:	60f8      	str	r0, [r7, #12]
 8021172:	60b9      	str	r1, [r7, #8]
 8021174:	607a      	str	r2, [r7, #4]
 8021176:	603b      	str	r3, [r7, #0]
    const int half_count = count / 2;
 8021178:	683b      	ldr	r3, [r7, #0]
 802117a:	0fda      	lsrs	r2, r3, #31
 802117c:	4413      	add	r3, r2
 802117e:	105b      	asrs	r3, r3, #1
 8021180:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < length; i++)
 8021182:	2300      	movs	r3, #0
 8021184:	61fb      	str	r3, [r7, #28]
 8021186:	e030      	b.n	80211ea <scale_q31_to_q7_and_clamp+0x80>
    {
        int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
 8021188:	69fb      	ldr	r3, [r7, #28]
 802118a:	009b      	lsls	r3, r3, #2
 802118c:	68fa      	ldr	r2, [r7, #12]
 802118e:	4413      	add	r3, r2
 8021190:	681b      	ldr	r3, [r3, #0]
 8021192:	2b00      	cmp	r3, #0
 8021194:	dd07      	ble.n	80211a6 <scale_q31_to_q7_and_clamp+0x3c>
 8021196:	69fb      	ldr	r3, [r7, #28]
 8021198:	009b      	lsls	r3, r3, #2
 802119a:	68fa      	ldr	r2, [r7, #12]
 802119c:	4413      	add	r3, r2
 802119e:	681a      	ldr	r2, [r3, #0]
 80211a0:	69bb      	ldr	r3, [r7, #24]
 80211a2:	4413      	add	r3, r2
 80211a4:	e006      	b.n	80211b4 <scale_q31_to_q7_and_clamp+0x4a>
 80211a6:	69fb      	ldr	r3, [r7, #28]
 80211a8:	009b      	lsls	r3, r3, #2
 80211aa:	68fa      	ldr	r2, [r7, #12]
 80211ac:	4413      	add	r3, r2
 80211ae:	681a      	ldr	r2, [r3, #0]
 80211b0:	69bb      	ldr	r3, [r7, #24]
 80211b2:	1ad3      	subs	r3, r2, r3
 80211b4:	617b      	str	r3, [r7, #20]
        sum = sum / count;
 80211b6:	697a      	ldr	r2, [r7, #20]
 80211b8:	683b      	ldr	r3, [r7, #0]
 80211ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80211be:	617b      	str	r3, [r7, #20]
        sum = MAX(sum, act_min);
 80211c0:	697a      	ldr	r2, [r7, #20]
 80211c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211c4:	4293      	cmp	r3, r2
 80211c6:	bfb8      	it	lt
 80211c8:	4613      	movlt	r3, r2
 80211ca:	617b      	str	r3, [r7, #20]
        sum = MIN(sum, act_max);
 80211cc:	697a      	ldr	r2, [r7, #20]
 80211ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211d0:	4293      	cmp	r3, r2
 80211d2:	bfa8      	it	ge
 80211d4:	4613      	movge	r3, r2
 80211d6:	617b      	str	r3, [r7, #20]

        target[i] = (q7_t)sum;
 80211d8:	69fb      	ldr	r3, [r7, #28]
 80211da:	68ba      	ldr	r2, [r7, #8]
 80211dc:	4413      	add	r3, r2
 80211de:	697a      	ldr	r2, [r7, #20]
 80211e0:	b252      	sxtb	r2, r2
 80211e2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 80211e4:	69fb      	ldr	r3, [r7, #28]
 80211e6:	3301      	adds	r3, #1
 80211e8:	61fb      	str	r3, [r7, #28]
 80211ea:	69fa      	ldr	r2, [r7, #28]
 80211ec:	687b      	ldr	r3, [r7, #4]
 80211ee:	429a      	cmp	r2, r3
 80211f0:	dbca      	blt.n	8021188 <scale_q31_to_q7_and_clamp+0x1e>
    }
}
 80211f2:	bf00      	nop
 80211f4:	bf00      	nop
 80211f6:	3724      	adds	r7, #36	; 0x24
 80211f8:	46bd      	mov	sp, r7
 80211fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211fe:	4770      	bx	lr

08021200 <arm_avgpool_s8>:
                          const cmsis_nn_dims *input_dims,
                          const q7_t *src,
                          const cmsis_nn_dims *filter_dims,
                          const cmsis_nn_dims *output_dims,
                          q7_t *dst)
{
 8021200:	b580      	push	{r7, lr}
 8021202:	b0a6      	sub	sp, #152	; 0x98
 8021204:	af02      	add	r7, sp, #8
 8021206:	60f8      	str	r0, [r7, #12]
 8021208:	60b9      	str	r1, [r7, #8]
 802120a:	607a      	str	r2, [r7, #4]
 802120c:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 802120e:	687b      	ldr	r3, [r7, #4]
 8021210:	685b      	ldr	r3, [r3, #4]
 8021212:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t input_x = input_dims->w;
 8021214:	687b      	ldr	r3, [r7, #4]
 8021216:	689b      	ldr	r3, [r3, #8]
 8021218:	667b      	str	r3, [r7, #100]	; 0x64
    const int32_t output_y = output_dims->h;
 802121a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802121e:	685b      	ldr	r3, [r3, #4]
 8021220:	663b      	str	r3, [r7, #96]	; 0x60
    const int32_t output_x = output_dims->w;
 8021222:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8021226:	689b      	ldr	r3, [r3, #8]
 8021228:	65fb      	str	r3, [r7, #92]	; 0x5c
    const int32_t stride_y = pool_params->stride.h;
 802122a:	68bb      	ldr	r3, [r7, #8]
 802122c:	685b      	ldr	r3, [r3, #4]
 802122e:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t stride_x = pool_params->stride.w;
 8021230:	68bb      	ldr	r3, [r7, #8]
 8021232:	681b      	ldr	r3, [r3, #0]
 8021234:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t kernel_y = filter_dims->h;
 8021236:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802123a:	685b      	ldr	r3, [r3, #4]
 802123c:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t kernel_x = filter_dims->w;
 802123e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8021242:	689b      	ldr	r3, [r3, #8]
 8021244:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t pad_y = pool_params->padding.h;
 8021246:	68bb      	ldr	r3, [r7, #8]
 8021248:	68db      	ldr	r3, [r3, #12]
 802124a:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t pad_x = pool_params->padding.w;
 802124c:	68bb      	ldr	r3, [r7, #8]
 802124e:	689b      	ldr	r3, [r3, #8]
 8021250:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t act_min = pool_params->activation.min;
 8021252:	68bb      	ldr	r3, [r7, #8]
 8021254:	691b      	ldr	r3, [r3, #16]
 8021256:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t act_max = pool_params->activation.max;
 8021258:	68bb      	ldr	r3, [r7, #8]
 802125a:	695b      	ldr	r3, [r3, #20]
 802125c:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t ch_src = input_dims->c;
 802125e:	687b      	ldr	r3, [r7, #4]
 8021260:	68db      	ldr	r3, [r3, #12]
 8021262:	63bb      	str	r3, [r7, #56]	; 0x38
    q31_t *buffer = (q31_t *)ctx->buf;
 8021264:	68fb      	ldr	r3, [r7, #12]
 8021266:	681b      	ldr	r3, [r3, #0]
 8021268:	637b      	str	r3, [r7, #52]	; 0x34

#if defined(ARM_MATH_DSP)

    /* Run the following code for CPU's with DSP extension
     */
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 802126a:	2300      	movs	r3, #0
 802126c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8021270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021272:	425b      	negs	r3, r3
 8021274:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8021278:	e0c7      	b.n	802140a <arm_avgpool_s8+0x20a>
    {
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 802127a:	2300      	movs	r3, #0
 802127c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8021280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021282:	425b      	negs	r3, r3
 8021284:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8021288:	e0ae      	b.n	80213e8 <arm_avgpool_s8+0x1e8>
        {
            /* Condition for kernel start dimension:
                      (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t kernel_y_start = MAX(0, -idx_y);
 802128a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802128e:	2b00      	cmp	r3, #0
 8021290:	dc03      	bgt.n	802129a <arm_avgpool_s8+0x9a>
 8021292:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021296:	425b      	negs	r3, r3
 8021298:	e000      	b.n	802129c <arm_avgpool_s8+0x9c>
 802129a:	2300      	movs	r3, #0
 802129c:	633b      	str	r3, [r7, #48]	; 0x30
            const int32_t kernel_x_start = MAX(0, -idx_x);
 802129e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80212a2:	2b00      	cmp	r3, #0
 80212a4:	dc03      	bgt.n	80212ae <arm_avgpool_s8+0xae>
 80212a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80212aa:	425b      	negs	r3, r3
 80212ac:	e000      	b.n	80212b0 <arm_avgpool_s8+0xb0>
 80212ae:	2300      	movs	r3, #0
 80212b0:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Condition for kernel end dimension:
                   (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
 80212b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80212b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80212b8:	1ad3      	subs	r3, r2, r3
 80212ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80212bc:	4293      	cmp	r3, r2
 80212be:	bfa8      	it	ge
 80212c0:	4613      	movge	r3, r2
 80212c2:	62bb      	str	r3, [r7, #40]	; 0x28
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
 80212c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80212c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80212ca:	1ad3      	subs	r3, r2, r3
 80212cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80212ce:	4293      	cmp	r3, r2
 80212d0:	bfa8      	it	ge
 80212d2:	4613      	movge	r3, r2
 80212d4:	627b      	str	r3, [r7, #36]	; 0x24

            int count = 0;
 80212d6:	2300      	movs	r3, #0
 80212d8:	67fb      	str	r3, [r7, #124]	; 0x7c

            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 80212da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80212de:	e05d      	b.n	802139c <arm_avgpool_s8+0x19c>
            {
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 80212e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80212e2:	677b      	str	r3, [r7, #116]	; 0x74
 80212e4:	e053      	b.n	802138e <arm_avgpool_s8+0x18e>
                {
                    const q7_t *start = src + ch_src * (k_x + idx_x + (k_y + idx_y) * input_x);
 80212e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80212e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80212ec:	441a      	add	r2, r3
 80212ee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80212f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80212f4:	440b      	add	r3, r1
 80212f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80212f8:	fb01 f303 	mul.w	r3, r1, r3
 80212fc:	4413      	add	r3, r2
 80212fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021300:	fb02 f303 	mul.w	r3, r2, r3
 8021304:	461a      	mov	r2, r3
 8021306:	683b      	ldr	r3, [r7, #0]
 8021308:	4413      	add	r3, r2
 802130a:	623b      	str	r3, [r7, #32]

                    if (count == 0)
 802130c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802130e:	2b00      	cmp	r3, #0
 8021310:	d115      	bne.n	802133e <arm_avgpool_s8+0x13e>
                    {
                        for (int i = 0; i < ch_src; i++)
 8021312:	2300      	movs	r3, #0
 8021314:	673b      	str	r3, [r7, #112]	; 0x70
 8021316:	e00d      	b.n	8021334 <arm_avgpool_s8+0x134>
                        {
                            buffer[i] = start[i];
 8021318:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802131a:	6a3a      	ldr	r2, [r7, #32]
 802131c:	4413      	add	r3, r2
 802131e:	f993 1000 	ldrsb.w	r1, [r3]
 8021322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021324:	009b      	lsls	r3, r3, #2
 8021326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021328:	4413      	add	r3, r2
 802132a:	460a      	mov	r2, r1
 802132c:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 802132e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021330:	3301      	adds	r3, #1
 8021332:	673b      	str	r3, [r7, #112]	; 0x70
 8021334:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8021336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021338:	429a      	cmp	r2, r3
 802133a:	dbed      	blt.n	8021318 <arm_avgpool_s8+0x118>
 802133c:	e021      	b.n	8021382 <arm_avgpool_s8+0x182>
                        }
                    }
                    else
                    {
                        for (int i = 0; i < ch_src; i++)
 802133e:	2300      	movs	r3, #0
 8021340:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021342:	e01a      	b.n	802137a <arm_avgpool_s8+0x17a>
                        {
                            buffer[i] = __QADD(start[i], buffer[i]);
 8021344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021346:	6a3a      	ldr	r2, [r7, #32]
 8021348:	4413      	add	r3, r2
 802134a:	f993 3000 	ldrsb.w	r3, [r3]
 802134e:	4618      	mov	r0, r3
 8021350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021352:	009b      	lsls	r3, r3, #2
 8021354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021356:	4413      	add	r3, r2
 8021358:	681a      	ldr	r2, [r3, #0]
 802135a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802135c:	009b      	lsls	r3, r3, #2
 802135e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021360:	440b      	add	r3, r1
 8021362:	61f8      	str	r0, [r7, #28]
 8021364:	61ba      	str	r2, [r7, #24]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8021366:	69fa      	ldr	r2, [r7, #28]
 8021368:	69b9      	ldr	r1, [r7, #24]
 802136a:	fa81 f282 	qadd	r2, r2, r1
 802136e:	617a      	str	r2, [r7, #20]
  return(result);
 8021370:	697a      	ldr	r2, [r7, #20]
 8021372:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 8021374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021376:	3301      	adds	r3, #1
 8021378:	66fb      	str	r3, [r7, #108]	; 0x6c
 802137a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802137c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802137e:	429a      	cmp	r2, r3
 8021380:	dbe0      	blt.n	8021344 <arm_avgpool_s8+0x144>
                        }
                    }
                    count++;
 8021382:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021384:	3301      	adds	r3, #1
 8021386:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 8021388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802138a:	3301      	adds	r3, #1
 802138c:	677b      	str	r3, [r7, #116]	; 0x74
 802138e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8021390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021392:	429a      	cmp	r2, r3
 8021394:	dba7      	blt.n	80212e6 <arm_avgpool_s8+0xe6>
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 8021396:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021398:	3301      	adds	r3, #1
 802139a:	67bb      	str	r3, [r7, #120]	; 0x78
 802139c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 802139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213a0:	429a      	cmp	r2, r3
 80213a2:	db9d      	blt.n	80212e0 <arm_avgpool_s8+0xe0>
                }
            }

            // Prevent static code issue DIVIDE_BY_ZERO.
            if (count == 0)
 80213a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80213a6:	2b00      	cmp	r3, #0
 80213a8:	d102      	bne.n	80213b0 <arm_avgpool_s8+0x1b0>
            {
                return ARM_MATH_ARGUMENT_ERROR;
 80213aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80213ae:	e033      	b.n	8021418 <arm_avgpool_s8+0x218>
            }

            scale_q31_to_q7_and_clamp(buffer, dst, ch_src, count, act_min, act_max);
 80213b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213b2:	9301      	str	r3, [sp, #4]
 80213b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80213b6:	9300      	str	r3, [sp, #0]
 80213b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80213ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80213bc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80213c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80213c2:	f7ff fed2 	bl	802116a <scale_q31_to_q7_and_clamp>
            dst += ch_src;
 80213c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80213c8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80213cc:	4413      	add	r3, r2
 80213ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 80213d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80213d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80213d8:	4413      	add	r3, r2
 80213da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80213de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80213e2:	3301      	adds	r3, #1
 80213e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80213e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80213ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80213ee:	429a      	cmp	r2, r3
 80213f0:	f6ff af4b 	blt.w	802128a <arm_avgpool_s8+0x8a>
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 80213f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80213f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80213fa:	4413      	add	r3, r2
 80213fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8021400:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021404:	3301      	adds	r3, #1
 8021406:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802140a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802140e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021410:	429a      	cmp	r2, r3
 8021412:	f6ff af32 	blt.w	802127a <arm_avgpool_s8+0x7a>
            }
        }
    }

#endif
    return ARM_MATH_SUCCESS;
 8021416:	2300      	movs	r3, #0
}
 8021418:	4618      	mov	r0, r3
 802141a:	3790      	adds	r7, #144	; 0x90
 802141c:	46bd      	mov	sp, r7
 802141e:	bd80      	pop	{r7, pc}

08021420 <arm_avgpool_s8_get_buffer_size>:

#endif /* ARM_MATH_MVEI */

int32_t arm_avgpool_s8_get_buffer_size(const int output_x, const int ch_src)
{
 8021420:	b480      	push	{r7}
 8021422:	b083      	sub	sp, #12
 8021424:	af00      	add	r7, sp, #0
 8021426:	6078      	str	r0, [r7, #4]
 8021428:	6039      	str	r1, [r7, #0]
    (void)output_x;

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (ch_src * sizeof(int32_t));
 802142a:	683b      	ldr	r3, [r7, #0]
 802142c:	009b      	lsls	r3, r3, #2
#else
    (void)ch_src;
    return 0;
#endif
}
 802142e:	4618      	mov	r0, r3
 8021430:	370c      	adds	r7, #12
 8021432:	46bd      	mov	sp, r7
 8021434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021438:	4770      	bx	lr

0802143a <compare_and_replace_if_larger_q7>:

#include "arm_nnfunctions.h"
#include "arm_nnsupportfunctions.h"

static void compare_and_replace_if_larger_q7(q7_t *base, const q7_t *target, int32_t length)
{
 802143a:	b480      	push	{r7}
 802143c:	b091      	sub	sp, #68	; 0x44
 802143e:	af00      	add	r7, sp, #0
 8021440:	60f8      	str	r0, [r7, #12]
 8021442:	60b9      	str	r1, [r7, #8]
 8021444:	607a      	str	r2, [r7, #4]
        base += 16;
        target += 16;
        length -= 16;
    }
#else
    q7_t *dst = base;
 8021446:	68fb      	ldr	r3, [r7, #12]
 8021448:	62bb      	str	r3, [r7, #40]	; 0x28
    const q7_t *src = target;
 802144a:	68bb      	ldr	r3, [r7, #8]
 802144c:	627b      	str	r3, [r7, #36]	; 0x24
    union arm_nnword ref_max;
    union arm_nnword comp_max;
    int32_t cnt = length >> 2;
 802144e:	687b      	ldr	r3, [r7, #4]
 8021450:	109b      	asrs	r3, r3, #2
 8021452:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (cnt > 0l)
 8021454:	e050      	b.n	80214f8 <compare_and_replace_if_larger_q7+0xbe>
    {
        ref_max.word = arm_nn_read_q7x4(dst);
 8021456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021458:	637b      	str	r3, [r7, #52]	; 0x34
 802145a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802145c:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 802145e:	617b      	str	r3, [r7, #20]
    return (val);
 8021460:	697b      	ldr	r3, [r7, #20]
 8021462:	623b      	str	r3, [r7, #32]
 8021464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021468:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&val, *in_q7, 4);
 802146a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802146c:	681b      	ldr	r3, [r3, #0]
 802146e:	681b      	ldr	r3, [r3, #0]
 8021470:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 8021472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021474:	681b      	ldr	r3, [r3, #0]
 8021476:	1d1a      	adds	r2, r3, #4
 8021478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802147a:	601a      	str	r2, [r3, #0]
    return (val);
 802147c:	693b      	ldr	r3, [r7, #16]
        comp_max.word = arm_nn_read_q7x4_ia(&src);
 802147e:	61fb      	str	r3, [r7, #28]

        if (comp_max.bytes[0] > ref_max.bytes[0])
 8021480:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8021484:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8021488:	429a      	cmp	r2, r3
 802148a:	dd03      	ble.n	8021494 <compare_and_replace_if_larger_q7+0x5a>
        {
            ref_max.bytes[0] = comp_max.bytes[0];
 802148c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8021490:	f887 3020 	strb.w	r3, [r7, #32]
        }
        if (comp_max.bytes[1] > ref_max.bytes[1])
 8021494:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8021498:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 802149c:	429a      	cmp	r2, r3
 802149e:	dd03      	ble.n	80214a8 <compare_and_replace_if_larger_q7+0x6e>
        {
            ref_max.bytes[1] = comp_max.bytes[1];
 80214a0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80214a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        }
        if (comp_max.bytes[2] > ref_max.bytes[2])
 80214a8:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80214ac:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80214b0:	429a      	cmp	r2, r3
 80214b2:	dd03      	ble.n	80214bc <compare_and_replace_if_larger_q7+0x82>
        {
            ref_max.bytes[2] = comp_max.bytes[2];
 80214b4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80214b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        }
        if (comp_max.bytes[3] > ref_max.bytes[3])
 80214bc:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80214c0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80214c4:	429a      	cmp	r2, r3
 80214c6:	dd03      	ble.n	80214d0 <compare_and_replace_if_larger_q7+0x96>
        {
            ref_max.bytes[3] = comp_max.bytes[3];
 80214c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80214cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }

        write_q7x4_ia(&dst, ref_max.word);
 80214d0:	6a3b      	ldr	r3, [r7, #32]
 80214d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80214d6:	633a      	str	r2, [r7, #48]	; 0x30
 80214d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE void write_q7x4_ia (
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
 80214da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80214dc:	61bb      	str	r3, [r7, #24]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 80214de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214e0:	681b      	ldr	r3, [r3, #0]
 80214e2:	69ba      	ldr	r2, [r7, #24]
 80214e4:	601a      	str	r2, [r3, #0]
  (*pQ7)[1] = (val >> 8) & 0x0FF;
  (*pQ7)[2] = (val >> 16) & 0x0FF;
  (*pQ7)[3] = (val >> 24) & 0x0FF;

#endif
  *pQ7 += 4;
 80214e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214e8:	681b      	ldr	r3, [r3, #0]
 80214ea:	1d1a      	adds	r2, r3, #4
 80214ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214ee:	601a      	str	r2, [r3, #0]
}
 80214f0:	bf00      	nop

        cnt--;
 80214f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80214f4:	3b01      	subs	r3, #1
 80214f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 80214f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80214fa:	2b00      	cmp	r3, #0
 80214fc:	dcab      	bgt.n	8021456 <compare_and_replace_if_larger_q7+0x1c>
    }

    cnt = length & 0x3;
 80214fe:	687b      	ldr	r3, [r7, #4]
 8021500:	f003 0303 	and.w	r3, r3, #3
 8021504:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 8021506:	e015      	b.n	8021534 <compare_and_replace_if_larger_q7+0xfa>
    {
        if (*src > *dst)
 8021508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802150a:	f993 2000 	ldrsb.w	r2, [r3]
 802150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021510:	f993 3000 	ldrsb.w	r3, [r3]
 8021514:	429a      	cmp	r2, r3
 8021516:	dd04      	ble.n	8021522 <compare_and_replace_if_larger_q7+0xe8>
        {
            *dst = *src;
 8021518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802151a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802151c:	f992 2000 	ldrsb.w	r2, [r2]
 8021520:	701a      	strb	r2, [r3, #0]
        }
        dst++;
 8021522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021524:	3301      	adds	r3, #1
 8021526:	62bb      	str	r3, [r7, #40]	; 0x28
        src++;
 8021528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802152a:	3301      	adds	r3, #1
 802152c:	627b      	str	r3, [r7, #36]	; 0x24
        cnt--;
 802152e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021530:	3b01      	subs	r3, #1
 8021532:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 8021534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021536:	2b00      	cmp	r3, #0
 8021538:	dce6      	bgt.n	8021508 <compare_and_replace_if_larger_q7+0xce>
    }
#endif
}
 802153a:	bf00      	nop
 802153c:	bf00      	nop
 802153e:	3744      	adds	r7, #68	; 0x44
 8021540:	46bd      	mov	sp, r7
 8021542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021546:	4770      	bx	lr

08021548 <clamp_output>:

static void clamp_output(q7_t *source, int32_t length, const int32_t act_min, const int32_t act_max)
{
 8021548:	b480      	push	{r7}
 802154a:	b08d      	sub	sp, #52	; 0x34
 802154c:	af00      	add	r7, sp, #0
 802154e:	60f8      	str	r0, [r7, #12]
 8021550:	60b9      	str	r1, [r7, #8]
 8021552:	607a      	str	r2, [r7, #4]
 8021554:	603b      	str	r3, [r7, #0]
        vstrbq_p_s8(source, res, p);
        source += 16;
    }
#else
    union arm_nnword in;
    int32_t cnt = length >> 2;
 8021556:	68bb      	ldr	r3, [r7, #8]
 8021558:	109b      	asrs	r3, r3, #2
 802155a:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (cnt > 0l)
 802155c:	e062      	b.n	8021624 <clamp_output+0xdc>
    {
        in.word = arm_nn_read_q7x4(source);
 802155e:	68fb      	ldr	r3, [r7, #12]
 8021560:	61fb      	str	r3, [r7, #28]
 8021562:	69fb      	ldr	r3, [r7, #28]
 8021564:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 8021566:	617b      	str	r3, [r7, #20]
    return (val);
 8021568:	697b      	ldr	r3, [r7, #20]
 802156a:	61bb      	str	r3, [r7, #24]

        in.bytes[0] = MAX(in.bytes[0], act_min);
 802156c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8021570:	461a      	mov	r2, r3
 8021572:	687b      	ldr	r3, [r7, #4]
 8021574:	4293      	cmp	r3, r2
 8021576:	bfb8      	it	lt
 8021578:	4613      	movlt	r3, r2
 802157a:	b25b      	sxtb	r3, r3
 802157c:	763b      	strb	r3, [r7, #24]
        in.bytes[0] = MIN(in.bytes[0], act_max);
 802157e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8021582:	461a      	mov	r2, r3
 8021584:	683b      	ldr	r3, [r7, #0]
 8021586:	4293      	cmp	r3, r2
 8021588:	bfa8      	it	ge
 802158a:	4613      	movge	r3, r2
 802158c:	b25b      	sxtb	r3, r3
 802158e:	763b      	strb	r3, [r7, #24]
        in.bytes[1] = MAX(in.bytes[1], act_min);
 8021590:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8021594:	461a      	mov	r2, r3
 8021596:	687b      	ldr	r3, [r7, #4]
 8021598:	4293      	cmp	r3, r2
 802159a:	bfb8      	it	lt
 802159c:	4613      	movlt	r3, r2
 802159e:	b25b      	sxtb	r3, r3
 80215a0:	767b      	strb	r3, [r7, #25]
        in.bytes[1] = MIN(in.bytes[1], act_max);
 80215a2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80215a6:	461a      	mov	r2, r3
 80215a8:	683b      	ldr	r3, [r7, #0]
 80215aa:	4293      	cmp	r3, r2
 80215ac:	bfa8      	it	ge
 80215ae:	4613      	movge	r3, r2
 80215b0:	b25b      	sxtb	r3, r3
 80215b2:	767b      	strb	r3, [r7, #25]
        in.bytes[2] = MAX(in.bytes[2], act_min);
 80215b4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80215b8:	461a      	mov	r2, r3
 80215ba:	687b      	ldr	r3, [r7, #4]
 80215bc:	4293      	cmp	r3, r2
 80215be:	bfb8      	it	lt
 80215c0:	4613      	movlt	r3, r2
 80215c2:	b25b      	sxtb	r3, r3
 80215c4:	76bb      	strb	r3, [r7, #26]
        in.bytes[2] = MIN(in.bytes[2], act_max);
 80215c6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80215ca:	461a      	mov	r2, r3
 80215cc:	683b      	ldr	r3, [r7, #0]
 80215ce:	4293      	cmp	r3, r2
 80215d0:	bfa8      	it	ge
 80215d2:	4613      	movge	r3, r2
 80215d4:	b25b      	sxtb	r3, r3
 80215d6:	76bb      	strb	r3, [r7, #26]
        in.bytes[3] = MAX(in.bytes[3], act_min);
 80215d8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80215dc:	461a      	mov	r2, r3
 80215de:	687b      	ldr	r3, [r7, #4]
 80215e0:	4293      	cmp	r3, r2
 80215e2:	bfb8      	it	lt
 80215e4:	4613      	movlt	r3, r2
 80215e6:	b25b      	sxtb	r3, r3
 80215e8:	76fb      	strb	r3, [r7, #27]
        in.bytes[3] = MIN(in.bytes[3], act_max);
 80215ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80215ee:	461a      	mov	r2, r3
 80215f0:	683b      	ldr	r3, [r7, #0]
 80215f2:	4293      	cmp	r3, r2
 80215f4:	bfa8      	it	ge
 80215f6:	4613      	movge	r3, r2
 80215f8:	b25b      	sxtb	r3, r3
 80215fa:	76fb      	strb	r3, [r7, #27]

        write_q7x4_ia(&source, in.word);
 80215fc:	69bb      	ldr	r3, [r7, #24]
 80215fe:	f107 020c 	add.w	r2, r7, #12
 8021602:	627a      	str	r2, [r7, #36]	; 0x24
 8021604:	623b      	str	r3, [r7, #32]
  q31_t val = value;
 8021606:	6a3b      	ldr	r3, [r7, #32]
 8021608:	613b      	str	r3, [r7, #16]
  memcpy (*pQ7, &val, 4);
 802160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802160c:	681b      	ldr	r3, [r3, #0]
 802160e:	693a      	ldr	r2, [r7, #16]
 8021610:	601a      	str	r2, [r3, #0]
  *pQ7 += 4;
 8021612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021614:	681b      	ldr	r3, [r3, #0]
 8021616:	1d1a      	adds	r2, r3, #4
 8021618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802161a:	601a      	str	r2, [r3, #0]
}
 802161c:	bf00      	nop
        cnt--;
 802161e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021620:	3b01      	subs	r3, #1
 8021622:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 8021624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021626:	2b00      	cmp	r3, #0
 8021628:	dc99      	bgt.n	802155e <clamp_output+0x16>
    }

    cnt = length & 0x3;
 802162a:	68bb      	ldr	r3, [r7, #8]
 802162c:	f003 0303 	and.w	r3, r3, #3
 8021630:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 8021632:	e018      	b.n	8021666 <clamp_output+0x11e>
    {
        int32_t comp = *source;
 8021634:	68fb      	ldr	r3, [r7, #12]
 8021636:	f993 3000 	ldrsb.w	r3, [r3]
 802163a:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MAX(comp, act_min);
 802163c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802163e:	687b      	ldr	r3, [r7, #4]
 8021640:	4293      	cmp	r3, r2
 8021642:	bfb8      	it	lt
 8021644:	4613      	movlt	r3, r2
 8021646:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MIN(comp, act_max);
 8021648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802164a:	683b      	ldr	r3, [r7, #0]
 802164c:	4293      	cmp	r3, r2
 802164e:	bfa8      	it	ge
 8021650:	4613      	movge	r3, r2
 8021652:	62bb      	str	r3, [r7, #40]	; 0x28
        *source++ = (int8_t)comp;
 8021654:	68fb      	ldr	r3, [r7, #12]
 8021656:	1c5a      	adds	r2, r3, #1
 8021658:	60fa      	str	r2, [r7, #12]
 802165a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802165c:	b252      	sxtb	r2, r2
 802165e:	701a      	strb	r2, [r3, #0]
        cnt--;
 8021660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021662:	3b01      	subs	r3, #1
 8021664:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 8021666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021668:	2b00      	cmp	r3, #0
 802166a:	dce3      	bgt.n	8021634 <clamp_output+0xec>
    }
#endif
}
 802166c:	bf00      	nop
 802166e:	bf00      	nop
 8021670:	3734      	adds	r7, #52	; 0x34
 8021672:	46bd      	mov	sp, r7
 8021674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021678:	4770      	bx	lr

0802167a <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
 802167a:	b580      	push	{r7, lr}
 802167c:	b09e      	sub	sp, #120	; 0x78
 802167e:	af00      	add	r7, sp, #0
 8021680:	60f8      	str	r0, [r7, #12]
 8021682:	60b9      	str	r1, [r7, #8]
 8021684:	607a      	str	r2, [r7, #4]
 8021686:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 8021688:	687b      	ldr	r3, [r7, #4]
 802168a:	685b      	ldr	r3, [r3, #4]
 802168c:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t input_x = input_dims->w;
 802168e:	687b      	ldr	r3, [r7, #4]
 8021690:	689b      	ldr	r3, [r3, #8]
 8021692:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t output_y = output_dims->h;
 8021694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8021698:	685b      	ldr	r3, [r3, #4]
 802169a:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t output_x = output_dims->w;
 802169c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80216a0:	689b      	ldr	r3, [r3, #8]
 80216a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t stride_y = pool_params->stride.h;
 80216a4:	68bb      	ldr	r3, [r7, #8]
 80216a6:	685b      	ldr	r3, [r3, #4]
 80216a8:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t stride_x = pool_params->stride.w;
 80216aa:	68bb      	ldr	r3, [r7, #8]
 80216ac:	681b      	ldr	r3, [r3, #0]
 80216ae:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t kernel_y = filter_dims->h;
 80216b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80216b4:	685b      	ldr	r3, [r3, #4]
 80216b6:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t kernel_x = filter_dims->w;
 80216b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80216bc:	689b      	ldr	r3, [r3, #8]
 80216be:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t pad_y = pool_params->padding.h;
 80216c0:	68bb      	ldr	r3, [r7, #8]
 80216c2:	68db      	ldr	r3, [r3, #12]
 80216c4:	63bb      	str	r3, [r7, #56]	; 0x38
    const int32_t pad_x = pool_params->padding.w;
 80216c6:	68bb      	ldr	r3, [r7, #8]
 80216c8:	689b      	ldr	r3, [r3, #8]
 80216ca:	637b      	str	r3, [r7, #52]	; 0x34
    const int32_t act_min = pool_params->activation.min;
 80216cc:	68bb      	ldr	r3, [r7, #8]
 80216ce:	691b      	ldr	r3, [r3, #16]
 80216d0:	633b      	str	r3, [r7, #48]	; 0x30
    const int32_t act_max = pool_params->activation.max;
 80216d2:	68bb      	ldr	r3, [r7, #8]
 80216d4:	695b      	ldr	r3, [r3, #20]
 80216d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32_t channel_in = input_dims->c;
 80216d8:	687b      	ldr	r3, [r7, #4]
 80216da:	68db      	ldr	r3, [r3, #12]
 80216dc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)ctx;
    q7_t *dst_base = dst;
 80216de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80216e2:	627b      	str	r3, [r7, #36]	; 0x24

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 80216e4:	2300      	movs	r3, #0
 80216e6:	677b      	str	r3, [r7, #116]	; 0x74
 80216e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80216ea:	425b      	negs	r3, r3
 80216ec:	673b      	str	r3, [r7, #112]	; 0x70
 80216ee:	e078      	b.n	80217e2 <arm_max_pool_s8+0x168>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 80216f0:	2300      	movs	r3, #0
 80216f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80216f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80216f6:	425b      	negs	r3, r3
 80216f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80216fa:	e067      	b.n	80217cc <arm_max_pool_s8+0x152>
        {
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
 80216fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80216fe:	2b00      	cmp	r3, #0
 8021700:	dc02      	bgt.n	8021708 <arm_max_pool_s8+0x8e>
 8021702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021704:	425b      	negs	r3, r3
 8021706:	e000      	b.n	802170a <arm_max_pool_s8+0x90>
 8021708:	2300      	movs	r3, #0
 802170a:	623b      	str	r3, [r7, #32]
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 802170c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802170e:	2b00      	cmp	r3, #0
 8021710:	dc02      	bgt.n	8021718 <arm_max_pool_s8+0x9e>
 8021712:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021714:	425b      	negs	r3, r3
 8021716:	e000      	b.n	802171a <arm_max_pool_s8+0xa0>
 8021718:	2300      	movs	r3, #0
 802171a:	61fb      	str	r3, [r7, #28]

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 802171c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802171e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021720:	1ad3      	subs	r3, r2, r3
 8021722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021724:	4293      	cmp	r3, r2
 8021726:	bfa8      	it	ge
 8021728:	4613      	movge	r3, r2
 802172a:	61bb      	str	r3, [r7, #24]
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 802172c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802172e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021730:	1ad3      	subs	r3, r2, r3
 8021732:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021734:	4293      	cmp	r3, r2
 8021736:	bfa8      	it	ge
 8021738:	4613      	movge	r3, r2
 802173a:	617b      	str	r3, [r7, #20]

            int count = 0;
 802173c:	2300      	movs	r3, #0
 802173e:	667b      	str	r3, [r7, #100]	; 0x64

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 8021740:	6a3b      	ldr	r3, [r7, #32]
 8021742:	663b      	str	r3, [r7, #96]	; 0x60
 8021744:	e031      	b.n	80217aa <arm_max_pool_s8+0x130>
            {
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 8021746:	69fb      	ldr	r3, [r7, #28]
 8021748:	65fb      	str	r3, [r7, #92]	; 0x5c
 802174a:	e027      	b.n	802179c <arm_max_pool_s8+0x122>
                {
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 802174c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802174e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021750:	441a      	add	r2, r3
 8021752:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8021754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021756:	440b      	add	r3, r1
 8021758:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802175a:	fb01 f303 	mul.w	r3, r1, r3
 802175e:	4413      	add	r3, r2
 8021760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021762:	fb02 f303 	mul.w	r3, r2, r3
 8021766:	461a      	mov	r2, r3
 8021768:	683b      	ldr	r3, [r7, #0]
 802176a:	4413      	add	r3, r2
 802176c:	613b      	str	r3, [r7, #16]

                    if (count == 0)
 802176e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021770:	2b00      	cmp	r3, #0
 8021772:	d10a      	bne.n	802178a <arm_max_pool_s8+0x110>
                    {
                        memcpy(dst, start, channel_in);
 8021774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021776:	461a      	mov	r2, r3
 8021778:	6939      	ldr	r1, [r7, #16]
 802177a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 802177e:	f003 fc19 	bl	8024fb4 <memcpy>
                        count++;
 8021782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021784:	3301      	adds	r3, #1
 8021786:	667b      	str	r3, [r7, #100]	; 0x64
 8021788:	e005      	b.n	8021796 <arm_max_pool_s8+0x11c>
                    }
                    else
                    {
                        compare_and_replace_if_larger_q7(dst, start, channel_in);
 802178a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802178c:	6939      	ldr	r1, [r7, #16]
 802178e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8021792:	f7ff fe52 	bl	802143a <compare_and_replace_if_larger_q7>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 8021796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021798:	3301      	adds	r3, #1
 802179a:	65fb      	str	r3, [r7, #92]	; 0x5c
 802179c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802179e:	697b      	ldr	r3, [r7, #20]
 80217a0:	429a      	cmp	r2, r3
 80217a2:	dbd3      	blt.n	802174c <arm_max_pool_s8+0xd2>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 80217a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80217a6:	3301      	adds	r3, #1
 80217a8:	663b      	str	r3, [r7, #96]	; 0x60
 80217aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80217ac:	69bb      	ldr	r3, [r7, #24]
 80217ae:	429a      	cmp	r2, r3
 80217b0:	dbc9      	blt.n	8021746 <arm_max_pool_s8+0xcc>
                    }
                }
            }
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
 80217b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80217b8:	4413      	add	r3, r2
 80217ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 80217be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80217c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80217c2:	4413      	add	r3, r2
 80217c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80217c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80217c8:	3301      	adds	r3, #1
 80217ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80217cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80217ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80217d0:	429a      	cmp	r2, r3
 80217d2:	db93      	blt.n	80216fc <arm_max_pool_s8+0x82>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 80217d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80217d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80217d8:	4413      	add	r3, r2
 80217da:	673b      	str	r3, [r7, #112]	; 0x70
 80217dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80217de:	3301      	adds	r3, #1
 80217e0:	677b      	str	r3, [r7, #116]	; 0x74
 80217e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80217e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80217e6:	429a      	cmp	r2, r3
 80217e8:	db82      	blt.n	80216f0 <arm_max_pool_s8+0x76>
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 80217ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80217ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80217ee:	fb02 f303 	mul.w	r3, r2, r3
 80217f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80217f4:	fb02 f103 	mul.w	r1, r2, r3
 80217f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80217fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80217fe:	f7ff fea3 	bl	8021548 <clamp_output>

    return ARM_MATH_SUCCESS;
 8021802:	2300      	movs	r3, #0
}
 8021804:	4618      	mov	r0, r3
 8021806:	3778      	adds	r7, #120	; 0x78
 8021808:	46bd      	mov	sp, r7
 802180a:	bd80      	pop	{r7, pc}
 802180c:	0000      	movs	r0, r0
	...

08021810 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 8021810:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8021814:	f5ad 6dbf 	sub.w	sp, sp, #1528	; 0x5f8
 8021818:	af00      	add	r7, sp, #0
 802181a:	f507 740d 	add.w	r4, r7, #564	; 0x234
 802181e:	6020      	str	r0, [r4, #0]
 8021820:	f507 700c 	add.w	r0, r7, #560	; 0x230
 8021824:	6001      	str	r1, [r0, #0]
 8021826:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 802182a:	600a      	str	r2, [r1, #0]
 802182c:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8021830:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 8021832:	2201      	movs	r2, #1
 8021834:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8021838:	fa02 f303 	lsl.w	r3, r2, r3
 802183c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4

    int32_t col = 0;
 8021840:	2300      	movs	r3, #0
 8021842:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8021846:	2300      	movs	r3, #0
 8021848:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 802184c:	f003 b84a 	b.w	80248e4 <arm_softmax_s8+0x30d4>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 8021850:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8021854:	681b      	ldr	r3, [r3, #0]
 8021856:	781b      	ldrb	r3, [r3, #0]
 8021858:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef

        for (col = 1; col < row_size; ++col)
 802185c:	2301      	movs	r3, #1
 802185e:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8021862:	e013      	b.n	802188c <arm_softmax_s8+0x7c>
        {
            max = MAX(max, input[col]);
 8021864:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8021868:	f507 730d 	add.w	r3, r7, #564	; 0x234
 802186c:	681b      	ldr	r3, [r3, #0]
 802186e:	4413      	add	r3, r2
 8021870:	f993 2000 	ldrsb.w	r2, [r3]
 8021874:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 8021878:	4293      	cmp	r3, r2
 802187a:	bfb8      	it	lt
 802187c:	4613      	movlt	r3, r2
 802187e:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef
        for (col = 1; col < row_size; ++col)
 8021882:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8021886:	3301      	adds	r3, #1
 8021888:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 802188c:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8021890:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8021894:	681b      	ldr	r3, [r3, #0]
 8021896:	429a      	cmp	r2, r3
 8021898:	dbe4      	blt.n	8021864 <arm_softmax_s8+0x54>
        }

        int32_t diff = 0;
 802189a:	2300      	movs	r3, #0
 802189c:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
        int32_t sum = 0;
 80218a0:	2300      	movs	r3, #0
 80218a2:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

        for (col = 0; col < row_size; ++col)
 80218a6:	2300      	movs	r3, #0
 80218a8:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80218ac:	f001 b8a1 	b.w	80229f2 <arm_softmax_s8+0x11e2>
        {
            diff = input[col] - max;
 80218b0:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 80218b4:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80218b8:	681b      	ldr	r3, [r3, #0]
 80218ba:	4413      	add	r3, r2
 80218bc:	f993 3000 	ldrsb.w	r3, [r3]
 80218c0:	461a      	mov	r2, r3
 80218c2:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 80218c6:	1ad3      	subs	r3, r2, r3
 80218c8:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
            if (diff >= diff_min)
 80218cc:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 80218d0:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 80218d4:	429a      	cmp	r2, r3
 80218d6:	f2c1 8087 	blt.w	80229e8 <arm_softmax_s8+0x11d8>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 80218da:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 80218de:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 80218e2:	fb03 f202 	mul.w	r2, r3, r2
 80218e6:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 80218ea:	601a      	str	r2, [r3, #0]
 80218ec:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80218f0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80218f4:	681b      	ldr	r3, [r3, #0]
 80218f6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80218f8:	f207 4294 	addw	r2, r7, #1172	; 0x494
 80218fc:	2300      	movs	r3, #0
 80218fe:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8021900:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021904:	f04f 0300 	mov.w	r3, #0
 8021908:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 802190c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021910:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 8021914:	681b      	ldr	r3, [r3, #0]
 8021916:	0fdb      	lsrs	r3, r3, #31
 8021918:	b2da      	uxtb	r2, r3
 802191a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 802191e:	681b      	ldr	r3, [r3, #0]
 8021920:	0fdb      	lsrs	r3, r3, #31
 8021922:	b2db      	uxtb	r3, r3
 8021924:	4053      	eors	r3, r2
 8021926:	b2db      	uxtb	r3, r3
 8021928:	2b00      	cmp	r3, #0
 802192a:	d014      	beq.n	8021956 <arm_softmax_s8+0x146>
        mult = 1 - mult;
 802192c:	f04f 0001 	mov.w	r0, #1
 8021930:	f04f 0100 	mov.w	r1, #0
 8021934:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8021938:	e9d3 2300 	ldrd	r2, r3, [r3]
 802193c:	1a84      	subs	r4, r0, r2
 802193e:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 8021942:	eb61 0303 	sbc.w	r3, r1, r3
 8021946:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802194a:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 802194e:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8021952:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021956:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 802195a:	681b      	ldr	r3, [r3, #0]
 802195c:	4618      	mov	r0, r3
 802195e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8021962:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8021966:	681b      	ldr	r3, [r3, #0]
 8021968:	461a      	mov	r2, r3
 802196a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802196e:	fb02 f501 	mul.w	r5, r2, r1
 8021972:	fb00 f403 	mul.w	r4, r0, r3
 8021976:	442c      	add	r4, r5
 8021978:	fba0 0102 	umull	r0, r1, r0, r2
 802197c:	1863      	adds	r3, r4, r1
 802197e:	4619      	mov	r1, r3
 8021980:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8021984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021988:	1814      	adds	r4, r2, r0
 802198a:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 802198e:	414b      	adcs	r3, r1
 8021990:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8021994:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	; 0x218
 8021998:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 802199c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80219a0:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80219a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219a8:	4610      	mov	r0, r2
 80219aa:	4619      	mov	r1, r3
 80219ac:	2800      	cmp	r0, #0
 80219ae:	f171 0300 	sbcs.w	r3, r1, #0
 80219b2:	da06      	bge.n	80219c2 <arm_softmax_s8+0x1b2>
 80219b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80219b8:	f04f 0300 	mov.w	r3, #0
 80219bc:	1880      	adds	r0, r0, r2
 80219be:	eb43 0101 	adc.w	r1, r3, r1
 80219c2:	f04f 0200 	mov.w	r2, #0
 80219c6:	f04f 0300 	mov.w	r3, #0
 80219ca:	0fc2      	lsrs	r2, r0, #31
 80219cc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80219d0:	17cb      	asrs	r3, r1, #31
 80219d2:	4610      	mov	r0, r2
 80219d4:	4619      	mov	r1, r3
 80219d6:	f207 4294 	addw	r2, r7, #1172	; 0x494
 80219da:	4603      	mov	r3, r0
 80219dc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80219de:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 80219e2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80219e6:	6812      	ldr	r2, [r2, #0]
 80219e8:	681b      	ldr	r3, [r3, #0]
 80219ea:	429a      	cmp	r2, r3
 80219ec:	d10a      	bne.n	8021a04 <arm_softmax_s8+0x1f4>
 80219ee:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 80219f2:	681b      	ldr	r3, [r3, #0]
 80219f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80219f8:	d104      	bne.n	8021a04 <arm_softmax_s8+0x1f4>
        result = Q31_MAX;
 80219fa:	f207 4294 	addw	r2, r7, #1172	; 0x494
 80219fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021a02:	6013      	str	r3, [r2, #0]
    return result;
 8021a04:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8021a08:	681b      	ldr	r3, [r3, #0]
 8021a0a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
    int32_t mask = 0;
 8021a0e:	2300      	movs	r3, #0
 8021a10:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
    int32_t shift = 24;
 8021a14:	2318      	movs	r3, #24
 8021a16:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8021a1a:	2201      	movs	r2, #1
 8021a1c:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 8021a20:	fa02 f303 	lsl.w	r3, r2, r3
 8021a24:	1e5a      	subs	r2, r3, #1
 8021a26:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8021a2a:	ea02 0103 	and.w	r1, r2, r3
 8021a2e:	2201      	movs	r2, #1
 8021a30:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 8021a34:	fa02 f303 	lsl.w	r3, r2, r3
 8021a38:	1acb      	subs	r3, r1, r3
 8021a3a:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
    const int32_t remainder = val_mod_minus_quarter - val;
 8021a3e:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 8021a42:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8021a46:	1ad3      	subs	r3, r2, r3
 8021a48:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8021a4c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8021a50:	015b      	lsls	r3, r3, #5
 8021a52:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8021a56:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8021a5a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8021a5e:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 8021a62:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8021a66:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
    q31_t result = 0;
 8021a6a:	2300      	movs	r3, #0
 8021a6c:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    q63_t mult = 1 << 30;
 8021a70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021a74:	f04f 0300 	mov.w	r3, #0
 8021a78:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8021a7c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021a80:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8021a84:	0fdb      	lsrs	r3, r3, #31
 8021a86:	b2da      	uxtb	r2, r3
 8021a88:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8021a8c:	0fdb      	lsrs	r3, r3, #31
 8021a8e:	b2db      	uxtb	r3, r3
 8021a90:	4053      	eors	r3, r2
 8021a92:	b2db      	uxtb	r3, r3
 8021a94:	2b00      	cmp	r3, #0
 8021a96:	d014      	beq.n	8021ac2 <arm_softmax_s8+0x2b2>
        mult = 1 - mult;
 8021a98:	f04f 0001 	mov.w	r0, #1
 8021a9c:	f04f 0100 	mov.w	r1, #0
 8021aa0:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8021aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021aa8:	1a84      	subs	r4, r0, r2
 8021aaa:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 8021aae:	eb61 0303 	sbc.w	r3, r1, r3
 8021ab2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8021ab6:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 8021aba:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8021abe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021ac2:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8021ac6:	4618      	mov	r0, r3
 8021ac8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8021acc:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8021ad0:	461a      	mov	r2, r3
 8021ad2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021ad6:	fb02 f501 	mul.w	r5, r2, r1
 8021ada:	fb00 f403 	mul.w	r4, r0, r3
 8021ade:	442c      	add	r4, r5
 8021ae0:	fba0 0102 	umull	r0, r1, r0, r2
 8021ae4:	1863      	adds	r3, r4, r1
 8021ae6:	4619      	mov	r1, r3
 8021ae8:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8021aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021af0:	1814      	adds	r4, r2, r0
 8021af2:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 8021af6:	414b      	adcs	r3, r1
 8021af8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8021afc:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8021b00:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8021b04:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021b08:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8021b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b10:	4610      	mov	r0, r2
 8021b12:	4619      	mov	r1, r3
 8021b14:	2800      	cmp	r0, #0
 8021b16:	f171 0300 	sbcs.w	r3, r1, #0
 8021b1a:	da06      	bge.n	8021b2a <arm_softmax_s8+0x31a>
 8021b1c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021b20:	f04f 0300 	mov.w	r3, #0
 8021b24:	1880      	adds	r0, r0, r2
 8021b26:	eb43 0101 	adc.w	r1, r3, r1
 8021b2a:	f04f 0200 	mov.w	r2, #0
 8021b2e:	f04f 0300 	mov.w	r3, #0
 8021b32:	0fc2      	lsrs	r2, r0, #31
 8021b34:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021b38:	17cb      	asrs	r3, r1, #31
 8021b3a:	4613      	mov	r3, r2
 8021b3c:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8021b40:	f8d7 25a0 	ldr.w	r2, [r7, #1440]	; 0x5a0
 8021b44:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8021b48:	429a      	cmp	r2, r3
 8021b4a:	d108      	bne.n	8021b5e <arm_softmax_s8+0x34e>
 8021b4c:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8021b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021b54:	d103      	bne.n	8021b5e <arm_softmax_s8+0x34e>
        result = Q31_MAX;
 8021b56:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021b5a:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    return result;
 8021b5e:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
    const int32_t x2 = MUL_SAT(x, x);
 8021b62:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8021b66:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8021b6a:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 8021b6e:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8021b72:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
    q31_t result = 0;
 8021b76:	2300      	movs	r3, #0
 8021b78:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    q63_t mult = 1 << 30;
 8021b7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021b80:	f04f 0300 	mov.w	r3, #0
 8021b84:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8021b88:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021b8c:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8021b90:	0fdb      	lsrs	r3, r3, #31
 8021b92:	b2da      	uxtb	r2, r3
 8021b94:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8021b98:	0fdb      	lsrs	r3, r3, #31
 8021b9a:	b2db      	uxtb	r3, r3
 8021b9c:	4053      	eors	r3, r2
 8021b9e:	b2db      	uxtb	r3, r3
 8021ba0:	2b00      	cmp	r3, #0
 8021ba2:	d014      	beq.n	8021bce <arm_softmax_s8+0x3be>
        mult = 1 - mult;
 8021ba4:	f04f 0001 	mov.w	r0, #1
 8021ba8:	f04f 0100 	mov.w	r1, #0
 8021bac:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8021bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bb4:	1a84      	subs	r4, r0, r2
 8021bb6:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8021bba:	eb61 0303 	sbc.w	r3, r1, r3
 8021bbe:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8021bc2:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 8021bc6:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 8021bca:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021bce:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8021bd2:	4618      	mov	r0, r3
 8021bd4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8021bd8:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8021bdc:	461a      	mov	r2, r3
 8021bde:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021be2:	fb02 f501 	mul.w	r5, r2, r1
 8021be6:	fb00 f403 	mul.w	r4, r0, r3
 8021bea:	442c      	add	r4, r5
 8021bec:	fba0 0102 	umull	r0, r1, r0, r2
 8021bf0:	1863      	adds	r3, r4, r1
 8021bf2:	4619      	mov	r1, r3
 8021bf4:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8021bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bfc:	1814      	adds	r4, r2, r0
 8021bfe:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 8021c02:	414b      	adcs	r3, r1
 8021c04:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8021c08:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8021c0c:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 8021c10:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021c14:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8021c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c1c:	4610      	mov	r0, r2
 8021c1e:	4619      	mov	r1, r3
 8021c20:	2800      	cmp	r0, #0
 8021c22:	f171 0300 	sbcs.w	r3, r1, #0
 8021c26:	da06      	bge.n	8021c36 <arm_softmax_s8+0x426>
 8021c28:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021c2c:	f04f 0300 	mov.w	r3, #0
 8021c30:	1880      	adds	r0, r0, r2
 8021c32:	eb43 0101 	adc.w	r1, r3, r1
 8021c36:	f04f 0200 	mov.w	r2, #0
 8021c3a:	f04f 0300 	mov.w	r3, #0
 8021c3e:	0fc2      	lsrs	r2, r0, #31
 8021c40:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021c44:	17cb      	asrs	r3, r1, #31
 8021c46:	4613      	mov	r3, r2
 8021c48:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8021c4c:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 8021c50:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8021c54:	429a      	cmp	r2, r3
 8021c56:	d108      	bne.n	8021c6a <arm_softmax_s8+0x45a>
 8021c58:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8021c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021c60:	d103      	bne.n	8021c6a <arm_softmax_s8+0x45a>
        result = Q31_MAX;
 8021c62:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021c66:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    return result;
 8021c6a:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8021c6e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
    q31_t result = 0;
 8021c72:	2300      	movs	r3, #0
 8021c74:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    const q31_t remainder_mask = (1 << exponent) - 1;
 8021c78:	2304      	movs	r3, #4
 8021c7a:	3b01      	subs	r3, #1
 8021c7c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
    int32_t remainder = remainder_mask & dividend;
 8021c80:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8021c84:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8021c88:	4013      	ands	r3, r2
 8021c8a:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
    result = dividend >> exponent;
 8021c8e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8021c92:	109b      	asrs	r3, r3, #2
 8021c94:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    q31_t threshold = remainder_mask >> 1;
 8021c98:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8021c9c:	105b      	asrs	r3, r3, #1
 8021c9e:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    if (result < 0)
 8021ca2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8021ca6:	2b00      	cmp	r3, #0
 8021ca8:	da04      	bge.n	8021cb4 <arm_softmax_s8+0x4a4>
        threshold++;
 8021caa:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8021cae:	3301      	adds	r3, #1
 8021cb0:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    if (remainder > threshold)
 8021cb4:	f8d7 2568 	ldr.w	r2, [r7, #1384]	; 0x568
 8021cb8:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8021cbc:	429a      	cmp	r2, r3
 8021cbe:	dd04      	ble.n	8021cca <arm_softmax_s8+0x4ba>
        result++;
 8021cc0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8021cc4:	3301      	adds	r3, #1
 8021cc6:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    return result;
 8021cca:	f8d7 6570 	ldr.w	r6, [r7, #1392]	; 0x570
 8021cce:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8021cd2:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
 8021cd6:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8021cda:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
    q31_t result = 0;
 8021cde:	2300      	movs	r3, #0
 8021ce0:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    q63_t mult = 1 << 30;
 8021ce4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021ce8:	f04f 0300 	mov.w	r3, #0
 8021cec:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8021cf0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021cf4:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8021cf8:	0fdb      	lsrs	r3, r3, #31
 8021cfa:	b2da      	uxtb	r2, r3
 8021cfc:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8021d00:	0fdb      	lsrs	r3, r3, #31
 8021d02:	b2db      	uxtb	r3, r3
 8021d04:	4053      	eors	r3, r2
 8021d06:	b2db      	uxtb	r3, r3
 8021d08:	2b00      	cmp	r3, #0
 8021d0a:	d014      	beq.n	8021d36 <arm_softmax_s8+0x526>
        mult = 1 - mult;
 8021d0c:	f04f 0001 	mov.w	r0, #1
 8021d10:	f04f 0100 	mov.w	r1, #0
 8021d14:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8021d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d1c:	1a84      	subs	r4, r0, r2
 8021d1e:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8021d22:	eb61 0303 	sbc.w	r3, r1, r3
 8021d26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8021d2a:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8021d2e:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 8021d32:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021d36:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8021d3a:	4618      	mov	r0, r3
 8021d3c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8021d40:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8021d44:	461a      	mov	r2, r3
 8021d46:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021d4a:	fb02 f501 	mul.w	r5, r2, r1
 8021d4e:	fb00 f403 	mul.w	r4, r0, r3
 8021d52:	442c      	add	r4, r5
 8021d54:	fba0 0102 	umull	r0, r1, r0, r2
 8021d58:	1863      	adds	r3, r4, r1
 8021d5a:	4619      	mov	r1, r3
 8021d5c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8021d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d64:	1814      	adds	r4, r2, r0
 8021d66:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 8021d6a:	414b      	adcs	r3, r1
 8021d6c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8021d70:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8021d74:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 8021d78:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021d7c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8021d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d84:	4610      	mov	r0, r2
 8021d86:	4619      	mov	r1, r3
 8021d88:	2800      	cmp	r0, #0
 8021d8a:	f171 0300 	sbcs.w	r3, r1, #0
 8021d8e:	da06      	bge.n	8021d9e <arm_softmax_s8+0x58e>
 8021d90:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021d94:	f04f 0300 	mov.w	r3, #0
 8021d98:	1880      	adds	r0, r0, r2
 8021d9a:	eb43 0101 	adc.w	r1, r3, r1
 8021d9e:	f04f 0200 	mov.w	r2, #0
 8021da2:	f04f 0300 	mov.w	r3, #0
 8021da6:	0fc2      	lsrs	r2, r0, #31
 8021da8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021dac:	17cb      	asrs	r3, r1, #31
 8021dae:	4613      	mov	r3, r2
 8021db0:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8021db4:	f8d7 2560 	ldr.w	r2, [r7, #1376]	; 0x560
 8021db8:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8021dbc:	429a      	cmp	r2, r3
 8021dbe:	d108      	bne.n	8021dd2 <arm_softmax_s8+0x5c2>
 8021dc0:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8021dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021dc8:	d103      	bne.n	8021dd2 <arm_softmax_s8+0x5c2>
        result = Q31_MAX;
 8021dca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021dce:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    return result;
 8021dd2:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8021dd6:	4433      	add	r3, r6
 8021dd8:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
    q31_t result = 0;
 8021ddc:	2300      	movs	r3, #0
 8021dde:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    q63_t mult = 1 << 30;
 8021de2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021de6:	f04f 0300 	mov.w	r3, #0
 8021dea:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 8021dee:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021df2:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8021df6:	0fdb      	lsrs	r3, r3, #31
 8021df8:	b2da      	uxtb	r2, r3
 8021dfa:	2300      	movs	r3, #0
 8021dfc:	4053      	eors	r3, r2
 8021dfe:	b2db      	uxtb	r3, r3
 8021e00:	2b00      	cmp	r3, #0
 8021e02:	d014      	beq.n	8021e2e <arm_softmax_s8+0x61e>
        mult = 1 - mult;
 8021e04:	f04f 0001 	mov.w	r0, #1
 8021e08:	f04f 0100 	mov.w	r1, #0
 8021e0c:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8021e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e14:	1a84      	subs	r4, r0, r2
 8021e16:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 8021e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8021e1e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8021e22:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8021e26:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 8021e2a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021e2e:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8021e32:	4618      	mov	r0, r3
 8021e34:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8021e38:	a3d2      	add	r3, pc, #840	; (adr r3, 8022184 <arm_softmax_s8+0x974>)
 8021e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e3e:	fb02 f501 	mul.w	r5, r2, r1
 8021e42:	fb00 f403 	mul.w	r4, r0, r3
 8021e46:	442c      	add	r4, r5
 8021e48:	fba0 0102 	umull	r0, r1, r0, r2
 8021e4c:	1863      	adds	r3, r4, r1
 8021e4e:	4619      	mov	r1, r3
 8021e50:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8021e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e58:	1814      	adds	r4, r2, r0
 8021e5a:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 8021e5e:	414b      	adcs	r3, r1
 8021e60:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8021e64:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8021e68:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 8021e6c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021e70:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8021e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e78:	4610      	mov	r0, r2
 8021e7a:	4619      	mov	r1, r3
 8021e7c:	2800      	cmp	r0, #0
 8021e7e:	f171 0300 	sbcs.w	r3, r1, #0
 8021e82:	da06      	bge.n	8021e92 <arm_softmax_s8+0x682>
 8021e84:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021e88:	f04f 0300 	mov.w	r3, #0
 8021e8c:	1880      	adds	r0, r0, r2
 8021e8e:	eb43 0101 	adc.w	r1, r3, r1
 8021e92:	f04f 0200 	mov.w	r2, #0
 8021e96:	f04f 0300 	mov.w	r3, #0
 8021e9a:	0fc2      	lsrs	r2, r0, #31
 8021e9c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021ea0:	17cb      	asrs	r3, r1, #31
 8021ea2:	4613      	mov	r3, r2
 8021ea4:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8021ea8:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8021eac:	4bb2      	ldr	r3, [pc, #712]	; (8022178 <arm_softmax_s8+0x968>)
 8021eae:	429a      	cmp	r2, r3
 8021eb0:	d108      	bne.n	8021ec4 <arm_softmax_s8+0x6b4>
 8021eb2:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8021eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021eba:	d103      	bne.n	8021ec4 <arm_softmax_s8+0x6b4>
        result = Q31_MAX;
 8021ebc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021ec0:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    return result;
 8021ec4:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8021ec8:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8021ecc:	4413      	add	r3, r2
 8021ece:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
    q31_t result = 0;
 8021ed2:	2300      	movs	r3, #0
 8021ed4:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    const q31_t remainder_mask = (1 << exponent) - 1;
 8021ed8:	2302      	movs	r3, #2
 8021eda:	3b01      	subs	r3, #1
 8021edc:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    int32_t remainder = remainder_mask & dividend;
 8021ee0:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8021ee4:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8021ee8:	4013      	ands	r3, r2
 8021eea:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
    result = dividend >> exponent;
 8021eee:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8021ef2:	105b      	asrs	r3, r3, #1
 8021ef4:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    q31_t threshold = remainder_mask >> 1;
 8021ef8:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8021efc:	105b      	asrs	r3, r3, #1
 8021efe:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    if (result < 0)
 8021f02:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	da04      	bge.n	8021f14 <arm_softmax_s8+0x704>
        threshold++;
 8021f0a:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8021f0e:	3301      	adds	r3, #1
 8021f10:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    if (remainder > threshold)
 8021f14:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 8021f18:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8021f1c:	429a      	cmp	r2, r3
 8021f1e:	dd04      	ble.n	8021f2a <arm_softmax_s8+0x71a>
        result++;
 8021f20:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8021f24:	3301      	adds	r3, #1
 8021f26:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    return result;
 8021f2a:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8021f2e:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8021f32:	4413      	add	r3, r2
 8021f34:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
    q31_t result = 0;
 8021f38:	2300      	movs	r3, #0
 8021f3a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    q63_t mult = 1 << 30;
 8021f3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021f42:	f04f 0300 	mov.w	r3, #0
 8021f46:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8021f4a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021f4e:	2200      	movs	r2, #0
 8021f50:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8021f54:	0fdb      	lsrs	r3, r3, #31
 8021f56:	b2db      	uxtb	r3, r3
 8021f58:	4053      	eors	r3, r2
 8021f5a:	b2db      	uxtb	r3, r3
 8021f5c:	2b00      	cmp	r3, #0
 8021f5e:	d014      	beq.n	8021f8a <arm_softmax_s8+0x77a>
        mult = 1 - mult;
 8021f60:	f04f 0001 	mov.w	r0, #1
 8021f64:	f04f 0100 	mov.w	r1, #0
 8021f68:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8021f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f70:	1a84      	subs	r4, r0, r2
 8021f72:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 8021f76:	eb61 0303 	sbc.w	r3, r1, r3
 8021f7a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8021f7e:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 8021f82:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8021f86:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021f8a:	a177      	add	r1, pc, #476	; (adr r1, 8022168 <arm_softmax_s8+0x958>)
 8021f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021f90:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8021f94:	461a      	mov	r2, r3
 8021f96:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021f9a:	fb02 f501 	mul.w	r5, r2, r1
 8021f9e:	fb00 f403 	mul.w	r4, r0, r3
 8021fa2:	442c      	add	r4, r5
 8021fa4:	fba0 0102 	umull	r0, r1, r0, r2
 8021fa8:	1863      	adds	r3, r4, r1
 8021faa:	4619      	mov	r1, r3
 8021fac:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8021fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fb4:	1814      	adds	r4, r2, r0
 8021fb6:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 8021fba:	414b      	adcs	r3, r1
 8021fbc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8021fc0:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 8021fc4:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8021fc8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021fcc:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8021fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fd4:	4610      	mov	r0, r2
 8021fd6:	4619      	mov	r1, r3
 8021fd8:	2800      	cmp	r0, #0
 8021fda:	f171 0300 	sbcs.w	r3, r1, #0
 8021fde:	da06      	bge.n	8021fee <arm_softmax_s8+0x7de>
 8021fe0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021fe4:	f04f 0300 	mov.w	r3, #0
 8021fe8:	1880      	adds	r0, r0, r2
 8021fea:	eb43 0101 	adc.w	r1, r3, r1
 8021fee:	f04f 0200 	mov.w	r2, #0
 8021ff2:	f04f 0300 	mov.w	r3, #0
 8021ff6:	0fc2      	lsrs	r2, r0, #31
 8021ff8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021ffc:	17cb      	asrs	r3, r1, #31
 8021ffe:	4613      	mov	r3, r2
 8022000:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    return result;
 8022004:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
    int32_t result = 1895147668 +
 8022008:	4b5c      	ldr	r3, [pc, #368]	; (802217c <arm_softmax_s8+0x96c>)
 802200a:	4413      	add	r3, r2
 802200c:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(1672461947)
 8022010:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8022014:	1c53      	adds	r3, r2, #1
 8022016:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 802201a:	2301      	movs	r3, #1
 802201c:	fa03 f202 	lsl.w	r2, r3, r2
 8022020:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8022024:	4013      	ands	r3, r2
 8022026:	2b00      	cmp	r3, #0
 8022028:	d002      	beq.n	8022030 <arm_softmax_s8+0x820>
 802202a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802202e:	e000      	b.n	8022032 <arm_softmax_s8+0x822>
 8022030:	2300      	movs	r3, #0
 8022032:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8022036:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802203a:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
    q31_t result = 0;
 802203e:	2300      	movs	r3, #0
 8022040:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    q63_t mult = 1 << 30;
 8022044:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022048:	f04f 0300 	mov.w	r3, #0
 802204c:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8022050:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022054:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8022058:	0fdb      	lsrs	r3, r3, #31
 802205a:	b2da      	uxtb	r2, r3
 802205c:	2300      	movs	r3, #0
 802205e:	4053      	eors	r3, r2
 8022060:	b2db      	uxtb	r3, r3
 8022062:	2b00      	cmp	r3, #0
 8022064:	d014      	beq.n	8022090 <arm_softmax_s8+0x880>
        mult = 1 - mult;
 8022066:	f04f 0001 	mov.w	r0, #1
 802206a:	f04f 0100 	mov.w	r1, #0
 802206e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8022072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022076:	1a84      	subs	r4, r0, r2
 8022078:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 802207c:	eb61 0303 	sbc.w	r3, r1, r3
 8022080:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8022084:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 8022088:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 802208c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022090:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8022094:	4618      	mov	r0, r3
 8022096:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802209a:	a335      	add	r3, pc, #212	; (adr r3, 8022170 <arm_softmax_s8+0x960>)
 802209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220a0:	fb02 f501 	mul.w	r5, r2, r1
 80220a4:	fb00 f403 	mul.w	r4, r0, r3
 80220a8:	442c      	add	r4, r5
 80220aa:	fba0 0102 	umull	r0, r1, r0, r2
 80220ae:	1863      	adds	r3, r4, r1
 80220b0:	4619      	mov	r1, r3
 80220b2:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80220b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220ba:	1814      	adds	r4, r2, r0
 80220bc:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 80220c0:	414b      	adcs	r3, r1
 80220c2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80220c6:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 80220ca:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 80220ce:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80220d2:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80220d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220da:	4610      	mov	r0, r2
 80220dc:	4619      	mov	r1, r3
 80220de:	2800      	cmp	r0, #0
 80220e0:	f171 0300 	sbcs.w	r3, r1, #0
 80220e4:	da06      	bge.n	80220f4 <arm_softmax_s8+0x8e4>
 80220e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80220ea:	f04f 0300 	mov.w	r3, #0
 80220ee:	1880      	adds	r0, r0, r2
 80220f0:	eb43 0101 	adc.w	r1, r3, r1
 80220f4:	f04f 0200 	mov.w	r2, #0
 80220f8:	f04f 0300 	mov.w	r3, #0
 80220fc:	0fc2      	lsrs	r2, r0, #31
 80220fe:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022102:	17cb      	asrs	r3, r1, #31
 8022104:	4613      	mov	r3, r2
 8022106:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802210a:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 802210e:	4b1c      	ldr	r3, [pc, #112]	; (8022180 <arm_softmax_s8+0x970>)
 8022110:	429a      	cmp	r2, r3
 8022112:	d108      	bne.n	8022126 <arm_softmax_s8+0x916>
 8022114:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8022118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802211c:	d103      	bne.n	8022126 <arm_softmax_s8+0x916>
        result = Q31_MAX;
 802211e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022122:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    return result;
 8022126:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
    SELECT_IF_NON_ZERO(1672461947)
 802212a:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 802212e:	ea02 0103 	and.w	r1, r2, r3
 8022132:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022136:	43da      	mvns	r2, r3
 8022138:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802213c:	4013      	ands	r3, r2
 802213e:	404b      	eors	r3, r1
 8022140:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(1302514674)
 8022144:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8022148:	1c53      	adds	r3, r2, #1
 802214a:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 802214e:	2301      	movs	r3, #1
 8022150:	fa03 f202 	lsl.w	r2, r3, r2
 8022154:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8022158:	4013      	ands	r3, r2
 802215a:	2b00      	cmp	r3, #0
 802215c:	d016      	beq.n	802218c <arm_softmax_s8+0x97c>
 802215e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022162:	e014      	b.n	802218e <arm_softmax_s8+0x97e>
 8022164:	f3af 8000 	nop.w
 8022168:	70f5a894 	.word	0x70f5a894
 802216c:	00000000 	.word	0x00000000
 8022170:	63afbe7b 	.word	0x63afbe7b
 8022174:	00000000 	.word	0x00000000
 8022178:	2aaaaaab 	.word	0x2aaaaaab
 802217c:	70f5a894 	.word	0x70f5a894
 8022180:	63afbe7b 	.word	0x63afbe7b
 8022184:	2aaaaaab 	.word	0x2aaaaaab
 8022188:	00000000 	.word	0x00000000
 802218c:	2300      	movs	r3, #0
 802218e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8022192:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022196:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
    q31_t result = 0;
 802219a:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 802219e:	2300      	movs	r3, #0
 80221a0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80221a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80221a6:	f04f 0300 	mov.w	r3, #0
 80221aa:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 80221ae:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80221b2:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 80221b6:	0fdb      	lsrs	r3, r3, #31
 80221b8:	b2da      	uxtb	r2, r3
 80221ba:	2300      	movs	r3, #0
 80221bc:	4053      	eors	r3, r2
 80221be:	b2db      	uxtb	r3, r3
 80221c0:	2b00      	cmp	r3, #0
 80221c2:	d014      	beq.n	80221ee <arm_softmax_s8+0x9de>
        mult = 1 - mult;
 80221c4:	f04f 0001 	mov.w	r0, #1
 80221c8:	f04f 0100 	mov.w	r1, #0
 80221cc:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80221d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221d4:	1a84      	subs	r4, r0, r2
 80221d6:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 80221da:	eb61 0303 	sbc.w	r3, r1, r3
 80221de:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80221e2:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	; 0x1b0
 80221e6:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 80221ea:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80221ee:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 80221f2:	4618      	mov	r0, r3
 80221f4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80221f8:	a3e0      	add	r3, pc, #896	; (adr r3, 802257c <arm_softmax_s8+0xd6c>)
 80221fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221fe:	fb02 f501 	mul.w	r5, r2, r1
 8022202:	fb00 f403 	mul.w	r4, r0, r3
 8022206:	442c      	add	r4, r5
 8022208:	fba0 0102 	umull	r0, r1, r0, r2
 802220c:	1863      	adds	r3, r4, r1
 802220e:	4619      	mov	r1, r3
 8022210:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8022214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022218:	1814      	adds	r4, r2, r0
 802221a:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 802221e:	414b      	adcs	r3, r1
 8022220:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8022224:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8022228:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 802222c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022230:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8022234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022238:	4610      	mov	r0, r2
 802223a:	4619      	mov	r1, r3
 802223c:	2800      	cmp	r0, #0
 802223e:	f171 0300 	sbcs.w	r3, r1, #0
 8022242:	da06      	bge.n	8022252 <arm_softmax_s8+0xa42>
 8022244:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022248:	f04f 0300 	mov.w	r3, #0
 802224c:	1880      	adds	r0, r0, r2
 802224e:	eb43 0101 	adc.w	r1, r3, r1
 8022252:	f04f 0200 	mov.w	r2, #0
 8022256:	f04f 0300 	mov.w	r3, #0
 802225a:	0fc2      	lsrs	r2, r0, #31
 802225c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022260:	17cb      	asrs	r3, r1, #31
 8022262:	4610      	mov	r0, r2
 8022264:	4619      	mov	r1, r3
 8022266:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 802226a:	4603      	mov	r3, r0
 802226c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802226e:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 8022272:	4bbf      	ldr	r3, [pc, #764]	; (8022570 <arm_softmax_s8+0xd60>)
 8022274:	429a      	cmp	r2, r3
 8022276:	d109      	bne.n	802228c <arm_softmax_s8+0xa7c>
 8022278:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 802227c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022280:	d104      	bne.n	802228c <arm_softmax_s8+0xa7c>
        result = Q31_MAX;
 8022282:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 8022286:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802228a:	6013      	str	r3, [r2, #0]
    return result;
 802228c:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8022290:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8022292:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022296:	ea02 0103 	and.w	r1, r2, r3
 802229a:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 802229e:	43da      	mvns	r2, r3
 80222a0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80222a4:	4013      	ands	r3, r2
 80222a6:	404b      	eors	r3, r1
 80222a8:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(790015084)
 80222ac:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 80222b0:	1c53      	adds	r3, r2, #1
 80222b2:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 80222b6:	2301      	movs	r3, #1
 80222b8:	fa03 f202 	lsl.w	r2, r3, r2
 80222bc:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 80222c0:	4013      	ands	r3, r2
 80222c2:	2b00      	cmp	r3, #0
 80222c4:	d002      	beq.n	80222cc <arm_softmax_s8+0xabc>
 80222c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80222ca:	e000      	b.n	80222ce <arm_softmax_s8+0xabe>
 80222cc:	2300      	movs	r3, #0
 80222ce:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80222d2:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 80222d6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80222da:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80222dc:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 80222e0:	2300      	movs	r3, #0
 80222e2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80222e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80222e8:	f04f 0300 	mov.w	r3, #0
 80222ec:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80222f0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80222f4:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 80222f8:	681b      	ldr	r3, [r3, #0]
 80222fa:	0fdb      	lsrs	r3, r3, #31
 80222fc:	b2da      	uxtb	r2, r3
 80222fe:	2300      	movs	r3, #0
 8022300:	4053      	eors	r3, r2
 8022302:	b2db      	uxtb	r3, r3
 8022304:	2b00      	cmp	r3, #0
 8022306:	d014      	beq.n	8022332 <arm_softmax_s8+0xb22>
        mult = 1 - mult;
 8022308:	f04f 0001 	mov.w	r0, #1
 802230c:	f04f 0100 	mov.w	r1, #0
 8022310:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8022314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022318:	1a84      	subs	r4, r0, r2
 802231a:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 802231e:	eb61 0303 	sbc.w	r3, r1, r3
 8022322:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8022326:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 802232a:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 802232e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022332:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8022336:	681b      	ldr	r3, [r3, #0]
 8022338:	4618      	mov	r0, r3
 802233a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802233e:	a388      	add	r3, pc, #544	; (adr r3, 8022560 <arm_softmax_s8+0xd50>)
 8022340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022344:	fb02 f501 	mul.w	r5, r2, r1
 8022348:	fb00 f403 	mul.w	r4, r0, r3
 802234c:	442c      	add	r4, r5
 802234e:	fba0 0102 	umull	r0, r1, r0, r2
 8022352:	1863      	adds	r3, r4, r1
 8022354:	4619      	mov	r1, r3
 8022356:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 802235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802235e:	1814      	adds	r4, r2, r0
 8022360:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 8022364:	414b      	adcs	r3, r1
 8022366:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 802236a:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 802236e:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8022372:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022376:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 802237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802237e:	4610      	mov	r0, r2
 8022380:	4619      	mov	r1, r3
 8022382:	2800      	cmp	r0, #0
 8022384:	f171 0300 	sbcs.w	r3, r1, #0
 8022388:	da06      	bge.n	8022398 <arm_softmax_s8+0xb88>
 802238a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802238e:	f04f 0300 	mov.w	r3, #0
 8022392:	1880      	adds	r0, r0, r2
 8022394:	eb43 0101 	adc.w	r1, r3, r1
 8022398:	f04f 0200 	mov.w	r2, #0
 802239c:	f04f 0300 	mov.w	r3, #0
 80223a0:	0fc2      	lsrs	r2, r0, #31
 80223a2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80223a6:	17cb      	asrs	r3, r1, #31
 80223a8:	4610      	mov	r0, r2
 80223aa:	4619      	mov	r1, r3
 80223ac:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 80223b0:	4603      	mov	r3, r0
 80223b2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80223b4:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 80223b8:	681a      	ldr	r2, [r3, #0]
 80223ba:	4b6e      	ldr	r3, [pc, #440]	; (8022574 <arm_softmax_s8+0xd64>)
 80223bc:	429a      	cmp	r2, r3
 80223be:	d10a      	bne.n	80223d6 <arm_softmax_s8+0xbc6>
 80223c0:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 80223c4:	681b      	ldr	r3, [r3, #0]
 80223c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80223ca:	d104      	bne.n	80223d6 <arm_softmax_s8+0xbc6>
        result = Q31_MAX;
 80223cc:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 80223d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80223d4:	6013      	str	r3, [r2, #0]
    return result;
 80223d6:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80223da:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 80223dc:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80223e0:	ea02 0103 	and.w	r1, r2, r3
 80223e4:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80223e8:	43da      	mvns	r2, r3
 80223ea:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80223ee:	4013      	ands	r3, r2
 80223f0:	404b      	eors	r3, r1
 80223f2:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(290630308)
 80223f6:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 80223fa:	1c53      	adds	r3, r2, #1
 80223fc:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8022400:	2301      	movs	r3, #1
 8022402:	fa03 f202 	lsl.w	r2, r3, r2
 8022406:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 802240a:	4013      	ands	r3, r2
 802240c:	2b00      	cmp	r3, #0
 802240e:	d002      	beq.n	8022416 <arm_softmax_s8+0xc06>
 8022410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022414:	e000      	b.n	8022418 <arm_softmax_s8+0xc08>
 8022416:	2300      	movs	r3, #0
 8022418:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 802241c:	f207 42dc 	addw	r2, r7, #1244	; 0x4dc
 8022420:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022424:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022426:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 802242a:	2300      	movs	r3, #0
 802242c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802242e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022432:	f04f 0300 	mov.w	r3, #0
 8022436:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 802243a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802243e:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8022442:	681b      	ldr	r3, [r3, #0]
 8022444:	0fdb      	lsrs	r3, r3, #31
 8022446:	b2da      	uxtb	r2, r3
 8022448:	2300      	movs	r3, #0
 802244a:	4053      	eors	r3, r2
 802244c:	b2db      	uxtb	r3, r3
 802244e:	2b00      	cmp	r3, #0
 8022450:	d014      	beq.n	802247c <arm_softmax_s8+0xc6c>
        mult = 1 - mult;
 8022452:	f04f 0001 	mov.w	r0, #1
 8022456:	f04f 0100 	mov.w	r1, #0
 802245a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 802245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022462:	1a84      	subs	r4, r0, r2
 8022464:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 8022468:	eb61 0303 	sbc.w	r3, r1, r3
 802246c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8022470:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 8022474:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 8022478:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802247c:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8022480:	681b      	ldr	r3, [r3, #0]
 8022482:	4618      	mov	r0, r3
 8022484:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022488:	a337      	add	r3, pc, #220	; (adr r3, 8022568 <arm_softmax_s8+0xd58>)
 802248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802248e:	fb02 f501 	mul.w	r5, r2, r1
 8022492:	fb00 f403 	mul.w	r4, r0, r3
 8022496:	442c      	add	r4, r5
 8022498:	fba0 0102 	umull	r0, r1, r0, r2
 802249c:	1863      	adds	r3, r4, r1
 802249e:	4619      	mov	r1, r3
 80224a0:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80224a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224a8:	1814      	adds	r4, r2, r0
 80224aa:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 80224ae:	414b      	adcs	r3, r1
 80224b0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80224b4:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 80224b8:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 80224bc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80224c0:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80224c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224c8:	4610      	mov	r0, r2
 80224ca:	4619      	mov	r1, r3
 80224cc:	2800      	cmp	r0, #0
 80224ce:	f171 0300 	sbcs.w	r3, r1, #0
 80224d2:	da06      	bge.n	80224e2 <arm_softmax_s8+0xcd2>
 80224d4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80224d8:	f04f 0300 	mov.w	r3, #0
 80224dc:	1880      	adds	r0, r0, r2
 80224de:	eb43 0101 	adc.w	r1, r3, r1
 80224e2:	f04f 0200 	mov.w	r2, #0
 80224e6:	f04f 0300 	mov.w	r3, #0
 80224ea:	0fc2      	lsrs	r2, r0, #31
 80224ec:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80224f0:	17cb      	asrs	r3, r1, #31
 80224f2:	4610      	mov	r0, r2
 80224f4:	4619      	mov	r1, r3
 80224f6:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 80224fa:	4603      	mov	r3, r0
 80224fc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80224fe:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8022502:	681a      	ldr	r2, [r3, #0]
 8022504:	4b1c      	ldr	r3, [pc, #112]	; (8022578 <arm_softmax_s8+0xd68>)
 8022506:	429a      	cmp	r2, r3
 8022508:	d10a      	bne.n	8022520 <arm_softmax_s8+0xd10>
 802250a:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 802250e:	681b      	ldr	r3, [r3, #0]
 8022510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022514:	d104      	bne.n	8022520 <arm_softmax_s8+0xd10>
        result = Q31_MAX;
 8022516:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 802251a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802251e:	6013      	str	r3, [r2, #0]
    return result;
 8022520:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8022524:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8022526:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 802252a:	ea02 0103 	and.w	r1, r2, r3
 802252e:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022532:	43da      	mvns	r2, r3
 8022534:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022538:	4013      	ands	r3, r2
 802253a:	404b      	eors	r3, r1
 802253c:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(39332535)
 8022540:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8022544:	1c53      	adds	r3, r2, #1
 8022546:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 802254a:	2301      	movs	r3, #1
 802254c:	fa03 f202 	lsl.w	r2, r3, r2
 8022550:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8022554:	4013      	ands	r3, r2
 8022556:	2b00      	cmp	r3, #0
 8022558:	d014      	beq.n	8022584 <arm_softmax_s8+0xd74>
 802255a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802255e:	e012      	b.n	8022586 <arm_softmax_s8+0xd76>
 8022560:	2f16ac6c 	.word	0x2f16ac6c
 8022564:	00000000 	.word	0x00000000
 8022568:	1152aaa4 	.word	0x1152aaa4
 802256c:	00000000 	.word	0x00000000
 8022570:	4da2cbf2 	.word	0x4da2cbf2
 8022574:	2f16ac6c 	.word	0x2f16ac6c
 8022578:	1152aaa4 	.word	0x1152aaa4
 802257c:	4da2cbf2 	.word	0x4da2cbf2
 8022580:	00000000 	.word	0x00000000
 8022584:	2300      	movs	r3, #0
 8022586:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 802258a:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 802258e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022592:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022594:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8022598:	2300      	movs	r3, #0
 802259a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802259c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80225a0:	f04f 0300 	mov.w	r3, #0
 80225a4:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 80225a8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80225ac:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 80225b0:	681b      	ldr	r3, [r3, #0]
 80225b2:	0fdb      	lsrs	r3, r3, #31
 80225b4:	b2da      	uxtb	r2, r3
 80225b6:	2300      	movs	r3, #0
 80225b8:	4053      	eors	r3, r2
 80225ba:	b2db      	uxtb	r3, r3
 80225bc:	2b00      	cmp	r3, #0
 80225be:	d014      	beq.n	80225ea <arm_softmax_s8+0xdda>
        mult = 1 - mult;
 80225c0:	f04f 0001 	mov.w	r0, #1
 80225c4:	f04f 0100 	mov.w	r1, #0
 80225c8:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80225cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225d0:	1a84      	subs	r4, r0, r2
 80225d2:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 80225d6:	eb61 0303 	sbc.w	r3, r1, r3
 80225da:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80225de:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 80225e2:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 80225e6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80225ea:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 80225ee:	681b      	ldr	r3, [r3, #0]
 80225f0:	4618      	mov	r0, r3
 80225f2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80225f6:	a3d8      	add	r3, pc, #864	; (adr r3, 8022958 <arm_softmax_s8+0x1148>)
 80225f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225fc:	fb02 f501 	mul.w	r5, r2, r1
 8022600:	fb00 f403 	mul.w	r4, r0, r3
 8022604:	442c      	add	r4, r5
 8022606:	fba0 0102 	umull	r0, r1, r0, r2
 802260a:	1863      	adds	r3, r4, r1
 802260c:	4619      	mov	r1, r3
 802260e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8022612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022616:	1814      	adds	r4, r2, r0
 8022618:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 802261c:	414b      	adcs	r3, r1
 802261e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8022622:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8022626:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 802262a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802262e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8022632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022636:	4610      	mov	r0, r2
 8022638:	4619      	mov	r1, r3
 802263a:	2800      	cmp	r0, #0
 802263c:	f171 0300 	sbcs.w	r3, r1, #0
 8022640:	da06      	bge.n	8022650 <arm_softmax_s8+0xe40>
 8022642:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022646:	f04f 0300 	mov.w	r3, #0
 802264a:	1880      	adds	r0, r0, r2
 802264c:	eb43 0101 	adc.w	r1, r3, r1
 8022650:	f04f 0200 	mov.w	r2, #0
 8022654:	f04f 0300 	mov.w	r3, #0
 8022658:	0fc2      	lsrs	r2, r0, #31
 802265a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802265e:	17cb      	asrs	r3, r1, #31
 8022660:	4610      	mov	r0, r2
 8022662:	4619      	mov	r1, r3
 8022664:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8022668:	4603      	mov	r3, r0
 802266a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802266c:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8022670:	681a      	ldr	r2, [r3, #0]
 8022672:	4bb7      	ldr	r3, [pc, #732]	; (8022950 <arm_softmax_s8+0x1140>)
 8022674:	429a      	cmp	r2, r3
 8022676:	d10a      	bne.n	802268e <arm_softmax_s8+0xe7e>
 8022678:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 802267c:	681b      	ldr	r3, [r3, #0]
 802267e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022682:	d104      	bne.n	802268e <arm_softmax_s8+0xe7e>
        result = Q31_MAX;
 8022684:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8022688:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802268c:	6013      	str	r3, [r2, #0]
    return result;
 802268e:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8022692:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8022694:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022698:	ea02 0103 	and.w	r1, r2, r3
 802269c:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80226a0:	43da      	mvns	r2, r3
 80226a2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80226a6:	4013      	ands	r3, r2
 80226a8:	404b      	eors	r3, r1
 80226aa:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(720401)
 80226ae:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 80226b2:	1c53      	adds	r3, r2, #1
 80226b4:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 80226b8:	2301      	movs	r3, #1
 80226ba:	fa03 f202 	lsl.w	r2, r3, r2
 80226be:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 80226c2:	4013      	ands	r3, r2
 80226c4:	2b00      	cmp	r3, #0
 80226c6:	d002      	beq.n	80226ce <arm_softmax_s8+0xebe>
 80226c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80226cc:	e000      	b.n	80226d0 <arm_softmax_s8+0xec0>
 80226ce:	2300      	movs	r3, #0
 80226d0:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80226d4:	f207 42bc 	addw	r2, r7, #1212	; 0x4bc
 80226d8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80226dc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80226de:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 80226e2:	2300      	movs	r3, #0
 80226e4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80226e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80226ea:	f04f 0300 	mov.w	r3, #0
 80226ee:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 80226f2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80226f6:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80226fa:	681b      	ldr	r3, [r3, #0]
 80226fc:	0fdb      	lsrs	r3, r3, #31
 80226fe:	b2da      	uxtb	r2, r3
 8022700:	2300      	movs	r3, #0
 8022702:	4053      	eors	r3, r2
 8022704:	b2db      	uxtb	r3, r3
 8022706:	2b00      	cmp	r3, #0
 8022708:	d014      	beq.n	8022734 <arm_softmax_s8+0xf24>
        mult = 1 - mult;
 802270a:	f04f 0001 	mov.w	r0, #1
 802270e:	f04f 0100 	mov.w	r1, #0
 8022712:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8022716:	e9d3 2300 	ldrd	r2, r3, [r3]
 802271a:	1a84      	subs	r4, r0, r2
 802271c:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 8022720:	eb61 0303 	sbc.w	r3, r1, r3
 8022724:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8022728:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 802272c:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 8022730:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022734:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8022738:	681b      	ldr	r3, [r3, #0]
 802273a:	4618      	mov	r0, r3
 802273c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022740:	4a84      	ldr	r2, [pc, #528]	; (8022954 <arm_softmax_s8+0x1144>)
 8022742:	f04f 0300 	mov.w	r3, #0
 8022746:	fb02 f501 	mul.w	r5, r2, r1
 802274a:	fb00 f403 	mul.w	r4, r0, r3
 802274e:	442c      	add	r4, r5
 8022750:	fba0 0102 	umull	r0, r1, r0, r2
 8022754:	1863      	adds	r3, r4, r1
 8022756:	4619      	mov	r1, r3
 8022758:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 802275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022760:	1814      	adds	r4, r2, r0
 8022762:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8022766:	414b      	adcs	r3, r1
 8022768:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 802276c:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8022770:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 8022774:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022778:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 802277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022780:	4610      	mov	r0, r2
 8022782:	4619      	mov	r1, r3
 8022784:	2800      	cmp	r0, #0
 8022786:	f171 0300 	sbcs.w	r3, r1, #0
 802278a:	da06      	bge.n	802279a <arm_softmax_s8+0xf8a>
 802278c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022790:	f04f 0300 	mov.w	r3, #0
 8022794:	1880      	adds	r0, r0, r2
 8022796:	eb43 0101 	adc.w	r1, r3, r1
 802279a:	f04f 0200 	mov.w	r2, #0
 802279e:	f04f 0300 	mov.w	r3, #0
 80227a2:	0fc2      	lsrs	r2, r0, #31
 80227a4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80227a8:	17cb      	asrs	r3, r1, #31
 80227aa:	4610      	mov	r0, r2
 80227ac:	4619      	mov	r1, r3
 80227ae:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 80227b2:	4603      	mov	r3, r0
 80227b4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80227b6:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80227ba:	681a      	ldr	r2, [r3, #0]
 80227bc:	4b65      	ldr	r3, [pc, #404]	; (8022954 <arm_softmax_s8+0x1144>)
 80227be:	429a      	cmp	r2, r3
 80227c0:	d10a      	bne.n	80227d8 <arm_softmax_s8+0xfc8>
 80227c2:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80227c6:	681b      	ldr	r3, [r3, #0]
 80227c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80227cc:	d104      	bne.n	80227d8 <arm_softmax_s8+0xfc8>
        result = Q31_MAX;
 80227ce:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 80227d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80227d6:	6013      	str	r3, [r2, #0]
    return result;
 80227d8:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80227dc:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 80227de:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80227e2:	ea02 0103 	and.w	r1, r2, r3
 80227e6:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80227ea:	43da      	mvns	r2, r3
 80227ec:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80227f0:	4013      	ands	r3, r2
 80227f2:	404b      	eors	r3, r1
 80227f4:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(242)
 80227f8:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 80227fc:	1c53      	adds	r3, r2, #1
 80227fe:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8022802:	2301      	movs	r3, #1
 8022804:	fa03 f202 	lsl.w	r2, r3, r2
 8022808:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 802280c:	4013      	ands	r3, r2
 802280e:	2b00      	cmp	r3, #0
 8022810:	d002      	beq.n	8022818 <arm_softmax_s8+0x1008>
 8022812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022816:	e000      	b.n	802281a <arm_softmax_s8+0x100a>
 8022818:	2300      	movs	r3, #0
 802281a:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 802281e:	f207 42ac 	addw	r2, r7, #1196	; 0x4ac
 8022822:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022826:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022828:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 802282c:	2300      	movs	r3, #0
 802282e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022830:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022834:	f04f 0300 	mov.w	r3, #0
 8022838:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 802283c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022840:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8022844:	681b      	ldr	r3, [r3, #0]
 8022846:	0fdb      	lsrs	r3, r3, #31
 8022848:	b2da      	uxtb	r2, r3
 802284a:	2300      	movs	r3, #0
 802284c:	4053      	eors	r3, r2
 802284e:	b2db      	uxtb	r3, r3
 8022850:	2b00      	cmp	r3, #0
 8022852:	d014      	beq.n	802287e <arm_softmax_s8+0x106e>
        mult = 1 - mult;
 8022854:	f04f 0001 	mov.w	r0, #1
 8022858:	f04f 0100 	mov.w	r1, #0
 802285c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8022860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022864:	1a84      	subs	r4, r0, r2
 8022866:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 802286a:	eb61 0303 	sbc.w	r3, r1, r3
 802286e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8022872:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 8022876:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 802287a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802287e:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8022882:	681b      	ldr	r3, [r3, #0]
 8022884:	4618      	mov	r0, r3
 8022886:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802288a:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 802288e:	f04f 0300 	mov.w	r3, #0
 8022892:	fb02 f501 	mul.w	r5, r2, r1
 8022896:	fb00 f403 	mul.w	r4, r0, r3
 802289a:	442c      	add	r4, r5
 802289c:	fba0 0102 	umull	r0, r1, r0, r2
 80228a0:	1863      	adds	r3, r4, r1
 80228a2:	4619      	mov	r1, r3
 80228a4:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80228a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228ac:	1814      	adds	r4, r2, r0
 80228ae:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 80228b2:	414b      	adcs	r3, r1
 80228b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80228b8:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 80228bc:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 80228c0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80228c4:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80228c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228cc:	4610      	mov	r0, r2
 80228ce:	4619      	mov	r1, r3
 80228d0:	2800      	cmp	r0, #0
 80228d2:	f171 0300 	sbcs.w	r3, r1, #0
 80228d6:	da06      	bge.n	80228e6 <arm_softmax_s8+0x10d6>
 80228d8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80228dc:	f04f 0300 	mov.w	r3, #0
 80228e0:	1880      	adds	r0, r0, r2
 80228e2:	eb43 0101 	adc.w	r1, r3, r1
 80228e6:	f04f 0200 	mov.w	r2, #0
 80228ea:	f04f 0300 	mov.w	r3, #0
 80228ee:	0fc2      	lsrs	r2, r0, #31
 80228f0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80228f4:	17cb      	asrs	r3, r1, #31
 80228f6:	4610      	mov	r0, r2
 80228f8:	4619      	mov	r1, r3
 80228fa:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 80228fe:	4603      	mov	r3, r0
 8022900:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022902:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8022906:	681b      	ldr	r3, [r3, #0]
 8022908:	2bf2      	cmp	r3, #242	; 0xf2
 802290a:	d10a      	bne.n	8022922 <arm_softmax_s8+0x1112>
 802290c:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8022910:	681b      	ldr	r3, [r3, #0]
 8022912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022916:	d104      	bne.n	8022922 <arm_softmax_s8+0x1112>
        result = Q31_MAX;
 8022918:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 802291c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022920:	6013      	str	r3, [r2, #0]
    return result;
 8022922:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8022926:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8022928:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 802292c:	ea02 0103 	and.w	r1, r2, r3
 8022930:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022934:	43da      	mvns	r2, r3
 8022936:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802293a:	4013      	ands	r3, r2
 802293c:	404b      	eors	r3, r1
 802293e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    mask = MASK_IF_ZERO(val);
 8022942:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8022946:	2b00      	cmp	r3, #0
 8022948:	d10a      	bne.n	8022960 <arm_softmax_s8+0x1150>
 802294a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802294e:	e008      	b.n	8022962 <arm_softmax_s8+0x1152>
 8022950:	02582ab7 	.word	0x02582ab7
 8022954:	000afe11 	.word	0x000afe11
 8022958:	02582ab7 	.word	0x02582ab7
 802295c:	00000000 	.word	0x00000000
 8022960:	2300      	movs	r3, #0
 8022962:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8022966:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 802296a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802296e:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022972:	43da      	mvns	r2, r3
 8022974:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022978:	4013      	ands	r3, r2
 802297a:	404b      	eors	r3, r1
 802297c:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
    q31_t result = 0;
 8022980:	2300      	movs	r3, #0
 8022982:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    const q31_t remainder_mask = (1 << exponent) - 1;
 8022986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802298a:	3b01      	subs	r3, #1
 802298c:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
    int32_t remainder = remainder_mask & dividend;
 8022990:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8022994:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8022998:	4013      	ands	r3, r2
 802299a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    result = dividend >> exponent;
 802299e:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 80229a2:	131b      	asrs	r3, r3, #12
 80229a4:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    q31_t threshold = remainder_mask >> 1;
 80229a8:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 80229ac:	105b      	asrs	r3, r3, #1
 80229ae:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
    if (result < 0)
 80229b2:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 80229b6:	2b00      	cmp	r3, #0
 80229b8:	da04      	bge.n	80229c4 <arm_softmax_s8+0x11b4>
        threshold++;
 80229ba:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 80229be:	3301      	adds	r3, #1
 80229c0:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
    if (remainder > threshold)
 80229c4:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80229c8:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 80229cc:	429a      	cmp	r2, r3
 80229ce:	dd04      	ble.n	80229da <arm_softmax_s8+0x11ca>
        result++;
 80229d0:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 80229d4:	3301      	adds	r3, #1
 80229d6:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    return result;
 80229da:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 80229de:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 80229e2:	4413      	add	r3, r2
 80229e4:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
        for (col = 0; col < row_size; ++col)
 80229e8:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 80229ec:	3301      	adds	r3, #1
 80229ee:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80229f2:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80229f6:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 80229fa:	681b      	ldr	r3, [r3, #0]
 80229fc:	429a      	cmp	r2, r3
 80229fe:	f6fe af57 	blt.w	80218b0 <arm_softmax_s8+0xa0>
            }
        }

        const int32_t headroom = __CLZ(sum);
 8022a02:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 8022a06:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8022a0a:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 8022a0c:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8022a10:	681b      	ldr	r3, [r3, #0]
 8022a12:	2b00      	cmp	r3, #0
 8022a14:	d101      	bne.n	8022a1a <arm_softmax_s8+0x120a>
    return 32U;
 8022a16:	2320      	movs	r3, #32
 8022a18:	e005      	b.n	8022a26 <arm_softmax_s8+0x1216>
  return __builtin_clz(value);
 8022a1a:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8022a1e:	681b      	ldr	r3, [r3, #0]
 8022a20:	fab3 f383 	clz	r3, r3
 8022a24:	b2db      	uxtb	r3, r3
 8022a26:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8022a2a:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 8022a2e:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8022a32:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
        const int32_t shifted_scale = ONE_OVER1((sum > 0 ? sum << headroom : 0) - (1 << 31));
 8022a36:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8022a3a:	2b00      	cmp	r3, #0
 8022a3c:	dd08      	ble.n	8022a50 <arm_softmax_s8+0x1240>
 8022a3e:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 8022a42:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 8022a46:	fa02 f303 	lsl.w	r3, r2, r3
 8022a4a:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8022a4e:	e001      	b.n	8022a54 <arm_softmax_s8+0x1244>
 8022a50:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8022a54:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8022a58:	601a      	str	r2, [r3, #0]
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 8022a5a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8022a5e:	681b      	ldr	r3, [r3, #0]
 8022a60:	4618      	mov	r0, r3
 8022a62:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022a66:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022a6a:	f04f 0300 	mov.w	r3, #0
 8022a6e:	1884      	adds	r4, r0, r2
 8022a70:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8022a74:	eb41 0303 	adc.w	r3, r1, r3
 8022a78:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8022a7c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8022a80:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8022a84:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8022a88:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8022a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a90:	2a00      	cmp	r2, #0
 8022a92:	f173 0300 	sbcs.w	r3, r3, #0
 8022a96:	db04      	blt.n	8022aa2 <arm_softmax_s8+0x1292>
 8022a98:	f04f 0001 	mov.w	r0, #1
 8022a9c:	f04f 0100 	mov.w	r1, #0
 8022aa0:	e003      	b.n	8022aaa <arm_softmax_s8+0x129a>
 8022aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022aa6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022aaa:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8022aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ab2:	eb10 0a02 	adds.w	sl, r0, r2
 8022ab6:	eb41 0b03 	adc.w	fp, r1, r3
 8022aba:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8022abe:	461a      	mov	r2, r3
 8022ac0:	f04f 0300 	mov.w	r3, #0
 8022ac4:	eb12 080a 	adds.w	r8, r2, sl
 8022ac8:	eb43 090b 	adc.w	r9, r3, fp
 8022acc:	f04f 0200 	mov.w	r2, #0
 8022ad0:	f04f 0300 	mov.w	r3, #0
 8022ad4:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8022ad8:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 8022adc:	ea4f 0369 	mov.w	r3, r9, asr #1
 8022ae0:	4610      	mov	r0, r2
 8022ae2:	4619      	mov	r1, r3
 8022ae4:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8022ae8:	4603      	mov	r3, r0
 8022aea:	6013      	str	r3, [r2, #0]
 8022aec:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8022af0:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8022af4:	681b      	ldr	r3, [r3, #0]
 8022af6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022af8:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8022afc:	2300      	movs	r3, #0
 8022afe:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022b00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022b04:	f04f 0300 	mov.w	r3, #0
 8022b08:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8022b0c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022b10:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8022b14:	681b      	ldr	r3, [r3, #0]
 8022b16:	0fdb      	lsrs	r3, r3, #31
 8022b18:	b2da      	uxtb	r2, r3
 8022b1a:	2301      	movs	r3, #1
 8022b1c:	4053      	eors	r3, r2
 8022b1e:	b2db      	uxtb	r3, r3
 8022b20:	2b00      	cmp	r3, #0
 8022b22:	d014      	beq.n	8022b4e <arm_softmax_s8+0x133e>
        mult = 1 - mult;
 8022b24:	f04f 0001 	mov.w	r0, #1
 8022b28:	f04f 0100 	mov.w	r1, #0
 8022b2c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8022b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b34:	1a84      	subs	r4, r0, r2
 8022b36:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 8022b3a:	eb61 0303 	sbc.w	r3, r1, r3
 8022b3e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8022b42:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8022b46:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8022b4a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022b4e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8022b52:	681b      	ldr	r3, [r3, #0]
 8022b54:	4618      	mov	r0, r3
 8022b56:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022b5a:	f60f 2354 	addw	r3, pc, #2644	; 0xa54
 8022b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b62:	fb02 f501 	mul.w	r5, r2, r1
 8022b66:	fb00 f403 	mul.w	r4, r0, r3
 8022b6a:	442c      	add	r4, r5
 8022b6c:	fba0 0102 	umull	r0, r1, r0, r2
 8022b70:	1863      	adds	r3, r4, r1
 8022b72:	4619      	mov	r1, r3
 8022b74:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8022b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b7c:	1814      	adds	r4, r2, r0
 8022b7e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8022b82:	414b      	adcs	r3, r1
 8022b84:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8022b88:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8022b8c:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8022b90:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022b94:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8022b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b9c:	4610      	mov	r0, r2
 8022b9e:	4619      	mov	r1, r3
 8022ba0:	2800      	cmp	r0, #0
 8022ba2:	f171 0300 	sbcs.w	r3, r1, #0
 8022ba6:	da06      	bge.n	8022bb6 <arm_softmax_s8+0x13a6>
 8022ba8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022bac:	f04f 0300 	mov.w	r3, #0
 8022bb0:	1880      	adds	r0, r0, r2
 8022bb2:	eb43 0101 	adc.w	r1, r3, r1
 8022bb6:	f04f 0200 	mov.w	r2, #0
 8022bba:	f04f 0300 	mov.w	r3, #0
 8022bbe:	0fc2      	lsrs	r2, r0, #31
 8022bc0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022bc4:	17cb      	asrs	r3, r1, #31
 8022bc6:	4610      	mov	r0, r2
 8022bc8:	4619      	mov	r1, r3
 8022bca:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8022bce:	4603      	mov	r3, r0
 8022bd0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022bd2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8022bd6:	681b      	ldr	r3, [r3, #0]
 8022bd8:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 8022bdc:	d10a      	bne.n	8022bf4 <arm_softmax_s8+0x13e4>
 8022bde:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8022be2:	681b      	ldr	r3, [r3, #0]
 8022be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022be8:	d104      	bne.n	8022bf4 <arm_softmax_s8+0x13e4>
        result = Q31_MAX;
 8022bea:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8022bee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022bf2:	6013      	str	r3, [r2, #0]
    return result;
 8022bf4:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8022bf8:	681b      	ldr	r3, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8022bfa:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8022bfe:	f103 335a 	add.w	r3, r3, #1515870810	; 0x5a5a5a5a
 8022c02:	6013      	str	r3, [r2, #0]
    const int32_t shift = (1 << 29);
 8022c04:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8022c08:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8022c0c:	6013      	str	r3, [r2, #0]
 8022c0e:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8022c12:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8022c16:	681b      	ldr	r3, [r3, #0]
 8022c18:	6013      	str	r3, [r2, #0]
 8022c1a:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8022c1e:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8022c22:	681b      	ldr	r3, [r3, #0]
 8022c24:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022c26:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8022c2a:	2300      	movs	r3, #0
 8022c2c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022c32:	f04f 0300 	mov.w	r3, #0
 8022c36:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8022c3a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022c3e:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8022c42:	681b      	ldr	r3, [r3, #0]
 8022c44:	0fdb      	lsrs	r3, r3, #31
 8022c46:	b2da      	uxtb	r2, r3
 8022c48:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8022c4c:	681b      	ldr	r3, [r3, #0]
 8022c4e:	0fdb      	lsrs	r3, r3, #31
 8022c50:	b2db      	uxtb	r3, r3
 8022c52:	4053      	eors	r3, r2
 8022c54:	b2db      	uxtb	r3, r3
 8022c56:	2b00      	cmp	r3, #0
 8022c58:	d014      	beq.n	8022c84 <arm_softmax_s8+0x1474>
        mult = 1 - mult;
 8022c5a:	f04f 0001 	mov.w	r0, #1
 8022c5e:	f04f 0100 	mov.w	r1, #0
 8022c62:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8022c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c6a:	1a84      	subs	r4, r0, r2
 8022c6c:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8022c70:	eb61 0303 	sbc.w	r3, r1, r3
 8022c74:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8022c78:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8022c7c:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8022c80:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022c84:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8022c88:	681b      	ldr	r3, [r3, #0]
 8022c8a:	4618      	mov	r0, r3
 8022c8c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022c90:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8022c94:	681b      	ldr	r3, [r3, #0]
 8022c96:	461a      	mov	r2, r3
 8022c98:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8022c9c:	fb02 f501 	mul.w	r5, r2, r1
 8022ca0:	fb00 f403 	mul.w	r4, r0, r3
 8022ca4:	442c      	add	r4, r5
 8022ca6:	fba0 0102 	umull	r0, r1, r0, r2
 8022caa:	1863      	adds	r3, r4, r1
 8022cac:	4619      	mov	r1, r3
 8022cae:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8022cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cb6:	1814      	adds	r4, r2, r0
 8022cb8:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8022cbc:	414b      	adcs	r3, r1
 8022cbe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8022cc2:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8022cc6:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8022cca:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022cce:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8022cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cd6:	4610      	mov	r0, r2
 8022cd8:	4619      	mov	r1, r3
 8022cda:	2800      	cmp	r0, #0
 8022cdc:	f171 0300 	sbcs.w	r3, r1, #0
 8022ce0:	da06      	bge.n	8022cf0 <arm_softmax_s8+0x14e0>
 8022ce2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022ce6:	f04f 0300 	mov.w	r3, #0
 8022cea:	1880      	adds	r0, r0, r2
 8022cec:	eb43 0101 	adc.w	r1, r3, r1
 8022cf0:	f04f 0200 	mov.w	r2, #0
 8022cf4:	f04f 0300 	mov.w	r3, #0
 8022cf8:	0fc2      	lsrs	r2, r0, #31
 8022cfa:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022cfe:	17cb      	asrs	r3, r1, #31
 8022d00:	4610      	mov	r0, r2
 8022d02:	4619      	mov	r1, r3
 8022d04:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8022d08:	4603      	mov	r3, r0
 8022d0a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022d0c:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8022d10:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8022d14:	6812      	ldr	r2, [r2, #0]
 8022d16:	681b      	ldr	r3, [r3, #0]
 8022d18:	429a      	cmp	r2, r3
 8022d1a:	d10a      	bne.n	8022d32 <arm_softmax_s8+0x1522>
 8022d1c:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8022d20:	681b      	ldr	r3, [r3, #0]
 8022d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022d26:	d104      	bne.n	8022d32 <arm_softmax_s8+0x1522>
        result = Q31_MAX;
 8022d28:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8022d2c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022d30:	6013      	str	r3, [r2, #0]
    return result;
 8022d32:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8022d36:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8022d38:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8022d3c:	681b      	ldr	r3, [r3, #0]
 8022d3e:	1a99      	subs	r1, r3, r2
 8022d40:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8022d44:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8022d48:	681b      	ldr	r3, [r3, #0]
 8022d4a:	6013      	str	r3, [r2, #0]
 8022d4c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8022d50:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8022d52:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8022d56:	2300      	movs	r3, #0
 8022d58:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022d5e:	f04f 0300 	mov.w	r3, #0
 8022d62:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8022d66:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022d6a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8022d6e:	681b      	ldr	r3, [r3, #0]
 8022d70:	0fdb      	lsrs	r3, r3, #31
 8022d72:	b2da      	uxtb	r2, r3
 8022d74:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8022d78:	681b      	ldr	r3, [r3, #0]
 8022d7a:	0fdb      	lsrs	r3, r3, #31
 8022d7c:	b2db      	uxtb	r3, r3
 8022d7e:	4053      	eors	r3, r2
 8022d80:	b2db      	uxtb	r3, r3
 8022d82:	2b00      	cmp	r3, #0
 8022d84:	d014      	beq.n	8022db0 <arm_softmax_s8+0x15a0>
        mult = 1 - mult;
 8022d86:	f04f 0001 	mov.w	r0, #1
 8022d8a:	f04f 0100 	mov.w	r1, #0
 8022d8e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8022d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d96:	1a84      	subs	r4, r0, r2
 8022d98:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8022d9c:	eb61 0303 	sbc.w	r3, r1, r3
 8022da0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8022da4:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8022da8:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8022dac:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022db0:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8022db4:	681b      	ldr	r3, [r3, #0]
 8022db6:	4618      	mov	r0, r3
 8022db8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022dbc:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8022dc0:	681b      	ldr	r3, [r3, #0]
 8022dc2:	461a      	mov	r2, r3
 8022dc4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8022dc8:	fb02 f501 	mul.w	r5, r2, r1
 8022dcc:	fb00 f403 	mul.w	r4, r0, r3
 8022dd0:	442c      	add	r4, r5
 8022dd2:	fba0 0102 	umull	r0, r1, r0, r2
 8022dd6:	1863      	adds	r3, r4, r1
 8022dd8:	4619      	mov	r1, r3
 8022dda:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8022dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022de2:	1814      	adds	r4, r2, r0
 8022de4:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8022de8:	414b      	adcs	r3, r1
 8022dea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8022dee:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8022df2:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8022df6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022dfa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8022dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e02:	4610      	mov	r0, r2
 8022e04:	4619      	mov	r1, r3
 8022e06:	2800      	cmp	r0, #0
 8022e08:	f171 0300 	sbcs.w	r3, r1, #0
 8022e0c:	da06      	bge.n	8022e1c <arm_softmax_s8+0x160c>
 8022e0e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022e12:	f04f 0300 	mov.w	r3, #0
 8022e16:	1880      	adds	r0, r0, r2
 8022e18:	eb43 0101 	adc.w	r1, r3, r1
 8022e1c:	f04f 0200 	mov.w	r2, #0
 8022e20:	f04f 0300 	mov.w	r3, #0
 8022e24:	0fc2      	lsrs	r2, r0, #31
 8022e26:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022e2a:	17cb      	asrs	r3, r1, #31
 8022e2c:	4610      	mov	r0, r2
 8022e2e:	4619      	mov	r1, r3
 8022e30:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8022e34:	4603      	mov	r3, r0
 8022e36:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022e38:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8022e3c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8022e40:	6812      	ldr	r2, [r2, #0]
 8022e42:	681b      	ldr	r3, [r3, #0]
 8022e44:	429a      	cmp	r2, r3
 8022e46:	d10a      	bne.n	8022e5e <arm_softmax_s8+0x164e>
 8022e48:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8022e4c:	681b      	ldr	r3, [r3, #0]
 8022e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022e52:	d104      	bne.n	8022e5e <arm_softmax_s8+0x164e>
        result = Q31_MAX;
 8022e54:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8022e58:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022e5c:	6013      	str	r3, [r2, #0]
    return result;
 8022e5e:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8022e62:	681a      	ldr	r2, [r3, #0]
 8022e64:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8022e68:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8022e6a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8022e6e:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8022e72:	3b01      	subs	r3, #1
 8022e74:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8022e76:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8022e7a:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8022e7e:	681b      	ldr	r3, [r3, #0]
 8022e80:	009b      	lsls	r3, r3, #2
 8022e82:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8022e84:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8022e88:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8022e8c:	6812      	ldr	r2, [r2, #0]
 8022e8e:	681b      	ldr	r3, [r3, #0]
 8022e90:	429a      	cmp	r2, r3
 8022e92:	dd02      	ble.n	8022e9a <arm_softmax_s8+0x168a>
 8022e94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022e98:	e000      	b.n	8022e9c <arm_softmax_s8+0x168c>
 8022e9a:	2100      	movs	r1, #0
 8022e9c:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8022ea0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8022ea4:	6812      	ldr	r2, [r2, #0]
 8022ea6:	681b      	ldr	r3, [r3, #0]
 8022ea8:	429a      	cmp	r2, r3
 8022eaa:	dd01      	ble.n	8022eb0 <arm_softmax_s8+0x16a0>
 8022eac:	2200      	movs	r2, #0
 8022eae:	e001      	b.n	8022eb4 <arm_softmax_s8+0x16a4>
 8022eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022eb4:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8022eb8:	681b      	ldr	r3, [r3, #0]
 8022eba:	4013      	ands	r3, r2
 8022ebc:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8022ec0:	404b      	eors	r3, r1
 8022ec2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8022ec4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8022ec8:	681b      	ldr	r3, [r3, #0]
 8022eca:	425a      	negs	r2, r3
 8022ecc:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8022ed0:	681b      	ldr	r3, [r3, #0]
 8022ed2:	4293      	cmp	r3, r2
 8022ed4:	da02      	bge.n	8022edc <arm_softmax_s8+0x16cc>
 8022ed6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8022eda:	e000      	b.n	8022ede <arm_softmax_s8+0x16ce>
 8022edc:	2100      	movs	r1, #0
 8022ede:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8022ee2:	681b      	ldr	r3, [r3, #0]
 8022ee4:	425a      	negs	r2, r3
 8022ee6:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8022eea:	681b      	ldr	r3, [r3, #0]
 8022eec:	4293      	cmp	r3, r2
 8022eee:	da01      	bge.n	8022ef4 <arm_softmax_s8+0x16e4>
 8022ef0:	2200      	movs	r2, #0
 8022ef2:	e001      	b.n	8022ef8 <arm_softmax_s8+0x16e8>
 8022ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022ef8:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8022efc:	681b      	ldr	r3, [r3, #0]
 8022efe:	4013      	ands	r3, r2
 8022f00:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8022f04:	404b      	eors	r3, r1
 8022f06:	6013      	str	r3, [r2, #0]
    return result;
 8022f08:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8022f0c:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8022f0e:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8022f12:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8022f16:	681b      	ldr	r3, [r3, #0]
 8022f18:	440b      	add	r3, r1
 8022f1a:	6013      	str	r3, [r2, #0]
 8022f1c:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8022f20:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8022f24:	681b      	ldr	r3, [r3, #0]
 8022f26:	6013      	str	r3, [r2, #0]
 8022f28:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8022f2c:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8022f30:	681b      	ldr	r3, [r3, #0]
 8022f32:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022f34:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8022f38:	2300      	movs	r3, #0
 8022f3a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022f3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022f40:	f04f 0300 	mov.w	r3, #0
 8022f44:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8022f48:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022f4c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8022f50:	681b      	ldr	r3, [r3, #0]
 8022f52:	0fdb      	lsrs	r3, r3, #31
 8022f54:	b2da      	uxtb	r2, r3
 8022f56:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8022f5a:	681b      	ldr	r3, [r3, #0]
 8022f5c:	0fdb      	lsrs	r3, r3, #31
 8022f5e:	b2db      	uxtb	r3, r3
 8022f60:	4053      	eors	r3, r2
 8022f62:	b2db      	uxtb	r3, r3
 8022f64:	2b00      	cmp	r3, #0
 8022f66:	d014      	beq.n	8022f92 <arm_softmax_s8+0x1782>
        mult = 1 - mult;
 8022f68:	f04f 0001 	mov.w	r0, #1
 8022f6c:	f04f 0100 	mov.w	r1, #0
 8022f70:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8022f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f78:	1a84      	subs	r4, r0, r2
 8022f7a:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 8022f7e:	eb61 0303 	sbc.w	r3, r1, r3
 8022f82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8022f86:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8022f8a:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8022f8e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022f92:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8022f96:	681b      	ldr	r3, [r3, #0]
 8022f98:	4618      	mov	r0, r3
 8022f9a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022f9e:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8022fa2:	681b      	ldr	r3, [r3, #0]
 8022fa4:	461a      	mov	r2, r3
 8022fa6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8022faa:	fb02 f501 	mul.w	r5, r2, r1
 8022fae:	fb00 f403 	mul.w	r4, r0, r3
 8022fb2:	442c      	add	r4, r5
 8022fb4:	fba0 0102 	umull	r0, r1, r0, r2
 8022fb8:	1863      	adds	r3, r4, r1
 8022fba:	4619      	mov	r1, r3
 8022fbc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8022fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fc4:	1814      	adds	r4, r2, r0
 8022fc6:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8022fca:	414b      	adcs	r3, r1
 8022fcc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8022fd0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8022fd4:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8022fd8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022fdc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8022fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fe4:	4610      	mov	r0, r2
 8022fe6:	4619      	mov	r1, r3
 8022fe8:	2800      	cmp	r0, #0
 8022fea:	f171 0300 	sbcs.w	r3, r1, #0
 8022fee:	da06      	bge.n	8022ffe <arm_softmax_s8+0x17ee>
 8022ff0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022ff4:	f04f 0300 	mov.w	r3, #0
 8022ff8:	1880      	adds	r0, r0, r2
 8022ffa:	eb43 0101 	adc.w	r1, r3, r1
 8022ffe:	f04f 0200 	mov.w	r2, #0
 8023002:	f04f 0300 	mov.w	r3, #0
 8023006:	0fc2      	lsrs	r2, r0, #31
 8023008:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802300c:	17cb      	asrs	r3, r1, #31
 802300e:	4610      	mov	r0, r2
 8023010:	4619      	mov	r1, r3
 8023012:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8023016:	4603      	mov	r3, r0
 8023018:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802301a:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 802301e:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8023022:	6812      	ldr	r2, [r2, #0]
 8023024:	681b      	ldr	r3, [r3, #0]
 8023026:	429a      	cmp	r2, r3
 8023028:	d10a      	bne.n	8023040 <arm_softmax_s8+0x1830>
 802302a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 802302e:	681b      	ldr	r3, [r3, #0]
 8023030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023034:	d104      	bne.n	8023040 <arm_softmax_s8+0x1830>
        result = Q31_MAX;
 8023036:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 802303a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802303e:	6013      	str	r3, [r2, #0]
    return result;
 8023040:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8023044:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8023046:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 802304a:	681b      	ldr	r3, [r3, #0]
 802304c:	1a99      	subs	r1, r3, r2
 802304e:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8023052:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8023056:	681b      	ldr	r3, [r3, #0]
 8023058:	6013      	str	r3, [r2, #0]
 802305a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 802305e:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8023060:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8023064:	2300      	movs	r3, #0
 8023066:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023068:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802306c:	f04f 0300 	mov.w	r3, #0
 8023070:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
    if ((m1 < 0) ^ (m2 < 0))
 8023074:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8023078:	681b      	ldr	r3, [r3, #0]
 802307a:	0fdb      	lsrs	r3, r3, #31
 802307c:	b2da      	uxtb	r2, r3
 802307e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8023082:	681b      	ldr	r3, [r3, #0]
 8023084:	0fdb      	lsrs	r3, r3, #31
 8023086:	b2db      	uxtb	r3, r3
 8023088:	4053      	eors	r3, r2
 802308a:	b2db      	uxtb	r3, r3
 802308c:	2b00      	cmp	r3, #0
 802308e:	d010      	beq.n	80230b2 <arm_softmax_s8+0x18a2>
        mult = 1 - mult;
 8023090:	f04f 0001 	mov.w	r0, #1
 8023094:	f04f 0100 	mov.w	r1, #0
 8023098:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 802309c:	1a84      	subs	r4, r0, r2
 802309e:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 80230a2:	eb61 0303 	sbc.w	r3, r1, r3
 80230a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80230aa:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80230ae:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
    mult = mult + (q63_t)m1 * m2;
 80230b2:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80230b6:	681b      	ldr	r3, [r3, #0]
 80230b8:	4618      	mov	r0, r3
 80230ba:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80230be:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80230c2:	681b      	ldr	r3, [r3, #0]
 80230c4:	461a      	mov	r2, r3
 80230c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80230ca:	fb02 f501 	mul.w	r5, r2, r1
 80230ce:	fb00 f403 	mul.w	r4, r0, r3
 80230d2:	442c      	add	r4, r5
 80230d4:	fba0 0102 	umull	r0, r1, r0, r2
 80230d8:	1863      	adds	r3, r4, r1
 80230da:	4619      	mov	r1, r3
 80230dc:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 80230e0:	1814      	adds	r4, r2, r0
 80230e2:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 80230e6:	414b      	adcs	r3, r1
 80230e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80230ec:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80230f0:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
    result = (int32_t)(mult / (1ll << 31));
 80230f4:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 80230f8:	4610      	mov	r0, r2
 80230fa:	4619      	mov	r1, r3
 80230fc:	2800      	cmp	r0, #0
 80230fe:	f171 0300 	sbcs.w	r3, r1, #0
 8023102:	da06      	bge.n	8023112 <arm_softmax_s8+0x1902>
 8023104:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023108:	f04f 0300 	mov.w	r3, #0
 802310c:	1880      	adds	r0, r0, r2
 802310e:	eb43 0101 	adc.w	r1, r3, r1
 8023112:	f04f 0200 	mov.w	r2, #0
 8023116:	f04f 0300 	mov.w	r3, #0
 802311a:	0fc2      	lsrs	r2, r0, #31
 802311c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023120:	17cb      	asrs	r3, r1, #31
 8023122:	4610      	mov	r0, r2
 8023124:	4619      	mov	r1, r3
 8023126:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 802312a:	4603      	mov	r3, r0
 802312c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802312e:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8023132:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8023136:	6812      	ldr	r2, [r2, #0]
 8023138:	681b      	ldr	r3, [r3, #0]
 802313a:	429a      	cmp	r2, r3
 802313c:	d10a      	bne.n	8023154 <arm_softmax_s8+0x1944>
 802313e:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8023142:	681b      	ldr	r3, [r3, #0]
 8023144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023148:	d104      	bne.n	8023154 <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 802314a:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 802314e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023152:	6013      	str	r3, [r2, #0]
    return result;
 8023154:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8023158:	681a      	ldr	r2, [r3, #0]
 802315a:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 802315e:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8023160:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8023164:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8023168:	3b01      	subs	r3, #1
 802316a:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 802316c:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8023170:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8023174:	681b      	ldr	r3, [r3, #0]
 8023176:	009b      	lsls	r3, r3, #2
 8023178:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 802317a:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 802317e:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8023182:	6812      	ldr	r2, [r2, #0]
 8023184:	681b      	ldr	r3, [r3, #0]
 8023186:	429a      	cmp	r2, r3
 8023188:	dd02      	ble.n	8023190 <arm_softmax_s8+0x1980>
 802318a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802318e:	e000      	b.n	8023192 <arm_softmax_s8+0x1982>
 8023190:	2100      	movs	r1, #0
 8023192:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8023196:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 802319a:	6812      	ldr	r2, [r2, #0]
 802319c:	681b      	ldr	r3, [r3, #0]
 802319e:	429a      	cmp	r2, r3
 80231a0:	dd01      	ble.n	80231a6 <arm_softmax_s8+0x1996>
 80231a2:	2200      	movs	r2, #0
 80231a4:	e001      	b.n	80231aa <arm_softmax_s8+0x199a>
 80231a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80231aa:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80231ae:	681b      	ldr	r3, [r3, #0]
 80231b0:	4013      	ands	r3, r2
 80231b2:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 80231b6:	404b      	eors	r3, r1
 80231b8:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80231ba:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80231be:	681b      	ldr	r3, [r3, #0]
 80231c0:	425a      	negs	r2, r3
 80231c2:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80231c6:	681b      	ldr	r3, [r3, #0]
 80231c8:	4293      	cmp	r3, r2
 80231ca:	da02      	bge.n	80231d2 <arm_softmax_s8+0x19c2>
 80231cc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80231d0:	e000      	b.n	80231d4 <arm_softmax_s8+0x19c4>
 80231d2:	2100      	movs	r1, #0
 80231d4:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80231d8:	681b      	ldr	r3, [r3, #0]
 80231da:	425a      	negs	r2, r3
 80231dc:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80231e0:	681b      	ldr	r3, [r3, #0]
 80231e2:	4293      	cmp	r3, r2
 80231e4:	da01      	bge.n	80231ea <arm_softmax_s8+0x19da>
 80231e6:	2200      	movs	r2, #0
 80231e8:	e001      	b.n	80231ee <arm_softmax_s8+0x19de>
 80231ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80231ee:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80231f2:	681b      	ldr	r3, [r3, #0]
 80231f4:	4013      	ands	r3, r2
 80231f6:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 80231fa:	404b      	eors	r3, r1
 80231fc:	6013      	str	r3, [r2, #0]
    return result;
 80231fe:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8023202:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8023204:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8023208:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 802320c:	681b      	ldr	r3, [r3, #0]
 802320e:	440b      	add	r3, r1
 8023210:	6013      	str	r3, [r2, #0]
 8023212:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8023216:	f207 4374 	addw	r3, r7, #1140	; 0x474
 802321a:	681b      	ldr	r3, [r3, #0]
 802321c:	6013      	str	r3, [r2, #0]
 802321e:	f507 7277 	add.w	r2, r7, #988	; 0x3dc
 8023222:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8023226:	681b      	ldr	r3, [r3, #0]
 8023228:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802322a:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 802322e:	2300      	movs	r3, #0
 8023230:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023236:	f04f 0300 	mov.w	r3, #0
 802323a:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
    if ((m1 < 0) ^ (m2 < 0))
 802323e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8023242:	681b      	ldr	r3, [r3, #0]
 8023244:	0fdb      	lsrs	r3, r3, #31
 8023246:	b2da      	uxtb	r2, r3
 8023248:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 802324c:	681b      	ldr	r3, [r3, #0]
 802324e:	0fdb      	lsrs	r3, r3, #31
 8023250:	b2db      	uxtb	r3, r3
 8023252:	4053      	eors	r3, r2
 8023254:	b2db      	uxtb	r3, r3
 8023256:	2b00      	cmp	r3, #0
 8023258:	d010      	beq.n	802327c <arm_softmax_s8+0x1a6c>
        mult = 1 - mult;
 802325a:	f04f 0001 	mov.w	r0, #1
 802325e:	f04f 0100 	mov.w	r1, #0
 8023262:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8023266:	1a84      	subs	r4, r0, r2
 8023268:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 802326c:	eb61 0303 	sbc.w	r3, r1, r3
 8023270:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8023274:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8023278:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
    mult = mult + (q63_t)m1 * m2;
 802327c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8023280:	681b      	ldr	r3, [r3, #0]
 8023282:	4618      	mov	r0, r3
 8023284:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023288:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 802328c:	681b      	ldr	r3, [r3, #0]
 802328e:	461a      	mov	r2, r3
 8023290:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023294:	fb02 f501 	mul.w	r5, r2, r1
 8023298:	fb00 f403 	mul.w	r4, r0, r3
 802329c:	442c      	add	r4, r5
 802329e:	fba0 0102 	umull	r0, r1, r0, r2
 80232a2:	1863      	adds	r3, r4, r1
 80232a4:	4619      	mov	r1, r3
 80232a6:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 80232aa:	1814      	adds	r4, r2, r0
 80232ac:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80232b0:	414b      	adcs	r3, r1
 80232b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80232b6:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80232ba:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
    result = (int32_t)(mult / (1ll << 31));
 80232be:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 80232c2:	4610      	mov	r0, r2
 80232c4:	4619      	mov	r1, r3
 80232c6:	2800      	cmp	r0, #0
 80232c8:	f171 0300 	sbcs.w	r3, r1, #0
 80232cc:	da06      	bge.n	80232dc <arm_softmax_s8+0x1acc>
 80232ce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80232d2:	f04f 0300 	mov.w	r3, #0
 80232d6:	1880      	adds	r0, r0, r2
 80232d8:	eb43 0101 	adc.w	r1, r3, r1
 80232dc:	f04f 0200 	mov.w	r2, #0
 80232e0:	f04f 0300 	mov.w	r3, #0
 80232e4:	0fc2      	lsrs	r2, r0, #31
 80232e6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80232ea:	17cb      	asrs	r3, r1, #31
 80232ec:	4610      	mov	r0, r2
 80232ee:	4619      	mov	r1, r3
 80232f0:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80232f4:	4603      	mov	r3, r0
 80232f6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80232f8:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80232fc:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8023300:	6812      	ldr	r2, [r2, #0]
 8023302:	681b      	ldr	r3, [r3, #0]
 8023304:	429a      	cmp	r2, r3
 8023306:	d10a      	bne.n	802331e <arm_softmax_s8+0x1b0e>
 8023308:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 802330c:	681b      	ldr	r3, [r3, #0]
 802330e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023312:	d104      	bne.n	802331e <arm_softmax_s8+0x1b0e>
        result = Q31_MAX;
 8023314:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8023318:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802331c:	6013      	str	r3, [r2, #0]
    return result;
 802331e:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8023322:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8023324:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8023328:	681b      	ldr	r3, [r3, #0]
 802332a:	1a99      	subs	r1, r3, r2
 802332c:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 8023330:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8023334:	681b      	ldr	r3, [r3, #0]
 8023336:	6013      	str	r3, [r2, #0]
 8023338:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 802333c:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 802333e:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8023342:	2300      	movs	r3, #0
 8023344:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023346:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802334a:	f04f 0300 	mov.w	r3, #0
 802334e:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
    if ((m1 < 0) ^ (m2 < 0))
 8023352:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8023356:	681b      	ldr	r3, [r3, #0]
 8023358:	0fdb      	lsrs	r3, r3, #31
 802335a:	b2da      	uxtb	r2, r3
 802335c:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8023360:	681b      	ldr	r3, [r3, #0]
 8023362:	0fdb      	lsrs	r3, r3, #31
 8023364:	b2db      	uxtb	r3, r3
 8023366:	4053      	eors	r3, r2
 8023368:	b2db      	uxtb	r3, r3
 802336a:	2b00      	cmp	r3, #0
 802336c:	d010      	beq.n	8023390 <arm_softmax_s8+0x1b80>
        mult = 1 - mult;
 802336e:	f04f 0001 	mov.w	r0, #1
 8023372:	f04f 0100 	mov.w	r1, #0
 8023376:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 802337a:	1a84      	subs	r4, r0, r2
 802337c:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8023380:	eb61 0303 	sbc.w	r3, r1, r3
 8023384:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8023388:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 802338c:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    mult = mult + (q63_t)m1 * m2;
 8023390:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8023394:	681b      	ldr	r3, [r3, #0]
 8023396:	4618      	mov	r0, r3
 8023398:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802339c:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80233a0:	681b      	ldr	r3, [r3, #0]
 80233a2:	461a      	mov	r2, r3
 80233a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80233a8:	fb02 f501 	mul.w	r5, r2, r1
 80233ac:	fb00 f403 	mul.w	r4, r0, r3
 80233b0:	442c      	add	r4, r5
 80233b2:	fba0 0102 	umull	r0, r1, r0, r2
 80233b6:	1863      	adds	r3, r4, r1
 80233b8:	4619      	mov	r1, r3
 80233ba:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 80233be:	1814      	adds	r4, r2, r0
 80233c0:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80233c4:	414b      	adcs	r3, r1
 80233c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80233ca:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80233ce:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    result = (int32_t)(mult / (1ll << 31));
 80233d2:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 80233d6:	4610      	mov	r0, r2
 80233d8:	4619      	mov	r1, r3
 80233da:	2800      	cmp	r0, #0
 80233dc:	f171 0300 	sbcs.w	r3, r1, #0
 80233e0:	da06      	bge.n	80233f0 <arm_softmax_s8+0x1be0>
 80233e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80233e6:	f04f 0300 	mov.w	r3, #0
 80233ea:	1880      	adds	r0, r0, r2
 80233ec:	eb43 0101 	adc.w	r1, r3, r1
 80233f0:	f04f 0200 	mov.w	r2, #0
 80233f4:	f04f 0300 	mov.w	r3, #0
 80233f8:	0fc2      	lsrs	r2, r0, #31
 80233fa:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80233fe:	17cb      	asrs	r3, r1, #31
 8023400:	4610      	mov	r0, r2
 8023402:	4619      	mov	r1, r3
 8023404:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8023408:	4603      	mov	r3, r0
 802340a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802340c:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 8023410:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8023414:	6812      	ldr	r2, [r2, #0]
 8023416:	681b      	ldr	r3, [r3, #0]
 8023418:	429a      	cmp	r2, r3
 802341a:	d10a      	bne.n	8023432 <arm_softmax_s8+0x1c22>
 802341c:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8023420:	681b      	ldr	r3, [r3, #0]
 8023422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023426:	d104      	bne.n	8023432 <arm_softmax_s8+0x1c22>
        result = Q31_MAX;
 8023428:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 802342c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023430:	6013      	str	r3, [r2, #0]
    return result;
 8023432:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8023436:	681a      	ldr	r2, [r3, #0]
 8023438:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 802343c:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 802343e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8023442:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8023446:	3b01      	subs	r3, #1
 8023448:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 802344a:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 802344e:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8023452:	681b      	ldr	r3, [r3, #0]
 8023454:	009b      	lsls	r3, r3, #2
 8023456:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8023458:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 802345c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8023460:	6812      	ldr	r2, [r2, #0]
 8023462:	681b      	ldr	r3, [r3, #0]
 8023464:	429a      	cmp	r2, r3
 8023466:	dd02      	ble.n	802346e <arm_softmax_s8+0x1c5e>
 8023468:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802346c:	e000      	b.n	8023470 <arm_softmax_s8+0x1c60>
 802346e:	2100      	movs	r1, #0
 8023470:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 8023474:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8023478:	6812      	ldr	r2, [r2, #0]
 802347a:	681b      	ldr	r3, [r3, #0]
 802347c:	429a      	cmp	r2, r3
 802347e:	dd01      	ble.n	8023484 <arm_softmax_s8+0x1c74>
 8023480:	2200      	movs	r2, #0
 8023482:	e001      	b.n	8023488 <arm_softmax_s8+0x1c78>
 8023484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023488:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 802348c:	681b      	ldr	r3, [r3, #0]
 802348e:	4013      	ands	r3, r2
 8023490:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8023494:	404b      	eors	r3, r1
 8023496:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8023498:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 802349c:	681b      	ldr	r3, [r3, #0]
 802349e:	425a      	negs	r2, r3
 80234a0:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 80234a4:	681b      	ldr	r3, [r3, #0]
 80234a6:	4293      	cmp	r3, r2
 80234a8:	da02      	bge.n	80234b0 <arm_softmax_s8+0x1ca0>
 80234aa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80234ae:	e000      	b.n	80234b2 <arm_softmax_s8+0x1ca2>
 80234b0:	2100      	movs	r1, #0
 80234b2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80234b6:	681b      	ldr	r3, [r3, #0]
 80234b8:	425a      	negs	r2, r3
 80234ba:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 80234be:	681b      	ldr	r3, [r3, #0]
 80234c0:	4293      	cmp	r3, r2
 80234c2:	da01      	bge.n	80234c8 <arm_softmax_s8+0x1cb8>
 80234c4:	2200      	movs	r2, #0
 80234c6:	e001      	b.n	80234cc <arm_softmax_s8+0x1cbc>
 80234c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80234cc:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 80234d0:	681b      	ldr	r3, [r3, #0]
 80234d2:	4013      	ands	r3, r2
 80234d4:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 80234d8:	404b      	eors	r3, r1
 80234da:	6013      	str	r3, [r2, #0]
    return result;
 80234dc:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 80234e0:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80234e2:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 80234e6:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80234ea:	681b      	ldr	r3, [r3, #0]
 80234ec:	440b      	add	r3, r1
 80234ee:	6013      	str	r3, [r2, #0]
 80234f0:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 80234f4:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80234f8:	681b      	ldr	r3, [r3, #0]
 80234fa:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80234fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023500:	f507 7269 	add.w	r2, r7, #932	; 0x3a4
 8023504:	3b01      	subs	r3, #1
 8023506:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8023508:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 802350c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8023510:	681b      	ldr	r3, [r3, #0]
 8023512:	005b      	lsls	r3, r3, #1
 8023514:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8023516:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 802351a:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 802351e:	6812      	ldr	r2, [r2, #0]
 8023520:	681b      	ldr	r3, [r3, #0]
 8023522:	429a      	cmp	r2, r3
 8023524:	dd02      	ble.n	802352c <arm_softmax_s8+0x1d1c>
 8023526:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802352a:	e000      	b.n	802352e <arm_softmax_s8+0x1d1e>
 802352c:	2100      	movs	r1, #0
 802352e:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 8023532:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8023536:	6812      	ldr	r2, [r2, #0]
 8023538:	681b      	ldr	r3, [r3, #0]
 802353a:	429a      	cmp	r2, r3
 802353c:	dd01      	ble.n	8023542 <arm_softmax_s8+0x1d32>
 802353e:	2200      	movs	r2, #0
 8023540:	e001      	b.n	8023546 <arm_softmax_s8+0x1d36>
 8023542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023546:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 802354a:	681b      	ldr	r3, [r3, #0]
 802354c:	4013      	ands	r3, r2
 802354e:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 8023552:	404b      	eors	r3, r1
 8023554:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8023556:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 802355a:	681b      	ldr	r3, [r3, #0]
 802355c:	425a      	negs	r2, r3
 802355e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8023562:	681b      	ldr	r3, [r3, #0]
 8023564:	4293      	cmp	r3, r2
 8023566:	da02      	bge.n	802356e <arm_softmax_s8+0x1d5e>
 8023568:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802356c:	e000      	b.n	8023570 <arm_softmax_s8+0x1d60>
 802356e:	2100      	movs	r1, #0
 8023570:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8023574:	681b      	ldr	r3, [r3, #0]
 8023576:	425a      	negs	r2, r3
 8023578:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 802357c:	681b      	ldr	r3, [r3, #0]
 802357e:	4293      	cmp	r3, r2
 8023580:	da01      	bge.n	8023586 <arm_softmax_s8+0x1d76>
 8023582:	2200      	movs	r2, #0
 8023584:	e001      	b.n	802358a <arm_softmax_s8+0x1d7a>
 8023586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802358a:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 802358e:	681b      	ldr	r3, [r3, #0]
 8023590:	4013      	ands	r3, r2
 8023592:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 8023596:	404b      	eors	r3, r1
 8023598:	6013      	str	r3, [r2, #0]
    return result;
 802359a:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 802359e:	681b      	ldr	r3, [r3, #0]
    return MUL_POW2(x, 1);
 80235a0:	bf00      	nop
 80235a2:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4

        for (col = 0; col < row_size; ++col)
 80235a6:	2300      	movs	r3, #0
 80235a8:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80235ac:	f001 b97b 	b.w	80248a6 <arm_softmax_s8+0x3096>
 80235b0:	c3c3c3c4 	.word	0xc3c3c3c4
 80235b4:	ffffffff 	.word	0xffffffff
        {
            diff = input[col] - max;
 80235b8:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 80235bc:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80235c0:	681b      	ldr	r3, [r3, #0]
 80235c2:	4413      	add	r3, r2
 80235c4:	f993 3000 	ldrsb.w	r3, [r3]
 80235c8:	461a      	mov	r2, r3
 80235ca:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 80235ce:	1ad3      	subs	r3, r2, r3
 80235d0:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
            if (diff >= diff_min)
 80235d4:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 80235d8:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 80235dc:	429a      	cmp	r2, r3
 80235de:	f2c1 8156 	blt.w	802488e <arm_softmax_s8+0x307e>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 80235e2:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 80235e6:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 80235ea:	fb03 f202 	mul.w	r2, r3, r2
 80235ee:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80235f2:	601a      	str	r2, [r3, #0]
 80235f4:	f507 7212 	add.w	r2, r7, #584	; 0x248
 80235f8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80235fc:	681b      	ldr	r3, [r3, #0]
 80235fe:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023600:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8023604:	2300      	movs	r3, #0
 8023606:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023608:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802360c:	f04f 0300 	mov.w	r3, #0
 8023610:	e9c7 238e 	strd	r2, r3, [r7, #568]	; 0x238
    if ((m1 < 0) ^ (m2 < 0))
 8023614:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8023618:	681b      	ldr	r3, [r3, #0]
 802361a:	0fdb      	lsrs	r3, r3, #31
 802361c:	b2da      	uxtb	r2, r3
 802361e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8023622:	681b      	ldr	r3, [r3, #0]
 8023624:	0fdb      	lsrs	r3, r3, #31
 8023626:	b2db      	uxtb	r3, r3
 8023628:	4053      	eors	r3, r2
 802362a:	b2db      	uxtb	r3, r3
 802362c:	2b00      	cmp	r3, #0
 802362e:	d010      	beq.n	8023652 <arm_softmax_s8+0x1e42>
        mult = 1 - mult;
 8023630:	f04f 0001 	mov.w	r0, #1
 8023634:	f04f 0100 	mov.w	r1, #0
 8023638:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 802363c:	1a84      	subs	r4, r0, r2
 802363e:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8023642:	eb61 0303 	sbc.w	r3, r1, r3
 8023646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 802364a:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 802364e:	e9c7 348e 	strd	r3, r4, [r7, #568]	; 0x238
    mult = mult + (q63_t)m1 * m2;
 8023652:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8023656:	681b      	ldr	r3, [r3, #0]
 8023658:	4618      	mov	r0, r3
 802365a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802365e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8023662:	681b      	ldr	r3, [r3, #0]
 8023664:	461a      	mov	r2, r3
 8023666:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802366a:	fb02 f501 	mul.w	r5, r2, r1
 802366e:	fb00 f403 	mul.w	r4, r0, r3
 8023672:	442c      	add	r4, r5
 8023674:	fba0 0102 	umull	r0, r1, r0, r2
 8023678:	1863      	adds	r3, r4, r1
 802367a:	4619      	mov	r1, r3
 802367c:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8023680:	1814      	adds	r4, r2, r0
 8023682:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8023686:	414b      	adcs	r3, r1
 8023688:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 802368c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8023690:	e9c7 348e 	strd	r3, r4, [r7, #568]	; 0x238
    result = (int32_t)(mult / (1ll << 31));
 8023694:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8023698:	4610      	mov	r0, r2
 802369a:	4619      	mov	r1, r3
 802369c:	2800      	cmp	r0, #0
 802369e:	f171 0300 	sbcs.w	r3, r1, #0
 80236a2:	da06      	bge.n	80236b2 <arm_softmax_s8+0x1ea2>
 80236a4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80236a8:	f04f 0300 	mov.w	r3, #0
 80236ac:	1880      	adds	r0, r0, r2
 80236ae:	eb43 0101 	adc.w	r1, r3, r1
 80236b2:	f04f 0200 	mov.w	r2, #0
 80236b6:	f04f 0300 	mov.w	r3, #0
 80236ba:	0fc2      	lsrs	r2, r0, #31
 80236bc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80236c0:	17cb      	asrs	r3, r1, #31
 80236c2:	4610      	mov	r0, r2
 80236c4:	4619      	mov	r1, r3
 80236c6:	f507 7211 	add.w	r2, r7, #580	; 0x244
 80236ca:	4603      	mov	r3, r0
 80236cc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80236ce:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 80236d2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80236d6:	6812      	ldr	r2, [r2, #0]
 80236d8:	681b      	ldr	r3, [r3, #0]
 80236da:	429a      	cmp	r2, r3
 80236dc:	d10a      	bne.n	80236f4 <arm_softmax_s8+0x1ee4>
 80236de:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80236e2:	681b      	ldr	r3, [r3, #0]
 80236e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80236e8:	d104      	bne.n	80236f4 <arm_softmax_s8+0x1ee4>
        result = Q31_MAX;
 80236ea:	f507 7211 	add.w	r2, r7, #580	; 0x244
 80236ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80236f2:	6013      	str	r3, [r2, #0]
    return result;
 80236f4:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80236f8:	681a      	ldr	r2, [r3, #0]
 80236fa:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80236fe:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 8023700:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8023704:	2300      	movs	r3, #0
 8023706:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 8023708:	f507 7259 	add.w	r2, r7, #868	; 0x364
 802370c:	2318      	movs	r3, #24
 802370e:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8023710:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8023714:	2201      	movs	r2, #1
 8023716:	681b      	ldr	r3, [r3, #0]
 8023718:	fa02 f303 	lsl.w	r3, r2, r3
 802371c:	1e5a      	subs	r2, r3, #1
 802371e:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8023722:	681b      	ldr	r3, [r3, #0]
 8023724:	ea02 0103 	and.w	r1, r2, r3
 8023728:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802372c:	2201      	movs	r2, #1
 802372e:	681b      	ldr	r3, [r3, #0]
 8023730:	fa02 f303 	lsl.w	r3, r2, r3
 8023734:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8023738:	1acb      	subs	r3, r1, r3
 802373a:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 802373c:	f507 7157 	add.w	r1, r7, #860	; 0x35c
 8023740:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8023744:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8023748:	6812      	ldr	r2, [r2, #0]
 802374a:	681b      	ldr	r3, [r3, #0]
 802374c:	1ad3      	subs	r3, r2, r3
 802374e:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8023750:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8023754:	681b      	ldr	r3, [r3, #0]
 8023756:	015b      	lsls	r3, r3, #5
 8023758:	f507 7256 	add.w	r2, r7, #856	; 0x358
 802375c:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8023760:	6013      	str	r3, [r2, #0]
 8023762:	f507 7255 	add.w	r2, r7, #852	; 0x354
 8023766:	f507 7356 	add.w	r3, r7, #856	; 0x358
 802376a:	681b      	ldr	r3, [r3, #0]
 802376c:	6013      	str	r3, [r2, #0]
 802376e:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8023772:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8023776:	681b      	ldr	r3, [r3, #0]
 8023778:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802377a:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 802377e:	2300      	movs	r3, #0
 8023780:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023782:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023786:	f04f 0300 	mov.w	r3, #0
 802378a:	e9c7 23d0 	strd	r2, r3, [r7, #832]	; 0x340
    if ((m1 < 0) ^ (m2 < 0))
 802378e:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8023792:	681b      	ldr	r3, [r3, #0]
 8023794:	0fdb      	lsrs	r3, r3, #31
 8023796:	b2da      	uxtb	r2, r3
 8023798:	f507 7354 	add.w	r3, r7, #848	; 0x350
 802379c:	681b      	ldr	r3, [r3, #0]
 802379e:	0fdb      	lsrs	r3, r3, #31
 80237a0:	b2db      	uxtb	r3, r3
 80237a2:	4053      	eors	r3, r2
 80237a4:	b2db      	uxtb	r3, r3
 80237a6:	2b00      	cmp	r3, #0
 80237a8:	d010      	beq.n	80237cc <arm_softmax_s8+0x1fbc>
        mult = 1 - mult;
 80237aa:	f04f 0001 	mov.w	r0, #1
 80237ae:	f04f 0100 	mov.w	r1, #0
 80237b2:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 80237b6:	1a84      	subs	r4, r0, r2
 80237b8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80237bc:	eb61 0303 	sbc.w	r3, r1, r3
 80237c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80237c4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80237c8:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    mult = mult + (q63_t)m1 * m2;
 80237cc:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80237d0:	681b      	ldr	r3, [r3, #0]
 80237d2:	4618      	mov	r0, r3
 80237d4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80237d8:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80237dc:	681b      	ldr	r3, [r3, #0]
 80237de:	461a      	mov	r2, r3
 80237e0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80237e4:	fb02 f501 	mul.w	r5, r2, r1
 80237e8:	fb00 f403 	mul.w	r4, r0, r3
 80237ec:	442c      	add	r4, r5
 80237ee:	fba0 0102 	umull	r0, r1, r0, r2
 80237f2:	1863      	adds	r3, r4, r1
 80237f4:	4619      	mov	r1, r3
 80237f6:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 80237fa:	1814      	adds	r4, r2, r0
 80237fc:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8023800:	414b      	adcs	r3, r1
 8023802:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8023806:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 802380a:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    result = (int32_t)(mult / (1ll << 31));
 802380e:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8023812:	4610      	mov	r0, r2
 8023814:	4619      	mov	r1, r3
 8023816:	2800      	cmp	r0, #0
 8023818:	f171 0300 	sbcs.w	r3, r1, #0
 802381c:	da06      	bge.n	802382c <arm_softmax_s8+0x201c>
 802381e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023822:	f04f 0300 	mov.w	r3, #0
 8023826:	1880      	adds	r0, r0, r2
 8023828:	eb43 0101 	adc.w	r1, r3, r1
 802382c:	f04f 0200 	mov.w	r2, #0
 8023830:	f04f 0300 	mov.w	r3, #0
 8023834:	0fc2      	lsrs	r2, r0, #31
 8023836:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802383a:	17cb      	asrs	r3, r1, #31
 802383c:	4610      	mov	r0, r2
 802383e:	4619      	mov	r1, r3
 8023840:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 8023844:	4603      	mov	r3, r0
 8023846:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023848:	f507 7255 	add.w	r2, r7, #852	; 0x354
 802384c:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8023850:	6812      	ldr	r2, [r2, #0]
 8023852:	681b      	ldr	r3, [r3, #0]
 8023854:	429a      	cmp	r2, r3
 8023856:	d10a      	bne.n	802386e <arm_softmax_s8+0x205e>
 8023858:	f507 7355 	add.w	r3, r7, #852	; 0x354
 802385c:	681b      	ldr	r3, [r3, #0]
 802385e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023862:	d104      	bne.n	802386e <arm_softmax_s8+0x205e>
        result = Q31_MAX;
 8023864:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 8023868:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802386c:	6013      	str	r3, [r2, #0]
    return result;
 802386e:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8023872:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 8023874:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8023878:	601a      	str	r2, [r3, #0]
 802387a:	f507 724e 	add.w	r2, r7, #824	; 0x338
 802387e:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8023882:	681b      	ldr	r3, [r3, #0]
 8023884:	6013      	str	r3, [r2, #0]
 8023886:	f507 724d 	add.w	r2, r7, #820	; 0x334
 802388a:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 802388e:	681b      	ldr	r3, [r3, #0]
 8023890:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023892:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8023896:	2300      	movs	r3, #0
 8023898:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802389a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802389e:	f04f 0300 	mov.w	r3, #0
 80238a2:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
    if ((m1 < 0) ^ (m2 < 0))
 80238a6:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80238aa:	681b      	ldr	r3, [r3, #0]
 80238ac:	0fdb      	lsrs	r3, r3, #31
 80238ae:	b2da      	uxtb	r2, r3
 80238b0:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80238b4:	681b      	ldr	r3, [r3, #0]
 80238b6:	0fdb      	lsrs	r3, r3, #31
 80238b8:	b2db      	uxtb	r3, r3
 80238ba:	4053      	eors	r3, r2
 80238bc:	b2db      	uxtb	r3, r3
 80238be:	2b00      	cmp	r3, #0
 80238c0:	d010      	beq.n	80238e4 <arm_softmax_s8+0x20d4>
        mult = 1 - mult;
 80238c2:	f04f 0001 	mov.w	r0, #1
 80238c6:	f04f 0100 	mov.w	r1, #0
 80238ca:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 80238ce:	1a84      	subs	r4, r0, r2
 80238d0:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80238d4:	eb61 0303 	sbc.w	r3, r1, r3
 80238d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80238dc:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80238e0:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    mult = mult + (q63_t)m1 * m2;
 80238e4:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80238e8:	681b      	ldr	r3, [r3, #0]
 80238ea:	4618      	mov	r0, r3
 80238ec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80238f0:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80238f4:	681b      	ldr	r3, [r3, #0]
 80238f6:	461a      	mov	r2, r3
 80238f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80238fc:	fb02 f501 	mul.w	r5, r2, r1
 8023900:	fb00 f403 	mul.w	r4, r0, r3
 8023904:	442c      	add	r4, r5
 8023906:	fba0 0102 	umull	r0, r1, r0, r2
 802390a:	1863      	adds	r3, r4, r1
 802390c:	4619      	mov	r1, r3
 802390e:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8023912:	1814      	adds	r4, r2, r0
 8023914:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8023918:	414b      	adcs	r3, r1
 802391a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802391e:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8023922:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    result = (int32_t)(mult / (1ll << 31));
 8023926:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 802392a:	4610      	mov	r0, r2
 802392c:	4619      	mov	r1, r3
 802392e:	2800      	cmp	r0, #0
 8023930:	f171 0300 	sbcs.w	r3, r1, #0
 8023934:	da06      	bge.n	8023944 <arm_softmax_s8+0x2134>
 8023936:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802393a:	f04f 0300 	mov.w	r3, #0
 802393e:	1880      	adds	r0, r0, r2
 8023940:	eb43 0101 	adc.w	r1, r3, r1
 8023944:	f04f 0200 	mov.w	r2, #0
 8023948:	f04f 0300 	mov.w	r3, #0
 802394c:	0fc2      	lsrs	r2, r0, #31
 802394e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023952:	17cb      	asrs	r3, r1, #31
 8023954:	4610      	mov	r0, r2
 8023956:	4619      	mov	r1, r3
 8023958:	f507 724c 	add.w	r2, r7, #816	; 0x330
 802395c:	4603      	mov	r3, r0
 802395e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023960:	f507 724e 	add.w	r2, r7, #824	; 0x338
 8023964:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8023968:	6812      	ldr	r2, [r2, #0]
 802396a:	681b      	ldr	r3, [r3, #0]
 802396c:	429a      	cmp	r2, r3
 802396e:	d10a      	bne.n	8023986 <arm_softmax_s8+0x2176>
 8023970:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8023974:	681b      	ldr	r3, [r3, #0]
 8023976:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802397a:	d104      	bne.n	8023986 <arm_softmax_s8+0x2176>
        result = Q31_MAX;
 802397c:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8023980:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023984:	6013      	str	r3, [r2, #0]
    return result;
 8023986:	f507 734c 	add.w	r3, r7, #816	; 0x330
 802398a:	681a      	ldr	r2, [r3, #0]
 802398c:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8023990:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8023992:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8023996:	2300      	movs	r3, #0
 8023998:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 802399a:	2304      	movs	r3, #4
 802399c:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 80239a0:	3b01      	subs	r3, #1
 80239a2:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80239a4:	f507 7146 	add.w	r1, r7, #792	; 0x318
 80239a8:	f507 7249 	add.w	r2, r7, #804	; 0x324
 80239ac:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 80239b0:	6812      	ldr	r2, [r2, #0]
 80239b2:	681b      	ldr	r3, [r3, #0]
 80239b4:	4013      	ands	r3, r2
 80239b6:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80239b8:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80239bc:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80239c0:	681b      	ldr	r3, [r3, #0]
 80239c2:	109b      	asrs	r3, r3, #2
 80239c4:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 80239c6:	f507 7245 	add.w	r2, r7, #788	; 0x314
 80239ca:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 80239ce:	681b      	ldr	r3, [r3, #0]
 80239d0:	105b      	asrs	r3, r3, #1
 80239d2:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80239d4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80239d8:	681b      	ldr	r3, [r3, #0]
 80239da:	2b00      	cmp	r3, #0
 80239dc:	da06      	bge.n	80239ec <arm_softmax_s8+0x21dc>
        threshold++;
 80239de:	f507 7245 	add.w	r2, r7, #788	; 0x314
 80239e2:	f507 7345 	add.w	r3, r7, #788	; 0x314
 80239e6:	681b      	ldr	r3, [r3, #0]
 80239e8:	3301      	adds	r3, #1
 80239ea:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80239ec:	f507 7246 	add.w	r2, r7, #792	; 0x318
 80239f0:	f507 7345 	add.w	r3, r7, #788	; 0x314
 80239f4:	6812      	ldr	r2, [r2, #0]
 80239f6:	681b      	ldr	r3, [r3, #0]
 80239f8:	429a      	cmp	r2, r3
 80239fa:	dd06      	ble.n	8023a0a <arm_softmax_s8+0x21fa>
        result++;
 80239fc:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8023a00:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8023a04:	681b      	ldr	r3, [r3, #0]
 8023a06:	3301      	adds	r3, #1
 8023a08:	6013      	str	r3, [r2, #0]
    return result;
 8023a0a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8023a0e:	681e      	ldr	r6, [r3, #0]
 8023a10:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8023a14:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8023a18:	681b      	ldr	r3, [r3, #0]
 8023a1a:	6013      	str	r3, [r2, #0]
 8023a1c:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 8023a20:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8023a24:	681b      	ldr	r3, [r3, #0]
 8023a26:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023a28:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8023a2c:	2300      	movs	r3, #0
 8023a2e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023a30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023a34:	f04f 0300 	mov.w	r3, #0
 8023a38:	e9c7 23c0 	strd	r2, r3, [r7, #768]	; 0x300
    if ((m1 < 0) ^ (m2 < 0))
 8023a3c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8023a40:	681b      	ldr	r3, [r3, #0]
 8023a42:	0fdb      	lsrs	r3, r3, #31
 8023a44:	b2da      	uxtb	r2, r3
 8023a46:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8023a4a:	681b      	ldr	r3, [r3, #0]
 8023a4c:	0fdb      	lsrs	r3, r3, #31
 8023a4e:	b2db      	uxtb	r3, r3
 8023a50:	4053      	eors	r3, r2
 8023a52:	b2db      	uxtb	r3, r3
 8023a54:	2b00      	cmp	r3, #0
 8023a56:	d010      	beq.n	8023a7a <arm_softmax_s8+0x226a>
        mult = 1 - mult;
 8023a58:	f04f 0001 	mov.w	r0, #1
 8023a5c:	f04f 0100 	mov.w	r1, #0
 8023a60:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8023a64:	1a84      	subs	r4, r0, r2
 8023a66:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8023a6a:	eb61 0303 	sbc.w	r3, r1, r3
 8023a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023a72:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8023a76:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    mult = mult + (q63_t)m1 * m2;
 8023a7a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8023a7e:	681b      	ldr	r3, [r3, #0]
 8023a80:	4618      	mov	r0, r3
 8023a82:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023a86:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8023a8a:	681b      	ldr	r3, [r3, #0]
 8023a8c:	461a      	mov	r2, r3
 8023a8e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023a92:	fb02 f501 	mul.w	r5, r2, r1
 8023a96:	fb00 f403 	mul.w	r4, r0, r3
 8023a9a:	442c      	add	r4, r5
 8023a9c:	fba0 0102 	umull	r0, r1, r0, r2
 8023aa0:	1863      	adds	r3, r4, r1
 8023aa2:	4619      	mov	r1, r3
 8023aa4:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8023aa8:	1814      	adds	r4, r2, r0
 8023aaa:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8023aae:	414b      	adcs	r3, r1
 8023ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8023ab4:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8023ab8:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    result = (int32_t)(mult / (1ll << 31));
 8023abc:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8023ac0:	4610      	mov	r0, r2
 8023ac2:	4619      	mov	r1, r3
 8023ac4:	2800      	cmp	r0, #0
 8023ac6:	f171 0300 	sbcs.w	r3, r1, #0
 8023aca:	da06      	bge.n	8023ada <arm_softmax_s8+0x22ca>
 8023acc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023ad0:	f04f 0300 	mov.w	r3, #0
 8023ad4:	1880      	adds	r0, r0, r2
 8023ad6:	eb43 0101 	adc.w	r1, r3, r1
 8023ada:	f04f 0200 	mov.w	r2, #0
 8023ade:	f04f 0300 	mov.w	r3, #0
 8023ae2:	0fc2      	lsrs	r2, r0, #31
 8023ae4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023ae8:	17cb      	asrs	r3, r1, #31
 8023aea:	4610      	mov	r0, r2
 8023aec:	4619      	mov	r1, r3
 8023aee:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8023af2:	4603      	mov	r3, r0
 8023af4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023af6:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8023afa:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8023afe:	6812      	ldr	r2, [r2, #0]
 8023b00:	681b      	ldr	r3, [r3, #0]
 8023b02:	429a      	cmp	r2, r3
 8023b04:	d10a      	bne.n	8023b1c <arm_softmax_s8+0x230c>
 8023b06:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8023b0a:	681b      	ldr	r3, [r3, #0]
 8023b0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023b10:	d104      	bne.n	8023b1c <arm_softmax_s8+0x230c>
        result = Q31_MAX;
 8023b12:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8023b16:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023b1a:	6013      	str	r3, [r2, #0]
    return result;
 8023b1c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8023b20:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8023b22:	18f2      	adds	r2, r6, r3
 8023b24:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8023b28:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8023b2a:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8023b2e:	2300      	movs	r3, #0
 8023b30:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023b32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023b36:	f04f 0300 	mov.w	r3, #0
 8023b3a:	e9c7 23bc 	strd	r2, r3, [r7, #752]	; 0x2f0
    if ((m1 < 0) ^ (m2 < 0))
 8023b3e:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8023b42:	681b      	ldr	r3, [r3, #0]
 8023b44:	0fdb      	lsrs	r3, r3, #31
 8023b46:	b2da      	uxtb	r2, r3
 8023b48:	2300      	movs	r3, #0
 8023b4a:	4053      	eors	r3, r2
 8023b4c:	b2db      	uxtb	r3, r3
 8023b4e:	2b00      	cmp	r3, #0
 8023b50:	d010      	beq.n	8023b74 <arm_softmax_s8+0x2364>
        mult = 1 - mult;
 8023b52:	f04f 0001 	mov.w	r0, #1
 8023b56:	f04f 0100 	mov.w	r1, #0
 8023b5a:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8023b5e:	1a84      	subs	r4, r0, r2
 8023b60:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8023b64:	eb61 0303 	sbc.w	r3, r1, r3
 8023b68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8023b6c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8023b70:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    mult = mult + (q63_t)m1 * m2;
 8023b74:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8023b78:	681b      	ldr	r3, [r3, #0]
 8023b7a:	4618      	mov	r0, r3
 8023b7c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023b80:	a3de      	add	r3, pc, #888	; (adr r3, 8023efc <arm_softmax_s8+0x26ec>)
 8023b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b86:	fb02 f501 	mul.w	r5, r2, r1
 8023b8a:	fb00 f403 	mul.w	r4, r0, r3
 8023b8e:	442c      	add	r4, r5
 8023b90:	fba0 0102 	umull	r0, r1, r0, r2
 8023b94:	1863      	adds	r3, r4, r1
 8023b96:	4619      	mov	r1, r3
 8023b98:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8023b9c:	1814      	adds	r4, r2, r0
 8023b9e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8023ba2:	414b      	adcs	r3, r1
 8023ba4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8023ba8:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8023bac:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    result = (int32_t)(mult / (1ll << 31));
 8023bb0:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8023bb4:	4610      	mov	r0, r2
 8023bb6:	4619      	mov	r1, r3
 8023bb8:	2800      	cmp	r0, #0
 8023bba:	f171 0300 	sbcs.w	r3, r1, #0
 8023bbe:	da06      	bge.n	8023bce <arm_softmax_s8+0x23be>
 8023bc0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023bc4:	f04f 0300 	mov.w	r3, #0
 8023bc8:	1880      	adds	r0, r0, r2
 8023bca:	eb43 0101 	adc.w	r1, r3, r1
 8023bce:	f04f 0200 	mov.w	r2, #0
 8023bd2:	f04f 0300 	mov.w	r3, #0
 8023bd6:	0fc2      	lsrs	r2, r0, #31
 8023bd8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023bdc:	17cb      	asrs	r3, r1, #31
 8023bde:	4610      	mov	r0, r2
 8023be0:	4619      	mov	r1, r3
 8023be2:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8023be6:	4603      	mov	r3, r0
 8023be8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023bea:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8023bee:	681a      	ldr	r2, [r3, #0]
 8023bf0:	4bbf      	ldr	r3, [pc, #764]	; (8023ef0 <arm_softmax_s8+0x26e0>)
 8023bf2:	429a      	cmp	r2, r3
 8023bf4:	d10a      	bne.n	8023c0c <arm_softmax_s8+0x23fc>
 8023bf6:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8023bfa:	681b      	ldr	r3, [r3, #0]
 8023bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023c00:	d104      	bne.n	8023c0c <arm_softmax_s8+0x23fc>
        result = Q31_MAX;
 8023c02:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8023c06:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023c0a:	6013      	str	r3, [r2, #0]
    return result;
 8023c0c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8023c10:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8023c12:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8023c16:	681b      	ldr	r3, [r3, #0]
 8023c18:	441a      	add	r2, r3
 8023c1a:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8023c1e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8023c20:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8023c24:	2300      	movs	r3, #0
 8023c26:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8023c28:	2302      	movs	r3, #2
 8023c2a:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 8023c2e:	3b01      	subs	r3, #1
 8023c30:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8023c32:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8023c36:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8023c3a:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8023c3e:	6812      	ldr	r2, [r2, #0]
 8023c40:	681b      	ldr	r3, [r3, #0]
 8023c42:	4013      	ands	r3, r2
 8023c44:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8023c46:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8023c4a:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8023c4e:	681b      	ldr	r3, [r3, #0]
 8023c50:	105b      	asrs	r3, r3, #1
 8023c52:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8023c54:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 8023c58:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8023c5c:	681b      	ldr	r3, [r3, #0]
 8023c5e:	105b      	asrs	r3, r3, #1
 8023c60:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8023c62:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8023c66:	681b      	ldr	r3, [r3, #0]
 8023c68:	2b00      	cmp	r3, #0
 8023c6a:	da06      	bge.n	8023c7a <arm_softmax_s8+0x246a>
        threshold++;
 8023c6c:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 8023c70:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8023c74:	681b      	ldr	r3, [r3, #0]
 8023c76:	3301      	adds	r3, #1
 8023c78:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8023c7a:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8023c7e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8023c82:	6812      	ldr	r2, [r2, #0]
 8023c84:	681b      	ldr	r3, [r3, #0]
 8023c86:	429a      	cmp	r2, r3
 8023c88:	dd06      	ble.n	8023c98 <arm_softmax_s8+0x2488>
        result++;
 8023c8a:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8023c8e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8023c92:	681b      	ldr	r3, [r3, #0]
 8023c94:	3301      	adds	r3, #1
 8023c96:	6013      	str	r3, [r2, #0]
    return result;
 8023c98:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8023c9c:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8023c9e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8023ca2:	681b      	ldr	r3, [r3, #0]
 8023ca4:	441a      	add	r2, r3
 8023ca6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8023caa:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8023cac:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8023cb0:	2300      	movs	r3, #0
 8023cb2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023cb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023cb8:	f04f 0300 	mov.w	r3, #0
 8023cbc:	e9c7 23b2 	strd	r2, r3, [r7, #712]	; 0x2c8
    if ((m1 < 0) ^ (m2 < 0))
 8023cc0:	2200      	movs	r2, #0
 8023cc2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8023cc6:	681b      	ldr	r3, [r3, #0]
 8023cc8:	0fdb      	lsrs	r3, r3, #31
 8023cca:	b2db      	uxtb	r3, r3
 8023ccc:	4053      	eors	r3, r2
 8023cce:	b2db      	uxtb	r3, r3
 8023cd0:	2b00      	cmp	r3, #0
 8023cd2:	d010      	beq.n	8023cf6 <arm_softmax_s8+0x24e6>
        mult = 1 - mult;
 8023cd4:	f04f 0001 	mov.w	r0, #1
 8023cd8:	f04f 0100 	mov.w	r1, #0
 8023cdc:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8023ce0:	1a84      	subs	r4, r0, r2
 8023ce2:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8023ce6:	eb61 0303 	sbc.w	r3, r1, r3
 8023cea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8023cee:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8023cf2:	e9c7 34b2 	strd	r3, r4, [r7, #712]	; 0x2c8
    mult = mult + (q63_t)m1 * m2;
 8023cf6:	a57a      	add	r5, pc, #488	; (adr r5, 8023ee0 <arm_softmax_s8+0x26d0>)
 8023cf8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8023cfc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8023d00:	681b      	ldr	r3, [r3, #0]
 8023d02:	461a      	mov	r2, r3
 8023d04:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023d08:	fb02 f005 	mul.w	r0, r2, r5
 8023d0c:	fb04 f103 	mul.w	r1, r4, r3
 8023d10:	1846      	adds	r6, r0, r1
 8023d12:	fba4 0102 	umull	r0, r1, r4, r2
 8023d16:	1873      	adds	r3, r6, r1
 8023d18:	4619      	mov	r1, r3
 8023d1a:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8023d1e:	1814      	adds	r4, r2, r0
 8023d20:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8023d24:	414b      	adcs	r3, r1
 8023d26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8023d2a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8023d2e:	e9c7 34b2 	strd	r3, r4, [r7, #712]	; 0x2c8
    result = (int32_t)(mult / (1ll << 31));
 8023d32:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8023d36:	4610      	mov	r0, r2
 8023d38:	4619      	mov	r1, r3
 8023d3a:	2800      	cmp	r0, #0
 8023d3c:	f171 0300 	sbcs.w	r3, r1, #0
 8023d40:	da06      	bge.n	8023d50 <arm_softmax_s8+0x2540>
 8023d42:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023d46:	f04f 0300 	mov.w	r3, #0
 8023d4a:	1880      	adds	r0, r0, r2
 8023d4c:	eb43 0101 	adc.w	r1, r3, r1
 8023d50:	f04f 0200 	mov.w	r2, #0
 8023d54:	f04f 0300 	mov.w	r3, #0
 8023d58:	0fc2      	lsrs	r2, r0, #31
 8023d5a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023d5e:	17cb      	asrs	r3, r1, #31
 8023d60:	4610      	mov	r0, r2
 8023d62:	4619      	mov	r1, r3
 8023d64:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8023d68:	4603      	mov	r3, r0
 8023d6a:	6013      	str	r3, [r2, #0]
    return result;
 8023d6c:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8023d70:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 8023d72:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8023d76:	4b5f      	ldr	r3, [pc, #380]	; (8023ef4 <arm_softmax_s8+0x26e4>)
 8023d78:	440b      	add	r3, r1
 8023d7a:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8023d7c:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8023d80:	6819      	ldr	r1, [r3, #0]
 8023d82:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8023d86:	1c4b      	adds	r3, r1, #1
 8023d88:	6013      	str	r3, [r2, #0]
 8023d8a:	2301      	movs	r3, #1
 8023d8c:	fa03 f201 	lsl.w	r2, r3, r1
 8023d90:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8023d94:	681b      	ldr	r3, [r3, #0]
 8023d96:	4013      	ands	r3, r2
 8023d98:	2b00      	cmp	r3, #0
 8023d9a:	d002      	beq.n	8023da2 <arm_softmax_s8+0x2592>
 8023d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023da0:	e000      	b.n	8023da4 <arm_softmax_s8+0x2594>
 8023da2:	2200      	movs	r2, #0
 8023da4:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8023da8:	601a      	str	r2, [r3, #0]
 8023daa:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8023dae:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8023db2:	681b      	ldr	r3, [r3, #0]
 8023db4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023db6:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8023dba:	2300      	movs	r3, #0
 8023dbc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023dbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023dc2:	f04f 0300 	mov.w	r3, #0
 8023dc6:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    if ((m1 < 0) ^ (m2 < 0))
 8023dca:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8023dce:	681b      	ldr	r3, [r3, #0]
 8023dd0:	0fdb      	lsrs	r3, r3, #31
 8023dd2:	b2da      	uxtb	r2, r3
 8023dd4:	2300      	movs	r3, #0
 8023dd6:	4053      	eors	r3, r2
 8023dd8:	b2db      	uxtb	r3, r3
 8023dda:	2b00      	cmp	r3, #0
 8023ddc:	d00e      	beq.n	8023dfc <arm_softmax_s8+0x25ec>
        mult = 1 - mult;
 8023dde:	f04f 0001 	mov.w	r0, #1
 8023de2:	f04f 0100 	mov.w	r1, #0
 8023de6:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8023dea:	1a84      	subs	r4, r0, r2
 8023dec:	67bc      	str	r4, [r7, #120]	; 0x78
 8023dee:	eb61 0303 	sbc.w	r3, r1, r3
 8023df2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8023df4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8023df8:	e9c7 34ac 	strd	r3, r4, [r7, #688]	; 0x2b0
    mult = mult + (q63_t)m1 * m2;
 8023dfc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8023e00:	681b      	ldr	r3, [r3, #0]
 8023e02:	4618      	mov	r0, r3
 8023e04:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023e08:	a337      	add	r3, pc, #220	; (adr r3, 8023ee8 <arm_softmax_s8+0x26d8>)
 8023e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e0e:	fb02 f501 	mul.w	r5, r2, r1
 8023e12:	fb00 f403 	mul.w	r4, r0, r3
 8023e16:	442c      	add	r4, r5
 8023e18:	fba0 0102 	umull	r0, r1, r0, r2
 8023e1c:	1863      	adds	r3, r4, r1
 8023e1e:	4619      	mov	r1, r3
 8023e20:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8023e24:	1814      	adds	r4, r2, r0
 8023e26:	673c      	str	r4, [r7, #112]	; 0x70
 8023e28:	414b      	adcs	r3, r1
 8023e2a:	677b      	str	r3, [r7, #116]	; 0x74
 8023e2c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8023e30:	e9c7 34ac 	strd	r3, r4, [r7, #688]	; 0x2b0
    result = (int32_t)(mult / (1ll << 31));
 8023e34:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8023e38:	4610      	mov	r0, r2
 8023e3a:	4619      	mov	r1, r3
 8023e3c:	2800      	cmp	r0, #0
 8023e3e:	f171 0300 	sbcs.w	r3, r1, #0
 8023e42:	da06      	bge.n	8023e52 <arm_softmax_s8+0x2642>
 8023e44:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023e48:	f04f 0300 	mov.w	r3, #0
 8023e4c:	1880      	adds	r0, r0, r2
 8023e4e:	eb43 0101 	adc.w	r1, r3, r1
 8023e52:	f04f 0200 	mov.w	r2, #0
 8023e56:	f04f 0300 	mov.w	r3, #0
 8023e5a:	0fc2      	lsrs	r2, r0, #31
 8023e5c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023e60:	17cb      	asrs	r3, r1, #31
 8023e62:	4610      	mov	r0, r2
 8023e64:	4619      	mov	r1, r3
 8023e66:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8023e6a:	4603      	mov	r3, r0
 8023e6c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023e6e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8023e72:	681a      	ldr	r2, [r3, #0]
 8023e74:	4b20      	ldr	r3, [pc, #128]	; (8023ef8 <arm_softmax_s8+0x26e8>)
 8023e76:	429a      	cmp	r2, r3
 8023e78:	d10a      	bne.n	8023e90 <arm_softmax_s8+0x2680>
 8023e7a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8023e7e:	681b      	ldr	r3, [r3, #0]
 8023e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023e84:	d104      	bne.n	8023e90 <arm_softmax_s8+0x2680>
        result = Q31_MAX;
 8023e86:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8023e8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023e8e:	6013      	str	r3, [r2, #0]
    return result;
 8023e90:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8023e94:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8023e96:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8023e9a:	681b      	ldr	r3, [r3, #0]
 8023e9c:	ea02 0103 	and.w	r1, r2, r3
 8023ea0:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8023ea4:	681b      	ldr	r3, [r3, #0]
 8023ea6:	43da      	mvns	r2, r3
 8023ea8:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8023eac:	681b      	ldr	r3, [r3, #0]
 8023eae:	4013      	ands	r3, r2
 8023eb0:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8023eb4:	404b      	eors	r3, r1
 8023eb6:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8023eb8:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8023ebc:	6819      	ldr	r1, [r3, #0]
 8023ebe:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8023ec2:	1c4b      	adds	r3, r1, #1
 8023ec4:	6013      	str	r3, [r2, #0]
 8023ec6:	2301      	movs	r3, #1
 8023ec8:	fa03 f201 	lsl.w	r2, r3, r1
 8023ecc:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8023ed0:	681b      	ldr	r3, [r3, #0]
 8023ed2:	4013      	ands	r3, r2
 8023ed4:	2b00      	cmp	r3, #0
 8023ed6:	d015      	beq.n	8023f04 <arm_softmax_s8+0x26f4>
 8023ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023edc:	e013      	b.n	8023f06 <arm_softmax_s8+0x26f6>
 8023ede:	bf00      	nop
 8023ee0:	70f5a894 	.word	0x70f5a894
 8023ee4:	00000000 	.word	0x00000000
 8023ee8:	63afbe7b 	.word	0x63afbe7b
 8023eec:	00000000 	.word	0x00000000
 8023ef0:	2aaaaaab 	.word	0x2aaaaaab
 8023ef4:	70f5a894 	.word	0x70f5a894
 8023ef8:	63afbe7b 	.word	0x63afbe7b
 8023efc:	2aaaaaab 	.word	0x2aaaaaab
 8023f00:	00000000 	.word	0x00000000
 8023f04:	2200      	movs	r2, #0
 8023f06:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8023f0a:	601a      	str	r2, [r3, #0]
 8023f0c:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 8023f10:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8023f14:	681b      	ldr	r3, [r3, #0]
 8023f16:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023f18:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8023f1c:	2300      	movs	r3, #0
 8023f1e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023f20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023f24:	f04f 0300 	mov.w	r3, #0
 8023f28:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
    if ((m1 < 0) ^ (m2 < 0))
 8023f2c:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8023f30:	681b      	ldr	r3, [r3, #0]
 8023f32:	0fdb      	lsrs	r3, r3, #31
 8023f34:	b2da      	uxtb	r2, r3
 8023f36:	2300      	movs	r3, #0
 8023f38:	4053      	eors	r3, r2
 8023f3a:	b2db      	uxtb	r3, r3
 8023f3c:	2b00      	cmp	r3, #0
 8023f3e:	d00e      	beq.n	8023f5e <arm_softmax_s8+0x274e>
        mult = 1 - mult;
 8023f40:	f04f 0001 	mov.w	r0, #1
 8023f44:	f04f 0100 	mov.w	r1, #0
 8023f48:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8023f4c:	1a84      	subs	r4, r0, r2
 8023f4e:	66bc      	str	r4, [r7, #104]	; 0x68
 8023f50:	eb61 0303 	sbc.w	r3, r1, r3
 8023f54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8023f56:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8023f5a:	e9c7 34a8 	strd	r3, r4, [r7, #672]	; 0x2a0
    mult = mult + (q63_t)m1 * m2;
 8023f5e:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8023f62:	681b      	ldr	r3, [r3, #0]
 8023f64:	4618      	mov	r0, r3
 8023f66:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023f6a:	a3da      	add	r3, pc, #872	; (adr r3, 80242d4 <arm_softmax_s8+0x2ac4>)
 8023f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f70:	fb02 f501 	mul.w	r5, r2, r1
 8023f74:	fb00 f403 	mul.w	r4, r0, r3
 8023f78:	442c      	add	r4, r5
 8023f7a:	fba0 0102 	umull	r0, r1, r0, r2
 8023f7e:	1863      	adds	r3, r4, r1
 8023f80:	4619      	mov	r1, r3
 8023f82:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8023f86:	1814      	adds	r4, r2, r0
 8023f88:	663c      	str	r4, [r7, #96]	; 0x60
 8023f8a:	414b      	adcs	r3, r1
 8023f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8023f8e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8023f92:	e9c7 34a8 	strd	r3, r4, [r7, #672]	; 0x2a0
    result = (int32_t)(mult / (1ll << 31));
 8023f96:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8023f9a:	4610      	mov	r0, r2
 8023f9c:	4619      	mov	r1, r3
 8023f9e:	2800      	cmp	r0, #0
 8023fa0:	f171 0300 	sbcs.w	r3, r1, #0
 8023fa4:	da06      	bge.n	8023fb4 <arm_softmax_s8+0x27a4>
 8023fa6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023faa:	f04f 0300 	mov.w	r3, #0
 8023fae:	1880      	adds	r0, r0, r2
 8023fb0:	eb43 0101 	adc.w	r1, r3, r1
 8023fb4:	f04f 0200 	mov.w	r2, #0
 8023fb8:	f04f 0300 	mov.w	r3, #0
 8023fbc:	0fc2      	lsrs	r2, r0, #31
 8023fbe:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023fc2:	17cb      	asrs	r3, r1, #31
 8023fc4:	4610      	mov	r0, r2
 8023fc6:	4619      	mov	r1, r3
 8023fc8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8023fcc:	4603      	mov	r3, r0
 8023fce:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023fd0:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8023fd4:	681a      	ldr	r2, [r3, #0]
 8023fd6:	4bbc      	ldr	r3, [pc, #752]	; (80242c8 <arm_softmax_s8+0x2ab8>)
 8023fd8:	429a      	cmp	r2, r3
 8023fda:	d10a      	bne.n	8023ff2 <arm_softmax_s8+0x27e2>
 8023fdc:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8023fe0:	681b      	ldr	r3, [r3, #0]
 8023fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023fe6:	d104      	bne.n	8023ff2 <arm_softmax_s8+0x27e2>
        result = Q31_MAX;
 8023fe8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8023fec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023ff0:	6013      	str	r3, [r2, #0]
    return result;
 8023ff2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8023ff6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8023ff8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8023ffc:	681b      	ldr	r3, [r3, #0]
 8023ffe:	ea02 0103 	and.w	r1, r2, r3
 8024002:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024006:	681b      	ldr	r3, [r3, #0]
 8024008:	43da      	mvns	r2, r3
 802400a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 802400e:	681b      	ldr	r3, [r3, #0]
 8024010:	4013      	ands	r3, r2
 8024012:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8024016:	404b      	eors	r3, r1
 8024018:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 802401a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802401e:	6819      	ldr	r1, [r3, #0]
 8024020:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8024024:	1c4b      	adds	r3, r1, #1
 8024026:	6013      	str	r3, [r2, #0]
 8024028:	2301      	movs	r3, #1
 802402a:	fa03 f201 	lsl.w	r2, r3, r1
 802402e:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8024032:	681b      	ldr	r3, [r3, #0]
 8024034:	4013      	ands	r3, r2
 8024036:	2b00      	cmp	r3, #0
 8024038:	d002      	beq.n	8024040 <arm_softmax_s8+0x2830>
 802403a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802403e:	e000      	b.n	8024042 <arm_softmax_s8+0x2832>
 8024040:	2200      	movs	r2, #0
 8024042:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024046:	601a      	str	r2, [r3, #0]
 8024048:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 802404c:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024050:	681b      	ldr	r3, [r3, #0]
 8024052:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024054:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8024058:	2300      	movs	r3, #0
 802405a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802405c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024060:	f04f 0300 	mov.w	r3, #0
 8024064:	e9c7 23a4 	strd	r2, r3, [r7, #656]	; 0x290
    if ((m1 < 0) ^ (m2 < 0))
 8024068:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 802406c:	681b      	ldr	r3, [r3, #0]
 802406e:	0fdb      	lsrs	r3, r3, #31
 8024070:	b2da      	uxtb	r2, r3
 8024072:	2300      	movs	r3, #0
 8024074:	4053      	eors	r3, r2
 8024076:	b2db      	uxtb	r3, r3
 8024078:	2b00      	cmp	r3, #0
 802407a:	d00e      	beq.n	802409a <arm_softmax_s8+0x288a>
        mult = 1 - mult;
 802407c:	f04f 0001 	mov.w	r0, #1
 8024080:	f04f 0100 	mov.w	r1, #0
 8024084:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8024088:	1a84      	subs	r4, r0, r2
 802408a:	65bc      	str	r4, [r7, #88]	; 0x58
 802408c:	eb61 0303 	sbc.w	r3, r1, r3
 8024090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8024092:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8024096:	e9c7 34a4 	strd	r3, r4, [r7, #656]	; 0x290
    mult = mult + (q63_t)m1 * m2;
 802409a:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 802409e:	681b      	ldr	r3, [r3, #0]
 80240a0:	4618      	mov	r0, r3
 80240a2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80240a6:	a384      	add	r3, pc, #528	; (adr r3, 80242b8 <arm_softmax_s8+0x2aa8>)
 80240a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240ac:	fb02 f501 	mul.w	r5, r2, r1
 80240b0:	fb00 f403 	mul.w	r4, r0, r3
 80240b4:	442c      	add	r4, r5
 80240b6:	fba0 0102 	umull	r0, r1, r0, r2
 80240ba:	1863      	adds	r3, r4, r1
 80240bc:	4619      	mov	r1, r3
 80240be:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 80240c2:	1814      	adds	r4, r2, r0
 80240c4:	653c      	str	r4, [r7, #80]	; 0x50
 80240c6:	414b      	adcs	r3, r1
 80240c8:	657b      	str	r3, [r7, #84]	; 0x54
 80240ca:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80240ce:	e9c7 34a4 	strd	r3, r4, [r7, #656]	; 0x290
    result = (int32_t)(mult / (1ll << 31));
 80240d2:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 80240d6:	4610      	mov	r0, r2
 80240d8:	4619      	mov	r1, r3
 80240da:	2800      	cmp	r0, #0
 80240dc:	f171 0300 	sbcs.w	r3, r1, #0
 80240e0:	da06      	bge.n	80240f0 <arm_softmax_s8+0x28e0>
 80240e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80240e6:	f04f 0300 	mov.w	r3, #0
 80240ea:	1880      	adds	r0, r0, r2
 80240ec:	eb43 0101 	adc.w	r1, r3, r1
 80240f0:	f04f 0200 	mov.w	r2, #0
 80240f4:	f04f 0300 	mov.w	r3, #0
 80240f8:	0fc2      	lsrs	r2, r0, #31
 80240fa:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80240fe:	17cb      	asrs	r3, r1, #31
 8024100:	4610      	mov	r0, r2
 8024102:	4619      	mov	r1, r3
 8024104:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8024108:	4603      	mov	r3, r0
 802410a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802410c:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8024110:	681a      	ldr	r2, [r3, #0]
 8024112:	4b6e      	ldr	r3, [pc, #440]	; (80242cc <arm_softmax_s8+0x2abc>)
 8024114:	429a      	cmp	r2, r3
 8024116:	d10a      	bne.n	802412e <arm_softmax_s8+0x291e>
 8024118:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 802411c:	681b      	ldr	r3, [r3, #0]
 802411e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024122:	d104      	bne.n	802412e <arm_softmax_s8+0x291e>
        result = Q31_MAX;
 8024124:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8024128:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802412c:	6013      	str	r3, [r2, #0]
    return result;
 802412e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8024132:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8024134:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024138:	681b      	ldr	r3, [r3, #0]
 802413a:	ea02 0103 	and.w	r1, r2, r3
 802413e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024142:	681b      	ldr	r3, [r3, #0]
 8024144:	43da      	mvns	r2, r3
 8024146:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 802414a:	681b      	ldr	r3, [r3, #0]
 802414c:	4013      	ands	r3, r2
 802414e:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8024152:	404b      	eors	r3, r1
 8024154:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 8024156:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802415a:	6819      	ldr	r1, [r3, #0]
 802415c:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8024160:	1c4b      	adds	r3, r1, #1
 8024162:	6013      	str	r3, [r2, #0]
 8024164:	2301      	movs	r3, #1
 8024166:	fa03 f201 	lsl.w	r2, r3, r1
 802416a:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 802416e:	681b      	ldr	r3, [r3, #0]
 8024170:	4013      	ands	r3, r2
 8024172:	2b00      	cmp	r3, #0
 8024174:	d002      	beq.n	802417c <arm_softmax_s8+0x296c>
 8024176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802417a:	e000      	b.n	802417e <arm_softmax_s8+0x296e>
 802417c:	2200      	movs	r2, #0
 802417e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024182:	601a      	str	r2, [r3, #0]
 8024184:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8024188:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 802418c:	681b      	ldr	r3, [r3, #0]
 802418e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024190:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8024194:	2300      	movs	r3, #0
 8024196:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802419c:	f04f 0300 	mov.w	r3, #0
 80241a0:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
    if ((m1 < 0) ^ (m2 < 0))
 80241a4:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80241a8:	681b      	ldr	r3, [r3, #0]
 80241aa:	0fdb      	lsrs	r3, r3, #31
 80241ac:	b2da      	uxtb	r2, r3
 80241ae:	2300      	movs	r3, #0
 80241b0:	4053      	eors	r3, r2
 80241b2:	b2db      	uxtb	r3, r3
 80241b4:	2b00      	cmp	r3, #0
 80241b6:	d00e      	beq.n	80241d6 <arm_softmax_s8+0x29c6>
        mult = 1 - mult;
 80241b8:	f04f 0001 	mov.w	r0, #1
 80241bc:	f04f 0100 	mov.w	r1, #0
 80241c0:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80241c4:	1a84      	subs	r4, r0, r2
 80241c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80241c8:	eb61 0303 	sbc.w	r3, r1, r3
 80241cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80241ce:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80241d2:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    mult = mult + (q63_t)m1 * m2;
 80241d6:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80241da:	681b      	ldr	r3, [r3, #0]
 80241dc:	4618      	mov	r0, r3
 80241de:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80241e2:	a337      	add	r3, pc, #220	; (adr r3, 80242c0 <arm_softmax_s8+0x2ab0>)
 80241e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241e8:	fb02 f501 	mul.w	r5, r2, r1
 80241ec:	fb00 f403 	mul.w	r4, r0, r3
 80241f0:	442c      	add	r4, r5
 80241f2:	fba0 0102 	umull	r0, r1, r0, r2
 80241f6:	1863      	adds	r3, r4, r1
 80241f8:	4619      	mov	r1, r3
 80241fa:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80241fe:	1814      	adds	r4, r2, r0
 8024200:	643c      	str	r4, [r7, #64]	; 0x40
 8024202:	414b      	adcs	r3, r1
 8024204:	647b      	str	r3, [r7, #68]	; 0x44
 8024206:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 802420a:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    result = (int32_t)(mult / (1ll << 31));
 802420e:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8024212:	4610      	mov	r0, r2
 8024214:	4619      	mov	r1, r3
 8024216:	2800      	cmp	r0, #0
 8024218:	f171 0300 	sbcs.w	r3, r1, #0
 802421c:	da06      	bge.n	802422c <arm_softmax_s8+0x2a1c>
 802421e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024222:	f04f 0300 	mov.w	r3, #0
 8024226:	1880      	adds	r0, r0, r2
 8024228:	eb43 0101 	adc.w	r1, r3, r1
 802422c:	f04f 0200 	mov.w	r2, #0
 8024230:	f04f 0300 	mov.w	r3, #0
 8024234:	0fc2      	lsrs	r2, r0, #31
 8024236:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802423a:	17cb      	asrs	r3, r1, #31
 802423c:	4610      	mov	r0, r2
 802423e:	4619      	mov	r1, r3
 8024240:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8024244:	4603      	mov	r3, r0
 8024246:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024248:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 802424c:	681a      	ldr	r2, [r3, #0]
 802424e:	4b20      	ldr	r3, [pc, #128]	; (80242d0 <arm_softmax_s8+0x2ac0>)
 8024250:	429a      	cmp	r2, r3
 8024252:	d10a      	bne.n	802426a <arm_softmax_s8+0x2a5a>
 8024254:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8024258:	681b      	ldr	r3, [r3, #0]
 802425a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802425e:	d104      	bne.n	802426a <arm_softmax_s8+0x2a5a>
        result = Q31_MAX;
 8024260:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8024264:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024268:	6013      	str	r3, [r2, #0]
    return result;
 802426a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 802426e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8024270:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024274:	681b      	ldr	r3, [r3, #0]
 8024276:	ea02 0103 	and.w	r1, r2, r3
 802427a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802427e:	681b      	ldr	r3, [r3, #0]
 8024280:	43da      	mvns	r2, r3
 8024282:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024286:	681b      	ldr	r3, [r3, #0]
 8024288:	4013      	ands	r3, r2
 802428a:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 802428e:	404b      	eors	r3, r1
 8024290:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 8024292:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8024296:	6819      	ldr	r1, [r3, #0]
 8024298:	f507 7259 	add.w	r2, r7, #868	; 0x364
 802429c:	1c4b      	adds	r3, r1, #1
 802429e:	6013      	str	r3, [r2, #0]
 80242a0:	2301      	movs	r3, #1
 80242a2:	fa03 f201 	lsl.w	r2, r3, r1
 80242a6:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80242aa:	681b      	ldr	r3, [r3, #0]
 80242ac:	4013      	ands	r3, r2
 80242ae:	2b00      	cmp	r3, #0
 80242b0:	d014      	beq.n	80242dc <arm_softmax_s8+0x2acc>
 80242b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80242b6:	e012      	b.n	80242de <arm_softmax_s8+0x2ace>
 80242b8:	2f16ac6c 	.word	0x2f16ac6c
 80242bc:	00000000 	.word	0x00000000
 80242c0:	1152aaa4 	.word	0x1152aaa4
 80242c4:	00000000 	.word	0x00000000
 80242c8:	4da2cbf2 	.word	0x4da2cbf2
 80242cc:	2f16ac6c 	.word	0x2f16ac6c
 80242d0:	1152aaa4 	.word	0x1152aaa4
 80242d4:	4da2cbf2 	.word	0x4da2cbf2
 80242d8:	00000000 	.word	0x00000000
 80242dc:	2200      	movs	r2, #0
 80242de:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80242e2:	601a      	str	r2, [r3, #0]
 80242e4:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 80242e8:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80242ec:	681b      	ldr	r3, [r3, #0]
 80242ee:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80242f0:	f507 721e 	add.w	r2, r7, #632	; 0x278
 80242f4:	2300      	movs	r3, #0
 80242f6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80242f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80242fc:	f04f 0300 	mov.w	r3, #0
 8024300:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
    if ((m1 < 0) ^ (m2 < 0))
 8024304:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8024308:	681b      	ldr	r3, [r3, #0]
 802430a:	0fdb      	lsrs	r3, r3, #31
 802430c:	b2da      	uxtb	r2, r3
 802430e:	2300      	movs	r3, #0
 8024310:	4053      	eors	r3, r2
 8024312:	b2db      	uxtb	r3, r3
 8024314:	2b00      	cmp	r3, #0
 8024316:	d00e      	beq.n	8024336 <arm_softmax_s8+0x2b26>
        mult = 1 - mult;
 8024318:	f04f 0001 	mov.w	r0, #1
 802431c:	f04f 0100 	mov.w	r1, #0
 8024320:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8024324:	1a84      	subs	r4, r0, r2
 8024326:	63bc      	str	r4, [r7, #56]	; 0x38
 8024328:	eb61 0303 	sbc.w	r3, r1, r3
 802432c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802432e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8024332:	e9c7 349c 	strd	r3, r4, [r7, #624]	; 0x270
    mult = mult + (q63_t)m1 * m2;
 8024336:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 802433a:	681b      	ldr	r3, [r3, #0]
 802433c:	4618      	mov	r0, r3
 802433e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024342:	a3d1      	add	r3, pc, #836	; (adr r3, 8024688 <arm_softmax_s8+0x2e78>)
 8024344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024348:	fb02 f501 	mul.w	r5, r2, r1
 802434c:	fb00 f403 	mul.w	r4, r0, r3
 8024350:	442c      	add	r4, r5
 8024352:	fba0 0102 	umull	r0, r1, r0, r2
 8024356:	1863      	adds	r3, r4, r1
 8024358:	4619      	mov	r1, r3
 802435a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 802435e:	1814      	adds	r4, r2, r0
 8024360:	633c      	str	r4, [r7, #48]	; 0x30
 8024362:	414b      	adcs	r3, r1
 8024364:	637b      	str	r3, [r7, #52]	; 0x34
 8024366:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 802436a:	e9c7 349c 	strd	r3, r4, [r7, #624]	; 0x270
    result = (int32_t)(mult / (1ll << 31));
 802436e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8024372:	4610      	mov	r0, r2
 8024374:	4619      	mov	r1, r3
 8024376:	2800      	cmp	r0, #0
 8024378:	f171 0300 	sbcs.w	r3, r1, #0
 802437c:	da06      	bge.n	802438c <arm_softmax_s8+0x2b7c>
 802437e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024382:	f04f 0300 	mov.w	r3, #0
 8024386:	1880      	adds	r0, r0, r2
 8024388:	eb43 0101 	adc.w	r1, r3, r1
 802438c:	f04f 0200 	mov.w	r2, #0
 8024390:	f04f 0300 	mov.w	r3, #0
 8024394:	0fc2      	lsrs	r2, r0, #31
 8024396:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802439a:	17cb      	asrs	r3, r1, #31
 802439c:	4610      	mov	r0, r2
 802439e:	4619      	mov	r1, r3
 80243a0:	f507 721e 	add.w	r2, r7, #632	; 0x278
 80243a4:	4603      	mov	r3, r0
 80243a6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80243a8:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80243ac:	681a      	ldr	r2, [r3, #0]
 80243ae:	4bb4      	ldr	r3, [pc, #720]	; (8024680 <arm_softmax_s8+0x2e70>)
 80243b0:	429a      	cmp	r2, r3
 80243b2:	d10a      	bne.n	80243ca <arm_softmax_s8+0x2bba>
 80243b4:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80243b8:	681b      	ldr	r3, [r3, #0]
 80243ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80243be:	d104      	bne.n	80243ca <arm_softmax_s8+0x2bba>
        result = Q31_MAX;
 80243c0:	f507 721e 	add.w	r2, r7, #632	; 0x278
 80243c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80243c8:	6013      	str	r3, [r2, #0]
    return result;
 80243ca:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80243ce:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 80243d0:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80243d4:	681b      	ldr	r3, [r3, #0]
 80243d6:	ea02 0103 	and.w	r1, r2, r3
 80243da:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80243de:	681b      	ldr	r3, [r3, #0]
 80243e0:	43da      	mvns	r2, r3
 80243e2:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80243e6:	681b      	ldr	r3, [r3, #0]
 80243e8:	4013      	ands	r3, r2
 80243ea:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80243ee:	404b      	eors	r3, r1
 80243f0:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 80243f2:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80243f6:	6819      	ldr	r1, [r3, #0]
 80243f8:	f507 7259 	add.w	r2, r7, #868	; 0x364
 80243fc:	1c4b      	adds	r3, r1, #1
 80243fe:	6013      	str	r3, [r2, #0]
 8024400:	2301      	movs	r3, #1
 8024402:	fa03 f201 	lsl.w	r2, r3, r1
 8024406:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 802440a:	681b      	ldr	r3, [r3, #0]
 802440c:	4013      	ands	r3, r2
 802440e:	2b00      	cmp	r3, #0
 8024410:	d002      	beq.n	8024418 <arm_softmax_s8+0x2c08>
 8024412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024416:	e000      	b.n	802441a <arm_softmax_s8+0x2c0a>
 8024418:	2200      	movs	r2, #0
 802441a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802441e:	601a      	str	r2, [r3, #0]
 8024420:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 8024424:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024428:	681b      	ldr	r3, [r3, #0]
 802442a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802442c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8024430:	2300      	movs	r3, #0
 8024432:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024434:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024438:	f04f 0300 	mov.w	r3, #0
 802443c:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
    if ((m1 < 0) ^ (m2 < 0))
 8024440:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8024444:	681b      	ldr	r3, [r3, #0]
 8024446:	0fdb      	lsrs	r3, r3, #31
 8024448:	b2da      	uxtb	r2, r3
 802444a:	2300      	movs	r3, #0
 802444c:	4053      	eors	r3, r2
 802444e:	b2db      	uxtb	r3, r3
 8024450:	2b00      	cmp	r3, #0
 8024452:	d00e      	beq.n	8024472 <arm_softmax_s8+0x2c62>
        mult = 1 - mult;
 8024454:	f04f 0001 	mov.w	r0, #1
 8024458:	f04f 0100 	mov.w	r1, #0
 802445c:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8024460:	1a84      	subs	r4, r0, r2
 8024462:	62bc      	str	r4, [r7, #40]	; 0x28
 8024464:	eb61 0303 	sbc.w	r3, r1, r3
 8024468:	62fb      	str	r3, [r7, #44]	; 0x2c
 802446a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 802446e:	e9c7 3498 	strd	r3, r4, [r7, #608]	; 0x260
    mult = mult + (q63_t)m1 * m2;
 8024472:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8024476:	681b      	ldr	r3, [r3, #0]
 8024478:	4618      	mov	r0, r3
 802447a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802447e:	4a81      	ldr	r2, [pc, #516]	; (8024684 <arm_softmax_s8+0x2e74>)
 8024480:	f04f 0300 	mov.w	r3, #0
 8024484:	fb02 f501 	mul.w	r5, r2, r1
 8024488:	fb00 f403 	mul.w	r4, r0, r3
 802448c:	442c      	add	r4, r5
 802448e:	fba0 0102 	umull	r0, r1, r0, r2
 8024492:	1863      	adds	r3, r4, r1
 8024494:	4619      	mov	r1, r3
 8024496:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 802449a:	1814      	adds	r4, r2, r0
 802449c:	623c      	str	r4, [r7, #32]
 802449e:	414b      	adcs	r3, r1
 80244a0:	627b      	str	r3, [r7, #36]	; 0x24
 80244a2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80244a6:	e9c7 3498 	strd	r3, r4, [r7, #608]	; 0x260
    result = (int32_t)(mult / (1ll << 31));
 80244aa:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 80244ae:	4610      	mov	r0, r2
 80244b0:	4619      	mov	r1, r3
 80244b2:	2800      	cmp	r0, #0
 80244b4:	f171 0300 	sbcs.w	r3, r1, #0
 80244b8:	da06      	bge.n	80244c8 <arm_softmax_s8+0x2cb8>
 80244ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80244be:	f04f 0300 	mov.w	r3, #0
 80244c2:	1880      	adds	r0, r0, r2
 80244c4:	eb43 0101 	adc.w	r1, r3, r1
 80244c8:	f04f 0200 	mov.w	r2, #0
 80244cc:	f04f 0300 	mov.w	r3, #0
 80244d0:	0fc2      	lsrs	r2, r0, #31
 80244d2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80244d6:	17cb      	asrs	r3, r1, #31
 80244d8:	4610      	mov	r0, r2
 80244da:	4619      	mov	r1, r3
 80244dc:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80244e0:	4603      	mov	r3, r0
 80244e2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80244e4:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80244e8:	681a      	ldr	r2, [r3, #0]
 80244ea:	4b66      	ldr	r3, [pc, #408]	; (8024684 <arm_softmax_s8+0x2e74>)
 80244ec:	429a      	cmp	r2, r3
 80244ee:	d10a      	bne.n	8024506 <arm_softmax_s8+0x2cf6>
 80244f0:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80244f4:	681b      	ldr	r3, [r3, #0]
 80244f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80244fa:	d104      	bne.n	8024506 <arm_softmax_s8+0x2cf6>
        result = Q31_MAX;
 80244fc:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8024500:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024504:	6013      	str	r3, [r2, #0]
    return result;
 8024506:	f507 731a 	add.w	r3, r7, #616	; 0x268
 802450a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 802450c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024510:	681b      	ldr	r3, [r3, #0]
 8024512:	ea02 0103 	and.w	r1, r2, r3
 8024516:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802451a:	681b      	ldr	r3, [r3, #0]
 802451c:	43da      	mvns	r2, r3
 802451e:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024522:	681b      	ldr	r3, [r3, #0]
 8024524:	4013      	ands	r3, r2
 8024526:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 802452a:	404b      	eors	r3, r1
 802452c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 802452e:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8024532:	6819      	ldr	r1, [r3, #0]
 8024534:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8024538:	1c4b      	adds	r3, r1, #1
 802453a:	6013      	str	r3, [r2, #0]
 802453c:	2301      	movs	r3, #1
 802453e:	fa03 f201 	lsl.w	r2, r3, r1
 8024542:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8024546:	681b      	ldr	r3, [r3, #0]
 8024548:	4013      	ands	r3, r2
 802454a:	2b00      	cmp	r3, #0
 802454c:	d002      	beq.n	8024554 <arm_softmax_s8+0x2d44>
 802454e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024552:	e000      	b.n	8024556 <arm_softmax_s8+0x2d46>
 8024554:	2200      	movs	r2, #0
 8024556:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802455a:	601a      	str	r2, [r3, #0]
 802455c:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8024560:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024564:	681b      	ldr	r3, [r3, #0]
 8024566:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024568:	f507 7216 	add.w	r2, r7, #600	; 0x258
 802456c:	2300      	movs	r3, #0
 802456e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024570:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024574:	f04f 0300 	mov.w	r3, #0
 8024578:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
    if ((m1 < 0) ^ (m2 < 0))
 802457c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8024580:	681b      	ldr	r3, [r3, #0]
 8024582:	0fdb      	lsrs	r3, r3, #31
 8024584:	b2da      	uxtb	r2, r3
 8024586:	2300      	movs	r3, #0
 8024588:	4053      	eors	r3, r2
 802458a:	b2db      	uxtb	r3, r3
 802458c:	2b00      	cmp	r3, #0
 802458e:	d00e      	beq.n	80245ae <arm_softmax_s8+0x2d9e>
        mult = 1 - mult;
 8024590:	f04f 0001 	mov.w	r0, #1
 8024594:	f04f 0100 	mov.w	r1, #0
 8024598:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 802459c:	1a84      	subs	r4, r0, r2
 802459e:	61bc      	str	r4, [r7, #24]
 80245a0:	eb61 0303 	sbc.w	r3, r1, r3
 80245a4:	61fb      	str	r3, [r7, #28]
 80245a6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80245aa:	e9c7 3494 	strd	r3, r4, [r7, #592]	; 0x250
    mult = mult + (q63_t)m1 * m2;
 80245ae:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80245b2:	681b      	ldr	r3, [r3, #0]
 80245b4:	4618      	mov	r0, r3
 80245b6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80245ba:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 80245be:	f04f 0300 	mov.w	r3, #0
 80245c2:	fb02 f501 	mul.w	r5, r2, r1
 80245c6:	fb00 f403 	mul.w	r4, r0, r3
 80245ca:	442c      	add	r4, r5
 80245cc:	fba0 0102 	umull	r0, r1, r0, r2
 80245d0:	1863      	adds	r3, r4, r1
 80245d2:	4619      	mov	r1, r3
 80245d4:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80245d8:	1814      	adds	r4, r2, r0
 80245da:	613c      	str	r4, [r7, #16]
 80245dc:	414b      	adcs	r3, r1
 80245de:	617b      	str	r3, [r7, #20]
 80245e0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80245e4:	e9c7 3494 	strd	r3, r4, [r7, #592]	; 0x250
    result = (int32_t)(mult / (1ll << 31));
 80245e8:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80245ec:	4610      	mov	r0, r2
 80245ee:	4619      	mov	r1, r3
 80245f0:	2800      	cmp	r0, #0
 80245f2:	f171 0300 	sbcs.w	r3, r1, #0
 80245f6:	da06      	bge.n	8024606 <arm_softmax_s8+0x2df6>
 80245f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80245fc:	f04f 0300 	mov.w	r3, #0
 8024600:	1880      	adds	r0, r0, r2
 8024602:	eb43 0101 	adc.w	r1, r3, r1
 8024606:	f04f 0200 	mov.w	r2, #0
 802460a:	f04f 0300 	mov.w	r3, #0
 802460e:	0fc2      	lsrs	r2, r0, #31
 8024610:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024614:	17cb      	asrs	r3, r1, #31
 8024616:	4610      	mov	r0, r2
 8024618:	4619      	mov	r1, r3
 802461a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 802461e:	4603      	mov	r3, r0
 8024620:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024622:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8024626:	681b      	ldr	r3, [r3, #0]
 8024628:	2bf2      	cmp	r3, #242	; 0xf2
 802462a:	d10a      	bne.n	8024642 <arm_softmax_s8+0x2e32>
 802462c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8024630:	681b      	ldr	r3, [r3, #0]
 8024632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024636:	d104      	bne.n	8024642 <arm_softmax_s8+0x2e32>
        result = Q31_MAX;
 8024638:	f507 7216 	add.w	r2, r7, #600	; 0x258
 802463c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024640:	6013      	str	r3, [r2, #0]
    return result;
 8024642:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8024646:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8024648:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802464c:	681b      	ldr	r3, [r3, #0]
 802464e:	ea02 0103 	and.w	r1, r2, r3
 8024652:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024656:	681b      	ldr	r3, [r3, #0]
 8024658:	43da      	mvns	r2, r3
 802465a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 802465e:	681b      	ldr	r3, [r3, #0]
 8024660:	4013      	ands	r3, r2
 8024662:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8024666:	404b      	eors	r3, r1
 8024668:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 802466a:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 802466e:	681b      	ldr	r3, [r3, #0]
 8024670:	2b00      	cmp	r3, #0
 8024672:	d10d      	bne.n	8024690 <arm_softmax_s8+0x2e80>
 8024674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024678:	e00b      	b.n	8024692 <arm_softmax_s8+0x2e82>
 802467a:	bf00      	nop
 802467c:	f3af 8000 	nop.w
 8024680:	02582ab7 	.word	0x02582ab7
 8024684:	000afe11 	.word	0x000afe11
 8024688:	02582ab7 	.word	0x02582ab7
 802468c:	00000000 	.word	0x00000000
 8024690:	2200      	movs	r2, #0
 8024692:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024696:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8024698:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802469c:	681b      	ldr	r3, [r3, #0]
 802469e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80246a2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80246a6:	681b      	ldr	r3, [r3, #0]
 80246a8:	43da      	mvns	r2, r3
 80246aa:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80246ae:	681b      	ldr	r3, [r3, #0]
 80246b0:	4013      	ands	r3, r2
 80246b2:	4059      	eors	r1, r3
 80246b4:	f507 7261 	add.w	r2, r7, #900	; 0x384
 80246b8:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80246bc:	6013      	str	r3, [r2, #0]
 80246be:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80246c2:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80246c4:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 80246c8:	2300      	movs	r3, #0
 80246ca:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80246cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80246d0:	f04f 0300 	mov.w	r3, #0
 80246d4:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
    if ((m1 < 0) ^ (m2 < 0))
 80246d8:	f507 7361 	add.w	r3, r7, #900	; 0x384
 80246dc:	681b      	ldr	r3, [r3, #0]
 80246de:	0fdb      	lsrs	r3, r3, #31
 80246e0:	b2da      	uxtb	r2, r3
 80246e2:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80246e6:	681b      	ldr	r3, [r3, #0]
 80246e8:	0fdb      	lsrs	r3, r3, #31
 80246ea:	b2db      	uxtb	r3, r3
 80246ec:	4053      	eors	r3, r2
 80246ee:	b2db      	uxtb	r3, r3
 80246f0:	2b00      	cmp	r3, #0
 80246f2:	d00e      	beq.n	8024712 <arm_softmax_s8+0x2f02>
        mult = 1 - mult;
 80246f4:	f04f 0001 	mov.w	r0, #1
 80246f8:	f04f 0100 	mov.w	r1, #0
 80246fc:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8024700:	1a84      	subs	r4, r0, r2
 8024702:	60bc      	str	r4, [r7, #8]
 8024704:	eb61 0303 	sbc.w	r3, r1, r3
 8024708:	60fb      	str	r3, [r7, #12]
 802470a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 802470e:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    mult = mult + (q63_t)m1 * m2;
 8024712:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8024716:	681b      	ldr	r3, [r3, #0]
 8024718:	4618      	mov	r0, r3
 802471a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802471e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8024722:	681b      	ldr	r3, [r3, #0]
 8024724:	461a      	mov	r2, r3
 8024726:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802472a:	fb02 f501 	mul.w	r5, r2, r1
 802472e:	fb00 f403 	mul.w	r4, r0, r3
 8024732:	442c      	add	r4, r5
 8024734:	fba0 0102 	umull	r0, r1, r0, r2
 8024738:	1863      	adds	r3, r4, r1
 802473a:	4619      	mov	r1, r3
 802473c:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8024740:	1814      	adds	r4, r2, r0
 8024742:	603c      	str	r4, [r7, #0]
 8024744:	414b      	adcs	r3, r1
 8024746:	607b      	str	r3, [r7, #4]
 8024748:	e9d7 3400 	ldrd	r3, r4, [r7]
 802474c:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    result = (int32_t)(mult / (1ll << 31));
 8024750:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8024754:	4610      	mov	r0, r2
 8024756:	4619      	mov	r1, r3
 8024758:	2800      	cmp	r0, #0
 802475a:	f171 0300 	sbcs.w	r3, r1, #0
 802475e:	da06      	bge.n	802476e <arm_softmax_s8+0x2f5e>
 8024760:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024764:	f04f 0300 	mov.w	r3, #0
 8024768:	1880      	adds	r0, r0, r2
 802476a:	eb43 0101 	adc.w	r1, r3, r1
 802476e:	f04f 0200 	mov.w	r2, #0
 8024772:	f04f 0300 	mov.w	r3, #0
 8024776:	0fc2      	lsrs	r2, r0, #31
 8024778:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802477c:	17cb      	asrs	r3, r1, #31
 802477e:	4610      	mov	r0, r2
 8024780:	4619      	mov	r1, r3
 8024782:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8024786:	4603      	mov	r3, r0
 8024788:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802478a:	f507 7261 	add.w	r2, r7, #900	; 0x384
 802478e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8024792:	6812      	ldr	r2, [r2, #0]
 8024794:	681b      	ldr	r3, [r3, #0]
 8024796:	429a      	cmp	r2, r3
 8024798:	d10a      	bne.n	80247b0 <arm_softmax_s8+0x2fa0>
 802479a:	f507 7361 	add.w	r3, r7, #900	; 0x384
 802479e:	681b      	ldr	r3, [r3, #0]
 80247a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80247a4:	d104      	bne.n	80247b0 <arm_softmax_s8+0x2fa0>
        result = Q31_MAX;
 80247a6:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 80247aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80247ae:	6013      	str	r3, [r2, #0]
    return result;
 80247b0:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80247b4:	681a      	ldr	r2, [r3, #0]
 80247b6:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 80247ba:	601a      	str	r2, [r3, #0]
 80247bc:	f507 7266 	add.w	r2, r7, #920	; 0x398
 80247c0:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 80247c4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80247c6:	f507 7265 	add.w	r2, r7, #916	; 0x394
 80247ca:	2300      	movs	r3, #0
 80247cc:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80247ce:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80247d2:	2201      	movs	r2, #1
 80247d4:	681b      	ldr	r3, [r3, #0]
 80247d6:	fa02 f303 	lsl.w	r3, r2, r3
 80247da:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80247de:	3b01      	subs	r3, #1
 80247e0:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80247e2:	f507 7163 	add.w	r1, r7, #908	; 0x38c
 80247e6:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 80247ea:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80247ee:	6812      	ldr	r2, [r2, #0]
 80247f0:	681b      	ldr	r3, [r3, #0]
 80247f2:	4013      	ands	r3, r2
 80247f4:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80247f6:	f507 7165 	add.w	r1, r7, #916	; 0x394
 80247fa:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 80247fe:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8024802:	6812      	ldr	r2, [r2, #0]
 8024804:	681b      	ldr	r3, [r3, #0]
 8024806:	fa42 f303 	asr.w	r3, r2, r3
 802480a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 802480c:	f507 7262 	add.w	r2, r7, #904	; 0x388
 8024810:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8024814:	681b      	ldr	r3, [r3, #0]
 8024816:	105b      	asrs	r3, r3, #1
 8024818:	6013      	str	r3, [r2, #0]
    if (result < 0)
 802481a:	f507 7365 	add.w	r3, r7, #916	; 0x394
 802481e:	681b      	ldr	r3, [r3, #0]
 8024820:	2b00      	cmp	r3, #0
 8024822:	da06      	bge.n	8024832 <arm_softmax_s8+0x3022>
        threshold++;
 8024824:	f507 7262 	add.w	r2, r7, #904	; 0x388
 8024828:	f507 7362 	add.w	r3, r7, #904	; 0x388
 802482c:	681b      	ldr	r3, [r3, #0]
 802482e:	3301      	adds	r3, #1
 8024830:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8024832:	f507 7263 	add.w	r2, r7, #908	; 0x38c
 8024836:	f507 7362 	add.w	r3, r7, #904	; 0x388
 802483a:	6812      	ldr	r2, [r2, #0]
 802483c:	681b      	ldr	r3, [r3, #0]
 802483e:	429a      	cmp	r2, r3
 8024840:	dd06      	ble.n	8024850 <arm_softmax_s8+0x3040>
        result++;
 8024842:	f507 7265 	add.w	r2, r7, #916	; 0x394
 8024846:	f507 7365 	add.w	r3, r7, #916	; 0x394
 802484a:	681b      	ldr	r3, [r3, #0]
 802484c:	3301      	adds	r3, #1
 802484e:	6013      	str	r3, [r2, #0]
    return result;
 8024850:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8024854:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 8024856:	3b80      	subs	r3, #128	; 0x80
 8024858:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 802485c:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 8024860:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8024864:	db09      	blt.n	802487a <arm_softmax_s8+0x306a>
 8024866:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 802486a:	2b7e      	cmp	r3, #126	; 0x7e
 802486c:	dc03      	bgt.n	8024876 <arm_softmax_s8+0x3066>
 802486e:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 8024872:	b259      	sxtb	r1, r3
 8024874:	e003      	b.n	802487e <arm_softmax_s8+0x306e>
 8024876:	217f      	movs	r1, #127	; 0x7f
 8024878:	e001      	b.n	802487e <arm_softmax_s8+0x306e>
 802487a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 802487e:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8024882:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8024886:	441a      	add	r2, r3
 8024888:	460b      	mov	r3, r1
 802488a:	7013      	strb	r3, [r2, #0]
 802488c:	e006      	b.n	802489c <arm_softmax_s8+0x308c>
            }
            else
            {
                output[col] = -128;
 802488e:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8024892:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8024896:	441a      	add	r2, r3
 8024898:	2380      	movs	r3, #128	; 0x80
 802489a:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 802489c:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 80248a0:	3301      	adds	r3, #1
 80248a2:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80248a6:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80248aa:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 80248ae:	681b      	ldr	r3, [r3, #0]
 80248b0:	429a      	cmp	r2, r3
 80248b2:	f6fe ae81 	blt.w	80235b8 <arm_softmax_s8+0x1da8>
            }
        }
        input += row_size;
 80248b6:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80248ba:	6819      	ldr	r1, [r3, #0]
 80248bc:	f507 720d 	add.w	r2, r7, #564	; 0x234
 80248c0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80248c4:	681b      	ldr	r3, [r3, #0]
 80248c6:	440b      	add	r3, r1
 80248c8:	6013      	str	r3, [r2, #0]
        output += row_size;
 80248ca:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80248ce:	681a      	ldr	r2, [r3, #0]
 80248d0:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 80248d4:	4413      	add	r3, r2
 80248d6:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 80248da:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80248de:	3301      	adds	r3, #1
 80248e0:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 80248e4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80248e8:	f8d7 25f0 	ldr.w	r2, [r7, #1520]	; 0x5f0
 80248ec:	681b      	ldr	r3, [r3, #0]
 80248ee:	429a      	cmp	r2, r3
 80248f0:	f6fc afae 	blt.w	8021850 <arm_softmax_s8+0x40>
    }

#endif
}
 80248f4:	bf00      	nop
 80248f6:	bf00      	nop
 80248f8:	f507 67bf 	add.w	r7, r7, #1528	; 0x5f8
 80248fc:	46bd      	mov	sp, r7
 80248fe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8024902:	4770      	bx	lr

08024904 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 8024904:	b580      	push	{r7, lr}
 8024906:	b082      	sub	sp, #8
 8024908:	af00      	add	r7, sp, #0
 802490a:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 802490c:	687b      	ldr	r3, [r7, #4]
 802490e:	2200      	movs	r2, #0
 8024910:	2104      	movs	r1, #4
 8024912:	4618      	mov	r0, r3
 8024914:	f7e4 fce8 	bl	80092e8 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8024918:	4603      	mov	r3, r0
  }
 802491a:	4618      	mov	r0, r3
 802491c:	3708      	adds	r7, #8
 802491e:	46bd      	mov	sp, r7
 8024920:	bd80      	pop	{r7, pc}

08024922 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 8024922:	b580      	push	{r7, lr}
 8024924:	b082      	sub	sp, #8
 8024926:	af00      	add	r7, sp, #0
 8024928:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 802492a:	687b      	ldr	r3, [r7, #4]
 802492c:	2200      	movs	r2, #0
 802492e:	210a      	movs	r1, #10
 8024930:	4618      	mov	r0, r3
 8024932:	f7e4 fcab 	bl	800928c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8024936:	4603      	mov	r3, r0
 8024938:	b2db      	uxtb	r3, r3
  }
 802493a:	4618      	mov	r0, r3
 802493c:	3708      	adds	r7, #8
 802493e:	46bd      	mov	sp, r7
 8024940:	bd80      	pop	{r7, pc}

08024942 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 8024942:	b580      	push	{r7, lr}
 8024944:	b084      	sub	sp, #16
 8024946:	af00      	add	r7, sp, #0
 8024948:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 802494a:	687b      	ldr	r3, [r7, #4]
 802494c:	2b00      	cmp	r3, #0
 802494e:	d101      	bne.n	8024954 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 8024950:	f000 fab5 	bl	8024ebe <abort>

  return std::max(
      op_code->builtin_code(),
 8024954:	6878      	ldr	r0, [r7, #4]
 8024956:	f7ff ffe4 	bl	8024922 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 802495a:	4603      	mov	r3, r0
 802495c:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 802495e:	6878      	ldr	r0, [r7, #4]
 8024960:	f7ff ffd0 	bl	8024904 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 8024964:	4603      	mov	r3, r0
 8024966:	b2db      	uxtb	r3, r3
 8024968:	73fb      	strb	r3, [r7, #15]
 802496a:	f107 020f 	add.w	r2, r7, #15
 802496e:	f107 030e 	add.w	r3, r7, #14
 8024972:	4611      	mov	r1, r2
 8024974:	4618      	mov	r0, r3
 8024976:	f000 f806 	bl	8024986 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 802497a:	4603      	mov	r3, r0
 802497c:	781b      	ldrb	r3, [r3, #0]
}
 802497e:	4618      	mov	r0, r3
 8024980:	3710      	adds	r7, #16
 8024982:	46bd      	mov	sp, r7
 8024984:	bd80      	pop	{r7, pc}

08024986 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 8024986:	b480      	push	{r7}
 8024988:	b083      	sub	sp, #12
 802498a:	af00      	add	r7, sp, #0
 802498c:	6078      	str	r0, [r7, #4]
 802498e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8024990:	687b      	ldr	r3, [r7, #4]
 8024992:	781a      	ldrb	r2, [r3, #0]
 8024994:	683b      	ldr	r3, [r7, #0]
 8024996:	781b      	ldrb	r3, [r3, #0]
 8024998:	429a      	cmp	r2, r3
 802499a:	d201      	bcs.n	80249a0 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 802499c:	683b      	ldr	r3, [r7, #0]
 802499e:	e000      	b.n	80249a2 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 80249a0:	687b      	ldr	r3, [r7, #4]
    }
 80249a2:	4618      	mov	r0, r3
 80249a4:	370c      	adds	r7, #12
 80249a6:	46bd      	mov	sp, r7
 80249a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249ac:	4770      	bx	lr

080249ae <_ZdlPv>:
 80249ae:	f000 baf9 	b.w	8024fa4 <free>

080249b2 <_ZdlPvj>:
 80249b2:	f7ff bffc 	b.w	80249ae <_ZdlPv>

080249b6 <_ZdaPv>:
 80249b6:	f7ff bffa 	b.w	80249ae <_ZdlPv>

080249ba <__cxa_guard_acquire>:
 80249ba:	6803      	ldr	r3, [r0, #0]
 80249bc:	07db      	lsls	r3, r3, #31
 80249be:	d406      	bmi.n	80249ce <__cxa_guard_acquire+0x14>
 80249c0:	7843      	ldrb	r3, [r0, #1]
 80249c2:	b103      	cbz	r3, 80249c6 <__cxa_guard_acquire+0xc>
 80249c4:	deff      	udf	#255	; 0xff
 80249c6:	2301      	movs	r3, #1
 80249c8:	7043      	strb	r3, [r0, #1]
 80249ca:	4618      	mov	r0, r3
 80249cc:	4770      	bx	lr
 80249ce:	2000      	movs	r0, #0
 80249d0:	4770      	bx	lr

080249d2 <__cxa_guard_release>:
 80249d2:	2301      	movs	r3, #1
 80249d4:	6003      	str	r3, [r0, #0]
 80249d6:	4770      	bx	lr

080249d8 <_Znwj>:
 80249d8:	2801      	cmp	r0, #1
 80249da:	bf38      	it	cc
 80249dc:	2001      	movcc	r0, #1
 80249de:	b510      	push	{r4, lr}
 80249e0:	4604      	mov	r4, r0
 80249e2:	4620      	mov	r0, r4
 80249e4:	f000 fad6 	bl	8024f94 <malloc>
 80249e8:	b930      	cbnz	r0, 80249f8 <_Znwj+0x20>
 80249ea:	f000 f81d 	bl	8024a28 <_ZSt15get_new_handlerv>
 80249ee:	b908      	cbnz	r0, 80249f4 <_Znwj+0x1c>
 80249f0:	f000 fa65 	bl	8024ebe <abort>
 80249f4:	4780      	blx	r0
 80249f6:	e7f4      	b.n	80249e2 <_Znwj+0xa>
 80249f8:	bd10      	pop	{r4, pc}

080249fa <_Znaj>:
 80249fa:	f7ff bfed 	b.w	80249d8 <_Znwj>

080249fe <__cxa_pure_virtual>:
 80249fe:	b508      	push	{r3, lr}
 8024a00:	f000 f80c 	bl	8024a1c <_ZSt9terminatev>

08024a04 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024a04:	b508      	push	{r3, lr}
 8024a06:	4780      	blx	r0
 8024a08:	f000 fa59 	bl	8024ebe <abort>

08024a0c <_ZSt13get_terminatev>:
 8024a0c:	4b02      	ldr	r3, [pc, #8]	; (8024a18 <_ZSt13get_terminatev+0xc>)
 8024a0e:	6818      	ldr	r0, [r3, #0]
 8024a10:	f3bf 8f5b 	dmb	ish
 8024a14:	4770      	bx	lr
 8024a16:	bf00      	nop
 8024a18:	20000014 	.word	0x20000014

08024a1c <_ZSt9terminatev>:
 8024a1c:	b508      	push	{r3, lr}
 8024a1e:	f7ff fff5 	bl	8024a0c <_ZSt13get_terminatev>
 8024a22:	f7ff ffef 	bl	8024a04 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08024a28 <_ZSt15get_new_handlerv>:
 8024a28:	4b02      	ldr	r3, [pc, #8]	; (8024a34 <_ZSt15get_new_handlerv+0xc>)
 8024a2a:	6818      	ldr	r0, [r3, #0]
 8024a2c:	f3bf 8f5b 	dmb	ish
 8024a30:	4770      	bx	lr
 8024a32:	bf00      	nop
 8024a34:	2004a1c8 	.word	0x2004a1c8

08024a38 <floor>:
 8024a38:	ec51 0b10 	vmov	r0, r1, d0
 8024a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024a40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8024a44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8024a48:	2e13      	cmp	r6, #19
 8024a4a:	ee10 5a10 	vmov	r5, s0
 8024a4e:	ee10 8a10 	vmov	r8, s0
 8024a52:	460c      	mov	r4, r1
 8024a54:	dc32      	bgt.n	8024abc <floor+0x84>
 8024a56:	2e00      	cmp	r6, #0
 8024a58:	da14      	bge.n	8024a84 <floor+0x4c>
 8024a5a:	a333      	add	r3, pc, #204	; (adr r3, 8024b28 <floor+0xf0>)
 8024a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a60:	f7db fc46 	bl	80002f0 <__adddf3>
 8024a64:	2200      	movs	r2, #0
 8024a66:	2300      	movs	r3, #0
 8024a68:	f7dc f888 	bl	8000b7c <__aeabi_dcmpgt>
 8024a6c:	b138      	cbz	r0, 8024a7e <floor+0x46>
 8024a6e:	2c00      	cmp	r4, #0
 8024a70:	da57      	bge.n	8024b22 <floor+0xea>
 8024a72:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8024a76:	431d      	orrs	r5, r3
 8024a78:	d001      	beq.n	8024a7e <floor+0x46>
 8024a7a:	4c2d      	ldr	r4, [pc, #180]	; (8024b30 <floor+0xf8>)
 8024a7c:	2500      	movs	r5, #0
 8024a7e:	4621      	mov	r1, r4
 8024a80:	4628      	mov	r0, r5
 8024a82:	e025      	b.n	8024ad0 <floor+0x98>
 8024a84:	4f2b      	ldr	r7, [pc, #172]	; (8024b34 <floor+0xfc>)
 8024a86:	4137      	asrs	r7, r6
 8024a88:	ea01 0307 	and.w	r3, r1, r7
 8024a8c:	4303      	orrs	r3, r0
 8024a8e:	d01f      	beq.n	8024ad0 <floor+0x98>
 8024a90:	a325      	add	r3, pc, #148	; (adr r3, 8024b28 <floor+0xf0>)
 8024a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a96:	f7db fc2b 	bl	80002f0 <__adddf3>
 8024a9a:	2200      	movs	r2, #0
 8024a9c:	2300      	movs	r3, #0
 8024a9e:	f7dc f86d 	bl	8000b7c <__aeabi_dcmpgt>
 8024aa2:	2800      	cmp	r0, #0
 8024aa4:	d0eb      	beq.n	8024a7e <floor+0x46>
 8024aa6:	2c00      	cmp	r4, #0
 8024aa8:	bfbe      	ittt	lt
 8024aaa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8024aae:	fa43 f606 	asrlt.w	r6, r3, r6
 8024ab2:	19a4      	addlt	r4, r4, r6
 8024ab4:	ea24 0407 	bic.w	r4, r4, r7
 8024ab8:	2500      	movs	r5, #0
 8024aba:	e7e0      	b.n	8024a7e <floor+0x46>
 8024abc:	2e33      	cmp	r6, #51	; 0x33
 8024abe:	dd0b      	ble.n	8024ad8 <floor+0xa0>
 8024ac0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024ac4:	d104      	bne.n	8024ad0 <floor+0x98>
 8024ac6:	ee10 2a10 	vmov	r2, s0
 8024aca:	460b      	mov	r3, r1
 8024acc:	f7db fc10 	bl	80002f0 <__adddf3>
 8024ad0:	ec41 0b10 	vmov	d0, r0, r1
 8024ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024ad8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8024adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8024ae0:	fa23 f707 	lsr.w	r7, r3, r7
 8024ae4:	4207      	tst	r7, r0
 8024ae6:	d0f3      	beq.n	8024ad0 <floor+0x98>
 8024ae8:	a30f      	add	r3, pc, #60	; (adr r3, 8024b28 <floor+0xf0>)
 8024aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024aee:	f7db fbff 	bl	80002f0 <__adddf3>
 8024af2:	2200      	movs	r2, #0
 8024af4:	2300      	movs	r3, #0
 8024af6:	f7dc f841 	bl	8000b7c <__aeabi_dcmpgt>
 8024afa:	2800      	cmp	r0, #0
 8024afc:	d0bf      	beq.n	8024a7e <floor+0x46>
 8024afe:	2c00      	cmp	r4, #0
 8024b00:	da02      	bge.n	8024b08 <floor+0xd0>
 8024b02:	2e14      	cmp	r6, #20
 8024b04:	d103      	bne.n	8024b0e <floor+0xd6>
 8024b06:	3401      	adds	r4, #1
 8024b08:	ea25 0507 	bic.w	r5, r5, r7
 8024b0c:	e7b7      	b.n	8024a7e <floor+0x46>
 8024b0e:	2301      	movs	r3, #1
 8024b10:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8024b14:	fa03 f606 	lsl.w	r6, r3, r6
 8024b18:	4435      	add	r5, r6
 8024b1a:	4545      	cmp	r5, r8
 8024b1c:	bf38      	it	cc
 8024b1e:	18e4      	addcc	r4, r4, r3
 8024b20:	e7f2      	b.n	8024b08 <floor+0xd0>
 8024b22:	2500      	movs	r5, #0
 8024b24:	462c      	mov	r4, r5
 8024b26:	e7aa      	b.n	8024a7e <floor+0x46>
 8024b28:	8800759c 	.word	0x8800759c
 8024b2c:	7e37e43c 	.word	0x7e37e43c
 8024b30:	bff00000 	.word	0xbff00000
 8024b34:	000fffff 	.word	0x000fffff

08024b38 <frexp>:
 8024b38:	b570      	push	{r4, r5, r6, lr}
 8024b3a:	2100      	movs	r1, #0
 8024b3c:	ec55 4b10 	vmov	r4, r5, d0
 8024b40:	6001      	str	r1, [r0, #0]
 8024b42:	4916      	ldr	r1, [pc, #88]	; (8024b9c <frexp+0x64>)
 8024b44:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8024b48:	428a      	cmp	r2, r1
 8024b4a:	4606      	mov	r6, r0
 8024b4c:	462b      	mov	r3, r5
 8024b4e:	dc22      	bgt.n	8024b96 <frexp+0x5e>
 8024b50:	ee10 1a10 	vmov	r1, s0
 8024b54:	4311      	orrs	r1, r2
 8024b56:	d01e      	beq.n	8024b96 <frexp+0x5e>
 8024b58:	4911      	ldr	r1, [pc, #68]	; (8024ba0 <frexp+0x68>)
 8024b5a:	4029      	ands	r1, r5
 8024b5c:	b969      	cbnz	r1, 8024b7a <frexp+0x42>
 8024b5e:	4b11      	ldr	r3, [pc, #68]	; (8024ba4 <frexp+0x6c>)
 8024b60:	2200      	movs	r2, #0
 8024b62:	ee10 0a10 	vmov	r0, s0
 8024b66:	4629      	mov	r1, r5
 8024b68:	f7db fd78 	bl	800065c <__aeabi_dmul>
 8024b6c:	460b      	mov	r3, r1
 8024b6e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8024b72:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8024b76:	4604      	mov	r4, r0
 8024b78:	6031      	str	r1, [r6, #0]
 8024b7a:	6831      	ldr	r1, [r6, #0]
 8024b7c:	1512      	asrs	r2, r2, #20
 8024b7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024b82:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8024b86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024b8a:	440a      	add	r2, r1
 8024b8c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8024b90:	6032      	str	r2, [r6, #0]
 8024b92:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8024b96:	ec45 4b10 	vmov	d0, r4, r5
 8024b9a:	bd70      	pop	{r4, r5, r6, pc}
 8024b9c:	7fefffff 	.word	0x7fefffff
 8024ba0:	7ff00000 	.word	0x7ff00000
 8024ba4:	43500000 	.word	0x43500000

08024ba8 <round>:
 8024ba8:	ec51 0b10 	vmov	r0, r1, d0
 8024bac:	b570      	push	{r4, r5, r6, lr}
 8024bae:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8024bb2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8024bb6:	2c13      	cmp	r4, #19
 8024bb8:	ee10 2a10 	vmov	r2, s0
 8024bbc:	460b      	mov	r3, r1
 8024bbe:	dc19      	bgt.n	8024bf4 <round+0x4c>
 8024bc0:	2c00      	cmp	r4, #0
 8024bc2:	da09      	bge.n	8024bd8 <round+0x30>
 8024bc4:	3401      	adds	r4, #1
 8024bc6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8024bca:	d103      	bne.n	8024bd4 <round+0x2c>
 8024bcc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8024bd0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8024bd4:	2100      	movs	r1, #0
 8024bd6:	e028      	b.n	8024c2a <round+0x82>
 8024bd8:	4d15      	ldr	r5, [pc, #84]	; (8024c30 <round+0x88>)
 8024bda:	4125      	asrs	r5, r4
 8024bdc:	ea01 0605 	and.w	r6, r1, r5
 8024be0:	4332      	orrs	r2, r6
 8024be2:	d00e      	beq.n	8024c02 <round+0x5a>
 8024be4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8024be8:	fa42 f404 	asr.w	r4, r2, r4
 8024bec:	4423      	add	r3, r4
 8024bee:	ea23 0305 	bic.w	r3, r3, r5
 8024bf2:	e7ef      	b.n	8024bd4 <round+0x2c>
 8024bf4:	2c33      	cmp	r4, #51	; 0x33
 8024bf6:	dd07      	ble.n	8024c08 <round+0x60>
 8024bf8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8024bfc:	d101      	bne.n	8024c02 <round+0x5a>
 8024bfe:	f7db fb77 	bl	80002f0 <__adddf3>
 8024c02:	ec41 0b10 	vmov	d0, r0, r1
 8024c06:	bd70      	pop	{r4, r5, r6, pc}
 8024c08:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8024c0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8024c10:	40f5      	lsrs	r5, r6
 8024c12:	4228      	tst	r0, r5
 8024c14:	d0f5      	beq.n	8024c02 <round+0x5a>
 8024c16:	2101      	movs	r1, #1
 8024c18:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8024c1c:	fa01 f404 	lsl.w	r4, r1, r4
 8024c20:	1912      	adds	r2, r2, r4
 8024c22:	bf28      	it	cs
 8024c24:	185b      	addcs	r3, r3, r1
 8024c26:	ea22 0105 	bic.w	r1, r2, r5
 8024c2a:	4608      	mov	r0, r1
 8024c2c:	4619      	mov	r1, r3
 8024c2e:	e7e8      	b.n	8024c02 <round+0x5a>
 8024c30:	000fffff 	.word	0x000fffff

08024c34 <roundf>:
 8024c34:	ee10 0a10 	vmov	r0, s0
 8024c38:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8024c3c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8024c40:	2a16      	cmp	r2, #22
 8024c42:	dc15      	bgt.n	8024c70 <roundf+0x3c>
 8024c44:	2a00      	cmp	r2, #0
 8024c46:	da08      	bge.n	8024c5a <roundf+0x26>
 8024c48:	3201      	adds	r2, #1
 8024c4a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8024c4e:	d101      	bne.n	8024c54 <roundf+0x20>
 8024c50:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8024c54:	ee00 3a10 	vmov	s0, r3
 8024c58:	4770      	bx	lr
 8024c5a:	4908      	ldr	r1, [pc, #32]	; (8024c7c <roundf+0x48>)
 8024c5c:	4111      	asrs	r1, r2
 8024c5e:	4208      	tst	r0, r1
 8024c60:	d0fa      	beq.n	8024c58 <roundf+0x24>
 8024c62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8024c66:	4113      	asrs	r3, r2
 8024c68:	4403      	add	r3, r0
 8024c6a:	ea23 0301 	bic.w	r3, r3, r1
 8024c6e:	e7f1      	b.n	8024c54 <roundf+0x20>
 8024c70:	2a80      	cmp	r2, #128	; 0x80
 8024c72:	d1f1      	bne.n	8024c58 <roundf+0x24>
 8024c74:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024c78:	4770      	bx	lr
 8024c7a:	bf00      	nop
 8024c7c:	007fffff 	.word	0x007fffff

08024c80 <expf>:
 8024c80:	b508      	push	{r3, lr}
 8024c82:	ed2d 8b02 	vpush	{d8}
 8024c86:	eef0 8a40 	vmov.f32	s17, s0
 8024c8a:	f000 f837 	bl	8024cfc <__ieee754_expf>
 8024c8e:	4b16      	ldr	r3, [pc, #88]	; (8024ce8 <expf+0x68>)
 8024c90:	f993 3000 	ldrsb.w	r3, [r3]
 8024c94:	3301      	adds	r3, #1
 8024c96:	eeb0 8a40 	vmov.f32	s16, s0
 8024c9a:	d011      	beq.n	8024cc0 <expf+0x40>
 8024c9c:	eeb0 0a68 	vmov.f32	s0, s17
 8024ca0:	f000 f900 	bl	8024ea4 <finitef>
 8024ca4:	b160      	cbz	r0, 8024cc0 <expf+0x40>
 8024ca6:	eddf 7a11 	vldr	s15, [pc, #68]	; 8024cec <expf+0x6c>
 8024caa:	eef4 8ae7 	vcmpe.f32	s17, s15
 8024cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024cb2:	dd0a      	ble.n	8024cca <expf+0x4a>
 8024cb4:	f000 f92e 	bl	8024f14 <__errno>
 8024cb8:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8024cf0 <expf+0x70>
 8024cbc:	2322      	movs	r3, #34	; 0x22
 8024cbe:	6003      	str	r3, [r0, #0]
 8024cc0:	eeb0 0a48 	vmov.f32	s0, s16
 8024cc4:	ecbd 8b02 	vpop	{d8}
 8024cc8:	bd08      	pop	{r3, pc}
 8024cca:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8024cf4 <expf+0x74>
 8024cce:	eef4 8ae7 	vcmpe.f32	s17, s15
 8024cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024cd6:	d5f3      	bpl.n	8024cc0 <expf+0x40>
 8024cd8:	f000 f91c 	bl	8024f14 <__errno>
 8024cdc:	2322      	movs	r3, #34	; 0x22
 8024cde:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8024cf8 <expf+0x78>
 8024ce2:	6003      	str	r3, [r0, #0]
 8024ce4:	e7ec      	b.n	8024cc0 <expf+0x40>
 8024ce6:	bf00      	nop
 8024ce8:	20000018 	.word	0x20000018
 8024cec:	42b17180 	.word	0x42b17180
 8024cf0:	7f800000 	.word	0x7f800000
 8024cf4:	c2cff1b5 	.word	0xc2cff1b5
 8024cf8:	00000000 	.word	0x00000000

08024cfc <__ieee754_expf>:
 8024cfc:	ee10 2a10 	vmov	r2, s0
 8024d00:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8024d04:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8024d08:	d902      	bls.n	8024d10 <__ieee754_expf+0x14>
 8024d0a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024d0e:	4770      	bx	lr
 8024d10:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8024d14:	d106      	bne.n	8024d24 <__ieee754_expf+0x28>
 8024d16:	eddf 7a51 	vldr	s15, [pc, #324]	; 8024e5c <__ieee754_expf+0x160>
 8024d1a:	2b00      	cmp	r3, #0
 8024d1c:	bf18      	it	ne
 8024d1e:	eeb0 0a67 	vmovne.f32	s0, s15
 8024d22:	4770      	bx	lr
 8024d24:	484e      	ldr	r0, [pc, #312]	; (8024e60 <__ieee754_expf+0x164>)
 8024d26:	4282      	cmp	r2, r0
 8024d28:	dd04      	ble.n	8024d34 <__ieee754_expf+0x38>
 8024d2a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8024e64 <__ieee754_expf+0x168>
 8024d2e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024d32:	4770      	bx	lr
 8024d34:	2a00      	cmp	r2, #0
 8024d36:	da03      	bge.n	8024d40 <__ieee754_expf+0x44>
 8024d38:	4a4b      	ldr	r2, [pc, #300]	; (8024e68 <__ieee754_expf+0x16c>)
 8024d3a:	4291      	cmp	r1, r2
 8024d3c:	f200 808a 	bhi.w	8024e54 <__ieee754_expf+0x158>
 8024d40:	4a4a      	ldr	r2, [pc, #296]	; (8024e6c <__ieee754_expf+0x170>)
 8024d42:	4291      	cmp	r1, r2
 8024d44:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8024d48:	d954      	bls.n	8024df4 <__ieee754_expf+0xf8>
 8024d4a:	4a49      	ldr	r2, [pc, #292]	; (8024e70 <__ieee754_expf+0x174>)
 8024d4c:	4291      	cmp	r1, r2
 8024d4e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8024d52:	d836      	bhi.n	8024dc2 <__ieee754_expf+0xc6>
 8024d54:	4947      	ldr	r1, [pc, #284]	; (8024e74 <__ieee754_expf+0x178>)
 8024d56:	4411      	add	r1, r2
 8024d58:	ed91 7a00 	vldr	s14, [r1]
 8024d5c:	4946      	ldr	r1, [pc, #280]	; (8024e78 <__ieee754_expf+0x17c>)
 8024d5e:	440a      	add	r2, r1
 8024d60:	edd2 7a00 	vldr	s15, [r2]
 8024d64:	ee30 7a47 	vsub.f32	s14, s0, s14
 8024d68:	f1c3 0201 	rsb	r2, r3, #1
 8024d6c:	1ad2      	subs	r2, r2, r3
 8024d6e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8024d72:	ee60 6a00 	vmul.f32	s13, s0, s0
 8024d76:	eddf 5a41 	vldr	s11, [pc, #260]	; 8024e7c <__ieee754_expf+0x180>
 8024d7a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8024e80 <__ieee754_expf+0x184>
 8024d7e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8024d82:	eddf 5a40 	vldr	s11, [pc, #256]	; 8024e84 <__ieee754_expf+0x188>
 8024d86:	eee5 5a26 	vfma.f32	s11, s10, s13
 8024d8a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8024e88 <__ieee754_expf+0x18c>
 8024d8e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8024d92:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8024e8c <__ieee754_expf+0x190>
 8024d96:	eee5 5a26 	vfma.f32	s11, s10, s13
 8024d9a:	eeb0 5a40 	vmov.f32	s10, s0
 8024d9e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8024da2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8024da6:	eef0 6a45 	vmov.f32	s13, s10
 8024daa:	ee20 5a05 	vmul.f32	s10, s0, s10
 8024dae:	bb92      	cbnz	r2, 8024e16 <__ieee754_expf+0x11a>
 8024db0:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8024db4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8024db8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8024dbc:	ee36 0a40 	vsub.f32	s0, s12, s0
 8024dc0:	4770      	bx	lr
 8024dc2:	4b33      	ldr	r3, [pc, #204]	; (8024e90 <__ieee754_expf+0x194>)
 8024dc4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8024e94 <__ieee754_expf+0x198>
 8024dc8:	4413      	add	r3, r2
 8024dca:	edd3 7a00 	vldr	s15, [r3]
 8024dce:	eee0 7a07 	vfma.f32	s15, s0, s14
 8024dd2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8024e98 <__ieee754_expf+0x19c>
 8024dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024dda:	ee17 2a90 	vmov	r2, s15
 8024dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024de2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8024de6:	eeb0 7a40 	vmov.f32	s14, s0
 8024dea:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8024e9c <__ieee754_expf+0x1a0>
 8024dee:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024df2:	e7bc      	b.n	8024d6e <__ieee754_expf+0x72>
 8024df4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8024df8:	d20b      	bcs.n	8024e12 <__ieee754_expf+0x116>
 8024dfa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8024e64 <__ieee754_expf+0x168>
 8024dfe:	ee70 6a26 	vadd.f32	s13, s0, s13
 8024e02:	eef4 6ac6 	vcmpe.f32	s13, s12
 8024e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e0a:	dd02      	ble.n	8024e12 <__ieee754_expf+0x116>
 8024e0c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8024e10:	4770      	bx	lr
 8024e12:	2200      	movs	r2, #0
 8024e14:	e7ad      	b.n	8024d72 <__ieee754_expf+0x76>
 8024e16:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8024e1a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8024e1e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8024e22:	bfb8      	it	lt
 8024e24:	3264      	addlt	r2, #100	; 0x64
 8024e26:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8024e2a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8024e2e:	ee76 7a40 	vsub.f32	s15, s12, s0
 8024e32:	ee17 3a90 	vmov	r3, s15
 8024e36:	bfab      	itete	ge
 8024e38:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8024e3c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8024e40:	ee00 3a10 	vmovge	s0, r3
 8024e44:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8024ea0 <__ieee754_expf+0x1a4>
 8024e48:	bfbc      	itt	lt
 8024e4a:	ee00 3a10 	vmovlt	s0, r3
 8024e4e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8024e52:	4770      	bx	lr
 8024e54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8024e5c <__ieee754_expf+0x160>
 8024e58:	4770      	bx	lr
 8024e5a:	bf00      	nop
 8024e5c:	00000000 	.word	0x00000000
 8024e60:	42b17217 	.word	0x42b17217
 8024e64:	7149f2ca 	.word	0x7149f2ca
 8024e68:	42cff1b5 	.word	0x42cff1b5
 8024e6c:	3eb17218 	.word	0x3eb17218
 8024e70:	3f851591 	.word	0x3f851591
 8024e74:	08075878 	.word	0x08075878
 8024e78:	08075880 	.word	0x08075880
 8024e7c:	3331bb4c 	.word	0x3331bb4c
 8024e80:	b5ddea0e 	.word	0xb5ddea0e
 8024e84:	388ab355 	.word	0x388ab355
 8024e88:	bb360b61 	.word	0xbb360b61
 8024e8c:	3e2aaaab 	.word	0x3e2aaaab
 8024e90:	08075870 	.word	0x08075870
 8024e94:	3fb8aa3b 	.word	0x3fb8aa3b
 8024e98:	3f317180 	.word	0x3f317180
 8024e9c:	3717f7d1 	.word	0x3717f7d1
 8024ea0:	0d800000 	.word	0x0d800000

08024ea4 <finitef>:
 8024ea4:	b082      	sub	sp, #8
 8024ea6:	ed8d 0a01 	vstr	s0, [sp, #4]
 8024eaa:	9801      	ldr	r0, [sp, #4]
 8024eac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8024eb0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8024eb4:	bfac      	ite	ge
 8024eb6:	2000      	movge	r0, #0
 8024eb8:	2001      	movlt	r0, #1
 8024eba:	b002      	add	sp, #8
 8024ebc:	4770      	bx	lr

08024ebe <abort>:
 8024ebe:	b508      	push	{r3, lr}
 8024ec0:	2006      	movs	r0, #6
 8024ec2:	f000 fc77 	bl	80257b4 <raise>
 8024ec6:	2001      	movs	r0, #1
 8024ec8:	f7dd fca0 	bl	800280c <_exit>

08024ecc <__assert_func>:
 8024ecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024ece:	4614      	mov	r4, r2
 8024ed0:	461a      	mov	r2, r3
 8024ed2:	4b09      	ldr	r3, [pc, #36]	; (8024ef8 <__assert_func+0x2c>)
 8024ed4:	681b      	ldr	r3, [r3, #0]
 8024ed6:	4605      	mov	r5, r0
 8024ed8:	68d8      	ldr	r0, [r3, #12]
 8024eda:	b14c      	cbz	r4, 8024ef0 <__assert_func+0x24>
 8024edc:	4b07      	ldr	r3, [pc, #28]	; (8024efc <__assert_func+0x30>)
 8024ede:	9100      	str	r1, [sp, #0]
 8024ee0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024ee4:	4906      	ldr	r1, [pc, #24]	; (8024f00 <__assert_func+0x34>)
 8024ee6:	462b      	mov	r3, r5
 8024ee8:	f000 f81a 	bl	8024f20 <fiprintf>
 8024eec:	f7ff ffe7 	bl	8024ebe <abort>
 8024ef0:	4b04      	ldr	r3, [pc, #16]	; (8024f04 <__assert_func+0x38>)
 8024ef2:	461c      	mov	r4, r3
 8024ef4:	e7f3      	b.n	8024ede <__assert_func+0x12>
 8024ef6:	bf00      	nop
 8024ef8:	2000001c 	.word	0x2000001c
 8024efc:	08075888 	.word	0x08075888
 8024f00:	08075895 	.word	0x08075895
 8024f04:	080758c3 	.word	0x080758c3

08024f08 <atexit>:
 8024f08:	2300      	movs	r3, #0
 8024f0a:	4601      	mov	r1, r0
 8024f0c:	461a      	mov	r2, r3
 8024f0e:	4618      	mov	r0, r3
 8024f10:	f000 bd7a 	b.w	8025a08 <__register_exitproc>

08024f14 <__errno>:
 8024f14:	4b01      	ldr	r3, [pc, #4]	; (8024f1c <__errno+0x8>)
 8024f16:	6818      	ldr	r0, [r3, #0]
 8024f18:	4770      	bx	lr
 8024f1a:	bf00      	nop
 8024f1c:	2000001c 	.word	0x2000001c

08024f20 <fiprintf>:
 8024f20:	b40e      	push	{r1, r2, r3}
 8024f22:	b503      	push	{r0, r1, lr}
 8024f24:	4601      	mov	r1, r0
 8024f26:	ab03      	add	r3, sp, #12
 8024f28:	4805      	ldr	r0, [pc, #20]	; (8024f40 <fiprintf+0x20>)
 8024f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8024f2e:	6800      	ldr	r0, [r0, #0]
 8024f30:	9301      	str	r3, [sp, #4]
 8024f32:	f000 f943 	bl	80251bc <_vfiprintf_r>
 8024f36:	b002      	add	sp, #8
 8024f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8024f3c:	b003      	add	sp, #12
 8024f3e:	4770      	bx	lr
 8024f40:	2000001c 	.word	0x2000001c

08024f44 <__libc_init_array>:
 8024f44:	b570      	push	{r4, r5, r6, lr}
 8024f46:	4d0d      	ldr	r5, [pc, #52]	; (8024f7c <__libc_init_array+0x38>)
 8024f48:	4c0d      	ldr	r4, [pc, #52]	; (8024f80 <__libc_init_array+0x3c>)
 8024f4a:	1b64      	subs	r4, r4, r5
 8024f4c:	10a4      	asrs	r4, r4, #2
 8024f4e:	2600      	movs	r6, #0
 8024f50:	42a6      	cmp	r6, r4
 8024f52:	d109      	bne.n	8024f68 <__libc_init_array+0x24>
 8024f54:	4d0b      	ldr	r5, [pc, #44]	; (8024f84 <__libc_init_array+0x40>)
 8024f56:	4c0c      	ldr	r4, [pc, #48]	; (8024f88 <__libc_init_array+0x44>)
 8024f58:	f001 fa16 	bl	8026388 <_init>
 8024f5c:	1b64      	subs	r4, r4, r5
 8024f5e:	10a4      	asrs	r4, r4, #2
 8024f60:	2600      	movs	r6, #0
 8024f62:	42a6      	cmp	r6, r4
 8024f64:	d105      	bne.n	8024f72 <__libc_init_array+0x2e>
 8024f66:	bd70      	pop	{r4, r5, r6, pc}
 8024f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8024f6c:	4798      	blx	r3
 8024f6e:	3601      	adds	r6, #1
 8024f70:	e7ee      	b.n	8024f50 <__libc_init_array+0xc>
 8024f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8024f76:	4798      	blx	r3
 8024f78:	3601      	adds	r6, #1
 8024f7a:	e7f2      	b.n	8024f62 <__libc_init_array+0x1e>
 8024f7c:	08075964 	.word	0x08075964
 8024f80:	08075964 	.word	0x08075964
 8024f84:	08075964 	.word	0x08075964
 8024f88:	08075968 	.word	0x08075968

08024f8c <__retarget_lock_init_recursive>:
 8024f8c:	4770      	bx	lr

08024f8e <__retarget_lock_acquire_recursive>:
 8024f8e:	4770      	bx	lr

08024f90 <__retarget_lock_release>:
 8024f90:	4770      	bx	lr

08024f92 <__retarget_lock_release_recursive>:
 8024f92:	4770      	bx	lr

08024f94 <malloc>:
 8024f94:	4b02      	ldr	r3, [pc, #8]	; (8024fa0 <malloc+0xc>)
 8024f96:	4601      	mov	r1, r0
 8024f98:	6818      	ldr	r0, [r3, #0]
 8024f9a:	f000 b88b 	b.w	80250b4 <_malloc_r>
 8024f9e:	bf00      	nop
 8024fa0:	2000001c 	.word	0x2000001c

08024fa4 <free>:
 8024fa4:	4b02      	ldr	r3, [pc, #8]	; (8024fb0 <free+0xc>)
 8024fa6:	4601      	mov	r1, r0
 8024fa8:	6818      	ldr	r0, [r3, #0]
 8024faa:	f000 b833 	b.w	8025014 <_free_r>
 8024fae:	bf00      	nop
 8024fb0:	2000001c 	.word	0x2000001c

08024fb4 <memcpy>:
 8024fb4:	440a      	add	r2, r1
 8024fb6:	4291      	cmp	r1, r2
 8024fb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8024fbc:	d100      	bne.n	8024fc0 <memcpy+0xc>
 8024fbe:	4770      	bx	lr
 8024fc0:	b510      	push	{r4, lr}
 8024fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024fca:	4291      	cmp	r1, r2
 8024fcc:	d1f9      	bne.n	8024fc2 <memcpy+0xe>
 8024fce:	bd10      	pop	{r4, pc}

08024fd0 <memmove>:
 8024fd0:	4288      	cmp	r0, r1
 8024fd2:	b510      	push	{r4, lr}
 8024fd4:	eb01 0402 	add.w	r4, r1, r2
 8024fd8:	d902      	bls.n	8024fe0 <memmove+0x10>
 8024fda:	4284      	cmp	r4, r0
 8024fdc:	4623      	mov	r3, r4
 8024fde:	d807      	bhi.n	8024ff0 <memmove+0x20>
 8024fe0:	1e43      	subs	r3, r0, #1
 8024fe2:	42a1      	cmp	r1, r4
 8024fe4:	d008      	beq.n	8024ff8 <memmove+0x28>
 8024fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024fea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024fee:	e7f8      	b.n	8024fe2 <memmove+0x12>
 8024ff0:	4402      	add	r2, r0
 8024ff2:	4601      	mov	r1, r0
 8024ff4:	428a      	cmp	r2, r1
 8024ff6:	d100      	bne.n	8024ffa <memmove+0x2a>
 8024ff8:	bd10      	pop	{r4, pc}
 8024ffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024ffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025002:	e7f7      	b.n	8024ff4 <memmove+0x24>

08025004 <memset>:
 8025004:	4402      	add	r2, r0
 8025006:	4603      	mov	r3, r0
 8025008:	4293      	cmp	r3, r2
 802500a:	d100      	bne.n	802500e <memset+0xa>
 802500c:	4770      	bx	lr
 802500e:	f803 1b01 	strb.w	r1, [r3], #1
 8025012:	e7f9      	b.n	8025008 <memset+0x4>

08025014 <_free_r>:
 8025014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025016:	2900      	cmp	r1, #0
 8025018:	d048      	beq.n	80250ac <_free_r+0x98>
 802501a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802501e:	9001      	str	r0, [sp, #4]
 8025020:	2b00      	cmp	r3, #0
 8025022:	f1a1 0404 	sub.w	r4, r1, #4
 8025026:	bfb8      	it	lt
 8025028:	18e4      	addlt	r4, r4, r3
 802502a:	f000 ff6b 	bl	8025f04 <__malloc_lock>
 802502e:	4a20      	ldr	r2, [pc, #128]	; (80250b0 <_free_r+0x9c>)
 8025030:	9801      	ldr	r0, [sp, #4]
 8025032:	6813      	ldr	r3, [r2, #0]
 8025034:	4615      	mov	r5, r2
 8025036:	b933      	cbnz	r3, 8025046 <_free_r+0x32>
 8025038:	6063      	str	r3, [r4, #4]
 802503a:	6014      	str	r4, [r2, #0]
 802503c:	b003      	add	sp, #12
 802503e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025042:	f000 bf65 	b.w	8025f10 <__malloc_unlock>
 8025046:	42a3      	cmp	r3, r4
 8025048:	d90b      	bls.n	8025062 <_free_r+0x4e>
 802504a:	6821      	ldr	r1, [r4, #0]
 802504c:	1862      	adds	r2, r4, r1
 802504e:	4293      	cmp	r3, r2
 8025050:	bf04      	itt	eq
 8025052:	681a      	ldreq	r2, [r3, #0]
 8025054:	685b      	ldreq	r3, [r3, #4]
 8025056:	6063      	str	r3, [r4, #4]
 8025058:	bf04      	itt	eq
 802505a:	1852      	addeq	r2, r2, r1
 802505c:	6022      	streq	r2, [r4, #0]
 802505e:	602c      	str	r4, [r5, #0]
 8025060:	e7ec      	b.n	802503c <_free_r+0x28>
 8025062:	461a      	mov	r2, r3
 8025064:	685b      	ldr	r3, [r3, #4]
 8025066:	b10b      	cbz	r3, 802506c <_free_r+0x58>
 8025068:	42a3      	cmp	r3, r4
 802506a:	d9fa      	bls.n	8025062 <_free_r+0x4e>
 802506c:	6811      	ldr	r1, [r2, #0]
 802506e:	1855      	adds	r5, r2, r1
 8025070:	42a5      	cmp	r5, r4
 8025072:	d10b      	bne.n	802508c <_free_r+0x78>
 8025074:	6824      	ldr	r4, [r4, #0]
 8025076:	4421      	add	r1, r4
 8025078:	1854      	adds	r4, r2, r1
 802507a:	42a3      	cmp	r3, r4
 802507c:	6011      	str	r1, [r2, #0]
 802507e:	d1dd      	bne.n	802503c <_free_r+0x28>
 8025080:	681c      	ldr	r4, [r3, #0]
 8025082:	685b      	ldr	r3, [r3, #4]
 8025084:	6053      	str	r3, [r2, #4]
 8025086:	4421      	add	r1, r4
 8025088:	6011      	str	r1, [r2, #0]
 802508a:	e7d7      	b.n	802503c <_free_r+0x28>
 802508c:	d902      	bls.n	8025094 <_free_r+0x80>
 802508e:	230c      	movs	r3, #12
 8025090:	6003      	str	r3, [r0, #0]
 8025092:	e7d3      	b.n	802503c <_free_r+0x28>
 8025094:	6825      	ldr	r5, [r4, #0]
 8025096:	1961      	adds	r1, r4, r5
 8025098:	428b      	cmp	r3, r1
 802509a:	bf04      	itt	eq
 802509c:	6819      	ldreq	r1, [r3, #0]
 802509e:	685b      	ldreq	r3, [r3, #4]
 80250a0:	6063      	str	r3, [r4, #4]
 80250a2:	bf04      	itt	eq
 80250a4:	1949      	addeq	r1, r1, r5
 80250a6:	6021      	streq	r1, [r4, #0]
 80250a8:	6054      	str	r4, [r2, #4]
 80250aa:	e7c7      	b.n	802503c <_free_r+0x28>
 80250ac:	b003      	add	sp, #12
 80250ae:	bd30      	pop	{r4, r5, pc}
 80250b0:	2004a1cc 	.word	0x2004a1cc

080250b4 <_malloc_r>:
 80250b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80250b6:	1ccd      	adds	r5, r1, #3
 80250b8:	f025 0503 	bic.w	r5, r5, #3
 80250bc:	3508      	adds	r5, #8
 80250be:	2d0c      	cmp	r5, #12
 80250c0:	bf38      	it	cc
 80250c2:	250c      	movcc	r5, #12
 80250c4:	2d00      	cmp	r5, #0
 80250c6:	4606      	mov	r6, r0
 80250c8:	db01      	blt.n	80250ce <_malloc_r+0x1a>
 80250ca:	42a9      	cmp	r1, r5
 80250cc:	d903      	bls.n	80250d6 <_malloc_r+0x22>
 80250ce:	230c      	movs	r3, #12
 80250d0:	6033      	str	r3, [r6, #0]
 80250d2:	2000      	movs	r0, #0
 80250d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80250d6:	f000 ff15 	bl	8025f04 <__malloc_lock>
 80250da:	4921      	ldr	r1, [pc, #132]	; (8025160 <_malloc_r+0xac>)
 80250dc:	680a      	ldr	r2, [r1, #0]
 80250de:	4614      	mov	r4, r2
 80250e0:	b99c      	cbnz	r4, 802510a <_malloc_r+0x56>
 80250e2:	4f20      	ldr	r7, [pc, #128]	; (8025164 <_malloc_r+0xb0>)
 80250e4:	683b      	ldr	r3, [r7, #0]
 80250e6:	b923      	cbnz	r3, 80250f2 <_malloc_r+0x3e>
 80250e8:	4621      	mov	r1, r4
 80250ea:	4630      	mov	r0, r6
 80250ec:	f000 fb2a 	bl	8025744 <_sbrk_r>
 80250f0:	6038      	str	r0, [r7, #0]
 80250f2:	4629      	mov	r1, r5
 80250f4:	4630      	mov	r0, r6
 80250f6:	f000 fb25 	bl	8025744 <_sbrk_r>
 80250fa:	1c43      	adds	r3, r0, #1
 80250fc:	d123      	bne.n	8025146 <_malloc_r+0x92>
 80250fe:	230c      	movs	r3, #12
 8025100:	6033      	str	r3, [r6, #0]
 8025102:	4630      	mov	r0, r6
 8025104:	f000 ff04 	bl	8025f10 <__malloc_unlock>
 8025108:	e7e3      	b.n	80250d2 <_malloc_r+0x1e>
 802510a:	6823      	ldr	r3, [r4, #0]
 802510c:	1b5b      	subs	r3, r3, r5
 802510e:	d417      	bmi.n	8025140 <_malloc_r+0x8c>
 8025110:	2b0b      	cmp	r3, #11
 8025112:	d903      	bls.n	802511c <_malloc_r+0x68>
 8025114:	6023      	str	r3, [r4, #0]
 8025116:	441c      	add	r4, r3
 8025118:	6025      	str	r5, [r4, #0]
 802511a:	e004      	b.n	8025126 <_malloc_r+0x72>
 802511c:	6863      	ldr	r3, [r4, #4]
 802511e:	42a2      	cmp	r2, r4
 8025120:	bf0c      	ite	eq
 8025122:	600b      	streq	r3, [r1, #0]
 8025124:	6053      	strne	r3, [r2, #4]
 8025126:	4630      	mov	r0, r6
 8025128:	f000 fef2 	bl	8025f10 <__malloc_unlock>
 802512c:	f104 000b 	add.w	r0, r4, #11
 8025130:	1d23      	adds	r3, r4, #4
 8025132:	f020 0007 	bic.w	r0, r0, #7
 8025136:	1ac2      	subs	r2, r0, r3
 8025138:	d0cc      	beq.n	80250d4 <_malloc_r+0x20>
 802513a:	1a1b      	subs	r3, r3, r0
 802513c:	50a3      	str	r3, [r4, r2]
 802513e:	e7c9      	b.n	80250d4 <_malloc_r+0x20>
 8025140:	4622      	mov	r2, r4
 8025142:	6864      	ldr	r4, [r4, #4]
 8025144:	e7cc      	b.n	80250e0 <_malloc_r+0x2c>
 8025146:	1cc4      	adds	r4, r0, #3
 8025148:	f024 0403 	bic.w	r4, r4, #3
 802514c:	42a0      	cmp	r0, r4
 802514e:	d0e3      	beq.n	8025118 <_malloc_r+0x64>
 8025150:	1a21      	subs	r1, r4, r0
 8025152:	4630      	mov	r0, r6
 8025154:	f000 faf6 	bl	8025744 <_sbrk_r>
 8025158:	3001      	adds	r0, #1
 802515a:	d1dd      	bne.n	8025118 <_malloc_r+0x64>
 802515c:	e7cf      	b.n	80250fe <_malloc_r+0x4a>
 802515e:	bf00      	nop
 8025160:	2004a1cc 	.word	0x2004a1cc
 8025164:	2004a1d0 	.word	0x2004a1d0

08025168 <__sfputc_r>:
 8025168:	6893      	ldr	r3, [r2, #8]
 802516a:	3b01      	subs	r3, #1
 802516c:	2b00      	cmp	r3, #0
 802516e:	b410      	push	{r4}
 8025170:	6093      	str	r3, [r2, #8]
 8025172:	da08      	bge.n	8025186 <__sfputc_r+0x1e>
 8025174:	6994      	ldr	r4, [r2, #24]
 8025176:	42a3      	cmp	r3, r4
 8025178:	db01      	blt.n	802517e <__sfputc_r+0x16>
 802517a:	290a      	cmp	r1, #10
 802517c:	d103      	bne.n	8025186 <__sfputc_r+0x1e>
 802517e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025182:	f000 bb81 	b.w	8025888 <__swbuf_r>
 8025186:	6813      	ldr	r3, [r2, #0]
 8025188:	1c58      	adds	r0, r3, #1
 802518a:	6010      	str	r0, [r2, #0]
 802518c:	7019      	strb	r1, [r3, #0]
 802518e:	4608      	mov	r0, r1
 8025190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025194:	4770      	bx	lr

08025196 <__sfputs_r>:
 8025196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025198:	4606      	mov	r6, r0
 802519a:	460f      	mov	r7, r1
 802519c:	4614      	mov	r4, r2
 802519e:	18d5      	adds	r5, r2, r3
 80251a0:	42ac      	cmp	r4, r5
 80251a2:	d101      	bne.n	80251a8 <__sfputs_r+0x12>
 80251a4:	2000      	movs	r0, #0
 80251a6:	e007      	b.n	80251b8 <__sfputs_r+0x22>
 80251a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80251ac:	463a      	mov	r2, r7
 80251ae:	4630      	mov	r0, r6
 80251b0:	f7ff ffda 	bl	8025168 <__sfputc_r>
 80251b4:	1c43      	adds	r3, r0, #1
 80251b6:	d1f3      	bne.n	80251a0 <__sfputs_r+0xa>
 80251b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080251bc <_vfiprintf_r>:
 80251bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251c0:	460d      	mov	r5, r1
 80251c2:	b09d      	sub	sp, #116	; 0x74
 80251c4:	4614      	mov	r4, r2
 80251c6:	4698      	mov	r8, r3
 80251c8:	4606      	mov	r6, r0
 80251ca:	b118      	cbz	r0, 80251d4 <_vfiprintf_r+0x18>
 80251cc:	6983      	ldr	r3, [r0, #24]
 80251ce:	b90b      	cbnz	r3, 80251d4 <_vfiprintf_r+0x18>
 80251d0:	f000 fd96 	bl	8025d00 <__sinit>
 80251d4:	4b89      	ldr	r3, [pc, #548]	; (80253fc <_vfiprintf_r+0x240>)
 80251d6:	429d      	cmp	r5, r3
 80251d8:	d11b      	bne.n	8025212 <_vfiprintf_r+0x56>
 80251da:	6875      	ldr	r5, [r6, #4]
 80251dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80251de:	07d9      	lsls	r1, r3, #31
 80251e0:	d405      	bmi.n	80251ee <_vfiprintf_r+0x32>
 80251e2:	89ab      	ldrh	r3, [r5, #12]
 80251e4:	059a      	lsls	r2, r3, #22
 80251e6:	d402      	bmi.n	80251ee <_vfiprintf_r+0x32>
 80251e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80251ea:	f7ff fed0 	bl	8024f8e <__retarget_lock_acquire_recursive>
 80251ee:	89ab      	ldrh	r3, [r5, #12]
 80251f0:	071b      	lsls	r3, r3, #28
 80251f2:	d501      	bpl.n	80251f8 <_vfiprintf_r+0x3c>
 80251f4:	692b      	ldr	r3, [r5, #16]
 80251f6:	b9eb      	cbnz	r3, 8025234 <_vfiprintf_r+0x78>
 80251f8:	4629      	mov	r1, r5
 80251fa:	4630      	mov	r0, r6
 80251fc:	f000 fb96 	bl	802592c <__swsetup_r>
 8025200:	b1c0      	cbz	r0, 8025234 <_vfiprintf_r+0x78>
 8025202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025204:	07dc      	lsls	r4, r3, #31
 8025206:	d50e      	bpl.n	8025226 <_vfiprintf_r+0x6a>
 8025208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802520c:	b01d      	add	sp, #116	; 0x74
 802520e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025212:	4b7b      	ldr	r3, [pc, #492]	; (8025400 <_vfiprintf_r+0x244>)
 8025214:	429d      	cmp	r5, r3
 8025216:	d101      	bne.n	802521c <_vfiprintf_r+0x60>
 8025218:	68b5      	ldr	r5, [r6, #8]
 802521a:	e7df      	b.n	80251dc <_vfiprintf_r+0x20>
 802521c:	4b79      	ldr	r3, [pc, #484]	; (8025404 <_vfiprintf_r+0x248>)
 802521e:	429d      	cmp	r5, r3
 8025220:	bf08      	it	eq
 8025222:	68f5      	ldreq	r5, [r6, #12]
 8025224:	e7da      	b.n	80251dc <_vfiprintf_r+0x20>
 8025226:	89ab      	ldrh	r3, [r5, #12]
 8025228:	0598      	lsls	r0, r3, #22
 802522a:	d4ed      	bmi.n	8025208 <_vfiprintf_r+0x4c>
 802522c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802522e:	f7ff feb0 	bl	8024f92 <__retarget_lock_release_recursive>
 8025232:	e7e9      	b.n	8025208 <_vfiprintf_r+0x4c>
 8025234:	2300      	movs	r3, #0
 8025236:	9309      	str	r3, [sp, #36]	; 0x24
 8025238:	2320      	movs	r3, #32
 802523a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802523e:	f8cd 800c 	str.w	r8, [sp, #12]
 8025242:	2330      	movs	r3, #48	; 0x30
 8025244:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8025408 <_vfiprintf_r+0x24c>
 8025248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802524c:	f04f 0901 	mov.w	r9, #1
 8025250:	4623      	mov	r3, r4
 8025252:	469a      	mov	sl, r3
 8025254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025258:	b10a      	cbz	r2, 802525e <_vfiprintf_r+0xa2>
 802525a:	2a25      	cmp	r2, #37	; 0x25
 802525c:	d1f9      	bne.n	8025252 <_vfiprintf_r+0x96>
 802525e:	ebba 0b04 	subs.w	fp, sl, r4
 8025262:	d00b      	beq.n	802527c <_vfiprintf_r+0xc0>
 8025264:	465b      	mov	r3, fp
 8025266:	4622      	mov	r2, r4
 8025268:	4629      	mov	r1, r5
 802526a:	4630      	mov	r0, r6
 802526c:	f7ff ff93 	bl	8025196 <__sfputs_r>
 8025270:	3001      	adds	r0, #1
 8025272:	f000 80aa 	beq.w	80253ca <_vfiprintf_r+0x20e>
 8025276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025278:	445a      	add	r2, fp
 802527a:	9209      	str	r2, [sp, #36]	; 0x24
 802527c:	f89a 3000 	ldrb.w	r3, [sl]
 8025280:	2b00      	cmp	r3, #0
 8025282:	f000 80a2 	beq.w	80253ca <_vfiprintf_r+0x20e>
 8025286:	2300      	movs	r3, #0
 8025288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802528c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025290:	f10a 0a01 	add.w	sl, sl, #1
 8025294:	9304      	str	r3, [sp, #16]
 8025296:	9307      	str	r3, [sp, #28]
 8025298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802529c:	931a      	str	r3, [sp, #104]	; 0x68
 802529e:	4654      	mov	r4, sl
 80252a0:	2205      	movs	r2, #5
 80252a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80252a6:	4858      	ldr	r0, [pc, #352]	; (8025408 <_vfiprintf_r+0x24c>)
 80252a8:	f7da ffba 	bl	8000220 <memchr>
 80252ac:	9a04      	ldr	r2, [sp, #16]
 80252ae:	b9d8      	cbnz	r0, 80252e8 <_vfiprintf_r+0x12c>
 80252b0:	06d1      	lsls	r1, r2, #27
 80252b2:	bf44      	itt	mi
 80252b4:	2320      	movmi	r3, #32
 80252b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80252ba:	0713      	lsls	r3, r2, #28
 80252bc:	bf44      	itt	mi
 80252be:	232b      	movmi	r3, #43	; 0x2b
 80252c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80252c4:	f89a 3000 	ldrb.w	r3, [sl]
 80252c8:	2b2a      	cmp	r3, #42	; 0x2a
 80252ca:	d015      	beq.n	80252f8 <_vfiprintf_r+0x13c>
 80252cc:	9a07      	ldr	r2, [sp, #28]
 80252ce:	4654      	mov	r4, sl
 80252d0:	2000      	movs	r0, #0
 80252d2:	f04f 0c0a 	mov.w	ip, #10
 80252d6:	4621      	mov	r1, r4
 80252d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80252dc:	3b30      	subs	r3, #48	; 0x30
 80252de:	2b09      	cmp	r3, #9
 80252e0:	d94e      	bls.n	8025380 <_vfiprintf_r+0x1c4>
 80252e2:	b1b0      	cbz	r0, 8025312 <_vfiprintf_r+0x156>
 80252e4:	9207      	str	r2, [sp, #28]
 80252e6:	e014      	b.n	8025312 <_vfiprintf_r+0x156>
 80252e8:	eba0 0308 	sub.w	r3, r0, r8
 80252ec:	fa09 f303 	lsl.w	r3, r9, r3
 80252f0:	4313      	orrs	r3, r2
 80252f2:	9304      	str	r3, [sp, #16]
 80252f4:	46a2      	mov	sl, r4
 80252f6:	e7d2      	b.n	802529e <_vfiprintf_r+0xe2>
 80252f8:	9b03      	ldr	r3, [sp, #12]
 80252fa:	1d19      	adds	r1, r3, #4
 80252fc:	681b      	ldr	r3, [r3, #0]
 80252fe:	9103      	str	r1, [sp, #12]
 8025300:	2b00      	cmp	r3, #0
 8025302:	bfbb      	ittet	lt
 8025304:	425b      	neglt	r3, r3
 8025306:	f042 0202 	orrlt.w	r2, r2, #2
 802530a:	9307      	strge	r3, [sp, #28]
 802530c:	9307      	strlt	r3, [sp, #28]
 802530e:	bfb8      	it	lt
 8025310:	9204      	strlt	r2, [sp, #16]
 8025312:	7823      	ldrb	r3, [r4, #0]
 8025314:	2b2e      	cmp	r3, #46	; 0x2e
 8025316:	d10c      	bne.n	8025332 <_vfiprintf_r+0x176>
 8025318:	7863      	ldrb	r3, [r4, #1]
 802531a:	2b2a      	cmp	r3, #42	; 0x2a
 802531c:	d135      	bne.n	802538a <_vfiprintf_r+0x1ce>
 802531e:	9b03      	ldr	r3, [sp, #12]
 8025320:	1d1a      	adds	r2, r3, #4
 8025322:	681b      	ldr	r3, [r3, #0]
 8025324:	9203      	str	r2, [sp, #12]
 8025326:	2b00      	cmp	r3, #0
 8025328:	bfb8      	it	lt
 802532a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802532e:	3402      	adds	r4, #2
 8025330:	9305      	str	r3, [sp, #20]
 8025332:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8025418 <_vfiprintf_r+0x25c>
 8025336:	7821      	ldrb	r1, [r4, #0]
 8025338:	2203      	movs	r2, #3
 802533a:	4650      	mov	r0, sl
 802533c:	f7da ff70 	bl	8000220 <memchr>
 8025340:	b140      	cbz	r0, 8025354 <_vfiprintf_r+0x198>
 8025342:	2340      	movs	r3, #64	; 0x40
 8025344:	eba0 000a 	sub.w	r0, r0, sl
 8025348:	fa03 f000 	lsl.w	r0, r3, r0
 802534c:	9b04      	ldr	r3, [sp, #16]
 802534e:	4303      	orrs	r3, r0
 8025350:	3401      	adds	r4, #1
 8025352:	9304      	str	r3, [sp, #16]
 8025354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025358:	482c      	ldr	r0, [pc, #176]	; (802540c <_vfiprintf_r+0x250>)
 802535a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802535e:	2206      	movs	r2, #6
 8025360:	f7da ff5e 	bl	8000220 <memchr>
 8025364:	2800      	cmp	r0, #0
 8025366:	d03f      	beq.n	80253e8 <_vfiprintf_r+0x22c>
 8025368:	4b29      	ldr	r3, [pc, #164]	; (8025410 <_vfiprintf_r+0x254>)
 802536a:	bb1b      	cbnz	r3, 80253b4 <_vfiprintf_r+0x1f8>
 802536c:	9b03      	ldr	r3, [sp, #12]
 802536e:	3307      	adds	r3, #7
 8025370:	f023 0307 	bic.w	r3, r3, #7
 8025374:	3308      	adds	r3, #8
 8025376:	9303      	str	r3, [sp, #12]
 8025378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802537a:	443b      	add	r3, r7
 802537c:	9309      	str	r3, [sp, #36]	; 0x24
 802537e:	e767      	b.n	8025250 <_vfiprintf_r+0x94>
 8025380:	fb0c 3202 	mla	r2, ip, r2, r3
 8025384:	460c      	mov	r4, r1
 8025386:	2001      	movs	r0, #1
 8025388:	e7a5      	b.n	80252d6 <_vfiprintf_r+0x11a>
 802538a:	2300      	movs	r3, #0
 802538c:	3401      	adds	r4, #1
 802538e:	9305      	str	r3, [sp, #20]
 8025390:	4619      	mov	r1, r3
 8025392:	f04f 0c0a 	mov.w	ip, #10
 8025396:	4620      	mov	r0, r4
 8025398:	f810 2b01 	ldrb.w	r2, [r0], #1
 802539c:	3a30      	subs	r2, #48	; 0x30
 802539e:	2a09      	cmp	r2, #9
 80253a0:	d903      	bls.n	80253aa <_vfiprintf_r+0x1ee>
 80253a2:	2b00      	cmp	r3, #0
 80253a4:	d0c5      	beq.n	8025332 <_vfiprintf_r+0x176>
 80253a6:	9105      	str	r1, [sp, #20]
 80253a8:	e7c3      	b.n	8025332 <_vfiprintf_r+0x176>
 80253aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80253ae:	4604      	mov	r4, r0
 80253b0:	2301      	movs	r3, #1
 80253b2:	e7f0      	b.n	8025396 <_vfiprintf_r+0x1da>
 80253b4:	ab03      	add	r3, sp, #12
 80253b6:	9300      	str	r3, [sp, #0]
 80253b8:	462a      	mov	r2, r5
 80253ba:	4b16      	ldr	r3, [pc, #88]	; (8025414 <_vfiprintf_r+0x258>)
 80253bc:	a904      	add	r1, sp, #16
 80253be:	4630      	mov	r0, r6
 80253c0:	f3af 8000 	nop.w
 80253c4:	4607      	mov	r7, r0
 80253c6:	1c78      	adds	r0, r7, #1
 80253c8:	d1d6      	bne.n	8025378 <_vfiprintf_r+0x1bc>
 80253ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80253cc:	07d9      	lsls	r1, r3, #31
 80253ce:	d405      	bmi.n	80253dc <_vfiprintf_r+0x220>
 80253d0:	89ab      	ldrh	r3, [r5, #12]
 80253d2:	059a      	lsls	r2, r3, #22
 80253d4:	d402      	bmi.n	80253dc <_vfiprintf_r+0x220>
 80253d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80253d8:	f7ff fddb 	bl	8024f92 <__retarget_lock_release_recursive>
 80253dc:	89ab      	ldrh	r3, [r5, #12]
 80253de:	065b      	lsls	r3, r3, #25
 80253e0:	f53f af12 	bmi.w	8025208 <_vfiprintf_r+0x4c>
 80253e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80253e6:	e711      	b.n	802520c <_vfiprintf_r+0x50>
 80253e8:	ab03      	add	r3, sp, #12
 80253ea:	9300      	str	r3, [sp, #0]
 80253ec:	462a      	mov	r2, r5
 80253ee:	4b09      	ldr	r3, [pc, #36]	; (8025414 <_vfiprintf_r+0x258>)
 80253f0:	a904      	add	r1, sp, #16
 80253f2:	4630      	mov	r0, r6
 80253f4:	f000 f880 	bl	80254f8 <_printf_i>
 80253f8:	e7e4      	b.n	80253c4 <_vfiprintf_r+0x208>
 80253fa:	bf00      	nop
 80253fc:	0807591c 	.word	0x0807591c
 8025400:	0807593c 	.word	0x0807593c
 8025404:	080758fc 	.word	0x080758fc
 8025408:	080758c8 	.word	0x080758c8
 802540c:	080758d2 	.word	0x080758d2
 8025410:	00000000 	.word	0x00000000
 8025414:	08025197 	.word	0x08025197
 8025418:	080758ce 	.word	0x080758ce

0802541c <_printf_common>:
 802541c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025420:	4616      	mov	r6, r2
 8025422:	4699      	mov	r9, r3
 8025424:	688a      	ldr	r2, [r1, #8]
 8025426:	690b      	ldr	r3, [r1, #16]
 8025428:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802542c:	4293      	cmp	r3, r2
 802542e:	bfb8      	it	lt
 8025430:	4613      	movlt	r3, r2
 8025432:	6033      	str	r3, [r6, #0]
 8025434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025438:	4607      	mov	r7, r0
 802543a:	460c      	mov	r4, r1
 802543c:	b10a      	cbz	r2, 8025442 <_printf_common+0x26>
 802543e:	3301      	adds	r3, #1
 8025440:	6033      	str	r3, [r6, #0]
 8025442:	6823      	ldr	r3, [r4, #0]
 8025444:	0699      	lsls	r1, r3, #26
 8025446:	bf42      	ittt	mi
 8025448:	6833      	ldrmi	r3, [r6, #0]
 802544a:	3302      	addmi	r3, #2
 802544c:	6033      	strmi	r3, [r6, #0]
 802544e:	6825      	ldr	r5, [r4, #0]
 8025450:	f015 0506 	ands.w	r5, r5, #6
 8025454:	d106      	bne.n	8025464 <_printf_common+0x48>
 8025456:	f104 0a19 	add.w	sl, r4, #25
 802545a:	68e3      	ldr	r3, [r4, #12]
 802545c:	6832      	ldr	r2, [r6, #0]
 802545e:	1a9b      	subs	r3, r3, r2
 8025460:	42ab      	cmp	r3, r5
 8025462:	dc26      	bgt.n	80254b2 <_printf_common+0x96>
 8025464:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025468:	1e13      	subs	r3, r2, #0
 802546a:	6822      	ldr	r2, [r4, #0]
 802546c:	bf18      	it	ne
 802546e:	2301      	movne	r3, #1
 8025470:	0692      	lsls	r2, r2, #26
 8025472:	d42b      	bmi.n	80254cc <_printf_common+0xb0>
 8025474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025478:	4649      	mov	r1, r9
 802547a:	4638      	mov	r0, r7
 802547c:	47c0      	blx	r8
 802547e:	3001      	adds	r0, #1
 8025480:	d01e      	beq.n	80254c0 <_printf_common+0xa4>
 8025482:	6823      	ldr	r3, [r4, #0]
 8025484:	68e5      	ldr	r5, [r4, #12]
 8025486:	6832      	ldr	r2, [r6, #0]
 8025488:	f003 0306 	and.w	r3, r3, #6
 802548c:	2b04      	cmp	r3, #4
 802548e:	bf08      	it	eq
 8025490:	1aad      	subeq	r5, r5, r2
 8025492:	68a3      	ldr	r3, [r4, #8]
 8025494:	6922      	ldr	r2, [r4, #16]
 8025496:	bf0c      	ite	eq
 8025498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802549c:	2500      	movne	r5, #0
 802549e:	4293      	cmp	r3, r2
 80254a0:	bfc4      	itt	gt
 80254a2:	1a9b      	subgt	r3, r3, r2
 80254a4:	18ed      	addgt	r5, r5, r3
 80254a6:	2600      	movs	r6, #0
 80254a8:	341a      	adds	r4, #26
 80254aa:	42b5      	cmp	r5, r6
 80254ac:	d11a      	bne.n	80254e4 <_printf_common+0xc8>
 80254ae:	2000      	movs	r0, #0
 80254b0:	e008      	b.n	80254c4 <_printf_common+0xa8>
 80254b2:	2301      	movs	r3, #1
 80254b4:	4652      	mov	r2, sl
 80254b6:	4649      	mov	r1, r9
 80254b8:	4638      	mov	r0, r7
 80254ba:	47c0      	blx	r8
 80254bc:	3001      	adds	r0, #1
 80254be:	d103      	bne.n	80254c8 <_printf_common+0xac>
 80254c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80254c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80254c8:	3501      	adds	r5, #1
 80254ca:	e7c6      	b.n	802545a <_printf_common+0x3e>
 80254cc:	18e1      	adds	r1, r4, r3
 80254ce:	1c5a      	adds	r2, r3, #1
 80254d0:	2030      	movs	r0, #48	; 0x30
 80254d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80254d6:	4422      	add	r2, r4
 80254d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80254dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80254e0:	3302      	adds	r3, #2
 80254e2:	e7c7      	b.n	8025474 <_printf_common+0x58>
 80254e4:	2301      	movs	r3, #1
 80254e6:	4622      	mov	r2, r4
 80254e8:	4649      	mov	r1, r9
 80254ea:	4638      	mov	r0, r7
 80254ec:	47c0      	blx	r8
 80254ee:	3001      	adds	r0, #1
 80254f0:	d0e6      	beq.n	80254c0 <_printf_common+0xa4>
 80254f2:	3601      	adds	r6, #1
 80254f4:	e7d9      	b.n	80254aa <_printf_common+0x8e>
	...

080254f8 <_printf_i>:
 80254f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80254fc:	460c      	mov	r4, r1
 80254fe:	4691      	mov	r9, r2
 8025500:	7e27      	ldrb	r7, [r4, #24]
 8025502:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025504:	2f78      	cmp	r7, #120	; 0x78
 8025506:	4680      	mov	r8, r0
 8025508:	469a      	mov	sl, r3
 802550a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802550e:	d807      	bhi.n	8025520 <_printf_i+0x28>
 8025510:	2f62      	cmp	r7, #98	; 0x62
 8025512:	d80a      	bhi.n	802552a <_printf_i+0x32>
 8025514:	2f00      	cmp	r7, #0
 8025516:	f000 80d8 	beq.w	80256ca <_printf_i+0x1d2>
 802551a:	2f58      	cmp	r7, #88	; 0x58
 802551c:	f000 80a3 	beq.w	8025666 <_printf_i+0x16e>
 8025520:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8025524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025528:	e03a      	b.n	80255a0 <_printf_i+0xa8>
 802552a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802552e:	2b15      	cmp	r3, #21
 8025530:	d8f6      	bhi.n	8025520 <_printf_i+0x28>
 8025532:	a001      	add	r0, pc, #4	; (adr r0, 8025538 <_printf_i+0x40>)
 8025534:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8025538:	08025591 	.word	0x08025591
 802553c:	080255a5 	.word	0x080255a5
 8025540:	08025521 	.word	0x08025521
 8025544:	08025521 	.word	0x08025521
 8025548:	08025521 	.word	0x08025521
 802554c:	08025521 	.word	0x08025521
 8025550:	080255a5 	.word	0x080255a5
 8025554:	08025521 	.word	0x08025521
 8025558:	08025521 	.word	0x08025521
 802555c:	08025521 	.word	0x08025521
 8025560:	08025521 	.word	0x08025521
 8025564:	080256b1 	.word	0x080256b1
 8025568:	080255d5 	.word	0x080255d5
 802556c:	08025693 	.word	0x08025693
 8025570:	08025521 	.word	0x08025521
 8025574:	08025521 	.word	0x08025521
 8025578:	080256d3 	.word	0x080256d3
 802557c:	08025521 	.word	0x08025521
 8025580:	080255d5 	.word	0x080255d5
 8025584:	08025521 	.word	0x08025521
 8025588:	08025521 	.word	0x08025521
 802558c:	0802569b 	.word	0x0802569b
 8025590:	680b      	ldr	r3, [r1, #0]
 8025592:	1d1a      	adds	r2, r3, #4
 8025594:	681b      	ldr	r3, [r3, #0]
 8025596:	600a      	str	r2, [r1, #0]
 8025598:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802559c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80255a0:	2301      	movs	r3, #1
 80255a2:	e0a3      	b.n	80256ec <_printf_i+0x1f4>
 80255a4:	6825      	ldr	r5, [r4, #0]
 80255a6:	6808      	ldr	r0, [r1, #0]
 80255a8:	062e      	lsls	r6, r5, #24
 80255aa:	f100 0304 	add.w	r3, r0, #4
 80255ae:	d50a      	bpl.n	80255c6 <_printf_i+0xce>
 80255b0:	6805      	ldr	r5, [r0, #0]
 80255b2:	600b      	str	r3, [r1, #0]
 80255b4:	2d00      	cmp	r5, #0
 80255b6:	da03      	bge.n	80255c0 <_printf_i+0xc8>
 80255b8:	232d      	movs	r3, #45	; 0x2d
 80255ba:	426d      	negs	r5, r5
 80255bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80255c0:	485e      	ldr	r0, [pc, #376]	; (802573c <_printf_i+0x244>)
 80255c2:	230a      	movs	r3, #10
 80255c4:	e019      	b.n	80255fa <_printf_i+0x102>
 80255c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80255ca:	6805      	ldr	r5, [r0, #0]
 80255cc:	600b      	str	r3, [r1, #0]
 80255ce:	bf18      	it	ne
 80255d0:	b22d      	sxthne	r5, r5
 80255d2:	e7ef      	b.n	80255b4 <_printf_i+0xbc>
 80255d4:	680b      	ldr	r3, [r1, #0]
 80255d6:	6825      	ldr	r5, [r4, #0]
 80255d8:	1d18      	adds	r0, r3, #4
 80255da:	6008      	str	r0, [r1, #0]
 80255dc:	0628      	lsls	r0, r5, #24
 80255de:	d501      	bpl.n	80255e4 <_printf_i+0xec>
 80255e0:	681d      	ldr	r5, [r3, #0]
 80255e2:	e002      	b.n	80255ea <_printf_i+0xf2>
 80255e4:	0669      	lsls	r1, r5, #25
 80255e6:	d5fb      	bpl.n	80255e0 <_printf_i+0xe8>
 80255e8:	881d      	ldrh	r5, [r3, #0]
 80255ea:	4854      	ldr	r0, [pc, #336]	; (802573c <_printf_i+0x244>)
 80255ec:	2f6f      	cmp	r7, #111	; 0x6f
 80255ee:	bf0c      	ite	eq
 80255f0:	2308      	moveq	r3, #8
 80255f2:	230a      	movne	r3, #10
 80255f4:	2100      	movs	r1, #0
 80255f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80255fa:	6866      	ldr	r6, [r4, #4]
 80255fc:	60a6      	str	r6, [r4, #8]
 80255fe:	2e00      	cmp	r6, #0
 8025600:	bfa2      	ittt	ge
 8025602:	6821      	ldrge	r1, [r4, #0]
 8025604:	f021 0104 	bicge.w	r1, r1, #4
 8025608:	6021      	strge	r1, [r4, #0]
 802560a:	b90d      	cbnz	r5, 8025610 <_printf_i+0x118>
 802560c:	2e00      	cmp	r6, #0
 802560e:	d04d      	beq.n	80256ac <_printf_i+0x1b4>
 8025610:	4616      	mov	r6, r2
 8025612:	fbb5 f1f3 	udiv	r1, r5, r3
 8025616:	fb03 5711 	mls	r7, r3, r1, r5
 802561a:	5dc7      	ldrb	r7, [r0, r7]
 802561c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025620:	462f      	mov	r7, r5
 8025622:	42bb      	cmp	r3, r7
 8025624:	460d      	mov	r5, r1
 8025626:	d9f4      	bls.n	8025612 <_printf_i+0x11a>
 8025628:	2b08      	cmp	r3, #8
 802562a:	d10b      	bne.n	8025644 <_printf_i+0x14c>
 802562c:	6823      	ldr	r3, [r4, #0]
 802562e:	07df      	lsls	r7, r3, #31
 8025630:	d508      	bpl.n	8025644 <_printf_i+0x14c>
 8025632:	6923      	ldr	r3, [r4, #16]
 8025634:	6861      	ldr	r1, [r4, #4]
 8025636:	4299      	cmp	r1, r3
 8025638:	bfde      	ittt	le
 802563a:	2330      	movle	r3, #48	; 0x30
 802563c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025640:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8025644:	1b92      	subs	r2, r2, r6
 8025646:	6122      	str	r2, [r4, #16]
 8025648:	f8cd a000 	str.w	sl, [sp]
 802564c:	464b      	mov	r3, r9
 802564e:	aa03      	add	r2, sp, #12
 8025650:	4621      	mov	r1, r4
 8025652:	4640      	mov	r0, r8
 8025654:	f7ff fee2 	bl	802541c <_printf_common>
 8025658:	3001      	adds	r0, #1
 802565a:	d14c      	bne.n	80256f6 <_printf_i+0x1fe>
 802565c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025660:	b004      	add	sp, #16
 8025662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025666:	4835      	ldr	r0, [pc, #212]	; (802573c <_printf_i+0x244>)
 8025668:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802566c:	6823      	ldr	r3, [r4, #0]
 802566e:	680e      	ldr	r6, [r1, #0]
 8025670:	061f      	lsls	r7, r3, #24
 8025672:	f856 5b04 	ldr.w	r5, [r6], #4
 8025676:	600e      	str	r6, [r1, #0]
 8025678:	d514      	bpl.n	80256a4 <_printf_i+0x1ac>
 802567a:	07d9      	lsls	r1, r3, #31
 802567c:	bf44      	itt	mi
 802567e:	f043 0320 	orrmi.w	r3, r3, #32
 8025682:	6023      	strmi	r3, [r4, #0]
 8025684:	b91d      	cbnz	r5, 802568e <_printf_i+0x196>
 8025686:	6823      	ldr	r3, [r4, #0]
 8025688:	f023 0320 	bic.w	r3, r3, #32
 802568c:	6023      	str	r3, [r4, #0]
 802568e:	2310      	movs	r3, #16
 8025690:	e7b0      	b.n	80255f4 <_printf_i+0xfc>
 8025692:	6823      	ldr	r3, [r4, #0]
 8025694:	f043 0320 	orr.w	r3, r3, #32
 8025698:	6023      	str	r3, [r4, #0]
 802569a:	2378      	movs	r3, #120	; 0x78
 802569c:	4828      	ldr	r0, [pc, #160]	; (8025740 <_printf_i+0x248>)
 802569e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80256a2:	e7e3      	b.n	802566c <_printf_i+0x174>
 80256a4:	065e      	lsls	r6, r3, #25
 80256a6:	bf48      	it	mi
 80256a8:	b2ad      	uxthmi	r5, r5
 80256aa:	e7e6      	b.n	802567a <_printf_i+0x182>
 80256ac:	4616      	mov	r6, r2
 80256ae:	e7bb      	b.n	8025628 <_printf_i+0x130>
 80256b0:	680b      	ldr	r3, [r1, #0]
 80256b2:	6826      	ldr	r6, [r4, #0]
 80256b4:	6960      	ldr	r0, [r4, #20]
 80256b6:	1d1d      	adds	r5, r3, #4
 80256b8:	600d      	str	r5, [r1, #0]
 80256ba:	0635      	lsls	r5, r6, #24
 80256bc:	681b      	ldr	r3, [r3, #0]
 80256be:	d501      	bpl.n	80256c4 <_printf_i+0x1cc>
 80256c0:	6018      	str	r0, [r3, #0]
 80256c2:	e002      	b.n	80256ca <_printf_i+0x1d2>
 80256c4:	0671      	lsls	r1, r6, #25
 80256c6:	d5fb      	bpl.n	80256c0 <_printf_i+0x1c8>
 80256c8:	8018      	strh	r0, [r3, #0]
 80256ca:	2300      	movs	r3, #0
 80256cc:	6123      	str	r3, [r4, #16]
 80256ce:	4616      	mov	r6, r2
 80256d0:	e7ba      	b.n	8025648 <_printf_i+0x150>
 80256d2:	680b      	ldr	r3, [r1, #0]
 80256d4:	1d1a      	adds	r2, r3, #4
 80256d6:	600a      	str	r2, [r1, #0]
 80256d8:	681e      	ldr	r6, [r3, #0]
 80256da:	6862      	ldr	r2, [r4, #4]
 80256dc:	2100      	movs	r1, #0
 80256de:	4630      	mov	r0, r6
 80256e0:	f7da fd9e 	bl	8000220 <memchr>
 80256e4:	b108      	cbz	r0, 80256ea <_printf_i+0x1f2>
 80256e6:	1b80      	subs	r0, r0, r6
 80256e8:	6060      	str	r0, [r4, #4]
 80256ea:	6863      	ldr	r3, [r4, #4]
 80256ec:	6123      	str	r3, [r4, #16]
 80256ee:	2300      	movs	r3, #0
 80256f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80256f4:	e7a8      	b.n	8025648 <_printf_i+0x150>
 80256f6:	6923      	ldr	r3, [r4, #16]
 80256f8:	4632      	mov	r2, r6
 80256fa:	4649      	mov	r1, r9
 80256fc:	4640      	mov	r0, r8
 80256fe:	47d0      	blx	sl
 8025700:	3001      	adds	r0, #1
 8025702:	d0ab      	beq.n	802565c <_printf_i+0x164>
 8025704:	6823      	ldr	r3, [r4, #0]
 8025706:	079b      	lsls	r3, r3, #30
 8025708:	d413      	bmi.n	8025732 <_printf_i+0x23a>
 802570a:	68e0      	ldr	r0, [r4, #12]
 802570c:	9b03      	ldr	r3, [sp, #12]
 802570e:	4298      	cmp	r0, r3
 8025710:	bfb8      	it	lt
 8025712:	4618      	movlt	r0, r3
 8025714:	e7a4      	b.n	8025660 <_printf_i+0x168>
 8025716:	2301      	movs	r3, #1
 8025718:	4632      	mov	r2, r6
 802571a:	4649      	mov	r1, r9
 802571c:	4640      	mov	r0, r8
 802571e:	47d0      	blx	sl
 8025720:	3001      	adds	r0, #1
 8025722:	d09b      	beq.n	802565c <_printf_i+0x164>
 8025724:	3501      	adds	r5, #1
 8025726:	68e3      	ldr	r3, [r4, #12]
 8025728:	9903      	ldr	r1, [sp, #12]
 802572a:	1a5b      	subs	r3, r3, r1
 802572c:	42ab      	cmp	r3, r5
 802572e:	dcf2      	bgt.n	8025716 <_printf_i+0x21e>
 8025730:	e7eb      	b.n	802570a <_printf_i+0x212>
 8025732:	2500      	movs	r5, #0
 8025734:	f104 0619 	add.w	r6, r4, #25
 8025738:	e7f5      	b.n	8025726 <_printf_i+0x22e>
 802573a:	bf00      	nop
 802573c:	080758d9 	.word	0x080758d9
 8025740:	080758ea 	.word	0x080758ea

08025744 <_sbrk_r>:
 8025744:	b538      	push	{r3, r4, r5, lr}
 8025746:	4d06      	ldr	r5, [pc, #24]	; (8025760 <_sbrk_r+0x1c>)
 8025748:	2300      	movs	r3, #0
 802574a:	4604      	mov	r4, r0
 802574c:	4608      	mov	r0, r1
 802574e:	602b      	str	r3, [r5, #0]
 8025750:	f7dd f8d4 	bl	80028fc <_sbrk>
 8025754:	1c43      	adds	r3, r0, #1
 8025756:	d102      	bne.n	802575e <_sbrk_r+0x1a>
 8025758:	682b      	ldr	r3, [r5, #0]
 802575a:	b103      	cbz	r3, 802575e <_sbrk_r+0x1a>
 802575c:	6023      	str	r3, [r4, #0]
 802575e:	bd38      	pop	{r3, r4, r5, pc}
 8025760:	2004a538 	.word	0x2004a538

08025764 <_raise_r>:
 8025764:	291f      	cmp	r1, #31
 8025766:	b538      	push	{r3, r4, r5, lr}
 8025768:	4604      	mov	r4, r0
 802576a:	460d      	mov	r5, r1
 802576c:	d904      	bls.n	8025778 <_raise_r+0x14>
 802576e:	2316      	movs	r3, #22
 8025770:	6003      	str	r3, [r0, #0]
 8025772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025776:	bd38      	pop	{r3, r4, r5, pc}
 8025778:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802577a:	b112      	cbz	r2, 8025782 <_raise_r+0x1e>
 802577c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025780:	b94b      	cbnz	r3, 8025796 <_raise_r+0x32>
 8025782:	4620      	mov	r0, r4
 8025784:	f000 f830 	bl	80257e8 <_getpid_r>
 8025788:	462a      	mov	r2, r5
 802578a:	4601      	mov	r1, r0
 802578c:	4620      	mov	r0, r4
 802578e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025792:	f000 b817 	b.w	80257c4 <_kill_r>
 8025796:	2b01      	cmp	r3, #1
 8025798:	d00a      	beq.n	80257b0 <_raise_r+0x4c>
 802579a:	1c59      	adds	r1, r3, #1
 802579c:	d103      	bne.n	80257a6 <_raise_r+0x42>
 802579e:	2316      	movs	r3, #22
 80257a0:	6003      	str	r3, [r0, #0]
 80257a2:	2001      	movs	r0, #1
 80257a4:	e7e7      	b.n	8025776 <_raise_r+0x12>
 80257a6:	2400      	movs	r4, #0
 80257a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80257ac:	4628      	mov	r0, r5
 80257ae:	4798      	blx	r3
 80257b0:	2000      	movs	r0, #0
 80257b2:	e7e0      	b.n	8025776 <_raise_r+0x12>

080257b4 <raise>:
 80257b4:	4b02      	ldr	r3, [pc, #8]	; (80257c0 <raise+0xc>)
 80257b6:	4601      	mov	r1, r0
 80257b8:	6818      	ldr	r0, [r3, #0]
 80257ba:	f7ff bfd3 	b.w	8025764 <_raise_r>
 80257be:	bf00      	nop
 80257c0:	2000001c 	.word	0x2000001c

080257c4 <_kill_r>:
 80257c4:	b538      	push	{r3, r4, r5, lr}
 80257c6:	4d07      	ldr	r5, [pc, #28]	; (80257e4 <_kill_r+0x20>)
 80257c8:	2300      	movs	r3, #0
 80257ca:	4604      	mov	r4, r0
 80257cc:	4608      	mov	r0, r1
 80257ce:	4611      	mov	r1, r2
 80257d0:	602b      	str	r3, [r5, #0]
 80257d2:	f7dd f80b 	bl	80027ec <_kill>
 80257d6:	1c43      	adds	r3, r0, #1
 80257d8:	d102      	bne.n	80257e0 <_kill_r+0x1c>
 80257da:	682b      	ldr	r3, [r5, #0]
 80257dc:	b103      	cbz	r3, 80257e0 <_kill_r+0x1c>
 80257de:	6023      	str	r3, [r4, #0]
 80257e0:	bd38      	pop	{r3, r4, r5, pc}
 80257e2:	bf00      	nop
 80257e4:	2004a538 	.word	0x2004a538

080257e8 <_getpid_r>:
 80257e8:	f7dc bff8 	b.w	80027dc <_getpid>

080257ec <siprintf>:
 80257ec:	b40e      	push	{r1, r2, r3}
 80257ee:	b500      	push	{lr}
 80257f0:	b09c      	sub	sp, #112	; 0x70
 80257f2:	ab1d      	add	r3, sp, #116	; 0x74
 80257f4:	9002      	str	r0, [sp, #8]
 80257f6:	9006      	str	r0, [sp, #24]
 80257f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80257fc:	4809      	ldr	r0, [pc, #36]	; (8025824 <siprintf+0x38>)
 80257fe:	9107      	str	r1, [sp, #28]
 8025800:	9104      	str	r1, [sp, #16]
 8025802:	4909      	ldr	r1, [pc, #36]	; (8025828 <siprintf+0x3c>)
 8025804:	f853 2b04 	ldr.w	r2, [r3], #4
 8025808:	9105      	str	r1, [sp, #20]
 802580a:	6800      	ldr	r0, [r0, #0]
 802580c:	9301      	str	r3, [sp, #4]
 802580e:	a902      	add	r1, sp, #8
 8025810:	f000 fc06 	bl	8026020 <_svfiprintf_r>
 8025814:	9b02      	ldr	r3, [sp, #8]
 8025816:	2200      	movs	r2, #0
 8025818:	701a      	strb	r2, [r3, #0]
 802581a:	b01c      	add	sp, #112	; 0x70
 802581c:	f85d eb04 	ldr.w	lr, [sp], #4
 8025820:	b003      	add	sp, #12
 8025822:	4770      	bx	lr
 8025824:	2000001c 	.word	0x2000001c
 8025828:	ffff0208 	.word	0xffff0208

0802582c <strcpy>:
 802582c:	4603      	mov	r3, r0
 802582e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025832:	f803 2b01 	strb.w	r2, [r3], #1
 8025836:	2a00      	cmp	r2, #0
 8025838:	d1f9      	bne.n	802582e <strcpy+0x2>
 802583a:	4770      	bx	lr

0802583c <strncmp>:
 802583c:	b510      	push	{r4, lr}
 802583e:	b16a      	cbz	r2, 802585c <strncmp+0x20>
 8025840:	3901      	subs	r1, #1
 8025842:	1884      	adds	r4, r0, r2
 8025844:	f810 3b01 	ldrb.w	r3, [r0], #1
 8025848:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802584c:	4293      	cmp	r3, r2
 802584e:	d103      	bne.n	8025858 <strncmp+0x1c>
 8025850:	42a0      	cmp	r0, r4
 8025852:	d001      	beq.n	8025858 <strncmp+0x1c>
 8025854:	2b00      	cmp	r3, #0
 8025856:	d1f5      	bne.n	8025844 <strncmp+0x8>
 8025858:	1a98      	subs	r0, r3, r2
 802585a:	bd10      	pop	{r4, pc}
 802585c:	4610      	mov	r0, r2
 802585e:	e7fc      	b.n	802585a <strncmp+0x1e>

08025860 <strncpy>:
 8025860:	b510      	push	{r4, lr}
 8025862:	3901      	subs	r1, #1
 8025864:	4603      	mov	r3, r0
 8025866:	b132      	cbz	r2, 8025876 <strncpy+0x16>
 8025868:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802586c:	f803 4b01 	strb.w	r4, [r3], #1
 8025870:	3a01      	subs	r2, #1
 8025872:	2c00      	cmp	r4, #0
 8025874:	d1f7      	bne.n	8025866 <strncpy+0x6>
 8025876:	441a      	add	r2, r3
 8025878:	2100      	movs	r1, #0
 802587a:	4293      	cmp	r3, r2
 802587c:	d100      	bne.n	8025880 <strncpy+0x20>
 802587e:	bd10      	pop	{r4, pc}
 8025880:	f803 1b01 	strb.w	r1, [r3], #1
 8025884:	e7f9      	b.n	802587a <strncpy+0x1a>
	...

08025888 <__swbuf_r>:
 8025888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802588a:	460e      	mov	r6, r1
 802588c:	4614      	mov	r4, r2
 802588e:	4605      	mov	r5, r0
 8025890:	b118      	cbz	r0, 802589a <__swbuf_r+0x12>
 8025892:	6983      	ldr	r3, [r0, #24]
 8025894:	b90b      	cbnz	r3, 802589a <__swbuf_r+0x12>
 8025896:	f000 fa33 	bl	8025d00 <__sinit>
 802589a:	4b21      	ldr	r3, [pc, #132]	; (8025920 <__swbuf_r+0x98>)
 802589c:	429c      	cmp	r4, r3
 802589e:	d12b      	bne.n	80258f8 <__swbuf_r+0x70>
 80258a0:	686c      	ldr	r4, [r5, #4]
 80258a2:	69a3      	ldr	r3, [r4, #24]
 80258a4:	60a3      	str	r3, [r4, #8]
 80258a6:	89a3      	ldrh	r3, [r4, #12]
 80258a8:	071a      	lsls	r2, r3, #28
 80258aa:	d52f      	bpl.n	802590c <__swbuf_r+0x84>
 80258ac:	6923      	ldr	r3, [r4, #16]
 80258ae:	b36b      	cbz	r3, 802590c <__swbuf_r+0x84>
 80258b0:	6923      	ldr	r3, [r4, #16]
 80258b2:	6820      	ldr	r0, [r4, #0]
 80258b4:	1ac0      	subs	r0, r0, r3
 80258b6:	6963      	ldr	r3, [r4, #20]
 80258b8:	b2f6      	uxtb	r6, r6
 80258ba:	4283      	cmp	r3, r0
 80258bc:	4637      	mov	r7, r6
 80258be:	dc04      	bgt.n	80258ca <__swbuf_r+0x42>
 80258c0:	4621      	mov	r1, r4
 80258c2:	4628      	mov	r0, r5
 80258c4:	f000 f988 	bl	8025bd8 <_fflush_r>
 80258c8:	bb30      	cbnz	r0, 8025918 <__swbuf_r+0x90>
 80258ca:	68a3      	ldr	r3, [r4, #8]
 80258cc:	3b01      	subs	r3, #1
 80258ce:	60a3      	str	r3, [r4, #8]
 80258d0:	6823      	ldr	r3, [r4, #0]
 80258d2:	1c5a      	adds	r2, r3, #1
 80258d4:	6022      	str	r2, [r4, #0]
 80258d6:	701e      	strb	r6, [r3, #0]
 80258d8:	6963      	ldr	r3, [r4, #20]
 80258da:	3001      	adds	r0, #1
 80258dc:	4283      	cmp	r3, r0
 80258de:	d004      	beq.n	80258ea <__swbuf_r+0x62>
 80258e0:	89a3      	ldrh	r3, [r4, #12]
 80258e2:	07db      	lsls	r3, r3, #31
 80258e4:	d506      	bpl.n	80258f4 <__swbuf_r+0x6c>
 80258e6:	2e0a      	cmp	r6, #10
 80258e8:	d104      	bne.n	80258f4 <__swbuf_r+0x6c>
 80258ea:	4621      	mov	r1, r4
 80258ec:	4628      	mov	r0, r5
 80258ee:	f000 f973 	bl	8025bd8 <_fflush_r>
 80258f2:	b988      	cbnz	r0, 8025918 <__swbuf_r+0x90>
 80258f4:	4638      	mov	r0, r7
 80258f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80258f8:	4b0a      	ldr	r3, [pc, #40]	; (8025924 <__swbuf_r+0x9c>)
 80258fa:	429c      	cmp	r4, r3
 80258fc:	d101      	bne.n	8025902 <__swbuf_r+0x7a>
 80258fe:	68ac      	ldr	r4, [r5, #8]
 8025900:	e7cf      	b.n	80258a2 <__swbuf_r+0x1a>
 8025902:	4b09      	ldr	r3, [pc, #36]	; (8025928 <__swbuf_r+0xa0>)
 8025904:	429c      	cmp	r4, r3
 8025906:	bf08      	it	eq
 8025908:	68ec      	ldreq	r4, [r5, #12]
 802590a:	e7ca      	b.n	80258a2 <__swbuf_r+0x1a>
 802590c:	4621      	mov	r1, r4
 802590e:	4628      	mov	r0, r5
 8025910:	f000 f80c 	bl	802592c <__swsetup_r>
 8025914:	2800      	cmp	r0, #0
 8025916:	d0cb      	beq.n	80258b0 <__swbuf_r+0x28>
 8025918:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802591c:	e7ea      	b.n	80258f4 <__swbuf_r+0x6c>
 802591e:	bf00      	nop
 8025920:	0807591c 	.word	0x0807591c
 8025924:	0807593c 	.word	0x0807593c
 8025928:	080758fc 	.word	0x080758fc

0802592c <__swsetup_r>:
 802592c:	4b32      	ldr	r3, [pc, #200]	; (80259f8 <__swsetup_r+0xcc>)
 802592e:	b570      	push	{r4, r5, r6, lr}
 8025930:	681d      	ldr	r5, [r3, #0]
 8025932:	4606      	mov	r6, r0
 8025934:	460c      	mov	r4, r1
 8025936:	b125      	cbz	r5, 8025942 <__swsetup_r+0x16>
 8025938:	69ab      	ldr	r3, [r5, #24]
 802593a:	b913      	cbnz	r3, 8025942 <__swsetup_r+0x16>
 802593c:	4628      	mov	r0, r5
 802593e:	f000 f9df 	bl	8025d00 <__sinit>
 8025942:	4b2e      	ldr	r3, [pc, #184]	; (80259fc <__swsetup_r+0xd0>)
 8025944:	429c      	cmp	r4, r3
 8025946:	d10f      	bne.n	8025968 <__swsetup_r+0x3c>
 8025948:	686c      	ldr	r4, [r5, #4]
 802594a:	89a3      	ldrh	r3, [r4, #12]
 802594c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025950:	0719      	lsls	r1, r3, #28
 8025952:	d42c      	bmi.n	80259ae <__swsetup_r+0x82>
 8025954:	06dd      	lsls	r5, r3, #27
 8025956:	d411      	bmi.n	802597c <__swsetup_r+0x50>
 8025958:	2309      	movs	r3, #9
 802595a:	6033      	str	r3, [r6, #0]
 802595c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025960:	81a3      	strh	r3, [r4, #12]
 8025962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025966:	e03e      	b.n	80259e6 <__swsetup_r+0xba>
 8025968:	4b25      	ldr	r3, [pc, #148]	; (8025a00 <__swsetup_r+0xd4>)
 802596a:	429c      	cmp	r4, r3
 802596c:	d101      	bne.n	8025972 <__swsetup_r+0x46>
 802596e:	68ac      	ldr	r4, [r5, #8]
 8025970:	e7eb      	b.n	802594a <__swsetup_r+0x1e>
 8025972:	4b24      	ldr	r3, [pc, #144]	; (8025a04 <__swsetup_r+0xd8>)
 8025974:	429c      	cmp	r4, r3
 8025976:	bf08      	it	eq
 8025978:	68ec      	ldreq	r4, [r5, #12]
 802597a:	e7e6      	b.n	802594a <__swsetup_r+0x1e>
 802597c:	0758      	lsls	r0, r3, #29
 802597e:	d512      	bpl.n	80259a6 <__swsetup_r+0x7a>
 8025980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025982:	b141      	cbz	r1, 8025996 <__swsetup_r+0x6a>
 8025984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025988:	4299      	cmp	r1, r3
 802598a:	d002      	beq.n	8025992 <__swsetup_r+0x66>
 802598c:	4630      	mov	r0, r6
 802598e:	f7ff fb41 	bl	8025014 <_free_r>
 8025992:	2300      	movs	r3, #0
 8025994:	6363      	str	r3, [r4, #52]	; 0x34
 8025996:	89a3      	ldrh	r3, [r4, #12]
 8025998:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802599c:	81a3      	strh	r3, [r4, #12]
 802599e:	2300      	movs	r3, #0
 80259a0:	6063      	str	r3, [r4, #4]
 80259a2:	6923      	ldr	r3, [r4, #16]
 80259a4:	6023      	str	r3, [r4, #0]
 80259a6:	89a3      	ldrh	r3, [r4, #12]
 80259a8:	f043 0308 	orr.w	r3, r3, #8
 80259ac:	81a3      	strh	r3, [r4, #12]
 80259ae:	6923      	ldr	r3, [r4, #16]
 80259b0:	b94b      	cbnz	r3, 80259c6 <__swsetup_r+0x9a>
 80259b2:	89a3      	ldrh	r3, [r4, #12]
 80259b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80259b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80259bc:	d003      	beq.n	80259c6 <__swsetup_r+0x9a>
 80259be:	4621      	mov	r1, r4
 80259c0:	4630      	mov	r0, r6
 80259c2:	f000 fa5f 	bl	8025e84 <__smakebuf_r>
 80259c6:	89a0      	ldrh	r0, [r4, #12]
 80259c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80259cc:	f010 0301 	ands.w	r3, r0, #1
 80259d0:	d00a      	beq.n	80259e8 <__swsetup_r+0xbc>
 80259d2:	2300      	movs	r3, #0
 80259d4:	60a3      	str	r3, [r4, #8]
 80259d6:	6963      	ldr	r3, [r4, #20]
 80259d8:	425b      	negs	r3, r3
 80259da:	61a3      	str	r3, [r4, #24]
 80259dc:	6923      	ldr	r3, [r4, #16]
 80259de:	b943      	cbnz	r3, 80259f2 <__swsetup_r+0xc6>
 80259e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80259e4:	d1ba      	bne.n	802595c <__swsetup_r+0x30>
 80259e6:	bd70      	pop	{r4, r5, r6, pc}
 80259e8:	0781      	lsls	r1, r0, #30
 80259ea:	bf58      	it	pl
 80259ec:	6963      	ldrpl	r3, [r4, #20]
 80259ee:	60a3      	str	r3, [r4, #8]
 80259f0:	e7f4      	b.n	80259dc <__swsetup_r+0xb0>
 80259f2:	2000      	movs	r0, #0
 80259f4:	e7f7      	b.n	80259e6 <__swsetup_r+0xba>
 80259f6:	bf00      	nop
 80259f8:	2000001c 	.word	0x2000001c
 80259fc:	0807591c 	.word	0x0807591c
 8025a00:	0807593c 	.word	0x0807593c
 8025a04:	080758fc 	.word	0x080758fc

08025a08 <__register_exitproc>:
 8025a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025a0c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8025ac8 <__register_exitproc+0xc0>
 8025a10:	4606      	mov	r6, r0
 8025a12:	f8d8 0000 	ldr.w	r0, [r8]
 8025a16:	461f      	mov	r7, r3
 8025a18:	460d      	mov	r5, r1
 8025a1a:	4691      	mov	r9, r2
 8025a1c:	f7ff fab7 	bl	8024f8e <__retarget_lock_acquire_recursive>
 8025a20:	4b25      	ldr	r3, [pc, #148]	; (8025ab8 <__register_exitproc+0xb0>)
 8025a22:	681c      	ldr	r4, [r3, #0]
 8025a24:	b934      	cbnz	r4, 8025a34 <__register_exitproc+0x2c>
 8025a26:	4c25      	ldr	r4, [pc, #148]	; (8025abc <__register_exitproc+0xb4>)
 8025a28:	601c      	str	r4, [r3, #0]
 8025a2a:	4b25      	ldr	r3, [pc, #148]	; (8025ac0 <__register_exitproc+0xb8>)
 8025a2c:	b113      	cbz	r3, 8025a34 <__register_exitproc+0x2c>
 8025a2e:	681b      	ldr	r3, [r3, #0]
 8025a30:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025a34:	6863      	ldr	r3, [r4, #4]
 8025a36:	2b1f      	cmp	r3, #31
 8025a38:	dd07      	ble.n	8025a4a <__register_exitproc+0x42>
 8025a3a:	f8d8 0000 	ldr.w	r0, [r8]
 8025a3e:	f7ff faa8 	bl	8024f92 <__retarget_lock_release_recursive>
 8025a42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025a4a:	b34e      	cbz	r6, 8025aa0 <__register_exitproc+0x98>
 8025a4c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8025a50:	b988      	cbnz	r0, 8025a76 <__register_exitproc+0x6e>
 8025a52:	4b1c      	ldr	r3, [pc, #112]	; (8025ac4 <__register_exitproc+0xbc>)
 8025a54:	b923      	cbnz	r3, 8025a60 <__register_exitproc+0x58>
 8025a56:	f8d8 0000 	ldr.w	r0, [r8]
 8025a5a:	f7ff fa99 	bl	8024f90 <__retarget_lock_release>
 8025a5e:	e7f0      	b.n	8025a42 <__register_exitproc+0x3a>
 8025a60:	f44f 7084 	mov.w	r0, #264	; 0x108
 8025a64:	f7ff fa96 	bl	8024f94 <malloc>
 8025a68:	2800      	cmp	r0, #0
 8025a6a:	d0f4      	beq.n	8025a56 <__register_exitproc+0x4e>
 8025a6c:	2300      	movs	r3, #0
 8025a6e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8025a72:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025a76:	6863      	ldr	r3, [r4, #4]
 8025a78:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025a7c:	2201      	movs	r2, #1
 8025a7e:	409a      	lsls	r2, r3
 8025a80:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8025a84:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8025a88:	4313      	orrs	r3, r2
 8025a8a:	2e02      	cmp	r6, #2
 8025a8c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025a90:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8025a94:	bf02      	ittt	eq
 8025a96:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8025a9a:	431a      	orreq	r2, r3
 8025a9c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8025aa0:	6863      	ldr	r3, [r4, #4]
 8025aa2:	f8d8 0000 	ldr.w	r0, [r8]
 8025aa6:	1c5a      	adds	r2, r3, #1
 8025aa8:	3302      	adds	r3, #2
 8025aaa:	6062      	str	r2, [r4, #4]
 8025aac:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8025ab0:	f7ff fa6f 	bl	8024f92 <__retarget_lock_release_recursive>
 8025ab4:	2000      	movs	r0, #0
 8025ab6:	e7c6      	b.n	8025a46 <__register_exitproc+0x3e>
 8025ab8:	2004a260 	.word	0x2004a260
 8025abc:	2004a1d4 	.word	0x2004a1d4
 8025ac0:	00000000 	.word	0x00000000
 8025ac4:	08024f95 	.word	0x08024f95
 8025ac8:	20000080 	.word	0x20000080

08025acc <__sflush_r>:
 8025acc:	898a      	ldrh	r2, [r1, #12]
 8025ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025ad2:	4605      	mov	r5, r0
 8025ad4:	0710      	lsls	r0, r2, #28
 8025ad6:	460c      	mov	r4, r1
 8025ad8:	d458      	bmi.n	8025b8c <__sflush_r+0xc0>
 8025ada:	684b      	ldr	r3, [r1, #4]
 8025adc:	2b00      	cmp	r3, #0
 8025ade:	dc05      	bgt.n	8025aec <__sflush_r+0x20>
 8025ae0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025ae2:	2b00      	cmp	r3, #0
 8025ae4:	dc02      	bgt.n	8025aec <__sflush_r+0x20>
 8025ae6:	2000      	movs	r0, #0
 8025ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025aee:	2e00      	cmp	r6, #0
 8025af0:	d0f9      	beq.n	8025ae6 <__sflush_r+0x1a>
 8025af2:	2300      	movs	r3, #0
 8025af4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025af8:	682f      	ldr	r7, [r5, #0]
 8025afa:	602b      	str	r3, [r5, #0]
 8025afc:	d032      	beq.n	8025b64 <__sflush_r+0x98>
 8025afe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025b00:	89a3      	ldrh	r3, [r4, #12]
 8025b02:	075a      	lsls	r2, r3, #29
 8025b04:	d505      	bpl.n	8025b12 <__sflush_r+0x46>
 8025b06:	6863      	ldr	r3, [r4, #4]
 8025b08:	1ac0      	subs	r0, r0, r3
 8025b0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025b0c:	b10b      	cbz	r3, 8025b12 <__sflush_r+0x46>
 8025b0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025b10:	1ac0      	subs	r0, r0, r3
 8025b12:	2300      	movs	r3, #0
 8025b14:	4602      	mov	r2, r0
 8025b16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025b18:	6a21      	ldr	r1, [r4, #32]
 8025b1a:	4628      	mov	r0, r5
 8025b1c:	47b0      	blx	r6
 8025b1e:	1c43      	adds	r3, r0, #1
 8025b20:	89a3      	ldrh	r3, [r4, #12]
 8025b22:	d106      	bne.n	8025b32 <__sflush_r+0x66>
 8025b24:	6829      	ldr	r1, [r5, #0]
 8025b26:	291d      	cmp	r1, #29
 8025b28:	d82c      	bhi.n	8025b84 <__sflush_r+0xb8>
 8025b2a:	4a2a      	ldr	r2, [pc, #168]	; (8025bd4 <__sflush_r+0x108>)
 8025b2c:	40ca      	lsrs	r2, r1
 8025b2e:	07d6      	lsls	r6, r2, #31
 8025b30:	d528      	bpl.n	8025b84 <__sflush_r+0xb8>
 8025b32:	2200      	movs	r2, #0
 8025b34:	6062      	str	r2, [r4, #4]
 8025b36:	04d9      	lsls	r1, r3, #19
 8025b38:	6922      	ldr	r2, [r4, #16]
 8025b3a:	6022      	str	r2, [r4, #0]
 8025b3c:	d504      	bpl.n	8025b48 <__sflush_r+0x7c>
 8025b3e:	1c42      	adds	r2, r0, #1
 8025b40:	d101      	bne.n	8025b46 <__sflush_r+0x7a>
 8025b42:	682b      	ldr	r3, [r5, #0]
 8025b44:	b903      	cbnz	r3, 8025b48 <__sflush_r+0x7c>
 8025b46:	6560      	str	r0, [r4, #84]	; 0x54
 8025b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025b4a:	602f      	str	r7, [r5, #0]
 8025b4c:	2900      	cmp	r1, #0
 8025b4e:	d0ca      	beq.n	8025ae6 <__sflush_r+0x1a>
 8025b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025b54:	4299      	cmp	r1, r3
 8025b56:	d002      	beq.n	8025b5e <__sflush_r+0x92>
 8025b58:	4628      	mov	r0, r5
 8025b5a:	f7ff fa5b 	bl	8025014 <_free_r>
 8025b5e:	2000      	movs	r0, #0
 8025b60:	6360      	str	r0, [r4, #52]	; 0x34
 8025b62:	e7c1      	b.n	8025ae8 <__sflush_r+0x1c>
 8025b64:	6a21      	ldr	r1, [r4, #32]
 8025b66:	2301      	movs	r3, #1
 8025b68:	4628      	mov	r0, r5
 8025b6a:	47b0      	blx	r6
 8025b6c:	1c41      	adds	r1, r0, #1
 8025b6e:	d1c7      	bne.n	8025b00 <__sflush_r+0x34>
 8025b70:	682b      	ldr	r3, [r5, #0]
 8025b72:	2b00      	cmp	r3, #0
 8025b74:	d0c4      	beq.n	8025b00 <__sflush_r+0x34>
 8025b76:	2b1d      	cmp	r3, #29
 8025b78:	d001      	beq.n	8025b7e <__sflush_r+0xb2>
 8025b7a:	2b16      	cmp	r3, #22
 8025b7c:	d101      	bne.n	8025b82 <__sflush_r+0xb6>
 8025b7e:	602f      	str	r7, [r5, #0]
 8025b80:	e7b1      	b.n	8025ae6 <__sflush_r+0x1a>
 8025b82:	89a3      	ldrh	r3, [r4, #12]
 8025b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025b88:	81a3      	strh	r3, [r4, #12]
 8025b8a:	e7ad      	b.n	8025ae8 <__sflush_r+0x1c>
 8025b8c:	690f      	ldr	r7, [r1, #16]
 8025b8e:	2f00      	cmp	r7, #0
 8025b90:	d0a9      	beq.n	8025ae6 <__sflush_r+0x1a>
 8025b92:	0793      	lsls	r3, r2, #30
 8025b94:	680e      	ldr	r6, [r1, #0]
 8025b96:	bf08      	it	eq
 8025b98:	694b      	ldreq	r3, [r1, #20]
 8025b9a:	600f      	str	r7, [r1, #0]
 8025b9c:	bf18      	it	ne
 8025b9e:	2300      	movne	r3, #0
 8025ba0:	eba6 0807 	sub.w	r8, r6, r7
 8025ba4:	608b      	str	r3, [r1, #8]
 8025ba6:	f1b8 0f00 	cmp.w	r8, #0
 8025baa:	dd9c      	ble.n	8025ae6 <__sflush_r+0x1a>
 8025bac:	6a21      	ldr	r1, [r4, #32]
 8025bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025bb0:	4643      	mov	r3, r8
 8025bb2:	463a      	mov	r2, r7
 8025bb4:	4628      	mov	r0, r5
 8025bb6:	47b0      	blx	r6
 8025bb8:	2800      	cmp	r0, #0
 8025bba:	dc06      	bgt.n	8025bca <__sflush_r+0xfe>
 8025bbc:	89a3      	ldrh	r3, [r4, #12]
 8025bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025bc2:	81a3      	strh	r3, [r4, #12]
 8025bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025bc8:	e78e      	b.n	8025ae8 <__sflush_r+0x1c>
 8025bca:	4407      	add	r7, r0
 8025bcc:	eba8 0800 	sub.w	r8, r8, r0
 8025bd0:	e7e9      	b.n	8025ba6 <__sflush_r+0xda>
 8025bd2:	bf00      	nop
 8025bd4:	20400001 	.word	0x20400001

08025bd8 <_fflush_r>:
 8025bd8:	b538      	push	{r3, r4, r5, lr}
 8025bda:	690b      	ldr	r3, [r1, #16]
 8025bdc:	4605      	mov	r5, r0
 8025bde:	460c      	mov	r4, r1
 8025be0:	b913      	cbnz	r3, 8025be8 <_fflush_r+0x10>
 8025be2:	2500      	movs	r5, #0
 8025be4:	4628      	mov	r0, r5
 8025be6:	bd38      	pop	{r3, r4, r5, pc}
 8025be8:	b118      	cbz	r0, 8025bf2 <_fflush_r+0x1a>
 8025bea:	6983      	ldr	r3, [r0, #24]
 8025bec:	b90b      	cbnz	r3, 8025bf2 <_fflush_r+0x1a>
 8025bee:	f000 f887 	bl	8025d00 <__sinit>
 8025bf2:	4b14      	ldr	r3, [pc, #80]	; (8025c44 <_fflush_r+0x6c>)
 8025bf4:	429c      	cmp	r4, r3
 8025bf6:	d11b      	bne.n	8025c30 <_fflush_r+0x58>
 8025bf8:	686c      	ldr	r4, [r5, #4]
 8025bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025bfe:	2b00      	cmp	r3, #0
 8025c00:	d0ef      	beq.n	8025be2 <_fflush_r+0xa>
 8025c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025c04:	07d0      	lsls	r0, r2, #31
 8025c06:	d404      	bmi.n	8025c12 <_fflush_r+0x3a>
 8025c08:	0599      	lsls	r1, r3, #22
 8025c0a:	d402      	bmi.n	8025c12 <_fflush_r+0x3a>
 8025c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025c0e:	f7ff f9be 	bl	8024f8e <__retarget_lock_acquire_recursive>
 8025c12:	4628      	mov	r0, r5
 8025c14:	4621      	mov	r1, r4
 8025c16:	f7ff ff59 	bl	8025acc <__sflush_r>
 8025c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025c1c:	07da      	lsls	r2, r3, #31
 8025c1e:	4605      	mov	r5, r0
 8025c20:	d4e0      	bmi.n	8025be4 <_fflush_r+0xc>
 8025c22:	89a3      	ldrh	r3, [r4, #12]
 8025c24:	059b      	lsls	r3, r3, #22
 8025c26:	d4dd      	bmi.n	8025be4 <_fflush_r+0xc>
 8025c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025c2a:	f7ff f9b2 	bl	8024f92 <__retarget_lock_release_recursive>
 8025c2e:	e7d9      	b.n	8025be4 <_fflush_r+0xc>
 8025c30:	4b05      	ldr	r3, [pc, #20]	; (8025c48 <_fflush_r+0x70>)
 8025c32:	429c      	cmp	r4, r3
 8025c34:	d101      	bne.n	8025c3a <_fflush_r+0x62>
 8025c36:	68ac      	ldr	r4, [r5, #8]
 8025c38:	e7df      	b.n	8025bfa <_fflush_r+0x22>
 8025c3a:	4b04      	ldr	r3, [pc, #16]	; (8025c4c <_fflush_r+0x74>)
 8025c3c:	429c      	cmp	r4, r3
 8025c3e:	bf08      	it	eq
 8025c40:	68ec      	ldreq	r4, [r5, #12]
 8025c42:	e7da      	b.n	8025bfa <_fflush_r+0x22>
 8025c44:	0807591c 	.word	0x0807591c
 8025c48:	0807593c 	.word	0x0807593c
 8025c4c:	080758fc 	.word	0x080758fc

08025c50 <std>:
 8025c50:	2300      	movs	r3, #0
 8025c52:	b510      	push	{r4, lr}
 8025c54:	4604      	mov	r4, r0
 8025c56:	e9c0 3300 	strd	r3, r3, [r0]
 8025c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025c5e:	6083      	str	r3, [r0, #8]
 8025c60:	8181      	strh	r1, [r0, #12]
 8025c62:	6643      	str	r3, [r0, #100]	; 0x64
 8025c64:	81c2      	strh	r2, [r0, #14]
 8025c66:	6183      	str	r3, [r0, #24]
 8025c68:	4619      	mov	r1, r3
 8025c6a:	2208      	movs	r2, #8
 8025c6c:	305c      	adds	r0, #92	; 0x5c
 8025c6e:	f7ff f9c9 	bl	8025004 <memset>
 8025c72:	4b05      	ldr	r3, [pc, #20]	; (8025c88 <std+0x38>)
 8025c74:	6263      	str	r3, [r4, #36]	; 0x24
 8025c76:	4b05      	ldr	r3, [pc, #20]	; (8025c8c <std+0x3c>)
 8025c78:	62a3      	str	r3, [r4, #40]	; 0x28
 8025c7a:	4b05      	ldr	r3, [pc, #20]	; (8025c90 <std+0x40>)
 8025c7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025c7e:	4b05      	ldr	r3, [pc, #20]	; (8025c94 <std+0x44>)
 8025c80:	6224      	str	r4, [r4, #32]
 8025c82:	6323      	str	r3, [r4, #48]	; 0x30
 8025c84:	bd10      	pop	{r4, pc}
 8025c86:	bf00      	nop
 8025c88:	08026221 	.word	0x08026221
 8025c8c:	08026243 	.word	0x08026243
 8025c90:	0802627b 	.word	0x0802627b
 8025c94:	0802629f 	.word	0x0802629f

08025c98 <_cleanup_r>:
 8025c98:	4901      	ldr	r1, [pc, #4]	; (8025ca0 <_cleanup_r+0x8>)
 8025c9a:	f000 b8af 	b.w	8025dfc <_fwalk_reent>
 8025c9e:	bf00      	nop
 8025ca0:	08025bd9 	.word	0x08025bd9

08025ca4 <__sfmoreglue>:
 8025ca4:	b570      	push	{r4, r5, r6, lr}
 8025ca6:	1e4a      	subs	r2, r1, #1
 8025ca8:	2568      	movs	r5, #104	; 0x68
 8025caa:	4355      	muls	r5, r2
 8025cac:	460e      	mov	r6, r1
 8025cae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025cb2:	f7ff f9ff 	bl	80250b4 <_malloc_r>
 8025cb6:	4604      	mov	r4, r0
 8025cb8:	b140      	cbz	r0, 8025ccc <__sfmoreglue+0x28>
 8025cba:	2100      	movs	r1, #0
 8025cbc:	e9c0 1600 	strd	r1, r6, [r0]
 8025cc0:	300c      	adds	r0, #12
 8025cc2:	60a0      	str	r0, [r4, #8]
 8025cc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025cc8:	f7ff f99c 	bl	8025004 <memset>
 8025ccc:	4620      	mov	r0, r4
 8025cce:	bd70      	pop	{r4, r5, r6, pc}

08025cd0 <__sfp_lock_acquire>:
 8025cd0:	4801      	ldr	r0, [pc, #4]	; (8025cd8 <__sfp_lock_acquire+0x8>)
 8025cd2:	f7ff b95c 	b.w	8024f8e <__retarget_lock_acquire_recursive>
 8025cd6:	bf00      	nop
 8025cd8:	2004a530 	.word	0x2004a530

08025cdc <__sfp_lock_release>:
 8025cdc:	4801      	ldr	r0, [pc, #4]	; (8025ce4 <__sfp_lock_release+0x8>)
 8025cde:	f7ff b958 	b.w	8024f92 <__retarget_lock_release_recursive>
 8025ce2:	bf00      	nop
 8025ce4:	2004a530 	.word	0x2004a530

08025ce8 <__sinit_lock_acquire>:
 8025ce8:	4801      	ldr	r0, [pc, #4]	; (8025cf0 <__sinit_lock_acquire+0x8>)
 8025cea:	f7ff b950 	b.w	8024f8e <__retarget_lock_acquire_recursive>
 8025cee:	bf00      	nop
 8025cf0:	2004a52f 	.word	0x2004a52f

08025cf4 <__sinit_lock_release>:
 8025cf4:	4801      	ldr	r0, [pc, #4]	; (8025cfc <__sinit_lock_release+0x8>)
 8025cf6:	f7ff b94c 	b.w	8024f92 <__retarget_lock_release_recursive>
 8025cfa:	bf00      	nop
 8025cfc:	2004a52f 	.word	0x2004a52f

08025d00 <__sinit>:
 8025d00:	b510      	push	{r4, lr}
 8025d02:	4604      	mov	r4, r0
 8025d04:	f7ff fff0 	bl	8025ce8 <__sinit_lock_acquire>
 8025d08:	69a3      	ldr	r3, [r4, #24]
 8025d0a:	b11b      	cbz	r3, 8025d14 <__sinit+0x14>
 8025d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025d10:	f7ff bff0 	b.w	8025cf4 <__sinit_lock_release>
 8025d14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025d18:	6523      	str	r3, [r4, #80]	; 0x50
 8025d1a:	4b13      	ldr	r3, [pc, #76]	; (8025d68 <__sinit+0x68>)
 8025d1c:	4a13      	ldr	r2, [pc, #76]	; (8025d6c <__sinit+0x6c>)
 8025d1e:	681b      	ldr	r3, [r3, #0]
 8025d20:	62a2      	str	r2, [r4, #40]	; 0x28
 8025d22:	42a3      	cmp	r3, r4
 8025d24:	bf04      	itt	eq
 8025d26:	2301      	moveq	r3, #1
 8025d28:	61a3      	streq	r3, [r4, #24]
 8025d2a:	4620      	mov	r0, r4
 8025d2c:	f000 f820 	bl	8025d70 <__sfp>
 8025d30:	6060      	str	r0, [r4, #4]
 8025d32:	4620      	mov	r0, r4
 8025d34:	f000 f81c 	bl	8025d70 <__sfp>
 8025d38:	60a0      	str	r0, [r4, #8]
 8025d3a:	4620      	mov	r0, r4
 8025d3c:	f000 f818 	bl	8025d70 <__sfp>
 8025d40:	2200      	movs	r2, #0
 8025d42:	60e0      	str	r0, [r4, #12]
 8025d44:	2104      	movs	r1, #4
 8025d46:	6860      	ldr	r0, [r4, #4]
 8025d48:	f7ff ff82 	bl	8025c50 <std>
 8025d4c:	68a0      	ldr	r0, [r4, #8]
 8025d4e:	2201      	movs	r2, #1
 8025d50:	2109      	movs	r1, #9
 8025d52:	f7ff ff7d 	bl	8025c50 <std>
 8025d56:	68e0      	ldr	r0, [r4, #12]
 8025d58:	2202      	movs	r2, #2
 8025d5a:	2112      	movs	r1, #18
 8025d5c:	f7ff ff78 	bl	8025c50 <std>
 8025d60:	2301      	movs	r3, #1
 8025d62:	61a3      	str	r3, [r4, #24]
 8025d64:	e7d2      	b.n	8025d0c <__sinit+0xc>
 8025d66:	bf00      	nop
 8025d68:	080758c4 	.word	0x080758c4
 8025d6c:	08025c99 	.word	0x08025c99

08025d70 <__sfp>:
 8025d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d72:	4607      	mov	r7, r0
 8025d74:	f7ff ffac 	bl	8025cd0 <__sfp_lock_acquire>
 8025d78:	4b1e      	ldr	r3, [pc, #120]	; (8025df4 <__sfp+0x84>)
 8025d7a:	681e      	ldr	r6, [r3, #0]
 8025d7c:	69b3      	ldr	r3, [r6, #24]
 8025d7e:	b913      	cbnz	r3, 8025d86 <__sfp+0x16>
 8025d80:	4630      	mov	r0, r6
 8025d82:	f7ff ffbd 	bl	8025d00 <__sinit>
 8025d86:	3648      	adds	r6, #72	; 0x48
 8025d88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025d8c:	3b01      	subs	r3, #1
 8025d8e:	d503      	bpl.n	8025d98 <__sfp+0x28>
 8025d90:	6833      	ldr	r3, [r6, #0]
 8025d92:	b30b      	cbz	r3, 8025dd8 <__sfp+0x68>
 8025d94:	6836      	ldr	r6, [r6, #0]
 8025d96:	e7f7      	b.n	8025d88 <__sfp+0x18>
 8025d98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025d9c:	b9d5      	cbnz	r5, 8025dd4 <__sfp+0x64>
 8025d9e:	4b16      	ldr	r3, [pc, #88]	; (8025df8 <__sfp+0x88>)
 8025da0:	60e3      	str	r3, [r4, #12]
 8025da2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025da6:	6665      	str	r5, [r4, #100]	; 0x64
 8025da8:	f7ff f8f0 	bl	8024f8c <__retarget_lock_init_recursive>
 8025dac:	f7ff ff96 	bl	8025cdc <__sfp_lock_release>
 8025db0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025db4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025db8:	6025      	str	r5, [r4, #0]
 8025dba:	61a5      	str	r5, [r4, #24]
 8025dbc:	2208      	movs	r2, #8
 8025dbe:	4629      	mov	r1, r5
 8025dc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025dc4:	f7ff f91e 	bl	8025004 <memset>
 8025dc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025dcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025dd0:	4620      	mov	r0, r4
 8025dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025dd4:	3468      	adds	r4, #104	; 0x68
 8025dd6:	e7d9      	b.n	8025d8c <__sfp+0x1c>
 8025dd8:	2104      	movs	r1, #4
 8025dda:	4638      	mov	r0, r7
 8025ddc:	f7ff ff62 	bl	8025ca4 <__sfmoreglue>
 8025de0:	4604      	mov	r4, r0
 8025de2:	6030      	str	r0, [r6, #0]
 8025de4:	2800      	cmp	r0, #0
 8025de6:	d1d5      	bne.n	8025d94 <__sfp+0x24>
 8025de8:	f7ff ff78 	bl	8025cdc <__sfp_lock_release>
 8025dec:	230c      	movs	r3, #12
 8025dee:	603b      	str	r3, [r7, #0]
 8025df0:	e7ee      	b.n	8025dd0 <__sfp+0x60>
 8025df2:	bf00      	nop
 8025df4:	080758c4 	.word	0x080758c4
 8025df8:	ffff0001 	.word	0xffff0001

08025dfc <_fwalk_reent>:
 8025dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025e00:	4606      	mov	r6, r0
 8025e02:	4688      	mov	r8, r1
 8025e04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025e08:	2700      	movs	r7, #0
 8025e0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025e0e:	f1b9 0901 	subs.w	r9, r9, #1
 8025e12:	d505      	bpl.n	8025e20 <_fwalk_reent+0x24>
 8025e14:	6824      	ldr	r4, [r4, #0]
 8025e16:	2c00      	cmp	r4, #0
 8025e18:	d1f7      	bne.n	8025e0a <_fwalk_reent+0xe>
 8025e1a:	4638      	mov	r0, r7
 8025e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025e20:	89ab      	ldrh	r3, [r5, #12]
 8025e22:	2b01      	cmp	r3, #1
 8025e24:	d907      	bls.n	8025e36 <_fwalk_reent+0x3a>
 8025e26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025e2a:	3301      	adds	r3, #1
 8025e2c:	d003      	beq.n	8025e36 <_fwalk_reent+0x3a>
 8025e2e:	4629      	mov	r1, r5
 8025e30:	4630      	mov	r0, r6
 8025e32:	47c0      	blx	r8
 8025e34:	4307      	orrs	r7, r0
 8025e36:	3568      	adds	r5, #104	; 0x68
 8025e38:	e7e9      	b.n	8025e0e <_fwalk_reent+0x12>

08025e3a <__swhatbuf_r>:
 8025e3a:	b570      	push	{r4, r5, r6, lr}
 8025e3c:	460e      	mov	r6, r1
 8025e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025e42:	2900      	cmp	r1, #0
 8025e44:	b096      	sub	sp, #88	; 0x58
 8025e46:	4614      	mov	r4, r2
 8025e48:	461d      	mov	r5, r3
 8025e4a:	da07      	bge.n	8025e5c <__swhatbuf_r+0x22>
 8025e4c:	2300      	movs	r3, #0
 8025e4e:	602b      	str	r3, [r5, #0]
 8025e50:	89b3      	ldrh	r3, [r6, #12]
 8025e52:	061a      	lsls	r2, r3, #24
 8025e54:	d410      	bmi.n	8025e78 <__swhatbuf_r+0x3e>
 8025e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025e5a:	e00e      	b.n	8025e7a <__swhatbuf_r+0x40>
 8025e5c:	466a      	mov	r2, sp
 8025e5e:	f000 fa45 	bl	80262ec <_fstat_r>
 8025e62:	2800      	cmp	r0, #0
 8025e64:	dbf2      	blt.n	8025e4c <__swhatbuf_r+0x12>
 8025e66:	9a01      	ldr	r2, [sp, #4]
 8025e68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025e6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025e70:	425a      	negs	r2, r3
 8025e72:	415a      	adcs	r2, r3
 8025e74:	602a      	str	r2, [r5, #0]
 8025e76:	e7ee      	b.n	8025e56 <__swhatbuf_r+0x1c>
 8025e78:	2340      	movs	r3, #64	; 0x40
 8025e7a:	2000      	movs	r0, #0
 8025e7c:	6023      	str	r3, [r4, #0]
 8025e7e:	b016      	add	sp, #88	; 0x58
 8025e80:	bd70      	pop	{r4, r5, r6, pc}
	...

08025e84 <__smakebuf_r>:
 8025e84:	898b      	ldrh	r3, [r1, #12]
 8025e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025e88:	079d      	lsls	r5, r3, #30
 8025e8a:	4606      	mov	r6, r0
 8025e8c:	460c      	mov	r4, r1
 8025e8e:	d507      	bpl.n	8025ea0 <__smakebuf_r+0x1c>
 8025e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025e94:	6023      	str	r3, [r4, #0]
 8025e96:	6123      	str	r3, [r4, #16]
 8025e98:	2301      	movs	r3, #1
 8025e9a:	6163      	str	r3, [r4, #20]
 8025e9c:	b002      	add	sp, #8
 8025e9e:	bd70      	pop	{r4, r5, r6, pc}
 8025ea0:	ab01      	add	r3, sp, #4
 8025ea2:	466a      	mov	r2, sp
 8025ea4:	f7ff ffc9 	bl	8025e3a <__swhatbuf_r>
 8025ea8:	9900      	ldr	r1, [sp, #0]
 8025eaa:	4605      	mov	r5, r0
 8025eac:	4630      	mov	r0, r6
 8025eae:	f7ff f901 	bl	80250b4 <_malloc_r>
 8025eb2:	b948      	cbnz	r0, 8025ec8 <__smakebuf_r+0x44>
 8025eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025eb8:	059a      	lsls	r2, r3, #22
 8025eba:	d4ef      	bmi.n	8025e9c <__smakebuf_r+0x18>
 8025ebc:	f023 0303 	bic.w	r3, r3, #3
 8025ec0:	f043 0302 	orr.w	r3, r3, #2
 8025ec4:	81a3      	strh	r3, [r4, #12]
 8025ec6:	e7e3      	b.n	8025e90 <__smakebuf_r+0xc>
 8025ec8:	4b0d      	ldr	r3, [pc, #52]	; (8025f00 <__smakebuf_r+0x7c>)
 8025eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8025ecc:	89a3      	ldrh	r3, [r4, #12]
 8025ece:	6020      	str	r0, [r4, #0]
 8025ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025ed4:	81a3      	strh	r3, [r4, #12]
 8025ed6:	9b00      	ldr	r3, [sp, #0]
 8025ed8:	6163      	str	r3, [r4, #20]
 8025eda:	9b01      	ldr	r3, [sp, #4]
 8025edc:	6120      	str	r0, [r4, #16]
 8025ede:	b15b      	cbz	r3, 8025ef8 <__smakebuf_r+0x74>
 8025ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025ee4:	4630      	mov	r0, r6
 8025ee6:	f000 fa13 	bl	8026310 <_isatty_r>
 8025eea:	b128      	cbz	r0, 8025ef8 <__smakebuf_r+0x74>
 8025eec:	89a3      	ldrh	r3, [r4, #12]
 8025eee:	f023 0303 	bic.w	r3, r3, #3
 8025ef2:	f043 0301 	orr.w	r3, r3, #1
 8025ef6:	81a3      	strh	r3, [r4, #12]
 8025ef8:	89a0      	ldrh	r0, [r4, #12]
 8025efa:	4305      	orrs	r5, r0
 8025efc:	81a5      	strh	r5, [r4, #12]
 8025efe:	e7cd      	b.n	8025e9c <__smakebuf_r+0x18>
 8025f00:	08025c99 	.word	0x08025c99

08025f04 <__malloc_lock>:
 8025f04:	4801      	ldr	r0, [pc, #4]	; (8025f0c <__malloc_lock+0x8>)
 8025f06:	f7ff b842 	b.w	8024f8e <__retarget_lock_acquire_recursive>
 8025f0a:	bf00      	nop
 8025f0c:	2004a52c 	.word	0x2004a52c

08025f10 <__malloc_unlock>:
 8025f10:	4801      	ldr	r0, [pc, #4]	; (8025f18 <__malloc_unlock+0x8>)
 8025f12:	f7ff b83e 	b.w	8024f92 <__retarget_lock_release_recursive>
 8025f16:	bf00      	nop
 8025f18:	2004a52c 	.word	0x2004a52c

08025f1c <_realloc_r>:
 8025f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f1e:	4607      	mov	r7, r0
 8025f20:	4614      	mov	r4, r2
 8025f22:	460e      	mov	r6, r1
 8025f24:	b921      	cbnz	r1, 8025f30 <_realloc_r+0x14>
 8025f26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8025f2a:	4611      	mov	r1, r2
 8025f2c:	f7ff b8c2 	b.w	80250b4 <_malloc_r>
 8025f30:	b922      	cbnz	r2, 8025f3c <_realloc_r+0x20>
 8025f32:	f7ff f86f 	bl	8025014 <_free_r>
 8025f36:	4625      	mov	r5, r4
 8025f38:	4628      	mov	r0, r5
 8025f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025f3c:	f000 fa0a 	bl	8026354 <_malloc_usable_size_r>
 8025f40:	42a0      	cmp	r0, r4
 8025f42:	d20f      	bcs.n	8025f64 <_realloc_r+0x48>
 8025f44:	4621      	mov	r1, r4
 8025f46:	4638      	mov	r0, r7
 8025f48:	f7ff f8b4 	bl	80250b4 <_malloc_r>
 8025f4c:	4605      	mov	r5, r0
 8025f4e:	2800      	cmp	r0, #0
 8025f50:	d0f2      	beq.n	8025f38 <_realloc_r+0x1c>
 8025f52:	4631      	mov	r1, r6
 8025f54:	4622      	mov	r2, r4
 8025f56:	f7ff f82d 	bl	8024fb4 <memcpy>
 8025f5a:	4631      	mov	r1, r6
 8025f5c:	4638      	mov	r0, r7
 8025f5e:	f7ff f859 	bl	8025014 <_free_r>
 8025f62:	e7e9      	b.n	8025f38 <_realloc_r+0x1c>
 8025f64:	4635      	mov	r5, r6
 8025f66:	e7e7      	b.n	8025f38 <_realloc_r+0x1c>

08025f68 <__ssputs_r>:
 8025f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025f6c:	688e      	ldr	r6, [r1, #8]
 8025f6e:	429e      	cmp	r6, r3
 8025f70:	4682      	mov	sl, r0
 8025f72:	460c      	mov	r4, r1
 8025f74:	4690      	mov	r8, r2
 8025f76:	461f      	mov	r7, r3
 8025f78:	d838      	bhi.n	8025fec <__ssputs_r+0x84>
 8025f7a:	898a      	ldrh	r2, [r1, #12]
 8025f7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8025f80:	d032      	beq.n	8025fe8 <__ssputs_r+0x80>
 8025f82:	6825      	ldr	r5, [r4, #0]
 8025f84:	6909      	ldr	r1, [r1, #16]
 8025f86:	eba5 0901 	sub.w	r9, r5, r1
 8025f8a:	6965      	ldr	r5, [r4, #20]
 8025f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025f90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8025f94:	3301      	adds	r3, #1
 8025f96:	444b      	add	r3, r9
 8025f98:	106d      	asrs	r5, r5, #1
 8025f9a:	429d      	cmp	r5, r3
 8025f9c:	bf38      	it	cc
 8025f9e:	461d      	movcc	r5, r3
 8025fa0:	0553      	lsls	r3, r2, #21
 8025fa2:	d531      	bpl.n	8026008 <__ssputs_r+0xa0>
 8025fa4:	4629      	mov	r1, r5
 8025fa6:	f7ff f885 	bl	80250b4 <_malloc_r>
 8025faa:	4606      	mov	r6, r0
 8025fac:	b950      	cbnz	r0, 8025fc4 <__ssputs_r+0x5c>
 8025fae:	230c      	movs	r3, #12
 8025fb0:	f8ca 3000 	str.w	r3, [sl]
 8025fb4:	89a3      	ldrh	r3, [r4, #12]
 8025fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025fba:	81a3      	strh	r3, [r4, #12]
 8025fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025fc4:	6921      	ldr	r1, [r4, #16]
 8025fc6:	464a      	mov	r2, r9
 8025fc8:	f7fe fff4 	bl	8024fb4 <memcpy>
 8025fcc:	89a3      	ldrh	r3, [r4, #12]
 8025fce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8025fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025fd6:	81a3      	strh	r3, [r4, #12]
 8025fd8:	6126      	str	r6, [r4, #16]
 8025fda:	6165      	str	r5, [r4, #20]
 8025fdc:	444e      	add	r6, r9
 8025fde:	eba5 0509 	sub.w	r5, r5, r9
 8025fe2:	6026      	str	r6, [r4, #0]
 8025fe4:	60a5      	str	r5, [r4, #8]
 8025fe6:	463e      	mov	r6, r7
 8025fe8:	42be      	cmp	r6, r7
 8025fea:	d900      	bls.n	8025fee <__ssputs_r+0x86>
 8025fec:	463e      	mov	r6, r7
 8025fee:	4632      	mov	r2, r6
 8025ff0:	6820      	ldr	r0, [r4, #0]
 8025ff2:	4641      	mov	r1, r8
 8025ff4:	f7fe ffec 	bl	8024fd0 <memmove>
 8025ff8:	68a3      	ldr	r3, [r4, #8]
 8025ffa:	6822      	ldr	r2, [r4, #0]
 8025ffc:	1b9b      	subs	r3, r3, r6
 8025ffe:	4432      	add	r2, r6
 8026000:	60a3      	str	r3, [r4, #8]
 8026002:	6022      	str	r2, [r4, #0]
 8026004:	2000      	movs	r0, #0
 8026006:	e7db      	b.n	8025fc0 <__ssputs_r+0x58>
 8026008:	462a      	mov	r2, r5
 802600a:	f7ff ff87 	bl	8025f1c <_realloc_r>
 802600e:	4606      	mov	r6, r0
 8026010:	2800      	cmp	r0, #0
 8026012:	d1e1      	bne.n	8025fd8 <__ssputs_r+0x70>
 8026014:	6921      	ldr	r1, [r4, #16]
 8026016:	4650      	mov	r0, sl
 8026018:	f7fe fffc 	bl	8025014 <_free_r>
 802601c:	e7c7      	b.n	8025fae <__ssputs_r+0x46>
	...

08026020 <_svfiprintf_r>:
 8026020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026024:	4698      	mov	r8, r3
 8026026:	898b      	ldrh	r3, [r1, #12]
 8026028:	061b      	lsls	r3, r3, #24
 802602a:	b09d      	sub	sp, #116	; 0x74
 802602c:	4607      	mov	r7, r0
 802602e:	460d      	mov	r5, r1
 8026030:	4614      	mov	r4, r2
 8026032:	d50e      	bpl.n	8026052 <_svfiprintf_r+0x32>
 8026034:	690b      	ldr	r3, [r1, #16]
 8026036:	b963      	cbnz	r3, 8026052 <_svfiprintf_r+0x32>
 8026038:	2140      	movs	r1, #64	; 0x40
 802603a:	f7ff f83b 	bl	80250b4 <_malloc_r>
 802603e:	6028      	str	r0, [r5, #0]
 8026040:	6128      	str	r0, [r5, #16]
 8026042:	b920      	cbnz	r0, 802604e <_svfiprintf_r+0x2e>
 8026044:	230c      	movs	r3, #12
 8026046:	603b      	str	r3, [r7, #0]
 8026048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802604c:	e0d1      	b.n	80261f2 <_svfiprintf_r+0x1d2>
 802604e:	2340      	movs	r3, #64	; 0x40
 8026050:	616b      	str	r3, [r5, #20]
 8026052:	2300      	movs	r3, #0
 8026054:	9309      	str	r3, [sp, #36]	; 0x24
 8026056:	2320      	movs	r3, #32
 8026058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802605c:	f8cd 800c 	str.w	r8, [sp, #12]
 8026060:	2330      	movs	r3, #48	; 0x30
 8026062:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802620c <_svfiprintf_r+0x1ec>
 8026066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802606a:	f04f 0901 	mov.w	r9, #1
 802606e:	4623      	mov	r3, r4
 8026070:	469a      	mov	sl, r3
 8026072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026076:	b10a      	cbz	r2, 802607c <_svfiprintf_r+0x5c>
 8026078:	2a25      	cmp	r2, #37	; 0x25
 802607a:	d1f9      	bne.n	8026070 <_svfiprintf_r+0x50>
 802607c:	ebba 0b04 	subs.w	fp, sl, r4
 8026080:	d00b      	beq.n	802609a <_svfiprintf_r+0x7a>
 8026082:	465b      	mov	r3, fp
 8026084:	4622      	mov	r2, r4
 8026086:	4629      	mov	r1, r5
 8026088:	4638      	mov	r0, r7
 802608a:	f7ff ff6d 	bl	8025f68 <__ssputs_r>
 802608e:	3001      	adds	r0, #1
 8026090:	f000 80aa 	beq.w	80261e8 <_svfiprintf_r+0x1c8>
 8026094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026096:	445a      	add	r2, fp
 8026098:	9209      	str	r2, [sp, #36]	; 0x24
 802609a:	f89a 3000 	ldrb.w	r3, [sl]
 802609e:	2b00      	cmp	r3, #0
 80260a0:	f000 80a2 	beq.w	80261e8 <_svfiprintf_r+0x1c8>
 80260a4:	2300      	movs	r3, #0
 80260a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80260aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80260ae:	f10a 0a01 	add.w	sl, sl, #1
 80260b2:	9304      	str	r3, [sp, #16]
 80260b4:	9307      	str	r3, [sp, #28]
 80260b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80260ba:	931a      	str	r3, [sp, #104]	; 0x68
 80260bc:	4654      	mov	r4, sl
 80260be:	2205      	movs	r2, #5
 80260c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80260c4:	4851      	ldr	r0, [pc, #324]	; (802620c <_svfiprintf_r+0x1ec>)
 80260c6:	f7da f8ab 	bl	8000220 <memchr>
 80260ca:	9a04      	ldr	r2, [sp, #16]
 80260cc:	b9d8      	cbnz	r0, 8026106 <_svfiprintf_r+0xe6>
 80260ce:	06d0      	lsls	r0, r2, #27
 80260d0:	bf44      	itt	mi
 80260d2:	2320      	movmi	r3, #32
 80260d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80260d8:	0711      	lsls	r1, r2, #28
 80260da:	bf44      	itt	mi
 80260dc:	232b      	movmi	r3, #43	; 0x2b
 80260de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80260e2:	f89a 3000 	ldrb.w	r3, [sl]
 80260e6:	2b2a      	cmp	r3, #42	; 0x2a
 80260e8:	d015      	beq.n	8026116 <_svfiprintf_r+0xf6>
 80260ea:	9a07      	ldr	r2, [sp, #28]
 80260ec:	4654      	mov	r4, sl
 80260ee:	2000      	movs	r0, #0
 80260f0:	f04f 0c0a 	mov.w	ip, #10
 80260f4:	4621      	mov	r1, r4
 80260f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80260fa:	3b30      	subs	r3, #48	; 0x30
 80260fc:	2b09      	cmp	r3, #9
 80260fe:	d94e      	bls.n	802619e <_svfiprintf_r+0x17e>
 8026100:	b1b0      	cbz	r0, 8026130 <_svfiprintf_r+0x110>
 8026102:	9207      	str	r2, [sp, #28]
 8026104:	e014      	b.n	8026130 <_svfiprintf_r+0x110>
 8026106:	eba0 0308 	sub.w	r3, r0, r8
 802610a:	fa09 f303 	lsl.w	r3, r9, r3
 802610e:	4313      	orrs	r3, r2
 8026110:	9304      	str	r3, [sp, #16]
 8026112:	46a2      	mov	sl, r4
 8026114:	e7d2      	b.n	80260bc <_svfiprintf_r+0x9c>
 8026116:	9b03      	ldr	r3, [sp, #12]
 8026118:	1d19      	adds	r1, r3, #4
 802611a:	681b      	ldr	r3, [r3, #0]
 802611c:	9103      	str	r1, [sp, #12]
 802611e:	2b00      	cmp	r3, #0
 8026120:	bfbb      	ittet	lt
 8026122:	425b      	neglt	r3, r3
 8026124:	f042 0202 	orrlt.w	r2, r2, #2
 8026128:	9307      	strge	r3, [sp, #28]
 802612a:	9307      	strlt	r3, [sp, #28]
 802612c:	bfb8      	it	lt
 802612e:	9204      	strlt	r2, [sp, #16]
 8026130:	7823      	ldrb	r3, [r4, #0]
 8026132:	2b2e      	cmp	r3, #46	; 0x2e
 8026134:	d10c      	bne.n	8026150 <_svfiprintf_r+0x130>
 8026136:	7863      	ldrb	r3, [r4, #1]
 8026138:	2b2a      	cmp	r3, #42	; 0x2a
 802613a:	d135      	bne.n	80261a8 <_svfiprintf_r+0x188>
 802613c:	9b03      	ldr	r3, [sp, #12]
 802613e:	1d1a      	adds	r2, r3, #4
 8026140:	681b      	ldr	r3, [r3, #0]
 8026142:	9203      	str	r2, [sp, #12]
 8026144:	2b00      	cmp	r3, #0
 8026146:	bfb8      	it	lt
 8026148:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802614c:	3402      	adds	r4, #2
 802614e:	9305      	str	r3, [sp, #20]
 8026150:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802621c <_svfiprintf_r+0x1fc>
 8026154:	7821      	ldrb	r1, [r4, #0]
 8026156:	2203      	movs	r2, #3
 8026158:	4650      	mov	r0, sl
 802615a:	f7da f861 	bl	8000220 <memchr>
 802615e:	b140      	cbz	r0, 8026172 <_svfiprintf_r+0x152>
 8026160:	2340      	movs	r3, #64	; 0x40
 8026162:	eba0 000a 	sub.w	r0, r0, sl
 8026166:	fa03 f000 	lsl.w	r0, r3, r0
 802616a:	9b04      	ldr	r3, [sp, #16]
 802616c:	4303      	orrs	r3, r0
 802616e:	3401      	adds	r4, #1
 8026170:	9304      	str	r3, [sp, #16]
 8026172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026176:	4826      	ldr	r0, [pc, #152]	; (8026210 <_svfiprintf_r+0x1f0>)
 8026178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802617c:	2206      	movs	r2, #6
 802617e:	f7da f84f 	bl	8000220 <memchr>
 8026182:	2800      	cmp	r0, #0
 8026184:	d038      	beq.n	80261f8 <_svfiprintf_r+0x1d8>
 8026186:	4b23      	ldr	r3, [pc, #140]	; (8026214 <_svfiprintf_r+0x1f4>)
 8026188:	bb1b      	cbnz	r3, 80261d2 <_svfiprintf_r+0x1b2>
 802618a:	9b03      	ldr	r3, [sp, #12]
 802618c:	3307      	adds	r3, #7
 802618e:	f023 0307 	bic.w	r3, r3, #7
 8026192:	3308      	adds	r3, #8
 8026194:	9303      	str	r3, [sp, #12]
 8026196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026198:	4433      	add	r3, r6
 802619a:	9309      	str	r3, [sp, #36]	; 0x24
 802619c:	e767      	b.n	802606e <_svfiprintf_r+0x4e>
 802619e:	fb0c 3202 	mla	r2, ip, r2, r3
 80261a2:	460c      	mov	r4, r1
 80261a4:	2001      	movs	r0, #1
 80261a6:	e7a5      	b.n	80260f4 <_svfiprintf_r+0xd4>
 80261a8:	2300      	movs	r3, #0
 80261aa:	3401      	adds	r4, #1
 80261ac:	9305      	str	r3, [sp, #20]
 80261ae:	4619      	mov	r1, r3
 80261b0:	f04f 0c0a 	mov.w	ip, #10
 80261b4:	4620      	mov	r0, r4
 80261b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80261ba:	3a30      	subs	r2, #48	; 0x30
 80261bc:	2a09      	cmp	r2, #9
 80261be:	d903      	bls.n	80261c8 <_svfiprintf_r+0x1a8>
 80261c0:	2b00      	cmp	r3, #0
 80261c2:	d0c5      	beq.n	8026150 <_svfiprintf_r+0x130>
 80261c4:	9105      	str	r1, [sp, #20]
 80261c6:	e7c3      	b.n	8026150 <_svfiprintf_r+0x130>
 80261c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80261cc:	4604      	mov	r4, r0
 80261ce:	2301      	movs	r3, #1
 80261d0:	e7f0      	b.n	80261b4 <_svfiprintf_r+0x194>
 80261d2:	ab03      	add	r3, sp, #12
 80261d4:	9300      	str	r3, [sp, #0]
 80261d6:	462a      	mov	r2, r5
 80261d8:	4b0f      	ldr	r3, [pc, #60]	; (8026218 <_svfiprintf_r+0x1f8>)
 80261da:	a904      	add	r1, sp, #16
 80261dc:	4638      	mov	r0, r7
 80261de:	f3af 8000 	nop.w
 80261e2:	1c42      	adds	r2, r0, #1
 80261e4:	4606      	mov	r6, r0
 80261e6:	d1d6      	bne.n	8026196 <_svfiprintf_r+0x176>
 80261e8:	89ab      	ldrh	r3, [r5, #12]
 80261ea:	065b      	lsls	r3, r3, #25
 80261ec:	f53f af2c 	bmi.w	8026048 <_svfiprintf_r+0x28>
 80261f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80261f2:	b01d      	add	sp, #116	; 0x74
 80261f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80261f8:	ab03      	add	r3, sp, #12
 80261fa:	9300      	str	r3, [sp, #0]
 80261fc:	462a      	mov	r2, r5
 80261fe:	4b06      	ldr	r3, [pc, #24]	; (8026218 <_svfiprintf_r+0x1f8>)
 8026200:	a904      	add	r1, sp, #16
 8026202:	4638      	mov	r0, r7
 8026204:	f7ff f978 	bl	80254f8 <_printf_i>
 8026208:	e7eb      	b.n	80261e2 <_svfiprintf_r+0x1c2>
 802620a:	bf00      	nop
 802620c:	080758c8 	.word	0x080758c8
 8026210:	080758d2 	.word	0x080758d2
 8026214:	00000000 	.word	0x00000000
 8026218:	08025f69 	.word	0x08025f69
 802621c:	080758ce 	.word	0x080758ce

08026220 <__sread>:
 8026220:	b510      	push	{r4, lr}
 8026222:	460c      	mov	r4, r1
 8026224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026228:	f000 f89c 	bl	8026364 <_read_r>
 802622c:	2800      	cmp	r0, #0
 802622e:	bfab      	itete	ge
 8026230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026232:	89a3      	ldrhlt	r3, [r4, #12]
 8026234:	181b      	addge	r3, r3, r0
 8026236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802623a:	bfac      	ite	ge
 802623c:	6563      	strge	r3, [r4, #84]	; 0x54
 802623e:	81a3      	strhlt	r3, [r4, #12]
 8026240:	bd10      	pop	{r4, pc}

08026242 <__swrite>:
 8026242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026246:	461f      	mov	r7, r3
 8026248:	898b      	ldrh	r3, [r1, #12]
 802624a:	05db      	lsls	r3, r3, #23
 802624c:	4605      	mov	r5, r0
 802624e:	460c      	mov	r4, r1
 8026250:	4616      	mov	r6, r2
 8026252:	d505      	bpl.n	8026260 <__swrite+0x1e>
 8026254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026258:	2302      	movs	r3, #2
 802625a:	2200      	movs	r2, #0
 802625c:	f000 f868 	bl	8026330 <_lseek_r>
 8026260:	89a3      	ldrh	r3, [r4, #12]
 8026262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802626a:	81a3      	strh	r3, [r4, #12]
 802626c:	4632      	mov	r2, r6
 802626e:	463b      	mov	r3, r7
 8026270:	4628      	mov	r0, r5
 8026272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026276:	f000 b817 	b.w	80262a8 <_write_r>

0802627a <__sseek>:
 802627a:	b510      	push	{r4, lr}
 802627c:	460c      	mov	r4, r1
 802627e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026282:	f000 f855 	bl	8026330 <_lseek_r>
 8026286:	1c43      	adds	r3, r0, #1
 8026288:	89a3      	ldrh	r3, [r4, #12]
 802628a:	bf15      	itete	ne
 802628c:	6560      	strne	r0, [r4, #84]	; 0x54
 802628e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026296:	81a3      	strheq	r3, [r4, #12]
 8026298:	bf18      	it	ne
 802629a:	81a3      	strhne	r3, [r4, #12]
 802629c:	bd10      	pop	{r4, pc}

0802629e <__sclose>:
 802629e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80262a2:	f000 b813 	b.w	80262cc <_close_r>
	...

080262a8 <_write_r>:
 80262a8:	b538      	push	{r3, r4, r5, lr}
 80262aa:	4d07      	ldr	r5, [pc, #28]	; (80262c8 <_write_r+0x20>)
 80262ac:	4604      	mov	r4, r0
 80262ae:	4608      	mov	r0, r1
 80262b0:	4611      	mov	r1, r2
 80262b2:	2200      	movs	r2, #0
 80262b4:	602a      	str	r2, [r5, #0]
 80262b6:	461a      	mov	r2, r3
 80262b8:	f7dc facf 	bl	800285a <_write>
 80262bc:	1c43      	adds	r3, r0, #1
 80262be:	d102      	bne.n	80262c6 <_write_r+0x1e>
 80262c0:	682b      	ldr	r3, [r5, #0]
 80262c2:	b103      	cbz	r3, 80262c6 <_write_r+0x1e>
 80262c4:	6023      	str	r3, [r4, #0]
 80262c6:	bd38      	pop	{r3, r4, r5, pc}
 80262c8:	2004a538 	.word	0x2004a538

080262cc <_close_r>:
 80262cc:	b538      	push	{r3, r4, r5, lr}
 80262ce:	4d06      	ldr	r5, [pc, #24]	; (80262e8 <_close_r+0x1c>)
 80262d0:	2300      	movs	r3, #0
 80262d2:	4604      	mov	r4, r0
 80262d4:	4608      	mov	r0, r1
 80262d6:	602b      	str	r3, [r5, #0]
 80262d8:	f7dc fadb 	bl	8002892 <_close>
 80262dc:	1c43      	adds	r3, r0, #1
 80262de:	d102      	bne.n	80262e6 <_close_r+0x1a>
 80262e0:	682b      	ldr	r3, [r5, #0]
 80262e2:	b103      	cbz	r3, 80262e6 <_close_r+0x1a>
 80262e4:	6023      	str	r3, [r4, #0]
 80262e6:	bd38      	pop	{r3, r4, r5, pc}
 80262e8:	2004a538 	.word	0x2004a538

080262ec <_fstat_r>:
 80262ec:	b538      	push	{r3, r4, r5, lr}
 80262ee:	4d07      	ldr	r5, [pc, #28]	; (802630c <_fstat_r+0x20>)
 80262f0:	2300      	movs	r3, #0
 80262f2:	4604      	mov	r4, r0
 80262f4:	4608      	mov	r0, r1
 80262f6:	4611      	mov	r1, r2
 80262f8:	602b      	str	r3, [r5, #0]
 80262fa:	f7dc fad6 	bl	80028aa <_fstat>
 80262fe:	1c43      	adds	r3, r0, #1
 8026300:	d102      	bne.n	8026308 <_fstat_r+0x1c>
 8026302:	682b      	ldr	r3, [r5, #0]
 8026304:	b103      	cbz	r3, 8026308 <_fstat_r+0x1c>
 8026306:	6023      	str	r3, [r4, #0]
 8026308:	bd38      	pop	{r3, r4, r5, pc}
 802630a:	bf00      	nop
 802630c:	2004a538 	.word	0x2004a538

08026310 <_isatty_r>:
 8026310:	b538      	push	{r3, r4, r5, lr}
 8026312:	4d06      	ldr	r5, [pc, #24]	; (802632c <_isatty_r+0x1c>)
 8026314:	2300      	movs	r3, #0
 8026316:	4604      	mov	r4, r0
 8026318:	4608      	mov	r0, r1
 802631a:	602b      	str	r3, [r5, #0]
 802631c:	f7dc fad5 	bl	80028ca <_isatty>
 8026320:	1c43      	adds	r3, r0, #1
 8026322:	d102      	bne.n	802632a <_isatty_r+0x1a>
 8026324:	682b      	ldr	r3, [r5, #0]
 8026326:	b103      	cbz	r3, 802632a <_isatty_r+0x1a>
 8026328:	6023      	str	r3, [r4, #0]
 802632a:	bd38      	pop	{r3, r4, r5, pc}
 802632c:	2004a538 	.word	0x2004a538

08026330 <_lseek_r>:
 8026330:	b538      	push	{r3, r4, r5, lr}
 8026332:	4d07      	ldr	r5, [pc, #28]	; (8026350 <_lseek_r+0x20>)
 8026334:	4604      	mov	r4, r0
 8026336:	4608      	mov	r0, r1
 8026338:	4611      	mov	r1, r2
 802633a:	2200      	movs	r2, #0
 802633c:	602a      	str	r2, [r5, #0]
 802633e:	461a      	mov	r2, r3
 8026340:	f7dc face 	bl	80028e0 <_lseek>
 8026344:	1c43      	adds	r3, r0, #1
 8026346:	d102      	bne.n	802634e <_lseek_r+0x1e>
 8026348:	682b      	ldr	r3, [r5, #0]
 802634a:	b103      	cbz	r3, 802634e <_lseek_r+0x1e>
 802634c:	6023      	str	r3, [r4, #0]
 802634e:	bd38      	pop	{r3, r4, r5, pc}
 8026350:	2004a538 	.word	0x2004a538

08026354 <_malloc_usable_size_r>:
 8026354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026358:	1f18      	subs	r0, r3, #4
 802635a:	2b00      	cmp	r3, #0
 802635c:	bfbc      	itt	lt
 802635e:	580b      	ldrlt	r3, [r1, r0]
 8026360:	18c0      	addlt	r0, r0, r3
 8026362:	4770      	bx	lr

08026364 <_read_r>:
 8026364:	b538      	push	{r3, r4, r5, lr}
 8026366:	4d07      	ldr	r5, [pc, #28]	; (8026384 <_read_r+0x20>)
 8026368:	4604      	mov	r4, r0
 802636a:	4608      	mov	r0, r1
 802636c:	4611      	mov	r1, r2
 802636e:	2200      	movs	r2, #0
 8026370:	602a      	str	r2, [r5, #0]
 8026372:	461a      	mov	r2, r3
 8026374:	f7dc fa54 	bl	8002820 <_read>
 8026378:	1c43      	adds	r3, r0, #1
 802637a:	d102      	bne.n	8026382 <_read_r+0x1e>
 802637c:	682b      	ldr	r3, [r5, #0]
 802637e:	b103      	cbz	r3, 8026382 <_read_r+0x1e>
 8026380:	6023      	str	r3, [r4, #0]
 8026382:	bd38      	pop	{r3, r4, r5, pc}
 8026384:	2004a538 	.word	0x2004a538

08026388 <_init>:
 8026388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802638a:	bf00      	nop
 802638c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802638e:	bc08      	pop	{r3}
 8026390:	469e      	mov	lr, r3
 8026392:	4770      	bx	lr

08026394 <_fini>:
 8026394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026396:	bf00      	nop
 8026398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802639a:	bc08      	pop	{r3}
 802639c:	469e      	mov	lr, r3
 802639e:	4770      	bx	lr
