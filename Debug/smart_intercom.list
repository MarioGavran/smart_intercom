
smart_intercom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009804  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011c68  080099e4  080099e4  000199e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b64c  0801b64c  00030418  2**0
                  CONTENTS
  4 .ARM          00000008  0801b64c  0801b64c  0002b64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b654  0801b654  00030418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b654  0801b654  0002b654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b658  0801b658  0002b658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  0801b65c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025eec  20000418  0801ba74  00030418  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20026304  0801ba74  00036304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030418  2**0
                  CONTENTS, READONLY
 12 .debug_info   000216a7  00000000  00000000  00030448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000410e  00000000  00000000  00051aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00055c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  000570c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b83  00000000  00000000  00058418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb94  00000000  00000000  00081f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbf1d  00000000  00000000  0009eb2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017aa4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060e4  00000000  00000000  0017aaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000418 	.word	0x20000418
 80001fc:	00000000 	.word	0x00000000
 8000200:	080099cc 	.word	0x080099cc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000041c 	.word	0x2000041c
 800021c:	080099cc 	.word	0x080099cc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b96e 	b.w	80005c4 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468c      	mov	ip, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8083 	bne.w	8000416 <__udivmoddi4+0x116>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d947      	bls.n	80003a6 <__udivmoddi4+0xa6>
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	b142      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031c:	f1c2 0020 	rsb	r0, r2, #32
 8000320:	fa24 f000 	lsr.w	r0, r4, r0
 8000324:	4091      	lsls	r1, r2
 8000326:	4097      	lsls	r7, r2
 8000328:	ea40 0c01 	orr.w	ip, r0, r1
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbbc f6f8 	udiv	r6, ip, r8
 8000338:	fa1f fe87 	uxth.w	lr, r7
 800033c:	fb08 c116 	mls	r1, r8, r6, ip
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb06 f10e 	mul.w	r1, r6, lr
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000352:	f080 8119 	bcs.w	8000588 <__udivmoddi4+0x288>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8116 	bls.w	8000588 <__udivmoddi4+0x288>
 800035c:	3e02      	subs	r6, #2
 800035e:	443b      	add	r3, r7
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45a6      	cmp	lr, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	193c      	adds	r4, r7, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037e:	f080 8105 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f240 8102 	bls.w	800058c <__udivmoddi4+0x28c>
 8000388:	3802      	subs	r0, #2
 800038a:	443c      	add	r4, r7
 800038c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	2600      	movs	r6, #0
 8000396:	b11d      	cbz	r5, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c5 4300 	strd	r4, r3, [r5]
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	b902      	cbnz	r2, 80003aa <__udivmoddi4+0xaa>
 80003a8:	deff      	udf	#255	; 0xff
 80003aa:	fab2 f282 	clz	r2, r2
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	d150      	bne.n	8000454 <__udivmoddi4+0x154>
 80003b2:	1bcb      	subs	r3, r1, r7
 80003b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	2601      	movs	r6, #1
 80003be:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c2:	0c21      	lsrs	r1, r4, #16
 80003c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb08 f30c 	mul.w	r3, r8, ip
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0xe4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0xe2>
 80003dc:	428b      	cmp	r3, r1
 80003de:	f200 80e9 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1ac9      	subs	r1, r1, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x10c>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x10a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80d9 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e7bf      	b.n	8000396 <__udivmoddi4+0x96>
 8000416:	428b      	cmp	r3, r1
 8000418:	d909      	bls.n	800042e <__udivmoddi4+0x12e>
 800041a:	2d00      	cmp	r5, #0
 800041c:	f000 80b1 	beq.w	8000582 <__udivmoddi4+0x282>
 8000420:	2600      	movs	r6, #0
 8000422:	e9c5 0100 	strd	r0, r1, [r5]
 8000426:	4630      	mov	r0, r6
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	fab3 f683 	clz	r6, r3
 8000432:	2e00      	cmp	r6, #0
 8000434:	d14a      	bne.n	80004cc <__udivmoddi4+0x1cc>
 8000436:	428b      	cmp	r3, r1
 8000438:	d302      	bcc.n	8000440 <__udivmoddi4+0x140>
 800043a:	4282      	cmp	r2, r0
 800043c:	f200 80b8 	bhi.w	80005b0 <__udivmoddi4+0x2b0>
 8000440:	1a84      	subs	r4, r0, r2
 8000442:	eb61 0103 	sbc.w	r1, r1, r3
 8000446:	2001      	movs	r0, #1
 8000448:	468c      	mov	ip, r1
 800044a:	2d00      	cmp	r5, #0
 800044c:	d0a8      	beq.n	80003a0 <__udivmoddi4+0xa0>
 800044e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f603 	lsr.w	r6, r0, r3
 800045c:	4097      	lsls	r7, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000466:	40d9      	lsrs	r1, r3
 8000468:	4330      	orrs	r0, r6
 800046a:	0c03      	lsrs	r3, r0, #16
 800046c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000470:	fa1f f887 	uxth.w	r8, r7
 8000474:	fb0e 1116 	mls	r1, lr, r6, r1
 8000478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047c:	fb06 f108 	mul.w	r1, r6, r8
 8000480:	4299      	cmp	r1, r3
 8000482:	fa04 f402 	lsl.w	r4, r4, r2
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x19c>
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800048e:	f080 808d 	bcs.w	80005ac <__udivmoddi4+0x2ac>
 8000492:	4299      	cmp	r1, r3
 8000494:	f240 808a 	bls.w	80005ac <__udivmoddi4+0x2ac>
 8000498:	3e02      	subs	r6, #2
 800049a:	443b      	add	r3, r7
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b281      	uxth	r1, r0
 80004a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb00 f308 	mul.w	r3, r0, r8
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x1c4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ba:	d273      	bcs.n	80005a4 <__udivmoddi4+0x2a4>
 80004bc:	428b      	cmp	r3, r1
 80004be:	d971      	bls.n	80005a4 <__udivmoddi4+0x2a4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4439      	add	r1, r7
 80004c4:	1acb      	subs	r3, r1, r3
 80004c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ca:	e778      	b.n	80003be <__udivmoddi4+0xbe>
 80004cc:	f1c6 0c20 	rsb	ip, r6, #32
 80004d0:	fa03 f406 	lsl.w	r4, r3, r6
 80004d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004d8:	431c      	orrs	r4, r3
 80004da:	fa20 f70c 	lsr.w	r7, r0, ip
 80004de:	fa01 f306 	lsl.w	r3, r1, r6
 80004e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ea:	431f      	orrs	r7, r3
 80004ec:	0c3b      	lsrs	r3, r7, #16
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fa1f f884 	uxth.w	r8, r4
 80004f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000502:	458a      	cmp	sl, r1
 8000504:	fa02 f206 	lsl.w	r2, r2, r6
 8000508:	fa00 f306 	lsl.w	r3, r0, r6
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x220>
 800050e:	1861      	adds	r1, r4, r1
 8000510:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000514:	d248      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 8000516:	458a      	cmp	sl, r1
 8000518:	d946      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800051a:	f1a9 0902 	sub.w	r9, r9, #2
 800051e:	4421      	add	r1, r4
 8000520:	eba1 010a 	sub.w	r1, r1, sl
 8000524:	b2bf      	uxth	r7, r7
 8000526:	fbb1 f0fe 	udiv	r0, r1, lr
 800052a:	fb0e 1110 	mls	r1, lr, r0, r1
 800052e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000532:	fb00 f808 	mul.w	r8, r0, r8
 8000536:	45b8      	cmp	r8, r7
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x24a>
 800053a:	19e7      	adds	r7, r4, r7
 800053c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000540:	d22e      	bcs.n	80005a0 <__udivmoddi4+0x2a0>
 8000542:	45b8      	cmp	r8, r7
 8000544:	d92c      	bls.n	80005a0 <__udivmoddi4+0x2a0>
 8000546:	3802      	subs	r0, #2
 8000548:	4427      	add	r7, r4
 800054a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800054e:	eba7 0708 	sub.w	r7, r7, r8
 8000552:	fba0 8902 	umull	r8, r9, r0, r2
 8000556:	454f      	cmp	r7, r9
 8000558:	46c6      	mov	lr, r8
 800055a:	4649      	mov	r1, r9
 800055c:	d31a      	bcc.n	8000594 <__udivmoddi4+0x294>
 800055e:	d017      	beq.n	8000590 <__udivmoddi4+0x290>
 8000560:	b15d      	cbz	r5, 800057a <__udivmoddi4+0x27a>
 8000562:	ebb3 020e 	subs.w	r2, r3, lr
 8000566:	eb67 0701 	sbc.w	r7, r7, r1
 800056a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800056e:	40f2      	lsrs	r2, r6
 8000570:	ea4c 0202 	orr.w	r2, ip, r2
 8000574:	40f7      	lsrs	r7, r6
 8000576:	e9c5 2700 	strd	r2, r7, [r5]
 800057a:	2600      	movs	r6, #0
 800057c:	4631      	mov	r1, r6
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e70b      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0x60>
 800058c:	4618      	mov	r0, r3
 800058e:	e6fd      	b.n	800038c <__udivmoddi4+0x8c>
 8000590:	4543      	cmp	r3, r8
 8000592:	d2e5      	bcs.n	8000560 <__udivmoddi4+0x260>
 8000594:	ebb8 0e02 	subs.w	lr, r8, r2
 8000598:	eb69 0104 	sbc.w	r1, r9, r4
 800059c:	3801      	subs	r0, #1
 800059e:	e7df      	b.n	8000560 <__udivmoddi4+0x260>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e7d2      	b.n	800054a <__udivmoddi4+0x24a>
 80005a4:	4660      	mov	r0, ip
 80005a6:	e78d      	b.n	80004c4 <__udivmoddi4+0x1c4>
 80005a8:	4681      	mov	r9, r0
 80005aa:	e7b9      	b.n	8000520 <__udivmoddi4+0x220>
 80005ac:	4666      	mov	r6, ip
 80005ae:	e775      	b.n	800049c <__udivmoddi4+0x19c>
 80005b0:	4630      	mov	r0, r6
 80005b2:	e74a      	b.n	800044a <__udivmoddi4+0x14a>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	4439      	add	r1, r7
 80005ba:	e713      	b.n	80003e4 <__udivmoddi4+0xe4>
 80005bc:	3802      	subs	r0, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e724      	b.n	800040c <__udivmoddi4+0x10c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <app_main_init>:
{
	setup();
}
//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_init()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	unsigned int l,ll = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	603b      	str	r3, [r7, #0]

	NT35510_Init();
 80005d2:	f000 fb91 	bl	8000cf8 <NT35510_Init>

	LCD_ClearScreen(0xFFFFU);
 80005d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005da:	f000 fac7 	bl	8000b6c <LCD_ClearScreen>
	LCD_SetDirection(HORIZONTAL_RIGHT);
 80005de:	2003      	movs	r0, #3
 80005e0:	f000 fa6c 	bl	8000abc <LCD_SetDirection>

	//==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~
	// ~=~=~ FERI logo ~=~=~
	LCD_ClearScreen(0xFFFFU);
 80005e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005e8:	f000 fac0 	bl	8000b6c <LCD_ClearScreen>
	LCD_SetWindow(240, 184, 240 + FERI_LOGO_IMG_W -1, 184 + FERI_LOGO_IMG_H -1);
 80005ec:	f44f 7393 	mov.w	r3, #294	; 0x126
 80005f0:	f240 222f 	movw	r2, #559	; 0x22f
 80005f4:	21b8      	movs	r1, #184	; 0xb8
 80005f6:	20f0      	movs	r0, #240	; 0xf0
 80005f8:	f000 f9f8 	bl	80009ec <LCD_SetWindow>
	for(l = 0; l < FERI_LOGO_IMG_SIZE; l+=2)
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	e013      	b.n	800062a <app_main_init+0x62>
	{
		FSMC_WR_DAT(((g_feri_logo_image[l] << 8) & 0xFF00U) | (g_feri_logo_image[l+1] & 0x00FFU));
 8000602:	4a28      	ldr	r2, [pc, #160]	; (80006a4 <app_main_init+0xdc>)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4413      	add	r3, r2
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b29b      	uxth	r3, r3
 800060c:	021b      	lsls	r3, r3, #8
 800060e:	b29a      	uxth	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3301      	adds	r3, #1
 8000614:	4923      	ldr	r1, [pc, #140]	; (80006a4 <app_main_init+0xdc>)
 8000616:	5ccb      	ldrb	r3, [r1, r3]
 8000618:	b29b      	uxth	r3, r3
 800061a:	4313      	orrs	r3, r2
 800061c:	b29b      	uxth	r3, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f000 f9d2 	bl	80009c8 <FSMC_WR_DAT>
	for(l = 0; l < FERI_LOGO_IMG_SIZE; l+=2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3302      	adds	r3, #2
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a1e      	ldr	r2, [pc, #120]	; (80006a8 <app_main_init+0xe0>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d9e7      	bls.n	8000602 <app_main_init+0x3a>
	for(l = 0; l < FERI_LOGO_IMG_SIZE; l+=2)
	{
		FSMC_WR_DAT(((g_feri_logo_image[l] << 8) & 0xFF00U) | (g_feri_logo_image[l+1] & 0x00FFU));
	}
	HAL_Delay(1000);
*/	LCD_SetWindow(0, 0, 799, 479);
 8000632:	f240 13df 	movw	r3, #479	; 0x1df
 8000636:	f240 321f 	movw	r2, #799	; 0x31f
 800063a:	2100      	movs	r1, #0
 800063c:	2000      	movs	r0, #0
 800063e:	f000 f9d5 	bl	80009ec <LCD_SetWindow>
	LCD_ClearScreen(0x1CFCU);
 8000642:	f641 40fc 	movw	r0, #7420	; 0x1cfc
 8000646:	f000 fa91 	bl	8000b6c <LCD_ClearScreen>

	//ov7670_init1();
	//ov7670_test_pattern(2);


	OV7670_RST_LOW;
 800064a:	2200      	movs	r2, #0
 800064c:	2104      	movs	r1, #4
 800064e:	4817      	ldr	r0, [pc, #92]	; (80006ac <app_main_init+0xe4>)
 8000650:	f002 fcaa 	bl	8002fa8 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000654:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000658:	f001 ff40 	bl	80024dc <HAL_Delay>
	OV7670_RST_HIGH;
 800065c:	2201      	movs	r2, #1
 800065e:	2104      	movs	r1, #4
 8000660:	4812      	ldr	r0, [pc, #72]	; (80006ac <app_main_init+0xe4>)
 8000662:	f002 fca1 	bl	8002fa8 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000666:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800066a:	f001 ff37 	bl	80024dc <HAL_Delay>

	ov7670_initialization();
 800066e:	f007 fea1 	bl	80083b4 <ov7670_initialization>

/*	ov7670_init1();*/
	HAL_Delay(300);
 8000672:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000676:	f001 ff31 	bl	80024dc <HAL_Delay>

	TIM1->DIER |= TIM_DIER_TDE;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <app_main_init+0xe8>)
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <app_main_init+0xe8>)
 8000680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000684:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start(&htim1);
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <app_main_init+0xec>)
 8000688:	f005 ffce 	bl	8006628 <HAL_TIM_Base_Start>

	HAL_NVIC_SetPriority(OV7670_VSYNC_EXTI_IRQn, 0, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	2100      	movs	r1, #0
 8000690:	2007      	movs	r0, #7
 8000692:	f002 f846 	bl	8002722 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7670_VSYNC_EXTI_IRQn);
 8000696:	2007      	movs	r0, #7
 8000698:	f002 f85f 	bl	800275a <HAL_NVIC_EnableIRQ>



}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	08009a04 	.word	0x08009a04
 80006a8:	0001157f 	.word	0x0001157f
 80006ac:	40021400 	.word	0x40021400
 80006b0:	40010000 	.word	0x40010000
 80006b4:	20026130 	.word	0x20026130

080006b8 <app_main_loop>:


//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_loop()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
	uint8_t buff[10] = {0};
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	809a      	strh	r2, [r3, #4]
	uint32_t milis = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
	int j,z = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
	int k = -2;
 80006d4:	f06f 0301 	mvn.w	r3, #1
 80006d8:	613b      	str	r3, [r7, #16]

	LCD_SetDirection(VERTICAL_UP);
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 f9ee 	bl	8000abc <LCD_SetDirection>
	LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
 80006e0:	f240 1303 	movw	r3, #259	; 0x103
 80006e4:	f240 1253 	movw	r2, #339	; 0x153
 80006e8:	2114      	movs	r1, #20
 80006ea:	2014      	movs	r0, #20
 80006ec:	f000 f97e 	bl	80009ec <LCD_SetWindow>
		else
			sprintf(buff, "\n");
		sprintf(buff + strlen(buff),"%03d",abs(g_no_person_score));
		LCD_PrintStr(20, 450, 0xffff, 0x0000, buff, 5);
*/
		uart_tx_process();
 80006f0:	f001 fa6a 	bl	8001bc8 <uart_tx_process>
		uart_rx_process();
 80006f4:	f001 fb94 	bl	8001e20 <uart_rx_process>

			FSMC_WR_DAT(graysc);
		}
*/		//*********************************************************************************************************************

		LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
 80006f8:	f240 1303 	movw	r3, #259	; 0x103
 80006fc:	f240 1253 	movw	r2, #339	; 0x153
 8000700:	2114      	movs	r1, #20
 8000702:	2014      	movs	r0, #20
 8000704:	f000 f972 	bl	80009ec <LCD_SetWindow>
		for(j = 0; j <= OV7670_FRAME_SIZE_QVGA - 2; j+=2)
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
 800070c:	e013      	b.n	8000736 <app_main_loop+0x7e>
			*/

			//int red =	(g_cam_buff[j] & 0xF8U) >> 3;
			//int green =	((g_cam_buff[j] & 0x07U) << 3) | ((g_cam_buff[j+1] & 0xC0U) >> 6);
			//int blue =	((g_cam_buff[j+1] & 0x1FU));
			FSMC_WR_DAT(((g_cam_buff[j+1] << 8) & 0xFF00U) | (g_cam_buff[j] & 0x00FFU));
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	3301      	adds	r3, #1
 8000712:	4a19      	ldr	r2, [pc, #100]	; (8000778 <app_main_loop+0xc0>)
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	b29b      	uxth	r3, r3
 8000718:	021b      	lsls	r3, r3, #8
 800071a:	b29a      	uxth	r2, r3
 800071c:	4916      	ldr	r1, [pc, #88]	; (8000778 <app_main_loop+0xc0>)
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	440b      	add	r3, r1
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b29b      	uxth	r3, r3
 8000726:	4313      	orrs	r3, r2
 8000728:	b29b      	uxth	r3, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f94c 	bl	80009c8 <FSMC_WR_DAT>
		for(j = 0; j <= OV7670_FRAME_SIZE_QVGA - 2; j+=2)
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	3302      	adds	r3, #2
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	4a10      	ldr	r2, [pc, #64]	; (800077c <app_main_loop+0xc4>)
 800073a:	4293      	cmp	r3, r2
 800073c:	dde7      	ble.n	800070e <app_main_loop+0x56>
		}

		if(HAL_GetTick() > milis + 1000)
 800073e:	f001 fec1 	bl	80024c4 <HAL_GetTick>
 8000742:	4602      	mov	r2, r0
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800074a:	429a      	cmp	r2, r3
 800074c:	d9d0      	bls.n	80006f0 <app_main_loop+0x38>
		{
			milis = HAL_GetTick();
 800074e:	f001 feb9 	bl	80024c4 <HAL_GetTick>
 8000752:	61f8      	str	r0, [r7, #28]
			if(milis >= (0xFFFFFFFFU - 1000U))
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	f46f 727a 	mvn.w	r2, #1000	; 0x3e8
 800075a:	4293      	cmp	r3, r2
 800075c:	d302      	bcc.n	8000764 <app_main_loop+0xac>
			{
				milis = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
 8000762:	e7c5      	b.n	80006f0 <app_main_loop+0x38>
			}
			else
			{// every second
				sprintf(buff, "\r\nHello");
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4906      	ldr	r1, [pc, #24]	; (8000780 <app_main_loop+0xc8>)
 8000768:	4618      	mov	r0, r3
 800076a:	f008 fac5 	bl	8008cf8 <siprintf>
				uart_write(buff);
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4618      	mov	r0, r3
 8000772:	f001 faa1 	bl	8001cb8 <uart_write>
		uart_tx_process();
 8000776:	e7bb      	b.n	80006f0 <app_main_loop+0x38>
 8000778:	20000448 	.word	0x20000448
 800077c:	000257fe 	.word	0x000257fe
 8000780:	080099e4 	.word	0x080099e4

08000784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_DMA_Init+0x30>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <MX_DMA_Init+0x30>)
 8000794:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_DMA_Init+0x30>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	; 0x38
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80007d2:	463b      	mov	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
 80007e0:	615a      	str	r2, [r3, #20]
 80007e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80007e4:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <MX_FSMC_Init+0xf0>)
 80007e6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80007ea:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80007ec:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <MX_FSMC_Init+0xf0>)
 80007ee:	4a2f      	ldr	r2, [pc, #188]	; (80008ac <MX_FSMC_Init+0xf4>)
 80007f0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <MX_FSMC_Init+0xf0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_FSMC_Init+0xf0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80007fe:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <MX_FSMC_Init+0xf0>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_FSMC_Init+0xf0>)
 8000806:	2210      	movs	r2, #16
 8000808:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_FSMC_Init+0xf0>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_FSMC_Init+0xf0>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000816:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_FSMC_Init+0xf0>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_FSMC_Init+0xf0>)
 800081e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000824:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_FSMC_Init+0xf0>)
 8000826:	2200      	movs	r2, #0
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_FSMC_Init+0xf0>)
 800082c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000830:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_FSMC_Init+0xf0>)
 8000834:	2200      	movs	r2, #0
 8000836:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_FSMC_Init+0xf0>)
 800083a:	2200      	movs	r2, #0
 800083c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_FSMC_Init+0xf0>)
 8000840:	2200      	movs	r2, #0
 8000842:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_FSMC_Init+0xf0>)
 8000846:	2200      	movs	r2, #0
 8000848:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_FSMC_Init+0xf0>)
 800084c:	2200      	movs	r2, #0
 800084e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 9;
 8000850:	2309      	movs	r3, #9
 8000852:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000854:	230f      	movs	r3, #15
 8000856:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 5;
 8000858:	2305      	movs	r3, #5
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 1;
 800085c:	2301      	movs	r3, #1
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000860:	2310      	movs	r3, #16
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000864:	2311      	movs	r3, #17
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000868:	2300      	movs	r3, #0
 800086a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 800086c:	2302      	movs	r3, #2
 800086e:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000870:	230f      	movs	r3, #15
 8000872:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 8000874:	2303      	movs	r3, #3
 8000876:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800087c:	2310      	movs	r3, #16
 800087e:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000880:	2311      	movs	r3, #17
 8000882:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000888:	463a      	mov	r2, r7
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_FSMC_Init+0xf0>)
 8000892:	f005 fe35 	bl	8006500 <HAL_SRAM_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_FSMC_Init+0xe8>
  {
    Error_Handler( );
 800089c:	f000 feb8 	bl	8001610 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80008a0:	bf00      	nop
 80008a2:	3738      	adds	r7, #56	; 0x38
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2002602c 	.word	0x2002602c
 80008ac:	a0000104 	.word	0xa0000104

080008b0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80008c4:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <HAL_FSMC_MspInit+0xc8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d151      	bne.n	8000970 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <HAL_FSMC_MspInit+0xc8>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <HAL_FSMC_MspInit+0xcc>)
 80008d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008da:	4a28      	ldr	r2, [pc, #160]	; (800097c <HAL_FSMC_MspInit+0xcc>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6393      	str	r3, [r2, #56]	; 0x38
 80008e2:	4b26      	ldr	r3, [pc, #152]	; (800097c <HAL_FSMC_MspInit+0xcc>)
 80008e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80008ee:	f64f 7380 	movw	r3, #65408	; 0xff80
 80008f2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000900:	230c      	movs	r3, #12
 8000902:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	4619      	mov	r1, r3
 8000908:	481d      	ldr	r0, [pc, #116]	; (8000980 <HAL_FSMC_MspInit+0xd0>)
 800090a:	f002 f9b9 	bl	8002c80 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000920:	230c      	movs	r3, #12
 8000922:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	4619      	mov	r1, r3
 8000928:	4816      	ldr	r0, [pc, #88]	; (8000984 <HAL_FSMC_MspInit+0xd4>)
 800092a:	f002 f9a9 	bl	8002c80 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 800092e:	f64c 63b0 	movw	r3, #52912	; 0xceb0
 8000932:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000940:	230c      	movs	r3, #12
 8000942:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4619      	mov	r1, r3
 8000948:	480f      	ldr	r0, [pc, #60]	; (8000988 <HAL_FSMC_MspInit+0xd8>)
 800094a:	f002 f999 	bl	8002c80 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800094e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000952:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000960:	230a      	movs	r3, #10
 8000962:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	4619      	mov	r1, r3
 8000968:	4808      	ldr	r0, [pc, #32]	; (800098c <HAL_FSMC_MspInit+0xdc>)
 800096a:	f002 f989 	bl	8002c80 <HAL_GPIO_Init>
 800096e:	e000      	b.n	8000972 <HAL_FSMC_MspInit+0xc2>
    return;
 8000970:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000434 	.word	0x20000434
 800097c:	40023800 	.word	0x40023800
 8000980:	40021000 	.word	0x40021000
 8000984:	40020400 	.word	0x40020400
 8000988:	40020c00 	.word	0x40020c00
 800098c:	40020800 	.word	0x40020800

08000990 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000998:	f7ff ff8a 	bl	80008b0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <FSMC_WR_REG>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void FSMC_WR_REG(uint32_t Reg)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	LCD_FSMC->REG = Reg;
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <FSMC_WR_REG+0x20>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	b292      	uxth	r2, r2
 80009b4:	801a      	strh	r2, [r3, #0]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000000 	.word	0x20000000

080009c8 <FSMC_WR_DAT>:
* function   :
* parameters :N/A
* retvalue   :N/A
*******************************************************************************************************************************/
void FSMC_WR_DAT(uint16_t Dat)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	80fb      	strh	r3, [r7, #6]
	LCD_FSMC->DAT = Dat;
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <FSMC_WR_DAT+0x20>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	88fa      	ldrh	r2, [r7, #6]
 80009d8:	805a      	strh	r2, [r3, #2]
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000000 	.word	0x20000000

080009ec <LCD_SetWindow>:
							LCD_SetDirection function. It calls to FSMC_WR_REG(RAMWR) function at the end.
* parameters :XS(x start address), YS(y start address), XE(x end address) and YE(y end address)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetWindow(uint16_t Xs, uint16_t Ys, uint16_t Xe, uint16_t Ye)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	4623      	mov	r3, r4
 80009fc:	80fb      	strh	r3, [r7, #6]
 80009fe:	4603      	mov	r3, r0
 8000a00:	80bb      	strh	r3, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	807b      	strh	r3, [r7, #2]
 8000a06:	4613      	mov	r3, r2
 8000a08:	803b      	strh	r3, [r7, #0]
	FSMC_WR_REG(CASET_XS_H);		FSMC_WR_DAT(Xs >> 8);
 8000a0a:	f44f 5028 	mov.w	r0, #10752	; 0x2a00
 8000a0e:	f7ff ffc9 	bl	80009a4 <FSMC_WR_REG>
 8000a12:	88fb      	ldrh	r3, [r7, #6]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ffd5 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XS_L);		FSMC_WR_DAT(Xs & 0x00FFU);
 8000a1e:	f642 2001 	movw	r0, #10753	; 0x2a01
 8000a22:	f7ff ffbf 	bl	80009a4 <FSMC_WR_REG>
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffcb 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_H);		FSMC_WR_DAT(Xe >> 8);
 8000a32:	f642 2002 	movw	r0, #10754	; 0x2a02
 8000a36:	f7ff ffb5 	bl	80009a4 <FSMC_WR_REG>
 8000a3a:	887b      	ldrh	r3, [r7, #2]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ffc1 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_L);		FSMC_WR_DAT(Xe & 0x00FFU);
 8000a46:	f642 2003 	movw	r0, #10755	; 0x2a03
 8000a4a:	f7ff ffab 	bl	80009a4 <FSMC_WR_REG>
 8000a4e:	887b      	ldrh	r3, [r7, #2]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ffb7 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_H);		FSMC_WR_DAT(Ys >> 8);
 8000a5a:	f44f 502c 	mov.w	r0, #11008	; 0x2b00
 8000a5e:	f7ff ffa1 	bl	80009a4 <FSMC_WR_REG>
 8000a62:	88bb      	ldrh	r3, [r7, #4]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ffad 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_L);		FSMC_WR_DAT(Ys & 0x00FFU);
 8000a6e:	f642 3001 	movw	r0, #11009	; 0x2b01
 8000a72:	f7ff ff97 	bl	80009a4 <FSMC_WR_REG>
 8000a76:	88bb      	ldrh	r3, [r7, #4]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ffa3 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_H);		FSMC_WR_DAT(Ye >> 8);
 8000a82:	f642 3002 	movw	r0, #11010	; 0x2b02
 8000a86:	f7ff ff8d 	bl	80009a4 <FSMC_WR_REG>
 8000a8a:	883b      	ldrh	r3, [r7, #0]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff99 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_L);		FSMC_WR_DAT(Ye & 0x00FFU);
 8000a96:	f642 3003 	movw	r0, #11011	; 0x2b03
 8000a9a:	f7ff ff83 	bl	80009a4 <FSMC_WR_REG>
 8000a9e:	883b      	ldrh	r3, [r7, #0]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff8f 	bl	80009c8 <FSMC_WR_DAT>

	FSMC_WR_REG(RAMWR);
 8000aaa:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8000aae:	f7ff ff79 	bl	80009a4 <FSMC_WR_REG>
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd90      	pop	{r4, r7, pc}
	...

08000abc <LCD_SetDirection>:
							the selected orientation.
* parameters :Direction(Use Orientation Direction Definitions defined in FSMC_NT35510.h)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetDirection(uint8_t Direction)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	switch(Direction)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	d84b      	bhi.n	8000b64 <LCD_SetDirection+0xa8>
 8000acc:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <LCD_SetDirection+0x18>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000ae5 	.word	0x08000ae5
 8000ad8:	08000b05 	.word	0x08000b05
 8000adc:	08000b25 	.word	0x08000b25
 8000ae0:	08000b45 	.word	0x08000b45
	{
		case 0:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0000U);
 8000ae4:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000ae8:	f7ff ff5c 	bl	80009a4 <FSMC_WR_REG>
 8000aec:	2000      	movs	r0, #0
 8000aee:	f7ff ff6b 	bl	80009c8 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 8000af2:	f240 331f 	movw	r3, #799	; 0x31f
 8000af6:	f240 12df 	movw	r2, #479	; 0x1df
 8000afa:	2100      	movs	r1, #0
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff ff75 	bl	80009ec <LCD_SetWindow>
		break;
 8000b02:	e02f      	b.n	8000b64 <LCD_SetDirection+0xa8>
		case 1:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00C0U);
 8000b04:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000b08:	f7ff ff4c 	bl	80009a4 <FSMC_WR_REG>
 8000b0c:	20c0      	movs	r0, #192	; 0xc0
 8000b0e:	f7ff ff5b 	bl	80009c8 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 8000b12:	f240 331f 	movw	r3, #799	; 0x31f
 8000b16:	f240 12df 	movw	r2, #479	; 0x1df
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff ff65 	bl	80009ec <LCD_SetWindow>
		break;
 8000b22:	e01f      	b.n	8000b64 <LCD_SetDirection+0xa8>
		case 2:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0060U);
 8000b24:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000b28:	f7ff ff3c 	bl	80009a4 <FSMC_WR_REG>
 8000b2c:	2060      	movs	r0, #96	; 0x60
 8000b2e:	f7ff ff4b 	bl	80009c8 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 8000b32:	f240 13df 	movw	r3, #479	; 0x1df
 8000b36:	f240 321f 	movw	r2, #799	; 0x31f
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff ff55 	bl	80009ec <LCD_SetWindow>
		break;
 8000b42:	e00f      	b.n	8000b64 <LCD_SetDirection+0xa8>
		case 3:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00A0U);
 8000b44:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000b48:	f7ff ff2c 	bl	80009a4 <FSMC_WR_REG>
 8000b4c:	20a0      	movs	r0, #160	; 0xa0
 8000b4e:	f7ff ff3b 	bl	80009c8 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 8000b52:	f240 13df 	movw	r3, #479	; 0x1df
 8000b56:	f240 321f 	movw	r2, #799	; 0x31f
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff ff45 	bl	80009ec <LCD_SetWindow>
		break;
 8000b62:	bf00      	nop
	}
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <LCD_ClearScreen>:
							orientation direction change.
* parameters :Color(Desired screen color)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_ClearScreen(uint16_t Color)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
  uint32_t i;

	for(i=0; i<(480*800); i++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	e006      	b.n	8000b8a <LCD_ClearScreen+0x1e>
	{
		FSMC_WR_DAT(Color);
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff22 	bl	80009c8 <FSMC_WR_DAT>
	for(i=0; i<(480*800); i++)
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	3301      	adds	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4a03      	ldr	r2, [pc, #12]	; (8000b9c <LCD_ClearScreen+0x30>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d9f4      	bls.n	8000b7c <LCD_ClearScreen+0x10>
	}
}
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	0005dbff 	.word	0x0005dbff

08000ba0 <LCD_PrintCh>:
* parameters :X(x start address), Y(y start address), Color(character color), Bcolor(background
							color), Character(use standard ASCII values for characters) and Size(characters size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintCh(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t Character, uint8_t Size)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	4608      	mov	r0, r1
 8000baa:	4611      	mov	r1, r2
 8000bac:	461a      	mov	r2, r3
 8000bae:	4623      	mov	r3, r4
 8000bb0:	80fb      	strh	r3, [r7, #6]
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80bb      	strh	r3, [r7, #4]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	807b      	strh	r3, [r7, #2]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	803b      	strh	r3, [r7, #0]
	uint8_t i, j, k, p=0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	733b      	strb	r3, [r7, #12]
	uint16_t c=0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	817b      	strh	r3, [r7, #10]
	LCD_SetWindow(X, Y, X+(8 * Size - 1), Y+(8  *Size - 1));									// Define area by character size.
 8000bc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	b29c      	uxth	r4, r3
 8000bda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	4413      	add	r3, r2
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	3b01      	subs	r3, #1
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	88b9      	ldrh	r1, [r7, #4]
 8000bf0:	88f8      	ldrh	r0, [r7, #6]
 8000bf2:	4622      	mov	r2, r4
 8000bf4:	f7ff fefa 	bl	80009ec <LCD_SetWindow>

	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e03c      	b.n	8000c78 <LCD_PrintCh+0xd8>
	{
		for(j=0; j < Size; j++)																					// Print each row size times.
 8000bfe:	2300      	movs	r3, #0
 8000c00:	73bb      	strb	r3, [r7, #14]
 8000c02:	e031      	b.n	8000c68 <LCD_PrintCh+0xc8>
		{
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 8000c04:	2300      	movs	r3, #0
 8000c06:	737b      	strb	r3, [r7, #13]
 8000c08:	e028      	b.n	8000c5c <LCD_PrintCh+0xbc>
			{
				if((ASCIItable[Character][i]>>(7-k)) & 0x01)
 8000c0a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	491d      	ldr	r1, [pc, #116]	; (8000c88 <LCD_PrintCh+0xe8>)
 8000c12:	00d2      	lsls	r2, r2, #3
 8000c14:	440a      	add	r2, r1
 8000c16:	4413      	add	r3, r2
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	7b7b      	ldrb	r3, [r7, #13]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	fa42 f303 	asr.w	r3, r2, r3
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <LCD_PrintCh+0x94>
					c=Color;
 8000c2e:	887b      	ldrh	r3, [r7, #2]
 8000c30:	817b      	strh	r3, [r7, #10]
 8000c32:	e001      	b.n	8000c38 <LCD_PrintCh+0x98>
				else
					c=Bcolor;
 8000c34:	883b      	ldrh	r3, [r7, #0]
 8000c36:	817b      	strh	r3, [r7, #10]
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 8000c38:	2300      	movs	r3, #0
 8000c3a:	733b      	strb	r3, [r7, #12]
 8000c3c:	e006      	b.n	8000c4c <LCD_PrintCh+0xac>
				{
					FSMC_WR_DAT(c);
 8000c3e:	897b      	ldrh	r3, [r7, #10]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fec1 	bl	80009c8 <FSMC_WR_DAT>
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 8000c46:	7b3b      	ldrb	r3, [r7, #12]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	733b      	strb	r3, [r7, #12]
 8000c4c:	7b3a      	ldrb	r2, [r7, #12]
 8000c4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d3f3      	bcc.n	8000c3e <LCD_PrintCh+0x9e>
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 8000c56:	7b7b      	ldrb	r3, [r7, #13]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	737b      	strb	r3, [r7, #13]
 8000c5c:	7b7b      	ldrb	r3, [r7, #13]
 8000c5e:	2b07      	cmp	r3, #7
 8000c60:	d9d3      	bls.n	8000c0a <LCD_PrintCh+0x6a>
		for(j=0; j < Size; j++)																					// Print each row size times.
 8000c62:	7bbb      	ldrb	r3, [r7, #14]
 8000c64:	3301      	adds	r3, #1
 8000c66:	73bb      	strb	r3, [r7, #14]
 8000c68:	7bba      	ldrb	r2, [r7, #14]
 8000c6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d3c8      	bcc.n	8000c04 <LCD_PrintCh+0x64>
	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	3301      	adds	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	2b07      	cmp	r3, #7
 8000c7c:	d9bf      	bls.n	8000bfe <LCD_PrintCh+0x5e>
				}
			}
		}
	}
}
 8000c7e:	bf00      	nop
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	0801af84 	.word	0x0801af84

08000c8c <LCD_PrintStr>:
							color), string(pointer to an array of characters, standard ASCII values) and size
							(character size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintStr(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t* String, uint8_t Size)
{
 8000c8c:	b5b0      	push	{r4, r5, r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	807b      	strh	r3, [r7, #2]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	803b      	strh	r3, [r7, #0]
	X=X-8*Size;
 8000caa:	7f3b      	ldrb	r3, [r7, #28]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	88fa      	ldrh	r2, [r7, #6]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	80fb      	strh	r3, [r7, #6]
	while(*String)
 8000cb8:	e015      	b.n	8000ce6 <LCD_PrintStr+0x5a>
		LCD_PrintCh(X = X + 8 * Size, Y, Color, Bcolor, *String++, Size);
 8000cba:	7f3b      	ldrb	r3, [r7, #28]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	80fb      	strh	r3, [r7, #6]
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	61ba      	str	r2, [r7, #24]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	883d      	ldrh	r5, [r7, #0]
 8000cd2:	887c      	ldrh	r4, [r7, #2]
 8000cd4:	88b9      	ldrh	r1, [r7, #4]
 8000cd6:	88f8      	ldrh	r0, [r7, #6]
 8000cd8:	7f3a      	ldrb	r2, [r7, #28]
 8000cda:	9201      	str	r2, [sp, #4]
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	462b      	mov	r3, r5
 8000ce0:	4622      	mov	r2, r4
 8000ce2:	f7ff ff5d 	bl	8000ba0 <LCD_PrintCh>
	while(*String)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1e5      	bne.n	8000cba <LCD_PrintStr+0x2e>
}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bdb0      	pop	{r4, r5, r7, pc}

08000cf8 <NT35510_Init>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void NT35510_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	RST_LOW;													// Reset on.
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	48fd      	ldr	r0, [pc, #1012]	; (80010f8 <NT35510_Init+0x400>)
 8000d02:	f002 f951 	bl	8002fa8 <HAL_GPIO_WritePin>
	HAL_Delay(300);											// Short delay needed on power up
 8000d06:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d0a:	f001 fbe7 	bl	80024dc <HAL_Delay>
	RST_HIGH;													// Reset off.
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2140      	movs	r1, #64	; 0x40
 8000d12:	48f9      	ldr	r0, [pc, #996]	; (80010f8 <NT35510_Init+0x400>)
 8000d14:	f002 f948 	bl	8002fa8 <HAL_GPIO_WritePin>
	HAL_Delay(800);											// Short delay needed on power up
 8000d18:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000d1c:	f001 fbde 	bl	80024dc <HAL_Delay>

	// Manufacture Command Set selection
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 8000d20:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8000d24:	f7ff fe3e 	bl	80009a4 <FSMC_WR_REG>
 8000d28:	2055      	movs	r0, #85	; 0x55
 8000d2a:	f7ff fe4d 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8000d2e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8000d32:	f7ff fe37 	bl	80009a4 <FSMC_WR_REG>
 8000d36:	20aa      	movs	r0, #170	; 0xaa
 8000d38:	f7ff fe46 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 8000d3c:	f24f 0002 	movw	r0, #61442	; 0xf002
 8000d40:	f7ff fe30 	bl	80009a4 <FSMC_WR_REG>
 8000d44:	2052      	movs	r0, #82	; 0x52
 8000d46:	f7ff fe3f 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8000d4a:	f24f 0003 	movw	r0, #61443	; 0xf003
 8000d4e:	f7ff fe29 	bl	80009a4 <FSMC_WR_REG>
 8000d52:	2008      	movs	r0, #8
 8000d54:	f7ff fe38 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0001U);		// Select page 1
 8000d58:	f24f 0004 	movw	r0, #61444	; 0xf004
 8000d5c:	f7ff fe22 	bl	80009a4 <FSMC_WR_REG>
 8000d60:	2001      	movs	r0, #1
 8000d62:	f7ff fe31 	bl	80009c8 <FSMC_WR_DAT>

	// AVDD 5.2V
	FSMC_WR_REG(SETAVDD_NORM);		FSMC_WR_DAT(0x000DU);
 8000d66:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8000d6a:	f7ff fe1b 	bl	80009a4 <FSMC_WR_REG>
 8000d6e:	200d      	movs	r0, #13
 8000d70:	f7ff fe2a 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_IDLE);		FSMC_WR_DAT(0x000DU);
 8000d74:	f24b 0001 	movw	r0, #45057	; 0xb001
 8000d78:	f7ff fe14 	bl	80009a4 <FSMC_WR_REG>
 8000d7c:	200d      	movs	r0, #13
 8000d7e:	f7ff fe23 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_PART);		FSMC_WR_DAT(0x000DU);
 8000d82:	f24b 0002 	movw	r0, #45058	; 0xb002
 8000d86:	f7ff fe0d 	bl	80009a4 <FSMC_WR_REG>
 8000d8a:	200d      	movs	r0, #13
 8000d8c:	f7ff fe1c 	bl	80009c8 <FSMC_WR_DAT>

	// AVDD ratio
	FSMC_WR_REG(BT1CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8000d90:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8000d94:	f7ff fe06 	bl	80009a4 <FSMC_WR_REG>
 8000d98:	2034      	movs	r0, #52	; 0x34
 8000d9a:	f7ff fe15 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8000d9e:	f24b 6001 	movw	r0, #46593	; 0xb601
 8000da2:	f7ff fdff 	bl	80009a4 <FSMC_WR_REG>
 8000da6:	2034      	movs	r0, #52	; 0x34
 8000da8:	f7ff fe0e 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_PART);		FSMC_WR_DAT(0x0034U);
 8000dac:	f24b 6002 	movw	r0, #46594	; 0xb602
 8000db0:	f7ff fdf8 	bl	80009a4 <FSMC_WR_REG>
 8000db4:	2034      	movs	r0, #52	; 0x34
 8000db6:	f7ff fe07 	bl	80009c8 <FSMC_WR_DAT>

	// AVEE  -5.2V
	FSMC_WR_REG(SETAVEE_NORM);		FSMC_WR_DAT(0x000DU);
 8000dba:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8000dbe:	f7ff fdf1 	bl	80009a4 <FSMC_WR_REG>
 8000dc2:	200d      	movs	r0, #13
 8000dc4:	f7ff fe00 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_IDLE);		FSMC_WR_DAT(0x000DU);
 8000dc8:	f24b 1001 	movw	r0, #45313	; 0xb101
 8000dcc:	f7ff fdea 	bl	80009a4 <FSMC_WR_REG>
 8000dd0:	200d      	movs	r0, #13
 8000dd2:	f7ff fdf9 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_PART);		FSMC_WR_DAT(0x000DU);
 8000dd6:	f24b 1002 	movw	r0, #45314	; 0xb102
 8000dda:	f7ff fde3 	bl	80009a4 <FSMC_WR_REG>
 8000dde:	200d      	movs	r0, #13
 8000de0:	f7ff fdf2 	bl	80009c8 <FSMC_WR_DAT>

	// AVEE ratio
	FSMC_WR_REG(BT2CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8000de4:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8000de8:	f7ff fddc 	bl	80009a4 <FSMC_WR_REG>
 8000dec:	2034      	movs	r0, #52	; 0x34
 8000dee:	f7ff fdeb 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8000df2:	f24b 7001 	movw	r0, #46849	; 0xb701
 8000df6:	f7ff fdd5 	bl	80009a4 <FSMC_WR_REG>
 8000dfa:	2034      	movs	r0, #52	; 0x34
 8000dfc:	f7ff fde4 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_PART);		FSMC_WR_DAT(0x0034U);
 8000e00:	f24b 7002 	movw	r0, #46850	; 0xb702
 8000e04:	f7ff fdce 	bl	80009a4 <FSMC_WR_REG>
 8000e08:	2034      	movs	r0, #52	; 0x34
 8000e0a:	f7ff fddd 	bl	80009c8 <FSMC_WR_DAT>

	// VCL  -2.5V
	FSMC_WR_REG(SETVCL_NORM);		FSMC_WR_DAT(0x0000U);
 8000e0e:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8000e12:	f7ff fdc7 	bl	80009a4 <FSMC_WR_REG>
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff fdd6 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_IDLE);		FSMC_WR_DAT(0x0000U);
 8000e1c:	f24b 2001 	movw	r0, #45569	; 0xb201
 8000e20:	f7ff fdc0 	bl	80009a4 <FSMC_WR_REG>
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff fdcf 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_PART);		FSMC_WR_DAT(0x0000U);
 8000e2a:	f24b 2002 	movw	r0, #45570	; 0xb202
 8000e2e:	f7ff fdb9 	bl	80009a4 <FSMC_WR_REG>
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fdc8 	bl	80009c8 <FSMC_WR_DAT>

	// VCL ratio
	FSMC_WR_REG(BT3CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8000e38:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8000e3c:	f7ff fdb2 	bl	80009a4 <FSMC_WR_REG>
 8000e40:	2024      	movs	r0, #36	; 0x24
 8000e42:	f7ff fdc1 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8000e46:	f64b 0001 	movw	r0, #47105	; 0xb801
 8000e4a:	f7ff fdab 	bl	80009a4 <FSMC_WR_REG>
 8000e4e:	2024      	movs	r0, #36	; 0x24
 8000e50:	f7ff fdba 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_PART);		FSMC_WR_DAT(0x0024U);
 8000e54:	f64b 0002 	movw	r0, #47106	; 0xb802
 8000e58:	f7ff fda4 	bl	80009a4 <FSMC_WR_REG>
 8000e5c:	2024      	movs	r0, #36	; 0x24
 8000e5e:	f7ff fdb3 	bl	80009c8 <FSMC_WR_DAT>

	// VGH  15V
	FSMC_WR_REG(VGHCTR);			FSMC_WR_DAT(0x01);
 8000e62:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8000e66:	f7ff fd9d 	bl	80009a4 <FSMC_WR_REG>
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f7ff fdac 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_NORM);		FSMC_WR_DAT(0x000FU);
 8000e70:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8000e74:	f7ff fd96 	bl	80009a4 <FSMC_WR_REG>
 8000e78:	200f      	movs	r0, #15
 8000e7a:	f7ff fda5 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_IDLE);		FSMC_WR_DAT(0x000FU);
 8000e7e:	f24b 3001 	movw	r0, #45825	; 0xb301
 8000e82:	f7ff fd8f 	bl	80009a4 <FSMC_WR_REG>
 8000e86:	200f      	movs	r0, #15
 8000e88:	f7ff fd9e 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_PART);		FSMC_WR_DAT(0x000FU);
 8000e8c:	f24b 3002 	movw	r0, #45826	; 0xb302
 8000e90:	f7ff fd88 	bl	80009a4 <FSMC_WR_REG>
 8000e94:	200f      	movs	r0, #15
 8000e96:	f7ff fd97 	bl	80009c8 <FSMC_WR_DAT>

	// VGH  ratio
	FSMC_WR_REG(BT4CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8000e9a:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8000e9e:	f7ff fd81 	bl	80009a4 <FSMC_WR_REG>
 8000ea2:	2034      	movs	r0, #52	; 0x34
 8000ea4:	f7ff fd90 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8000ea8:	f64b 1001 	movw	r0, #47361	; 0xb901
 8000eac:	f7ff fd7a 	bl	80009a4 <FSMC_WR_REG>
 8000eb0:	2034      	movs	r0, #52	; 0x34
 8000eb2:	f7ff fd89 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_PART);		FSMC_WR_DAT(0x0034U);
 8000eb6:	f64b 1002 	movw	r0, #47362	; 0xb902
 8000eba:	f7ff fd73 	bl	80009a4 <FSMC_WR_REG>
 8000ebe:	2034      	movs	r0, #52	; 0x34
 8000ec0:	f7ff fd82 	bl	80009c8 <FSMC_WR_DAT>

	// VGL_REG  -10V
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 8000ec4:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8000ec8:	f7ff fd6c 	bl	80009a4 <FSMC_WR_REG>
 8000ecc:	2008      	movs	r0, #8
 8000ece:	f7ff fd7b 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 8000ed2:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8000ed6:	f7ff fd65 	bl	80009a4 <FSMC_WR_REG>
 8000eda:	2008      	movs	r0, #8
 8000edc:	f7ff fd74 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(0xB501);			FSMC_WR_DAT(0x0008U);
 8000ee0:	f24b 5001 	movw	r0, #46337	; 0xb501
 8000ee4:	f7ff fd5e 	bl	80009a4 <FSMC_WR_REG>
 8000ee8:	2008      	movs	r0, #8
 8000eea:	f7ff fd6d 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC200);			FSMC_WR_DAT(0x0003U);
 8000eee:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8000ef2:	f7ff fd57 	bl	80009a4 <FSMC_WR_REG>
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	f7ff fd66 	bl	80009c8 <FSMC_WR_DAT>

	// VGLX  ratio
	FSMC_WR_REG(BT5CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8000efc:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8000f00:	f7ff fd50 	bl	80009a4 <FSMC_WR_REG>
 8000f04:	2024      	movs	r0, #36	; 0x24
 8000f06:	f7ff fd5f 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8000f0a:	f64b 2001 	movw	r0, #47617	; 0xba01
 8000f0e:	f7ff fd49 	bl	80009a4 <FSMC_WR_REG>
 8000f12:	2024      	movs	r0, #36	; 0x24
 8000f14:	f7ff fd58 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_PART);		FSMC_WR_DAT(0x0024U);
 8000f18:	f64b 2002 	movw	r0, #47618	; 0xba02
 8000f1c:	f7ff fd42 	bl	80009a4 <FSMC_WR_REG>
 8000f20:	2024      	movs	r0, #36	; 0x24
 8000f22:	f7ff fd51 	bl	80009c8 <FSMC_WR_DAT>

	// VGMP/VGSP 4.5V/0V
	FSMC_WR_REG(SETVGP_0);			FSMC_WR_DAT(0x0000U);
 8000f26:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8000f2a:	f7ff fd3b 	bl	80009a4 <FSMC_WR_REG>
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff fd4a 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_1);			FSMC_WR_DAT(0x0078U);
 8000f34:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8000f38:	f7ff fd34 	bl	80009a4 <FSMC_WR_REG>
 8000f3c:	2078      	movs	r0, #120	; 0x78
 8000f3e:	f7ff fd43 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_2);			FSMC_WR_DAT(0x0000U);
 8000f42:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8000f46:	f7ff fd2d 	bl	80009a4 <FSMC_WR_REG>
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff fd3c 	bl	80009c8 <FSMC_WR_DAT>

	// VGMN/VGSN -4.5V/0V
	FSMC_WR_REG(SETVGN_0);			FSMC_WR_DAT(0x0000U);
 8000f50:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8000f54:	f7ff fd26 	bl	80009a4 <FSMC_WR_REG>
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff fd35 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_1);			FSMC_WR_DAT(0x0078U);
 8000f5e:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8000f62:	f7ff fd1f 	bl	80009a4 <FSMC_WR_REG>
 8000f66:	2078      	movs	r0, #120	; 0x78
 8000f68:	f7ff fd2e 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_2);			FSMC_WR_DAT(0x0000U);
 8000f6c:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8000f70:	f7ff fd18 	bl	80009a4 <FSMC_WR_REG>
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fd27 	bl	80009c8 <FSMC_WR_DAT>

	// VCOM  -1.325V
	FSMC_WR_REG(SETVCMOFF_0);		FSMC_WR_DAT(0x0000);
 8000f7a:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8000f7e:	f7ff fd11 	bl	80009a4 <FSMC_WR_REG>
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff fd20 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCMOFF_1);		FSMC_WR_DAT(0x0089);
 8000f88:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8000f8c:	f7ff fd0a 	bl	80009a4 <FSMC_WR_REG>
 8000f90:	2089      	movs	r0, #137	; 0x89
 8000f92:	f7ff fd19 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(GMBCTR2_BASE | 0x0033U);    FSMC_WR_DAT(0x007FU);
*/
	//**************************************************************************************************************************//

	// Select Page 0
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 8000f96:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8000f9a:	f7ff fd03 	bl	80009a4 <FSMC_WR_REG>
 8000f9e:	2055      	movs	r0, #85	; 0x55
 8000fa0:	f7ff fd12 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8000fa4:	f24f 0001 	movw	r0, #61441	; 0xf001
 8000fa8:	f7ff fcfc 	bl	80009a4 <FSMC_WR_REG>
 8000fac:	20aa      	movs	r0, #170	; 0xaa
 8000fae:	f7ff fd0b 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 8000fb2:	f24f 0002 	movw	r0, #61442	; 0xf002
 8000fb6:	f7ff fcf5 	bl	80009a4 <FSMC_WR_REG>
 8000fba:	2052      	movs	r0, #82	; 0x52
 8000fbc:	f7ff fd04 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8000fc0:	f24f 0003 	movw	r0, #61443	; 0xf003
 8000fc4:	f7ff fcee 	bl	80009a4 <FSMC_WR_REG>
 8000fc8:	2008      	movs	r0, #8
 8000fca:	f7ff fcfd 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0000U);		// Select page 0
 8000fce:	f24f 0004 	movw	r0, #61444	; 0xf004
 8000fd2:	f7ff fce7 	bl	80009a4 <FSMC_WR_REG>
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fcf6 	bl	80009c8 <FSMC_WR_DAT>

	// DISPLAY CONTROL
	FSMC_WR_REG(DOPCTR_0);			FSMC_WR_DAT(0x00CCU);
 8000fdc:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8000fe0:	f7ff fce0 	bl	80009a4 <FSMC_WR_REG>
 8000fe4:	20cc      	movs	r0, #204	; 0xcc
 8000fe6:	f7ff fcef 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(DOPCTR_1);			FSMC_WR_DAT(0x0000U);
 8000fea:	f24b 1001 	movw	r0, #45313	; 0xb101
 8000fee:	f7ff fcd9 	bl	80009a4 <FSMC_WR_REG>
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff fce8 	bl	80009c8 <FSMC_WR_DAT>

	FSMC_WR_REG(DPRSLCTR);			FSMC_WR_DAT(0x0050U);			// Display Resolution 480RGB x 800
 8000ff8:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8000ffc:	f7ff fcd2 	bl	80009a4 <FSMC_WR_REG>
 8001000:	2050      	movs	r0, #80	; 0x50
 8001002:	f7ff fce1 	bl	80009c8 <FSMC_WR_DAT>

	// SOURCE HOLD TIME
	FSMC_WR_REG(SDHDTCTR);			FSMC_WR_DAT(0x0005U);
 8001006:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800100a:	f7ff fccb 	bl	80009a4 <FSMC_WR_REG>
 800100e:	2005      	movs	r0, #5
 8001010:	f7ff fcda 	bl	80009c8 <FSMC_WR_DAT>

	// Set Gate EQ
	FSMC_WR_REG(GSEQCTR_ST);		FSMC_WR_DAT(0x0070U);
 8001014:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8001018:	f7ff fcc4 	bl	80009a4 <FSMC_WR_REG>
 800101c:	2070      	movs	r0, #112	; 0x70
 800101e:	f7ff fcd3 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(GSEQCTR_CK);		FSMC_WR_DAT(0x0070U);
 8001022:	f24b 7001 	movw	r0, #46849	; 0xb701
 8001026:	f7ff fcbd 	bl	80009a4 <FSMC_WR_REG>
 800102a:	2070      	movs	r0, #112	; 0x70
 800102c:	f7ff fccc 	bl	80009c8 <FSMC_WR_DAT>

	// Source EQ control (Mode 2)
	FSMC_WR_REG(SDEQCTR_MOD );	FSMC_WR_DAT(0x0001U);
 8001030:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8001034:	f7ff fcb6 	bl	80009a4 <FSMC_WR_REG>
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff fcc5 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS1);	FSMC_WR_DAT(0x0003U);
 800103e:	f64b 0001 	movw	r0, #47105	; 0xb801
 8001042:	f7ff fcaf 	bl	80009a4 <FSMC_WR_REG>
 8001046:	2003      	movs	r0, #3
 8001048:	f7ff fcbe 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS2);	FSMC_WR_DAT(0x0003U);
 800104c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8001050:	f7ff fca8 	bl	80009a4 <FSMC_WR_REG>
 8001054:	2003      	movs	r0, #3
 8001056:	f7ff fcb7 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS3);	FSMC_WR_DAT(0x0003U);
 800105a:	f64b 0003 	movw	r0, #47107	; 0xb803
 800105e:	f7ff fca1 	bl	80009a4 <FSMC_WR_REG>
 8001062:	2003      	movs	r0, #3
 8001064:	f7ff fcb0 	bl	80009c8 <FSMC_WR_DAT>

	// INVERSION MODE
	FSMC_WR_REG(INVCTR_NORM);		FSMC_WR_DAT(0x0002U);
 8001068:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 800106c:	f7ff fc9a 	bl	80009a4 <FSMC_WR_REG>
 8001070:	2002      	movs	r0, #2
 8001072:	f7ff fca9 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_IDLE);		FSMC_WR_DAT(0x0000U);
 8001076:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800107a:	f7ff fc93 	bl	80009a4 <FSMC_WR_REG>
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fca2 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_PART);		FSMC_WR_DAT(0x0000U);
 8001084:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8001088:	f7ff fc8c 	bl	80009a4 <FSMC_WR_REG>
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff fc9b 	bl	80009c8 <FSMC_WR_DAT>

	// Timing control
	FSMC_WR_REG(0xC900);				FSMC_WR_DAT(0x00D0U);
 8001092:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8001096:	f7ff fc85 	bl	80009a4 <FSMC_WR_REG>
 800109a:	20d0      	movs	r0, #208	; 0xd0
 800109c:	f7ff fc94 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC901);				FSMC_WR_DAT(0x0002U);
 80010a0:	f64c 1001 	movw	r0, #51457	; 0xc901
 80010a4:	f7ff fc7e 	bl	80009a4 <FSMC_WR_REG>
 80010a8:	2002      	movs	r0, #2
 80010aa:	f7ff fc8d 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC902);				FSMC_WR_DAT(0x0050U);
 80010ae:	f64c 1002 	movw	r0, #51458	; 0xc902
 80010b2:	f7ff fc77 	bl	80009a4 <FSMC_WR_REG>
 80010b6:	2050      	movs	r0, #80	; 0x50
 80010b8:	f7ff fc86 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC903);				FSMC_WR_DAT(0x0050U);
 80010bc:	f64c 1003 	movw	r0, #51459	; 0xc903
 80010c0:	f7ff fc70 	bl	80009a4 <FSMC_WR_REG>
 80010c4:	2050      	movs	r0, #80	; 0x50
 80010c6:	f7ff fc7f 	bl	80009c8 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC904);				FSMC_WR_DAT(0x0050U);
 80010ca:	f64c 1004 	movw	r0, #51460	; 0xc904
 80010ce:	f7ff fc69 	bl	80009a4 <FSMC_WR_REG>
 80010d2:	2050      	movs	r0, #80	; 0x50
 80010d4:	f7ff fc78 	bl	80009c8 <FSMC_WR_DAT>

	//**************************************************************************************************************************//
	// User Command Set
	FSMC_WR_REG(TEON);   				FSMC_WR_DAT(0x0000U);			// V-Blanking information only
 80010d8:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 80010dc:	f7ff fc62 	bl	80009a4 <FSMC_WR_REG>
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff fc71 	bl	80009c8 <FSMC_WR_DAT>


	FSMC_WR_REG(COLMOD);   			FSMC_WR_DAT(0x0055U);		// RGB and MCU Interface Data format 16-Bits
 80010e6:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 80010ea:	f7ff fc5b 	bl	80009a4 <FSMC_WR_REG>
 80010ee:	2055      	movs	r0, #85	; 0x55
 80010f0:	f7ff fc6a 	bl	80009c8 <FSMC_WR_DAT>
 80010f4:	e002      	b.n	80010fc <NT35510_Init+0x404>
 80010f6:	bf00      	nop
 80010f8:	40020800 	.word	0x40020800
	FSMC_WR_REG(MADCTL);   			FSMC_WR_DAT(0x0000U);		// MADCTL: MY MX MV RGB MH RSMX RSMY
 80010fc:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8001100:	f7ff fc50 	bl	80009a4 <FSMC_WR_REG>
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff fc5f 	bl	80009c8 <FSMC_WR_DAT>


	FSMC_WR_REG(SLPOUT);   						// Sleep Out
 800110a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800110e:	f7ff fc49 	bl	80009a4 <FSMC_WR_REG>

	HAL_Delay(120);
 8001112:	2078      	movs	r0, #120	; 0x78
 8001114:	f001 f9e2 	bl	80024dc <HAL_Delay>

	FSMC_WR_REG(DISPON);   						// Display On
 8001118:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 800111c:	f7ff fc42 	bl	80009a4 <FSMC_WR_REG>

	HAL_Delay(200);
 8001120:	20c8      	movs	r0, #200	; 0xc8
 8001122:	f001 f9db 	bl	80024dc <HAL_Delay>

	LCD_SetDirection(VERTICAL_UP);		// Vertical-up display orientation as default
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fcc8 	bl	8000abc <LCD_SetDirection>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <MX_GPIO_Init>:

/** Configure pins
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	4b6a      	ldr	r3, [pc, #424]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a69      	ldr	r2, [pc, #420]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 8001150:	f043 0320 	orr.w	r3, r3, #32
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b67      	ldr	r3, [pc, #412]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0320 	and.w	r3, r3, #32
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	4b63      	ldr	r3, [pc, #396]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a62      	ldr	r2, [pc, #392]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b60      	ldr	r3, [pc, #384]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b5c      	ldr	r3, [pc, #368]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a5b      	ldr	r2, [pc, #364]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 8001188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b59      	ldr	r3, [pc, #356]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b55      	ldr	r3, [pc, #340]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a54      	ldr	r2, [pc, #336]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 80011a4:	f043 0310 	orr.w	r3, r3, #16
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b52      	ldr	r3, [pc, #328]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b4e      	ldr	r3, [pc, #312]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a4d      	ldr	r2, [pc, #308]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a46      	ldr	r2, [pc, #280]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b40      	ldr	r3, [pc, #256]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a3f      	ldr	r2, [pc, #252]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <MX_GPIO_Init+0x1c4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OV7670_RST_GPIO_Port, OV7670_RST_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2104      	movs	r1, #4
 800120e:	483a      	ldr	r0, [pc, #232]	; (80012f8 <MX_GPIO_Init+0x1c8>)
 8001210:	f001 feca 	bl	8002fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800121a:	4838      	ldr	r0, [pc, #224]	; (80012fc <MX_GPIO_Init+0x1cc>)
 800121c:	f001 fec4 	bl	8002fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RST_GPIO_Port, FSMC_RST_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2140      	movs	r1, #64	; 0x40
 8001224:	4836      	ldr	r0, [pc, #216]	; (8001300 <MX_GPIO_Init+0x1d0>)
 8001226:	f001 febf 	bl	8002fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_RST_Pin;
 800122a:	2304      	movs	r3, #4
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OV7670_RST_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	482d      	ldr	r0, [pc, #180]	; (80012f8 <MX_GPIO_Init+0x1c8>)
 8001242:	f001 fd1d 	bl	8002c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OV7670_D0_Pin|OV7670_D1_Pin|OV7670_D2_Pin|OV7670_D3_Pin
 8001246:	23ff      	movs	r3, #255	; 0xff
 8001248:	61fb      	str	r3, [r7, #28]
                          |OV7670_D4_Pin|OV7670_D5_Pin|OV7670_D6_Pin|OV7670_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4619      	mov	r1, r3
 8001258:	4828      	ldr	r0, [pc, #160]	; (80012fc <MX_GPIO_Init+0x1cc>)
 800125a:	f001 fd11 	bl	8002c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_HREF_Pin;
 800125e:	2301      	movs	r3, #1
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001262:	4b28      	ldr	r3, [pc, #160]	; (8001304 <MX_GPIO_Init+0x1d4>)
 8001264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_HREF_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4825      	ldr	r0, [pc, #148]	; (8001308 <MX_GPIO_Init+0x1d8>)
 8001272:	f001 fd05 	bl	8002c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_VSYNC_Pin;
 8001276:	2302      	movs	r3, #2
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <MX_GPIO_Init+0x1dc>)
 800127c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	4619      	mov	r1, r3
 8001288:	481f      	ldr	r0, [pc, #124]	; (8001308 <MX_GPIO_Init+0x1d8>)
 800128a:	f001 fcf9 	bl	8002c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800128e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4815      	ldr	r0, [pc, #84]	; (80012fc <MX_GPIO_Init+0x1cc>)
 80012a8:	f001 fcea 	bl	8002c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RST_Pin;
 80012ac:	2340      	movs	r3, #64	; 0x40
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RST_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <MX_GPIO_Init+0x1d0>)
 80012c4:	f001 fcdc 	bl	8002c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_GPIO_Init+0x1d0>)
 80012e6:	f001 fccb 	bl	8002c80 <HAL_GPIO_Init>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);*/

}
 80012ea:	bf00      	nop
 80012ec:	3730      	adds	r7, #48	; 0x30
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40021400 	.word	0x40021400
 80012fc:	40020400 	.word	0x40020400
 8001300:	40020800 	.word	0x40020800
 8001304:	10210000 	.word	0x10210000
 8001308:	40021800 	.word	0x40021800
 800130c:	10310000 	.word	0x10310000

08001310 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_I2C2_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <MX_I2C2_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_I2C2_Init+0x50>)
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <MX_I2C2_Init+0x58>)
 800131e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_I2C2_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 66;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_I2C2_Init+0x50>)
 8001328:	2242      	movs	r2, #66	; 0x42
 800132a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_I2C2_Init+0x50>)
 800132e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001332:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MX_I2C2_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_I2C2_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MX_I2C2_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_I2C2_Init+0x50>)
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_I2C2_Init+0x50>)
 800134e:	f001 fe5d 	bl	800300c <HAL_I2C_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001358:	f000 f95a 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2002607c 	.word	0x2002607c
 8001364:	40005800 	.word	0x40005800
 8001368:	00061a80 	.word	0x00061a80

0800136c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <HAL_I2C_MspInit+0x94>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d133      	bne.n	80013f6 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <HAL_I2C_MspInit+0x98>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <HAL_I2C_MspInit+0x98>)
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_I2C_MspInit+0x98>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0320 	and.w	r3, r3, #32
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013aa:	2303      	movs	r3, #3
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ae:	2312      	movs	r3, #18
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013ba:	2304      	movs	r3, #4
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4810      	ldr	r0, [pc, #64]	; (8001408 <HAL_I2C_MspInit+0x9c>)
 80013c6:	f001 fc5b 	bl	8002c80 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_I2C_MspInit+0x98>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <HAL_I2C_MspInit+0x98>)
 80013d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_I2C_MspInit+0x98>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2021      	movs	r0, #33	; 0x21
 80013ec:	f001 f999 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80013f0:	2021      	movs	r0, #33	; 0x21
 80013f2:	f001 f9b2 	bl	800275a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80013f6:	bf00      	nop
 80013f8:	3728      	adds	r7, #40	; 0x28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40005800 	.word	0x40005800
 8001404:	40023800 	.word	0x40023800
 8001408:	40021400 	.word	0x40021400

0800140c <i2c_read_reg>:
extern I2C_HandleTypeDef hi2c2;


//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
uint8_t i2c_read_reg(uint8_t address, uint8_t reg)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af02      	add	r7, sp, #8
 8001412:	4603      	mov	r3, r0
 8001414:	460a      	mov	r2, r1
 8001416:	71fb      	strb	r3, [r7, #7]
 8001418:	4613      	mov	r3, r2
 800141a:	71bb      	strb	r3, [r7, #6]
	tx_data[0] = reg;
 800141c:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <i2c_read_reg+0x48>)
 800141e:	79bb      	ldrb	r3, [r7, #6]
 8001420:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 1, 10);
 8001422:	230a      	movs	r3, #10
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2301      	movs	r3, #1
 8001428:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <i2c_read_reg+0x48>)
 800142a:	2142      	movs	r1, #66	; 0x42
 800142c:	480a      	ldr	r0, [pc, #40]	; (8001458 <i2c_read_reg+0x4c>)
 800142e:	f001 ff31 	bl	8003294 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, 0x42U, rx_data, 1, 10);
 8001432:	230a      	movs	r3, #10
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2301      	movs	r3, #1
 8001438:	4a08      	ldr	r2, [pc, #32]	; (800145c <i2c_read_reg+0x50>)
 800143a:	2142      	movs	r1, #66	; 0x42
 800143c:	4806      	ldr	r0, [pc, #24]	; (8001458 <i2c_read_reg+0x4c>)
 800143e:	f002 f827 	bl	8003490 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 8001442:	2001      	movs	r0, #1
 8001444:	f001 f84a 	bl	80024dc <HAL_Delay>
	return rx_data[0];
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <i2c_read_reg+0x50>)
 800144a:	781b      	ldrb	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000438 	.word	0x20000438
 8001458:	2002607c 	.word	0x2002607c
 800145c:	20000440 	.word	0x20000440

08001460 <i2c_write_reg>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void i2c_write_reg(uint8_t address, uint8_t reg, uint8_t data)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af02      	add	r7, sp, #8
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	460b      	mov	r3, r1
 800146c:	71bb      	strb	r3, [r7, #6]
 800146e:	4613      	mov	r3, r2
 8001470:	717b      	strb	r3, [r7, #5]
	tx_data[0] = reg;
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <i2c_write_reg+0x3c>)
 8001474:	79bb      	ldrb	r3, [r7, #6]
 8001476:	7013      	strb	r3, [r2, #0]
	tx_data[1] = data;
 8001478:	4a08      	ldr	r2, [pc, #32]	; (800149c <i2c_write_reg+0x3c>)
 800147a:	797b      	ldrb	r3, [r7, #5]
 800147c:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 2, 10);
 800147e:	230a      	movs	r3, #10
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2302      	movs	r3, #2
 8001484:	4a05      	ldr	r2, [pc, #20]	; (800149c <i2c_write_reg+0x3c>)
 8001486:	2142      	movs	r1, #66	; 0x42
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <i2c_write_reg+0x40>)
 800148a:	f001 ff03 	bl	8003294 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800148e:	2001      	movs	r0, #1
 8001490:	f001 f824 	bl	80024dc <HAL_Delay>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000438 	.word	0x20000438
 80014a0:	2002607c 	.word	0x2002607c

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a8:	f000 ffa6 	bl	80023f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ac:	f000 f812 	bl	80014d4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b0:	f7ff fe3e 	bl	8001130 <MX_GPIO_Init>
  MX_DMA_Init();
 80014b4:	f7ff f966 	bl	8000784 <MX_DMA_Init>
  MX_TIM1_Init();
 80014b8:	f000 faa2 	bl	8001a00 <MX_TIM1_Init>
  MX_FSMC_Init();
 80014bc:	f7ff f97c 	bl	80007b8 <MX_FSMC_Init>
  MX_I2C2_Init();
 80014c0:	f7ff ff26 	bl	8001310 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 80014c4:	f000 fef2 	bl	80022ac <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 80014c8:	f7ff f87e 	bl	80005c8 <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main_loop();
 80014cc:	f7ff f8f4 	bl	80006b8 <app_main_loop>
 80014d0:	e7fc      	b.n	80014cc <main+0x28>
	...

080014d4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b0aa      	sub	sp, #168	; 0xa8
 80014d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014de:	2234      	movs	r2, #52	; 0x34
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f007 f814 	bl	8008510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	2258      	movs	r2, #88	; 0x58
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f007 f805 	bl	8008510 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <_Z18SystemClock_Configv+0x134>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a3e      	ldr	r2, [pc, #248]	; (8001608 <_Z18SystemClock_Configv+0x134>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <_Z18SystemClock_Configv+0x134>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b39      	ldr	r3, [pc, #228]	; (800160c <_Z18SystemClock_Configv+0x138>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a38      	ldr	r2, [pc, #224]	; (800160c <_Z18SystemClock_Configv+0x138>)
 800152c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <_Z18SystemClock_Configv+0x138>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800153e:	2302      	movs	r3, #2
 8001540:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001542:	2301      	movs	r3, #1
 8001544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001548:	2310      	movs	r3, #16
 800154a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154e:	2302      	movs	r3, #2
 8001550:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 800155a:	2308      	movs	r3, #8
 800155c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001560:	2364      	movs	r3, #100	; 0x64
 8001562:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001566:	2302      	movs	r3, #2
 8001568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800156c:	2302      	movs	r3, #2
 800156e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001578:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fd3b 	bl	8005ff8 <HAL_RCC_OscConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf14      	ite	ne
 8001588:	2301      	movne	r3, #1
 800158a:	2300      	moveq	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8001592:	f000 f83d 	bl	8001610 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001596:	230f      	movs	r3, #15
 8001598:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159a:	2302      	movs	r3, #2
 800159c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015b0:	2103      	movs	r1, #3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f004 f85c 	bl	8005670 <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bf14      	ite	ne
 80015be:	2301      	movne	r3, #1
 80015c0:	2300      	moveq	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 80015c8:	f000 f822 	bl	8001610 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
 80015cc:	2304      	movs	r3, #4
 80015ce:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80015d0:	2301      	movs	r3, #1
 80015d2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	4618      	mov	r0, r3
 80015dc:	f004 fa80 	bl	8005ae0 <HAL_RCCEx_PeriphCLKConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bf14      	ite	ne
 80015e6:	2301      	movne	r3, #1
 80015e8:	2300      	moveq	r3, #0
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <_Z18SystemClock_Configv+0x120>
  {
    Error_Handler();
 80015f0:	f000 f80e 	bl	8001610 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_5);
 80015f4:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80015f8:	2100      	movs	r1, #0
 80015fa:	2001      	movs	r0, #1
 80015fc:	f004 f91e 	bl	800583c <HAL_RCC_MCOConfig>
}
 8001600:	bf00      	nop
 8001602:	37a8      	adds	r7, #168	; 0xa8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40023800 	.word	0x40023800
 800160c:	40007000 	.word	0x40007000

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	e7fe      	b.n	8001618 <Error_Handler+0x8>

0800161a <ov7670_write_register>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_write_register(unsigned char reg, unsigned char val)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	460a      	mov	r2, r1
 8001624:	71fb      	strb	r3, [r7, #7]
 8001626:	4613      	mov	r3, r2
 8001628:	71bb      	strb	r3, [r7, #6]
	i2c_write_reg(0x42U, reg, val);
 800162a:	79ba      	ldrb	r2, [r7, #6]
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4619      	mov	r1, r3
 8001630:	2042      	movs	r0, #66	; 0x42
 8001632:	f7ff ff15 	bl	8001460 <i2c_write_reg>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <ov7670_read_register>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
uint8_t ov7670_read_register(unsigned char reg)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	71fb      	strb	r3, [r7, #7]
	return i2c_read_reg(0x42U, reg);
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	4619      	mov	r1, r3
 800164c:	2042      	movs	r0, #66	; 0x42
 800164e:	f7ff fedd 	bl	800140c <i2c_read_reg>
 8001652:	4603      	mov	r3, r0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_GPIO_EXTI_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == OV7670_VSYNC_Pin)
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d102      	bne.n	8001672 <HAL_GPIO_EXTI_Callback+0x16>
		EXTI1_VSYNC_Callback();
 800166c:	f000 f838 	bl	80016e0 <EXTI1_VSYNC_Callback>
	else if(GPIO_Pin == OV7670_HREF_Pin)
		EXTI0_HREF_Callback();
}
 8001670:	e004      	b.n	800167c <HAL_GPIO_EXTI_Callback+0x20>
	else if(GPIO_Pin == OV7670_HREF_Pin)
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_GPIO_EXTI_Callback+0x20>
		EXTI0_HREF_Callback();
 8001678:	f000 f804 	bl	8001684 <EXTI0_HREF_Callback>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <EXTI0_HREF_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI0_HREF_Callback()
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	// Falling edge
	HAL_DMA_Abort(&hdma_tim1_trig);
 8001688:	4810      	ldr	r0, [pc, #64]	; (80016cc <EXTI0_HREF_Callback+0x48>)
 800168a:	f001 f978 	bl	800297e <HAL_DMA_Abort>
	HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)(g_cam_buff + g_offset), 640);
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <EXTI0_HREF_Callback+0x4c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <EXTI0_HREF_Callback+0x50>)
 8001694:	4413      	add	r3, r2
 8001696:	461a      	mov	r2, r3
 8001698:	f44f 7320 	mov.w	r3, #640	; 0x280
 800169c:	490e      	ldr	r1, [pc, #56]	; (80016d8 <EXTI0_HREF_Callback+0x54>)
 800169e:	480b      	ldr	r0, [pc, #44]	; (80016cc <EXTI0_HREF_Callback+0x48>)
 80016a0:	f001 f932 	bl	8002908 <HAL_DMA_Start>
	if(g_cam_buff + g_offset >= g_cam_buff + OV7670_FRAME_SIZE_QVGA - 640)//38080=38400-320
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <EXTI0_HREF_Callback+0x4c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <EXTI0_HREF_Callback+0x50>)
 80016aa:	4413      	add	r3, r2
 80016ac:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <EXTI0_HREF_Callback+0x58>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d303      	bcc.n	80016ba <EXTI0_HREF_Callback+0x36>
		g_offset = 0;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <EXTI0_HREF_Callback+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
	else
		g_offset += 640;
}
 80016b8:	e005      	b.n	80016c6 <EXTI0_HREF_Callback+0x42>
		g_offset += 640;
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <EXTI0_HREF_Callback+0x4c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80016c2:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <EXTI0_HREF_Callback+0x4c>)
 80016c4:	6013      	str	r3, [r2, #0]
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200260d0 	.word	0x200260d0
 80016d0:	20025ec8 	.word	0x20025ec8
 80016d4:	20000448 	.word	0x20000448
 80016d8:	40020410 	.word	0x40020410
 80016dc:	200259c8 	.word	0x200259c8

080016e0 <EXTI1_VSYNC_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI1_VSYNC_Callback()
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	// Rising edge
	if(OV7670_VSYNC_GPIO_Port->IDR & OV7670_VSYNC_Pin)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <EXTI1_VSYNC_Callback+0x54>)
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <EXTI1_VSYNC_Callback+0x1e>
	{
		HAL_DMA_Abort(&hdma_tim1_trig);
 80016f0:	4811      	ldr	r0, [pc, #68]	; (8001738 <EXTI1_VSYNC_Callback+0x58>)
 80016f2:	f001 f944 	bl	800297e <HAL_DMA_Abort>
		HAL_NVIC_DisableIRQ(OV7670_HREF_EXTI_IRQn);
 80016f6:	2006      	movs	r0, #6
 80016f8:	f001 f83d 	bl	8002776 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_EnableIRQ(OV7670_HREF_EXTI_IRQn);
		HAL_DMA_Abort(&hdma_tim1_trig);
		HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)g_cam_buff, 640); // first line
		g_offset += 640;
	}
}
 80016fc:	e017      	b.n	800172e <EXTI1_VSYNC_Callback+0x4e>
		HAL_NVIC_SetPriority(OV7670_HREF_EXTI_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2006      	movs	r0, #6
 8001704:	f001 f80d 	bl	8002722 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(OV7670_HREF_EXTI_IRQn);
 8001708:	2006      	movs	r0, #6
 800170a:	f001 f826 	bl	800275a <HAL_NVIC_EnableIRQ>
		HAL_DMA_Abort(&hdma_tim1_trig);
 800170e:	480a      	ldr	r0, [pc, #40]	; (8001738 <EXTI1_VSYNC_Callback+0x58>)
 8001710:	f001 f935 	bl	800297e <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)g_cam_buff, 640); // first line
 8001714:	4a09      	ldr	r2, [pc, #36]	; (800173c <EXTI1_VSYNC_Callback+0x5c>)
 8001716:	f44f 7320 	mov.w	r3, #640	; 0x280
 800171a:	4909      	ldr	r1, [pc, #36]	; (8001740 <EXTI1_VSYNC_Callback+0x60>)
 800171c:	4806      	ldr	r0, [pc, #24]	; (8001738 <EXTI1_VSYNC_Callback+0x58>)
 800171e:	f001 f8f3 	bl	8002908 <HAL_DMA_Start>
		g_offset += 640;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <EXTI1_VSYNC_Callback+0x64>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800172a:	4a06      	ldr	r2, [pc, #24]	; (8001744 <EXTI1_VSYNC_Callback+0x64>)
 800172c:	6013      	str	r3, [r2, #0]
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021800 	.word	0x40021800
 8001738:	200260d0 	.word	0x200260d0
 800173c:	20000448 	.word	0x20000448
 8001740:	40020410 	.word	0x40020410
 8001744:	20025ec8 	.word	0x20025ec8

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_MspInit+0x4c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <HAL_MspInit+0x4c>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175c:	6453      	str	r3, [r2, #68]	; 0x44
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_MspInit+0x4c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_MspInit+0x4c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_MspInit+0x4c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e4:	f000 fe5a 	bl	800249c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f001 fbf3 	bl	8002fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}

080017fa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80017fe:	2002      	movs	r0, #2
 8001800:	f001 fbec 	bl	8002fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <I2C2_EV_IRQHandler+0x10>)
 800180e:	f002 f865 	bl	80038dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2002607c 	.word	0x2002607c

0800181c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((USART6->SR & USART_SR_RXNE) && (USART6->CR1 & USART_CR1_RXNEIE))
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <USART6_IRQHandler+0x2c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0320 	and.w	r3, r3, #32
 8001828:	2b00      	cmp	r3, #0
 800182a:	d007      	beq.n	800183c <USART6_IRQHandler+0x20>
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <USART6_IRQHandler+0x2c>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f003 0320 	and.w	r3, r3, #32
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <USART6_IRQHandler+0x20>
		uart_rx_callback();
 8001838:	f000 fb9a 	bl	8001f70 <uart_rx_callback>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <USART6_IRQHandler+0x30>)
 800183e:	f005 fa59 	bl	8006cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40011400 	.word	0x40011400
 800184c:	200262ac 	.word	0x200262ac

08001850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
	return 1;
 8001854:	2301      	movs	r3, #1
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_kill>:

int _kill(int pid, int sig)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800186a:	f006 fde5 	bl	8008438 <__errno>
 800186e:	4603      	mov	r3, r0
 8001870:	2216      	movs	r2, #22
 8001872:	601a      	str	r2, [r3, #0]
	return -1;
 8001874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_exit>:

void _exit (int status)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ffe7 	bl	8001860 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001892:	e7fe      	b.n	8001892 <_exit+0x12>

08001894 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	e00a      	b.n	80018bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018a6:	f3af 8000 	nop.w
 80018aa:	4601      	mov	r1, r0
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	60ba      	str	r2, [r7, #8]
 80018b2:	b2ca      	uxtb	r2, r1
 80018b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbf0      	blt.n	80018a6 <_read+0x12>
	}

return len;
 80018c4:	687b      	ldr	r3, [r7, #4]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e009      	b.n	80018f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	60ba      	str	r2, [r7, #8]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dbf1      	blt.n	80018e0 <_write+0x12>
	}
	return len;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_close>:

int _close(int file)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
	return -1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800192e:	605a      	str	r2, [r3, #4]
	return 0;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_isatty>:

int _isatty(int file)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
	return 1;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
	return 0;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f006 fd4a 	bl	8008438 <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20050000 	.word	0x20050000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	20025ecc 	.word	0x20025ecc
 80019d8:	20026308 	.word	0x20026308

080019dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a1e:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <MX_TIM1_Init+0xa4>)
 8001a20:	4a21      	ldr	r2, [pc, #132]	; (8001aa8 <MX_TIM1_Init+0xa8>)
 8001a22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a24:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <MX_TIM1_Init+0xa4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <MX_TIM1_Init+0xa4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <MX_TIM1_Init+0xa4>)
 8001a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_TIM1_Init+0xa4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <MX_TIM1_Init+0xa4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <MX_TIM1_Init+0xa4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a4a:	4816      	ldr	r0, [pc, #88]	; (8001aa4 <MX_TIM1_Init+0xa4>)
 8001a4c:	f004 fd9c 	bl	8006588 <HAL_TIM_Base_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a56:	f7ff fddb 	bl	8001610 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001a5a:	2307      	movs	r3, #7
 8001a5c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001a5e:	2360      	movs	r3, #96	; 0x60
 8001a60:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <MX_TIM1_Init+0xa4>)
 8001a72:	f004 fe41 	bl	80066f8 <HAL_TIM_SlaveConfigSynchro>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001a7c:	f7ff fdc8 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_TIM1_Init+0xa4>)
 8001a8e:	f005 f823 	bl	8006ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001a98:	f7ff fdba 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20026130 	.word	0x20026130
 8001aa8:	40010000 	.word	0x40010000

08001aac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a31      	ldr	r2, [pc, #196]	; (8001b90 <HAL_TIM_Base_MspInit+0xe4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d15b      	bne.n	8001b86 <HAL_TIM_Base_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_TIM_Base_MspInit+0xe8>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	4a2f      	ldr	r2, [pc, #188]	; (8001b94 <HAL_TIM_Base_MspInit+0xe8>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ade:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_TIM_Base_MspInit+0xe8>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <HAL_TIM_Base_MspInit+0xe8>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a28      	ldr	r2, [pc, #160]	; (8001b94 <HAL_TIM_Base_MspInit+0xe8>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <HAL_TIM_Base_MspInit+0xe8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	481d      	ldr	r0, [pc, #116]	; (8001b98 <HAL_TIM_Base_MspInit+0xec>)
 8001b24:	f001 f8ac 	bl	8002c80 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_TRIG Init */
    hdma_tim1_trig.Instance = DMA2_Stream0;
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_TIM_Base_MspInit+0xf0>)
 8001b2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <HAL_TIM_Base_MspInit+0xf4>)
 8001b2c:	601a      	str	r2, [r3, #0]
    hdma_tim1_trig.Init.Channel = DMA_CHANNEL_6;
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_TIM_Base_MspInit+0xf0>)
 8001b30:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001b34:	605a      	str	r2, [r3, #4]
    hdma_tim1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_TIM_Base_MspInit+0xf0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
    hdma_tim1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_TIM_Base_MspInit+0xf0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
    hdma_tim1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_TIM_Base_MspInit+0xf0>)
 8001b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b48:	611a      	str	r2, [r3, #16]
    hdma_tim1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <HAL_TIM_Base_MspInit+0xf0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
    hdma_tim1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_TIM_Base_MspInit+0xf0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
    hdma_tim1_trig.Init.Mode = DMA_NORMAL;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_TIM_Base_MspInit+0xf0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	61da      	str	r2, [r3, #28]
    hdma_tim1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <HAL_TIM_Base_MspInit+0xf0>)
 8001b5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b62:	621a      	str	r2, [r3, #32]
    hdma_tim1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_TIM_Base_MspInit+0xf0>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_trig) != HAL_OK)
 8001b6a:	480c      	ldr	r0, [pc, #48]	; (8001b9c <HAL_TIM_Base_MspInit+0xf0>)
 8001b6c:	f000 fe1e 	bl	80027ac <HAL_DMA_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_TIM_Base_MspInit+0xce>
    {
      Error_Handler();
 8001b76:	f7ff fd4b 	bl	8001610 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_trig);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <HAL_TIM_Base_MspInit+0xf0>)
 8001b7e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b80:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <HAL_TIM_Base_MspInit+0xf0>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b86:	bf00      	nop
 8001b88:	3728      	adds	r7, #40	; 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40010000 	.word	0x40010000
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	200260d0 	.word	0x200260d0
 8001ba0:	40026410 	.word	0x40026410

08001ba4 <uart_init>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_init()
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <uart_init+0x20>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <uart_init+0x20>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0220 	orr.w	r2, r2, #32
 8001bb6:	60da      	str	r2, [r3, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200262ac 	.word	0x200262ac

08001bc8 <uart_tx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_tx_process()
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
	static uint8_t last_nose = 0;
	uint8_t string_size;

	switch(g_uart_tx_state)
 8001bce:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <uart_tx_process+0xd8>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d030      	beq.n	8001c38 <uart_tx_process+0x70>
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	dc5e      	bgt.n	8001c98 <uart_tx_process+0xd0>
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <uart_tx_process+0x1c>
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d00a      	beq.n	8001bf8 <uart_tx_process+0x30>
			g_uart_tx_state = UART_TX_TRANSMIT;
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
			g_uart_tx_state = UART_TX_IDLE;
		break;
	}
}
 8001be2:	e059      	b.n	8001c98 <uart_tx_process+0xd0>
		if(g_uart_tx_nose != g_uart_tx_tail)
 8001be4:	4b2f      	ldr	r3, [pc, #188]	; (8001ca4 <uart_tx_process+0xdc>)
 8001be6:	881a      	ldrh	r2, [r3, #0]
 8001be8:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <uart_tx_process+0xe0>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d050      	beq.n	8001c92 <uart_tx_process+0xca>
			g_uart_tx_state = UART_TX_TRANSMIT;
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <uart_tx_process+0xd8>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
		break;
 8001bf6:	e04c      	b.n	8001c92 <uart_tx_process+0xca>
		string_size = strlen(g_uart_tx_buffer + (g_uart_tx_nose)) + 1;
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <uart_tx_process+0xdc>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <uart_tx_process+0xe4>)
 8001c00:	4413      	add	r3, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fb5c 	bl	80002c0 <strlen>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit_IT(
 8001c10:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <uart_tx_process+0xdc>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b25      	ldr	r3, [pc, #148]	; (8001cac <uart_tx_process+0xe4>)
 8001c18:	4413      	add	r3, r2
 8001c1a:	79fa      	ldrb	r2, [r7, #7]
 8001c1c:	b292      	uxth	r2, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4823      	ldr	r0, [pc, #140]	; (8001cb0 <uart_tx_process+0xe8>)
 8001c22:	f005 f822 	bl	8006c6a <HAL_UART_Transmit_IT>
		last_nose = g_uart_tx_nose;
 8001c26:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <uart_tx_process+0xdc>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <uart_tx_process+0xec>)
 8001c2e:	701a      	strb	r2, [r3, #0]
		g_uart_tx_state = UART_TX_TRANSMITING;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <uart_tx_process+0xd8>)
 8001c32:	2202      	movs	r2, #2
 8001c34:	701a      	strb	r2, [r3, #0]
		break;
 8001c36:	e02f      	b.n	8001c98 <uart_tx_process+0xd0>
		if((last_nose == g_uart_tx_nose))
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <uart_tx_process+0xec>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <uart_tx_process+0xdc>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d103      	bne.n	8001c4e <uart_tx_process+0x86>
			g_uart_tx_state = UART_TX_TRANSMITING;
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <uart_tx_process+0xd8>)
 8001c48:	2202      	movs	r2, #2
 8001c4a:	701a      	strb	r2, [r3, #0]
		break;
 8001c4c:	e023      	b.n	8001c96 <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail != g_uart_tx_nose))
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <uart_tx_process+0xec>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <uart_tx_process+0xdc>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d009      	beq.n	8001c70 <uart_tx_process+0xa8>
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <uart_tx_process+0xe0>)
 8001c5e:	881a      	ldrh	r2, [r3, #0]
 8001c60:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <uart_tx_process+0xdc>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d003      	beq.n	8001c70 <uart_tx_process+0xa8>
			g_uart_tx_state = UART_TX_TRANSMIT;
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <uart_tx_process+0xd8>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	701a      	strb	r2, [r3, #0]
		break;
 8001c6e:	e012      	b.n	8001c96 <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <uart_tx_process+0xec>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <uart_tx_process+0xdc>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d00b      	beq.n	8001c96 <uart_tx_process+0xce>
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <uart_tx_process+0xe0>)
 8001c80:	881a      	ldrh	r2, [r3, #0]
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <uart_tx_process+0xdc>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d105      	bne.n	8001c96 <uart_tx_process+0xce>
			g_uart_tx_state = UART_TX_IDLE;
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <uart_tx_process+0xd8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
		break;
 8001c90:	e001      	b.n	8001c96 <uart_tx_process+0xce>
		break;
 8001c92:	bf00      	nop
 8001c94:	e000      	b.n	8001c98 <uart_tx_process+0xd0>
		break;
 8001c96:	bf00      	nop
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20025ed0 	.word	0x20025ed0
 8001ca4:	20025fd4 	.word	0x20025fd4
 8001ca8:	20025fd6 	.word	0x20025fd6
 8001cac:	20025ed4 	.word	0x20025ed4
 8001cb0:	200262ac 	.word	0x200262ac
 8001cb4:	20025fde 	.word	0x20025fde

08001cb8 <uart_write>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_write(uint8_t* buff)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	uint8_t string_size = strlen(buff) + 1;
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7fe fafd 	bl	80002c0 <strlen>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]

	if(
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8001cce:	4b3e      	ldr	r3, [pc, #248]	; (8001dc8 <uart_write+0x110>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <uart_write+0x114>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	1ad3      	subs	r3, r2, r3
	if(
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0a      	blt.n	8001cf4 <uart_write+0x3c>
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <uart_write+0x110>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <uart_write+0x114>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	1acb      	subs	r3, r1, r3
 8001cec:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	db10      	blt.n	8001d16 <uart_write+0x5e>
			((g_uart_tx_tail - g_uart_tx_nose <= 0) && (string_size < g_uart_tx_nose - g_uart_tx_tail)))
 8001cf4:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <uart_write+0x110>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <uart_write+0x114>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	1ad3      	subs	r3, r2, r3
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	dc5c      	bgt.n	8001dbe <uart_write+0x106>
			((g_uart_tx_tail - g_uart_tx_nose <= 0) && (string_size < g_uart_tx_nose - g_uart_tx_tail)))
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <uart_write+0x114>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <uart_write+0x110>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	1acb      	subs	r3, r1, r3
 8001d12:	429a      	cmp	r2, r3
 8001d14:	da53      	bge.n	8001dbe <uart_write+0x106>
	{
		if(((g_uart_tx_tail - g_uart_tx_nose >= 0)) && (string_size > (UART_TX_BUFFER_MAX - g_uart_tx_tail)))
 8001d16:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <uart_write+0x110>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <uart_write+0x114>)
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db2f      	blt.n	8001d86 <uart_write+0xce>
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <uart_write+0x110>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dd28      	ble.n	8001d86 <uart_write+0xce>
		{
			strncpy(g_uart_tx_buffer + g_uart_tx_tail, buff, UART_TX_BUFFER_MAX - g_uart_tx_tail);
 8001d34:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <uart_write+0x110>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <uart_write+0x118>)
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <uart_write+0x110>)
 8001d40:	8812      	ldrh	r2, [r2, #0]
 8001d42:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f007 f80f 	bl	8008d6c <strncpy>
			string_size -= (UART_TX_BUFFER_MAX - g_uart_tx_tail);
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <uart_write+0x110>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	4413      	add	r3, r2
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
			strncpy(g_uart_tx_buffer + 0, buff + (UART_TX_BUFFER_MAX - g_uart_tx_tail), string_size);
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <uart_write+0x110>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001d66:	461a      	mov	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4817      	ldr	r0, [pc, #92]	; (8001dd0 <uart_write+0x118>)
 8001d72:	f006 fffb 	bl	8008d6c <strncpy>
			g_uart_tx_tail = 0;
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <uart_write+0x110>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	801a      	strh	r2, [r3, #0]
			g_uart_tx_tail = string_size;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <uart_write+0x110>)
 8001d82:	801a      	strh	r2, [r3, #0]
				g_uart_tx_tail += string_size;
			else
				g_uart_tx_tail = 0;
		}
	}
}
 8001d84:	e01b      	b.n	8001dbe <uart_write+0x106>
			strcpy(g_uart_tx_buffer + g_uart_tx_tail, buff);
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <uart_write+0x110>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <uart_write+0x118>)
 8001d8e:	4413      	add	r3, r2
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f006 ffd0 	bl	8008d38 <strcpy>
			if(g_uart_tx_tail + string_size < UART_TX_BUFFER_MAX)
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <uart_write+0x110>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	4413      	add	r3, r2
 8001da2:	2bfe      	cmp	r3, #254	; 0xfe
 8001da4:	dc08      	bgt.n	8001db8 <uart_write+0x100>
				g_uart_tx_tail += string_size;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <uart_write+0x110>)
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <uart_write+0x110>)
 8001db4:	801a      	strh	r2, [r3, #0]
}
 8001db6:	e002      	b.n	8001dbe <uart_write+0x106>
				g_uart_tx_tail = 0;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <uart_write+0x110>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	801a      	strh	r2, [r3, #0]
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20025fd6 	.word	0x20025fd6
 8001dcc:	20025fd4 	.word	0x20025fd4
 8001dd0:	20025ed4 	.word	0x20025ed4

08001dd4 <HAL_UART_TxCpltCallback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	g_uart_tx_nose += strlen(g_uart_tx_buffer + g_uart_tx_nose) + 1;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <HAL_UART_TxCpltCallback+0x44>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_UART_TxCpltCallback+0x48>)
 8001de4:	4413      	add	r3, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fa6a 	bl	80002c0 <strlen>
 8001dec:	4603      	mov	r3, r0
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_UART_TxCpltCallback+0x44>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_UART_TxCpltCallback+0x44>)
 8001dfe:	801a      	strh	r2, [r3, #0]

	if(g_uart_tx_nose >= UART_TX_BUFFER_MAX)
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_UART_TxCpltCallback+0x44>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	2bfe      	cmp	r3, #254	; 0xfe
 8001e06:	d902      	bls.n	8001e0e <HAL_UART_TxCpltCallback+0x3a>
		g_uart_tx_nose = 0;
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <HAL_UART_TxCpltCallback+0x44>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	801a      	strh	r2, [r3, #0]

}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20025fd4 	.word	0x20025fd4
 8001e1c:	20025ed4 	.word	0x20025ed4

08001e20 <uart_rx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_process()
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
	uint8_t string_size = strlen(g_uart_rx_buffer + g_uart_rx_nose + 1) + 1;
 8001e26:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <uart_rx_process+0x134>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	4a4a      	ldr	r2, [pc, #296]	; (8001f58 <uart_rx_process+0x138>)
 8001e2e:	4413      	add	r3, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fa45 	bl	80002c0 <strlen>
 8001e36:	4603      	mov	r3, r0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	71fb      	strb	r3, [r7, #7]

	switch(g_uart_rx_state)
 8001e3e:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <uart_rx_process+0x13c>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <uart_rx_process+0x2c>
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d008      	beq.n	8001e5c <uart_rx_process+0x3c>
			g_uart_rx_state = UART_RX_IDLE;
		break;


	}
}
 8001e4a:	e07e      	b.n	8001f4a <uart_rx_process+0x12a>
		if(g_uart_rx_cnt)
 8001e4c:	4b44      	ldr	r3, [pc, #272]	; (8001f60 <uart_rx_process+0x140>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d077      	beq.n	8001f44 <uart_rx_process+0x124>
			g_uart_rx_state = UART_RX_RECEIVE;
 8001e54:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <uart_rx_process+0x13c>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
		break;
 8001e5a:	e073      	b.n	8001f44 <uart_rx_process+0x124>
		if(g_uart_rx_nose < g_uart_rx_tail &&
 8001e5c:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <uart_rx_process+0x134>)
 8001e5e:	881a      	ldrh	r2, [r3, #0]
 8001e60:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <uart_rx_process+0x144>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d21c      	bcs.n	8001ea2 <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 8001e68:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <uart_rx_process+0x134>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4413      	add	r3, r2
 8001e72:	3b02      	subs	r3, #2
 8001e74:	4a38      	ldr	r2, [pc, #224]	; (8001f58 <uart_rx_process+0x138>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
		if(g_uart_rx_nose < g_uart_rx_tail &&
 8001e78:	2b0d      	cmp	r3, #13
 8001e7a:	d112      	bne.n	8001ea2 <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 1] == '\n'))
 8001e7c:	4b35      	ldr	r3, [pc, #212]	; (8001f54 <uart_rx_process+0x134>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	4413      	add	r3, r2
 8001e86:	3b01      	subs	r3, #1
 8001e88:	4a33      	ldr	r2, [pc, #204]	; (8001f58 <uart_rx_process+0x138>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 8001e8c:	2b0a      	cmp	r3, #10
 8001e8e:	d108      	bne.n	8001ea2 <uart_rx_process+0x82>
			serial_protocol(g_uart_rx_buffer + g_uart_rx_nose + 1);
 8001e90:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <uart_rx_process+0x134>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	4a30      	ldr	r2, [pc, #192]	; (8001f58 <uart_rx_process+0x138>)
 8001e98:	4413      	add	r3, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f92c 	bl	80020f8 <serial_protocol>
 8001ea0:	e02e      	b.n	8001f00 <uart_rx_process+0xe0>
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 8001ea2:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <uart_rx_process+0x134>)
 8001ea4:	881a      	ldrh	r2, [r3, #0]
 8001ea6:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <uart_rx_process+0x144>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d928      	bls.n	8001f00 <uart_rx_process+0xe0>
							(g_uart_rx_buffer[strlen(g_uart_rx_buffer) - 1] == '\n'))
 8001eae:	482a      	ldr	r0, [pc, #168]	; (8001f58 <uart_rx_process+0x138>)
 8001eb0:	f7fe fa06 	bl	80002c0 <strlen>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <uart_rx_process+0x138>)
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 8001ebc:	2b0a      	cmp	r3, #10
 8001ebe:	d11f      	bne.n	8001f00 <uart_rx_process+0xe0>
			strncpy(g_uart_rx_tmp_buf, g_uart_rx_buffer + g_uart_rx_nose + 1, string_size);
 8001ec0:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <uart_rx_process+0x134>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <uart_rx_process+0x138>)
 8001ec8:	4413      	add	r3, r2
 8001eca:	79fa      	ldrb	r2, [r7, #7]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4826      	ldr	r0, [pc, #152]	; (8001f68 <uart_rx_process+0x148>)
 8001ed0:	f006 ff4c 	bl	8008d6c <strncpy>
			string_size = strlen(g_uart_rx_buffer + 1) + 1;
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <uart_rx_process+0x14c>)
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe f9f2 	bl	80002c0 <strlen>
 8001edc:	4603      	mov	r3, r0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	71fb      	strb	r3, [r7, #7]
			strncpy(g_uart_rx_tmp_buf + strlen(g_uart_rx_tmp_buf), g_uart_rx_buffer , string_size);
 8001ee4:	4820      	ldr	r0, [pc, #128]	; (8001f68 <uart_rx_process+0x148>)
 8001ee6:	f7fe f9eb 	bl	80002c0 <strlen>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <uart_rx_process+0x148>)
 8001eee:	4413      	add	r3, r2
 8001ef0:	79fa      	ldrb	r2, [r7, #7]
 8001ef2:	4919      	ldr	r1, [pc, #100]	; (8001f58 <uart_rx_process+0x138>)
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f006 ff39 	bl	8008d6c <strncpy>
			serial_protocol(g_uart_rx_tmp_buf);
 8001efa:	481b      	ldr	r0, [pc, #108]	; (8001f68 <uart_rx_process+0x148>)
 8001efc:	f000 f8fc 	bl	80020f8 <serial_protocol>
		g_uart_rx_cnt--;
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <uart_rx_process+0x140>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <uart_rx_process+0x140>)
 8001f0a:	801a      	strh	r2, [r3, #0]
		if(g_uart_rx_nose + string_size < UART_RX_BUFFER_MAX)
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <uart_rx_process+0x134>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	4413      	add	r3, r2
 8001f16:	2bfe      	cmp	r3, #254	; 0xfe
 8001f18:	dc08      	bgt.n	8001f2c <uart_rx_process+0x10c>
			g_uart_rx_nose += string_size;
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <uart_rx_process+0x134>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <uart_rx_process+0x134>)
 8001f28:	801a      	strh	r2, [r3, #0]
 8001f2a:	e003      	b.n	8001f34 <uart_rx_process+0x114>
			g_uart_rx_nose = string_size;
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <uart_rx_process+0x134>)
 8001f32:	801a      	strh	r2, [r3, #0]
		if(!g_uart_rx_cnt)
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <uart_rx_process+0x140>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d105      	bne.n	8001f48 <uart_rx_process+0x128>
			g_uart_rx_state = UART_RX_IDLE;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <uart_rx_process+0x13c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
		break;
 8001f42:	e001      	b.n	8001f48 <uart_rx_process+0x128>
		break;
 8001f44:	bf00      	nop
 8001f46:	e000      	b.n	8001f4a <uart_rx_process+0x12a>
		break;
 8001f48:	bf00      	nop
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20025fd8 	.word	0x20025fd8
 8001f58:	200261ac 	.word	0x200261ac
 8001f5c:	20025ed1 	.word	0x20025ed1
 8001f60:	20025fdc 	.word	0x20025fdc
 8001f64:	20025fda 	.word	0x20025fda
 8001f68:	20026178 	.word	0x20026178
 8001f6c:	200261ad 	.word	0x200261ad

08001f70 <uart_rx_callback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_callback()
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
	g_uart_rx_tail++;
 8001f74:	4b5b      	ldr	r3, [pc, #364]	; (80020e4 <uart_rx_callback+0x174>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <uart_rx_callback+0x174>)
 8001f7e:	801a      	strh	r2, [r3, #0]

	if((g_uart_rx_tail < (UART_RX_BUFFER_MAX - 1)) && ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2/*1*/)))
 8001f80:	4b58      	ldr	r3, [pc, #352]	; (80020e4 <uart_rx_callback+0x174>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	2bfd      	cmp	r3, #253	; 0xfd
 8001f86:	d847      	bhi.n	8002018 <uart_rx_callback+0xa8>
 8001f88:	4b57      	ldr	r3, [pc, #348]	; (80020e8 <uart_rx_callback+0x178>)
 8001f8a:	881a      	ldrh	r2, [r3, #0]
 8001f8c:	4b55      	ldr	r3, [pc, #340]	; (80020e4 <uart_rx_callback+0x174>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d307      	bcc.n	8001fa4 <uart_rx_callback+0x34>
 8001f94:	4b54      	ldr	r3, [pc, #336]	; (80020e8 <uart_rx_callback+0x178>)
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b52      	ldr	r3, [pc, #328]	; (80020e4 <uart_rx_callback+0x174>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	dd39      	ble.n	8002018 <uart_rx_callback+0xa8>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);//253
 8001fa4:	4b51      	ldr	r3, [pc, #324]	; (80020ec <uart_rx_callback+0x17c>)
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	4b4e      	ldr	r3, [pc, #312]	; (80020e4 <uart_rx_callback+0x174>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	b2c9      	uxtb	r1, r1
 8001fb0:	4b4f      	ldr	r3, [pc, #316]	; (80020f0 <uart_rx_callback+0x180>)
 8001fb2:	5499      	strb	r1, [r3, r2]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8001fb4:	4b4b      	ldr	r3, [pc, #300]	; (80020e4 <uart_rx_callback+0x174>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b4d      	ldr	r3, [pc, #308]	; (80020f0 <uart_rx_callback+0x180>)
 8001fbc:	5c9b      	ldrb	r3, [r3, r2]
 8001fbe:	2b0d      	cmp	r3, #13
 8001fc0:	f040 8087 	bne.w	80020d2 <uart_rx_callback+0x162>
		{
			g_uart_rx_buffer[++g_uart_rx_tail] = '\n';//254
 8001fc4:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <uart_rx_callback+0x174>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	4b45      	ldr	r3, [pc, #276]	; (80020e4 <uart_rx_callback+0x174>)
 8001fce:	801a      	strh	r2, [r3, #0]
 8001fd0:	4b44      	ldr	r3, [pc, #272]	; (80020e4 <uart_rx_callback+0x174>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b46      	ldr	r3, [pc, #280]	; (80020f0 <uart_rx_callback+0x180>)
 8001fd8:	210a      	movs	r1, #10
 8001fda:	5499      	strb	r1, [r3, r2]
			g_uart_rx_cnt++;
 8001fdc:	4b45      	ldr	r3, [pc, #276]	; (80020f4 <uart_rx_callback+0x184>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	4b43      	ldr	r3, [pc, #268]	; (80020f4 <uart_rx_callback+0x184>)
 8001fe6:	801a      	strh	r2, [r3, #0]
			g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 8001fe8:	4b3e      	ldr	r3, [pc, #248]	; (80020e4 <uart_rx_callback+0x174>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	3301      	adds	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b3c      	ldr	r3, [pc, #240]	; (80020e4 <uart_rx_callback+0x174>)
 8001ff2:	801a      	strh	r2, [r3, #0]
 8001ff4:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <uart_rx_callback+0x174>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b3d      	ldr	r3, [pc, #244]	; (80020f0 <uart_rx_callback+0x180>)
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	5499      	strb	r1, [r3, r2]
			if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 0))
 8002000:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <uart_rx_callback+0x174>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	2bff      	cmp	r3, #255	; 0xff
 8002006:	d164      	bne.n	80020d2 <uart_rx_callback+0x162>
 8002008:	4b37      	ldr	r3, [pc, #220]	; (80020e8 <uart_rx_callback+0x178>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d060      	beq.n	80020d2 <uart_rx_callback+0x162>
			{
				g_uart_rx_tail = 0;
 8002010:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <uart_rx_callback+0x174>)
 8002012:	2200      	movs	r2, #0
 8002014:	801a      	strh	r2, [r3, #0]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8002016:	e05c      	b.n	80020d2 <uart_rx_callback+0x162>
			}
		}
	}
	else if((g_uart_rx_tail == (UART_RX_BUFFER_MAX - 1)) && (g_uart_rx_nose > 1)/*(g_uart_rx_nose < g_uart_rx_tail)*/)
 8002018:	4b32      	ldr	r3, [pc, #200]	; (80020e4 <uart_rx_callback+0x174>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	2bfe      	cmp	r3, #254	; 0xfe
 800201e:	d13e      	bne.n	800209e <uart_rx_callback+0x12e>
 8002020:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <uart_rx_callback+0x178>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d93a      	bls.n	800209e <uart_rx_callback+0x12e>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);//254
 8002028:	4b30      	ldr	r3, [pc, #192]	; (80020ec <uart_rx_callback+0x17c>)
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <uart_rx_callback+0x174>)
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	b2c9      	uxtb	r1, r1
 8002034:	4b2e      	ldr	r3, [pc, #184]	; (80020f0 <uart_rx_callback+0x180>)
 8002036:	5499      	strb	r1, [r3, r2]
		g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 8002038:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <uart_rx_callback+0x174>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <uart_rx_callback+0x174>)
 8002042:	801a      	strh	r2, [r3, #0]
 8002044:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <uart_rx_callback+0x174>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <uart_rx_callback+0x180>)
 800204c:	2100      	movs	r1, #0
 800204e:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 8002050:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <uart_rx_callback+0x174>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	3b01      	subs	r3, #1
 8002056:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <uart_rx_callback+0x180>)
 8002058:	5cd3      	ldrb	r3, [r2, r3]
 800205a:	2b0d      	cmp	r3, #13
 800205c:	d13b      	bne.n	80020d6 <uart_rx_callback+0x166>
		{
			g_uart_rx_cnt++;
 800205e:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <uart_rx_callback+0x184>)
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <uart_rx_callback+0x184>)
 8002068:	801a      	strh	r2, [r3, #0]
			if(g_uart_rx_nose > 1)
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <uart_rx_callback+0x178>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d931      	bls.n	80020d6 <uart_rx_callback+0x166>
			{
				g_uart_rx_tail = 0;
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <uart_rx_callback+0x174>)
 8002074:	2200      	movs	r2, #0
 8002076:	801a      	strh	r2, [r3, #0]
				g_uart_rx_buffer[g_uart_rx_tail] = '\n';//0
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <uart_rx_callback+0x174>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <uart_rx_callback+0x180>)
 8002080:	210a      	movs	r1, #10
 8002082:	5499      	strb	r1, [r3, r2]
				g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//1
 8002084:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <uart_rx_callback+0x174>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	3301      	adds	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <uart_rx_callback+0x174>)
 800208e:	801a      	strh	r2, [r3, #0]
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <uart_rx_callback+0x174>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <uart_rx_callback+0x180>)
 8002098:	2100      	movs	r1, #0
 800209a:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 800209c:	e01b      	b.n	80020d6 <uart_rx_callback+0x166>
			{
				//error - full
			}
		}
	}
	else if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 1))
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <uart_rx_callback+0x174>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	2bff      	cmp	r3, #255	; 0xff
 80020a4:	d118      	bne.n	80020d8 <uart_rx_callback+0x168>
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <uart_rx_callback+0x178>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d914      	bls.n	80020d8 <uart_rx_callback+0x168>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = '\0';
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <uart_rx_callback+0x174>)
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <uart_rx_callback+0x180>)
 80020b6:	2100      	movs	r1, #0
 80020b8:	5499      	strb	r1, [r3, r2]
		g_uart_rx_tail = 1;
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <uart_rx_callback+0x174>)
 80020bc:	2201      	movs	r2, #1
 80020be:	801a      	strh	r2, [r3, #0]
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);
 80020c0:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <uart_rx_callback+0x17c>)
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <uart_rx_callback+0x174>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	b2c9      	uxtb	r1, r1
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <uart_rx_callback+0x180>)
 80020ce:	5499      	strb	r1, [r3, r2]

	}

}
 80020d0:	e002      	b.n	80020d8 <uart_rx_callback+0x168>
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 80020d2:	bf00      	nop
 80020d4:	e000      	b.n	80020d8 <uart_rx_callback+0x168>
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 80020d6:	bf00      	nop
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20025fda 	.word	0x20025fda
 80020e8:	20025fd8 	.word	0x20025fd8
 80020ec:	40011400 	.word	0x40011400
 80020f0:	200261ac 	.word	0x200261ac
 80020f4:	20025fdc 	.word	0x20025fdc

080020f8 <serial_protocol>:


#include <stdlib.h>
//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void serial_protocol(uint8_t* buff)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	6078      	str	r0, [r7, #4]
	char *token;
	char temp_buff[3] = {0};
 8002100:	4b65      	ldr	r3, [pc, #404]	; (8002298 <serial_protocol+0x1a0>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	813b      	strh	r3, [r7, #8]
 8002106:	2300      	movs	r3, #0
 8002108:	72bb      	strb	r3, [r7, #10]
	unsigned short address, value = 0xFF;
 800210a:	23ff      	movs	r3, #255	; 0xff
 800210c:	82fb      	strh	r3, [r7, #22]

	if (strncmp(buff, "OVW", 3) == 0)
 800210e:	2203      	movs	r2, #3
 8002110:	4962      	ldr	r1, [pc, #392]	; (800229c <serial_protocol+0x1a4>)
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f006 fe18 	bl	8008d48 <strncmp>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d165      	bne.n	80021ea <serial_protocol+0xf2>
	{
		token = strtok(buff, ",");
 800211e:	4960      	ldr	r1, [pc, #384]	; (80022a0 <serial_protocol+0x1a8>)
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f006 fe37 	bl	8008d94 <strtok>
 8002126:	6138      	str	r0, [r7, #16]

		token = strtok(NULL, ",");
 8002128:	495d      	ldr	r1, [pc, #372]	; (80022a0 <serial_protocol+0x1a8>)
 800212a:	2000      	movs	r0, #0
 800212c:	f006 fe32 	bl	8008d94 <strtok>
 8002130:	6138      	str	r0, [r7, #16]
		strncpy(temp_buff, token, 2);
 8002132:	f107 0308 	add.w	r3, r7, #8
 8002136:	2202      	movs	r2, #2
 8002138:	6939      	ldr	r1, [r7, #16]
 800213a:	4618      	mov	r0, r3
 800213c:	f006 fe16 	bl	8008d6c <strncpy>
		address = strtoll(temp_buff, NULL, 16);
 8002140:	f107 0308 	add.w	r3, r7, #8
 8002144:	2210      	movs	r2, #16
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f006 ff15 	bl	8008f78 <strtoll>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4613      	mov	r3, r2
 8002154:	81fb      	strh	r3, [r7, #14]

		token = strtok(NULL, ",");
 8002156:	4952      	ldr	r1, [pc, #328]	; (80022a0 <serial_protocol+0x1a8>)
 8002158:	2000      	movs	r0, #0
 800215a:	f006 fe1b 	bl	8008d94 <strtok>
 800215e:	6138      	str	r0, [r7, #16]
		strncpy(temp_buff, token, 2);
 8002160:	f107 0308 	add.w	r3, r7, #8
 8002164:	2202      	movs	r2, #2
 8002166:	6939      	ldr	r1, [r7, #16]
 8002168:	4618      	mov	r0, r3
 800216a:	f006 fdff 	bl	8008d6c <strncpy>
		value = strtoll(temp_buff, NULL, 16);
 800216e:	f107 0308 	add.w	r3, r7, #8
 8002172:	2210      	movs	r2, #16
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f006 fefe 	bl	8008f78 <strtoll>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4613      	mov	r3, r2
 8002182:	82fb      	strh	r3, [r7, #22]

		ov7670_write_register(address, value);
 8002184:	89fb      	ldrh	r3, [r7, #14]
 8002186:	8afa      	ldrh	r2, [r7, #22]
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fa45 	bl	800161a <ov7670_write_register>
		sprintf(temp_buff, "%02X\0", address);
 8002190:	89fa      	ldrh	r2, [r7, #14]
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	4943      	ldr	r1, [pc, #268]	; (80022a4 <serial_protocol+0x1ac>)
 8002198:	4618      	mov	r0, r3
 800219a:	f006 fdad 	bl	8008cf8 <siprintf>
		LCD_PrintStr(20, 400, 0, 0x841FU, temp_buff, 5);
 800219e:	2305      	movs	r3, #5
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	f248 431f 	movw	r3, #33823	; 0x841f
 80021ac:	2200      	movs	r2, #0
 80021ae:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80021b2:	2014      	movs	r0, #20
 80021b4:	f7fe fd6a 	bl	8000c8c <LCD_PrintStr>
		sprintf(temp_buff, "%02X\0", ov7670_read_register(address));
 80021b8:	89fb      	ldrh	r3, [r7, #14]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fa3f 	bl	800163e <ov7670_read_register>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	4937      	ldr	r1, [pc, #220]	; (80022a4 <serial_protocol+0x1ac>)
 80021c8:	4618      	mov	r0, r3
 80021ca:	f006 fd95 	bl	8008cf8 <siprintf>
		LCD_PrintStr(20, 440, 0, 0x841FU, temp_buff, 5);
 80021ce:	2305      	movs	r3, #5
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	f248 431f 	movw	r3, #33823	; 0x841f
 80021dc:	2200      	movs	r2, #0
 80021de:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80021e2:	2014      	movs	r0, #20
 80021e4:	f7fe fd52 	bl	8000c8c <LCD_PrintStr>
		LCD_PrintStr(20, 400, 0, 0x841FU, temp_buff, 5);
		sprintf(temp_buff, "%02X\0", value);
		LCD_PrintStr(20, 440, 0, 0x841FU, temp_buff, 5);
	}
		//LCD_PrintStr(20, 400, 0, 0x841FU, buff, 5);
}
 80021e8:	e051      	b.n	800228e <serial_protocol+0x196>
	else if (strncmp(buff, "OVR", 3) == 0)
 80021ea:	2203      	movs	r2, #3
 80021ec:	492e      	ldr	r1, [pc, #184]	; (80022a8 <serial_protocol+0x1b0>)
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f006 fdaa 	bl	8008d48 <strncmp>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d149      	bne.n	800228e <serial_protocol+0x196>
		token = strtok(buff, ",");
 80021fa:	4929      	ldr	r1, [pc, #164]	; (80022a0 <serial_protocol+0x1a8>)
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f006 fdc9 	bl	8008d94 <strtok>
 8002202:	6138      	str	r0, [r7, #16]
		token = strtok(NULL, ",");
 8002204:	4926      	ldr	r1, [pc, #152]	; (80022a0 <serial_protocol+0x1a8>)
 8002206:	2000      	movs	r0, #0
 8002208:	f006 fdc4 	bl	8008d94 <strtok>
 800220c:	6138      	str	r0, [r7, #16]
		strncpy(temp_buff, token, 2);
 800220e:	f107 0308 	add.w	r3, r7, #8
 8002212:	2202      	movs	r2, #2
 8002214:	6939      	ldr	r1, [r7, #16]
 8002216:	4618      	mov	r0, r3
 8002218:	f006 fda8 	bl	8008d6c <strncpy>
		address = strtoll(temp_buff, NULL, 16);
 800221c:	f107 0308 	add.w	r3, r7, #8
 8002220:	2210      	movs	r2, #16
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f006 fea7 	bl	8008f78 <strtoll>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4613      	mov	r3, r2
 8002230:	81fb      	strh	r3, [r7, #14]
		value = ov7670_read_register(address);
 8002232:	89fb      	ldrh	r3, [r7, #14]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fa02 	bl	800163e <ov7670_read_register>
 800223a:	4603      	mov	r3, r0
 800223c:	82fb      	strh	r3, [r7, #22]
		sprintf(temp_buff, "%02X\0", address);
 800223e:	89fa      	ldrh	r2, [r7, #14]
 8002240:	f107 0308 	add.w	r3, r7, #8
 8002244:	4917      	ldr	r1, [pc, #92]	; (80022a4 <serial_protocol+0x1ac>)
 8002246:	4618      	mov	r0, r3
 8002248:	f006 fd56 	bl	8008cf8 <siprintf>
		LCD_PrintStr(20, 400, 0, 0x841FU, temp_buff, 5);
 800224c:	2305      	movs	r3, #5
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	f107 0308 	add.w	r3, r7, #8
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	f248 431f 	movw	r3, #33823	; 0x841f
 800225a:	2200      	movs	r2, #0
 800225c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002260:	2014      	movs	r0, #20
 8002262:	f7fe fd13 	bl	8000c8c <LCD_PrintStr>
		sprintf(temp_buff, "%02X\0", value);
 8002266:	8afa      	ldrh	r2, [r7, #22]
 8002268:	f107 0308 	add.w	r3, r7, #8
 800226c:	490d      	ldr	r1, [pc, #52]	; (80022a4 <serial_protocol+0x1ac>)
 800226e:	4618      	mov	r0, r3
 8002270:	f006 fd42 	bl	8008cf8 <siprintf>
		LCD_PrintStr(20, 440, 0, 0x841FU, temp_buff, 5);
 8002274:	2305      	movs	r3, #5
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	f107 0308 	add.w	r3, r7, #8
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	f248 431f 	movw	r3, #33823	; 0x841f
 8002282:	2200      	movs	r2, #0
 8002284:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8002288:	2014      	movs	r0, #20
 800228a:	f7fe fcff 	bl	8000c8c <LCD_PrintStr>
}
 800228e:	bf00      	nop
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	08009a00 	.word	0x08009a00
 800229c:	080099ec 	.word	0x080099ec
 80022a0:	080099f0 	.word	0x080099f0
 80022a4:	080099f4 	.word	0x080099f4
 80022a8:	080099fc 	.word	0x080099fc

080022ac <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <MX_USART6_UART_Init+0x50>)
 80022b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022d2:	220c      	movs	r2, #12
 80022d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022e4:	f004 fc74 	bl	8006bd0 <HAL_UART_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80022ee:	f7ff f98f 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200262ac 	.word	0x200262ac
 80022fc:	40011400 	.word	0x40011400

08002300 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1e      	ldr	r2, [pc, #120]	; (8002398 <HAL_UART_MspInit+0x98>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d136      	bne.n	8002390 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_UART_MspInit+0x9c>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a1c      	ldr	r2, [pc, #112]	; (800239c <HAL_UART_MspInit+0x9c>)
 800232c:	f043 0320 	orr.w	r3, r3, #32
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b1a      	ldr	r3, [pc, #104]	; (800239c <HAL_UART_MspInit+0x9c>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f003 0320 	and.w	r3, r3, #32
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_UART_MspInit+0x9c>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a15      	ldr	r2, [pc, #84]	; (800239c <HAL_UART_MspInit+0x9c>)
 8002348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_UART_MspInit+0x9c>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800235a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800235e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800236c:	2308      	movs	r3, #8
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	4619      	mov	r1, r3
 8002376:	480a      	ldr	r0, [pc, #40]	; (80023a0 <HAL_UART_MspInit+0xa0>)
 8002378:	f000 fc82 	bl	8002c80 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	2100      	movs	r1, #0
 8002380:	2047      	movs	r0, #71	; 0x47
 8002382:	f000 f9ce 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002386:	2047      	movs	r0, #71	; 0x47
 8002388:	f000 f9e7 	bl	800275a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */
    uart_init();
 800238c:	f7ff fc0a 	bl	8001ba4 <uart_init>
  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002390:	bf00      	nop
 8002392:	3728      	adds	r7, #40	; 0x28
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40011400 	.word	0x40011400
 800239c:	40023800 	.word	0x40023800
 80023a0:	40021800 	.word	0x40021800

080023a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80023a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023a8:	480d      	ldr	r0, [pc, #52]	; (80023e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023aa:	490e      	ldr	r1, [pc, #56]	; (80023e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023ac:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b0:	e002      	b.n	80023b8 <LoopCopyDataInit>

080023b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023b6:	3304      	adds	r3, #4

080023b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023bc:	d3f9      	bcc.n	80023b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023be:	4a0b      	ldr	r2, [pc, #44]	; (80023ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023c0:	4c0b      	ldr	r4, [pc, #44]	; (80023f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c4:	e001      	b.n	80023ca <LoopFillZerobss>

080023c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c8:	3204      	adds	r2, #4

080023ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023cc:	d3fb      	bcc.n	80023c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023ce:	f7ff fb05 	bl	80019dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023d2:	f006 f849 	bl	8008468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023d6:	f7ff f865 	bl	80014a4 <main>
  bx  lr    
 80023da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80023dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80023e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023e4:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 80023e8:	0801b65c 	.word	0x0801b65c
  ldr r2, =_sbss
 80023ec:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 80023f0:	20026304 	.word	0x20026304

080023f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023f4:	e7fe      	b.n	80023f4 <ADC_IRQHandler>
	...

080023f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_Init+0x40>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <HAL_Init+0x40>)
 8002402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <HAL_Init+0x40>)
 800240e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a07      	ldr	r2, [pc, #28]	; (8002438 <HAL_Init+0x40>)
 800241a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002420:	2003      	movs	r0, #3
 8002422:	f000 f973 	bl	800270c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002426:	2000      	movs	r0, #0
 8002428:	f000 f808 	bl	800243c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800242c:	f7ff f98c 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023c00 	.word	0x40023c00

0800243c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_InitTick+0x54>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_InitTick+0x58>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	4619      	mov	r1, r3
 800244e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002452:	fbb3 f3f1 	udiv	r3, r3, r1
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	4618      	mov	r0, r3
 800245c:	f000 f999 	bl	8002792 <HAL_SYSTICK_Config>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e00e      	b.n	8002488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b0f      	cmp	r3, #15
 800246e:	d80a      	bhi.n	8002486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002470:	2200      	movs	r2, #0
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002478:	f000 f953 	bl	8002722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800247c:	4a06      	ldr	r2, [pc, #24]	; (8002498 <HAL_InitTick+0x5c>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e000      	b.n	8002488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000004 	.word	0x20000004
 8002494:	2000000c 	.word	0x2000000c
 8002498:	20000008 	.word	0x20000008

0800249c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_IncTick+0x20>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_IncTick+0x24>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <HAL_IncTick+0x24>)
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	2000000c 	.word	0x2000000c
 80024c0:	200262f0 	.word	0x200262f0

080024c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return uwTick;
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <HAL_GetTick+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	200262f0 	.word	0x200262f0

080024dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e4:	f7ff ffee 	bl	80024c4 <HAL_GetTick>
 80024e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024f4:	d005      	beq.n	8002502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_Delay+0x44>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002502:	bf00      	nop
 8002504:	f7ff ffde 	bl	80024c4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	429a      	cmp	r2, r3
 8002512:	d8f7      	bhi.n	8002504 <HAL_Delay+0x28>
  {
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	2000000c 	.word	0x2000000c

08002524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002540:	4013      	ands	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800254c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	60d3      	str	r3, [r2, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <__NVIC_GetPriorityGrouping+0x18>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	f003 0307 	and.w	r3, r3, #7
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	2b00      	cmp	r3, #0
 8002598:	db0b      	blt.n	80025b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	f003 021f 	and.w	r2, r3, #31
 80025a0:	4907      	ldr	r1, [pc, #28]	; (80025c0 <__NVIC_EnableIRQ+0x38>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2001      	movs	r0, #1
 80025aa:	fa00 f202 	lsl.w	r2, r0, r2
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000e100 	.word	0xe000e100

080025c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	db12      	blt.n	80025fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	490a      	ldr	r1, [pc, #40]	; (8002608 <__NVIC_DisableIRQ+0x44>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2001      	movs	r0, #1
 80025e6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ea:	3320      	adds	r3, #32
 80025ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80025f0:	f3bf 8f4f 	dsb	sy
}
 80025f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025f6:	f3bf 8f6f 	isb	sy
}
 80025fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000e100 	.word	0xe000e100

0800260c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db0a      	blt.n	8002636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	b2da      	uxtb	r2, r3
 8002624:	490c      	ldr	r1, [pc, #48]	; (8002658 <__NVIC_SetPriority+0x4c>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	440b      	add	r3, r1
 8002630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002634:	e00a      	b.n	800264c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4908      	ldr	r1, [pc, #32]	; (800265c <__NVIC_SetPriority+0x50>)
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	3b04      	subs	r3, #4
 8002644:	0112      	lsls	r2, r2, #4
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	440b      	add	r3, r1
 800264a:	761a      	strb	r2, [r3, #24]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f1c3 0307 	rsb	r3, r3, #7
 800267a:	2b04      	cmp	r3, #4
 800267c:	bf28      	it	cs
 800267e:	2304      	movcs	r3, #4
 8002680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3304      	adds	r3, #4
 8002686:	2b06      	cmp	r3, #6
 8002688:	d902      	bls.n	8002690 <NVIC_EncodePriority+0x30>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3b03      	subs	r3, #3
 800268e:	e000      	b.n	8002692 <NVIC_EncodePriority+0x32>
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	401a      	ands	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43d9      	mvns	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	4313      	orrs	r3, r2
         );
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	; 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d8:	d301      	bcc.n	80026de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026da:	2301      	movs	r3, #1
 80026dc:	e00f      	b.n	80026fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <SysTick_Config+0x40>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e6:	210f      	movs	r1, #15
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026ec:	f7ff ff8e 	bl	800260c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <SysTick_Config+0x40>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <SysTick_Config+0x40>)
 80026f8:	2207      	movs	r2, #7
 80026fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	e000e010 	.word	0xe000e010

0800270c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff05 	bl	8002524 <__NVIC_SetPriorityGrouping>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002734:	f7ff ff1a 	bl	800256c <__NVIC_GetPriorityGrouping>
 8002738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f7ff ff8e 	bl	8002660 <NVIC_EncodePriority>
 8002744:	4602      	mov	r2, r0
 8002746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff5d 	bl	800260c <__NVIC_SetPriority>
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff0d 	bl	8002588 <__NVIC_EnableIRQ>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff1d 	bl	80025c4 <__NVIC_DisableIRQ>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ff94 	bl	80026c8 <SysTick_Config>
 80027a0:	4603      	mov	r3, r0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027b8:	f7ff fe84 	bl	80024c4 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e099      	b.n	80028fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e8:	e00f      	b.n	800280a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ea:	f7ff fe6b 	bl	80024c4 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d908      	bls.n	800280a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2220      	movs	r2, #32
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2203      	movs	r2, #3
 8002802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e078      	b.n	80028fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1e8      	bne.n	80027ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	4b38      	ldr	r3, [pc, #224]	; (8002904 <HAL_DMA_Init+0x158>)
 8002824:	4013      	ands	r3, r2
 8002826:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002836:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002842:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800284e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	2b04      	cmp	r3, #4
 8002862:	d107      	bne.n	8002874 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	4313      	orrs	r3, r2
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f023 0307 	bic.w	r3, r3, #7
 800288a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	4313      	orrs	r3, r2
 8002894:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	2b04      	cmp	r3, #4
 800289c:	d117      	bne.n	80028ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00e      	beq.n	80028ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f969 	bl	8002b88 <DMA_CheckFifoParam>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2240      	movs	r2, #64	; 0x40
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028ca:	2301      	movs	r3, #1
 80028cc:	e016      	b.n	80028fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f920 	bl	8002b1c <DMA_CalcBaseAndBitshift>
 80028dc:	4603      	mov	r3, r0
 80028de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e4:	223f      	movs	r2, #63	; 0x3f
 80028e6:	409a      	lsls	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	e010803f 	.word	0xe010803f

08002908 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_DMA_Start+0x20>
 8002924:	2302      	movs	r3, #2
 8002926:	e026      	b.n	8002976 <HAL_DMA_Start+0x6e>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d115      	bne.n	8002968 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f8b4 	bl	8002abe <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0201 	orr.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	e005      	b.n	8002974 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002970:	2302      	movs	r3, #2
 8002972:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002974:	7dfb      	ldrb	r3, [r7, #23]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800298c:	f7ff fd9a 	bl	80024c4 <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d008      	beq.n	80029b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2280      	movs	r2, #128	; 0x80
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e052      	b.n	8002a56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0216 	bic.w	r2, r2, #22
 80029be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d103      	bne.n	80029e0 <HAL_DMA_Abort+0x62>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0208 	bic.w	r2, r2, #8
 80029ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a00:	e013      	b.n	8002a2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a02:	f7ff fd5f 	bl	80024c4 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d90c      	bls.n	8002a2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2203      	movs	r2, #3
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e015      	b.n	8002a56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e4      	bne.n	8002a02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	223f      	movs	r2, #63	; 0x3f
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d004      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2280      	movs	r2, #128	; 0x80
 8002a76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e00c      	b.n	8002a96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2205      	movs	r2, #5
 8002a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab0:	b2db      	uxtb	r3, r3
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ada:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b40      	cmp	r3, #64	; 0x40
 8002aea:	d108      	bne.n	8002afe <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002afc:	e007      	b.n	8002b0e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	60da      	str	r2, [r3, #12]
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	3b10      	subs	r3, #16
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <DMA_CalcBaseAndBitshift+0x64>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b36:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <DMA_CalcBaseAndBitshift+0x68>)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d909      	bls.n	8002b5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	1d1a      	adds	r2, r3, #4
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b5c:	e007      	b.n	8002b6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b66:	f023 0303 	bic.w	r3, r3, #3
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	aaaaaaab 	.word	0xaaaaaaab
 8002b84:	0801b39c 	.word	0x0801b39c

08002b88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d11f      	bne.n	8002be2 <DMA_CheckFifoParam+0x5a>
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d856      	bhi.n	8002c56 <DMA_CheckFifoParam+0xce>
 8002ba8:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <DMA_CheckFifoParam+0x28>)
 8002baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bae:	bf00      	nop
 8002bb0:	08002bc1 	.word	0x08002bc1
 8002bb4:	08002bd3 	.word	0x08002bd3
 8002bb8:	08002bc1 	.word	0x08002bc1
 8002bbc:	08002c57 	.word	0x08002c57
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d046      	beq.n	8002c5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd0:	e043      	b.n	8002c5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bda:	d140      	bne.n	8002c5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be0:	e03d      	b.n	8002c5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bea:	d121      	bne.n	8002c30 <DMA_CheckFifoParam+0xa8>
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d837      	bhi.n	8002c62 <DMA_CheckFifoParam+0xda>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <DMA_CheckFifoParam+0x70>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c0f 	.word	0x08002c0f
 8002c00:	08002c09 	.word	0x08002c09
 8002c04:	08002c21 	.word	0x08002c21
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0c:	e030      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d025      	beq.n	8002c66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1e:	e022      	b.n	8002c66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c28:	d11f      	bne.n	8002c6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c2e:	e01c      	b.n	8002c6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d903      	bls.n	8002c3e <DMA_CheckFifoParam+0xb6>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d003      	beq.n	8002c44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c3c:	e018      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
      break;
 8002c42:	e015      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00e      	beq.n	8002c6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
      break;
 8002c54:	e00b      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      break;
 8002c56:	bf00      	nop
 8002c58:	e00a      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e008      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e006      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;
 8002c62:	bf00      	nop
 8002c64:	e004      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;
 8002c66:	bf00      	nop
 8002c68:	e002      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c6a:	bf00      	nop
 8002c6c:	e000      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;
 8002c6e:	bf00      	nop
    }
  } 
  
  return status; 
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop

08002c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b089      	sub	sp, #36	; 0x24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	e165      	b.n	8002f68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	f040 8154 	bne.w	8002f62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d005      	beq.n	8002cd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d130      	bne.n	8002d34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	2203      	movs	r2, #3
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 0201 	and.w	r2, r3, #1
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d017      	beq.n	8002d70 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d123      	bne.n	8002dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	08da      	lsrs	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3208      	adds	r2, #8
 8002d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	220f      	movs	r2, #15
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	08da      	lsrs	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3208      	adds	r2, #8
 8002dbe:	69b9      	ldr	r1, [r7, #24]
 8002dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	2203      	movs	r2, #3
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0203 	and.w	r2, r3, #3
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80ae 	beq.w	8002f62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	4b5d      	ldr	r3, [pc, #372]	; (8002f80 <HAL_GPIO_Init+0x300>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	4a5c      	ldr	r2, [pc, #368]	; (8002f80 <HAL_GPIO_Init+0x300>)
 8002e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e14:	6453      	str	r3, [r2, #68]	; 0x44
 8002e16:	4b5a      	ldr	r3, [pc, #360]	; (8002f80 <HAL_GPIO_Init+0x300>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e22:	4a58      	ldr	r2, [pc, #352]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	220f      	movs	r2, #15
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a4f      	ldr	r2, [pc, #316]	; (8002f88 <HAL_GPIO_Init+0x308>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d025      	beq.n	8002e9a <HAL_GPIO_Init+0x21a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a4e      	ldr	r2, [pc, #312]	; (8002f8c <HAL_GPIO_Init+0x30c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01f      	beq.n	8002e96 <HAL_GPIO_Init+0x216>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a4d      	ldr	r2, [pc, #308]	; (8002f90 <HAL_GPIO_Init+0x310>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d019      	beq.n	8002e92 <HAL_GPIO_Init+0x212>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a4c      	ldr	r2, [pc, #304]	; (8002f94 <HAL_GPIO_Init+0x314>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_GPIO_Init+0x20e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a4b      	ldr	r2, [pc, #300]	; (8002f98 <HAL_GPIO_Init+0x318>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00d      	beq.n	8002e8a <HAL_GPIO_Init+0x20a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4a      	ldr	r2, [pc, #296]	; (8002f9c <HAL_GPIO_Init+0x31c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <HAL_GPIO_Init+0x206>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a49      	ldr	r2, [pc, #292]	; (8002fa0 <HAL_GPIO_Init+0x320>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d101      	bne.n	8002e82 <HAL_GPIO_Init+0x202>
 8002e7e:	2306      	movs	r3, #6
 8002e80:	e00c      	b.n	8002e9c <HAL_GPIO_Init+0x21c>
 8002e82:	2307      	movs	r3, #7
 8002e84:	e00a      	b.n	8002e9c <HAL_GPIO_Init+0x21c>
 8002e86:	2305      	movs	r3, #5
 8002e88:	e008      	b.n	8002e9c <HAL_GPIO_Init+0x21c>
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	e006      	b.n	8002e9c <HAL_GPIO_Init+0x21c>
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e004      	b.n	8002e9c <HAL_GPIO_Init+0x21c>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e002      	b.n	8002e9c <HAL_GPIO_Init+0x21c>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_GPIO_Init+0x21c>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	f002 0203 	and.w	r2, r2, #3
 8002ea2:	0092      	lsls	r2, r2, #2
 8002ea4:	4093      	lsls	r3, r2
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eac:	4935      	ldr	r1, [pc, #212]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eba:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <HAL_GPIO_Init+0x324>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ede:	4a31      	ldr	r2, [pc, #196]	; (8002fa4 <HAL_GPIO_Init+0x324>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ee4:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <HAL_GPIO_Init+0x324>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f08:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <HAL_GPIO_Init+0x324>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f0e:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <HAL_GPIO_Init+0x324>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f32:	4a1c      	ldr	r2, [pc, #112]	; (8002fa4 <HAL_GPIO_Init+0x324>)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f38:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <HAL_GPIO_Init+0x324>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f5c:	4a11      	ldr	r2, [pc, #68]	; (8002fa4 <HAL_GPIO_Init+0x324>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3301      	adds	r3, #1
 8002f66:	61fb      	str	r3, [r7, #28]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	2b0f      	cmp	r3, #15
 8002f6c:	f67f ae96 	bls.w	8002c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	3724      	adds	r7, #36	; 0x24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40013800 	.word	0x40013800
 8002f88:	40020000 	.word	0x40020000
 8002f8c:	40020400 	.word	0x40020400
 8002f90:	40020800 	.word	0x40020800
 8002f94:	40020c00 	.word	0x40020c00
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40021400 	.word	0x40021400
 8002fa0:	40021800 	.word	0x40021800
 8002fa4:	40013c00 	.word	0x40013c00

08002fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb8:	787b      	ldrb	r3, [r7, #1]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fbe:	887a      	ldrh	r2, [r7, #2]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fc4:	e003      	b.n	8002fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fc6:	887b      	ldrh	r3, [r7, #2]
 8002fc8:	041a      	lsls	r2, r3, #16
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	619a      	str	r2, [r3, #24]
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fe6:	4b08      	ldr	r3, [pc, #32]	; (8003008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d006      	beq.n	8003000 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ff2:	4a05      	ldr	r2, [pc, #20]	; (8003008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe fb2e 	bl	800165c <HAL_GPIO_EXTI_Callback>
  }
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40013c00 	.word	0x40013c00

0800300c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e12b      	b.n	8003276 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fe f99a 	bl	800136c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2224      	movs	r2, #36	; 0x24
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800305e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800306e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003070:	f002 fd0e 	bl	8005a90 <HAL_RCC_GetPCLK1Freq>
 8003074:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4a81      	ldr	r2, [pc, #516]	; (8003280 <HAL_I2C_Init+0x274>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d807      	bhi.n	8003090 <HAL_I2C_Init+0x84>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a80      	ldr	r2, [pc, #512]	; (8003284 <HAL_I2C_Init+0x278>)
 8003084:	4293      	cmp	r3, r2
 8003086:	bf94      	ite	ls
 8003088:	2301      	movls	r3, #1
 800308a:	2300      	movhi	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	e006      	b.n	800309e <HAL_I2C_Init+0x92>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4a7d      	ldr	r2, [pc, #500]	; (8003288 <HAL_I2C_Init+0x27c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	bf94      	ite	ls
 8003098:	2301      	movls	r3, #1
 800309a:	2300      	movhi	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e0e7      	b.n	8003276 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4a78      	ldr	r2, [pc, #480]	; (800328c <HAL_I2C_Init+0x280>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	0c9b      	lsrs	r3, r3, #18
 80030b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a6a      	ldr	r2, [pc, #424]	; (8003280 <HAL_I2C_Init+0x274>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d802      	bhi.n	80030e0 <HAL_I2C_Init+0xd4>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3301      	adds	r3, #1
 80030de:	e009      	b.n	80030f4 <HAL_I2C_Init+0xe8>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030e6:	fb02 f303 	mul.w	r3, r2, r3
 80030ea:	4a69      	ldr	r2, [pc, #420]	; (8003290 <HAL_I2C_Init+0x284>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	099b      	lsrs	r3, r3, #6
 80030f2:	3301      	adds	r3, #1
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003106:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	495c      	ldr	r1, [pc, #368]	; (8003280 <HAL_I2C_Init+0x274>)
 8003110:	428b      	cmp	r3, r1
 8003112:	d819      	bhi.n	8003148 <HAL_I2C_Init+0x13c>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e59      	subs	r1, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003122:	1c59      	adds	r1, r3, #1
 8003124:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003128:	400b      	ands	r3, r1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_I2C_Init+0x138>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1e59      	subs	r1, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fbb1 f3f3 	udiv	r3, r1, r3
 800313c:	3301      	adds	r3, #1
 800313e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003142:	e051      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 8003144:	2304      	movs	r3, #4
 8003146:	e04f      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d111      	bne.n	8003174 <HAL_I2C_Init+0x168>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1e58      	subs	r0, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	440b      	add	r3, r1
 800315e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	e012      	b.n	800319a <HAL_I2C_Init+0x18e>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1e58      	subs	r0, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	0099      	lsls	r1, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	fbb0 f3f3 	udiv	r3, r0, r3
 800318a:	3301      	adds	r3, #1
 800318c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Init+0x196>
 800319e:	2301      	movs	r3, #1
 80031a0:	e022      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10e      	bne.n	80031c8 <HAL_I2C_Init+0x1bc>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1e58      	subs	r0, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	460b      	mov	r3, r1
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	440b      	add	r3, r1
 80031b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c6:	e00f      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1e58      	subs	r0, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	0099      	lsls	r1, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	fbb0 f3f3 	udiv	r3, r0, r3
 80031de:	3301      	adds	r3, #1
 80031e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	6809      	ldr	r1, [r1, #0]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003216:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6911      	ldr	r1, [r2, #16]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68d2      	ldr	r2, [r2, #12]
 8003222:	4311      	orrs	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	430b      	orrs	r3, r1
 800322a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	000186a0 	.word	0x000186a0
 8003284:	001e847f 	.word	0x001e847f
 8003288:	003d08ff 	.word	0x003d08ff
 800328c:	431bde83 	.word	0x431bde83
 8003290:	10624dd3 	.word	0x10624dd3

08003294 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	461a      	mov	r2, r3
 80032a0:	460b      	mov	r3, r1
 80032a2:	817b      	strh	r3, [r7, #10]
 80032a4:	4613      	mov	r3, r2
 80032a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032a8:	f7ff f90c 	bl	80024c4 <HAL_GetTick>
 80032ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	f040 80e0 	bne.w	800347c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	2319      	movs	r3, #25
 80032c2:	2201      	movs	r2, #1
 80032c4:	4970      	ldr	r1, [pc, #448]	; (8003488 <HAL_I2C_Master_Transmit+0x1f4>)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f001 ffa8 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
 80032d4:	e0d3      	b.n	800347e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_I2C_Master_Transmit+0x50>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e0cc      	b.n	800347e <HAL_I2C_Master_Transmit+0x1ea>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d007      	beq.n	800330a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0201 	orr.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003318:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2221      	movs	r2, #33	; 0x21
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2210      	movs	r2, #16
 8003326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	893a      	ldrh	r2, [r7, #8]
 800333a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4a50      	ldr	r2, [pc, #320]	; (800348c <HAL_I2C_Master_Transmit+0x1f8>)
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800334c:	8979      	ldrh	r1, [r7, #10]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	6a3a      	ldr	r2, [r7, #32]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f001 fd6a 	bl	8004e2c <I2C_MasterRequestWrite>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e08d      	b.n	800347e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003378:	e066      	b.n	8003448 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	6a39      	ldr	r1, [r7, #32]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f002 f822 	bl	80053c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00d      	beq.n	80033a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2b04      	cmp	r3, #4
 8003390:	d107      	bne.n	80033a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e06b      	b.n	800347e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	781a      	ldrb	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d11b      	bne.n	800341c <HAL_I2C_Master_Transmit+0x188>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d017      	beq.n	800341c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	781a      	ldrb	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	6a39      	ldr	r1, [r7, #32]
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f002 f812 	bl	800544a <I2C_WaitOnBTFFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00d      	beq.n	8003448 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	2b04      	cmp	r3, #4
 8003432:	d107      	bne.n	8003444 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003442:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e01a      	b.n	800347e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344c:	2b00      	cmp	r3, #0
 800344e:	d194      	bne.n	800337a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	e000      	b.n	800347e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
  }
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	00100002 	.word	0x00100002
 800348c:	ffff0000 	.word	0xffff0000

08003490 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08c      	sub	sp, #48	; 0x30
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	461a      	mov	r2, r3
 800349c:	460b      	mov	r3, r1
 800349e:	817b      	strh	r3, [r7, #10]
 80034a0:	4613      	mov	r3, r2
 80034a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034a4:	f7ff f80e 	bl	80024c4 <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	f040 820b 	bne.w	80038ce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	2319      	movs	r3, #25
 80034be:	2201      	movs	r2, #1
 80034c0:	497c      	ldr	r1, [pc, #496]	; (80036b4 <HAL_I2C_Master_Receive+0x224>)
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f001 feaa 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
 80034d0:	e1fe      	b.n	80038d0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_I2C_Master_Receive+0x50>
 80034dc:	2302      	movs	r3, #2
 80034de:	e1f7      	b.n	80038d0 <HAL_I2C_Master_Receive+0x440>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d007      	beq.n	8003506 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0201 	orr.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003514:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2222      	movs	r2, #34	; 0x22
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2210      	movs	r2, #16
 8003522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	893a      	ldrh	r2, [r7, #8]
 8003536:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4a5c      	ldr	r2, [pc, #368]	; (80036b8 <HAL_I2C_Master_Receive+0x228>)
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003548:	8979      	ldrh	r1, [r7, #10]
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f001 fcee 	bl	8004f30 <I2C_MasterRequestRead>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e1b8      	b.n	80038d0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003562:	2b00      	cmp	r3, #0
 8003564:	d113      	bne.n	800358e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003566:	2300      	movs	r3, #0
 8003568:	623b      	str	r3, [r7, #32]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	623b      	str	r3, [r7, #32]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	e18c      	b.n	80038a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003592:	2b01      	cmp	r3, #1
 8003594:	d11b      	bne.n	80035ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	e16c      	b.n	80038a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d11b      	bne.n	800360e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f6:	2300      	movs	r3, #0
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	e14c      	b.n	80038a8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800361c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003634:	e138      	b.n	80038a8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	2b03      	cmp	r3, #3
 800363c:	f200 80f1 	bhi.w	8003822 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003644:	2b01      	cmp	r3, #1
 8003646:	d123      	bne.n	8003690 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f001 ff6f 	bl	8005530 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e139      	b.n	80038d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800368e:	e10b      	b.n	80038a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	2b02      	cmp	r3, #2
 8003696:	d14e      	bne.n	8003736 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369e:	2200      	movs	r2, #0
 80036a0:	4906      	ldr	r1, [pc, #24]	; (80036bc <HAL_I2C_Master_Receive+0x22c>)
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f001 fdba 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e10e      	b.n	80038d0 <HAL_I2C_Master_Receive+0x440>
 80036b2:	bf00      	nop
 80036b4:	00100002 	.word	0x00100002
 80036b8:	ffff0000 	.word	0xffff0000
 80036bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003734:	e0b8      	b.n	80038a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	2200      	movs	r2, #0
 800373e:	4966      	ldr	r1, [pc, #408]	; (80038d8 <HAL_I2C_Master_Receive+0x448>)
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f001 fd6b 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0bf      	b.n	80038d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	2200      	movs	r2, #0
 800379a:	494f      	ldr	r1, [pc, #316]	; (80038d8 <HAL_I2C_Master_Receive+0x448>)
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f001 fd3d 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e091      	b.n	80038d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003820:	e042      	b.n	80038a8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f001 fe82 	bl	8005530 <I2C_WaitOnRXNEFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e04c      	b.n	80038d0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b04      	cmp	r3, #4
 8003874:	d118      	bne.n	80038a8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f47f aec2 	bne.w	8003636 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e000      	b.n	80038d0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
  }
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3728      	adds	r7, #40	; 0x28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	00010004 	.word	0x00010004

080038dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003904:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b10      	cmp	r3, #16
 800390a:	d003      	beq.n	8003914 <HAL_I2C_EV_IRQHandler+0x38>
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b40      	cmp	r3, #64	; 0x40
 8003910:	f040 80bd 	bne.w	8003a8e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10d      	bne.n	800394a <HAL_I2C_EV_IRQHandler+0x6e>
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003934:	d003      	beq.n	800393e <HAL_I2C_EV_IRQHandler+0x62>
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800393c:	d101      	bne.n	8003942 <HAL_I2C_EV_IRQHandler+0x66>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <HAL_I2C_EV_IRQHandler+0x68>
 8003942:	2300      	movs	r3, #0
 8003944:	2b01      	cmp	r3, #1
 8003946:	f000 812e 	beq.w	8003ba6 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00c      	beq.n	800396e <HAL_I2C_EV_IRQHandler+0x92>
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	0a5b      	lsrs	r3, r3, #9
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d006      	beq.n	800396e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f001 fe6a 	bl	800563a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fcbb 	bl	80042e2 <I2C_Master_SB>
 800396c:	e08e      	b.n	8003a8c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_I2C_EV_IRQHandler+0xb2>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	0a5b      	lsrs	r3, r3, #9
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fd31 	bl	80043ee <I2C_Master_ADD10>
 800398c:	e07e      	b.n	8003a8c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <HAL_I2C_EV_IRQHandler+0xd2>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	0a5b      	lsrs	r3, r3, #9
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fd4b 	bl	8004442 <I2C_Master_ADDR>
 80039ac:	e06e      	b.n	8003a8c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d037      	beq.n	8003a2a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c8:	f000 80ef 	beq.w	8003baa <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	09db      	lsrs	r3, r3, #7
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00f      	beq.n	80039f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	0a9b      	lsrs	r3, r3, #10
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d103      	bne.n	80039f8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f948 	bl	8003c86 <I2C_MasterTransmit_TXE>
 80039f6:	e049      	b.n	8003a8c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	089b      	lsrs	r3, r3, #2
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80d2 	beq.w	8003baa <HAL_I2C_EV_IRQHandler+0x2ce>
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	0a5b      	lsrs	r3, r3, #9
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80cb 	beq.w	8003baa <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b10      	cmp	r3, #16
 8003a18:	d103      	bne.n	8003a22 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f9cf 	bl	8003dbe <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a20:	e0c3      	b.n	8003baa <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fa33 	bl	8003e8e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a28:	e0bf      	b.n	8003baa <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a38:	f000 80b7 	beq.w	8003baa <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	099b      	lsrs	r3, r3, #6
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00f      	beq.n	8003a68 <HAL_I2C_EV_IRQHandler+0x18c>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	0a9b      	lsrs	r3, r3, #10
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d009      	beq.n	8003a68 <HAL_I2C_EV_IRQHandler+0x18c>
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	089b      	lsrs	r3, r3, #2
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d103      	bne.n	8003a68 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 faa3 	bl	8003fac <I2C_MasterReceive_RXNE>
 8003a66:	e011      	b.n	8003a8c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	089b      	lsrs	r3, r3, #2
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 809a 	beq.w	8003baa <HAL_I2C_EV_IRQHandler+0x2ce>
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	0a5b      	lsrs	r3, r3, #9
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 8093 	beq.w	8003baa <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fb42 	bl	800410e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a8a:	e08e      	b.n	8003baa <HAL_I2C_EV_IRQHandler+0x2ce>
 8003a8c:	e08d      	b.n	8003baa <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d004      	beq.n	8003aa0 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	e007      	b.n	8003ab0 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	085b      	lsrs	r3, r3, #1
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d012      	beq.n	8003ae2 <HAL_I2C_EV_IRQHandler+0x206>
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	0a5b      	lsrs	r3, r3, #9
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00c      	beq.n	8003ae2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003ad8:	69b9      	ldr	r1, [r7, #24]
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 ff00 	bl	80048e0 <I2C_Slave_ADDR>
 8003ae0:	e066      	b.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <HAL_I2C_EV_IRQHandler+0x226>
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	0a5b      	lsrs	r3, r3, #9
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 ff34 	bl	8004968 <I2C_Slave_STOPF>
 8003b00:	e056      	b.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b02:	7bbb      	ldrb	r3, [r7, #14]
 8003b04:	2b21      	cmp	r3, #33	; 0x21
 8003b06:	d002      	beq.n	8003b0e <HAL_I2C_EV_IRQHandler+0x232>
 8003b08:	7bbb      	ldrb	r3, [r7, #14]
 8003b0a:	2b29      	cmp	r3, #41	; 0x29
 8003b0c:	d125      	bne.n	8003b5a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	09db      	lsrs	r3, r3, #7
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00f      	beq.n	8003b3a <HAL_I2C_EV_IRQHandler+0x25e>
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	0a9b      	lsrs	r3, r3, #10
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_I2C_EV_IRQHandler+0x25e>
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	089b      	lsrs	r3, r3, #2
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d103      	bne.n	8003b3a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fe16 	bl	8004764 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b38:	e039      	b.n	8003bae <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d033      	beq.n	8003bae <HAL_I2C_EV_IRQHandler+0x2d2>
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	0a5b      	lsrs	r3, r3, #9
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d02d      	beq.n	8003bae <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fe43 	bl	80047de <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b58:	e029      	b.n	8003bae <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00f      	beq.n	8003b86 <HAL_I2C_EV_IRQHandler+0x2aa>
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	0a9b      	lsrs	r3, r3, #10
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <HAL_I2C_EV_IRQHandler+0x2aa>
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	089b      	lsrs	r3, r3, #2
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fe4e 	bl	8004820 <I2C_SlaveReceive_RXNE>
 8003b84:	e014      	b.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	089b      	lsrs	r3, r3, #2
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00e      	beq.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2d4>
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	0a5b      	lsrs	r3, r3, #9
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fe7c 	bl	800489c <I2C_SlaveReceive_BTF>
 8003ba4:	e004      	b.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8003ba6:	bf00      	nop
 8003ba8:	e002      	b.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003baa:	bf00      	nop
 8003bac:	e000      	b.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	460b      	mov	r3, r1
 8003c10:	70fb      	strb	r3, [r7, #3]
 8003c12:	4613      	mov	r3, r2
 8003c14:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c9c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d150      	bne.n	8003d4e <I2C_MasterTransmit_TXE+0xc8>
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	2b21      	cmp	r3, #33	; 0x21
 8003cb0:	d14d      	bne.n	8003d4e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d01d      	beq.n	8003cf4 <I2C_MasterTransmit_TXE+0x6e>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d01a      	beq.n	8003cf4 <I2C_MasterTransmit_TXE+0x6e>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cc4:	d016      	beq.n	8003cf4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cd4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2211      	movs	r2, #17
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ff62 	bl	8003bb6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cf2:	e060      	b.n	8003db6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d02:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d12:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b40      	cmp	r3, #64	; 0x40
 8003d2c:	d107      	bne.n	8003d3e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff ff7d 	bl	8003c36 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d3c:	e03b      	b.n	8003db6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff ff35 	bl	8003bb6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d4c:	e033      	b.n	8003db6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	2b21      	cmp	r3, #33	; 0x21
 8003d52:	d005      	beq.n	8003d60 <I2C_MasterTransmit_TXE+0xda>
 8003d54:	7bbb      	ldrb	r3, [r7, #14]
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	d12d      	bne.n	8003db6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b22      	cmp	r3, #34	; 0x22
 8003d5e:	d12a      	bne.n	8003db6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d108      	bne.n	8003d7c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d78:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003d7a:	e01c      	b.n	8003db6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d103      	bne.n	8003d90 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f880 	bl	8003e8e <I2C_MemoryTransmit_TXE_BTF>
}
 8003d8e:	e012      	b.n	8003db6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003db4:	e7ff      	b.n	8003db6 <I2C_MasterTransmit_TXE+0x130>
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b21      	cmp	r3, #33	; 0x21
 8003dd6:	d156      	bne.n	8003e86 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d012      	beq.n	8003e08 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	781a      	ldrb	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003e06:	e03e      	b.n	8003e86 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d01d      	beq.n	8003e4a <I2C_MasterTransmit_BTF+0x8c>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d01a      	beq.n	8003e4a <I2C_MasterTransmit_BTF+0x8c>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e1a:	d016      	beq.n	8003e4a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e2a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2211      	movs	r2, #17
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff feb7 	bl	8003bb6 <HAL_I2C_MasterTxCpltCallback>
}
 8003e48:	e01d      	b.n	8003e86 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e58:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e68:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fe98 	bl	8003bb6 <HAL_I2C_MasterTxCpltCallback>
}
 8003e86:	bf00      	nop
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d11d      	bne.n	8003ee2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d10b      	bne.n	8003ec6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ebe:	1c9a      	adds	r2, r3, #2
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003ec4:	e06e      	b.n	8003fa4 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	121b      	asrs	r3, r3, #8
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ee0:	e060      	b.n	8003fa4 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d10b      	bne.n	8003f02 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f00:	e050      	b.n	8003fa4 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d14c      	bne.n	8003fa4 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	2b22      	cmp	r3, #34	; 0x22
 8003f0e:	d108      	bne.n	8003f22 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f1e:	601a      	str	r2, [r3, #0]
}
 8003f20:	e040      	b.n	8003fa4 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d015      	beq.n	8003f58 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	2b21      	cmp	r3, #33	; 0x21
 8003f30:	d112      	bne.n	8003f58 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	781a      	ldrb	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f56:	e025      	b.n	8003fa4 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d120      	bne.n	8003fa4 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	2b21      	cmp	r3, #33	; 0x21
 8003f66:	d11d      	bne.n	8003fa4 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f76:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f86:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff fe49 	bl	8003c36 <HAL_I2C_MemTxCpltCallback>
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b22      	cmp	r3, #34	; 0x22
 8003fbe:	f040 80a2 	bne.w	8004106 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d921      	bls.n	8004014 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	f040 8082 	bne.w	8004106 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004010:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004012:	e078      	b.n	8004106 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	2b02      	cmp	r3, #2
 800401a:	d074      	beq.n	8004106 <I2C_MasterReceive_RXNE+0x15a>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d002      	beq.n	8004028 <I2C_MasterReceive_RXNE+0x7c>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d16e      	bne.n	8004106 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f001 fa4f 	bl	80054cc <I2C_WaitOnSTOPRequestThroughIT>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d142      	bne.n	80040ba <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004042:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004052:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	d10a      	bne.n	80040a4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff fdd4 	bl	8003c4a <HAL_I2C_MemRxCpltCallback>
}
 80040a2:	e030      	b.n	8004106 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2212      	movs	r2, #18
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff fd89 	bl	8003bca <HAL_I2C_MasterRxCpltCallback>
}
 80040b8:	e025      	b.n	8004106 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff fdac 	bl	8003c5e <HAL_I2C_ErrorCallback>
}
 8004106:	bf00      	nop
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b04      	cmp	r3, #4
 8004124:	d11b      	bne.n	800415e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004134:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800415c:	e0bd      	b.n	80042da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b03      	cmp	r3, #3
 8004166:	d129      	bne.n	80041bc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004176:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b04      	cmp	r3, #4
 800417c:	d00a      	beq.n	8004194 <I2C_MasterReceive_BTF+0x86>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d007      	beq.n	8004194 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004192:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041ba:	e08e      	b.n	80042da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d176      	bne.n	80042b4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d002      	beq.n	80041d2 <I2C_MasterReceive_BTF+0xc4>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b10      	cmp	r3, #16
 80041d0:	d108      	bne.n	80041e4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e019      	b.n	8004218 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d002      	beq.n	80041f0 <I2C_MasterReceive_BTF+0xe2>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d108      	bne.n	8004202 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	e00a      	b.n	8004218 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b10      	cmp	r3, #16
 8004206:	d007      	beq.n	8004218 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004216:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004272:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d10a      	bne.n	800429e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff fcd7 	bl	8003c4a <HAL_I2C_MemRxCpltCallback>
}
 800429c:	e01d      	b.n	80042da <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2212      	movs	r2, #18
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff fc8c 	bl	8003bca <HAL_I2C_MasterRxCpltCallback>
}
 80042b2:	e012      	b.n	80042da <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d117      	bne.n	8004326 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800430e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004310:	e067      	b.n	80043e2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	b2da      	uxtb	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	611a      	str	r2, [r3, #16]
}
 8004324:	e05d      	b.n	80043e2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800432e:	d133      	bne.n	8004398 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b21      	cmp	r3, #33	; 0x21
 800433a:	d109      	bne.n	8004350 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004340:	b2db      	uxtb	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800434c:	611a      	str	r2, [r3, #16]
 800434e:	e008      	b.n	8004362 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	b2da      	uxtb	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004366:	2b00      	cmp	r3, #0
 8004368:	d004      	beq.n	8004374 <I2C_Master_SB+0x92>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	2b00      	cmp	r3, #0
 8004372:	d108      	bne.n	8004386 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	2b00      	cmp	r3, #0
 800437a:	d032      	beq.n	80043e2 <I2C_Master_SB+0x100>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	2b00      	cmp	r3, #0
 8004384:	d02d      	beq.n	80043e2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004394:	605a      	str	r2, [r3, #4]
}
 8004396:	e024      	b.n	80043e2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10e      	bne.n	80043be <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	11db      	asrs	r3, r3, #7
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 0306 	and.w	r3, r3, #6
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f063 030f 	orn	r3, r3, #15
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	611a      	str	r2, [r3, #16]
}
 80043bc:	e011      	b.n	80043e2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10d      	bne.n	80043e2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	11db      	asrs	r3, r3, #7
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f003 0306 	and.w	r3, r3, #6
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f063 030e 	orn	r3, r3, #14
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	611a      	str	r2, [r3, #16]
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004406:	2b00      	cmp	r3, #0
 8004408:	d004      	beq.n	8004414 <I2C_Master_ADD10+0x26>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d108      	bne.n	8004426 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00c      	beq.n	8004436 <I2C_Master_ADD10+0x48>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d007      	beq.n	8004436 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004434:	605a      	str	r2, [r3, #4]
  }
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004442:	b480      	push	{r7}
 8004444:	b091      	sub	sp, #68	; 0x44
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004450:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b22      	cmp	r3, #34	; 0x22
 800446a:	f040 8169 	bne.w	8004740 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10f      	bne.n	8004496 <I2C_Master_ADDR+0x54>
 8004476:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800447a:	2b40      	cmp	r3, #64	; 0x40
 800447c:	d10b      	bne.n	8004496 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447e:	2300      	movs	r3, #0
 8004480:	633b      	str	r3, [r7, #48]	; 0x30
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	633b      	str	r3, [r7, #48]	; 0x30
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	633b      	str	r3, [r7, #48]	; 0x30
 8004492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004494:	e160      	b.n	8004758 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449a:	2b00      	cmp	r3, #0
 800449c:	d11d      	bne.n	80044da <I2C_Master_ADDR+0x98>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044a6:	d118      	bne.n	80044da <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a8:	2300      	movs	r3, #0
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044cc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	651a      	str	r2, [r3, #80]	; 0x50
 80044d8:	e13e      	b.n	8004758 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d113      	bne.n	800450c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e4:	2300      	movs	r3, #0
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e115      	b.n	8004738 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b01      	cmp	r3, #1
 8004514:	f040 808a 	bne.w	800462c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800451e:	d137      	bne.n	8004590 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800453a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800453e:	d113      	bne.n	8004568 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004550:	2300      	movs	r3, #0
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	e0e7      	b.n	8004738 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004568:	2300      	movs	r3, #0
 800456a:	623b      	str	r3, [r7, #32]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	623b      	str	r3, [r7, #32]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	623b      	str	r3, [r7, #32]
 800457c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e0d3      	b.n	8004738 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004592:	2b08      	cmp	r3, #8
 8004594:	d02e      	beq.n	80045f4 <I2C_Master_ADDR+0x1b2>
 8004596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004598:	2b20      	cmp	r3, #32
 800459a:	d02b      	beq.n	80045f4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800459c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459e:	2b12      	cmp	r3, #18
 80045a0:	d102      	bne.n	80045a8 <I2C_Master_ADDR+0x166>
 80045a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d125      	bne.n	80045f4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d00e      	beq.n	80045cc <I2C_Master_ADDR+0x18a>
 80045ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d00b      	beq.n	80045cc <I2C_Master_ADDR+0x18a>
 80045b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b6:	2b10      	cmp	r3, #16
 80045b8:	d008      	beq.n	80045cc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e007      	b.n	80045dc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045da:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	e0a1      	b.n	8004738 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004602:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004604:	2300      	movs	r3, #0
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	61bb      	str	r3, [r7, #24]
 8004618:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	e085      	b.n	8004738 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d14d      	bne.n	80046d2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	2b04      	cmp	r3, #4
 800463a:	d016      	beq.n	800466a <I2C_Master_ADDR+0x228>
 800463c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463e:	2b02      	cmp	r3, #2
 8004640:	d013      	beq.n	800466a <I2C_Master_ADDR+0x228>
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	2b10      	cmp	r3, #16
 8004646:	d010      	beq.n	800466a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004656:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	e007      	b.n	800467a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004678:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004688:	d117      	bne.n	80046ba <I2C_Master_ADDR+0x278>
 800468a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004690:	d00b      	beq.n	80046aa <I2C_Master_ADDR+0x268>
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004694:	2b01      	cmp	r3, #1
 8004696:	d008      	beq.n	80046aa <I2C_Master_ADDR+0x268>
 8004698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469a:	2b08      	cmp	r3, #8
 800469c:	d005      	beq.n	80046aa <I2C_Master_ADDR+0x268>
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d002      	beq.n	80046aa <I2C_Master_ADDR+0x268>
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d107      	bne.n	80046ba <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	e032      	b.n	8004738 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046e0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f0:	d117      	bne.n	8004722 <I2C_Master_ADDR+0x2e0>
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046f8:	d00b      	beq.n	8004712 <I2C_Master_ADDR+0x2d0>
 80046fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d008      	beq.n	8004712 <I2C_Master_ADDR+0x2d0>
 8004700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004702:	2b08      	cmp	r3, #8
 8004704:	d005      	beq.n	8004712 <I2C_Master_ADDR+0x2d0>
 8004706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004708:	2b10      	cmp	r3, #16
 800470a:	d002      	beq.n	8004712 <I2C_Master_ADDR+0x2d0>
 800470c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470e:	2b20      	cmp	r3, #32
 8004710:	d107      	bne.n	8004722 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004720:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004722:	2300      	movs	r3, #0
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800473e:	e00b      	b.n	8004758 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]
}
 8004756:	e7ff      	b.n	8004758 <I2C_Master_ADDR+0x316>
 8004758:	bf00      	nop
 800475a:	3744      	adds	r7, #68	; 0x44
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004772:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d02b      	beq.n	80047d6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	781a      	ldrb	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d114      	bne.n	80047d6 <I2C_SlaveTransmit_TXE+0x72>
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b29      	cmp	r3, #41	; 0x29
 80047b0:	d111      	bne.n	80047d6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2221      	movs	r2, #33	; 0x21
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2228      	movs	r2, #40	; 0x28
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff fa04 	bl	8003bde <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d011      	beq.n	8004814 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	781a      	ldrb	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d02c      	beq.n	8004894 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004856:	b29b      	uxth	r3, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d114      	bne.n	8004894 <I2C_SlaveReceive_RXNE+0x74>
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	2b2a      	cmp	r3, #42	; 0x2a
 800486e:	d111      	bne.n	8004894 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2222      	movs	r2, #34	; 0x22
 8004884:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2228      	movs	r2, #40	; 0x28
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff f9af 	bl	8003bf2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d012      	beq.n	80048d4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80048ea:	2300      	movs	r3, #0
 80048ec:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048fa:	2b28      	cmp	r3, #40	; 0x28
 80048fc:	d127      	bne.n	800494e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	089b      	lsrs	r3, r3, #2
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800491a:	2301      	movs	r3, #1
 800491c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	09db      	lsrs	r3, r3, #7
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d103      	bne.n	8004932 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	81bb      	strh	r3, [r7, #12]
 8004930:	e002      	b.n	8004938 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004940:	89ba      	ldrh	r2, [r7, #12]
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	4619      	mov	r1, r3
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff f95d 	bl	8003c06 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800494c:	e008      	b.n	8004960 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f06f 0202 	mvn.w	r2, #2
 8004956:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004976:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004986:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004988:	2300      	movs	r3, #0
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	60bb      	str	r3, [r7, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c4:	d172      	bne.n	8004aac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b22      	cmp	r3, #34	; 0x22
 80049ca:	d002      	beq.n	80049d2 <I2C_Slave_STOPF+0x6a>
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b2a      	cmp	r3, #42	; 0x2a
 80049d0:	d135      	bne.n	8004a3e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	b29a      	uxth	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f043 0204 	orr.w	r2, r3, #4
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fe f849 	bl	8002aa2 <HAL_DMA_GetState>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d049      	beq.n	8004aaa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	4a69      	ldr	r2, [pc, #420]	; (8004bc0 <I2C_Slave_STOPF+0x258>)
 8004a1c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fe f81b 	bl	8002a5e <HAL_DMA_Abort_IT>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d03d      	beq.n	8004aaa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a3c:	e035      	b.n	8004aaa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f043 0204 	orr.w	r2, r3, #4
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe f813 	bl	8002aa2 <HAL_DMA_GetState>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d014      	beq.n	8004aac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a86:	4a4e      	ldr	r2, [pc, #312]	; (8004bc0 <I2C_Slave_STOPF+0x258>)
 8004a88:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fd ffe5 	bl	8002a5e <HAL_DMA_Abort_IT>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4798      	blx	r3
 8004aa8:	e000      	b.n	8004aac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aaa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d03e      	beq.n	8004b34 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d112      	bne.n	8004aea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	d112      	bne.n	8004b1e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	f043 0204 	orr.w	r2, r3, #4
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f843 	bl	8004bc8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004b42:	e039      	b.n	8004bb8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b2a      	cmp	r3, #42	; 0x2a
 8004b48:	d109      	bne.n	8004b5e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2228      	movs	r2, #40	; 0x28
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff f84a 	bl	8003bf2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b28      	cmp	r3, #40	; 0x28
 8004b68:	d111      	bne.n	8004b8e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a15      	ldr	r2, [pc, #84]	; (8004bc4 <I2C_Slave_STOPF+0x25c>)
 8004b6e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff f84b 	bl	8003c22 <HAL_I2C_ListenCpltCallback>
}
 8004b8c:	e014      	b.n	8004bb8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	2b22      	cmp	r3, #34	; 0x22
 8004b94:	d002      	beq.n	8004b9c <I2C_Slave_STOPF+0x234>
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	2b22      	cmp	r3, #34	; 0x22
 8004b9a:	d10d      	bne.n	8004bb8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff f81d 	bl	8003bf2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	080050cd 	.word	0x080050cd
 8004bc4:	ffff0000 	.word	0xffff0000

08004bc8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bde:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004be0:	7bbb      	ldrb	r3, [r7, #14]
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d002      	beq.n	8004bec <I2C_ITError+0x24>
 8004be6:	7bbb      	ldrb	r3, [r7, #14]
 8004be8:	2b40      	cmp	r3, #64	; 0x40
 8004bea:	d10a      	bne.n	8004c02 <I2C_ITError+0x3a>
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	2b22      	cmp	r3, #34	; 0x22
 8004bf0:	d107      	bne.n	8004c02 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c00:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
 8004c04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c08:	2b28      	cmp	r3, #40	; 0x28
 8004c0a:	d107      	bne.n	8004c1c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2228      	movs	r2, #40	; 0x28
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c1a:	e015      	b.n	8004c48 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c2a:	d00a      	beq.n	8004c42 <I2C_ITError+0x7a>
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	2b60      	cmp	r3, #96	; 0x60
 8004c30:	d007      	beq.n	8004c42 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c56:	d162      	bne.n	8004d1e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c66:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d020      	beq.n	8004cb8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	4a6a      	ldr	r2, [pc, #424]	; (8004e24 <I2C_ITError+0x25c>)
 8004c7c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fd feeb 	bl	8002a5e <HAL_DMA_Abort_IT>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 8089 	beq.w	8004da2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4798      	blx	r3
 8004cb6:	e074      	b.n	8004da2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	4a59      	ldr	r2, [pc, #356]	; (8004e24 <I2C_ITError+0x25c>)
 8004cbe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fd feca 	bl	8002a5e <HAL_DMA_Abort_IT>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d068      	beq.n	8004da2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cda:	2b40      	cmp	r3, #64	; 0x40
 8004cdc:	d10b      	bne.n	8004cf6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0201 	bic.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4798      	blx	r3
 8004d1c:	e041      	b.n	8004da2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b60      	cmp	r3, #96	; 0x60
 8004d28:	d125      	bne.n	8004d76 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d42:	2b40      	cmp	r3, #64	; 0x40
 8004d44:	d10b      	bne.n	8004d5e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0201 	bic.w	r2, r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fe ff7f 	bl	8003c72 <HAL_I2C_AbortCpltCallback>
 8004d74:	e015      	b.n	8004da2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d80:	2b40      	cmp	r3, #64	; 0x40
 8004d82:	d10b      	bne.n	8004d9c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7fe ff5e 	bl	8003c5e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10e      	bne.n	8004dd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d104      	bne.n	8004dd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d007      	beq.n	8004de0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dde:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d113      	bne.n	8004e1c <I2C_ITError+0x254>
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	2b28      	cmp	r3, #40	; 0x28
 8004df8:	d110      	bne.n	8004e1c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <I2C_ITError+0x260>)
 8004dfe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fe ff03 	bl	8003c22 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	080050cd 	.word	0x080050cd
 8004e28:	ffff0000 	.word	0xffff0000

08004e2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d006      	beq.n	8004e56 <I2C_MasterRequestWrite+0x2a>
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d003      	beq.n	8004e56 <I2C_MasterRequestWrite+0x2a>
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e54:	d108      	bne.n	8004e68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e00b      	b.n	8004e80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	2b12      	cmp	r3, #18
 8004e6e:	d107      	bne.n	8004e80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f9c5 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00d      	beq.n	8004eb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea6:	d103      	bne.n	8004eb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e035      	b.n	8004f20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ebc:	d108      	bne.n	8004ed0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ebe:	897b      	ldrh	r3, [r7, #10]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ecc:	611a      	str	r2, [r3, #16]
 8004ece:	e01b      	b.n	8004f08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ed0:	897b      	ldrh	r3, [r7, #10]
 8004ed2:	11db      	asrs	r3, r3, #7
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f003 0306 	and.w	r3, r3, #6
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	f063 030f 	orn	r3, r3, #15
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	490e      	ldr	r1, [pc, #56]	; (8004f28 <I2C_MasterRequestWrite+0xfc>)
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f9eb 	bl	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e010      	b.n	8004f20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004efe:	897b      	ldrh	r3, [r7, #10]
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	4907      	ldr	r1, [pc, #28]	; (8004f2c <I2C_MasterRequestWrite+0x100>)
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f9db 	bl	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	00010008 	.word	0x00010008
 8004f2c:	00010002 	.word	0x00010002

08004f30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	607a      	str	r2, [r7, #4]
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d006      	beq.n	8004f6a <I2C_MasterRequestRead+0x3a>
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d003      	beq.n	8004f6a <I2C_MasterRequestRead+0x3a>
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f68:	d108      	bne.n	8004f7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	e00b      	b.n	8004f94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	2b11      	cmp	r3, #17
 8004f82:	d107      	bne.n	8004f94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f93b 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00d      	beq.n	8004fc8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fba:	d103      	bne.n	8004fc4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e079      	b.n	80050bc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fd0:	d108      	bne.n	8004fe4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fd2:	897b      	ldrh	r3, [r7, #10]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	611a      	str	r2, [r3, #16]
 8004fe2:	e05f      	b.n	80050a4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fe4:	897b      	ldrh	r3, [r7, #10]
 8004fe6:	11db      	asrs	r3, r3, #7
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	f003 0306 	and.w	r3, r3, #6
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f063 030f 	orn	r3, r3, #15
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	4930      	ldr	r1, [pc, #192]	; (80050c4 <I2C_MasterRequestRead+0x194>)
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f961 	bl	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e054      	b.n	80050bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005012:	897b      	ldrh	r3, [r7, #10]
 8005014:	b2da      	uxtb	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	4929      	ldr	r1, [pc, #164]	; (80050c8 <I2C_MasterRequestRead+0x198>)
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f951 	bl	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e044      	b.n	80050bc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005032:	2300      	movs	r3, #0
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	613b      	str	r3, [r7, #16]
 8005046:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005056:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f8d9 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00d      	beq.n	800508c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507e:	d103      	bne.n	8005088 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005086:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e017      	b.n	80050bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800508c:	897b      	ldrh	r3, [r7, #10]
 800508e:	11db      	asrs	r3, r3, #7
 8005090:	b2db      	uxtb	r3, r3
 8005092:	f003 0306 	and.w	r3, r3, #6
 8005096:	b2db      	uxtb	r3, r3
 8005098:	f063 030e 	orn	r3, r3, #14
 800509c:	b2da      	uxtb	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	4907      	ldr	r1, [pc, #28]	; (80050c8 <I2C_MasterRequestRead+0x198>)
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f90d 	bl	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	00010008 	.word	0x00010008
 80050c8:	00010002 	.word	0x00010002

080050cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80050e6:	4b4b      	ldr	r3, [pc, #300]	; (8005214 <I2C_DMAAbort+0x148>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	08db      	lsrs	r3, r3, #3
 80050ec:	4a4a      	ldr	r2, [pc, #296]	; (8005218 <I2C_DMAAbort+0x14c>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	0a1a      	lsrs	r2, r3, #8
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	00da      	lsls	r2, r3, #3
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f043 0220 	orr.w	r2, r3, #32
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005112:	e00a      	b.n	800512a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3b01      	subs	r3, #1
 8005118:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005128:	d0ea      	beq.n	8005100 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005136:	2200      	movs	r2, #0
 8005138:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	2200      	movs	r2, #0
 8005148:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005158:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2200      	movs	r2, #0
 800515e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516c:	2200      	movs	r2, #0
 800516e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	2200      	movs	r2, #0
 800517e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0201 	bic.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b60      	cmp	r3, #96	; 0x60
 800519a:	d10e      	bne.n	80051ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2200      	movs	r2, #0
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051b2:	6978      	ldr	r0, [r7, #20]
 80051b4:	f7fe fd5d 	bl	8003c72 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051b8:	e027      	b.n	800520a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051ba:	7cfb      	ldrb	r3, [r7, #19]
 80051bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051c0:	2b28      	cmp	r3, #40	; 0x28
 80051c2:	d117      	bne.n	80051f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2200      	movs	r2, #0
 80051e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2228      	movs	r2, #40	; 0x28
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051f2:	e007      	b.n	8005204 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005204:	6978      	ldr	r0, [r7, #20]
 8005206:	f7fe fd2a 	bl	8003c5e <HAL_I2C_ErrorCallback>
}
 800520a:	bf00      	nop
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000004 	.word	0x20000004
 8005218:	14f8b589 	.word	0x14f8b589

0800521c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800522c:	e025      	b.n	800527a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005234:	d021      	beq.n	800527a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005236:	f7fd f945 	bl	80024c4 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d302      	bcc.n	800524c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d116      	bne.n	800527a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f043 0220 	orr.w	r2, r3, #32
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e023      	b.n	80052c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d10d      	bne.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	43da      	mvns	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4013      	ands	r3, r2
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	bf0c      	ite	eq
 8005296:	2301      	moveq	r3, #1
 8005298:	2300      	movne	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	e00c      	b.n	80052ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	43da      	mvns	r2, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4013      	ands	r3, r2
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bf0c      	ite	eq
 80052b2:	2301      	moveq	r3, #1
 80052b4:	2300      	movne	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d0b6      	beq.n	800522e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052d8:	e051      	b.n	800537e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e8:	d123      	bne.n	8005332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005302:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f043 0204 	orr.w	r2, r3, #4
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e046      	b.n	80053c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005338:	d021      	beq.n	800537e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533a:	f7fd f8c3 	bl	80024c4 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	429a      	cmp	r2, r3
 8005348:	d302      	bcc.n	8005350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d116      	bne.n	800537e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	f043 0220 	orr.w	r2, r3, #32
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e020      	b.n	80053c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	0c1b      	lsrs	r3, r3, #16
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	d10c      	bne.n	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	43da      	mvns	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4013      	ands	r3, r2
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	bf14      	ite	ne
 800539a:	2301      	movne	r3, #1
 800539c:	2300      	moveq	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	e00b      	b.n	80053ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	43da      	mvns	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4013      	ands	r3, r2
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d18d      	bne.n	80052da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053d4:	e02d      	b.n	8005432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 f900 	bl	80055dc <I2C_IsAcknowledgeFailed>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e02d      	b.n	8005442 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ec:	d021      	beq.n	8005432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ee:	f7fd f869 	bl	80024c4 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d116      	bne.n	8005432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f043 0220 	orr.w	r2, r3, #32
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e007      	b.n	8005442 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543c:	2b80      	cmp	r3, #128	; 0x80
 800543e:	d1ca      	bne.n	80053d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005456:	e02d      	b.n	80054b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f8bf 	bl	80055dc <I2C_IsAcknowledgeFailed>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e02d      	b.n	80054c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800546e:	d021      	beq.n	80054b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005470:	f7fd f828 	bl	80024c4 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	429a      	cmp	r2, r3
 800547e:	d302      	bcc.n	8005486 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d116      	bne.n	80054b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	f043 0220 	orr.w	r2, r3, #32
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e007      	b.n	80054c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d1ca      	bne.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80054d8:	4b13      	ldr	r3, [pc, #76]	; (8005528 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	08db      	lsrs	r3, r3, #3
 80054de:	4a13      	ldr	r2, [pc, #76]	; (800552c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	0a1a      	lsrs	r2, r3, #8
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d107      	bne.n	800550a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f043 0220 	orr.w	r2, r3, #32
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e008      	b.n	800551c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005518:	d0e9      	beq.n	80054ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	20000004 	.word	0x20000004
 800552c:	14f8b589 	.word	0x14f8b589

08005530 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800553c:	e042      	b.n	80055c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b10      	cmp	r3, #16
 800554a:	d119      	bne.n	8005580 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0210 	mvn.w	r2, #16
 8005554:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e029      	b.n	80055d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005580:	f7fc ffa0 	bl	80024c4 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	429a      	cmp	r2, r3
 800558e:	d302      	bcc.n	8005596 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d116      	bne.n	80055c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	f043 0220 	orr.w	r2, r3, #32
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e007      	b.n	80055d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d1b5      	bne.n	800553e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f2:	d11b      	bne.n	800562c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	f043 0204 	orr.w	r2, r3, #4
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005646:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800564a:	d103      	bne.n	8005654 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005652:	e007      	b.n	8005664 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800565c:	d102      	bne.n	8005664 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2208      	movs	r2, #8
 8005662:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e0cc      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005684:	4b68      	ldr	r3, [pc, #416]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d90c      	bls.n	80056ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005692:	4b65      	ldr	r3, [pc, #404]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800569a:	4b63      	ldr	r3, [pc, #396]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d001      	beq.n	80056ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0b8      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d020      	beq.n	80056fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056c4:	4b59      	ldr	r3, [pc, #356]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4a58      	ldr	r2, [pc, #352]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056dc:	4b53      	ldr	r3, [pc, #332]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4a52      	ldr	r2, [pc, #328]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e8:	4b50      	ldr	r3, [pc, #320]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	494d      	ldr	r1, [pc, #308]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d044      	beq.n	8005790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d107      	bne.n	800571e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570e:	4b47      	ldr	r3, [pc, #284]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d119      	bne.n	800574e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e07f      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d003      	beq.n	800572e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800572a:	2b03      	cmp	r3, #3
 800572c:	d107      	bne.n	800573e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800572e:	4b3f      	ldr	r3, [pc, #252]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e06f      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800573e:	4b3b      	ldr	r3, [pc, #236]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e067      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800574e:	4b37      	ldr	r3, [pc, #220]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f023 0203 	bic.w	r2, r3, #3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4934      	ldr	r1, [pc, #208]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 800575c:	4313      	orrs	r3, r2
 800575e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005760:	f7fc feb0 	bl	80024c4 <HAL_GetTick>
 8005764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005766:	e00a      	b.n	800577e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005768:	f7fc feac 	bl	80024c4 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f241 3288 	movw	r2, #5000	; 0x1388
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e04f      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577e:	4b2b      	ldr	r3, [pc, #172]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 020c 	and.w	r2, r3, #12
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	429a      	cmp	r2, r3
 800578e:	d1eb      	bne.n	8005768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005790:	4b25      	ldr	r3, [pc, #148]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d20c      	bcs.n	80057b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579e:	4b22      	ldr	r3, [pc, #136]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a6:	4b20      	ldr	r3, [pc, #128]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e032      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c4:	4b19      	ldr	r3, [pc, #100]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	4916      	ldr	r1, [pc, #88]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e2:	4b12      	ldr	r3, [pc, #72]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	490e      	ldr	r1, [pc, #56]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057f6:	f000 f889 	bl	800590c <HAL_RCC_GetSysClockFreq>
 80057fa:	4602      	mov	r2, r0
 80057fc:	4b0b      	ldr	r3, [pc, #44]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	490a      	ldr	r1, [pc, #40]	; (8005830 <HAL_RCC_ClockConfig+0x1c0>)
 8005808:	5ccb      	ldrb	r3, [r1, r3]
 800580a:	fa22 f303 	lsr.w	r3, r2, r3
 800580e:	4a09      	ldr	r2, [pc, #36]	; (8005834 <HAL_RCC_ClockConfig+0x1c4>)
 8005810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005812:	4b09      	ldr	r3, [pc, #36]	; (8005838 <HAL_RCC_ClockConfig+0x1c8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7fc fe10 	bl	800243c <HAL_InitTick>

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40023c00 	.word	0x40023c00
 800582c:	40023800 	.word	0x40023800
 8005830:	0801b384 	.word	0x0801b384
 8005834:	20000004 	.word	0x20000004
 8005838:	20000008 	.word	0x20000008

0800583c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08c      	sub	sp, #48	; 0x30
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d129      	bne.n	80058a2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800584e:	2300      	movs	r3, #0
 8005850:	61bb      	str	r3, [r7, #24]
 8005852:	4b2b      	ldr	r3, [pc, #172]	; (8005900 <HAL_RCC_MCOConfig+0xc4>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	4a2a      	ldr	r2, [pc, #168]	; (8005900 <HAL_RCC_MCOConfig+0xc4>)
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	6313      	str	r3, [r2, #48]	; 0x30
 800585e:	4b28      	ldr	r3, [pc, #160]	; (8005900 <HAL_RCC_MCOConfig+0xc4>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	61bb      	str	r3, [r7, #24]
 8005868:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800586a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800586e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005870:	2302      	movs	r3, #2
 8005872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005874:	2303      	movs	r3, #3
 8005876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005878:	2300      	movs	r3, #0
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800587c:	2300      	movs	r3, #0
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005880:	f107 031c 	add.w	r3, r7, #28
 8005884:	4619      	mov	r1, r3
 8005886:	481f      	ldr	r0, [pc, #124]	; (8005904 <HAL_RCC_MCOConfig+0xc8>)
 8005888:	f7fd f9fa 	bl	8002c80 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800588c:	4b1c      	ldr	r3, [pc, #112]	; (8005900 <HAL_RCC_MCOConfig+0xc4>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	430b      	orrs	r3, r1
 800589a:	4919      	ldr	r1, [pc, #100]	; (8005900 <HAL_RCC_MCOConfig+0xc4>)
 800589c:	4313      	orrs	r3, r2
 800589e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80058a0:	e029      	b.n	80058f6 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	4b16      	ldr	r3, [pc, #88]	; (8005900 <HAL_RCC_MCOConfig+0xc4>)
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	4a15      	ldr	r2, [pc, #84]	; (8005900 <HAL_RCC_MCOConfig+0xc4>)
 80058ac:	f043 0304 	orr.w	r3, r3, #4
 80058b0:	6313      	str	r3, [r2, #48]	; 0x30
 80058b2:	4b13      	ldr	r3, [pc, #76]	; (8005900 <HAL_RCC_MCOConfig+0xc4>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80058be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058c4:	2302      	movs	r3, #2
 80058c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058c8:	2303      	movs	r3, #3
 80058ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80058d0:	2300      	movs	r3, #0
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80058d4:	f107 031c 	add.w	r3, r7, #28
 80058d8:	4619      	mov	r1, r3
 80058da:	480b      	ldr	r0, [pc, #44]	; (8005908 <HAL_RCC_MCOConfig+0xcc>)
 80058dc:	f7fd f9d0 	bl	8002c80 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80058e0:	4b07      	ldr	r3, [pc, #28]	; (8005900 <HAL_RCC_MCOConfig+0xc4>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	00d9      	lsls	r1, r3, #3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	430b      	orrs	r3, r1
 80058f0:	4903      	ldr	r1, [pc, #12]	; (8005900 <HAL_RCC_MCOConfig+0xc4>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	608b      	str	r3, [r1, #8]
}
 80058f6:	bf00      	nop
 80058f8:	3730      	adds	r7, #48	; 0x30
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40023800 	.word	0x40023800
 8005904:	40020000 	.word	0x40020000
 8005908:	40020800 	.word	0x40020800

0800590c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800590c:	b5b0      	push	{r4, r5, r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005912:	2100      	movs	r1, #0
 8005914:	6079      	str	r1, [r7, #4]
 8005916:	2100      	movs	r1, #0
 8005918:	60f9      	str	r1, [r7, #12]
 800591a:	2100      	movs	r1, #0
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800591e:	2100      	movs	r1, #0
 8005920:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005922:	4952      	ldr	r1, [pc, #328]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8005924:	6889      	ldr	r1, [r1, #8]
 8005926:	f001 010c 	and.w	r1, r1, #12
 800592a:	2908      	cmp	r1, #8
 800592c:	d00d      	beq.n	800594a <HAL_RCC_GetSysClockFreq+0x3e>
 800592e:	2908      	cmp	r1, #8
 8005930:	f200 8094 	bhi.w	8005a5c <HAL_RCC_GetSysClockFreq+0x150>
 8005934:	2900      	cmp	r1, #0
 8005936:	d002      	beq.n	800593e <HAL_RCC_GetSysClockFreq+0x32>
 8005938:	2904      	cmp	r1, #4
 800593a:	d003      	beq.n	8005944 <HAL_RCC_GetSysClockFreq+0x38>
 800593c:	e08e      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800593e:	4b4c      	ldr	r3, [pc, #304]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x164>)
 8005940:	60bb      	str	r3, [r7, #8]
       break;
 8005942:	e08e      	b.n	8005a62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005944:	4b4b      	ldr	r3, [pc, #300]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x168>)
 8005946:	60bb      	str	r3, [r7, #8]
      break;
 8005948:	e08b      	b.n	8005a62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800594a:	4948      	ldr	r1, [pc, #288]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x160>)
 800594c:	6849      	ldr	r1, [r1, #4]
 800594e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005952:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005954:	4945      	ldr	r1, [pc, #276]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8005956:	6849      	ldr	r1, [r1, #4]
 8005958:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800595c:	2900      	cmp	r1, #0
 800595e:	d024      	beq.n	80059aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005960:	4942      	ldr	r1, [pc, #264]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8005962:	6849      	ldr	r1, [r1, #4]
 8005964:	0989      	lsrs	r1, r1, #6
 8005966:	4608      	mov	r0, r1
 8005968:	f04f 0100 	mov.w	r1, #0
 800596c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005970:	f04f 0500 	mov.w	r5, #0
 8005974:	ea00 0204 	and.w	r2, r0, r4
 8005978:	ea01 0305 	and.w	r3, r1, r5
 800597c:	493d      	ldr	r1, [pc, #244]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x168>)
 800597e:	fb01 f003 	mul.w	r0, r1, r3
 8005982:	2100      	movs	r1, #0
 8005984:	fb01 f102 	mul.w	r1, r1, r2
 8005988:	1844      	adds	r4, r0, r1
 800598a:	493a      	ldr	r1, [pc, #232]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x168>)
 800598c:	fba2 0101 	umull	r0, r1, r2, r1
 8005990:	1863      	adds	r3, r4, r1
 8005992:	4619      	mov	r1, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	461a      	mov	r2, r3
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	f7fa fc98 	bl	80002d0 <__aeabi_uldivmod>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4613      	mov	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	e04a      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059aa:	4b30      	ldr	r3, [pc, #192]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x160>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	099b      	lsrs	r3, r3, #6
 80059b0:	461a      	mov	r2, r3
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80059ba:	f04f 0100 	mov.w	r1, #0
 80059be:	ea02 0400 	and.w	r4, r2, r0
 80059c2:	ea03 0501 	and.w	r5, r3, r1
 80059c6:	4620      	mov	r0, r4
 80059c8:	4629      	mov	r1, r5
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	f04f 0300 	mov.w	r3, #0
 80059d2:	014b      	lsls	r3, r1, #5
 80059d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80059d8:	0142      	lsls	r2, r0, #5
 80059da:	4610      	mov	r0, r2
 80059dc:	4619      	mov	r1, r3
 80059de:	1b00      	subs	r0, r0, r4
 80059e0:	eb61 0105 	sbc.w	r1, r1, r5
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	018b      	lsls	r3, r1, #6
 80059ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80059f2:	0182      	lsls	r2, r0, #6
 80059f4:	1a12      	subs	r2, r2, r0
 80059f6:	eb63 0301 	sbc.w	r3, r3, r1
 80059fa:	f04f 0000 	mov.w	r0, #0
 80059fe:	f04f 0100 	mov.w	r1, #0
 8005a02:	00d9      	lsls	r1, r3, #3
 8005a04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a08:	00d0      	lsls	r0, r2, #3
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	1912      	adds	r2, r2, r4
 8005a10:	eb45 0303 	adc.w	r3, r5, r3
 8005a14:	f04f 0000 	mov.w	r0, #0
 8005a18:	f04f 0100 	mov.w	r1, #0
 8005a1c:	0299      	lsls	r1, r3, #10
 8005a1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005a22:	0290      	lsls	r0, r2, #10
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	f7fa fc4c 	bl	80002d0 <__aeabi_uldivmod>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a40:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	0c1b      	lsrs	r3, r3, #16
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	60bb      	str	r3, [r7, #8]
      break;
 8005a5a:	e002      	b.n	8005a62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a5c:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x164>)
 8005a5e:	60bb      	str	r3, [r7, #8]
      break;
 8005a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a62:	68bb      	ldr	r3, [r7, #8]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	00f42400 	.word	0x00f42400
 8005a74:	017d7840 	.word	0x017d7840

08005a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a7c:	4b03      	ldr	r3, [pc, #12]	; (8005a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20000004 	.word	0x20000004

08005a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a94:	f7ff fff0 	bl	8005a78 <HAL_RCC_GetHCLKFreq>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	0a9b      	lsrs	r3, r3, #10
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	4903      	ldr	r1, [pc, #12]	; (8005ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aa6:	5ccb      	ldrb	r3, [r1, r3]
 8005aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40023800 	.word	0x40023800
 8005ab4:	0801b394 	.word	0x0801b394

08005ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005abc:	f7ff ffdc 	bl	8005a78 <HAL_RCC_GetHCLKFreq>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	0b5b      	lsrs	r3, r3, #13
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	4903      	ldr	r1, [pc, #12]	; (8005adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ace:	5ccb      	ldrb	r3, [r1, r3]
 8005ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	0801b394 	.word	0x0801b394

08005ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d010      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005b04:	4b7a      	ldr	r3, [pc, #488]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b0a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	4977      	ldr	r1, [pc, #476]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8005b22:	2301      	movs	r3, #1
 8005b24:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d010      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005b32:	4b6f      	ldr	r3, [pc, #444]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b38:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	496b      	ldr	r1, [pc, #428]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8005b50:	2301      	movs	r3, #1
 8005b52:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d022      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8005b60:	4b63      	ldr	r3, [pc, #396]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b6e:	4960      	ldr	r1, [pc, #384]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b8a:	d10c      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8005b8c:	4b58      	ldr	r3, [pc, #352]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b92:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	4954      	ldr	r1, [pc, #336]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d022      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8005bb2:	4b4f      	ldr	r3, [pc, #316]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc0:	494b      	ldr	r1, [pc, #300]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8005bde:	4b44      	ldr	r3, [pc, #272]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	493f      	ldr	r1, [pc, #252]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 808a 	beq.w	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	4b39      	ldr	r3, [pc, #228]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	4a38      	ldr	r2, [pc, #224]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c14:	6413      	str	r3, [r2, #64]	; 0x40
 8005c16:	4b36      	ldr	r3, [pc, #216]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c22:	4b34      	ldr	r3, [pc, #208]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a33      	ldr	r2, [pc, #204]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c2e:	f7fc fc49 	bl	80024c4 <HAL_GetTick>
 8005c32:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c34:	e008      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c36:	f7fc fc45 	bl	80024c4 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e1d1      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c48:	4b2a      	ldr	r3, [pc, #168]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0f0      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c54:	4b26      	ldr	r3, [pc, #152]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d02f      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d028      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c72:	4b1f      	ldr	r3, [pc, #124]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c7c:	4b1e      	ldr	r3, [pc, #120]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c82:	4b1d      	ldr	r3, [pc, #116]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c88:	4a19      	ldr	r2, [pc, #100]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c8e:	4b18      	ldr	r3, [pc, #96]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d114      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c9a:	f7fc fc13 	bl	80024c4 <HAL_GetTick>
 8005c9e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca0:	e00a      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ca2:	f7fc fc0f 	bl	80024c4 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e199      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb8:	4b0d      	ldr	r3, [pc, #52]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0ee      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd0:	d114      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005cd2:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce6:	4902      	ldr	r1, [pc, #8]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	608b      	str	r3, [r1, #8]
 8005cec:	e00c      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005cee:	bf00      	nop
 8005cf0:	40023800 	.word	0x40023800
 8005cf4:	40007000 	.word	0x40007000
 8005cf8:	42470e40 	.word	0x42470e40
 8005cfc:	4b89      	ldr	r3, [pc, #548]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	4a88      	ldr	r2, [pc, #544]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d06:	6093      	str	r3, [r2, #8]
 8005d08:	4b86      	ldr	r3, [pc, #536]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d14:	4983      	ldr	r1, [pc, #524]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d004      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005d2c:	4b7e      	ldr	r3, [pc, #504]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8005d2e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0310 	and.w	r3, r3, #16
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00a      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005d3c:	4b79      	ldr	r3, [pc, #484]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4a:	4976      	ldr	r1, [pc, #472]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d011      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005d5e:	4b71      	ldr	r3, [pc, #452]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	496d      	ldr	r1, [pc, #436]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d7c:	d101      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005d8e:	4b65      	ldr	r3, [pc, #404]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d94:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	4961      	ldr	r1, [pc, #388]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d004      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b80      	cmp	r3, #128	; 0x80
 8005db0:	f040 80c6 	bne.w	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005db4:	4b5d      	ldr	r3, [pc, #372]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dba:	f7fc fb83 	bl	80024c4 <HAL_GetTick>
 8005dbe:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dc2:	f7fc fb7f 	bl	80024c4 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e10b      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dd4:	4b53      	ldr	r3, [pc, #332]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1f0      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005de0:	4a53      	ldr	r2, [pc, #332]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d023      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d019      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d004      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e24:	d00e      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d019      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d115      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e42:	d110      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	019b      	lsls	r3, r3, #6
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	061b      	lsls	r3, r3, #24
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	071b      	lsls	r3, r3, #28
 8005e5e:	4931      	ldr	r1, [pc, #196]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d009      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d026      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d122      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e8e:	4b25      	ldr	r3, [pc, #148]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e94:	0e1b      	lsrs	r3, r3, #24
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	019b      	lsls	r3, r3, #6
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	061b      	lsls	r3, r3, #24
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	071b      	lsls	r3, r3, #28
 8005eb4:	491b      	ldr	r1, [pc, #108]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8005ebc:	4b19      	ldr	r3, [pc, #100]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ec2:	f023 021f 	bic.w	r2, r3, #31
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	4915      	ldr	r1, [pc, #84]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d010      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	019b      	lsls	r3, r3, #6
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	061b      	lsls	r3, r3, #24
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	071b      	lsls	r3, r3, #28
 8005efa:	490a      	ldr	r1, [pc, #40]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f02:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f08:	f7fc fadc 	bl	80024c4 <HAL_GetTick>
 8005f0c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f0e:	e011      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f10:	f7fc fad8 	bl	80024c4 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d90a      	bls.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e064      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005f22:	bf00      	nop
 8005f24:	40023800 	.word	0x40023800
 8005f28:	424711e0 	.word	0x424711e0
 8005f2c:	42470068 	.word	0x42470068
 8005f30:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f34:	4b2f      	ldr	r3, [pc, #188]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0e7      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f4c:	4b29      	ldr	r3, [pc, #164]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5a:	4926      	ldr	r1, [pc, #152]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005f6e:	4b21      	ldr	r3, [pc, #132]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f74:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7c:	491d      	ldr	r1, [pc, #116]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00a      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005f90:	4b18      	ldr	r3, [pc, #96]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	4915      	ldr	r1, [pc, #84]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005fb2:	4b10      	ldr	r3, [pc, #64]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc0:	490c      	ldr	r1, [pc, #48]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00a      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fd4:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fda:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	4904      	ldr	r1, [pc, #16]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3720      	adds	r7, #32
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	40023800 	.word	0x40023800

08005ff8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e270      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d075      	beq.n	8006102 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006016:	4ba3      	ldr	r3, [pc, #652]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	2b04      	cmp	r3, #4
 8006020:	d00c      	beq.n	800603c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006022:	4ba0      	ldr	r3, [pc, #640]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800602a:	2b08      	cmp	r3, #8
 800602c:	d112      	bne.n	8006054 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800602e:	4b9d      	ldr	r3, [pc, #628]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800603a:	d10b      	bne.n	8006054 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800603c:	4b99      	ldr	r3, [pc, #612]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d05b      	beq.n	8006100 <HAL_RCC_OscConfig+0x108>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d157      	bne.n	8006100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e24b      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605c:	d106      	bne.n	800606c <HAL_RCC_OscConfig+0x74>
 800605e:	4b91      	ldr	r3, [pc, #580]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a90      	ldr	r2, [pc, #576]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	e01d      	b.n	80060a8 <HAL_RCC_OscConfig+0xb0>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006074:	d10c      	bne.n	8006090 <HAL_RCC_OscConfig+0x98>
 8006076:	4b8b      	ldr	r3, [pc, #556]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a8a      	ldr	r2, [pc, #552]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800607c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	4b88      	ldr	r3, [pc, #544]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a87      	ldr	r2, [pc, #540]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	e00b      	b.n	80060a8 <HAL_RCC_OscConfig+0xb0>
 8006090:	4b84      	ldr	r3, [pc, #528]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a83      	ldr	r2, [pc, #524]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	4b81      	ldr	r3, [pc, #516]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a80      	ldr	r2, [pc, #512]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 80060a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d013      	beq.n	80060d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b0:	f7fc fa08 	bl	80024c4 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060b8:	f7fc fa04 	bl	80024c4 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b64      	cmp	r3, #100	; 0x64
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e210      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ca:	4b76      	ldr	r3, [pc, #472]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0xc0>
 80060d6:	e014      	b.n	8006102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d8:	f7fc f9f4 	bl	80024c4 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060e0:	f7fc f9f0 	bl	80024c4 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b64      	cmp	r3, #100	; 0x64
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e1fc      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060f2:	4b6c      	ldr	r3, [pc, #432]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f0      	bne.n	80060e0 <HAL_RCC_OscConfig+0xe8>
 80060fe:	e000      	b.n	8006102 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d063      	beq.n	80061d6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800610e:	4b65      	ldr	r3, [pc, #404]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00b      	beq.n	8006132 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800611a:	4b62      	ldr	r3, [pc, #392]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006122:	2b08      	cmp	r3, #8
 8006124:	d11c      	bne.n	8006160 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006126:	4b5f      	ldr	r3, [pc, #380]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d116      	bne.n	8006160 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006132:	4b5c      	ldr	r3, [pc, #368]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d005      	beq.n	800614a <HAL_RCC_OscConfig+0x152>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d001      	beq.n	800614a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e1d0      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800614a:	4b56      	ldr	r3, [pc, #344]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4952      	ldr	r1, [pc, #328]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800615a:	4313      	orrs	r3, r2
 800615c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800615e:	e03a      	b.n	80061d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d020      	beq.n	80061aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006168:	4b4f      	ldr	r3, [pc, #316]	; (80062a8 <HAL_RCC_OscConfig+0x2b0>)
 800616a:	2201      	movs	r2, #1
 800616c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616e:	f7fc f9a9 	bl	80024c4 <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006176:	f7fc f9a5 	bl	80024c4 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e1b1      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006188:	4b46      	ldr	r3, [pc, #280]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f0      	beq.n	8006176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006194:	4b43      	ldr	r3, [pc, #268]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	4940      	ldr	r1, [pc, #256]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	600b      	str	r3, [r1, #0]
 80061a8:	e015      	b.n	80061d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061aa:	4b3f      	ldr	r3, [pc, #252]	; (80062a8 <HAL_RCC_OscConfig+0x2b0>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b0:	f7fc f988 	bl	80024c4 <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061b8:	f7fc f984 	bl	80024c4 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e190      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ca:	4b36      	ldr	r3, [pc, #216]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d030      	beq.n	8006244 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d016      	beq.n	8006218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061ea:	4b30      	ldr	r3, [pc, #192]	; (80062ac <HAL_RCC_OscConfig+0x2b4>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f0:	f7fc f968 	bl	80024c4 <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061f8:	f7fc f964 	bl	80024c4 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e170      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800620a:	4b26      	ldr	r3, [pc, #152]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800620c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0f0      	beq.n	80061f8 <HAL_RCC_OscConfig+0x200>
 8006216:	e015      	b.n	8006244 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006218:	4b24      	ldr	r3, [pc, #144]	; (80062ac <HAL_RCC_OscConfig+0x2b4>)
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800621e:	f7fc f951 	bl	80024c4 <HAL_GetTick>
 8006222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006224:	e008      	b.n	8006238 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006226:	f7fc f94d 	bl	80024c4 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e159      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006238:	4b1a      	ldr	r3, [pc, #104]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800623a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1f0      	bne.n	8006226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80a0 	beq.w	8006392 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006252:	2300      	movs	r3, #0
 8006254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006256:	4b13      	ldr	r3, [pc, #76]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10f      	bne.n	8006282 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006262:	2300      	movs	r3, #0
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	4a0e      	ldr	r2, [pc, #56]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800626c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006270:	6413      	str	r3, [r2, #64]	; 0x40
 8006272:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627a:	60bb      	str	r3, [r7, #8]
 800627c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800627e:	2301      	movs	r3, #1
 8006280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006282:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <HAL_RCC_OscConfig+0x2b8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628a:	2b00      	cmp	r3, #0
 800628c:	d121      	bne.n	80062d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800628e:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <HAL_RCC_OscConfig+0x2b8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a07      	ldr	r2, [pc, #28]	; (80062b0 <HAL_RCC_OscConfig+0x2b8>)
 8006294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800629a:	f7fc f913 	bl	80024c4 <HAL_GetTick>
 800629e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062a0:	e011      	b.n	80062c6 <HAL_RCC_OscConfig+0x2ce>
 80062a2:	bf00      	nop
 80062a4:	40023800 	.word	0x40023800
 80062a8:	42470000 	.word	0x42470000
 80062ac:	42470e80 	.word	0x42470e80
 80062b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062b4:	f7fc f906 	bl	80024c4 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e112      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c6:	4b8b      	ldr	r3, [pc, #556]	; (80064f4 <HAL_RCC_OscConfig+0x4fc>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f0      	beq.n	80062b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d106      	bne.n	80062e8 <HAL_RCC_OscConfig+0x2f0>
 80062da:	4b87      	ldr	r3, [pc, #540]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	4a86      	ldr	r2, [pc, #536]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 80062e0:	f043 0301 	orr.w	r3, r3, #1
 80062e4:	6713      	str	r3, [r2, #112]	; 0x70
 80062e6:	e01c      	b.n	8006322 <HAL_RCC_OscConfig+0x32a>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b05      	cmp	r3, #5
 80062ee:	d10c      	bne.n	800630a <HAL_RCC_OscConfig+0x312>
 80062f0:	4b81      	ldr	r3, [pc, #516]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 80062f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f4:	4a80      	ldr	r2, [pc, #512]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 80062f6:	f043 0304 	orr.w	r3, r3, #4
 80062fa:	6713      	str	r3, [r2, #112]	; 0x70
 80062fc:	4b7e      	ldr	r3, [pc, #504]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 80062fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006300:	4a7d      	ldr	r2, [pc, #500]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	6713      	str	r3, [r2, #112]	; 0x70
 8006308:	e00b      	b.n	8006322 <HAL_RCC_OscConfig+0x32a>
 800630a:	4b7b      	ldr	r3, [pc, #492]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 800630c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630e:	4a7a      	ldr	r2, [pc, #488]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 8006310:	f023 0301 	bic.w	r3, r3, #1
 8006314:	6713      	str	r3, [r2, #112]	; 0x70
 8006316:	4b78      	ldr	r3, [pc, #480]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	4a77      	ldr	r2, [pc, #476]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 800631c:	f023 0304 	bic.w	r3, r3, #4
 8006320:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d015      	beq.n	8006356 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632a:	f7fc f8cb 	bl	80024c4 <HAL_GetTick>
 800632e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006330:	e00a      	b.n	8006348 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006332:	f7fc f8c7 	bl	80024c4 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006340:	4293      	cmp	r3, r2
 8006342:	d901      	bls.n	8006348 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e0d1      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006348:	4b6b      	ldr	r3, [pc, #428]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0ee      	beq.n	8006332 <HAL_RCC_OscConfig+0x33a>
 8006354:	e014      	b.n	8006380 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006356:	f7fc f8b5 	bl	80024c4 <HAL_GetTick>
 800635a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800635c:	e00a      	b.n	8006374 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800635e:	f7fc f8b1 	bl	80024c4 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	f241 3288 	movw	r2, #5000	; 0x1388
 800636c:	4293      	cmp	r3, r2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e0bb      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006374:	4b60      	ldr	r3, [pc, #384]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 8006376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1ee      	bne.n	800635e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d105      	bne.n	8006392 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006386:	4b5c      	ldr	r3, [pc, #368]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	4a5b      	ldr	r2, [pc, #364]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 800638c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006390:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 80a7 	beq.w	80064ea <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800639c:	4b56      	ldr	r3, [pc, #344]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f003 030c 	and.w	r3, r3, #12
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d060      	beq.n	800646a <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d145      	bne.n	800643c <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063b0:	4b52      	ldr	r3, [pc, #328]	; (80064fc <HAL_RCC_OscConfig+0x504>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b6:	f7fc f885 	bl	80024c4 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063be:	f7fc f881 	bl	80024c4 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e08d      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d0:	4b49      	ldr	r3, [pc, #292]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f0      	bne.n	80063be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	019b      	lsls	r3, r3, #6
 80063ec:	431a      	orrs	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	3b01      	subs	r3, #1
 80063f6:	041b      	lsls	r3, r3, #16
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	061b      	lsls	r3, r3, #24
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	071b      	lsls	r3, r3, #28
 8006408:	493b      	ldr	r1, [pc, #236]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 800640a:	4313      	orrs	r3, r2
 800640c:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800640e:	4b3b      	ldr	r3, [pc, #236]	; (80064fc <HAL_RCC_OscConfig+0x504>)
 8006410:	2201      	movs	r2, #1
 8006412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fc f856 	bl	80024c4 <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800641c:	f7fc f852 	bl	80024c4 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e05e      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800642e:	4b32      	ldr	r3, [pc, #200]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCC_OscConfig+0x424>
 800643a:	e056      	b.n	80064ea <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800643c:	4b2f      	ldr	r3, [pc, #188]	; (80064fc <HAL_RCC_OscConfig+0x504>)
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006442:	f7fc f83f 	bl	80024c4 <HAL_GetTick>
 8006446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800644a:	f7fc f83b 	bl	80024c4 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e047      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800645c:	4b26      	ldr	r3, [pc, #152]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1f0      	bne.n	800644a <HAL_RCC_OscConfig+0x452>
 8006468:	e03f      	b.n	80064ea <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e03a      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006476:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <HAL_RCC_OscConfig+0x500>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d030      	beq.n	80064e6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800648e:	429a      	cmp	r2, r3
 8006490:	d129      	bne.n	80064e6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800649c:	429a      	cmp	r2, r3
 800649e:	d122      	bne.n	80064e6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064a6:	4013      	ands	r3, r2
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d119      	bne.n	80064e6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064bc:	085b      	lsrs	r3, r3, #1
 80064be:	3b01      	subs	r3, #1
 80064c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d10f      	bne.n	80064e6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d107      	bne.n	80064e6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e0:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d001      	beq.n	80064ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e000      	b.n	80064ec <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	40007000 	.word	0x40007000
 80064f8:	40023800 	.word	0x40023800
 80064fc:	42470060 	.word	0x42470060

08006500 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e034      	b.n	8006580 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d106      	bne.n	8006530 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f7fa fa30 	bl	8000990 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3308      	adds	r3, #8
 8006538:	4619      	mov	r1, r3
 800653a:	4610      	mov	r0, r2
 800653c:	f001 f8be 	bl	80076bc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	461a      	mov	r2, r3
 800654a:	68b9      	ldr	r1, [r7, #8]
 800654c:	f001 f926 	bl	800779c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6858      	ldr	r0, [r3, #4]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	f001 f971 	bl	8007844 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	6892      	ldr	r2, [r2, #8]
 800656a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	6892      	ldr	r2, [r2, #8]
 8006576:	f041 0101 	orr.w	r1, r1, #1
 800657a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e041      	b.n	800661e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d106      	bne.n	80065b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fb fa7c 	bl	8001aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4619      	mov	r1, r3
 80065c6:	4610      	mov	r0, r2
 80065c8:	f000 f8d8 	bl	800677c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	d001      	beq.n	8006640 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e046      	b.n	80066ce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a23      	ldr	r2, [pc, #140]	; (80066dc <HAL_TIM_Base_Start+0xb4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d022      	beq.n	8006698 <HAL_TIM_Base_Start+0x70>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800665a:	d01d      	beq.n	8006698 <HAL_TIM_Base_Start+0x70>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a1f      	ldr	r2, [pc, #124]	; (80066e0 <HAL_TIM_Base_Start+0xb8>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d018      	beq.n	8006698 <HAL_TIM_Base_Start+0x70>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a1e      	ldr	r2, [pc, #120]	; (80066e4 <HAL_TIM_Base_Start+0xbc>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d013      	beq.n	8006698 <HAL_TIM_Base_Start+0x70>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1c      	ldr	r2, [pc, #112]	; (80066e8 <HAL_TIM_Base_Start+0xc0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00e      	beq.n	8006698 <HAL_TIM_Base_Start+0x70>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1b      	ldr	r2, [pc, #108]	; (80066ec <HAL_TIM_Base_Start+0xc4>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d009      	beq.n	8006698 <HAL_TIM_Base_Start+0x70>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a19      	ldr	r2, [pc, #100]	; (80066f0 <HAL_TIM_Base_Start+0xc8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d004      	beq.n	8006698 <HAL_TIM_Base_Start+0x70>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a18      	ldr	r2, [pc, #96]	; (80066f4 <HAL_TIM_Base_Start+0xcc>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d111      	bne.n	80066bc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b06      	cmp	r3, #6
 80066a8:	d010      	beq.n	80066cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f042 0201 	orr.w	r2, r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ba:	e007      	b.n	80066cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	40010000 	.word	0x40010000
 80066e0:	40000400 	.word	0x40000400
 80066e4:	40000800 	.word	0x40000800
 80066e8:	40000c00 	.word	0x40000c00
 80066ec:	40010400 	.word	0x40010400
 80066f0:	40014000 	.word	0x40014000
 80066f4:	40001800 	.word	0x40001800

080066f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <HAL_TIM_SlaveConfigSynchro+0x18>
 800670c:	2302      	movs	r3, #2
 800670e:	e031      	b.n	8006774 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f8ca 	bl	80068bc <TIM_SlaveTimer_SetConfig>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d009      	beq.n	8006742 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e018      	b.n	8006774 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006750:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006760:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a40      	ldr	r2, [pc, #256]	; (8006890 <TIM_Base_SetConfig+0x114>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d013      	beq.n	80067bc <TIM_Base_SetConfig+0x40>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679a:	d00f      	beq.n	80067bc <TIM_Base_SetConfig+0x40>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a3d      	ldr	r2, [pc, #244]	; (8006894 <TIM_Base_SetConfig+0x118>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00b      	beq.n	80067bc <TIM_Base_SetConfig+0x40>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a3c      	ldr	r2, [pc, #240]	; (8006898 <TIM_Base_SetConfig+0x11c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d007      	beq.n	80067bc <TIM_Base_SetConfig+0x40>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a3b      	ldr	r2, [pc, #236]	; (800689c <TIM_Base_SetConfig+0x120>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d003      	beq.n	80067bc <TIM_Base_SetConfig+0x40>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a3a      	ldr	r2, [pc, #232]	; (80068a0 <TIM_Base_SetConfig+0x124>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d108      	bne.n	80067ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a2f      	ldr	r2, [pc, #188]	; (8006890 <TIM_Base_SetConfig+0x114>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d02b      	beq.n	800682e <TIM_Base_SetConfig+0xb2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067dc:	d027      	beq.n	800682e <TIM_Base_SetConfig+0xb2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a2c      	ldr	r2, [pc, #176]	; (8006894 <TIM_Base_SetConfig+0x118>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d023      	beq.n	800682e <TIM_Base_SetConfig+0xb2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a2b      	ldr	r2, [pc, #172]	; (8006898 <TIM_Base_SetConfig+0x11c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d01f      	beq.n	800682e <TIM_Base_SetConfig+0xb2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a2a      	ldr	r2, [pc, #168]	; (800689c <TIM_Base_SetConfig+0x120>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d01b      	beq.n	800682e <TIM_Base_SetConfig+0xb2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a29      	ldr	r2, [pc, #164]	; (80068a0 <TIM_Base_SetConfig+0x124>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d017      	beq.n	800682e <TIM_Base_SetConfig+0xb2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a28      	ldr	r2, [pc, #160]	; (80068a4 <TIM_Base_SetConfig+0x128>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d013      	beq.n	800682e <TIM_Base_SetConfig+0xb2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a27      	ldr	r2, [pc, #156]	; (80068a8 <TIM_Base_SetConfig+0x12c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00f      	beq.n	800682e <TIM_Base_SetConfig+0xb2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a26      	ldr	r2, [pc, #152]	; (80068ac <TIM_Base_SetConfig+0x130>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00b      	beq.n	800682e <TIM_Base_SetConfig+0xb2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a25      	ldr	r2, [pc, #148]	; (80068b0 <TIM_Base_SetConfig+0x134>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d007      	beq.n	800682e <TIM_Base_SetConfig+0xb2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a24      	ldr	r2, [pc, #144]	; (80068b4 <TIM_Base_SetConfig+0x138>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d003      	beq.n	800682e <TIM_Base_SetConfig+0xb2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a23      	ldr	r2, [pc, #140]	; (80068b8 <TIM_Base_SetConfig+0x13c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d108      	bne.n	8006840 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a0a      	ldr	r2, [pc, #40]	; (8006890 <TIM_Base_SetConfig+0x114>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d003      	beq.n	8006874 <TIM_Base_SetConfig+0xf8>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a0c      	ldr	r2, [pc, #48]	; (80068a0 <TIM_Base_SetConfig+0x124>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d103      	bne.n	800687c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	691a      	ldr	r2, [r3, #16]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	615a      	str	r2, [r3, #20]
}
 8006882:	bf00      	nop
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40010000 	.word	0x40010000
 8006894:	40000400 	.word	0x40000400
 8006898:	40000800 	.word	0x40000800
 800689c:	40000c00 	.word	0x40000c00
 80068a0:	40010400 	.word	0x40010400
 80068a4:	40014000 	.word	0x40014000
 80068a8:	40014400 	.word	0x40014400
 80068ac:	40014800 	.word	0x40014800
 80068b0:	40001800 	.word	0x40001800
 80068b4:	40001c00 	.word	0x40001c00
 80068b8:	40002000 	.word	0x40002000

080068bc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f023 0307 	bic.w	r3, r3, #7
 80068e6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	2b70      	cmp	r3, #112	; 0x70
 8006900:	d01a      	beq.n	8006938 <TIM_SlaveTimer_SetConfig+0x7c>
 8006902:	2b70      	cmp	r3, #112	; 0x70
 8006904:	d860      	bhi.n	80069c8 <TIM_SlaveTimer_SetConfig+0x10c>
 8006906:	2b60      	cmp	r3, #96	; 0x60
 8006908:	d054      	beq.n	80069b4 <TIM_SlaveTimer_SetConfig+0xf8>
 800690a:	2b60      	cmp	r3, #96	; 0x60
 800690c:	d85c      	bhi.n	80069c8 <TIM_SlaveTimer_SetConfig+0x10c>
 800690e:	2b50      	cmp	r3, #80	; 0x50
 8006910:	d046      	beq.n	80069a0 <TIM_SlaveTimer_SetConfig+0xe4>
 8006912:	2b50      	cmp	r3, #80	; 0x50
 8006914:	d858      	bhi.n	80069c8 <TIM_SlaveTimer_SetConfig+0x10c>
 8006916:	2b40      	cmp	r3, #64	; 0x40
 8006918:	d019      	beq.n	800694e <TIM_SlaveTimer_SetConfig+0x92>
 800691a:	2b40      	cmp	r3, #64	; 0x40
 800691c:	d854      	bhi.n	80069c8 <TIM_SlaveTimer_SetConfig+0x10c>
 800691e:	2b30      	cmp	r3, #48	; 0x30
 8006920:	d054      	beq.n	80069cc <TIM_SlaveTimer_SetConfig+0x110>
 8006922:	2b30      	cmp	r3, #48	; 0x30
 8006924:	d850      	bhi.n	80069c8 <TIM_SlaveTimer_SetConfig+0x10c>
 8006926:	2b20      	cmp	r3, #32
 8006928:	d050      	beq.n	80069cc <TIM_SlaveTimer_SetConfig+0x110>
 800692a:	2b20      	cmp	r3, #32
 800692c:	d84c      	bhi.n	80069c8 <TIM_SlaveTimer_SetConfig+0x10c>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d04c      	beq.n	80069cc <TIM_SlaveTimer_SetConfig+0x110>
 8006932:	2b10      	cmp	r3, #16
 8006934:	d04a      	beq.n	80069cc <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8006936:	e047      	b.n	80069c8 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6818      	ldr	r0, [r3, #0]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	68d9      	ldr	r1, [r3, #12]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f000 f8a5 	bl	8006a96 <TIM_ETR_SetConfig>
      break;
 800694c:	e03f      	b.n	80069ce <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b05      	cmp	r3, #5
 8006954:	d101      	bne.n	800695a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e03a      	b.n	80069d0 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6a1a      	ldr	r2, [r3, #32]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0201 	bic.w	r2, r2, #1
 8006970:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006980:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	621a      	str	r2, [r3, #32]
      break;
 800699e:	e016      	b.n	80069ce <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6818      	ldr	r0, [r3, #0]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	6899      	ldr	r1, [r3, #8]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	461a      	mov	r2, r3
 80069ae:	f000 f813 	bl	80069d8 <TIM_TI1_ConfigInputStage>
      break;
 80069b2:	e00c      	b.n	80069ce <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6818      	ldr	r0, [r3, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	6899      	ldr	r1, [r3, #8]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	461a      	mov	r2, r3
 80069c2:	f000 f838 	bl	8006a36 <TIM_TI2_ConfigInputStage>
      break;
 80069c6:	e002      	b.n	80069ce <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80069c8:	bf00      	nop
 80069ca:	e000      	b.n	80069ce <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80069cc:	bf00      	nop
  }
  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	f023 0201 	bic.w	r2, r3, #1
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f023 030a 	bic.w	r3, r3, #10
 8006a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	621a      	str	r2, [r3, #32]
}
 8006a2a:	bf00      	nop
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b087      	sub	sp, #28
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f023 0210 	bic.w	r2, r3, #16
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	031b      	lsls	r3, r3, #12
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	621a      	str	r2, [r3, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b087      	sub	sp, #28
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	607a      	str	r2, [r7, #4]
 8006aa2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ab0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	021a      	lsls	r2, r3, #8
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	609a      	str	r2, [r3, #8]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e05a      	b.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a21      	ldr	r2, [pc, #132]	; (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d022      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3c:	d01d      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a1d      	ldr	r2, [pc, #116]	; (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d018      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1b      	ldr	r2, [pc, #108]	; (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1a      	ldr	r2, [pc, #104]	; (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00e      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a18      	ldr	r2, [pc, #96]	; (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d009      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a17      	ldr	r2, [pc, #92]	; (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a15      	ldr	r2, [pc, #84]	; (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d10c      	bne.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40010000 	.word	0x40010000
 8006bb8:	40000400 	.word	0x40000400
 8006bbc:	40000800 	.word	0x40000800
 8006bc0:	40000c00 	.word	0x40000c00
 8006bc4:	40010400 	.word	0x40010400
 8006bc8:	40014000 	.word	0x40014000
 8006bcc:	40001800 	.word	0x40001800

08006bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e03f      	b.n	8006c62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fb fb82 	bl	8002300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2224      	movs	r2, #36	; 0x24
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68da      	ldr	r2, [r3, #12]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fb79 	bl	800730c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695a      	ldr	r2, [r3, #20]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b085      	sub	sp, #20
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	4613      	mov	r3, r2
 8006c76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b20      	cmp	r3, #32
 8006c82:	d130      	bne.n	8006ce6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <HAL_UART_Transmit_IT+0x26>
 8006c8a:	88fb      	ldrh	r3, [r7, #6]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e029      	b.n	8006ce8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d101      	bne.n	8006ca2 <HAL_UART_Transmit_IT+0x38>
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	e022      	b.n	8006ce8 <HAL_UART_Transmit_IT+0x7e>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	88fa      	ldrh	r2, [r7, #6]
 8006cb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	88fa      	ldrh	r2, [r7, #6]
 8006cba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2221      	movs	r2, #33	; 0x21
 8006cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ce0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e000      	b.n	8006ce8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006ce6:	2302      	movs	r3, #2
  }
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08a      	sub	sp, #40	; 0x28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	f003 030f 	and.w	r3, r3, #15
 8006d22:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10d      	bne.n	8006d46 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d008      	beq.n	8006d46 <HAL_UART_IRQHandler+0x52>
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fa4d 	bl	80071de <UART_Receive_IT>
      return;
 8006d44:	e17c      	b.n	8007040 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 80b1 	beq.w	8006eb0 <HAL_UART_IRQHandler+0x1bc>
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d105      	bne.n	8006d64 <HAL_UART_IRQHandler+0x70>
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 80a6 	beq.w	8006eb0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <HAL_UART_IRQHandler+0x90>
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d005      	beq.n	8006d84 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7c:	f043 0201 	orr.w	r2, r3, #1
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	f003 0304 	and.w	r3, r3, #4
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <HAL_UART_IRQHandler+0xb0>
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d005      	beq.n	8006da4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	f043 0202 	orr.w	r2, r3, #2
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <HAL_UART_IRQHandler+0xd0>
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d005      	beq.n	8006dc4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbc:	f043 0204 	orr.w	r2, r3, #4
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00f      	beq.n	8006dee <HAL_UART_IRQHandler+0xfa>
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d104      	bne.n	8006de2 <HAL_UART_IRQHandler+0xee>
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d005      	beq.n	8006dee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	f043 0208 	orr.w	r2, r3, #8
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 811f 	beq.w	8007036 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d007      	beq.n	8006e12 <HAL_UART_IRQHandler+0x11e>
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f9e6 	bl	80071de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1c:	2b40      	cmp	r3, #64	; 0x40
 8006e1e:	bf0c      	ite	eq
 8006e20:	2301      	moveq	r3, #1
 8006e22:	2300      	movne	r3, #0
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d102      	bne.n	8006e3a <HAL_UART_IRQHandler+0x146>
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d031      	beq.n	8006e9e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f926 	bl	800708c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4a:	2b40      	cmp	r3, #64	; 0x40
 8006e4c:	d123      	bne.n	8006e96 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695a      	ldr	r2, [r3, #20]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e5c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d013      	beq.n	8006e8e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	4a77      	ldr	r2, [pc, #476]	; (8007048 <HAL_UART_IRQHandler+0x354>)
 8006e6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fb fdf3 	bl	8002a5e <HAL_DMA_Abort_IT>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d016      	beq.n	8006eac <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e8c:	e00e      	b.n	8006eac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f8e6 	bl	8007060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e94:	e00a      	b.n	8006eac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f8e2 	bl	8007060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e9c:	e006      	b.n	8006eac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f8de 	bl	8007060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006eaa:	e0c4      	b.n	8007036 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eac:	bf00      	nop
    return;
 8006eae:	e0c2      	b.n	8007036 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	f040 80a2 	bne.w	8006ffe <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	f003 0310 	and.w	r3, r3, #16
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 809c 	beq.w	8006ffe <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 8096 	beq.w	8006ffe <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	60fb      	str	r3, [r7, #12]
 8006ee6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef2:	2b40      	cmp	r3, #64	; 0x40
 8006ef4:	d14f      	bne.n	8006f96 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006f00:	8a3b      	ldrh	r3, [r7, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 8099 	beq.w	800703a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f0c:	8a3a      	ldrh	r2, [r7, #16]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	f080 8093 	bcs.w	800703a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8a3a      	ldrh	r2, [r7, #16]
 8006f18:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f24:	d02b      	beq.n	8006f7e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f34:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	695a      	ldr	r2, [r3, #20]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0201 	bic.w	r2, r2, #1
 8006f44:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	695a      	ldr	r2, [r3, #20]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f54:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0210 	bic.w	r2, r2, #16
 8006f72:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fb fd00 	bl	800297e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f870 	bl	8007074 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006f94:	e051      	b.n	800703a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d047      	beq.n	800703e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006fae:	8a7b      	ldrh	r3, [r7, #18]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d044      	beq.n	800703e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fc2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695a      	ldr	r2, [r3, #20]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 0201 	bic.w	r2, r2, #1
 8006fd2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68da      	ldr	r2, [r3, #12]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0210 	bic.w	r2, r2, #16
 8006ff0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ff2:	8a7b      	ldrh	r3, [r7, #18]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f83c 	bl	8007074 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006ffc:	e01f      	b.n	800703e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007004:	2b00      	cmp	r3, #0
 8007006:	d008      	beq.n	800701a <HAL_UART_IRQHandler+0x326>
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f87b 	bl	800710e <UART_Transmit_IT>
    return;
 8007018:	e012      	b.n	8007040 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00d      	beq.n	8007040 <HAL_UART_IRQHandler+0x34c>
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702a:	2b00      	cmp	r3, #0
 800702c:	d008      	beq.n	8007040 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f8bd 	bl	80071ae <UART_EndTransmit_IT>
    return;
 8007034:	e004      	b.n	8007040 <HAL_UART_IRQHandler+0x34c>
    return;
 8007036:	bf00      	nop
 8007038:	e002      	b.n	8007040 <HAL_UART_IRQHandler+0x34c>
      return;
 800703a:	bf00      	nop
 800703c:	e000      	b.n	8007040 <HAL_UART_IRQHandler+0x34c>
      return;
 800703e:	bf00      	nop
  }
}
 8007040:	3728      	adds	r7, #40	; 0x28
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	080070e7 	.word	0x080070e7

0800704c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	695a      	ldr	r2, [r3, #20]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0201 	bic.w	r2, r2, #1
 80070b2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d107      	bne.n	80070cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68da      	ldr	r2, [r3, #12]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0210 	bic.w	r2, r2, #16
 80070ca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070da:	bf00      	nop
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7ff ffad 	bl	8007060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007106:	bf00      	nop
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800710e:	b480      	push	{r7}
 8007110:	b085      	sub	sp, #20
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b21      	cmp	r3, #33	; 0x21
 8007120:	d13e      	bne.n	80071a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712a:	d114      	bne.n	8007156 <UART_Transmit_IT+0x48>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d110      	bne.n	8007156 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007148:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	1c9a      	adds	r2, r3, #2
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	621a      	str	r2, [r3, #32]
 8007154:	e008      	b.n	8007168 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	1c59      	adds	r1, r3, #1
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6211      	str	r1, [r2, #32]
 8007160:	781a      	ldrb	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800716c:	b29b      	uxth	r3, r3
 800716e:	3b01      	subs	r3, #1
 8007170:	b29b      	uxth	r3, r3
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	4619      	mov	r1, r3
 8007176:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10f      	bne.n	800719c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800718a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800719a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	e000      	b.n	80071a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071a0:	2302      	movs	r3, #2
  }
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b082      	sub	sp, #8
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2220      	movs	r2, #32
 80071ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fa fe00 	bl	8001dd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b22      	cmp	r3, #34	; 0x22
 80071f0:	f040 8087 	bne.w	8007302 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071fc:	d117      	bne.n	800722e <UART_Receive_IT+0x50>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d113      	bne.n	800722e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	b29b      	uxth	r3, r3
 8007218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721c:	b29a      	uxth	r2, r3
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007226:	1c9a      	adds	r2, r3, #2
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	629a      	str	r2, [r3, #40]	; 0x28
 800722c:	e026      	b.n	800727c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007232:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007234:	2300      	movs	r3, #0
 8007236:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007240:	d007      	beq.n	8007252 <UART_Receive_IT+0x74>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <UART_Receive_IT+0x82>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	b2da      	uxtb	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	e008      	b.n	8007272 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	b2db      	uxtb	r3, r3
 8007268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800726c:	b2da      	uxtb	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007280:	b29b      	uxth	r3, r3
 8007282:	3b01      	subs	r3, #1
 8007284:	b29b      	uxth	r3, r3
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	4619      	mov	r1, r3
 800728a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800728c:	2b00      	cmp	r3, #0
 800728e:	d136      	bne.n	80072fe <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0220 	bic.w	r2, r2, #32
 800729e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68da      	ldr	r2, [r3, #12]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695a      	ldr	r2, [r3, #20]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0201 	bic.w	r2, r2, #1
 80072be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d10e      	bne.n	80072ee <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0210 	bic.w	r2, r2, #16
 80072de:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7ff fec4 	bl	8007074 <HAL_UARTEx_RxEventCallback>
 80072ec:	e002      	b.n	80072f4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff feac 	bl	800704c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	e002      	b.n	8007304 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	e000      	b.n	8007304 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007302:	2302      	movs	r3, #2
  }
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800730c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007310:	b09f      	sub	sp, #124	; 0x7c
 8007312:	af00      	add	r7, sp, #0
 8007314:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007322:	68d9      	ldr	r1, [r3, #12]
 8007324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	ea40 0301 	orr.w	r3, r0, r1
 800732c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800732e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	431a      	orrs	r2, r3
 8007338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	431a      	orrs	r2, r3
 800733e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	4313      	orrs	r3, r2
 8007344:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007350:	f021 010c 	bic.w	r1, r1, #12
 8007354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800735a:	430b      	orrs	r3, r1
 800735c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800735e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736a:	6999      	ldr	r1, [r3, #24]
 800736c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	ea40 0301 	orr.w	r3, r0, r1
 8007374:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8007376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	4b6a      	ldr	r3, [pc, #424]	; (8007524 <UART_SetConfig+0x218>)
 800737c:	429a      	cmp	r2, r3
 800737e:	d00e      	beq.n	800739e <UART_SetConfig+0x92>
 8007380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	4b68      	ldr	r3, [pc, #416]	; (8007528 <UART_SetConfig+0x21c>)
 8007386:	429a      	cmp	r2, r3
 8007388:	d009      	beq.n	800739e <UART_SetConfig+0x92>
 800738a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	4b67      	ldr	r3, [pc, #412]	; (800752c <UART_SetConfig+0x220>)
 8007390:	429a      	cmp	r2, r3
 8007392:	d004      	beq.n	800739e <UART_SetConfig+0x92>
 8007394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	4b65      	ldr	r3, [pc, #404]	; (8007530 <UART_SetConfig+0x224>)
 800739a:	429a      	cmp	r2, r3
 800739c:	d103      	bne.n	80073a6 <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800739e:	f7fe fb8b 	bl	8005ab8 <HAL_RCC_GetPCLK2Freq>
 80073a2:	6778      	str	r0, [r7, #116]	; 0x74
 80073a4:	e002      	b.n	80073ac <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073a6:	f7fe fb73 	bl	8005a90 <HAL_RCC_GetPCLK1Freq>
 80073aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073b4:	f040 80c0 	bne.w	8007538 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ba:	461c      	mov	r4, r3
 80073bc:	f04f 0500 	mov.w	r5, #0
 80073c0:	4622      	mov	r2, r4
 80073c2:	462b      	mov	r3, r5
 80073c4:	1891      	adds	r1, r2, r2
 80073c6:	6439      	str	r1, [r7, #64]	; 0x40
 80073c8:	415b      	adcs	r3, r3
 80073ca:	647b      	str	r3, [r7, #68]	; 0x44
 80073cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073d0:	1912      	adds	r2, r2, r4
 80073d2:	eb45 0303 	adc.w	r3, r5, r3
 80073d6:	f04f 0000 	mov.w	r0, #0
 80073da:	f04f 0100 	mov.w	r1, #0
 80073de:	00d9      	lsls	r1, r3, #3
 80073e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073e4:	00d0      	lsls	r0, r2, #3
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	1911      	adds	r1, r2, r4
 80073ec:	6639      	str	r1, [r7, #96]	; 0x60
 80073ee:	416b      	adcs	r3, r5
 80073f0:	667b      	str	r3, [r7, #100]	; 0x64
 80073f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	461a      	mov	r2, r3
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	1891      	adds	r1, r2, r2
 80073fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8007400:	415b      	adcs	r3, r3
 8007402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007404:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007408:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800740c:	f7f8 ff60 	bl	80002d0 <__aeabi_uldivmod>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	4b47      	ldr	r3, [pc, #284]	; (8007534 <UART_SetConfig+0x228>)
 8007416:	fba3 2302 	umull	r2, r3, r3, r2
 800741a:	095b      	lsrs	r3, r3, #5
 800741c:	011e      	lsls	r6, r3, #4
 800741e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007420:	461c      	mov	r4, r3
 8007422:	f04f 0500 	mov.w	r5, #0
 8007426:	4622      	mov	r2, r4
 8007428:	462b      	mov	r3, r5
 800742a:	1891      	adds	r1, r2, r2
 800742c:	6339      	str	r1, [r7, #48]	; 0x30
 800742e:	415b      	adcs	r3, r3
 8007430:	637b      	str	r3, [r7, #52]	; 0x34
 8007432:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007436:	1912      	adds	r2, r2, r4
 8007438:	eb45 0303 	adc.w	r3, r5, r3
 800743c:	f04f 0000 	mov.w	r0, #0
 8007440:	f04f 0100 	mov.w	r1, #0
 8007444:	00d9      	lsls	r1, r3, #3
 8007446:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800744a:	00d0      	lsls	r0, r2, #3
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	1911      	adds	r1, r2, r4
 8007452:	65b9      	str	r1, [r7, #88]	; 0x58
 8007454:	416b      	adcs	r3, r5
 8007456:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	461a      	mov	r2, r3
 800745e:	f04f 0300 	mov.w	r3, #0
 8007462:	1891      	adds	r1, r2, r2
 8007464:	62b9      	str	r1, [r7, #40]	; 0x28
 8007466:	415b      	adcs	r3, r3
 8007468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800746a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800746e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007472:	f7f8 ff2d 	bl	80002d0 <__aeabi_uldivmod>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4b2e      	ldr	r3, [pc, #184]	; (8007534 <UART_SetConfig+0x228>)
 800747c:	fba3 1302 	umull	r1, r3, r3, r2
 8007480:	095b      	lsrs	r3, r3, #5
 8007482:	2164      	movs	r1, #100	; 0x64
 8007484:	fb01 f303 	mul.w	r3, r1, r3
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	3332      	adds	r3, #50	; 0x32
 800748e:	4a29      	ldr	r2, [pc, #164]	; (8007534 <UART_SetConfig+0x228>)
 8007490:	fba2 2303 	umull	r2, r3, r2, r3
 8007494:	095b      	lsrs	r3, r3, #5
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800749c:	441e      	add	r6, r3
 800749e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074a0:	4618      	mov	r0, r3
 80074a2:	f04f 0100 	mov.w	r1, #0
 80074a6:	4602      	mov	r2, r0
 80074a8:	460b      	mov	r3, r1
 80074aa:	1894      	adds	r4, r2, r2
 80074ac:	623c      	str	r4, [r7, #32]
 80074ae:	415b      	adcs	r3, r3
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24
 80074b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074b6:	1812      	adds	r2, r2, r0
 80074b8:	eb41 0303 	adc.w	r3, r1, r3
 80074bc:	f04f 0400 	mov.w	r4, #0
 80074c0:	f04f 0500 	mov.w	r5, #0
 80074c4:	00dd      	lsls	r5, r3, #3
 80074c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074ca:	00d4      	lsls	r4, r2, #3
 80074cc:	4622      	mov	r2, r4
 80074ce:	462b      	mov	r3, r5
 80074d0:	1814      	adds	r4, r2, r0
 80074d2:	653c      	str	r4, [r7, #80]	; 0x50
 80074d4:	414b      	adcs	r3, r1
 80074d6:	657b      	str	r3, [r7, #84]	; 0x54
 80074d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	461a      	mov	r2, r3
 80074de:	f04f 0300 	mov.w	r3, #0
 80074e2:	1891      	adds	r1, r2, r2
 80074e4:	61b9      	str	r1, [r7, #24]
 80074e6:	415b      	adcs	r3, r3
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80074f2:	f7f8 feed 	bl	80002d0 <__aeabi_uldivmod>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4b0e      	ldr	r3, [pc, #56]	; (8007534 <UART_SetConfig+0x228>)
 80074fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007500:	095b      	lsrs	r3, r3, #5
 8007502:	2164      	movs	r1, #100	; 0x64
 8007504:	fb01 f303 	mul.w	r3, r1, r3
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	3332      	adds	r3, #50	; 0x32
 800750e:	4a09      	ldr	r2, [pc, #36]	; (8007534 <UART_SetConfig+0x228>)
 8007510:	fba2 2303 	umull	r2, r3, r2, r3
 8007514:	095b      	lsrs	r3, r3, #5
 8007516:	f003 0207 	and.w	r2, r3, #7
 800751a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4432      	add	r2, r6
 8007520:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007522:	e0c3      	b.n	80076ac <UART_SetConfig+0x3a0>
 8007524:	40011000 	.word	0x40011000
 8007528:	40011400 	.word	0x40011400
 800752c:	40011800 	.word	0x40011800
 8007530:	40011c00 	.word	0x40011c00
 8007534:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800753a:	461c      	mov	r4, r3
 800753c:	f04f 0500 	mov.w	r5, #0
 8007540:	4622      	mov	r2, r4
 8007542:	462b      	mov	r3, r5
 8007544:	1891      	adds	r1, r2, r2
 8007546:	6139      	str	r1, [r7, #16]
 8007548:	415b      	adcs	r3, r3
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007550:	1912      	adds	r2, r2, r4
 8007552:	eb45 0303 	adc.w	r3, r5, r3
 8007556:	f04f 0000 	mov.w	r0, #0
 800755a:	f04f 0100 	mov.w	r1, #0
 800755e:	00d9      	lsls	r1, r3, #3
 8007560:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007564:	00d0      	lsls	r0, r2, #3
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	eb12 0804 	adds.w	r8, r2, r4
 800756e:	eb43 0905 	adc.w	r9, r3, r5
 8007572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	4618      	mov	r0, r3
 8007578:	f04f 0100 	mov.w	r1, #0
 800757c:	f04f 0200 	mov.w	r2, #0
 8007580:	f04f 0300 	mov.w	r3, #0
 8007584:	008b      	lsls	r3, r1, #2
 8007586:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800758a:	0082      	lsls	r2, r0, #2
 800758c:	4640      	mov	r0, r8
 800758e:	4649      	mov	r1, r9
 8007590:	f7f8 fe9e 	bl	80002d0 <__aeabi_uldivmod>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4b47      	ldr	r3, [pc, #284]	; (80076b8 <UART_SetConfig+0x3ac>)
 800759a:	fba3 2302 	umull	r2, r3, r3, r2
 800759e:	095b      	lsrs	r3, r3, #5
 80075a0:	011e      	lsls	r6, r3, #4
 80075a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075a4:	4618      	mov	r0, r3
 80075a6:	f04f 0100 	mov.w	r1, #0
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	1894      	adds	r4, r2, r2
 80075b0:	60bc      	str	r4, [r7, #8]
 80075b2:	415b      	adcs	r3, r3
 80075b4:	60fb      	str	r3, [r7, #12]
 80075b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075ba:	1812      	adds	r2, r2, r0
 80075bc:	eb41 0303 	adc.w	r3, r1, r3
 80075c0:	f04f 0400 	mov.w	r4, #0
 80075c4:	f04f 0500 	mov.w	r5, #0
 80075c8:	00dd      	lsls	r5, r3, #3
 80075ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075ce:	00d4      	lsls	r4, r2, #3
 80075d0:	4622      	mov	r2, r4
 80075d2:	462b      	mov	r3, r5
 80075d4:	1814      	adds	r4, r2, r0
 80075d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80075d8:	414b      	adcs	r3, r1
 80075da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f04f 0100 	mov.w	r1, #0
 80075e6:	f04f 0200 	mov.w	r2, #0
 80075ea:	f04f 0300 	mov.w	r3, #0
 80075ee:	008b      	lsls	r3, r1, #2
 80075f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075f4:	0082      	lsls	r2, r0, #2
 80075f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80075fa:	f7f8 fe69 	bl	80002d0 <__aeabi_uldivmod>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4b2d      	ldr	r3, [pc, #180]	; (80076b8 <UART_SetConfig+0x3ac>)
 8007604:	fba3 1302 	umull	r1, r3, r3, r2
 8007608:	095b      	lsrs	r3, r3, #5
 800760a:	2164      	movs	r1, #100	; 0x64
 800760c:	fb01 f303 	mul.w	r3, r1, r3
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	011b      	lsls	r3, r3, #4
 8007614:	3332      	adds	r3, #50	; 0x32
 8007616:	4a28      	ldr	r2, [pc, #160]	; (80076b8 <UART_SetConfig+0x3ac>)
 8007618:	fba2 2303 	umull	r2, r3, r2, r3
 800761c:	095b      	lsrs	r3, r3, #5
 800761e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007622:	441e      	add	r6, r3
 8007624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007626:	4618      	mov	r0, r3
 8007628:	f04f 0100 	mov.w	r1, #0
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	1894      	adds	r4, r2, r2
 8007632:	603c      	str	r4, [r7, #0]
 8007634:	415b      	adcs	r3, r3
 8007636:	607b      	str	r3, [r7, #4]
 8007638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800763c:	1812      	adds	r2, r2, r0
 800763e:	eb41 0303 	adc.w	r3, r1, r3
 8007642:	f04f 0400 	mov.w	r4, #0
 8007646:	f04f 0500 	mov.w	r5, #0
 800764a:	00dd      	lsls	r5, r3, #3
 800764c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007650:	00d4      	lsls	r4, r2, #3
 8007652:	4622      	mov	r2, r4
 8007654:	462b      	mov	r3, r5
 8007656:	eb12 0a00 	adds.w	sl, r2, r0
 800765a:	eb43 0b01 	adc.w	fp, r3, r1
 800765e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	4618      	mov	r0, r3
 8007664:	f04f 0100 	mov.w	r1, #0
 8007668:	f04f 0200 	mov.w	r2, #0
 800766c:	f04f 0300 	mov.w	r3, #0
 8007670:	008b      	lsls	r3, r1, #2
 8007672:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007676:	0082      	lsls	r2, r0, #2
 8007678:	4650      	mov	r0, sl
 800767a:	4659      	mov	r1, fp
 800767c:	f7f8 fe28 	bl	80002d0 <__aeabi_uldivmod>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <UART_SetConfig+0x3ac>)
 8007686:	fba3 1302 	umull	r1, r3, r3, r2
 800768a:	095b      	lsrs	r3, r3, #5
 800768c:	2164      	movs	r1, #100	; 0x64
 800768e:	fb01 f303 	mul.w	r3, r1, r3
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	011b      	lsls	r3, r3, #4
 8007696:	3332      	adds	r3, #50	; 0x32
 8007698:	4a07      	ldr	r2, [pc, #28]	; (80076b8 <UART_SetConfig+0x3ac>)
 800769a:	fba2 2303 	umull	r2, r3, r2, r3
 800769e:	095b      	lsrs	r3, r3, #5
 80076a0:	f003 020f 	and.w	r2, r3, #15
 80076a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4432      	add	r2, r6
 80076aa:	609a      	str	r2, [r3, #8]
}
 80076ac:	bf00      	nop
 80076ae:	377c      	adds	r7, #124	; 0x7c
 80076b0:	46bd      	mov	sp, r7
 80076b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b6:	bf00      	nop
 80076b8:	51eb851f 	.word	0x51eb851f

080076bc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d4:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	4b2f      	ldr	r3, [pc, #188]	; (8007798 <FSMC_NORSRAM_Init+0xdc>)
 80076da:	4013      	ands	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80076e6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80076ec:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80076f2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80076f8:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 80076fe:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007704:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800770a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007710:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007716:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800771c:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8007722:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8007728:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800772e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	4313      	orrs	r3, r2
 8007734:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	2b08      	cmp	r3, #8
 800773c:	d103      	bne.n	8007746 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007744:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68f9      	ldr	r1, [r7, #12]
 800774e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800775a:	d10a      	bne.n	8007772 <FSMC_NORSRAM_Init+0xb6>
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d006      	beq.n	8007772 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776c:	431a      	orrs	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d006      	beq.n	8007788 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007782:	431a      	orrs	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	ffc00480 	.word	0xffc00480

0800779c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80077be:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80077ca:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80077d2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80077da:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80077e4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	3b02      	subs	r3, #2
 80077ec:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80077ee:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80077f4:	4313      	orrs	r3, r2
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6979      	ldr	r1, [r7, #20]
 8007804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007814:	d10e      	bne.n	8007834 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800781e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	3b01      	subs	r3, #1
 8007826:	051b      	lsls	r3, r3, #20
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	4313      	orrs	r3, r2
 800782c:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
	...

08007844 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
 8007850:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800785c:	d122      	bne.n	80078a4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007866:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	4b15      	ldr	r3, [pc, #84]	; (80078c0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800786c:	4013      	ands	r3, r2
 800786e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800787a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007882:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800788a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007890:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	4313      	orrs	r3, r2
 8007896:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	6979      	ldr	r1, [r7, #20]
 800789e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80078a2:	e005      	b.n	80078b0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80078ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	371c      	adds	r7, #28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	cff00000 	.word	0xcff00000

080078c4 <ov7670_read_i2c>:

/*************************************************************************************
 * On most platforms, we'd rather do straight i2c I/O.
*************************************************************************************/
static int ov7670_read_i2c(struct ov7670_info *info, unsigned char reg, unsigned char *value)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	460b      	mov	r3, r1
 80078ce:	607a      	str	r2, [r7, #4]
 80078d0:	72fb      	strb	r3, [r7, #11]
	*value = i2c_read_reg(0x42U, reg);
 80078d2:	7afb      	ldrb	r3, [r7, #11]
 80078d4:	4619      	mov	r1, r3
 80078d6:	2042      	movs	r0, #66	; 0x42
 80078d8:	f7f9 fd98 	bl	800140c <i2c_read_reg>
 80078dc:	4603      	mov	r3, r0
 80078de:	461a      	mov	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	701a      	strb	r2, [r3, #0]
	return 0;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <ov7670_write_i2c>:

/*************************************************************************************
 *
*************************************************************************************/
static int ov7670_write_i2c(struct ov7670_info *info, unsigned char reg, unsigned char value)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
 80078fa:	4613      	mov	r3, r2
 80078fc:	70bb      	strb	r3, [r7, #2]
	i2c_write_reg(0x42U, reg, value);
 80078fe:	78ba      	ldrb	r2, [r7, #2]
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	4619      	mov	r1, r3
 8007904:	2042      	movs	r0, #66	; 0x42
 8007906:	f7f9 fdab 	bl	8001460 <i2c_write_reg>

	if (reg == OV7670_COM7 && (value & COM7_RESET))
 800790a:	78fb      	ldrb	r3, [r7, #3]
 800790c:	2b12      	cmp	r3, #18
 800790e:	d106      	bne.n	800791e <ov7670_write_i2c+0x30>
 8007910:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007914:	2b00      	cmp	r3, #0
 8007916:	da02      	bge.n	800791e <ov7670_write_i2c+0x30>
		HAL_Delay(5);  /* Wait for reset to run */
 8007918:	2005      	movs	r0, #5
 800791a:	f7fa fddf 	bl	80024dc <HAL_Delay>
	return 0;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <ov7670_read>:

/*************************************************************************************
 *
*************************************************************************************/
static int ov7670_read(struct ov7670_info *info, unsigned char reg, unsigned char *value)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	460b      	mov	r3, r1
 8007932:	607a      	str	r2, [r7, #4]
 8007934:	72fb      	strb	r3, [r7, #11]
	//struct ov7670_info *info = to_state(sd);
	return ov7670_read_i2c(info, reg, value);
 8007936:	7afb      	ldrb	r3, [r7, #11]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	4619      	mov	r1, r3
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff ffc1 	bl	80078c4 <ov7670_read_i2c>
 8007942:	4603      	mov	r3, r0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <ov7670_write>:

/*************************************************************************************
 *
*************************************************************************************/
static int ov7670_write(struct ov7670_info *info, unsigned char reg, unsigned char value)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
 8007958:	4613      	mov	r3, r2
 800795a:	70bb      	strb	r3, [r7, #2]
	//struct ov7670_info *info = to_state(sd);
	return ov7670_write_i2c(info, reg, value);
 800795c:	78ba      	ldrb	r2, [r7, #2]
 800795e:	78fb      	ldrb	r3, [r7, #3]
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff ffc3 	bl	80078ee <ov7670_write_i2c>
 8007968:	4603      	mov	r3, r0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <ov7670_write_array>:

/*************************************************************************************
 * Write a list of register settings; ff/ff stops the process.
*************************************************************************************/
static int ov7670_write_array(struct ov7670_info *info, struct regval_list *vals)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	6039      	str	r1, [r7, #0]
	while (vals->reg_num != 0xff || vals->value != 0xff) {
 800797c:	e010      	b.n	80079a0 <ov7670_write_array+0x2e>
		int ret = ov7670_write(info, vals->reg_num, vals->value);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	7819      	ldrb	r1, [r3, #0]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	461a      	mov	r2, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff ffdf 	bl	800794c <ov7670_write>
 800798e:	60f8      	str	r0, [r7, #12]

		if (ret < 0)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	da01      	bge.n	800799a <ov7670_write_array+0x28>
			return ret;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	e00b      	b.n	80079b2 <ov7670_write_array+0x40>
		vals++;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	3302      	adds	r3, #2
 800799e:	603b      	str	r3, [r7, #0]
	while (vals->reg_num != 0xff || vals->value != 0xff) {
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2bff      	cmp	r3, #255	; 0xff
 80079a6:	d1ea      	bne.n	800797e <ov7670_write_array+0xc>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	785b      	ldrb	r3, [r3, #1]
 80079ac:	2bff      	cmp	r3, #255	; 0xff
 80079ae:	d1e6      	bne.n	800797e <ov7670_write_array+0xc>
	}
	return 0;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
	...

080079bc <ov7670_init>:

/*************************************************************************************
 *
*************************************************************************************/
static int ov7670_init(struct ov7670_info *info, u32 val)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
	return ov7670_write_array(info, ov7670_default_regs);
 80079c6:	4904      	ldr	r1, [pc, #16]	; (80079d8 <ov7670_init+0x1c>)
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff ffd2 	bl	8007972 <ov7670_write_array>
 80079ce:	4603      	mov	r3, r0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	20000010 	.word	0x20000010

080079dc <ov7675_apply_framerate>:

/*************************************************************************************
 *
*************************************************************************************/
static int ov7675_apply_framerate(struct ov7670_info *info)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
	//struct ov7670_info *info = to_state(sd);
	int ret;

	ret = ov7670_write(info, OV7670_CLKRC, info->clkrc);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80079ea:	461a      	mov	r2, r3
 80079ec:	2111      	movs	r1, #17
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7ff ffac 	bl	800794c <ov7670_write>
 80079f4:	60f8      	str	r0, [r7, #12]
	if (ret < 0)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	da01      	bge.n	8007a00 <ov7675_apply_framerate+0x24>
		return ret;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	e00d      	b.n	8007a1c <ov7675_apply_framerate+0x40>

	return ov7670_write(info, OV7670_DBLV,
			    info->pll_bypass ? DBLV_BYPASS : DBLV_X4);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
	return ov7670_write(info, OV7670_DBLV,
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <ov7675_apply_framerate+0x32>
 8007a0a:	230a      	movs	r3, #10
 8007a0c:	e000      	b.n	8007a10 <ov7675_apply_framerate+0x34>
 8007a0e:	234a      	movs	r3, #74	; 0x4a
 8007a10:	461a      	mov	r2, r3
 8007a12:	216b      	movs	r1, #107	; 0x6b
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff ff99 	bl	800794c <ov7670_write>
 8007a1a:	4603      	mov	r3, r0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <ov7670_get_framerate_legacy>:

/*************************************************************************************
 *
*************************************************************************************/
static void ov7670_get_framerate_legacy(struct ov7670_info *info, struct v4l2_fract *tpf)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
	//struct ov7670_info *info = to_state(sd);

	tpf->numerator = 1;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2201      	movs	r2, #1
 8007a32:	601a      	str	r2, [r3, #0]
	tpf->denominator = info->clock_speed;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a38:	461a      	mov	r2, r3
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	605a      	str	r2, [r3, #4]
	if ((info->clkrc & CLKRC_EXT) == 0 && (info->clkrc & CLKRC_SCALE) > 1)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d111      	bne.n	8007a70 <ov7670_get_framerate_legacy+0x4c>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007a52:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <ov7670_get_framerate_legacy+0x4c>
		tpf->denominator /= (info->clkrc & CLKRC_SCALE);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	605a      	str	r2, [r3, #4]
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <ov7670_set_framerate_legacy>:

/*************************************************************************************
 *
*************************************************************************************/
static int ov7670_set_framerate_legacy(struct ov7670_info *info, struct v4l2_fract *tpf)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
	//struct ov7670_info *info = to_state(sd);
	int div;

	if (tpf->numerator == 0 || tpf->denominator == 0)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <ov7670_set_framerate_legacy+0x1a>
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d102      	bne.n	8007a9c <ov7670_set_framerate_legacy+0x20>
		div = 1;  /* Reset to full rate */
 8007a96:	2301      	movs	r3, #1
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	e00a      	b.n	8007ab2 <ov7670_set_framerate_legacy+0x36>
	else
		div = (tpf->numerator * info->clock_speed) / tpf->denominator;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007aa4:	fb02 f203 	mul.w	r2, r2, r3
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab0:	60fb      	str	r3, [r7, #12]
	if (div == 0)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d102      	bne.n	8007abe <ov7670_set_framerate_legacy+0x42>
		div = 1;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	e004      	b.n	8007ac8 <ov7670_set_framerate_legacy+0x4c>
	else if (div > CLKRC_SCALE)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2b3f      	cmp	r3, #63	; 0x3f
 8007ac2:	dd01      	ble.n	8007ac8 <ov7670_set_framerate_legacy+0x4c>
		div = CLKRC_SCALE;
 8007ac4:	233f      	movs	r3, #63	; 0x3f
 8007ac6:	60fb      	str	r3, [r7, #12]
	info->clkrc = (info->clkrc & 0x80) | div;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007ace:	b25b      	sxtb	r3, r3
 8007ad0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ad4:	b25a      	sxtb	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	b25b      	sxtb	r3, r3
 8007ada:	4313      	orrs	r3, r2
 8007adc:	b25b      	sxtb	r3, r3
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	tpf->numerator = 1;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	601a      	str	r2, [r3, #0]
	tpf->denominator = info->clock_speed / div;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	fb92 f3f3 	sdiv	r3, r2, r3
 8007af6:	461a      	mov	r2, r3
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	605a      	str	r2, [r3, #4]

	/* If the device is not powered up by the host driver do
	 * not apply any changes to H/W at this time. Instead
	 * the framerate will be restored right after power-up.*/
	if (info->on)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d009      	beq.n	8007b18 <ov7670_set_framerate_legacy+0x9c>
		return ov7670_write(info, OV7670_CLKRC, info->clkrc);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	2111      	movs	r1, #17
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7ff ff1c 	bl	800794c <ov7670_write>
 8007b14:	4603      	mov	r3, r0
 8007b16:	e000      	b.n	8007b1a <ov7670_set_framerate_legacy+0x9e>

	return 0;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <ov7670_set_hw>:

/*************************************************************************************
 * Store a set of start/stop values into the camera.
*************************************************************************************/
static int ov7670_set_hw(struct ov7670_info *info, int hstart, int hstop, int vstart, int vstop)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b086      	sub	sp, #24
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
 8007b2e:	603b      	str	r3, [r7, #0]
	int ret;
	unsigned char v;
	/* Horizontal: 11 bits, top 8 live in hstart and hstop.  Bottom 3 of
	 * hstart are in href[2:0], bottom 3 of hstop in href[5:3].  There is
	 * a mystery "edge offset" value in the top two bits of href.*/
	ret = ov7670_write(info, OV7670_HSTART, (hstart >> 3) & 0xff);
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	10db      	asrs	r3, r3, #3
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	2117      	movs	r1, #23
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f7ff ff06 	bl	800794c <ov7670_write>
 8007b40:	6178      	str	r0, [r7, #20]
	if (ret)
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <ov7670_set_hw+0x2a>
		return ret;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	e088      	b.n	8007c5e <ov7670_set_hw+0x13c>
	ret = ov7670_write(info, OV7670_HSTOP, (hstop >> 3) & 0xff);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	10db      	asrs	r3, r3, #3
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	461a      	mov	r2, r3
 8007b54:	2118      	movs	r1, #24
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f7ff fef8 	bl	800794c <ov7670_write>
 8007b5c:	6178      	str	r0, [r7, #20]
	if (ret)
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <ov7670_set_hw+0x46>
		return ret;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	e07a      	b.n	8007c5e <ov7670_set_hw+0x13c>
	ret = ov7670_read(info, OV7670_HREF, &v);
 8007b68:	f107 0313 	add.w	r3, r7, #19
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	2132      	movs	r1, #50	; 0x32
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f7ff fed9 	bl	8007928 <ov7670_read>
 8007b76:	6178      	str	r0, [r7, #20]
	if (ret)
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <ov7670_set_hw+0x60>
		return ret;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	e06d      	b.n	8007c5e <ov7670_set_hw+0x13c>
	v = (v & 0xc0) | ((hstop & 0x7) << 3) | (hstart & 0x7);
 8007b82:	7cfb      	ldrb	r3, [r7, #19]
 8007b84:	b25b      	sxtb	r3, r3
 8007b86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b8a:	b25a      	sxtb	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	00db      	lsls	r3, r3, #3
 8007b90:	b25b      	sxtb	r3, r3
 8007b92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b96:	b25b      	sxtb	r3, r3
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	b25a      	sxtb	r2, r3
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	b25b      	sxtb	r3, r3
 8007ba0:	f003 0307 	and.w	r3, r3, #7
 8007ba4:	b25b      	sxtb	r3, r3
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	b25b      	sxtb	r3, r3
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(10);
 8007bae:	200a      	movs	r0, #10
 8007bb0:	f7fa fc94 	bl	80024dc <HAL_Delay>
	ret = ov7670_write(info, OV7670_HREF, v);
 8007bb4:	7cfb      	ldrb	r3, [r7, #19]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	2132      	movs	r1, #50	; 0x32
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7ff fec6 	bl	800794c <ov7670_write>
 8007bc0:	6178      	str	r0, [r7, #20]
	if (ret)
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <ov7670_set_hw+0xaa>
		return ret;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	e048      	b.n	8007c5e <ov7670_set_hw+0x13c>
	/* Vertical: similar arrangement, but only 10 bits. */
	ret = ov7670_write(info, OV7670_VSTRT, (vstart >> 2) & 0xff);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	109b      	asrs	r3, r3, #2
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	2119      	movs	r1, #25
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f7ff feb8 	bl	800794c <ov7670_write>
 8007bdc:	6178      	str	r0, [r7, #20]
	if (ret)
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <ov7670_set_hw+0xc6>
		return ret;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	e03a      	b.n	8007c5e <ov7670_set_hw+0x13c>
	ret = ov7670_write(info, OV7670_VSTOP, (vstop >> 2) & 0xff);
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	109b      	asrs	r3, r3, #2
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	461a      	mov	r2, r3
 8007bf0:	211a      	movs	r1, #26
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f7ff feaa 	bl	800794c <ov7670_write>
 8007bf8:	6178      	str	r0, [r7, #20]
	if (ret)
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <ov7670_set_hw+0xe2>
		return ret;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	e02c      	b.n	8007c5e <ov7670_set_hw+0x13c>
	ret = ov7670_read(info, OV7670_VREF, &v);
 8007c04:	f107 0313 	add.w	r3, r7, #19
 8007c08:	461a      	mov	r2, r3
 8007c0a:	2103      	movs	r1, #3
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f7ff fe8b 	bl	8007928 <ov7670_read>
 8007c12:	6178      	str	r0, [r7, #20]
	if (ret)
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <ov7670_set_hw+0xfc>
		return ret;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	e01f      	b.n	8007c5e <ov7670_set_hw+0x13c>
	v = (v & 0xf0) | ((vstop & 0x3) << 2) | (vstart & 0x3);
 8007c1e:	7cfb      	ldrb	r3, [r7, #19]
 8007c20:	b25b      	sxtb	r3, r3
 8007c22:	f023 030f 	bic.w	r3, r3, #15
 8007c26:	b25a      	sxtb	r2, r3
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	b25b      	sxtb	r3, r3
 8007c2e:	f003 030c 	and.w	r3, r3, #12
 8007c32:	b25b      	sxtb	r3, r3
 8007c34:	4313      	orrs	r3, r2
 8007c36:	b25a      	sxtb	r2, r3
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	b25b      	sxtb	r3, r3
 8007c3c:	f003 0303 	and.w	r3, r3, #3
 8007c40:	b25b      	sxtb	r3, r3
 8007c42:	4313      	orrs	r3, r2
 8007c44:	b25b      	sxtb	r3, r3
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	74fb      	strb	r3, [r7, #19]
	HAL_Delay(10);
 8007c4a:	200a      	movs	r0, #10
 8007c4c:	f7fa fc46 	bl	80024dc <HAL_Delay>
	return ov7670_write(info, OV7670_VREF, v);
 8007c50:	7cfb      	ldrb	r3, [r7, #19]
 8007c52:	461a      	mov	r2, r3
 8007c54:	2103      	movs	r1, #3
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7ff fe78 	bl	800794c <ov7670_write>
 8007c5c:	4603      	mov	r3, r0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <ov7670_try_fmt_internal>:
*************************************************************************************/
static int ov7670_try_fmt_internal(struct ov7670_info *info,
		struct v4l2_mbus_framefmt *fmt,
		struct ov7670_format_struct **ret_fmt,
		struct ov7670_win_size **ret_wsize)
{
 8007c68:	b4b0      	push	{r4, r5, r7}
 8007c6a:	b08b      	sub	sp, #44	; 0x2c
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
 8007c74:	603b      	str	r3, [r7, #0]
	int index, i;
	struct ov7670_win_size *wsize;
	unsigned int n_win_sizes = info->devtype->n_win_sizes;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	617b      	str	r3, [r7, #20]
	unsigned int win_sizes_limit = n_win_sizes;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	61bb      	str	r3, [r7, #24]

	for (index = 0; index < N_OV7670_FMTS; index++)
 8007c82:	2300      	movs	r3, #0
 8007c84:	627b      	str	r3, [r7, #36]	; 0x24
 8007c86:	e00e      	b.n	8007ca6 <ov7670_try_fmt_internal+0x3e>
		if (ov7670_formats[index].mbus_code == fmt->code)
 8007c88:	4957      	ldr	r1, [pc, #348]	; (8007de8 <ov7670_try_fmt_internal+0x180>)
 8007c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	440b      	add	r3, r1
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d006      	beq.n	8007cae <ov7670_try_fmt_internal+0x46>
	for (index = 0; index < N_OV7670_FMTS; index++)
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d9ed      	bls.n	8007c88 <ov7670_try_fmt_internal+0x20>
 8007cac:	e000      	b.n	8007cb0 <ov7670_try_fmt_internal+0x48>
			break;
 8007cae:	bf00      	nop
	if (index >= N_OV7670_FMTS) {
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d905      	bls.n	8007cc2 <ov7670_try_fmt_internal+0x5a>
		/* default to first format */
		index = 0;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24
		fmt->code = ov7670_formats[0].mbus_code;
 8007cba:	4b4b      	ldr	r3, [pc, #300]	; (8007de8 <ov7670_try_fmt_internal+0x180>)
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	609a      	str	r2, [r3, #8]
	}
	if (ret_fmt != NULL)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d009      	beq.n	8007cdc <ov7670_try_fmt_internal+0x74>
		*ret_fmt = ov7670_formats + index;
 8007cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cca:	4613      	mov	r3, r2
 8007ccc:	00db      	lsls	r3, r3, #3
 8007cce:	4413      	add	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	4b44      	ldr	r3, [pc, #272]	; (8007de8 <ov7670_try_fmt_internal+0x180>)
 8007cd6:	441a      	add	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	601a      	str	r2, [r3, #0]
	/*
	 * Fields: the OV devices claim to be progressive.
	 */
	fmt->field = V4L2_FIELD_NONE;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	60da      	str	r2, [r3, #12]

	/* Don't consider values that don't match min_height and min_width constraints.*/
	if (info->min_width || info->min_height)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d103      	bne.n	8007cf2 <ov7670_try_fmt_internal+0x8a>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d01f      	beq.n	8007d32 <ov7670_try_fmt_internal+0xca>
		for (i = 0; i < n_win_sizes; i++) {
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	623b      	str	r3, [r7, #32]
 8007cf6:	e018      	b.n	8007d2a <ov7670_try_fmt_internal+0xc2>
			wsize = info->devtype->win_sizes + i;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	015b      	lsls	r3, r3, #5
 8007d02:	4413      	add	r3, r2
 8007d04:	61fb      	str	r3, [r7, #28]

			if (wsize->width < info->min_width ||
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	db05      	blt.n	8007d1e <ov7670_try_fmt_internal+0xb6>
				wsize->height < info->min_height) {
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
			if (wsize->width < info->min_width ||
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	da02      	bge.n	8007d24 <ov7670_try_fmt_internal+0xbc>
				win_sizes_limit = i;
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	61bb      	str	r3, [r7, #24]
				break;
 8007d22:	e006      	b.n	8007d32 <ov7670_try_fmt_internal+0xca>
		for (i = 0; i < n_win_sizes; i++) {
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	3301      	adds	r3, #1
 8007d28:	623b      	str	r3, [r7, #32]
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d8e2      	bhi.n	8007cf8 <ov7670_try_fmt_internal+0x90>
			}
		}
	/* Round requested image size down to the nearest we support, but not below the smallest.*/
	for (wsize = info->devtype->win_sizes;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	61fb      	str	r3, [r7, #28]
 8007d3a:	e00e      	b.n	8007d5a <ov7670_try_fmt_internal+0xf2>
	     wsize < info->devtype->win_sizes + win_sizes_limit; wsize++)
		if (fmt->width >= wsize->width && fmt->height >= wsize->height)
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	69fa      	ldr	r2, [r7, #28]
 8007d42:	6812      	ldr	r2, [r2, #0]
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d305      	bcc.n	8007d54 <ov7670_try_fmt_internal+0xec>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	69fa      	ldr	r2, [r7, #28]
 8007d4e:	6852      	ldr	r2, [r2, #4]
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d20c      	bcs.n	8007d6e <ov7670_try_fmt_internal+0x106>
	     wsize < info->devtype->win_sizes + win_sizes_limit; wsize++)
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	3320      	adds	r3, #32
 8007d58:	61fb      	str	r3, [r7, #28]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	015b      	lsls	r3, r3, #5
 8007d64:	4413      	add	r3, r2
	for (wsize = info->devtype->win_sizes;
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d3e7      	bcc.n	8007d3c <ov7670_try_fmt_internal+0xd4>
 8007d6c:	e000      	b.n	8007d70 <ov7670_try_fmt_internal+0x108>
			break;
 8007d6e:	bf00      	nop
	if (wsize >= info->devtype->win_sizes + win_sizes_limit)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	015b      	lsls	r3, r3, #5
 8007d7a:	4413      	add	r3, r2
 8007d7c:	69fa      	ldr	r2, [r7, #28]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d302      	bcc.n	8007d88 <ov7670_try_fmt_internal+0x120>
		wsize--;   /* Take the smallest one */
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	3b20      	subs	r3, #32
 8007d86:	61fb      	str	r3, [r7, #28]
	if (ret_wsize != NULL)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d002      	beq.n	8007d94 <ov7670_try_fmt_internal+0x12c>
		*ret_wsize = wsize;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	69fa      	ldr	r2, [r7, #28]
 8007d92:	601a      	str	r2, [r3, #0]
	/* Note the size we'll actually handle.*/
	fmt->width = wsize->width;
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	601a      	str	r2, [r3, #0]
	fmt->height = wsize->height;
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	461a      	mov	r2, r3
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	605a      	str	r2, [r3, #4]
	fmt->colorspace = ov7670_formats[index].colorspace;
 8007da8:	490f      	ldr	r1, [pc, #60]	; (8007de8 <ov7670_try_fmt_internal+0x180>)
 8007daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dac:	4613      	mov	r3, r2
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	4413      	add	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	3304      	adds	r3, #4
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	611a      	str	r2, [r3, #16]

	info->format = *fmt;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	f103 0418 	add.w	r4, r3, #24
 8007dc8:	4615      	mov	r5, r2
 8007dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007dd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	return 0;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	372c      	adds	r7, #44	; 0x2c
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bcb0      	pop	{r4, r5, r7}
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	200001cc 	.word	0x200001cc

08007dec <ov7670_apply_fmt>:

/*************************************************************************************
 *
*************************************************************************************/
static int ov7670_apply_fmt(struct ov7670_info *info)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b088      	sub	sp, #32
 8007df0:	af02      	add	r7, sp, #8
 8007df2:	6078      	str	r0, [r7, #4]
	//struct ov7670_info *info = to_state(sd);
	struct ov7670_win_size *wsize = info->wsize;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df8:	613b      	str	r3, [r7, #16]
	unsigned char com7, com10 = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	75fb      	strb	r3, [r7, #23]

	/* COM7 is a pain in the ass, it doesn't like to be read then
	 * quickly written afterward.  But we have everything we need
	 * to set it absolutely here, as long as the format-specific
	 * register sets list it first.*/
	com7 = info->fmt->regs[0].value;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	785b      	ldrb	r3, [r3, #1]
 8007e06:	73fb      	strb	r3, [r7, #15]
	com7 |= wsize->com7_bit;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	7a1a      	ldrb	r2, [r3, #8]
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	73fb      	strb	r3, [r7, #15]
	ret = ov7670_write(info, OV7670_COM7, com7);
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	461a      	mov	r2, r3
 8007e16:	2112      	movs	r1, #18
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7ff fd97 	bl	800794c <ov7670_write>
 8007e1e:	60b8      	str	r0, [r7, #8]
	if (ret)
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <ov7670_apply_fmt+0x3e>
		return ret;
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	e06f      	b.n	8007f0a <ov7670_apply_fmt+0x11e>

	/* Configure the media bus through COM10 register*/
	if (info->mbus_config & V4L2_MBUS_VSYNC_ACTIVE_LOW)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <ov7670_apply_fmt+0x52>
		com10 |= COM10_VS_NEG;
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	f043 0302 	orr.w	r3, r3, #2
 8007e3c:	75fb      	strb	r3, [r7, #23]
	if (info->mbus_config & V4L2_MBUS_HSYNC_ACTIVE_LOW)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e42:	f003 0308 	and.w	r3, r3, #8
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <ov7670_apply_fmt+0x66>
		com10 |= COM10_HREF_REV;
 8007e4a:	7dfb      	ldrb	r3, [r7, #23]
 8007e4c:	f043 0308 	orr.w	r3, r3, #8
 8007e50:	75fb      	strb	r3, [r7, #23]
	if (info->pclk_hb_disable)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <ov7670_apply_fmt+0x78>
		com10 |= COM10_PCLK_HB;
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
 8007e5e:	f043 0320 	orr.w	r3, r3, #32
 8007e62:	75fb      	strb	r3, [r7, #23]
	ret = ov7670_write(info, OV7670_COM10, com10);
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
 8007e66:	461a      	mov	r2, r3
 8007e68:	2115      	movs	r1, #21
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7ff fd6e 	bl	800794c <ov7670_write>
 8007e70:	60b8      	str	r0, [r7, #8]
	if (ret)
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <ov7670_apply_fmt+0x90>
		return ret;
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	e046      	b.n	8007f0a <ov7670_apply_fmt+0x11e>

	/* Now write the rest of the array.  Also store start/stops*/
	ret = ov7670_write_array(info, info->fmt->regs + 1);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	3302      	adds	r3, #2
 8007e84:	4619      	mov	r1, r3
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7ff fd73 	bl	8007972 <ov7670_write_array>
 8007e8c:	60b8      	str	r0, [r7, #8]
	if (ret)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <ov7670_apply_fmt+0xac>
		return ret;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	e038      	b.n	8007f0a <ov7670_apply_fmt+0x11e>

	ret = ov7670_set_hw(info, wsize->hstart, wsize->hstop, wsize->vstart,
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	68d9      	ldr	r1, [r3, #12]
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	691a      	ldr	r2, [r3, #16]
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	6958      	ldr	r0, [r3, #20]
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	4603      	mov	r3, r0
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff fe38 	bl	8007b22 <ov7670_set_hw>
 8007eb2:	60b8      	str	r0, [r7, #8]
			    wsize->vstop);
	if (ret)
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <ov7670_apply_fmt+0xd2>
		return ret;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	e025      	b.n	8007f0a <ov7670_apply_fmt+0x11e>

	if (wsize->regs) {
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00b      	beq.n	8007ede <ov7670_apply_fmt+0xf2>
		ret = ov7670_write_array(info, wsize->regs);
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff fd50 	bl	8007972 <ov7670_write_array>
 8007ed2:	60b8      	str	r0, [r7, #8]
		if (ret)
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <ov7670_apply_fmt+0xf2>
			return ret;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	e015      	b.n	8007f0a <ov7670_apply_fmt+0x11e>
	}



	ret = ov7670_write(info, OV7670_COM10, com10);
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	2115      	movs	r1, #21
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff fd31 	bl	800794c <ov7670_write>
 8007eea:	60b8      	str	r0, [r7, #8]
	 * *really* poor.
	 *
	 * (Update) Now that we retain clkrc state, we should be able
	 * to write it unconditionally, and that will make the frame
	 * rate persistent too.*/
	ret = ov7670_write(info, OV7670_CLKRC, info->clkrc);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	2111      	movs	r1, #17
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7ff fd28 	bl	800794c <ov7670_write>
 8007efc:	60b8      	str	r0, [r7, #8]
	if (ret)
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d001      	beq.n	8007f08 <ov7670_apply_fmt+0x11c>
		return ret;
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	e000      	b.n	8007f0a <ov7670_apply_fmt+0x11e>

	return 0;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <ov7670_set_fmt>:

/*************************************************************************************
 * Set a format.
*************************************************************************************/
static int ov7670_set_fmt(struct ov7670_info *info, struct v4l2_subdev_format *format)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	6039      	str	r1, [r7, #0]
	int ret;

	if (format->pad)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <ov7670_set_fmt+0x18>
		return -EINVAL;
 8007f24:	f06f 0315 	mvn.w	r3, #21
 8007f28:	e02e      	b.n	8007f88 <ov7670_set_fmt+0x76>

	if (format->which == V4L2_SUBDEV_FORMAT_TRY) {
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10f      	bne.n	8007f52 <ov7670_set_fmt+0x40>
		ret = ov7670_try_fmt_internal(info, &format->format, NULL, NULL);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	f103 0108 	add.w	r1, r3, #8
 8007f38:	2300      	movs	r3, #0
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff fe93 	bl	8007c68 <ov7670_try_fmt_internal>
 8007f42:	60f8      	str	r0, [r7, #12]
		if (ret)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <ov7670_set_fmt+0x3c>
			return ret;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	e01c      	b.n	8007f88 <ov7670_set_fmt+0x76>

		return 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	e01a      	b.n	8007f88 <ov7670_set_fmt+0x76>
	}

	ret = ov7670_try_fmt_internal(info, &format->format, &info->fmt, &info->wsize);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	f103 0108 	add.w	r1, r3, #8
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	334c      	adds	r3, #76	; 0x4c
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff fe80 	bl	8007c68 <ov7670_try_fmt_internal>
 8007f68:	60f8      	str	r0, [r7, #12]
	if (ret)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <ov7670_set_fmt+0x62>
		return ret;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	e009      	b.n	8007f88 <ov7670_set_fmt+0x76>

	/* If the device is not powered up by the host driver do
	 * not apply any changes to H/W at this time. Instead
	 * the frame format will be restored right after power-up.*/
	if (info->on)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d004      	beq.n	8007f86 <ov7670_set_fmt+0x74>
		return ov7670_apply_fmt(info);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff ff35 	bl	8007dec <ov7670_apply_fmt>
 8007f82:	4603      	mov	r3, r0
 8007f84:	e000      	b.n	8007f88 <ov7670_set_fmt+0x76>

	return 0;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <ov7670_store_cmatrix>:
/*************************************************************************************
 * Code for dealing with controls.
*************************************************************************************/
static int ov7670_store_cmatrix(struct ov7670_info *info,
		int matrix[CMATRIX_LEN])
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
	int i, ret;
	unsigned char signbits = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	72fb      	strb	r3, [r7, #11]

	/* Weird crap seems to exist in the upper part of
	 * the sign bits register, so let's preserve it.*/
	ret = ov7670_read(info, REG_CMATRIX_SIGN, &signbits);
 8007f9e:	f107 030b 	add.w	r3, r7, #11
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	2158      	movs	r1, #88	; 0x58
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7ff fcbe 	bl	8007928 <ov7670_read>
 8007fac:	60f8      	str	r0, [r7, #12]
	signbits &= 0xc0;
 8007fae:	7afb      	ldrb	r3, [r7, #11]
 8007fb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	72fb      	strb	r3, [r7, #11]

	for (i = 0; i < CMATRIX_LEN; i++) {
 8007fb8:	2300      	movs	r3, #0
 8007fba:	617b      	str	r3, [r7, #20]
 8007fbc:	e047      	b.n	800804e <ov7670_store_cmatrix+0xbe>
		unsigned char raw;

		if (matrix[i] < 0) {
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	da1e      	bge.n	800800a <ov7670_store_cmatrix+0x7a>
			signbits |= (1 << i);
 8007fcc:	2201      	movs	r2, #1
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd4:	b25a      	sxtb	r2, r3
 8007fd6:	7afb      	ldrb	r3, [r7, #11]
 8007fd8:	b25b      	sxtb	r3, r3
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	b25b      	sxtb	r3, r3
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	72fb      	strb	r3, [r7, #11]
			if (matrix[i] < -255)
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	4413      	add	r3, r2
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f113 0fff 	cmn.w	r3, #255	; 0xff
 8007ff0:	da02      	bge.n	8007ff8 <ov7670_store_cmatrix+0x68>
				raw = 0xff;
 8007ff2:	23ff      	movs	r3, #255	; 0xff
 8007ff4:	74fb      	strb	r3, [r7, #19]
 8007ff6:	e018      	b.n	800802a <ov7670_store_cmatrix+0x9a>
			else
				raw = (-1 * matrix[i]) & 0xff;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	4413      	add	r3, r2
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	425b      	negs	r3, r3
 8008006:	74fb      	strb	r3, [r7, #19]
 8008008:	e00f      	b.n	800802a <ov7670_store_cmatrix+0x9a>
		} else {
			if (matrix[i] > 255)
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	4413      	add	r3, r2
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2bff      	cmp	r3, #255	; 0xff
 8008016:	dd02      	ble.n	800801e <ov7670_store_cmatrix+0x8e>
				raw = 0xff;
 8008018:	23ff      	movs	r3, #255	; 0xff
 800801a:	74fb      	strb	r3, [r7, #19]
 800801c:	e005      	b.n	800802a <ov7670_store_cmatrix+0x9a>
			else
				raw = matrix[i] & 0xff;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	4413      	add	r3, r2
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	74fb      	strb	r3, [r7, #19]
		}
		ret = ov7670_write(info, REG_CMATRIX_BASE + i, raw);
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	334f      	adds	r3, #79	; 0x4f
 8008030:	b2db      	uxtb	r3, r3
 8008032:	7cfa      	ldrb	r2, [r7, #19]
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7ff fc88 	bl	800794c <ov7670_write>
 800803c:	60f8      	str	r0, [r7, #12]
		if (ret)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <ov7670_store_cmatrix+0xb8>
			return ret;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	e00c      	b.n	8008062 <ov7670_store_cmatrix+0xd2>
	for (i = 0; i < CMATRIX_LEN; i++) {
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	3301      	adds	r3, #1
 800804c:	617b      	str	r3, [r7, #20]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	2b05      	cmp	r3, #5
 8008052:	ddb4      	ble.n	8007fbe <ov7670_store_cmatrix+0x2e>
	}
	return ov7670_write(info, REG_CMATRIX_SIGN, signbits);
 8008054:	7afb      	ldrb	r3, [r7, #11]
 8008056:	461a      	mov	r2, r3
 8008058:	2158      	movs	r1, #88	; 0x58
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff fc76 	bl	800794c <ov7670_write>
 8008060:	4603      	mov	r3, r0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3718      	adds	r7, #24
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <ov7670_sine>:

/*************************************************************************************
 *
*************************************************************************************/
static int ov7670_sine(int theta)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
	int chs = 1;
 8008074:	2301      	movs	r3, #1
 8008076:	60fb      	str	r3, [r7, #12]
	int sine;

	if (theta < 0) {
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	da05      	bge.n	800808a <ov7670_sine+0x1e>
		theta = -theta;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	425b      	negs	r3, r3
 8008082:	607b      	str	r3, [r7, #4]
		chs = -1;
 8008084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008088:	60fb      	str	r3, [r7, #12]
	}
	if (theta <= 90)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b5a      	cmp	r3, #90	; 0x5a
 800808e:	dc0b      	bgt.n	80080a8 <ov7670_sine+0x3c>
		sine = ov7670_sin_table[theta/SIN_STEP];
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a12      	ldr	r2, [pc, #72]	; (80080dc <ov7670_sine+0x70>)
 8008094:	fb82 1203 	smull	r1, r2, r2, r3
 8008098:	1052      	asrs	r2, r2, #1
 800809a:	17db      	asrs	r3, r3, #31
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	4a10      	ldr	r2, [pc, #64]	; (80080e0 <ov7670_sine+0x74>)
 80080a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080a4:	60bb      	str	r3, [r7, #8]
 80080a6:	e00f      	b.n	80080c8 <ov7670_sine+0x5c>
	else {
		theta -= 90;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	3b5a      	subs	r3, #90	; 0x5a
 80080ac:	607b      	str	r3, [r7, #4]
		sine = 1000 - ov7670_sin_table[theta/SIN_STEP];
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a0a      	ldr	r2, [pc, #40]	; (80080dc <ov7670_sine+0x70>)
 80080b2:	fb82 1203 	smull	r1, r2, r2, r3
 80080b6:	1052      	asrs	r2, r2, #1
 80080b8:	17db      	asrs	r3, r3, #31
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	4a08      	ldr	r2, [pc, #32]	; (80080e0 <ov7670_sine+0x74>)
 80080be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080c2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80080c6:	60bb      	str	r3, [r7, #8]
	}
	return sine*chs;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	fb02 f303 	mul.w	r3, r2, r3
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	66666667 	.word	0x66666667
 80080e0:	0801b3a4 	.word	0x0801b3a4

080080e4 <ov7670_cosine>:

/*************************************************************************************
 *
*************************************************************************************/
static int ov7670_cosine(int theta)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
	theta = 90 - theta;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80080f2:	607b      	str	r3, [r7, #4]
	if (theta > 180)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2bb4      	cmp	r3, #180	; 0xb4
 80080f8:	dd04      	ble.n	8008104 <ov7670_cosine+0x20>
		theta -= 360;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008100:	607b      	str	r3, [r7, #4]
 8008102:	e007      	b.n	8008114 <ov7670_cosine+0x30>
	else if (theta < -180)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 800810a:	da03      	bge.n	8008114 <ov7670_cosine+0x30>
		theta += 360;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008112:	607b      	str	r3, [r7, #4]
	return ov7670_sine(theta);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff ffa9 	bl	800806c <ov7670_sine>
 800811a:	4603      	mov	r3, r0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <ov7670_calc_cmatrix>:
/*************************************************************************************
 *
*************************************************************************************/
static void ov7670_calc_cmatrix(struct ov7670_info *info,
		int matrix[CMATRIX_LEN], int sat, int hue)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08e      	sub	sp, #56	; 0x38
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
	int i;
	/*
	 * Apply the current saturation setting first.
	 */
	for (i = 0; i < CMATRIX_LEN; i++)
 8008132:	2300      	movs	r3, #0
 8008134:	637b      	str	r3, [r7, #52]	; 0x34
 8008136:	e012      	b.n	800815e <ov7670_calc_cmatrix+0x3a>
		matrix[i] = (info->fmt->cmatrix[i] * sat) >> 7;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800813c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800813e:	3302      	adds	r3, #2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	fb02 f203 	mul.w	r2, r2, r3
 800814c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	68b9      	ldr	r1, [r7, #8]
 8008152:	440b      	add	r3, r1
 8008154:	11d2      	asrs	r2, r2, #7
 8008156:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CMATRIX_LEN; i++)
 8008158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815a:	3301      	adds	r3, #1
 800815c:	637b      	str	r3, [r7, #52]	; 0x34
 800815e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008160:	2b05      	cmp	r3, #5
 8008162:	dde9      	ble.n	8008138 <ov7670_calc_cmatrix+0x14>
	/*
	 * Then, if need be, rotate the hue value.
	 */
	if (hue != 0) {
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 8090 	beq.w	800828c <ov7670_calc_cmatrix+0x168>
		int sinth, costh, tmpmatrix[CMATRIX_LEN];

		memcpy(tmpmatrix, matrix, CMATRIX_LEN*sizeof(int));
 800816c:	f107 0314 	add.w	r3, r7, #20
 8008170:	2218      	movs	r2, #24
 8008172:	68b9      	ldr	r1, [r7, #8]
 8008174:	4618      	mov	r0, r3
 8008176:	f000 f9a3 	bl	80084c0 <memcpy>
		sinth = ov7670_sine(hue);
 800817a:	6838      	ldr	r0, [r7, #0]
 800817c:	f7ff ff76 	bl	800806c <ov7670_sine>
 8008180:	6338      	str	r0, [r7, #48]	; 0x30
		costh = ov7670_cosine(hue);
 8008182:	6838      	ldr	r0, [r7, #0]
 8008184:	f7ff ffae 	bl	80080e4 <ov7670_cosine>
 8008188:	62f8      	str	r0, [r7, #44]	; 0x2c

		matrix[0] = (matrix[3]*sinth + matrix[0]*costh)/1000;
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	330c      	adds	r3, #12
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008192:	fb02 f203 	mul.w	r2, r2, r3
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800819c:	fb01 f303 	mul.w	r3, r1, r3
 80081a0:	4413      	add	r3, r2
 80081a2:	4a3c      	ldr	r2, [pc, #240]	; (8008294 <ov7670_calc_cmatrix+0x170>)
 80081a4:	fb82 1203 	smull	r1, r2, r2, r3
 80081a8:	1192      	asrs	r2, r2, #6
 80081aa:	17db      	asrs	r3, r3, #31
 80081ac:	1ad2      	subs	r2, r2, r3
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	601a      	str	r2, [r3, #0]
		matrix[1] = (matrix[4]*sinth + matrix[1]*costh)/1000;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	3310      	adds	r3, #16
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ba:	fb02 f203 	mul.w	r2, r2, r3
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	3304      	adds	r3, #4
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081c6:	fb01 f303 	mul.w	r3, r1, r3
 80081ca:	4413      	add	r3, r2
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	3204      	adds	r2, #4
 80081d0:	4930      	ldr	r1, [pc, #192]	; (8008294 <ov7670_calc_cmatrix+0x170>)
 80081d2:	fb81 0103 	smull	r0, r1, r1, r3
 80081d6:	1189      	asrs	r1, r1, #6
 80081d8:	17db      	asrs	r3, r3, #31
 80081da:	1acb      	subs	r3, r1, r3
 80081dc:	6013      	str	r3, [r2, #0]
		matrix[2] = (matrix[5]*sinth + matrix[2]*costh)/1000;
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	3314      	adds	r3, #20
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e6:	fb02 f203 	mul.w	r2, r2, r3
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	3308      	adds	r3, #8
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081f2:	fb01 f303 	mul.w	r3, r1, r3
 80081f6:	4413      	add	r3, r2
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	3208      	adds	r2, #8
 80081fc:	4925      	ldr	r1, [pc, #148]	; (8008294 <ov7670_calc_cmatrix+0x170>)
 80081fe:	fb81 0103 	smull	r0, r1, r1, r3
 8008202:	1189      	asrs	r1, r1, #6
 8008204:	17db      	asrs	r3, r3, #31
 8008206:	1acb      	subs	r3, r1, r3
 8008208:	6013      	str	r3, [r2, #0]
		matrix[3] = (matrix[3]*costh - matrix[0]*sinth)/1000;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	330c      	adds	r3, #12
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008212:	fb02 f203 	mul.w	r2, r2, r3
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800821c:	fb01 f303 	mul.w	r3, r1, r3
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	320c      	adds	r2, #12
 8008226:	491b      	ldr	r1, [pc, #108]	; (8008294 <ov7670_calc_cmatrix+0x170>)
 8008228:	fb81 0103 	smull	r0, r1, r1, r3
 800822c:	1189      	asrs	r1, r1, #6
 800822e:	17db      	asrs	r3, r3, #31
 8008230:	1acb      	subs	r3, r1, r3
 8008232:	6013      	str	r3, [r2, #0]
		matrix[4] = (matrix[4]*costh - matrix[1]*sinth)/1000;
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	3310      	adds	r3, #16
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800823c:	fb02 f203 	mul.w	r2, r2, r3
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	3304      	adds	r3, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008248:	fb01 f303 	mul.w	r3, r1, r3
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	3210      	adds	r2, #16
 8008252:	4910      	ldr	r1, [pc, #64]	; (8008294 <ov7670_calc_cmatrix+0x170>)
 8008254:	fb81 0103 	smull	r0, r1, r1, r3
 8008258:	1189      	asrs	r1, r1, #6
 800825a:	17db      	asrs	r3, r3, #31
 800825c:	1acb      	subs	r3, r1, r3
 800825e:	6013      	str	r3, [r2, #0]
		matrix[5] = (matrix[5]*costh - matrix[2]*sinth)/1000;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	3314      	adds	r3, #20
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008268:	fb02 f203 	mul.w	r2, r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	3308      	adds	r3, #8
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008274:	fb01 f303 	mul.w	r3, r1, r3
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	3214      	adds	r2, #20
 800827e:	4905      	ldr	r1, [pc, #20]	; (8008294 <ov7670_calc_cmatrix+0x170>)
 8008280:	fb81 0103 	smull	r0, r1, r1, r3
 8008284:	1189      	asrs	r1, r1, #6
 8008286:	17db      	asrs	r3, r3, #31
 8008288:	1acb      	subs	r3, r1, r3
 800828a:	6013      	str	r3, [r2, #0]
	}
}
 800828c:	bf00      	nop
 800828e:	3738      	adds	r7, #56	; 0x38
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	10624dd3 	.word	0x10624dd3

08008298 <ov7670_s_sat_hue>:

/*************************************************************************************
 *
*************************************************************************************/
static int ov7670_s_sat_hue(struct ov7670_info *info, int sat, int hue)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08a      	sub	sp, #40	; 0x28
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
	//struct ov7670_info *info = to_state(sd);
	int matrix[CMATRIX_LEN];

	ov7670_calc_cmatrix(info, matrix, sat, hue);
 80082a4:	f107 0110 	add.w	r1, r7, #16
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f7ff ff39 	bl	8008124 <ov7670_calc_cmatrix>
	return ov7670_store_cmatrix(info, matrix);
 80082b2:	f107 0310 	add.w	r3, r7, #16
 80082b6:	4619      	mov	r1, r3
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f7ff fe69 	bl	8007f90 <ov7670_store_cmatrix>
 80082be:	4603      	mov	r3, r0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3728      	adds	r7, #40	; 0x28
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <ov7670_power_on>:

/*************************************************************************************
 *
*************************************************************************************/
static void ov7670_power_on(struct ov7670_info *info)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
	if (info->on)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d124      	bne.n	8008322 <ov7670_power_on+0x5a>
		return;

	OV7670_RST_LOW;
 80082d8:	2200      	movs	r2, #0
 80082da:	2104      	movs	r1, #4
 80082dc:	4813      	ldr	r0, [pc, #76]	; (800832c <ov7670_power_on+0x64>)
 80082de:	f7fa fe63 	bl	8002fa8 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80082e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80082e6:	f7fa f8f9 	bl	80024dc <HAL_Delay>
	OV7670_RST_HIGH;
 80082ea:	2201      	movs	r2, #1
 80082ec:	2104      	movs	r1, #4
 80082ee:	480f      	ldr	r0, [pc, #60]	; (800832c <ov7670_power_on+0x64>)
 80082f0:	f7fa fe5a 	bl	8002fa8 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80082f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80082f8:	f7fa f8f0 	bl	80024dc <HAL_Delay>

	if (info->pwdn_gpio || info->resetb_gpio || info->clk)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d107      	bne.n	8008314 <ov7670_power_on+0x4c>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008308:	2b00      	cmp	r3, #0
 800830a:	d103      	bne.n	8008314 <ov7670_power_on+0x4c>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <ov7670_power_on+0x52>
		HAL_Delay(5);
 8008314:	2005      	movs	r0, #5
 8008316:	f7fa f8e1 	bl	80024dc <HAL_Delay>

	info->on = true;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	655a      	str	r2, [r3, #84]	; 0x54
 8008320:	e000      	b.n	8008324 <ov7670_power_on+0x5c>
		return;
 8008322:	bf00      	nop
}
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	40021400 	.word	0x40021400

08008330 <ov7670_power_off>:

/*************************************************************************************
 *
*************************************************************************************/
static void ov7670_power_off(struct ov7670_info *info)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
	if (!info->on)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00c      	beq.n	800835a <ov7670_power_off+0x2a>
		return;

	OV7670_RST_LOW;
 8008340:	2200      	movs	r2, #0
 8008342:	2104      	movs	r1, #4
 8008344:	4807      	ldr	r0, [pc, #28]	; (8008364 <ov7670_power_off+0x34>)
 8008346:	f7fa fe2f 	bl	8002fa8 <HAL_GPIO_WritePin>

	if (info->pwdn_gpio)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d004      	beq.n	800835c <ov7670_power_off+0x2c>
		//gpiod_set_value(info->pwdn_gpio, 1);

	info->on = false;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	655a      	str	r2, [r3, #84]	; 0x54
 8008358:	e000      	b.n	800835c <ov7670_power_off+0x2c>
		return;
 800835a:	bf00      	nop
}
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	40021400 	.word	0x40021400

08008368 <ov7670_s_power>:

/*************************************************************************************
 *
*************************************************************************************/
static int ov7670_s_power(struct ov7670_info *info, int on)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
	//struct ov7670_info *info = to_state(sd);

	if (info->on == on)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	429a      	cmp	r2, r3
 800837a:	d101      	bne.n	8008380 <ov7670_s_power+0x18>
		return 0;
 800837c:	2300      	movs	r3, #0
 800837e:	e014      	b.n	80083aa <ov7670_s_power+0x42>

	if (on) {
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00d      	beq.n	80083a2 <ov7670_s_power+0x3a>
		ov7670_power_on(info);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff ff9e 	bl	80082c8 <ov7670_power_on>
		ov7670_init(info, 0);
 800838c:	2100      	movs	r1, #0
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7ff fb14 	bl	80079bc <ov7670_init>
		ov7670_apply_fmt(info);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7ff fd29 	bl	8007dec <ov7670_apply_fmt>
		ov7675_apply_framerate(info);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7ff fb1e 	bl	80079dc <ov7675_apply_framerate>
 80083a0:	e002      	b.n	80083a8 <ov7670_s_power+0x40>
		//v4l2_ctrl_handler_setup(&info->hdl);
	} else {
		ov7670_power_off(info);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff ffc4 	bl	8008330 <ov7670_power_off>
	}

	return 0;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
	...

080083b4 <ov7670_initialization>:

/*************************************************************************************
 *
*************************************************************************************/
void ov7670_initialization()
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	af00      	add	r7, sp, #0
	ov7670_set_framerate_legacy(&g_cam_info, &g_framerate);
 80083b8:	4909      	ldr	r1, [pc, #36]	; (80083e0 <ov7670_initialization+0x2c>)
 80083ba:	480a      	ldr	r0, [pc, #40]	; (80083e4 <ov7670_initialization+0x30>)
 80083bc:	f7ff fb5e 	bl	8007a7c <ov7670_set_framerate_legacy>
	ov7670_set_fmt(&g_cam_info, &g_format);
 80083c0:	4909      	ldr	r1, [pc, #36]	; (80083e8 <ov7670_initialization+0x34>)
 80083c2:	4808      	ldr	r0, [pc, #32]	; (80083e4 <ov7670_initialization+0x30>)
 80083c4:	f7ff fda5 	bl	8007f12 <ov7670_set_fmt>
	ov7670_s_power(&g_cam_info, 1);
 80083c8:	2101      	movs	r1, #1
 80083ca:	4806      	ldr	r0, [pc, #24]	; (80083e4 <ov7670_initialization+0x30>)
 80083cc:	f7ff ffcc 	bl	8008368 <ov7670_s_power>
	ov7670_s_sat_hue(&g_cam_info, 0, 0);
 80083d0:	2200      	movs	r2, #0
 80083d2:	2100      	movs	r1, #0
 80083d4:	4803      	ldr	r0, [pc, #12]	; (80083e4 <ov7670_initialization+0x30>)
 80083d6:	f7ff ff5f 	bl	8008298 <ov7670_s_sat_hue>

	//ov7670_s_test_pattern(&g_cam_info, 3);
}
 80083da:	bf00      	nop
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	200002dc 	.word	0x200002dc
 80083e4:	2000033c 	.word	0x2000033c
 80083e8:	200002e4 	.word	0x200002e4

080083ec <abort>:
 80083ec:	b508      	push	{r3, lr}
 80083ee:	2006      	movs	r0, #6
 80083f0:	f000 fc66 	bl	8008cc0 <raise>
 80083f4:	2001      	movs	r0, #1
 80083f6:	f7f9 fa43 	bl	8001880 <_exit>
	...

080083fc <__assert_func>:
 80083fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083fe:	4614      	mov	r4, r2
 8008400:	461a      	mov	r2, r3
 8008402:	4b09      	ldr	r3, [pc, #36]	; (8008428 <__assert_func+0x2c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4605      	mov	r5, r0
 8008408:	68d8      	ldr	r0, [r3, #12]
 800840a:	b14c      	cbz	r4, 8008420 <__assert_func+0x24>
 800840c:	4b07      	ldr	r3, [pc, #28]	; (800842c <__assert_func+0x30>)
 800840e:	9100      	str	r1, [sp, #0]
 8008410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008414:	4906      	ldr	r1, [pc, #24]	; (8008430 <__assert_func+0x34>)
 8008416:	462b      	mov	r3, r5
 8008418:	f000 f814 	bl	8008444 <fiprintf>
 800841c:	f7ff ffe6 	bl	80083ec <abort>
 8008420:	4b04      	ldr	r3, [pc, #16]	; (8008434 <__assert_func+0x38>)
 8008422:	461c      	mov	r4, r3
 8008424:	e7f3      	b.n	800840e <__assert_func+0x12>
 8008426:	bf00      	nop
 8008428:	200003b4 	.word	0x200003b4
 800842c:	0801b400 	.word	0x0801b400
 8008430:	0801b40d 	.word	0x0801b40d
 8008434:	0801b43b 	.word	0x0801b43b

08008438 <__errno>:
 8008438:	4b01      	ldr	r3, [pc, #4]	; (8008440 <__errno+0x8>)
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	200003b4 	.word	0x200003b4

08008444 <fiprintf>:
 8008444:	b40e      	push	{r1, r2, r3}
 8008446:	b503      	push	{r0, r1, lr}
 8008448:	4601      	mov	r1, r0
 800844a:	ab03      	add	r3, sp, #12
 800844c:	4805      	ldr	r0, [pc, #20]	; (8008464 <fiprintf+0x20>)
 800844e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008452:	6800      	ldr	r0, [r0, #0]
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	f000 f937 	bl	80086c8 <_vfiprintf_r>
 800845a:	b002      	add	sp, #8
 800845c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008460:	b003      	add	sp, #12
 8008462:	4770      	bx	lr
 8008464:	200003b4 	.word	0x200003b4

08008468 <__libc_init_array>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	4d0d      	ldr	r5, [pc, #52]	; (80084a0 <__libc_init_array+0x38>)
 800846c:	4c0d      	ldr	r4, [pc, #52]	; (80084a4 <__libc_init_array+0x3c>)
 800846e:	1b64      	subs	r4, r4, r5
 8008470:	10a4      	asrs	r4, r4, #2
 8008472:	2600      	movs	r6, #0
 8008474:	42a6      	cmp	r6, r4
 8008476:	d109      	bne.n	800848c <__libc_init_array+0x24>
 8008478:	4d0b      	ldr	r5, [pc, #44]	; (80084a8 <__libc_init_array+0x40>)
 800847a:	4c0c      	ldr	r4, [pc, #48]	; (80084ac <__libc_init_array+0x44>)
 800847c:	f001 faa6 	bl	80099cc <_init>
 8008480:	1b64      	subs	r4, r4, r5
 8008482:	10a4      	asrs	r4, r4, #2
 8008484:	2600      	movs	r6, #0
 8008486:	42a6      	cmp	r6, r4
 8008488:	d105      	bne.n	8008496 <__libc_init_array+0x2e>
 800848a:	bd70      	pop	{r4, r5, r6, pc}
 800848c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008490:	4798      	blx	r3
 8008492:	3601      	adds	r6, #1
 8008494:	e7ee      	b.n	8008474 <__libc_init_array+0xc>
 8008496:	f855 3b04 	ldr.w	r3, [r5], #4
 800849a:	4798      	blx	r3
 800849c:	3601      	adds	r6, #1
 800849e:	e7f2      	b.n	8008486 <__libc_init_array+0x1e>
 80084a0:	0801b654 	.word	0x0801b654
 80084a4:	0801b654 	.word	0x0801b654
 80084a8:	0801b654 	.word	0x0801b654
 80084ac:	0801b658 	.word	0x0801b658

080084b0 <malloc>:
 80084b0:	4b02      	ldr	r3, [pc, #8]	; (80084bc <malloc+0xc>)
 80084b2:	4601      	mov	r1, r0
 80084b4:	6818      	ldr	r0, [r3, #0]
 80084b6:	f000 b883 	b.w	80085c0 <_malloc_r>
 80084ba:	bf00      	nop
 80084bc:	200003b4 	.word	0x200003b4

080084c0 <memcpy>:
 80084c0:	440a      	add	r2, r1
 80084c2:	4291      	cmp	r1, r2
 80084c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80084c8:	d100      	bne.n	80084cc <memcpy+0xc>
 80084ca:	4770      	bx	lr
 80084cc:	b510      	push	{r4, lr}
 80084ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084d6:	4291      	cmp	r1, r2
 80084d8:	d1f9      	bne.n	80084ce <memcpy+0xe>
 80084da:	bd10      	pop	{r4, pc}

080084dc <memmove>:
 80084dc:	4288      	cmp	r0, r1
 80084de:	b510      	push	{r4, lr}
 80084e0:	eb01 0402 	add.w	r4, r1, r2
 80084e4:	d902      	bls.n	80084ec <memmove+0x10>
 80084e6:	4284      	cmp	r4, r0
 80084e8:	4623      	mov	r3, r4
 80084ea:	d807      	bhi.n	80084fc <memmove+0x20>
 80084ec:	1e43      	subs	r3, r0, #1
 80084ee:	42a1      	cmp	r1, r4
 80084f0:	d008      	beq.n	8008504 <memmove+0x28>
 80084f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084fa:	e7f8      	b.n	80084ee <memmove+0x12>
 80084fc:	4402      	add	r2, r0
 80084fe:	4601      	mov	r1, r0
 8008500:	428a      	cmp	r2, r1
 8008502:	d100      	bne.n	8008506 <memmove+0x2a>
 8008504:	bd10      	pop	{r4, pc}
 8008506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800850a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800850e:	e7f7      	b.n	8008500 <memmove+0x24>

08008510 <memset>:
 8008510:	4402      	add	r2, r0
 8008512:	4603      	mov	r3, r0
 8008514:	4293      	cmp	r3, r2
 8008516:	d100      	bne.n	800851a <memset+0xa>
 8008518:	4770      	bx	lr
 800851a:	f803 1b01 	strb.w	r1, [r3], #1
 800851e:	e7f9      	b.n	8008514 <memset+0x4>

08008520 <_free_r>:
 8008520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008522:	2900      	cmp	r1, #0
 8008524:	d048      	beq.n	80085b8 <_free_r+0x98>
 8008526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800852a:	9001      	str	r0, [sp, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	f1a1 0404 	sub.w	r4, r1, #4
 8008532:	bfb8      	it	lt
 8008534:	18e4      	addlt	r4, r4, r3
 8008536:	f001 f807 	bl	8009548 <__malloc_lock>
 800853a:	4a20      	ldr	r2, [pc, #128]	; (80085bc <_free_r+0x9c>)
 800853c:	9801      	ldr	r0, [sp, #4]
 800853e:	6813      	ldr	r3, [r2, #0]
 8008540:	4615      	mov	r5, r2
 8008542:	b933      	cbnz	r3, 8008552 <_free_r+0x32>
 8008544:	6063      	str	r3, [r4, #4]
 8008546:	6014      	str	r4, [r2, #0]
 8008548:	b003      	add	sp, #12
 800854a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800854e:	f001 b801 	b.w	8009554 <__malloc_unlock>
 8008552:	42a3      	cmp	r3, r4
 8008554:	d90b      	bls.n	800856e <_free_r+0x4e>
 8008556:	6821      	ldr	r1, [r4, #0]
 8008558:	1862      	adds	r2, r4, r1
 800855a:	4293      	cmp	r3, r2
 800855c:	bf04      	itt	eq
 800855e:	681a      	ldreq	r2, [r3, #0]
 8008560:	685b      	ldreq	r3, [r3, #4]
 8008562:	6063      	str	r3, [r4, #4]
 8008564:	bf04      	itt	eq
 8008566:	1852      	addeq	r2, r2, r1
 8008568:	6022      	streq	r2, [r4, #0]
 800856a:	602c      	str	r4, [r5, #0]
 800856c:	e7ec      	b.n	8008548 <_free_r+0x28>
 800856e:	461a      	mov	r2, r3
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	b10b      	cbz	r3, 8008578 <_free_r+0x58>
 8008574:	42a3      	cmp	r3, r4
 8008576:	d9fa      	bls.n	800856e <_free_r+0x4e>
 8008578:	6811      	ldr	r1, [r2, #0]
 800857a:	1855      	adds	r5, r2, r1
 800857c:	42a5      	cmp	r5, r4
 800857e:	d10b      	bne.n	8008598 <_free_r+0x78>
 8008580:	6824      	ldr	r4, [r4, #0]
 8008582:	4421      	add	r1, r4
 8008584:	1854      	adds	r4, r2, r1
 8008586:	42a3      	cmp	r3, r4
 8008588:	6011      	str	r1, [r2, #0]
 800858a:	d1dd      	bne.n	8008548 <_free_r+0x28>
 800858c:	681c      	ldr	r4, [r3, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	6053      	str	r3, [r2, #4]
 8008592:	4421      	add	r1, r4
 8008594:	6011      	str	r1, [r2, #0]
 8008596:	e7d7      	b.n	8008548 <_free_r+0x28>
 8008598:	d902      	bls.n	80085a0 <_free_r+0x80>
 800859a:	230c      	movs	r3, #12
 800859c:	6003      	str	r3, [r0, #0]
 800859e:	e7d3      	b.n	8008548 <_free_r+0x28>
 80085a0:	6825      	ldr	r5, [r4, #0]
 80085a2:	1961      	adds	r1, r4, r5
 80085a4:	428b      	cmp	r3, r1
 80085a6:	bf04      	itt	eq
 80085a8:	6819      	ldreq	r1, [r3, #0]
 80085aa:	685b      	ldreq	r3, [r3, #4]
 80085ac:	6063      	str	r3, [r4, #4]
 80085ae:	bf04      	itt	eq
 80085b0:	1949      	addeq	r1, r1, r5
 80085b2:	6021      	streq	r1, [r4, #0]
 80085b4:	6054      	str	r4, [r2, #4]
 80085b6:	e7c7      	b.n	8008548 <_free_r+0x28>
 80085b8:	b003      	add	sp, #12
 80085ba:	bd30      	pop	{r4, r5, pc}
 80085bc:	20026024 	.word	0x20026024

080085c0 <_malloc_r>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	1ccd      	adds	r5, r1, #3
 80085c4:	f025 0503 	bic.w	r5, r5, #3
 80085c8:	3508      	adds	r5, #8
 80085ca:	2d0c      	cmp	r5, #12
 80085cc:	bf38      	it	cc
 80085ce:	250c      	movcc	r5, #12
 80085d0:	2d00      	cmp	r5, #0
 80085d2:	4606      	mov	r6, r0
 80085d4:	db01      	blt.n	80085da <_malloc_r+0x1a>
 80085d6:	42a9      	cmp	r1, r5
 80085d8:	d903      	bls.n	80085e2 <_malloc_r+0x22>
 80085da:	230c      	movs	r3, #12
 80085dc:	6033      	str	r3, [r6, #0]
 80085de:	2000      	movs	r0, #0
 80085e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085e2:	f000 ffb1 	bl	8009548 <__malloc_lock>
 80085e6:	4921      	ldr	r1, [pc, #132]	; (800866c <_malloc_r+0xac>)
 80085e8:	680a      	ldr	r2, [r1, #0]
 80085ea:	4614      	mov	r4, r2
 80085ec:	b99c      	cbnz	r4, 8008616 <_malloc_r+0x56>
 80085ee:	4f20      	ldr	r7, [pc, #128]	; (8008670 <_malloc_r+0xb0>)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	b923      	cbnz	r3, 80085fe <_malloc_r+0x3e>
 80085f4:	4621      	mov	r1, r4
 80085f6:	4630      	mov	r0, r6
 80085f8:	f000 fb2a 	bl	8008c50 <_sbrk_r>
 80085fc:	6038      	str	r0, [r7, #0]
 80085fe:	4629      	mov	r1, r5
 8008600:	4630      	mov	r0, r6
 8008602:	f000 fb25 	bl	8008c50 <_sbrk_r>
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	d123      	bne.n	8008652 <_malloc_r+0x92>
 800860a:	230c      	movs	r3, #12
 800860c:	6033      	str	r3, [r6, #0]
 800860e:	4630      	mov	r0, r6
 8008610:	f000 ffa0 	bl	8009554 <__malloc_unlock>
 8008614:	e7e3      	b.n	80085de <_malloc_r+0x1e>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	1b5b      	subs	r3, r3, r5
 800861a:	d417      	bmi.n	800864c <_malloc_r+0x8c>
 800861c:	2b0b      	cmp	r3, #11
 800861e:	d903      	bls.n	8008628 <_malloc_r+0x68>
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	441c      	add	r4, r3
 8008624:	6025      	str	r5, [r4, #0]
 8008626:	e004      	b.n	8008632 <_malloc_r+0x72>
 8008628:	6863      	ldr	r3, [r4, #4]
 800862a:	42a2      	cmp	r2, r4
 800862c:	bf0c      	ite	eq
 800862e:	600b      	streq	r3, [r1, #0]
 8008630:	6053      	strne	r3, [r2, #4]
 8008632:	4630      	mov	r0, r6
 8008634:	f000 ff8e 	bl	8009554 <__malloc_unlock>
 8008638:	f104 000b 	add.w	r0, r4, #11
 800863c:	1d23      	adds	r3, r4, #4
 800863e:	f020 0007 	bic.w	r0, r0, #7
 8008642:	1ac2      	subs	r2, r0, r3
 8008644:	d0cc      	beq.n	80085e0 <_malloc_r+0x20>
 8008646:	1a1b      	subs	r3, r3, r0
 8008648:	50a3      	str	r3, [r4, r2]
 800864a:	e7c9      	b.n	80085e0 <_malloc_r+0x20>
 800864c:	4622      	mov	r2, r4
 800864e:	6864      	ldr	r4, [r4, #4]
 8008650:	e7cc      	b.n	80085ec <_malloc_r+0x2c>
 8008652:	1cc4      	adds	r4, r0, #3
 8008654:	f024 0403 	bic.w	r4, r4, #3
 8008658:	42a0      	cmp	r0, r4
 800865a:	d0e3      	beq.n	8008624 <_malloc_r+0x64>
 800865c:	1a21      	subs	r1, r4, r0
 800865e:	4630      	mov	r0, r6
 8008660:	f000 faf6 	bl	8008c50 <_sbrk_r>
 8008664:	3001      	adds	r0, #1
 8008666:	d1dd      	bne.n	8008624 <_malloc_r+0x64>
 8008668:	e7cf      	b.n	800860a <_malloc_r+0x4a>
 800866a:	bf00      	nop
 800866c:	20026024 	.word	0x20026024
 8008670:	20026028 	.word	0x20026028

08008674 <__sfputc_r>:
 8008674:	6893      	ldr	r3, [r2, #8]
 8008676:	3b01      	subs	r3, #1
 8008678:	2b00      	cmp	r3, #0
 800867a:	b410      	push	{r4}
 800867c:	6093      	str	r3, [r2, #8]
 800867e:	da08      	bge.n	8008692 <__sfputc_r+0x1e>
 8008680:	6994      	ldr	r4, [r2, #24]
 8008682:	42a3      	cmp	r3, r4
 8008684:	db01      	blt.n	800868a <__sfputc_r+0x16>
 8008686:	290a      	cmp	r1, #10
 8008688:	d103      	bne.n	8008692 <__sfputc_r+0x1e>
 800868a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800868e:	f000 bc7d 	b.w	8008f8c <__swbuf_r>
 8008692:	6813      	ldr	r3, [r2, #0]
 8008694:	1c58      	adds	r0, r3, #1
 8008696:	6010      	str	r0, [r2, #0]
 8008698:	7019      	strb	r1, [r3, #0]
 800869a:	4608      	mov	r0, r1
 800869c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <__sfputs_r>:
 80086a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a4:	4606      	mov	r6, r0
 80086a6:	460f      	mov	r7, r1
 80086a8:	4614      	mov	r4, r2
 80086aa:	18d5      	adds	r5, r2, r3
 80086ac:	42ac      	cmp	r4, r5
 80086ae:	d101      	bne.n	80086b4 <__sfputs_r+0x12>
 80086b0:	2000      	movs	r0, #0
 80086b2:	e007      	b.n	80086c4 <__sfputs_r+0x22>
 80086b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b8:	463a      	mov	r2, r7
 80086ba:	4630      	mov	r0, r6
 80086bc:	f7ff ffda 	bl	8008674 <__sfputc_r>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d1f3      	bne.n	80086ac <__sfputs_r+0xa>
 80086c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086c8 <_vfiprintf_r>:
 80086c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086cc:	460d      	mov	r5, r1
 80086ce:	b09d      	sub	sp, #116	; 0x74
 80086d0:	4614      	mov	r4, r2
 80086d2:	4698      	mov	r8, r3
 80086d4:	4606      	mov	r6, r0
 80086d6:	b118      	cbz	r0, 80086e0 <_vfiprintf_r+0x18>
 80086d8:	6983      	ldr	r3, [r0, #24]
 80086da:	b90b      	cbnz	r3, 80086e0 <_vfiprintf_r+0x18>
 80086dc:	f000 fe30 	bl	8009340 <__sinit>
 80086e0:	4b89      	ldr	r3, [pc, #548]	; (8008908 <_vfiprintf_r+0x240>)
 80086e2:	429d      	cmp	r5, r3
 80086e4:	d11b      	bne.n	800871e <_vfiprintf_r+0x56>
 80086e6:	6875      	ldr	r5, [r6, #4]
 80086e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086ea:	07d9      	lsls	r1, r3, #31
 80086ec:	d405      	bmi.n	80086fa <_vfiprintf_r+0x32>
 80086ee:	89ab      	ldrh	r3, [r5, #12]
 80086f0:	059a      	lsls	r2, r3, #22
 80086f2:	d402      	bmi.n	80086fa <_vfiprintf_r+0x32>
 80086f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086f6:	f000 fec1 	bl	800947c <__retarget_lock_acquire_recursive>
 80086fa:	89ab      	ldrh	r3, [r5, #12]
 80086fc:	071b      	lsls	r3, r3, #28
 80086fe:	d501      	bpl.n	8008704 <_vfiprintf_r+0x3c>
 8008700:	692b      	ldr	r3, [r5, #16]
 8008702:	b9eb      	cbnz	r3, 8008740 <_vfiprintf_r+0x78>
 8008704:	4629      	mov	r1, r5
 8008706:	4630      	mov	r0, r6
 8008708:	f000 fc92 	bl	8009030 <__swsetup_r>
 800870c:	b1c0      	cbz	r0, 8008740 <_vfiprintf_r+0x78>
 800870e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008710:	07dc      	lsls	r4, r3, #31
 8008712:	d50e      	bpl.n	8008732 <_vfiprintf_r+0x6a>
 8008714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008718:	b01d      	add	sp, #116	; 0x74
 800871a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871e:	4b7b      	ldr	r3, [pc, #492]	; (800890c <_vfiprintf_r+0x244>)
 8008720:	429d      	cmp	r5, r3
 8008722:	d101      	bne.n	8008728 <_vfiprintf_r+0x60>
 8008724:	68b5      	ldr	r5, [r6, #8]
 8008726:	e7df      	b.n	80086e8 <_vfiprintf_r+0x20>
 8008728:	4b79      	ldr	r3, [pc, #484]	; (8008910 <_vfiprintf_r+0x248>)
 800872a:	429d      	cmp	r5, r3
 800872c:	bf08      	it	eq
 800872e:	68f5      	ldreq	r5, [r6, #12]
 8008730:	e7da      	b.n	80086e8 <_vfiprintf_r+0x20>
 8008732:	89ab      	ldrh	r3, [r5, #12]
 8008734:	0598      	lsls	r0, r3, #22
 8008736:	d4ed      	bmi.n	8008714 <_vfiprintf_r+0x4c>
 8008738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800873a:	f000 fea0 	bl	800947e <__retarget_lock_release_recursive>
 800873e:	e7e9      	b.n	8008714 <_vfiprintf_r+0x4c>
 8008740:	2300      	movs	r3, #0
 8008742:	9309      	str	r3, [sp, #36]	; 0x24
 8008744:	2320      	movs	r3, #32
 8008746:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800874a:	f8cd 800c 	str.w	r8, [sp, #12]
 800874e:	2330      	movs	r3, #48	; 0x30
 8008750:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008914 <_vfiprintf_r+0x24c>
 8008754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008758:	f04f 0901 	mov.w	r9, #1
 800875c:	4623      	mov	r3, r4
 800875e:	469a      	mov	sl, r3
 8008760:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008764:	b10a      	cbz	r2, 800876a <_vfiprintf_r+0xa2>
 8008766:	2a25      	cmp	r2, #37	; 0x25
 8008768:	d1f9      	bne.n	800875e <_vfiprintf_r+0x96>
 800876a:	ebba 0b04 	subs.w	fp, sl, r4
 800876e:	d00b      	beq.n	8008788 <_vfiprintf_r+0xc0>
 8008770:	465b      	mov	r3, fp
 8008772:	4622      	mov	r2, r4
 8008774:	4629      	mov	r1, r5
 8008776:	4630      	mov	r0, r6
 8008778:	f7ff ff93 	bl	80086a2 <__sfputs_r>
 800877c:	3001      	adds	r0, #1
 800877e:	f000 80aa 	beq.w	80088d6 <_vfiprintf_r+0x20e>
 8008782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008784:	445a      	add	r2, fp
 8008786:	9209      	str	r2, [sp, #36]	; 0x24
 8008788:	f89a 3000 	ldrb.w	r3, [sl]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 80a2 	beq.w	80088d6 <_vfiprintf_r+0x20e>
 8008792:	2300      	movs	r3, #0
 8008794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008798:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800879c:	f10a 0a01 	add.w	sl, sl, #1
 80087a0:	9304      	str	r3, [sp, #16]
 80087a2:	9307      	str	r3, [sp, #28]
 80087a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087a8:	931a      	str	r3, [sp, #104]	; 0x68
 80087aa:	4654      	mov	r4, sl
 80087ac:	2205      	movs	r2, #5
 80087ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b2:	4858      	ldr	r0, [pc, #352]	; (8008914 <_vfiprintf_r+0x24c>)
 80087b4:	f7f7 fd34 	bl	8000220 <memchr>
 80087b8:	9a04      	ldr	r2, [sp, #16]
 80087ba:	b9d8      	cbnz	r0, 80087f4 <_vfiprintf_r+0x12c>
 80087bc:	06d1      	lsls	r1, r2, #27
 80087be:	bf44      	itt	mi
 80087c0:	2320      	movmi	r3, #32
 80087c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087c6:	0713      	lsls	r3, r2, #28
 80087c8:	bf44      	itt	mi
 80087ca:	232b      	movmi	r3, #43	; 0x2b
 80087cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087d0:	f89a 3000 	ldrb.w	r3, [sl]
 80087d4:	2b2a      	cmp	r3, #42	; 0x2a
 80087d6:	d015      	beq.n	8008804 <_vfiprintf_r+0x13c>
 80087d8:	9a07      	ldr	r2, [sp, #28]
 80087da:	4654      	mov	r4, sl
 80087dc:	2000      	movs	r0, #0
 80087de:	f04f 0c0a 	mov.w	ip, #10
 80087e2:	4621      	mov	r1, r4
 80087e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087e8:	3b30      	subs	r3, #48	; 0x30
 80087ea:	2b09      	cmp	r3, #9
 80087ec:	d94e      	bls.n	800888c <_vfiprintf_r+0x1c4>
 80087ee:	b1b0      	cbz	r0, 800881e <_vfiprintf_r+0x156>
 80087f0:	9207      	str	r2, [sp, #28]
 80087f2:	e014      	b.n	800881e <_vfiprintf_r+0x156>
 80087f4:	eba0 0308 	sub.w	r3, r0, r8
 80087f8:	fa09 f303 	lsl.w	r3, r9, r3
 80087fc:	4313      	orrs	r3, r2
 80087fe:	9304      	str	r3, [sp, #16]
 8008800:	46a2      	mov	sl, r4
 8008802:	e7d2      	b.n	80087aa <_vfiprintf_r+0xe2>
 8008804:	9b03      	ldr	r3, [sp, #12]
 8008806:	1d19      	adds	r1, r3, #4
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	9103      	str	r1, [sp, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	bfbb      	ittet	lt
 8008810:	425b      	neglt	r3, r3
 8008812:	f042 0202 	orrlt.w	r2, r2, #2
 8008816:	9307      	strge	r3, [sp, #28]
 8008818:	9307      	strlt	r3, [sp, #28]
 800881a:	bfb8      	it	lt
 800881c:	9204      	strlt	r2, [sp, #16]
 800881e:	7823      	ldrb	r3, [r4, #0]
 8008820:	2b2e      	cmp	r3, #46	; 0x2e
 8008822:	d10c      	bne.n	800883e <_vfiprintf_r+0x176>
 8008824:	7863      	ldrb	r3, [r4, #1]
 8008826:	2b2a      	cmp	r3, #42	; 0x2a
 8008828:	d135      	bne.n	8008896 <_vfiprintf_r+0x1ce>
 800882a:	9b03      	ldr	r3, [sp, #12]
 800882c:	1d1a      	adds	r2, r3, #4
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	9203      	str	r2, [sp, #12]
 8008832:	2b00      	cmp	r3, #0
 8008834:	bfb8      	it	lt
 8008836:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800883a:	3402      	adds	r4, #2
 800883c:	9305      	str	r3, [sp, #20]
 800883e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008924 <_vfiprintf_r+0x25c>
 8008842:	7821      	ldrb	r1, [r4, #0]
 8008844:	2203      	movs	r2, #3
 8008846:	4650      	mov	r0, sl
 8008848:	f7f7 fcea 	bl	8000220 <memchr>
 800884c:	b140      	cbz	r0, 8008860 <_vfiprintf_r+0x198>
 800884e:	2340      	movs	r3, #64	; 0x40
 8008850:	eba0 000a 	sub.w	r0, r0, sl
 8008854:	fa03 f000 	lsl.w	r0, r3, r0
 8008858:	9b04      	ldr	r3, [sp, #16]
 800885a:	4303      	orrs	r3, r0
 800885c:	3401      	adds	r4, #1
 800885e:	9304      	str	r3, [sp, #16]
 8008860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008864:	482c      	ldr	r0, [pc, #176]	; (8008918 <_vfiprintf_r+0x250>)
 8008866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800886a:	2206      	movs	r2, #6
 800886c:	f7f7 fcd8 	bl	8000220 <memchr>
 8008870:	2800      	cmp	r0, #0
 8008872:	d03f      	beq.n	80088f4 <_vfiprintf_r+0x22c>
 8008874:	4b29      	ldr	r3, [pc, #164]	; (800891c <_vfiprintf_r+0x254>)
 8008876:	bb1b      	cbnz	r3, 80088c0 <_vfiprintf_r+0x1f8>
 8008878:	9b03      	ldr	r3, [sp, #12]
 800887a:	3307      	adds	r3, #7
 800887c:	f023 0307 	bic.w	r3, r3, #7
 8008880:	3308      	adds	r3, #8
 8008882:	9303      	str	r3, [sp, #12]
 8008884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008886:	443b      	add	r3, r7
 8008888:	9309      	str	r3, [sp, #36]	; 0x24
 800888a:	e767      	b.n	800875c <_vfiprintf_r+0x94>
 800888c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008890:	460c      	mov	r4, r1
 8008892:	2001      	movs	r0, #1
 8008894:	e7a5      	b.n	80087e2 <_vfiprintf_r+0x11a>
 8008896:	2300      	movs	r3, #0
 8008898:	3401      	adds	r4, #1
 800889a:	9305      	str	r3, [sp, #20]
 800889c:	4619      	mov	r1, r3
 800889e:	f04f 0c0a 	mov.w	ip, #10
 80088a2:	4620      	mov	r0, r4
 80088a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088a8:	3a30      	subs	r2, #48	; 0x30
 80088aa:	2a09      	cmp	r2, #9
 80088ac:	d903      	bls.n	80088b6 <_vfiprintf_r+0x1ee>
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0c5      	beq.n	800883e <_vfiprintf_r+0x176>
 80088b2:	9105      	str	r1, [sp, #20]
 80088b4:	e7c3      	b.n	800883e <_vfiprintf_r+0x176>
 80088b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80088ba:	4604      	mov	r4, r0
 80088bc:	2301      	movs	r3, #1
 80088be:	e7f0      	b.n	80088a2 <_vfiprintf_r+0x1da>
 80088c0:	ab03      	add	r3, sp, #12
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	462a      	mov	r2, r5
 80088c6:	4b16      	ldr	r3, [pc, #88]	; (8008920 <_vfiprintf_r+0x258>)
 80088c8:	a904      	add	r1, sp, #16
 80088ca:	4630      	mov	r0, r6
 80088cc:	f3af 8000 	nop.w
 80088d0:	4607      	mov	r7, r0
 80088d2:	1c78      	adds	r0, r7, #1
 80088d4:	d1d6      	bne.n	8008884 <_vfiprintf_r+0x1bc>
 80088d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088d8:	07d9      	lsls	r1, r3, #31
 80088da:	d405      	bmi.n	80088e8 <_vfiprintf_r+0x220>
 80088dc:	89ab      	ldrh	r3, [r5, #12]
 80088de:	059a      	lsls	r2, r3, #22
 80088e0:	d402      	bmi.n	80088e8 <_vfiprintf_r+0x220>
 80088e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088e4:	f000 fdcb 	bl	800947e <__retarget_lock_release_recursive>
 80088e8:	89ab      	ldrh	r3, [r5, #12]
 80088ea:	065b      	lsls	r3, r3, #25
 80088ec:	f53f af12 	bmi.w	8008714 <_vfiprintf_r+0x4c>
 80088f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088f2:	e711      	b.n	8008718 <_vfiprintf_r+0x50>
 80088f4:	ab03      	add	r3, sp, #12
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	462a      	mov	r2, r5
 80088fa:	4b09      	ldr	r3, [pc, #36]	; (8008920 <_vfiprintf_r+0x258>)
 80088fc:	a904      	add	r1, sp, #16
 80088fe:	4630      	mov	r0, r6
 8008900:	f000 f880 	bl	8008a04 <_printf_i>
 8008904:	e7e4      	b.n	80088d0 <_vfiprintf_r+0x208>
 8008906:	bf00      	nop
 8008908:	0801b60c 	.word	0x0801b60c
 800890c:	0801b62c 	.word	0x0801b62c
 8008910:	0801b5ec 	.word	0x0801b5ec
 8008914:	0801b440 	.word	0x0801b440
 8008918:	0801b44a 	.word	0x0801b44a
 800891c:	00000000 	.word	0x00000000
 8008920:	080086a3 	.word	0x080086a3
 8008924:	0801b446 	.word	0x0801b446

08008928 <_printf_common>:
 8008928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800892c:	4616      	mov	r6, r2
 800892e:	4699      	mov	r9, r3
 8008930:	688a      	ldr	r2, [r1, #8]
 8008932:	690b      	ldr	r3, [r1, #16]
 8008934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008938:	4293      	cmp	r3, r2
 800893a:	bfb8      	it	lt
 800893c:	4613      	movlt	r3, r2
 800893e:	6033      	str	r3, [r6, #0]
 8008940:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008944:	4607      	mov	r7, r0
 8008946:	460c      	mov	r4, r1
 8008948:	b10a      	cbz	r2, 800894e <_printf_common+0x26>
 800894a:	3301      	adds	r3, #1
 800894c:	6033      	str	r3, [r6, #0]
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	0699      	lsls	r1, r3, #26
 8008952:	bf42      	ittt	mi
 8008954:	6833      	ldrmi	r3, [r6, #0]
 8008956:	3302      	addmi	r3, #2
 8008958:	6033      	strmi	r3, [r6, #0]
 800895a:	6825      	ldr	r5, [r4, #0]
 800895c:	f015 0506 	ands.w	r5, r5, #6
 8008960:	d106      	bne.n	8008970 <_printf_common+0x48>
 8008962:	f104 0a19 	add.w	sl, r4, #25
 8008966:	68e3      	ldr	r3, [r4, #12]
 8008968:	6832      	ldr	r2, [r6, #0]
 800896a:	1a9b      	subs	r3, r3, r2
 800896c:	42ab      	cmp	r3, r5
 800896e:	dc26      	bgt.n	80089be <_printf_common+0x96>
 8008970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008974:	1e13      	subs	r3, r2, #0
 8008976:	6822      	ldr	r2, [r4, #0]
 8008978:	bf18      	it	ne
 800897a:	2301      	movne	r3, #1
 800897c:	0692      	lsls	r2, r2, #26
 800897e:	d42b      	bmi.n	80089d8 <_printf_common+0xb0>
 8008980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008984:	4649      	mov	r1, r9
 8008986:	4638      	mov	r0, r7
 8008988:	47c0      	blx	r8
 800898a:	3001      	adds	r0, #1
 800898c:	d01e      	beq.n	80089cc <_printf_common+0xa4>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	68e5      	ldr	r5, [r4, #12]
 8008992:	6832      	ldr	r2, [r6, #0]
 8008994:	f003 0306 	and.w	r3, r3, #6
 8008998:	2b04      	cmp	r3, #4
 800899a:	bf08      	it	eq
 800899c:	1aad      	subeq	r5, r5, r2
 800899e:	68a3      	ldr	r3, [r4, #8]
 80089a0:	6922      	ldr	r2, [r4, #16]
 80089a2:	bf0c      	ite	eq
 80089a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089a8:	2500      	movne	r5, #0
 80089aa:	4293      	cmp	r3, r2
 80089ac:	bfc4      	itt	gt
 80089ae:	1a9b      	subgt	r3, r3, r2
 80089b0:	18ed      	addgt	r5, r5, r3
 80089b2:	2600      	movs	r6, #0
 80089b4:	341a      	adds	r4, #26
 80089b6:	42b5      	cmp	r5, r6
 80089b8:	d11a      	bne.n	80089f0 <_printf_common+0xc8>
 80089ba:	2000      	movs	r0, #0
 80089bc:	e008      	b.n	80089d0 <_printf_common+0xa8>
 80089be:	2301      	movs	r3, #1
 80089c0:	4652      	mov	r2, sl
 80089c2:	4649      	mov	r1, r9
 80089c4:	4638      	mov	r0, r7
 80089c6:	47c0      	blx	r8
 80089c8:	3001      	adds	r0, #1
 80089ca:	d103      	bne.n	80089d4 <_printf_common+0xac>
 80089cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d4:	3501      	adds	r5, #1
 80089d6:	e7c6      	b.n	8008966 <_printf_common+0x3e>
 80089d8:	18e1      	adds	r1, r4, r3
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	2030      	movs	r0, #48	; 0x30
 80089de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089e2:	4422      	add	r2, r4
 80089e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089ec:	3302      	adds	r3, #2
 80089ee:	e7c7      	b.n	8008980 <_printf_common+0x58>
 80089f0:	2301      	movs	r3, #1
 80089f2:	4622      	mov	r2, r4
 80089f4:	4649      	mov	r1, r9
 80089f6:	4638      	mov	r0, r7
 80089f8:	47c0      	blx	r8
 80089fa:	3001      	adds	r0, #1
 80089fc:	d0e6      	beq.n	80089cc <_printf_common+0xa4>
 80089fe:	3601      	adds	r6, #1
 8008a00:	e7d9      	b.n	80089b6 <_printf_common+0x8e>
	...

08008a04 <_printf_i>:
 8008a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a08:	460c      	mov	r4, r1
 8008a0a:	4691      	mov	r9, r2
 8008a0c:	7e27      	ldrb	r7, [r4, #24]
 8008a0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a10:	2f78      	cmp	r7, #120	; 0x78
 8008a12:	4680      	mov	r8, r0
 8008a14:	469a      	mov	sl, r3
 8008a16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a1a:	d807      	bhi.n	8008a2c <_printf_i+0x28>
 8008a1c:	2f62      	cmp	r7, #98	; 0x62
 8008a1e:	d80a      	bhi.n	8008a36 <_printf_i+0x32>
 8008a20:	2f00      	cmp	r7, #0
 8008a22:	f000 80d8 	beq.w	8008bd6 <_printf_i+0x1d2>
 8008a26:	2f58      	cmp	r7, #88	; 0x58
 8008a28:	f000 80a3 	beq.w	8008b72 <_printf_i+0x16e>
 8008a2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a34:	e03a      	b.n	8008aac <_printf_i+0xa8>
 8008a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a3a:	2b15      	cmp	r3, #21
 8008a3c:	d8f6      	bhi.n	8008a2c <_printf_i+0x28>
 8008a3e:	a001      	add	r0, pc, #4	; (adr r0, 8008a44 <_printf_i+0x40>)
 8008a40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008a44:	08008a9d 	.word	0x08008a9d
 8008a48:	08008ab1 	.word	0x08008ab1
 8008a4c:	08008a2d 	.word	0x08008a2d
 8008a50:	08008a2d 	.word	0x08008a2d
 8008a54:	08008a2d 	.word	0x08008a2d
 8008a58:	08008a2d 	.word	0x08008a2d
 8008a5c:	08008ab1 	.word	0x08008ab1
 8008a60:	08008a2d 	.word	0x08008a2d
 8008a64:	08008a2d 	.word	0x08008a2d
 8008a68:	08008a2d 	.word	0x08008a2d
 8008a6c:	08008a2d 	.word	0x08008a2d
 8008a70:	08008bbd 	.word	0x08008bbd
 8008a74:	08008ae1 	.word	0x08008ae1
 8008a78:	08008b9f 	.word	0x08008b9f
 8008a7c:	08008a2d 	.word	0x08008a2d
 8008a80:	08008a2d 	.word	0x08008a2d
 8008a84:	08008bdf 	.word	0x08008bdf
 8008a88:	08008a2d 	.word	0x08008a2d
 8008a8c:	08008ae1 	.word	0x08008ae1
 8008a90:	08008a2d 	.word	0x08008a2d
 8008a94:	08008a2d 	.word	0x08008a2d
 8008a98:	08008ba7 	.word	0x08008ba7
 8008a9c:	680b      	ldr	r3, [r1, #0]
 8008a9e:	1d1a      	adds	r2, r3, #4
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	600a      	str	r2, [r1, #0]
 8008aa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008aac:	2301      	movs	r3, #1
 8008aae:	e0a3      	b.n	8008bf8 <_printf_i+0x1f4>
 8008ab0:	6825      	ldr	r5, [r4, #0]
 8008ab2:	6808      	ldr	r0, [r1, #0]
 8008ab4:	062e      	lsls	r6, r5, #24
 8008ab6:	f100 0304 	add.w	r3, r0, #4
 8008aba:	d50a      	bpl.n	8008ad2 <_printf_i+0xce>
 8008abc:	6805      	ldr	r5, [r0, #0]
 8008abe:	600b      	str	r3, [r1, #0]
 8008ac0:	2d00      	cmp	r5, #0
 8008ac2:	da03      	bge.n	8008acc <_printf_i+0xc8>
 8008ac4:	232d      	movs	r3, #45	; 0x2d
 8008ac6:	426d      	negs	r5, r5
 8008ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008acc:	485e      	ldr	r0, [pc, #376]	; (8008c48 <_printf_i+0x244>)
 8008ace:	230a      	movs	r3, #10
 8008ad0:	e019      	b.n	8008b06 <_printf_i+0x102>
 8008ad2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008ad6:	6805      	ldr	r5, [r0, #0]
 8008ad8:	600b      	str	r3, [r1, #0]
 8008ada:	bf18      	it	ne
 8008adc:	b22d      	sxthne	r5, r5
 8008ade:	e7ef      	b.n	8008ac0 <_printf_i+0xbc>
 8008ae0:	680b      	ldr	r3, [r1, #0]
 8008ae2:	6825      	ldr	r5, [r4, #0]
 8008ae4:	1d18      	adds	r0, r3, #4
 8008ae6:	6008      	str	r0, [r1, #0]
 8008ae8:	0628      	lsls	r0, r5, #24
 8008aea:	d501      	bpl.n	8008af0 <_printf_i+0xec>
 8008aec:	681d      	ldr	r5, [r3, #0]
 8008aee:	e002      	b.n	8008af6 <_printf_i+0xf2>
 8008af0:	0669      	lsls	r1, r5, #25
 8008af2:	d5fb      	bpl.n	8008aec <_printf_i+0xe8>
 8008af4:	881d      	ldrh	r5, [r3, #0]
 8008af6:	4854      	ldr	r0, [pc, #336]	; (8008c48 <_printf_i+0x244>)
 8008af8:	2f6f      	cmp	r7, #111	; 0x6f
 8008afa:	bf0c      	ite	eq
 8008afc:	2308      	moveq	r3, #8
 8008afe:	230a      	movne	r3, #10
 8008b00:	2100      	movs	r1, #0
 8008b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b06:	6866      	ldr	r6, [r4, #4]
 8008b08:	60a6      	str	r6, [r4, #8]
 8008b0a:	2e00      	cmp	r6, #0
 8008b0c:	bfa2      	ittt	ge
 8008b0e:	6821      	ldrge	r1, [r4, #0]
 8008b10:	f021 0104 	bicge.w	r1, r1, #4
 8008b14:	6021      	strge	r1, [r4, #0]
 8008b16:	b90d      	cbnz	r5, 8008b1c <_printf_i+0x118>
 8008b18:	2e00      	cmp	r6, #0
 8008b1a:	d04d      	beq.n	8008bb8 <_printf_i+0x1b4>
 8008b1c:	4616      	mov	r6, r2
 8008b1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b22:	fb03 5711 	mls	r7, r3, r1, r5
 8008b26:	5dc7      	ldrb	r7, [r0, r7]
 8008b28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b2c:	462f      	mov	r7, r5
 8008b2e:	42bb      	cmp	r3, r7
 8008b30:	460d      	mov	r5, r1
 8008b32:	d9f4      	bls.n	8008b1e <_printf_i+0x11a>
 8008b34:	2b08      	cmp	r3, #8
 8008b36:	d10b      	bne.n	8008b50 <_printf_i+0x14c>
 8008b38:	6823      	ldr	r3, [r4, #0]
 8008b3a:	07df      	lsls	r7, r3, #31
 8008b3c:	d508      	bpl.n	8008b50 <_printf_i+0x14c>
 8008b3e:	6923      	ldr	r3, [r4, #16]
 8008b40:	6861      	ldr	r1, [r4, #4]
 8008b42:	4299      	cmp	r1, r3
 8008b44:	bfde      	ittt	le
 8008b46:	2330      	movle	r3, #48	; 0x30
 8008b48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b4c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008b50:	1b92      	subs	r2, r2, r6
 8008b52:	6122      	str	r2, [r4, #16]
 8008b54:	f8cd a000 	str.w	sl, [sp]
 8008b58:	464b      	mov	r3, r9
 8008b5a:	aa03      	add	r2, sp, #12
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	4640      	mov	r0, r8
 8008b60:	f7ff fee2 	bl	8008928 <_printf_common>
 8008b64:	3001      	adds	r0, #1
 8008b66:	d14c      	bne.n	8008c02 <_printf_i+0x1fe>
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b6c:	b004      	add	sp, #16
 8008b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b72:	4835      	ldr	r0, [pc, #212]	; (8008c48 <_printf_i+0x244>)
 8008b74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	680e      	ldr	r6, [r1, #0]
 8008b7c:	061f      	lsls	r7, r3, #24
 8008b7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008b82:	600e      	str	r6, [r1, #0]
 8008b84:	d514      	bpl.n	8008bb0 <_printf_i+0x1ac>
 8008b86:	07d9      	lsls	r1, r3, #31
 8008b88:	bf44      	itt	mi
 8008b8a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b8e:	6023      	strmi	r3, [r4, #0]
 8008b90:	b91d      	cbnz	r5, 8008b9a <_printf_i+0x196>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	f023 0320 	bic.w	r3, r3, #32
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	2310      	movs	r3, #16
 8008b9c:	e7b0      	b.n	8008b00 <_printf_i+0xfc>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	f043 0320 	orr.w	r3, r3, #32
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	2378      	movs	r3, #120	; 0x78
 8008ba8:	4828      	ldr	r0, [pc, #160]	; (8008c4c <_printf_i+0x248>)
 8008baa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bae:	e7e3      	b.n	8008b78 <_printf_i+0x174>
 8008bb0:	065e      	lsls	r6, r3, #25
 8008bb2:	bf48      	it	mi
 8008bb4:	b2ad      	uxthmi	r5, r5
 8008bb6:	e7e6      	b.n	8008b86 <_printf_i+0x182>
 8008bb8:	4616      	mov	r6, r2
 8008bba:	e7bb      	b.n	8008b34 <_printf_i+0x130>
 8008bbc:	680b      	ldr	r3, [r1, #0]
 8008bbe:	6826      	ldr	r6, [r4, #0]
 8008bc0:	6960      	ldr	r0, [r4, #20]
 8008bc2:	1d1d      	adds	r5, r3, #4
 8008bc4:	600d      	str	r5, [r1, #0]
 8008bc6:	0635      	lsls	r5, r6, #24
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	d501      	bpl.n	8008bd0 <_printf_i+0x1cc>
 8008bcc:	6018      	str	r0, [r3, #0]
 8008bce:	e002      	b.n	8008bd6 <_printf_i+0x1d2>
 8008bd0:	0671      	lsls	r1, r6, #25
 8008bd2:	d5fb      	bpl.n	8008bcc <_printf_i+0x1c8>
 8008bd4:	8018      	strh	r0, [r3, #0]
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	6123      	str	r3, [r4, #16]
 8008bda:	4616      	mov	r6, r2
 8008bdc:	e7ba      	b.n	8008b54 <_printf_i+0x150>
 8008bde:	680b      	ldr	r3, [r1, #0]
 8008be0:	1d1a      	adds	r2, r3, #4
 8008be2:	600a      	str	r2, [r1, #0]
 8008be4:	681e      	ldr	r6, [r3, #0]
 8008be6:	6862      	ldr	r2, [r4, #4]
 8008be8:	2100      	movs	r1, #0
 8008bea:	4630      	mov	r0, r6
 8008bec:	f7f7 fb18 	bl	8000220 <memchr>
 8008bf0:	b108      	cbz	r0, 8008bf6 <_printf_i+0x1f2>
 8008bf2:	1b80      	subs	r0, r0, r6
 8008bf4:	6060      	str	r0, [r4, #4]
 8008bf6:	6863      	ldr	r3, [r4, #4]
 8008bf8:	6123      	str	r3, [r4, #16]
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c00:	e7a8      	b.n	8008b54 <_printf_i+0x150>
 8008c02:	6923      	ldr	r3, [r4, #16]
 8008c04:	4632      	mov	r2, r6
 8008c06:	4649      	mov	r1, r9
 8008c08:	4640      	mov	r0, r8
 8008c0a:	47d0      	blx	sl
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d0ab      	beq.n	8008b68 <_printf_i+0x164>
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	079b      	lsls	r3, r3, #30
 8008c14:	d413      	bmi.n	8008c3e <_printf_i+0x23a>
 8008c16:	68e0      	ldr	r0, [r4, #12]
 8008c18:	9b03      	ldr	r3, [sp, #12]
 8008c1a:	4298      	cmp	r0, r3
 8008c1c:	bfb8      	it	lt
 8008c1e:	4618      	movlt	r0, r3
 8008c20:	e7a4      	b.n	8008b6c <_printf_i+0x168>
 8008c22:	2301      	movs	r3, #1
 8008c24:	4632      	mov	r2, r6
 8008c26:	4649      	mov	r1, r9
 8008c28:	4640      	mov	r0, r8
 8008c2a:	47d0      	blx	sl
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d09b      	beq.n	8008b68 <_printf_i+0x164>
 8008c30:	3501      	adds	r5, #1
 8008c32:	68e3      	ldr	r3, [r4, #12]
 8008c34:	9903      	ldr	r1, [sp, #12]
 8008c36:	1a5b      	subs	r3, r3, r1
 8008c38:	42ab      	cmp	r3, r5
 8008c3a:	dcf2      	bgt.n	8008c22 <_printf_i+0x21e>
 8008c3c:	e7eb      	b.n	8008c16 <_printf_i+0x212>
 8008c3e:	2500      	movs	r5, #0
 8008c40:	f104 0619 	add.w	r6, r4, #25
 8008c44:	e7f5      	b.n	8008c32 <_printf_i+0x22e>
 8008c46:	bf00      	nop
 8008c48:	0801b451 	.word	0x0801b451
 8008c4c:	0801b462 	.word	0x0801b462

08008c50 <_sbrk_r>:
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	4d06      	ldr	r5, [pc, #24]	; (8008c6c <_sbrk_r+0x1c>)
 8008c54:	2300      	movs	r3, #0
 8008c56:	4604      	mov	r4, r0
 8008c58:	4608      	mov	r0, r1
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	f7f8 fe88 	bl	8001970 <_sbrk>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	d102      	bne.n	8008c6a <_sbrk_r+0x1a>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	b103      	cbz	r3, 8008c6a <_sbrk_r+0x1a>
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
 8008c6c:	20026300 	.word	0x20026300

08008c70 <_raise_r>:
 8008c70:	291f      	cmp	r1, #31
 8008c72:	b538      	push	{r3, r4, r5, lr}
 8008c74:	4604      	mov	r4, r0
 8008c76:	460d      	mov	r5, r1
 8008c78:	d904      	bls.n	8008c84 <_raise_r+0x14>
 8008c7a:	2316      	movs	r3, #22
 8008c7c:	6003      	str	r3, [r0, #0]
 8008c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c86:	b112      	cbz	r2, 8008c8e <_raise_r+0x1e>
 8008c88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c8c:	b94b      	cbnz	r3, 8008ca2 <_raise_r+0x32>
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f000 f830 	bl	8008cf4 <_getpid_r>
 8008c94:	462a      	mov	r2, r5
 8008c96:	4601      	mov	r1, r0
 8008c98:	4620      	mov	r0, r4
 8008c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c9e:	f000 b817 	b.w	8008cd0 <_kill_r>
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d00a      	beq.n	8008cbc <_raise_r+0x4c>
 8008ca6:	1c59      	adds	r1, r3, #1
 8008ca8:	d103      	bne.n	8008cb2 <_raise_r+0x42>
 8008caa:	2316      	movs	r3, #22
 8008cac:	6003      	str	r3, [r0, #0]
 8008cae:	2001      	movs	r0, #1
 8008cb0:	e7e7      	b.n	8008c82 <_raise_r+0x12>
 8008cb2:	2400      	movs	r4, #0
 8008cb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cb8:	4628      	mov	r0, r5
 8008cba:	4798      	blx	r3
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	e7e0      	b.n	8008c82 <_raise_r+0x12>

08008cc0 <raise>:
 8008cc0:	4b02      	ldr	r3, [pc, #8]	; (8008ccc <raise+0xc>)
 8008cc2:	4601      	mov	r1, r0
 8008cc4:	6818      	ldr	r0, [r3, #0]
 8008cc6:	f7ff bfd3 	b.w	8008c70 <_raise_r>
 8008cca:	bf00      	nop
 8008ccc:	200003b4 	.word	0x200003b4

08008cd0 <_kill_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	4d07      	ldr	r5, [pc, #28]	; (8008cf0 <_kill_r+0x20>)
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	4608      	mov	r0, r1
 8008cda:	4611      	mov	r1, r2
 8008cdc:	602b      	str	r3, [r5, #0]
 8008cde:	f7f8 fdbf 	bl	8001860 <_kill>
 8008ce2:	1c43      	adds	r3, r0, #1
 8008ce4:	d102      	bne.n	8008cec <_kill_r+0x1c>
 8008ce6:	682b      	ldr	r3, [r5, #0]
 8008ce8:	b103      	cbz	r3, 8008cec <_kill_r+0x1c>
 8008cea:	6023      	str	r3, [r4, #0]
 8008cec:	bd38      	pop	{r3, r4, r5, pc}
 8008cee:	bf00      	nop
 8008cf0:	20026300 	.word	0x20026300

08008cf4 <_getpid_r>:
 8008cf4:	f7f8 bdac 	b.w	8001850 <_getpid>

08008cf8 <siprintf>:
 8008cf8:	b40e      	push	{r1, r2, r3}
 8008cfa:	b500      	push	{lr}
 8008cfc:	b09c      	sub	sp, #112	; 0x70
 8008cfe:	ab1d      	add	r3, sp, #116	; 0x74
 8008d00:	9002      	str	r0, [sp, #8]
 8008d02:	9006      	str	r0, [sp, #24]
 8008d04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d08:	4809      	ldr	r0, [pc, #36]	; (8008d30 <siprintf+0x38>)
 8008d0a:	9107      	str	r1, [sp, #28]
 8008d0c:	9104      	str	r1, [sp, #16]
 8008d0e:	4909      	ldr	r1, [pc, #36]	; (8008d34 <siprintf+0x3c>)
 8008d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d14:	9105      	str	r1, [sp, #20]
 8008d16:	6800      	ldr	r0, [r0, #0]
 8008d18:	9301      	str	r3, [sp, #4]
 8008d1a:	a902      	add	r1, sp, #8
 8008d1c:	f000 fca2 	bl	8009664 <_svfiprintf_r>
 8008d20:	9b02      	ldr	r3, [sp, #8]
 8008d22:	2200      	movs	r2, #0
 8008d24:	701a      	strb	r2, [r3, #0]
 8008d26:	b01c      	add	sp, #112	; 0x70
 8008d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d2c:	b003      	add	sp, #12
 8008d2e:	4770      	bx	lr
 8008d30:	200003b4 	.word	0x200003b4
 8008d34:	ffff0208 	.word	0xffff0208

08008d38 <strcpy>:
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d3e:	f803 2b01 	strb.w	r2, [r3], #1
 8008d42:	2a00      	cmp	r2, #0
 8008d44:	d1f9      	bne.n	8008d3a <strcpy+0x2>
 8008d46:	4770      	bx	lr

08008d48 <strncmp>:
 8008d48:	b510      	push	{r4, lr}
 8008d4a:	b16a      	cbz	r2, 8008d68 <strncmp+0x20>
 8008d4c:	3901      	subs	r1, #1
 8008d4e:	1884      	adds	r4, r0, r2
 8008d50:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008d54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d103      	bne.n	8008d64 <strncmp+0x1c>
 8008d5c:	42a0      	cmp	r0, r4
 8008d5e:	d001      	beq.n	8008d64 <strncmp+0x1c>
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1f5      	bne.n	8008d50 <strncmp+0x8>
 8008d64:	1a98      	subs	r0, r3, r2
 8008d66:	bd10      	pop	{r4, pc}
 8008d68:	4610      	mov	r0, r2
 8008d6a:	e7fc      	b.n	8008d66 <strncmp+0x1e>

08008d6c <strncpy>:
 8008d6c:	b510      	push	{r4, lr}
 8008d6e:	3901      	subs	r1, #1
 8008d70:	4603      	mov	r3, r0
 8008d72:	b132      	cbz	r2, 8008d82 <strncpy+0x16>
 8008d74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008d78:	f803 4b01 	strb.w	r4, [r3], #1
 8008d7c:	3a01      	subs	r2, #1
 8008d7e:	2c00      	cmp	r4, #0
 8008d80:	d1f7      	bne.n	8008d72 <strncpy+0x6>
 8008d82:	441a      	add	r2, r3
 8008d84:	2100      	movs	r1, #0
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d100      	bne.n	8008d8c <strncpy+0x20>
 8008d8a:	bd10      	pop	{r4, pc}
 8008d8c:	f803 1b01 	strb.w	r1, [r3], #1
 8008d90:	e7f9      	b.n	8008d86 <strncpy+0x1a>
	...

08008d94 <strtok>:
 8008d94:	4b16      	ldr	r3, [pc, #88]	; (8008df0 <strtok+0x5c>)
 8008d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d98:	681e      	ldr	r6, [r3, #0]
 8008d9a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	b9fc      	cbnz	r4, 8008de0 <strtok+0x4c>
 8008da0:	2050      	movs	r0, #80	; 0x50
 8008da2:	9101      	str	r1, [sp, #4]
 8008da4:	f7ff fb84 	bl	80084b0 <malloc>
 8008da8:	9901      	ldr	r1, [sp, #4]
 8008daa:	65b0      	str	r0, [r6, #88]	; 0x58
 8008dac:	4602      	mov	r2, r0
 8008dae:	b920      	cbnz	r0, 8008dba <strtok+0x26>
 8008db0:	4b10      	ldr	r3, [pc, #64]	; (8008df4 <strtok+0x60>)
 8008db2:	4811      	ldr	r0, [pc, #68]	; (8008df8 <strtok+0x64>)
 8008db4:	2157      	movs	r1, #87	; 0x57
 8008db6:	f7ff fb21 	bl	80083fc <__assert_func>
 8008dba:	e9c0 4400 	strd	r4, r4, [r0]
 8008dbe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008dc2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008dc6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008dca:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008dce:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008dd2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008dd6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008dda:	6184      	str	r4, [r0, #24]
 8008ddc:	7704      	strb	r4, [r0, #28]
 8008dde:	6244      	str	r4, [r0, #36]	; 0x24
 8008de0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008de2:	2301      	movs	r3, #1
 8008de4:	4628      	mov	r0, r5
 8008de6:	b002      	add	sp, #8
 8008de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008dec:	f000 b806 	b.w	8008dfc <__strtok_r>
 8008df0:	200003b4 	.word	0x200003b4
 8008df4:	0801b473 	.word	0x0801b473
 8008df8:	0801b48a 	.word	0x0801b48a

08008dfc <__strtok_r>:
 8008dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dfe:	b908      	cbnz	r0, 8008e04 <__strtok_r+0x8>
 8008e00:	6810      	ldr	r0, [r2, #0]
 8008e02:	b188      	cbz	r0, 8008e28 <__strtok_r+0x2c>
 8008e04:	4604      	mov	r4, r0
 8008e06:	4620      	mov	r0, r4
 8008e08:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008e0c:	460f      	mov	r7, r1
 8008e0e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008e12:	b91e      	cbnz	r6, 8008e1c <__strtok_r+0x20>
 8008e14:	b965      	cbnz	r5, 8008e30 <__strtok_r+0x34>
 8008e16:	6015      	str	r5, [r2, #0]
 8008e18:	4628      	mov	r0, r5
 8008e1a:	e005      	b.n	8008e28 <__strtok_r+0x2c>
 8008e1c:	42b5      	cmp	r5, r6
 8008e1e:	d1f6      	bne.n	8008e0e <__strtok_r+0x12>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1f0      	bne.n	8008e06 <__strtok_r+0xa>
 8008e24:	6014      	str	r4, [r2, #0]
 8008e26:	7003      	strb	r3, [r0, #0]
 8008e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e2a:	461c      	mov	r4, r3
 8008e2c:	e00c      	b.n	8008e48 <__strtok_r+0x4c>
 8008e2e:	b915      	cbnz	r5, 8008e36 <__strtok_r+0x3a>
 8008e30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e34:	460e      	mov	r6, r1
 8008e36:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008e3a:	42ab      	cmp	r3, r5
 8008e3c:	d1f7      	bne.n	8008e2e <__strtok_r+0x32>
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0f3      	beq.n	8008e2a <__strtok_r+0x2e>
 8008e42:	2300      	movs	r3, #0
 8008e44:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008e48:	6014      	str	r4, [r2, #0]
 8008e4a:	e7ed      	b.n	8008e28 <__strtok_r+0x2c>

08008e4c <_strtoll_l.isra.0>:
 8008e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e50:	b087      	sub	sp, #28
 8008e52:	4691      	mov	r9, r2
 8008e54:	4a47      	ldr	r2, [pc, #284]	; (8008f74 <_strtoll_l.isra.0+0x128>)
 8008e56:	9005      	str	r0, [sp, #20]
 8008e58:	4688      	mov	r8, r1
 8008e5a:	461f      	mov	r7, r3
 8008e5c:	460d      	mov	r5, r1
 8008e5e:	462b      	mov	r3, r5
 8008e60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e64:	5ca6      	ldrb	r6, [r4, r2]
 8008e66:	f016 0608 	ands.w	r6, r6, #8
 8008e6a:	d1f8      	bne.n	8008e5e <_strtoll_l.isra.0+0x12>
 8008e6c:	2c2d      	cmp	r4, #45	; 0x2d
 8008e6e:	d147      	bne.n	8008f00 <_strtoll_l.isra.0+0xb4>
 8008e70:	782c      	ldrb	r4, [r5, #0]
 8008e72:	2601      	movs	r6, #1
 8008e74:	1c9d      	adds	r5, r3, #2
 8008e76:	2f00      	cmp	r7, #0
 8008e78:	d077      	beq.n	8008f6a <_strtoll_l.isra.0+0x11e>
 8008e7a:	2f10      	cmp	r7, #16
 8008e7c:	d109      	bne.n	8008e92 <_strtoll_l.isra.0+0x46>
 8008e7e:	2c30      	cmp	r4, #48	; 0x30
 8008e80:	d107      	bne.n	8008e92 <_strtoll_l.isra.0+0x46>
 8008e82:	782b      	ldrb	r3, [r5, #0]
 8008e84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e88:	2b58      	cmp	r3, #88	; 0x58
 8008e8a:	d169      	bne.n	8008f60 <_strtoll_l.isra.0+0x114>
 8008e8c:	786c      	ldrb	r4, [r5, #1]
 8008e8e:	2710      	movs	r7, #16
 8008e90:	3502      	adds	r5, #2
 8008e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e96:	1990      	adds	r0, r2, r6
 8008e98:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008e9c:	ea4f 7be7 	mov.w	fp, r7, asr #31
 8008ea0:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 8008ea4:	463a      	mov	r2, r7
 8008ea6:	465b      	mov	r3, fp
 8008ea8:	e9cd 0100 	strd	r0, r1, [sp]
 8008eac:	f7f7 fa10 	bl	80002d0 <__aeabi_uldivmod>
 8008eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb4:	46ba      	mov	sl, r7
 8008eb6:	4696      	mov	lr, r2
 8008eb8:	2300      	movs	r3, #0
 8008eba:	2000      	movs	r0, #0
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008ec2:	f1bc 0f09 	cmp.w	ip, #9
 8008ec6:	d820      	bhi.n	8008f0a <_strtoll_l.isra.0+0xbe>
 8008ec8:	4664      	mov	r4, ip
 8008eca:	42a7      	cmp	r7, r4
 8008ecc:	dd2e      	ble.n	8008f2c <_strtoll_l.isra.0+0xe0>
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	d013      	beq.n	8008efa <_strtoll_l.isra.0+0xae>
 8008ed2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ed6:	428b      	cmp	r3, r1
 8008ed8:	bf08      	it	eq
 8008eda:	4282      	cmpeq	r2, r0
 8008edc:	d323      	bcc.n	8008f26 <_strtoll_l.isra.0+0xda>
 8008ede:	d101      	bne.n	8008ee4 <_strtoll_l.isra.0+0x98>
 8008ee0:	45a6      	cmp	lr, r4
 8008ee2:	db20      	blt.n	8008f26 <_strtoll_l.isra.0+0xda>
 8008ee4:	fb0a f301 	mul.w	r3, sl, r1
 8008ee8:	fb00 330b 	mla	r3, r0, fp, r3
 8008eec:	fbaa 0100 	umull	r0, r1, sl, r0
 8008ef0:	4419      	add	r1, r3
 8008ef2:	1900      	adds	r0, r0, r4
 8008ef4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8008ef8:	2301      	movs	r3, #1
 8008efa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008efe:	e7de      	b.n	8008ebe <_strtoll_l.isra.0+0x72>
 8008f00:	2c2b      	cmp	r4, #43	; 0x2b
 8008f02:	bf04      	itt	eq
 8008f04:	782c      	ldrbeq	r4, [r5, #0]
 8008f06:	1c9d      	addeq	r5, r3, #2
 8008f08:	e7b5      	b.n	8008e76 <_strtoll_l.isra.0+0x2a>
 8008f0a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008f0e:	f1bc 0f19 	cmp.w	ip, #25
 8008f12:	d801      	bhi.n	8008f18 <_strtoll_l.isra.0+0xcc>
 8008f14:	3c37      	subs	r4, #55	; 0x37
 8008f16:	e7d8      	b.n	8008eca <_strtoll_l.isra.0+0x7e>
 8008f18:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008f1c:	f1bc 0f19 	cmp.w	ip, #25
 8008f20:	d804      	bhi.n	8008f2c <_strtoll_l.isra.0+0xe0>
 8008f22:	3c57      	subs	r4, #87	; 0x57
 8008f24:	e7d1      	b.n	8008eca <_strtoll_l.isra.0+0x7e>
 8008f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f2a:	e7e6      	b.n	8008efa <_strtoll_l.isra.0+0xae>
 8008f2c:	1c5a      	adds	r2, r3, #1
 8008f2e:	d10a      	bne.n	8008f46 <_strtoll_l.isra.0+0xfa>
 8008f30:	9a05      	ldr	r2, [sp, #20]
 8008f32:	2322      	movs	r3, #34	; 0x22
 8008f34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	f1b9 0f00 	cmp.w	r9, #0
 8008f3e:	d10a      	bne.n	8008f56 <_strtoll_l.isra.0+0x10a>
 8008f40:	b007      	add	sp, #28
 8008f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f46:	b116      	cbz	r6, 8008f4e <_strtoll_l.isra.0+0x102>
 8008f48:	4240      	negs	r0, r0
 8008f4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008f4e:	f1b9 0f00 	cmp.w	r9, #0
 8008f52:	d0f5      	beq.n	8008f40 <_strtoll_l.isra.0+0xf4>
 8008f54:	b10b      	cbz	r3, 8008f5a <_strtoll_l.isra.0+0x10e>
 8008f56:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8008f5a:	f8c9 8000 	str.w	r8, [r9]
 8008f5e:	e7ef      	b.n	8008f40 <_strtoll_l.isra.0+0xf4>
 8008f60:	2430      	movs	r4, #48	; 0x30
 8008f62:	2f00      	cmp	r7, #0
 8008f64:	d195      	bne.n	8008e92 <_strtoll_l.isra.0+0x46>
 8008f66:	2708      	movs	r7, #8
 8008f68:	e793      	b.n	8008e92 <_strtoll_l.isra.0+0x46>
 8008f6a:	2c30      	cmp	r4, #48	; 0x30
 8008f6c:	d089      	beq.n	8008e82 <_strtoll_l.isra.0+0x36>
 8008f6e:	270a      	movs	r7, #10
 8008f70:	e78f      	b.n	8008e92 <_strtoll_l.isra.0+0x46>
 8008f72:	bf00      	nop
 8008f74:	0801b4ec 	.word	0x0801b4ec

08008f78 <strtoll>:
 8008f78:	4613      	mov	r3, r2
 8008f7a:	460a      	mov	r2, r1
 8008f7c:	4601      	mov	r1, r0
 8008f7e:	4802      	ldr	r0, [pc, #8]	; (8008f88 <strtoll+0x10>)
 8008f80:	6800      	ldr	r0, [r0, #0]
 8008f82:	f7ff bf63 	b.w	8008e4c <_strtoll_l.isra.0>
 8008f86:	bf00      	nop
 8008f88:	200003b4 	.word	0x200003b4

08008f8c <__swbuf_r>:
 8008f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8e:	460e      	mov	r6, r1
 8008f90:	4614      	mov	r4, r2
 8008f92:	4605      	mov	r5, r0
 8008f94:	b118      	cbz	r0, 8008f9e <__swbuf_r+0x12>
 8008f96:	6983      	ldr	r3, [r0, #24]
 8008f98:	b90b      	cbnz	r3, 8008f9e <__swbuf_r+0x12>
 8008f9a:	f000 f9d1 	bl	8009340 <__sinit>
 8008f9e:	4b21      	ldr	r3, [pc, #132]	; (8009024 <__swbuf_r+0x98>)
 8008fa0:	429c      	cmp	r4, r3
 8008fa2:	d12b      	bne.n	8008ffc <__swbuf_r+0x70>
 8008fa4:	686c      	ldr	r4, [r5, #4]
 8008fa6:	69a3      	ldr	r3, [r4, #24]
 8008fa8:	60a3      	str	r3, [r4, #8]
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	071a      	lsls	r2, r3, #28
 8008fae:	d52f      	bpl.n	8009010 <__swbuf_r+0x84>
 8008fb0:	6923      	ldr	r3, [r4, #16]
 8008fb2:	b36b      	cbz	r3, 8009010 <__swbuf_r+0x84>
 8008fb4:	6923      	ldr	r3, [r4, #16]
 8008fb6:	6820      	ldr	r0, [r4, #0]
 8008fb8:	1ac0      	subs	r0, r0, r3
 8008fba:	6963      	ldr	r3, [r4, #20]
 8008fbc:	b2f6      	uxtb	r6, r6
 8008fbe:	4283      	cmp	r3, r0
 8008fc0:	4637      	mov	r7, r6
 8008fc2:	dc04      	bgt.n	8008fce <__swbuf_r+0x42>
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f000 f926 	bl	8009218 <_fflush_r>
 8008fcc:	bb30      	cbnz	r0, 800901c <__swbuf_r+0x90>
 8008fce:	68a3      	ldr	r3, [r4, #8]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	60a3      	str	r3, [r4, #8]
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	6022      	str	r2, [r4, #0]
 8008fda:	701e      	strb	r6, [r3, #0]
 8008fdc:	6963      	ldr	r3, [r4, #20]
 8008fde:	3001      	adds	r0, #1
 8008fe0:	4283      	cmp	r3, r0
 8008fe2:	d004      	beq.n	8008fee <__swbuf_r+0x62>
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	07db      	lsls	r3, r3, #31
 8008fe8:	d506      	bpl.n	8008ff8 <__swbuf_r+0x6c>
 8008fea:	2e0a      	cmp	r6, #10
 8008fec:	d104      	bne.n	8008ff8 <__swbuf_r+0x6c>
 8008fee:	4621      	mov	r1, r4
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f000 f911 	bl	8009218 <_fflush_r>
 8008ff6:	b988      	cbnz	r0, 800901c <__swbuf_r+0x90>
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ffc:	4b0a      	ldr	r3, [pc, #40]	; (8009028 <__swbuf_r+0x9c>)
 8008ffe:	429c      	cmp	r4, r3
 8009000:	d101      	bne.n	8009006 <__swbuf_r+0x7a>
 8009002:	68ac      	ldr	r4, [r5, #8]
 8009004:	e7cf      	b.n	8008fa6 <__swbuf_r+0x1a>
 8009006:	4b09      	ldr	r3, [pc, #36]	; (800902c <__swbuf_r+0xa0>)
 8009008:	429c      	cmp	r4, r3
 800900a:	bf08      	it	eq
 800900c:	68ec      	ldreq	r4, [r5, #12]
 800900e:	e7ca      	b.n	8008fa6 <__swbuf_r+0x1a>
 8009010:	4621      	mov	r1, r4
 8009012:	4628      	mov	r0, r5
 8009014:	f000 f80c 	bl	8009030 <__swsetup_r>
 8009018:	2800      	cmp	r0, #0
 800901a:	d0cb      	beq.n	8008fb4 <__swbuf_r+0x28>
 800901c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009020:	e7ea      	b.n	8008ff8 <__swbuf_r+0x6c>
 8009022:	bf00      	nop
 8009024:	0801b60c 	.word	0x0801b60c
 8009028:	0801b62c 	.word	0x0801b62c
 800902c:	0801b5ec 	.word	0x0801b5ec

08009030 <__swsetup_r>:
 8009030:	4b32      	ldr	r3, [pc, #200]	; (80090fc <__swsetup_r+0xcc>)
 8009032:	b570      	push	{r4, r5, r6, lr}
 8009034:	681d      	ldr	r5, [r3, #0]
 8009036:	4606      	mov	r6, r0
 8009038:	460c      	mov	r4, r1
 800903a:	b125      	cbz	r5, 8009046 <__swsetup_r+0x16>
 800903c:	69ab      	ldr	r3, [r5, #24]
 800903e:	b913      	cbnz	r3, 8009046 <__swsetup_r+0x16>
 8009040:	4628      	mov	r0, r5
 8009042:	f000 f97d 	bl	8009340 <__sinit>
 8009046:	4b2e      	ldr	r3, [pc, #184]	; (8009100 <__swsetup_r+0xd0>)
 8009048:	429c      	cmp	r4, r3
 800904a:	d10f      	bne.n	800906c <__swsetup_r+0x3c>
 800904c:	686c      	ldr	r4, [r5, #4]
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009054:	0719      	lsls	r1, r3, #28
 8009056:	d42c      	bmi.n	80090b2 <__swsetup_r+0x82>
 8009058:	06dd      	lsls	r5, r3, #27
 800905a:	d411      	bmi.n	8009080 <__swsetup_r+0x50>
 800905c:	2309      	movs	r3, #9
 800905e:	6033      	str	r3, [r6, #0]
 8009060:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009064:	81a3      	strh	r3, [r4, #12]
 8009066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800906a:	e03e      	b.n	80090ea <__swsetup_r+0xba>
 800906c:	4b25      	ldr	r3, [pc, #148]	; (8009104 <__swsetup_r+0xd4>)
 800906e:	429c      	cmp	r4, r3
 8009070:	d101      	bne.n	8009076 <__swsetup_r+0x46>
 8009072:	68ac      	ldr	r4, [r5, #8]
 8009074:	e7eb      	b.n	800904e <__swsetup_r+0x1e>
 8009076:	4b24      	ldr	r3, [pc, #144]	; (8009108 <__swsetup_r+0xd8>)
 8009078:	429c      	cmp	r4, r3
 800907a:	bf08      	it	eq
 800907c:	68ec      	ldreq	r4, [r5, #12]
 800907e:	e7e6      	b.n	800904e <__swsetup_r+0x1e>
 8009080:	0758      	lsls	r0, r3, #29
 8009082:	d512      	bpl.n	80090aa <__swsetup_r+0x7a>
 8009084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009086:	b141      	cbz	r1, 800909a <__swsetup_r+0x6a>
 8009088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800908c:	4299      	cmp	r1, r3
 800908e:	d002      	beq.n	8009096 <__swsetup_r+0x66>
 8009090:	4630      	mov	r0, r6
 8009092:	f7ff fa45 	bl	8008520 <_free_r>
 8009096:	2300      	movs	r3, #0
 8009098:	6363      	str	r3, [r4, #52]	; 0x34
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090a0:	81a3      	strh	r3, [r4, #12]
 80090a2:	2300      	movs	r3, #0
 80090a4:	6063      	str	r3, [r4, #4]
 80090a6:	6923      	ldr	r3, [r4, #16]
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	f043 0308 	orr.w	r3, r3, #8
 80090b0:	81a3      	strh	r3, [r4, #12]
 80090b2:	6923      	ldr	r3, [r4, #16]
 80090b4:	b94b      	cbnz	r3, 80090ca <__swsetup_r+0x9a>
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090c0:	d003      	beq.n	80090ca <__swsetup_r+0x9a>
 80090c2:	4621      	mov	r1, r4
 80090c4:	4630      	mov	r0, r6
 80090c6:	f000 f9ff 	bl	80094c8 <__smakebuf_r>
 80090ca:	89a0      	ldrh	r0, [r4, #12]
 80090cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090d0:	f010 0301 	ands.w	r3, r0, #1
 80090d4:	d00a      	beq.n	80090ec <__swsetup_r+0xbc>
 80090d6:	2300      	movs	r3, #0
 80090d8:	60a3      	str	r3, [r4, #8]
 80090da:	6963      	ldr	r3, [r4, #20]
 80090dc:	425b      	negs	r3, r3
 80090de:	61a3      	str	r3, [r4, #24]
 80090e0:	6923      	ldr	r3, [r4, #16]
 80090e2:	b943      	cbnz	r3, 80090f6 <__swsetup_r+0xc6>
 80090e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090e8:	d1ba      	bne.n	8009060 <__swsetup_r+0x30>
 80090ea:	bd70      	pop	{r4, r5, r6, pc}
 80090ec:	0781      	lsls	r1, r0, #30
 80090ee:	bf58      	it	pl
 80090f0:	6963      	ldrpl	r3, [r4, #20]
 80090f2:	60a3      	str	r3, [r4, #8]
 80090f4:	e7f4      	b.n	80090e0 <__swsetup_r+0xb0>
 80090f6:	2000      	movs	r0, #0
 80090f8:	e7f7      	b.n	80090ea <__swsetup_r+0xba>
 80090fa:	bf00      	nop
 80090fc:	200003b4 	.word	0x200003b4
 8009100:	0801b60c 	.word	0x0801b60c
 8009104:	0801b62c 	.word	0x0801b62c
 8009108:	0801b5ec 	.word	0x0801b5ec

0800910c <__sflush_r>:
 800910c:	898a      	ldrh	r2, [r1, #12]
 800910e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009112:	4605      	mov	r5, r0
 8009114:	0710      	lsls	r0, r2, #28
 8009116:	460c      	mov	r4, r1
 8009118:	d458      	bmi.n	80091cc <__sflush_r+0xc0>
 800911a:	684b      	ldr	r3, [r1, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	dc05      	bgt.n	800912c <__sflush_r+0x20>
 8009120:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009122:	2b00      	cmp	r3, #0
 8009124:	dc02      	bgt.n	800912c <__sflush_r+0x20>
 8009126:	2000      	movs	r0, #0
 8009128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800912c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800912e:	2e00      	cmp	r6, #0
 8009130:	d0f9      	beq.n	8009126 <__sflush_r+0x1a>
 8009132:	2300      	movs	r3, #0
 8009134:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009138:	682f      	ldr	r7, [r5, #0]
 800913a:	602b      	str	r3, [r5, #0]
 800913c:	d032      	beq.n	80091a4 <__sflush_r+0x98>
 800913e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	075a      	lsls	r2, r3, #29
 8009144:	d505      	bpl.n	8009152 <__sflush_r+0x46>
 8009146:	6863      	ldr	r3, [r4, #4]
 8009148:	1ac0      	subs	r0, r0, r3
 800914a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800914c:	b10b      	cbz	r3, 8009152 <__sflush_r+0x46>
 800914e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009150:	1ac0      	subs	r0, r0, r3
 8009152:	2300      	movs	r3, #0
 8009154:	4602      	mov	r2, r0
 8009156:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009158:	6a21      	ldr	r1, [r4, #32]
 800915a:	4628      	mov	r0, r5
 800915c:	47b0      	blx	r6
 800915e:	1c43      	adds	r3, r0, #1
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	d106      	bne.n	8009172 <__sflush_r+0x66>
 8009164:	6829      	ldr	r1, [r5, #0]
 8009166:	291d      	cmp	r1, #29
 8009168:	d82c      	bhi.n	80091c4 <__sflush_r+0xb8>
 800916a:	4a2a      	ldr	r2, [pc, #168]	; (8009214 <__sflush_r+0x108>)
 800916c:	40ca      	lsrs	r2, r1
 800916e:	07d6      	lsls	r6, r2, #31
 8009170:	d528      	bpl.n	80091c4 <__sflush_r+0xb8>
 8009172:	2200      	movs	r2, #0
 8009174:	6062      	str	r2, [r4, #4]
 8009176:	04d9      	lsls	r1, r3, #19
 8009178:	6922      	ldr	r2, [r4, #16]
 800917a:	6022      	str	r2, [r4, #0]
 800917c:	d504      	bpl.n	8009188 <__sflush_r+0x7c>
 800917e:	1c42      	adds	r2, r0, #1
 8009180:	d101      	bne.n	8009186 <__sflush_r+0x7a>
 8009182:	682b      	ldr	r3, [r5, #0]
 8009184:	b903      	cbnz	r3, 8009188 <__sflush_r+0x7c>
 8009186:	6560      	str	r0, [r4, #84]	; 0x54
 8009188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800918a:	602f      	str	r7, [r5, #0]
 800918c:	2900      	cmp	r1, #0
 800918e:	d0ca      	beq.n	8009126 <__sflush_r+0x1a>
 8009190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009194:	4299      	cmp	r1, r3
 8009196:	d002      	beq.n	800919e <__sflush_r+0x92>
 8009198:	4628      	mov	r0, r5
 800919a:	f7ff f9c1 	bl	8008520 <_free_r>
 800919e:	2000      	movs	r0, #0
 80091a0:	6360      	str	r0, [r4, #52]	; 0x34
 80091a2:	e7c1      	b.n	8009128 <__sflush_r+0x1c>
 80091a4:	6a21      	ldr	r1, [r4, #32]
 80091a6:	2301      	movs	r3, #1
 80091a8:	4628      	mov	r0, r5
 80091aa:	47b0      	blx	r6
 80091ac:	1c41      	adds	r1, r0, #1
 80091ae:	d1c7      	bne.n	8009140 <__sflush_r+0x34>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0c4      	beq.n	8009140 <__sflush_r+0x34>
 80091b6:	2b1d      	cmp	r3, #29
 80091b8:	d001      	beq.n	80091be <__sflush_r+0xb2>
 80091ba:	2b16      	cmp	r3, #22
 80091bc:	d101      	bne.n	80091c2 <__sflush_r+0xb6>
 80091be:	602f      	str	r7, [r5, #0]
 80091c0:	e7b1      	b.n	8009126 <__sflush_r+0x1a>
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091c8:	81a3      	strh	r3, [r4, #12]
 80091ca:	e7ad      	b.n	8009128 <__sflush_r+0x1c>
 80091cc:	690f      	ldr	r7, [r1, #16]
 80091ce:	2f00      	cmp	r7, #0
 80091d0:	d0a9      	beq.n	8009126 <__sflush_r+0x1a>
 80091d2:	0793      	lsls	r3, r2, #30
 80091d4:	680e      	ldr	r6, [r1, #0]
 80091d6:	bf08      	it	eq
 80091d8:	694b      	ldreq	r3, [r1, #20]
 80091da:	600f      	str	r7, [r1, #0]
 80091dc:	bf18      	it	ne
 80091de:	2300      	movne	r3, #0
 80091e0:	eba6 0807 	sub.w	r8, r6, r7
 80091e4:	608b      	str	r3, [r1, #8]
 80091e6:	f1b8 0f00 	cmp.w	r8, #0
 80091ea:	dd9c      	ble.n	8009126 <__sflush_r+0x1a>
 80091ec:	6a21      	ldr	r1, [r4, #32]
 80091ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091f0:	4643      	mov	r3, r8
 80091f2:	463a      	mov	r2, r7
 80091f4:	4628      	mov	r0, r5
 80091f6:	47b0      	blx	r6
 80091f8:	2800      	cmp	r0, #0
 80091fa:	dc06      	bgt.n	800920a <__sflush_r+0xfe>
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009202:	81a3      	strh	r3, [r4, #12]
 8009204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009208:	e78e      	b.n	8009128 <__sflush_r+0x1c>
 800920a:	4407      	add	r7, r0
 800920c:	eba8 0800 	sub.w	r8, r8, r0
 8009210:	e7e9      	b.n	80091e6 <__sflush_r+0xda>
 8009212:	bf00      	nop
 8009214:	20400001 	.word	0x20400001

08009218 <_fflush_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	690b      	ldr	r3, [r1, #16]
 800921c:	4605      	mov	r5, r0
 800921e:	460c      	mov	r4, r1
 8009220:	b913      	cbnz	r3, 8009228 <_fflush_r+0x10>
 8009222:	2500      	movs	r5, #0
 8009224:	4628      	mov	r0, r5
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	b118      	cbz	r0, 8009232 <_fflush_r+0x1a>
 800922a:	6983      	ldr	r3, [r0, #24]
 800922c:	b90b      	cbnz	r3, 8009232 <_fflush_r+0x1a>
 800922e:	f000 f887 	bl	8009340 <__sinit>
 8009232:	4b14      	ldr	r3, [pc, #80]	; (8009284 <_fflush_r+0x6c>)
 8009234:	429c      	cmp	r4, r3
 8009236:	d11b      	bne.n	8009270 <_fflush_r+0x58>
 8009238:	686c      	ldr	r4, [r5, #4]
 800923a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0ef      	beq.n	8009222 <_fflush_r+0xa>
 8009242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009244:	07d0      	lsls	r0, r2, #31
 8009246:	d404      	bmi.n	8009252 <_fflush_r+0x3a>
 8009248:	0599      	lsls	r1, r3, #22
 800924a:	d402      	bmi.n	8009252 <_fflush_r+0x3a>
 800924c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800924e:	f000 f915 	bl	800947c <__retarget_lock_acquire_recursive>
 8009252:	4628      	mov	r0, r5
 8009254:	4621      	mov	r1, r4
 8009256:	f7ff ff59 	bl	800910c <__sflush_r>
 800925a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800925c:	07da      	lsls	r2, r3, #31
 800925e:	4605      	mov	r5, r0
 8009260:	d4e0      	bmi.n	8009224 <_fflush_r+0xc>
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	059b      	lsls	r3, r3, #22
 8009266:	d4dd      	bmi.n	8009224 <_fflush_r+0xc>
 8009268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800926a:	f000 f908 	bl	800947e <__retarget_lock_release_recursive>
 800926e:	e7d9      	b.n	8009224 <_fflush_r+0xc>
 8009270:	4b05      	ldr	r3, [pc, #20]	; (8009288 <_fflush_r+0x70>)
 8009272:	429c      	cmp	r4, r3
 8009274:	d101      	bne.n	800927a <_fflush_r+0x62>
 8009276:	68ac      	ldr	r4, [r5, #8]
 8009278:	e7df      	b.n	800923a <_fflush_r+0x22>
 800927a:	4b04      	ldr	r3, [pc, #16]	; (800928c <_fflush_r+0x74>)
 800927c:	429c      	cmp	r4, r3
 800927e:	bf08      	it	eq
 8009280:	68ec      	ldreq	r4, [r5, #12]
 8009282:	e7da      	b.n	800923a <_fflush_r+0x22>
 8009284:	0801b60c 	.word	0x0801b60c
 8009288:	0801b62c 	.word	0x0801b62c
 800928c:	0801b5ec 	.word	0x0801b5ec

08009290 <std>:
 8009290:	2300      	movs	r3, #0
 8009292:	b510      	push	{r4, lr}
 8009294:	4604      	mov	r4, r0
 8009296:	e9c0 3300 	strd	r3, r3, [r0]
 800929a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800929e:	6083      	str	r3, [r0, #8]
 80092a0:	8181      	strh	r1, [r0, #12]
 80092a2:	6643      	str	r3, [r0, #100]	; 0x64
 80092a4:	81c2      	strh	r2, [r0, #14]
 80092a6:	6183      	str	r3, [r0, #24]
 80092a8:	4619      	mov	r1, r3
 80092aa:	2208      	movs	r2, #8
 80092ac:	305c      	adds	r0, #92	; 0x5c
 80092ae:	f7ff f92f 	bl	8008510 <memset>
 80092b2:	4b05      	ldr	r3, [pc, #20]	; (80092c8 <std+0x38>)
 80092b4:	6263      	str	r3, [r4, #36]	; 0x24
 80092b6:	4b05      	ldr	r3, [pc, #20]	; (80092cc <std+0x3c>)
 80092b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80092ba:	4b05      	ldr	r3, [pc, #20]	; (80092d0 <std+0x40>)
 80092bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092be:	4b05      	ldr	r3, [pc, #20]	; (80092d4 <std+0x44>)
 80092c0:	6224      	str	r4, [r4, #32]
 80092c2:	6323      	str	r3, [r4, #48]	; 0x30
 80092c4:	bd10      	pop	{r4, pc}
 80092c6:	bf00      	nop
 80092c8:	08009865 	.word	0x08009865
 80092cc:	08009887 	.word	0x08009887
 80092d0:	080098bf 	.word	0x080098bf
 80092d4:	080098e3 	.word	0x080098e3

080092d8 <_cleanup_r>:
 80092d8:	4901      	ldr	r1, [pc, #4]	; (80092e0 <_cleanup_r+0x8>)
 80092da:	f000 b8af 	b.w	800943c <_fwalk_reent>
 80092de:	bf00      	nop
 80092e0:	08009219 	.word	0x08009219

080092e4 <__sfmoreglue>:
 80092e4:	b570      	push	{r4, r5, r6, lr}
 80092e6:	1e4a      	subs	r2, r1, #1
 80092e8:	2568      	movs	r5, #104	; 0x68
 80092ea:	4355      	muls	r5, r2
 80092ec:	460e      	mov	r6, r1
 80092ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80092f2:	f7ff f965 	bl	80085c0 <_malloc_r>
 80092f6:	4604      	mov	r4, r0
 80092f8:	b140      	cbz	r0, 800930c <__sfmoreglue+0x28>
 80092fa:	2100      	movs	r1, #0
 80092fc:	e9c0 1600 	strd	r1, r6, [r0]
 8009300:	300c      	adds	r0, #12
 8009302:	60a0      	str	r0, [r4, #8]
 8009304:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009308:	f7ff f902 	bl	8008510 <memset>
 800930c:	4620      	mov	r0, r4
 800930e:	bd70      	pop	{r4, r5, r6, pc}

08009310 <__sfp_lock_acquire>:
 8009310:	4801      	ldr	r0, [pc, #4]	; (8009318 <__sfp_lock_acquire+0x8>)
 8009312:	f000 b8b3 	b.w	800947c <__retarget_lock_acquire_recursive>
 8009316:	bf00      	nop
 8009318:	200262f8 	.word	0x200262f8

0800931c <__sfp_lock_release>:
 800931c:	4801      	ldr	r0, [pc, #4]	; (8009324 <__sfp_lock_release+0x8>)
 800931e:	f000 b8ae 	b.w	800947e <__retarget_lock_release_recursive>
 8009322:	bf00      	nop
 8009324:	200262f8 	.word	0x200262f8

08009328 <__sinit_lock_acquire>:
 8009328:	4801      	ldr	r0, [pc, #4]	; (8009330 <__sinit_lock_acquire+0x8>)
 800932a:	f000 b8a7 	b.w	800947c <__retarget_lock_acquire_recursive>
 800932e:	bf00      	nop
 8009330:	200262f7 	.word	0x200262f7

08009334 <__sinit_lock_release>:
 8009334:	4801      	ldr	r0, [pc, #4]	; (800933c <__sinit_lock_release+0x8>)
 8009336:	f000 b8a2 	b.w	800947e <__retarget_lock_release_recursive>
 800933a:	bf00      	nop
 800933c:	200262f7 	.word	0x200262f7

08009340 <__sinit>:
 8009340:	b510      	push	{r4, lr}
 8009342:	4604      	mov	r4, r0
 8009344:	f7ff fff0 	bl	8009328 <__sinit_lock_acquire>
 8009348:	69a3      	ldr	r3, [r4, #24]
 800934a:	b11b      	cbz	r3, 8009354 <__sinit+0x14>
 800934c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009350:	f7ff bff0 	b.w	8009334 <__sinit_lock_release>
 8009354:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009358:	6523      	str	r3, [r4, #80]	; 0x50
 800935a:	4b13      	ldr	r3, [pc, #76]	; (80093a8 <__sinit+0x68>)
 800935c:	4a13      	ldr	r2, [pc, #76]	; (80093ac <__sinit+0x6c>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	62a2      	str	r2, [r4, #40]	; 0x28
 8009362:	42a3      	cmp	r3, r4
 8009364:	bf04      	itt	eq
 8009366:	2301      	moveq	r3, #1
 8009368:	61a3      	streq	r3, [r4, #24]
 800936a:	4620      	mov	r0, r4
 800936c:	f000 f820 	bl	80093b0 <__sfp>
 8009370:	6060      	str	r0, [r4, #4]
 8009372:	4620      	mov	r0, r4
 8009374:	f000 f81c 	bl	80093b0 <__sfp>
 8009378:	60a0      	str	r0, [r4, #8]
 800937a:	4620      	mov	r0, r4
 800937c:	f000 f818 	bl	80093b0 <__sfp>
 8009380:	2200      	movs	r2, #0
 8009382:	60e0      	str	r0, [r4, #12]
 8009384:	2104      	movs	r1, #4
 8009386:	6860      	ldr	r0, [r4, #4]
 8009388:	f7ff ff82 	bl	8009290 <std>
 800938c:	68a0      	ldr	r0, [r4, #8]
 800938e:	2201      	movs	r2, #1
 8009390:	2109      	movs	r1, #9
 8009392:	f7ff ff7d 	bl	8009290 <std>
 8009396:	68e0      	ldr	r0, [r4, #12]
 8009398:	2202      	movs	r2, #2
 800939a:	2112      	movs	r1, #18
 800939c:	f7ff ff78 	bl	8009290 <std>
 80093a0:	2301      	movs	r3, #1
 80093a2:	61a3      	str	r3, [r4, #24]
 80093a4:	e7d2      	b.n	800934c <__sinit+0xc>
 80093a6:	bf00      	nop
 80093a8:	0801b43c 	.word	0x0801b43c
 80093ac:	080092d9 	.word	0x080092d9

080093b0 <__sfp>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	4607      	mov	r7, r0
 80093b4:	f7ff ffac 	bl	8009310 <__sfp_lock_acquire>
 80093b8:	4b1e      	ldr	r3, [pc, #120]	; (8009434 <__sfp+0x84>)
 80093ba:	681e      	ldr	r6, [r3, #0]
 80093bc:	69b3      	ldr	r3, [r6, #24]
 80093be:	b913      	cbnz	r3, 80093c6 <__sfp+0x16>
 80093c0:	4630      	mov	r0, r6
 80093c2:	f7ff ffbd 	bl	8009340 <__sinit>
 80093c6:	3648      	adds	r6, #72	; 0x48
 80093c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	d503      	bpl.n	80093d8 <__sfp+0x28>
 80093d0:	6833      	ldr	r3, [r6, #0]
 80093d2:	b30b      	cbz	r3, 8009418 <__sfp+0x68>
 80093d4:	6836      	ldr	r6, [r6, #0]
 80093d6:	e7f7      	b.n	80093c8 <__sfp+0x18>
 80093d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093dc:	b9d5      	cbnz	r5, 8009414 <__sfp+0x64>
 80093de:	4b16      	ldr	r3, [pc, #88]	; (8009438 <__sfp+0x88>)
 80093e0:	60e3      	str	r3, [r4, #12]
 80093e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093e6:	6665      	str	r5, [r4, #100]	; 0x64
 80093e8:	f000 f847 	bl	800947a <__retarget_lock_init_recursive>
 80093ec:	f7ff ff96 	bl	800931c <__sfp_lock_release>
 80093f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80093f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80093f8:	6025      	str	r5, [r4, #0]
 80093fa:	61a5      	str	r5, [r4, #24]
 80093fc:	2208      	movs	r2, #8
 80093fe:	4629      	mov	r1, r5
 8009400:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009404:	f7ff f884 	bl	8008510 <memset>
 8009408:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800940c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009410:	4620      	mov	r0, r4
 8009412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009414:	3468      	adds	r4, #104	; 0x68
 8009416:	e7d9      	b.n	80093cc <__sfp+0x1c>
 8009418:	2104      	movs	r1, #4
 800941a:	4638      	mov	r0, r7
 800941c:	f7ff ff62 	bl	80092e4 <__sfmoreglue>
 8009420:	4604      	mov	r4, r0
 8009422:	6030      	str	r0, [r6, #0]
 8009424:	2800      	cmp	r0, #0
 8009426:	d1d5      	bne.n	80093d4 <__sfp+0x24>
 8009428:	f7ff ff78 	bl	800931c <__sfp_lock_release>
 800942c:	230c      	movs	r3, #12
 800942e:	603b      	str	r3, [r7, #0]
 8009430:	e7ee      	b.n	8009410 <__sfp+0x60>
 8009432:	bf00      	nop
 8009434:	0801b43c 	.word	0x0801b43c
 8009438:	ffff0001 	.word	0xffff0001

0800943c <_fwalk_reent>:
 800943c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009440:	4606      	mov	r6, r0
 8009442:	4688      	mov	r8, r1
 8009444:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009448:	2700      	movs	r7, #0
 800944a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800944e:	f1b9 0901 	subs.w	r9, r9, #1
 8009452:	d505      	bpl.n	8009460 <_fwalk_reent+0x24>
 8009454:	6824      	ldr	r4, [r4, #0]
 8009456:	2c00      	cmp	r4, #0
 8009458:	d1f7      	bne.n	800944a <_fwalk_reent+0xe>
 800945a:	4638      	mov	r0, r7
 800945c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009460:	89ab      	ldrh	r3, [r5, #12]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d907      	bls.n	8009476 <_fwalk_reent+0x3a>
 8009466:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800946a:	3301      	adds	r3, #1
 800946c:	d003      	beq.n	8009476 <_fwalk_reent+0x3a>
 800946e:	4629      	mov	r1, r5
 8009470:	4630      	mov	r0, r6
 8009472:	47c0      	blx	r8
 8009474:	4307      	orrs	r7, r0
 8009476:	3568      	adds	r5, #104	; 0x68
 8009478:	e7e9      	b.n	800944e <_fwalk_reent+0x12>

0800947a <__retarget_lock_init_recursive>:
 800947a:	4770      	bx	lr

0800947c <__retarget_lock_acquire_recursive>:
 800947c:	4770      	bx	lr

0800947e <__retarget_lock_release_recursive>:
 800947e:	4770      	bx	lr

08009480 <__swhatbuf_r>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	460e      	mov	r6, r1
 8009484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009488:	2900      	cmp	r1, #0
 800948a:	b096      	sub	sp, #88	; 0x58
 800948c:	4614      	mov	r4, r2
 800948e:	461d      	mov	r5, r3
 8009490:	da07      	bge.n	80094a2 <__swhatbuf_r+0x22>
 8009492:	2300      	movs	r3, #0
 8009494:	602b      	str	r3, [r5, #0]
 8009496:	89b3      	ldrh	r3, [r6, #12]
 8009498:	061a      	lsls	r2, r3, #24
 800949a:	d410      	bmi.n	80094be <__swhatbuf_r+0x3e>
 800949c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094a0:	e00e      	b.n	80094c0 <__swhatbuf_r+0x40>
 80094a2:	466a      	mov	r2, sp
 80094a4:	f000 fa44 	bl	8009930 <_fstat_r>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	dbf2      	blt.n	8009492 <__swhatbuf_r+0x12>
 80094ac:	9a01      	ldr	r2, [sp, #4]
 80094ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094b6:	425a      	negs	r2, r3
 80094b8:	415a      	adcs	r2, r3
 80094ba:	602a      	str	r2, [r5, #0]
 80094bc:	e7ee      	b.n	800949c <__swhatbuf_r+0x1c>
 80094be:	2340      	movs	r3, #64	; 0x40
 80094c0:	2000      	movs	r0, #0
 80094c2:	6023      	str	r3, [r4, #0]
 80094c4:	b016      	add	sp, #88	; 0x58
 80094c6:	bd70      	pop	{r4, r5, r6, pc}

080094c8 <__smakebuf_r>:
 80094c8:	898b      	ldrh	r3, [r1, #12]
 80094ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094cc:	079d      	lsls	r5, r3, #30
 80094ce:	4606      	mov	r6, r0
 80094d0:	460c      	mov	r4, r1
 80094d2:	d507      	bpl.n	80094e4 <__smakebuf_r+0x1c>
 80094d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	6123      	str	r3, [r4, #16]
 80094dc:	2301      	movs	r3, #1
 80094de:	6163      	str	r3, [r4, #20]
 80094e0:	b002      	add	sp, #8
 80094e2:	bd70      	pop	{r4, r5, r6, pc}
 80094e4:	ab01      	add	r3, sp, #4
 80094e6:	466a      	mov	r2, sp
 80094e8:	f7ff ffca 	bl	8009480 <__swhatbuf_r>
 80094ec:	9900      	ldr	r1, [sp, #0]
 80094ee:	4605      	mov	r5, r0
 80094f0:	4630      	mov	r0, r6
 80094f2:	f7ff f865 	bl	80085c0 <_malloc_r>
 80094f6:	b948      	cbnz	r0, 800950c <__smakebuf_r+0x44>
 80094f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094fc:	059a      	lsls	r2, r3, #22
 80094fe:	d4ef      	bmi.n	80094e0 <__smakebuf_r+0x18>
 8009500:	f023 0303 	bic.w	r3, r3, #3
 8009504:	f043 0302 	orr.w	r3, r3, #2
 8009508:	81a3      	strh	r3, [r4, #12]
 800950a:	e7e3      	b.n	80094d4 <__smakebuf_r+0xc>
 800950c:	4b0d      	ldr	r3, [pc, #52]	; (8009544 <__smakebuf_r+0x7c>)
 800950e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009510:	89a3      	ldrh	r3, [r4, #12]
 8009512:	6020      	str	r0, [r4, #0]
 8009514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009518:	81a3      	strh	r3, [r4, #12]
 800951a:	9b00      	ldr	r3, [sp, #0]
 800951c:	6163      	str	r3, [r4, #20]
 800951e:	9b01      	ldr	r3, [sp, #4]
 8009520:	6120      	str	r0, [r4, #16]
 8009522:	b15b      	cbz	r3, 800953c <__smakebuf_r+0x74>
 8009524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009528:	4630      	mov	r0, r6
 800952a:	f000 fa13 	bl	8009954 <_isatty_r>
 800952e:	b128      	cbz	r0, 800953c <__smakebuf_r+0x74>
 8009530:	89a3      	ldrh	r3, [r4, #12]
 8009532:	f023 0303 	bic.w	r3, r3, #3
 8009536:	f043 0301 	orr.w	r3, r3, #1
 800953a:	81a3      	strh	r3, [r4, #12]
 800953c:	89a0      	ldrh	r0, [r4, #12]
 800953e:	4305      	orrs	r5, r0
 8009540:	81a5      	strh	r5, [r4, #12]
 8009542:	e7cd      	b.n	80094e0 <__smakebuf_r+0x18>
 8009544:	080092d9 	.word	0x080092d9

08009548 <__malloc_lock>:
 8009548:	4801      	ldr	r0, [pc, #4]	; (8009550 <__malloc_lock+0x8>)
 800954a:	f7ff bf97 	b.w	800947c <__retarget_lock_acquire_recursive>
 800954e:	bf00      	nop
 8009550:	200262f4 	.word	0x200262f4

08009554 <__malloc_unlock>:
 8009554:	4801      	ldr	r0, [pc, #4]	; (800955c <__malloc_unlock+0x8>)
 8009556:	f7ff bf92 	b.w	800947e <__retarget_lock_release_recursive>
 800955a:	bf00      	nop
 800955c:	200262f4 	.word	0x200262f4

08009560 <_realloc_r>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	4607      	mov	r7, r0
 8009564:	4614      	mov	r4, r2
 8009566:	460e      	mov	r6, r1
 8009568:	b921      	cbnz	r1, 8009574 <_realloc_r+0x14>
 800956a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800956e:	4611      	mov	r1, r2
 8009570:	f7ff b826 	b.w	80085c0 <_malloc_r>
 8009574:	b922      	cbnz	r2, 8009580 <_realloc_r+0x20>
 8009576:	f7fe ffd3 	bl	8008520 <_free_r>
 800957a:	4625      	mov	r5, r4
 800957c:	4628      	mov	r0, r5
 800957e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009580:	f000 fa0a 	bl	8009998 <_malloc_usable_size_r>
 8009584:	42a0      	cmp	r0, r4
 8009586:	d20f      	bcs.n	80095a8 <_realloc_r+0x48>
 8009588:	4621      	mov	r1, r4
 800958a:	4638      	mov	r0, r7
 800958c:	f7ff f818 	bl	80085c0 <_malloc_r>
 8009590:	4605      	mov	r5, r0
 8009592:	2800      	cmp	r0, #0
 8009594:	d0f2      	beq.n	800957c <_realloc_r+0x1c>
 8009596:	4631      	mov	r1, r6
 8009598:	4622      	mov	r2, r4
 800959a:	f7fe ff91 	bl	80084c0 <memcpy>
 800959e:	4631      	mov	r1, r6
 80095a0:	4638      	mov	r0, r7
 80095a2:	f7fe ffbd 	bl	8008520 <_free_r>
 80095a6:	e7e9      	b.n	800957c <_realloc_r+0x1c>
 80095a8:	4635      	mov	r5, r6
 80095aa:	e7e7      	b.n	800957c <_realloc_r+0x1c>

080095ac <__ssputs_r>:
 80095ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095b0:	688e      	ldr	r6, [r1, #8]
 80095b2:	429e      	cmp	r6, r3
 80095b4:	4682      	mov	sl, r0
 80095b6:	460c      	mov	r4, r1
 80095b8:	4690      	mov	r8, r2
 80095ba:	461f      	mov	r7, r3
 80095bc:	d838      	bhi.n	8009630 <__ssputs_r+0x84>
 80095be:	898a      	ldrh	r2, [r1, #12]
 80095c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095c4:	d032      	beq.n	800962c <__ssputs_r+0x80>
 80095c6:	6825      	ldr	r5, [r4, #0]
 80095c8:	6909      	ldr	r1, [r1, #16]
 80095ca:	eba5 0901 	sub.w	r9, r5, r1
 80095ce:	6965      	ldr	r5, [r4, #20]
 80095d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095d8:	3301      	adds	r3, #1
 80095da:	444b      	add	r3, r9
 80095dc:	106d      	asrs	r5, r5, #1
 80095de:	429d      	cmp	r5, r3
 80095e0:	bf38      	it	cc
 80095e2:	461d      	movcc	r5, r3
 80095e4:	0553      	lsls	r3, r2, #21
 80095e6:	d531      	bpl.n	800964c <__ssputs_r+0xa0>
 80095e8:	4629      	mov	r1, r5
 80095ea:	f7fe ffe9 	bl	80085c0 <_malloc_r>
 80095ee:	4606      	mov	r6, r0
 80095f0:	b950      	cbnz	r0, 8009608 <__ssputs_r+0x5c>
 80095f2:	230c      	movs	r3, #12
 80095f4:	f8ca 3000 	str.w	r3, [sl]
 80095f8:	89a3      	ldrh	r3, [r4, #12]
 80095fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095fe:	81a3      	strh	r3, [r4, #12]
 8009600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009608:	6921      	ldr	r1, [r4, #16]
 800960a:	464a      	mov	r2, r9
 800960c:	f7fe ff58 	bl	80084c0 <memcpy>
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800961a:	81a3      	strh	r3, [r4, #12]
 800961c:	6126      	str	r6, [r4, #16]
 800961e:	6165      	str	r5, [r4, #20]
 8009620:	444e      	add	r6, r9
 8009622:	eba5 0509 	sub.w	r5, r5, r9
 8009626:	6026      	str	r6, [r4, #0]
 8009628:	60a5      	str	r5, [r4, #8]
 800962a:	463e      	mov	r6, r7
 800962c:	42be      	cmp	r6, r7
 800962e:	d900      	bls.n	8009632 <__ssputs_r+0x86>
 8009630:	463e      	mov	r6, r7
 8009632:	4632      	mov	r2, r6
 8009634:	6820      	ldr	r0, [r4, #0]
 8009636:	4641      	mov	r1, r8
 8009638:	f7fe ff50 	bl	80084dc <memmove>
 800963c:	68a3      	ldr	r3, [r4, #8]
 800963e:	6822      	ldr	r2, [r4, #0]
 8009640:	1b9b      	subs	r3, r3, r6
 8009642:	4432      	add	r2, r6
 8009644:	60a3      	str	r3, [r4, #8]
 8009646:	6022      	str	r2, [r4, #0]
 8009648:	2000      	movs	r0, #0
 800964a:	e7db      	b.n	8009604 <__ssputs_r+0x58>
 800964c:	462a      	mov	r2, r5
 800964e:	f7ff ff87 	bl	8009560 <_realloc_r>
 8009652:	4606      	mov	r6, r0
 8009654:	2800      	cmp	r0, #0
 8009656:	d1e1      	bne.n	800961c <__ssputs_r+0x70>
 8009658:	6921      	ldr	r1, [r4, #16]
 800965a:	4650      	mov	r0, sl
 800965c:	f7fe ff60 	bl	8008520 <_free_r>
 8009660:	e7c7      	b.n	80095f2 <__ssputs_r+0x46>
	...

08009664 <_svfiprintf_r>:
 8009664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009668:	4698      	mov	r8, r3
 800966a:	898b      	ldrh	r3, [r1, #12]
 800966c:	061b      	lsls	r3, r3, #24
 800966e:	b09d      	sub	sp, #116	; 0x74
 8009670:	4607      	mov	r7, r0
 8009672:	460d      	mov	r5, r1
 8009674:	4614      	mov	r4, r2
 8009676:	d50e      	bpl.n	8009696 <_svfiprintf_r+0x32>
 8009678:	690b      	ldr	r3, [r1, #16]
 800967a:	b963      	cbnz	r3, 8009696 <_svfiprintf_r+0x32>
 800967c:	2140      	movs	r1, #64	; 0x40
 800967e:	f7fe ff9f 	bl	80085c0 <_malloc_r>
 8009682:	6028      	str	r0, [r5, #0]
 8009684:	6128      	str	r0, [r5, #16]
 8009686:	b920      	cbnz	r0, 8009692 <_svfiprintf_r+0x2e>
 8009688:	230c      	movs	r3, #12
 800968a:	603b      	str	r3, [r7, #0]
 800968c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009690:	e0d1      	b.n	8009836 <_svfiprintf_r+0x1d2>
 8009692:	2340      	movs	r3, #64	; 0x40
 8009694:	616b      	str	r3, [r5, #20]
 8009696:	2300      	movs	r3, #0
 8009698:	9309      	str	r3, [sp, #36]	; 0x24
 800969a:	2320      	movs	r3, #32
 800969c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80096a4:	2330      	movs	r3, #48	; 0x30
 80096a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009850 <_svfiprintf_r+0x1ec>
 80096aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096ae:	f04f 0901 	mov.w	r9, #1
 80096b2:	4623      	mov	r3, r4
 80096b4:	469a      	mov	sl, r3
 80096b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ba:	b10a      	cbz	r2, 80096c0 <_svfiprintf_r+0x5c>
 80096bc:	2a25      	cmp	r2, #37	; 0x25
 80096be:	d1f9      	bne.n	80096b4 <_svfiprintf_r+0x50>
 80096c0:	ebba 0b04 	subs.w	fp, sl, r4
 80096c4:	d00b      	beq.n	80096de <_svfiprintf_r+0x7a>
 80096c6:	465b      	mov	r3, fp
 80096c8:	4622      	mov	r2, r4
 80096ca:	4629      	mov	r1, r5
 80096cc:	4638      	mov	r0, r7
 80096ce:	f7ff ff6d 	bl	80095ac <__ssputs_r>
 80096d2:	3001      	adds	r0, #1
 80096d4:	f000 80aa 	beq.w	800982c <_svfiprintf_r+0x1c8>
 80096d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096da:	445a      	add	r2, fp
 80096dc:	9209      	str	r2, [sp, #36]	; 0x24
 80096de:	f89a 3000 	ldrb.w	r3, [sl]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f000 80a2 	beq.w	800982c <_svfiprintf_r+0x1c8>
 80096e8:	2300      	movs	r3, #0
 80096ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096f2:	f10a 0a01 	add.w	sl, sl, #1
 80096f6:	9304      	str	r3, [sp, #16]
 80096f8:	9307      	str	r3, [sp, #28]
 80096fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096fe:	931a      	str	r3, [sp, #104]	; 0x68
 8009700:	4654      	mov	r4, sl
 8009702:	2205      	movs	r2, #5
 8009704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009708:	4851      	ldr	r0, [pc, #324]	; (8009850 <_svfiprintf_r+0x1ec>)
 800970a:	f7f6 fd89 	bl	8000220 <memchr>
 800970e:	9a04      	ldr	r2, [sp, #16]
 8009710:	b9d8      	cbnz	r0, 800974a <_svfiprintf_r+0xe6>
 8009712:	06d0      	lsls	r0, r2, #27
 8009714:	bf44      	itt	mi
 8009716:	2320      	movmi	r3, #32
 8009718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800971c:	0711      	lsls	r1, r2, #28
 800971e:	bf44      	itt	mi
 8009720:	232b      	movmi	r3, #43	; 0x2b
 8009722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009726:	f89a 3000 	ldrb.w	r3, [sl]
 800972a:	2b2a      	cmp	r3, #42	; 0x2a
 800972c:	d015      	beq.n	800975a <_svfiprintf_r+0xf6>
 800972e:	9a07      	ldr	r2, [sp, #28]
 8009730:	4654      	mov	r4, sl
 8009732:	2000      	movs	r0, #0
 8009734:	f04f 0c0a 	mov.w	ip, #10
 8009738:	4621      	mov	r1, r4
 800973a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800973e:	3b30      	subs	r3, #48	; 0x30
 8009740:	2b09      	cmp	r3, #9
 8009742:	d94e      	bls.n	80097e2 <_svfiprintf_r+0x17e>
 8009744:	b1b0      	cbz	r0, 8009774 <_svfiprintf_r+0x110>
 8009746:	9207      	str	r2, [sp, #28]
 8009748:	e014      	b.n	8009774 <_svfiprintf_r+0x110>
 800974a:	eba0 0308 	sub.w	r3, r0, r8
 800974e:	fa09 f303 	lsl.w	r3, r9, r3
 8009752:	4313      	orrs	r3, r2
 8009754:	9304      	str	r3, [sp, #16]
 8009756:	46a2      	mov	sl, r4
 8009758:	e7d2      	b.n	8009700 <_svfiprintf_r+0x9c>
 800975a:	9b03      	ldr	r3, [sp, #12]
 800975c:	1d19      	adds	r1, r3, #4
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	9103      	str	r1, [sp, #12]
 8009762:	2b00      	cmp	r3, #0
 8009764:	bfbb      	ittet	lt
 8009766:	425b      	neglt	r3, r3
 8009768:	f042 0202 	orrlt.w	r2, r2, #2
 800976c:	9307      	strge	r3, [sp, #28]
 800976e:	9307      	strlt	r3, [sp, #28]
 8009770:	bfb8      	it	lt
 8009772:	9204      	strlt	r2, [sp, #16]
 8009774:	7823      	ldrb	r3, [r4, #0]
 8009776:	2b2e      	cmp	r3, #46	; 0x2e
 8009778:	d10c      	bne.n	8009794 <_svfiprintf_r+0x130>
 800977a:	7863      	ldrb	r3, [r4, #1]
 800977c:	2b2a      	cmp	r3, #42	; 0x2a
 800977e:	d135      	bne.n	80097ec <_svfiprintf_r+0x188>
 8009780:	9b03      	ldr	r3, [sp, #12]
 8009782:	1d1a      	adds	r2, r3, #4
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	9203      	str	r2, [sp, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	bfb8      	it	lt
 800978c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009790:	3402      	adds	r4, #2
 8009792:	9305      	str	r3, [sp, #20]
 8009794:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009860 <_svfiprintf_r+0x1fc>
 8009798:	7821      	ldrb	r1, [r4, #0]
 800979a:	2203      	movs	r2, #3
 800979c:	4650      	mov	r0, sl
 800979e:	f7f6 fd3f 	bl	8000220 <memchr>
 80097a2:	b140      	cbz	r0, 80097b6 <_svfiprintf_r+0x152>
 80097a4:	2340      	movs	r3, #64	; 0x40
 80097a6:	eba0 000a 	sub.w	r0, r0, sl
 80097aa:	fa03 f000 	lsl.w	r0, r3, r0
 80097ae:	9b04      	ldr	r3, [sp, #16]
 80097b0:	4303      	orrs	r3, r0
 80097b2:	3401      	adds	r4, #1
 80097b4:	9304      	str	r3, [sp, #16]
 80097b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ba:	4826      	ldr	r0, [pc, #152]	; (8009854 <_svfiprintf_r+0x1f0>)
 80097bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097c0:	2206      	movs	r2, #6
 80097c2:	f7f6 fd2d 	bl	8000220 <memchr>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d038      	beq.n	800983c <_svfiprintf_r+0x1d8>
 80097ca:	4b23      	ldr	r3, [pc, #140]	; (8009858 <_svfiprintf_r+0x1f4>)
 80097cc:	bb1b      	cbnz	r3, 8009816 <_svfiprintf_r+0x1b2>
 80097ce:	9b03      	ldr	r3, [sp, #12]
 80097d0:	3307      	adds	r3, #7
 80097d2:	f023 0307 	bic.w	r3, r3, #7
 80097d6:	3308      	adds	r3, #8
 80097d8:	9303      	str	r3, [sp, #12]
 80097da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097dc:	4433      	add	r3, r6
 80097de:	9309      	str	r3, [sp, #36]	; 0x24
 80097e0:	e767      	b.n	80096b2 <_svfiprintf_r+0x4e>
 80097e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80097e6:	460c      	mov	r4, r1
 80097e8:	2001      	movs	r0, #1
 80097ea:	e7a5      	b.n	8009738 <_svfiprintf_r+0xd4>
 80097ec:	2300      	movs	r3, #0
 80097ee:	3401      	adds	r4, #1
 80097f0:	9305      	str	r3, [sp, #20]
 80097f2:	4619      	mov	r1, r3
 80097f4:	f04f 0c0a 	mov.w	ip, #10
 80097f8:	4620      	mov	r0, r4
 80097fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097fe:	3a30      	subs	r2, #48	; 0x30
 8009800:	2a09      	cmp	r2, #9
 8009802:	d903      	bls.n	800980c <_svfiprintf_r+0x1a8>
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0c5      	beq.n	8009794 <_svfiprintf_r+0x130>
 8009808:	9105      	str	r1, [sp, #20]
 800980a:	e7c3      	b.n	8009794 <_svfiprintf_r+0x130>
 800980c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009810:	4604      	mov	r4, r0
 8009812:	2301      	movs	r3, #1
 8009814:	e7f0      	b.n	80097f8 <_svfiprintf_r+0x194>
 8009816:	ab03      	add	r3, sp, #12
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	462a      	mov	r2, r5
 800981c:	4b0f      	ldr	r3, [pc, #60]	; (800985c <_svfiprintf_r+0x1f8>)
 800981e:	a904      	add	r1, sp, #16
 8009820:	4638      	mov	r0, r7
 8009822:	f3af 8000 	nop.w
 8009826:	1c42      	adds	r2, r0, #1
 8009828:	4606      	mov	r6, r0
 800982a:	d1d6      	bne.n	80097da <_svfiprintf_r+0x176>
 800982c:	89ab      	ldrh	r3, [r5, #12]
 800982e:	065b      	lsls	r3, r3, #25
 8009830:	f53f af2c 	bmi.w	800968c <_svfiprintf_r+0x28>
 8009834:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009836:	b01d      	add	sp, #116	; 0x74
 8009838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983c:	ab03      	add	r3, sp, #12
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	462a      	mov	r2, r5
 8009842:	4b06      	ldr	r3, [pc, #24]	; (800985c <_svfiprintf_r+0x1f8>)
 8009844:	a904      	add	r1, sp, #16
 8009846:	4638      	mov	r0, r7
 8009848:	f7ff f8dc 	bl	8008a04 <_printf_i>
 800984c:	e7eb      	b.n	8009826 <_svfiprintf_r+0x1c2>
 800984e:	bf00      	nop
 8009850:	0801b440 	.word	0x0801b440
 8009854:	0801b44a 	.word	0x0801b44a
 8009858:	00000000 	.word	0x00000000
 800985c:	080095ad 	.word	0x080095ad
 8009860:	0801b446 	.word	0x0801b446

08009864 <__sread>:
 8009864:	b510      	push	{r4, lr}
 8009866:	460c      	mov	r4, r1
 8009868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800986c:	f000 f89c 	bl	80099a8 <_read_r>
 8009870:	2800      	cmp	r0, #0
 8009872:	bfab      	itete	ge
 8009874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009876:	89a3      	ldrhlt	r3, [r4, #12]
 8009878:	181b      	addge	r3, r3, r0
 800987a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800987e:	bfac      	ite	ge
 8009880:	6563      	strge	r3, [r4, #84]	; 0x54
 8009882:	81a3      	strhlt	r3, [r4, #12]
 8009884:	bd10      	pop	{r4, pc}

08009886 <__swrite>:
 8009886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800988a:	461f      	mov	r7, r3
 800988c:	898b      	ldrh	r3, [r1, #12]
 800988e:	05db      	lsls	r3, r3, #23
 8009890:	4605      	mov	r5, r0
 8009892:	460c      	mov	r4, r1
 8009894:	4616      	mov	r6, r2
 8009896:	d505      	bpl.n	80098a4 <__swrite+0x1e>
 8009898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800989c:	2302      	movs	r3, #2
 800989e:	2200      	movs	r2, #0
 80098a0:	f000 f868 	bl	8009974 <_lseek_r>
 80098a4:	89a3      	ldrh	r3, [r4, #12]
 80098a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098ae:	81a3      	strh	r3, [r4, #12]
 80098b0:	4632      	mov	r2, r6
 80098b2:	463b      	mov	r3, r7
 80098b4:	4628      	mov	r0, r5
 80098b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098ba:	f000 b817 	b.w	80098ec <_write_r>

080098be <__sseek>:
 80098be:	b510      	push	{r4, lr}
 80098c0:	460c      	mov	r4, r1
 80098c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c6:	f000 f855 	bl	8009974 <_lseek_r>
 80098ca:	1c43      	adds	r3, r0, #1
 80098cc:	89a3      	ldrh	r3, [r4, #12]
 80098ce:	bf15      	itete	ne
 80098d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80098d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098da:	81a3      	strheq	r3, [r4, #12]
 80098dc:	bf18      	it	ne
 80098de:	81a3      	strhne	r3, [r4, #12]
 80098e0:	bd10      	pop	{r4, pc}

080098e2 <__sclose>:
 80098e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e6:	f000 b813 	b.w	8009910 <_close_r>
	...

080098ec <_write_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	4d07      	ldr	r5, [pc, #28]	; (800990c <_write_r+0x20>)
 80098f0:	4604      	mov	r4, r0
 80098f2:	4608      	mov	r0, r1
 80098f4:	4611      	mov	r1, r2
 80098f6:	2200      	movs	r2, #0
 80098f8:	602a      	str	r2, [r5, #0]
 80098fa:	461a      	mov	r2, r3
 80098fc:	f7f7 ffe7 	bl	80018ce <_write>
 8009900:	1c43      	adds	r3, r0, #1
 8009902:	d102      	bne.n	800990a <_write_r+0x1e>
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	b103      	cbz	r3, 800990a <_write_r+0x1e>
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	bd38      	pop	{r3, r4, r5, pc}
 800990c:	20026300 	.word	0x20026300

08009910 <_close_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4d06      	ldr	r5, [pc, #24]	; (800992c <_close_r+0x1c>)
 8009914:	2300      	movs	r3, #0
 8009916:	4604      	mov	r4, r0
 8009918:	4608      	mov	r0, r1
 800991a:	602b      	str	r3, [r5, #0]
 800991c:	f7f7 fff3 	bl	8001906 <_close>
 8009920:	1c43      	adds	r3, r0, #1
 8009922:	d102      	bne.n	800992a <_close_r+0x1a>
 8009924:	682b      	ldr	r3, [r5, #0]
 8009926:	b103      	cbz	r3, 800992a <_close_r+0x1a>
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	bd38      	pop	{r3, r4, r5, pc}
 800992c:	20026300 	.word	0x20026300

08009930 <_fstat_r>:
 8009930:	b538      	push	{r3, r4, r5, lr}
 8009932:	4d07      	ldr	r5, [pc, #28]	; (8009950 <_fstat_r+0x20>)
 8009934:	2300      	movs	r3, #0
 8009936:	4604      	mov	r4, r0
 8009938:	4608      	mov	r0, r1
 800993a:	4611      	mov	r1, r2
 800993c:	602b      	str	r3, [r5, #0]
 800993e:	f7f7 ffee 	bl	800191e <_fstat>
 8009942:	1c43      	adds	r3, r0, #1
 8009944:	d102      	bne.n	800994c <_fstat_r+0x1c>
 8009946:	682b      	ldr	r3, [r5, #0]
 8009948:	b103      	cbz	r3, 800994c <_fstat_r+0x1c>
 800994a:	6023      	str	r3, [r4, #0]
 800994c:	bd38      	pop	{r3, r4, r5, pc}
 800994e:	bf00      	nop
 8009950:	20026300 	.word	0x20026300

08009954 <_isatty_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4d06      	ldr	r5, [pc, #24]	; (8009970 <_isatty_r+0x1c>)
 8009958:	2300      	movs	r3, #0
 800995a:	4604      	mov	r4, r0
 800995c:	4608      	mov	r0, r1
 800995e:	602b      	str	r3, [r5, #0]
 8009960:	f7f7 ffed 	bl	800193e <_isatty>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_isatty_r+0x1a>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	b103      	cbz	r3, 800996e <_isatty_r+0x1a>
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	20026300 	.word	0x20026300

08009974 <_lseek_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4d07      	ldr	r5, [pc, #28]	; (8009994 <_lseek_r+0x20>)
 8009978:	4604      	mov	r4, r0
 800997a:	4608      	mov	r0, r1
 800997c:	4611      	mov	r1, r2
 800997e:	2200      	movs	r2, #0
 8009980:	602a      	str	r2, [r5, #0]
 8009982:	461a      	mov	r2, r3
 8009984:	f7f7 ffe6 	bl	8001954 <_lseek>
 8009988:	1c43      	adds	r3, r0, #1
 800998a:	d102      	bne.n	8009992 <_lseek_r+0x1e>
 800998c:	682b      	ldr	r3, [r5, #0]
 800998e:	b103      	cbz	r3, 8009992 <_lseek_r+0x1e>
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	bd38      	pop	{r3, r4, r5, pc}
 8009994:	20026300 	.word	0x20026300

08009998 <_malloc_usable_size_r>:
 8009998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800999c:	1f18      	subs	r0, r3, #4
 800999e:	2b00      	cmp	r3, #0
 80099a0:	bfbc      	itt	lt
 80099a2:	580b      	ldrlt	r3, [r1, r0]
 80099a4:	18c0      	addlt	r0, r0, r3
 80099a6:	4770      	bx	lr

080099a8 <_read_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4d07      	ldr	r5, [pc, #28]	; (80099c8 <_read_r+0x20>)
 80099ac:	4604      	mov	r4, r0
 80099ae:	4608      	mov	r0, r1
 80099b0:	4611      	mov	r1, r2
 80099b2:	2200      	movs	r2, #0
 80099b4:	602a      	str	r2, [r5, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	f7f7 ff6c 	bl	8001894 <_read>
 80099bc:	1c43      	adds	r3, r0, #1
 80099be:	d102      	bne.n	80099c6 <_read_r+0x1e>
 80099c0:	682b      	ldr	r3, [r5, #0]
 80099c2:	b103      	cbz	r3, 80099c6 <_read_r+0x1e>
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	20026300 	.word	0x20026300

080099cc <_init>:
 80099cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ce:	bf00      	nop
 80099d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099d2:	bc08      	pop	{r3}
 80099d4:	469e      	mov	lr, r3
 80099d6:	4770      	bx	lr

080099d8 <_fini>:
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	bf00      	nop
 80099dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099de:	bc08      	pop	{r3}
 80099e0:	469e      	mov	lr, r3
 80099e2:	4770      	bx	lr
