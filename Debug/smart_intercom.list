
smart_intercom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011c14  08009e8c  08009e8c  00019e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801baa0  0801baa0  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  0801baa0  0801baa0  0002baa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801baa8  0801baa8  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801baa8  0801baa8  0002baa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801baac  0801baac  0002baac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0801bab0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025ef8  20000074  0801bb24  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20025f6c  0801bb24  00035f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000226b5  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044b8  00000000  00000000  00052759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00056c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  000580d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b8c4  00000000  00000000  000593d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea11  00000000  00000000  00084c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7327  00000000  00000000  000a36ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018a9d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fdc  00000000  00000000  0018aa28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009e74 	.word	0x08009e74

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08009e74 	.word	0x08009e74

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b96e 	b.w	80005c4 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468c      	mov	ip, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8083 	bne.w	8000416 <__udivmoddi4+0x116>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d947      	bls.n	80003a6 <__udivmoddi4+0xa6>
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	b142      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031c:	f1c2 0020 	rsb	r0, r2, #32
 8000320:	fa24 f000 	lsr.w	r0, r4, r0
 8000324:	4091      	lsls	r1, r2
 8000326:	4097      	lsls	r7, r2
 8000328:	ea40 0c01 	orr.w	ip, r0, r1
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbbc f6f8 	udiv	r6, ip, r8
 8000338:	fa1f fe87 	uxth.w	lr, r7
 800033c:	fb08 c116 	mls	r1, r8, r6, ip
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb06 f10e 	mul.w	r1, r6, lr
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000352:	f080 8119 	bcs.w	8000588 <__udivmoddi4+0x288>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8116 	bls.w	8000588 <__udivmoddi4+0x288>
 800035c:	3e02      	subs	r6, #2
 800035e:	443b      	add	r3, r7
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45a6      	cmp	lr, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	193c      	adds	r4, r7, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037e:	f080 8105 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f240 8102 	bls.w	800058c <__udivmoddi4+0x28c>
 8000388:	3802      	subs	r0, #2
 800038a:	443c      	add	r4, r7
 800038c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	2600      	movs	r6, #0
 8000396:	b11d      	cbz	r5, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c5 4300 	strd	r4, r3, [r5]
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	b902      	cbnz	r2, 80003aa <__udivmoddi4+0xaa>
 80003a8:	deff      	udf	#255	; 0xff
 80003aa:	fab2 f282 	clz	r2, r2
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	d150      	bne.n	8000454 <__udivmoddi4+0x154>
 80003b2:	1bcb      	subs	r3, r1, r7
 80003b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	2601      	movs	r6, #1
 80003be:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c2:	0c21      	lsrs	r1, r4, #16
 80003c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb08 f30c 	mul.w	r3, r8, ip
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0xe4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0xe2>
 80003dc:	428b      	cmp	r3, r1
 80003de:	f200 80e9 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1ac9      	subs	r1, r1, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x10c>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x10a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80d9 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e7bf      	b.n	8000396 <__udivmoddi4+0x96>
 8000416:	428b      	cmp	r3, r1
 8000418:	d909      	bls.n	800042e <__udivmoddi4+0x12e>
 800041a:	2d00      	cmp	r5, #0
 800041c:	f000 80b1 	beq.w	8000582 <__udivmoddi4+0x282>
 8000420:	2600      	movs	r6, #0
 8000422:	e9c5 0100 	strd	r0, r1, [r5]
 8000426:	4630      	mov	r0, r6
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	fab3 f683 	clz	r6, r3
 8000432:	2e00      	cmp	r6, #0
 8000434:	d14a      	bne.n	80004cc <__udivmoddi4+0x1cc>
 8000436:	428b      	cmp	r3, r1
 8000438:	d302      	bcc.n	8000440 <__udivmoddi4+0x140>
 800043a:	4282      	cmp	r2, r0
 800043c:	f200 80b8 	bhi.w	80005b0 <__udivmoddi4+0x2b0>
 8000440:	1a84      	subs	r4, r0, r2
 8000442:	eb61 0103 	sbc.w	r1, r1, r3
 8000446:	2001      	movs	r0, #1
 8000448:	468c      	mov	ip, r1
 800044a:	2d00      	cmp	r5, #0
 800044c:	d0a8      	beq.n	80003a0 <__udivmoddi4+0xa0>
 800044e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f603 	lsr.w	r6, r0, r3
 800045c:	4097      	lsls	r7, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000466:	40d9      	lsrs	r1, r3
 8000468:	4330      	orrs	r0, r6
 800046a:	0c03      	lsrs	r3, r0, #16
 800046c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000470:	fa1f f887 	uxth.w	r8, r7
 8000474:	fb0e 1116 	mls	r1, lr, r6, r1
 8000478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047c:	fb06 f108 	mul.w	r1, r6, r8
 8000480:	4299      	cmp	r1, r3
 8000482:	fa04 f402 	lsl.w	r4, r4, r2
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x19c>
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800048e:	f080 808d 	bcs.w	80005ac <__udivmoddi4+0x2ac>
 8000492:	4299      	cmp	r1, r3
 8000494:	f240 808a 	bls.w	80005ac <__udivmoddi4+0x2ac>
 8000498:	3e02      	subs	r6, #2
 800049a:	443b      	add	r3, r7
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b281      	uxth	r1, r0
 80004a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb00 f308 	mul.w	r3, r0, r8
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x1c4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ba:	d273      	bcs.n	80005a4 <__udivmoddi4+0x2a4>
 80004bc:	428b      	cmp	r3, r1
 80004be:	d971      	bls.n	80005a4 <__udivmoddi4+0x2a4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4439      	add	r1, r7
 80004c4:	1acb      	subs	r3, r1, r3
 80004c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ca:	e778      	b.n	80003be <__udivmoddi4+0xbe>
 80004cc:	f1c6 0c20 	rsb	ip, r6, #32
 80004d0:	fa03 f406 	lsl.w	r4, r3, r6
 80004d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004d8:	431c      	orrs	r4, r3
 80004da:	fa20 f70c 	lsr.w	r7, r0, ip
 80004de:	fa01 f306 	lsl.w	r3, r1, r6
 80004e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ea:	431f      	orrs	r7, r3
 80004ec:	0c3b      	lsrs	r3, r7, #16
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fa1f f884 	uxth.w	r8, r4
 80004f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000502:	458a      	cmp	sl, r1
 8000504:	fa02 f206 	lsl.w	r2, r2, r6
 8000508:	fa00 f306 	lsl.w	r3, r0, r6
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x220>
 800050e:	1861      	adds	r1, r4, r1
 8000510:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000514:	d248      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 8000516:	458a      	cmp	sl, r1
 8000518:	d946      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800051a:	f1a9 0902 	sub.w	r9, r9, #2
 800051e:	4421      	add	r1, r4
 8000520:	eba1 010a 	sub.w	r1, r1, sl
 8000524:	b2bf      	uxth	r7, r7
 8000526:	fbb1 f0fe 	udiv	r0, r1, lr
 800052a:	fb0e 1110 	mls	r1, lr, r0, r1
 800052e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000532:	fb00 f808 	mul.w	r8, r0, r8
 8000536:	45b8      	cmp	r8, r7
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x24a>
 800053a:	19e7      	adds	r7, r4, r7
 800053c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000540:	d22e      	bcs.n	80005a0 <__udivmoddi4+0x2a0>
 8000542:	45b8      	cmp	r8, r7
 8000544:	d92c      	bls.n	80005a0 <__udivmoddi4+0x2a0>
 8000546:	3802      	subs	r0, #2
 8000548:	4427      	add	r7, r4
 800054a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800054e:	eba7 0708 	sub.w	r7, r7, r8
 8000552:	fba0 8902 	umull	r8, r9, r0, r2
 8000556:	454f      	cmp	r7, r9
 8000558:	46c6      	mov	lr, r8
 800055a:	4649      	mov	r1, r9
 800055c:	d31a      	bcc.n	8000594 <__udivmoddi4+0x294>
 800055e:	d017      	beq.n	8000590 <__udivmoddi4+0x290>
 8000560:	b15d      	cbz	r5, 800057a <__udivmoddi4+0x27a>
 8000562:	ebb3 020e 	subs.w	r2, r3, lr
 8000566:	eb67 0701 	sbc.w	r7, r7, r1
 800056a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800056e:	40f2      	lsrs	r2, r6
 8000570:	ea4c 0202 	orr.w	r2, ip, r2
 8000574:	40f7      	lsrs	r7, r6
 8000576:	e9c5 2700 	strd	r2, r7, [r5]
 800057a:	2600      	movs	r6, #0
 800057c:	4631      	mov	r1, r6
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e70b      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0x60>
 800058c:	4618      	mov	r0, r3
 800058e:	e6fd      	b.n	800038c <__udivmoddi4+0x8c>
 8000590:	4543      	cmp	r3, r8
 8000592:	d2e5      	bcs.n	8000560 <__udivmoddi4+0x260>
 8000594:	ebb8 0e02 	subs.w	lr, r8, r2
 8000598:	eb69 0104 	sbc.w	r1, r9, r4
 800059c:	3801      	subs	r0, #1
 800059e:	e7df      	b.n	8000560 <__udivmoddi4+0x260>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e7d2      	b.n	800054a <__udivmoddi4+0x24a>
 80005a4:	4660      	mov	r0, ip
 80005a6:	e78d      	b.n	80004c4 <__udivmoddi4+0x1c4>
 80005a8:	4681      	mov	r9, r0
 80005aa:	e7b9      	b.n	8000520 <__udivmoddi4+0x220>
 80005ac:	4666      	mov	r6, ip
 80005ae:	e775      	b.n	800049c <__udivmoddi4+0x19c>
 80005b0:	4630      	mov	r0, r6
 80005b2:	e74a      	b.n	800044a <__udivmoddi4+0x14a>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	4439      	add	r1, r7
 80005ba:	e713      	b.n	80003e4 <__udivmoddi4+0xe4>
 80005bc:	3802      	subs	r0, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e724      	b.n	800040c <__udivmoddi4+0x10c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <MX_ADC1_Init+0x78>)
 80005dc:	4a19      	ldr	r2, [pc, #100]	; (8000644 <MX_ADC1_Init+0x7c>)
 80005de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_ADC1_Init+0x78>)
 80005e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_ADC1_Init+0x78>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_ADC1_Init+0x78>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_ADC1_Init+0x78>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_ADC1_Init+0x78>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_ADC1_Init+0x78>)
 8000604:	2200      	movs	r2, #0
 8000606:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <MX_ADC1_Init+0x78>)
 800060a:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <MX_ADC1_Init+0x80>)
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_ADC1_Init+0x78>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_ADC1_Init+0x78>)
 8000616:	2202      	movs	r2, #2
 8000618:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_ADC1_Init+0x78>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_ADC1_Init+0x78>)
 8000624:	2201      	movs	r2, #1
 8000626:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_ADC1_Init+0x78>)
 800062a:	f002 fba5 	bl	8002d78 <HAL_ADC_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000634:	f001 f8b4 	bl	80017a0 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20025c4c 	.word	0x20025c4c
 8000644:	40012000 	.word	0x40012000
 8000648:	0f000001 	.word	0x0f000001

0800064c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <HAL_ADC_MspInit+0x7c>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d127      	bne.n	80006be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <HAL_ADC_MspInit+0x80>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <HAL_ADC_MspInit+0x80>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067c:	6453      	str	r3, [r2, #68]	; 0x44
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <HAL_ADC_MspInit+0x80>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <HAL_ADC_MspInit+0x80>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <HAL_ADC_MspInit+0x80>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <HAL_ADC_MspInit+0x80>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = TOUCH_XR_Pin;
 80006a6:	2304      	movs	r3, #4
 80006a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006aa:	2303      	movs	r3, #3
 80006ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TOUCH_XR_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <HAL_ADC_MspInit+0x84>)
 80006ba:	f003 fac9 	bl	8003c50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	; 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40012000 	.word	0x40012000
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020000 	.word	0x40020000

080006d4 <app_main_init>:
{
	setup();
}
//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_init()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	unsigned int l,ll = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]

	NT35510_Init();
 80006de:	f000 fbb1 	bl	8000e44 <NT35510_Init>

	LCD_ClearScreen(0xFFFFU);
 80006e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006e6:	f000 fae7 	bl	8000cb8 <LCD_ClearScreen>
	LCD_SetDirection(HORIZONTAL_RIGHT);
 80006ea:	2003      	movs	r0, #3
 80006ec:	f000 fa8c 	bl	8000c08 <LCD_SetDirection>

	//==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~
	// ~=~=~ FERI logo ~=~=~
	LCD_ClearScreen(0xFFFFU);
 80006f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006f4:	f000 fae0 	bl	8000cb8 <LCD_ClearScreen>
	LCD_SetWindow(240, 184, 240 + FERI_LOGO_IMG_W -1, 184 + FERI_LOGO_IMG_H -1);
 80006f8:	f44f 7393 	mov.w	r3, #294	; 0x126
 80006fc:	f240 222f 	movw	r2, #559	; 0x22f
 8000700:	21b8      	movs	r1, #184	; 0xb8
 8000702:	20f0      	movs	r0, #240	; 0xf0
 8000704:	f000 fa18 	bl	8000b38 <LCD_SetWindow>
	for(l = 0; l < FERI_LOGO_IMG_SIZE; l+=2)
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	e013      	b.n	8000736 <app_main_init+0x62>
	{
		FSMC_WR_DAT(((g_feri_logo_image[l] << 8) & 0xFF00U) | (g_feri_logo_image[l+1] & 0x00FFU));
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <app_main_init+0xbc>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b29b      	uxth	r3, r3
 8000718:	021b      	lsls	r3, r3, #8
 800071a:	b29a      	uxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3301      	adds	r3, #1
 8000720:	491b      	ldr	r1, [pc, #108]	; (8000790 <app_main_init+0xbc>)
 8000722:	5ccb      	ldrb	r3, [r1, r3]
 8000724:	b29b      	uxth	r3, r3
 8000726:	4313      	orrs	r3, r2
 8000728:	b29b      	uxth	r3, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f9f2 	bl	8000b14 <FSMC_WR_DAT>
	for(l = 0; l < FERI_LOGO_IMG_SIZE; l+=2)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3302      	adds	r3, #2
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a16      	ldr	r2, [pc, #88]	; (8000794 <app_main_init+0xc0>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d9e7      	bls.n	800070e <app_main_init+0x3a>
	for(l = 0; l < FERI_LOGO_IMG_SIZE; l+=2)
	{
		FSMC_WR_DAT(((g_feri_logo_image[l] << 8) & 0xFF00U) | (g_feri_logo_image[l+1] & 0x00FFU));
	}
	HAL_Delay(1000);
*/	LCD_SetWindow(0, 0, 799, 479);
 800073e:	f240 13df 	movw	r3, #479	; 0x1df
 8000742:	f240 321f 	movw	r2, #799	; 0x31f
 8000746:	2100      	movs	r1, #0
 8000748:	2000      	movs	r0, #0
 800074a:	f000 f9f5 	bl	8000b38 <LCD_SetWindow>
	LCD_ClearScreen(0x1CFCU);
 800074e:	f641 40fc 	movw	r0, #7420	; 0x1cfc
 8000752:	f000 fab1 	bl	8000cb8 <LCD_ClearScreen>
	OV7670_RST_HIGH;
	HAL_Delay(300);

	ov7670_initialization();*/

	ov7670_init1();
 8000756:	f001 f993 	bl	8001a80 <ov7670_init1>
	HAL_Delay(300);
 800075a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800075e:	f002 fae7 	bl	8002d30 <HAL_Delay>

	TIM1->DIER |= TIM_DIER_TDE;
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <app_main_init+0xc4>)
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <app_main_init+0xc4>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076c:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start(&htim1);
 800076e:	480b      	ldr	r0, [pc, #44]	; (800079c <app_main_init+0xc8>)
 8000770:	f006 ff42 	bl	80075f8 <HAL_TIM_Base_Start>

	HAL_NVIC_SetPriority(OV7670_VSYNC_EXTI_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2007      	movs	r0, #7
 800077a:	f002 ffba 	bl	80036f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7670_VSYNC_EXTI_IRQn);
 800077e:	2007      	movs	r0, #7
 8000780:	f002 ffd3 	bl	800372a <HAL_NVIC_EnableIRQ>

	touch_init();
 8000784:	f001 fde6 	bl	8002354 <touch_init>

}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	08009eb4 	.word	0x08009eb4
 8000794:	0001157f 	.word	0x0001157f
 8000798:	40010000 	.word	0x40010000
 800079c:	20025d98 	.word	0x20025d98

080007a0 <app_main_loop>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_loop()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af02      	add	r7, sp, #8
	uint8_t buff[15] = {0};
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	f8c3 2007 	str.w	r2, [r3, #7]
	uint32_t milis = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t milis2 = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
	int i,j,z = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
	int k = -2;
 80007c4:	f06f 0301 	mvn.w	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]



	LCD_SetDirection(VERTICAL_UP);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 fa1c 	bl	8000c08 <LCD_SetDirection>
	LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
 80007d0:	f240 1303 	movw	r3, #259	; 0x103
 80007d4:	f240 1253 	movw	r2, #339	; 0x153
 80007d8:	2114      	movs	r1, #20
 80007da:	2014      	movs	r0, #20
 80007dc:	f000 f9ac 	bl	8000b38 <LCD_SetWindow>
		else
			sprintf(buff, "\n");
		sprintf(buff + strlen(buff),"%03d",abs(g_no_person_score));
		LCD_PrintStr(20, 450, 0xffff, 0x0000, buff, 5);
*/
		uart_tx_process();
 80007e0:	f001 fe1a 	bl	8002418 <uart_tx_process>
		uart_rx_process();
 80007e4:	f001 ff44 	bl	8002670 <uart_rx_process>
		touch_process();
 80007e8:	f001 fdda 	bl	80023a0 <touch_process>

		if((g_touch_coordinates.x != 0) && (g_touch_coordinates.y != 0))
 80007ec:	4b33      	ldr	r3, [pc, #204]	; (80008bc <app_main_loop+0x11c>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d018      	beq.n	8000826 <app_main_loop+0x86>
 80007f4:	4b31      	ldr	r3, [pc, #196]	; (80008bc <app_main_loop+0x11c>)
 80007f6:	885b      	ldrh	r3, [r3, #2]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d014      	beq.n	8000826 <app_main_loop+0x86>
		{
			sprintf(buff, "%04d, %04d", g_touch_coordinates.x, g_touch_coordinates.y);
 80007fc:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <app_main_loop+0x11c>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <app_main_loop+0x11c>)
 8000804:	885b      	ldrh	r3, [r3, #2]
 8000806:	1d38      	adds	r0, r7, #4
 8000808:	492d      	ldr	r1, [pc, #180]	; (80008c0 <app_main_loop+0x120>)
 800080a:	f008 fcc9 	bl	80091a0 <siprintf>
			LCD_PrintStr(20, 480, 0, 0x841FU, buff, 4);
 800080e:	2304      	movs	r3, #4
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	f248 431f 	movw	r3, #33823	; 0x841f
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000820:	2014      	movs	r0, #20
 8000822:	f000 fad9 	bl	8000dd8 <LCD_PrintStr>

			FSMC_WR_DAT(graysc);
		}
*/		//*********************************************************************************************************************

		LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
 8000826:	f240 1303 	movw	r3, #259	; 0x103
 800082a:	f240 1253 	movw	r2, #339	; 0x153
 800082e:	2114      	movs	r1, #20
 8000830:	2014      	movs	r0, #20
 8000832:	f000 f981 	bl	8000b38 <LCD_SetWindow>
		for(j = 0; j <= OV7670_FRAME_SIZE_QVGA - 2; j+=2)
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
 800083a:	e013      	b.n	8000864 <app_main_loop+0xc4>
			*/

			//int red =	(g_cam_buff[j] & 0xF8U) >> 3;
			//int green =	((g_cam_buff[j] & 0x07U) << 3) | ((g_cam_buff[j+1] & 0xC0U) >> 6);
			//int blue =	((g_cam_buff[j+1] & 0x1FU));
			FSMC_WR_DAT(((g_cam_buff[j] << 8) & 0xFF00U) | (g_cam_buff[j+1] & 0x00FFU));
 800083c:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <app_main_loop+0x124>)
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	4413      	add	r3, r2
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b29b      	uxth	r3, r3
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	b29a      	uxth	r2, r3
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3301      	adds	r3, #1
 800084e:	491d      	ldr	r1, [pc, #116]	; (80008c4 <app_main_loop+0x124>)
 8000850:	5ccb      	ldrb	r3, [r1, r3]
 8000852:	b29b      	uxth	r3, r3
 8000854:	4313      	orrs	r3, r2
 8000856:	b29b      	uxth	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	f000 f95b 	bl	8000b14 <FSMC_WR_DAT>
		for(j = 0; j <= OV7670_FRAME_SIZE_QVGA - 2; j+=2)
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3302      	adds	r3, #2
 8000862:	61fb      	str	r3, [r7, #28]
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <app_main_loop+0x128>)
 8000868:	4293      	cmp	r3, r2
 800086a:	dde7      	ble.n	800083c <app_main_loop+0x9c>
		}

		if(HAL_GetTick() > milis + 1000)
 800086c:	f002 fa54 	bl	8002d18 <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000874:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000878:	429a      	cmp	r2, r3
 800087a:	d90d      	bls.n	8000898 <app_main_loop+0xf8>
		{
			milis = HAL_GetTick();
 800087c:	f002 fa4c 	bl	8002d18 <HAL_GetTick>
 8000880:	6278      	str	r0, [r7, #36]	; 0x24
			if(milis >= (0xFFFFFFFFU - 1000U))
 8000882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000884:	f46f 727a 	mvn.w	r2, #1000	; 0x3e8
 8000888:	4293      	cmp	r3, r2
 800088a:	d302      	bcc.n	8000892 <app_main_loop+0xf2>
			{
				milis = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
 8000890:	e002      	b.n	8000898 <app_main_loop+0xf8>
			}


			else
			{// every second
				uart_write("hello");
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <app_main_loop+0x12c>)
 8000894:	f001 fe38 	bl	8002508 <uart_write>
			}
		}
		if(HAL_GetTick() > milis2 + 100)
 8000898:	f002 fa3e 	bl	8002d18 <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	3364      	adds	r3, #100	; 0x64
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d99c      	bls.n	80007e0 <app_main_loop+0x40>
		{
			milis2 = HAL_GetTick();
 80008a6:	f002 fa37 	bl	8002d18 <HAL_GetTick>
 80008aa:	6238      	str	r0, [r7, #32]
			if(milis2 >= (0xFFFFFFFFU - 100U)) //?
 80008ac:	6a3b      	ldr	r3, [r7, #32]
 80008ae:	f113 0f66 	cmn.w	r3, #102	; 0x66
 80008b2:	d995      	bls.n	80007e0 <app_main_loop+0x40>
			{
				milis2 = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
		uart_tx_process();
 80008b8:	e792      	b.n	80007e0 <app_main_loop+0x40>
 80008ba:	bf00      	nop
 80008bc:	20025b30 	.word	0x20025b30
 80008c0:	08009e8c 	.word	0x08009e8c
 80008c4:	200000a4 	.word	0x200000a4
 80008c8:	000257fe 	.word	0x000257fe
 80008cc:	08009e98 	.word	0x08009e98

080008d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_DMA_Init+0x30>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <MX_DMA_Init+0x30>)
 80008e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_DMA_Init+0x30>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800

08000904 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
 800091a:	615a      	str	r2, [r3, #20]
 800091c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800091e:	463b      	mov	r3, r7
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
 800092c:	615a      	str	r2, [r3, #20]
 800092e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000930:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <MX_FSMC_Init+0xf0>)
 8000932:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000936:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000938:	4b2e      	ldr	r3, [pc, #184]	; (80009f4 <MX_FSMC_Init+0xf0>)
 800093a:	4a2f      	ldr	r2, [pc, #188]	; (80009f8 <MX_FSMC_Init+0xf4>)
 800093c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MX_FSMC_Init+0xf0>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <MX_FSMC_Init+0xf0>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800094a:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <MX_FSMC_Init+0xf0>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <MX_FSMC_Init+0xf0>)
 8000952:	2210      	movs	r2, #16
 8000954:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <MX_FSMC_Init+0xf0>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <MX_FSMC_Init+0xf0>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000962:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <MX_FSMC_Init+0xf0>)
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_FSMC_Init+0xf0>)
 800096a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800096e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000970:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <MX_FSMC_Init+0xf0>)
 8000972:	2200      	movs	r2, #0
 8000974:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_FSMC_Init+0xf0>)
 8000978:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_FSMC_Init+0xf0>)
 8000980:	2200      	movs	r2, #0
 8000982:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_FSMC_Init+0xf0>)
 8000986:	2200      	movs	r2, #0
 8000988:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_FSMC_Init+0xf0>)
 800098c:	2200      	movs	r2, #0
 800098e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_FSMC_Init+0xf0>)
 8000992:	2200      	movs	r2, #0
 8000994:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_FSMC_Init+0xf0>)
 8000998:	2200      	movs	r2, #0
 800099a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 9;
 800099c:	2309      	movs	r3, #9
 800099e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80009a0:	230f      	movs	r3, #15
 80009a2:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 5;
 80009a4:	2305      	movs	r3, #5
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80009ac:	2310      	movs	r3, #16
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80009b0:	2311      	movs	r3, #17
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80009b4:	2300      	movs	r3, #0
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80009bc:	230f      	movs	r3, #15
 80009be:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 80009c0:	2303      	movs	r3, #3
 80009c2:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80009c8:	2310      	movs	r3, #16
 80009ca:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80009cc:	2311      	movs	r3, #17
 80009ce:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80009d4:	463a      	mov	r2, r7
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_FSMC_Init+0xf0>)
 80009de:	f006 fd77 	bl	80074d0 <HAL_SRAM_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_FSMC_Init+0xe8>
  {
    Error_Handler( );
 80009e8:	f000 feda 	bl	80017a0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80009ec:	bf00      	nop
 80009ee:	3738      	adds	r7, #56	; 0x38
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20025c94 	.word	0x20025c94
 80009f8:	a0000104 	.word	0xa0000104

080009fc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000a10:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <HAL_FSMC_MspInit+0xc8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d151      	bne.n	8000abc <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8000a18:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <HAL_FSMC_MspInit+0xc8>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <HAL_FSMC_MspInit+0xcc>)
 8000a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a26:	4a28      	ldr	r2, [pc, #160]	; (8000ac8 <HAL_FSMC_MspInit+0xcc>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6393      	str	r3, [r2, #56]	; 0x38
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <HAL_FSMC_MspInit+0xcc>)
 8000a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000a3a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000a3e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	481d      	ldr	r0, [pc, #116]	; (8000acc <HAL_FSMC_MspInit+0xd0>)
 8000a56:	f003 f8fb 	bl	8003c50 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	4816      	ldr	r0, [pc, #88]	; (8000ad0 <HAL_FSMC_MspInit+0xd4>)
 8000a76:	f003 f8eb 	bl	8003c50 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000a7a:	f64c 63b0 	movw	r3, #52912	; 0xceb0
 8000a7e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	480f      	ldr	r0, [pc, #60]	; (8000ad4 <HAL_FSMC_MspInit+0xd8>)
 8000a96:	f003 f8db 	bl	8003c50 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aac:	230a      	movs	r3, #10
 8000aae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <HAL_FSMC_MspInit+0xdc>)
 8000ab6:	f003 f8cb 	bl	8003c50 <HAL_GPIO_Init>
 8000aba:	e000      	b.n	8000abe <HAL_FSMC_MspInit+0xc2>
    return;
 8000abc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000090 	.word	0x20000090
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020c00 	.word	0x40020c00
 8000ad8:	40020800 	.word	0x40020800

08000adc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000ae4:	f7ff ff8a 	bl	80009fc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <FSMC_WR_REG>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void FSMC_WR_REG(uint32_t Reg)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	LCD_FSMC->REG = Reg;
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <FSMC_WR_REG+0x20>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	b292      	uxth	r2, r2
 8000b00:	801a      	strh	r2, [r3, #0]
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000000 	.word	0x20000000

08000b14 <FSMC_WR_DAT>:
* function   :
* parameters :N/A
* retvalue   :N/A
*******************************************************************************************************************************/
void FSMC_WR_DAT(uint16_t Dat)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	80fb      	strh	r3, [r7, #6]
	LCD_FSMC->DAT = Dat;
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <FSMC_WR_DAT+0x20>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	88fa      	ldrh	r2, [r7, #6]
 8000b24:	805a      	strh	r2, [r3, #2]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000000 	.word	0x20000000

08000b38 <LCD_SetWindow>:
							LCD_SetDirection function. It calls to FSMC_WR_REG(RAMWR) function at the end.
* parameters :XS(x start address), YS(y start address), XE(x end address) and YE(y end address)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetWindow(uint16_t Xs, uint16_t Ys, uint16_t Xe, uint16_t Ye)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4604      	mov	r4, r0
 8000b40:	4608      	mov	r0, r1
 8000b42:	4611      	mov	r1, r2
 8000b44:	461a      	mov	r2, r3
 8000b46:	4623      	mov	r3, r4
 8000b48:	80fb      	strh	r3, [r7, #6]
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80bb      	strh	r3, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	807b      	strh	r3, [r7, #2]
 8000b52:	4613      	mov	r3, r2
 8000b54:	803b      	strh	r3, [r7, #0]
	FSMC_WR_REG(CASET_XS_H);		FSMC_WR_DAT(Xs >> 8);
 8000b56:	f44f 5028 	mov.w	r0, #10752	; 0x2a00
 8000b5a:	f7ff ffc9 	bl	8000af0 <FSMC_WR_REG>
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ffd5 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XS_L);		FSMC_WR_DAT(Xs & 0x00FFU);
 8000b6a:	f642 2001 	movw	r0, #10753	; 0x2a01
 8000b6e:	f7ff ffbf 	bl	8000af0 <FSMC_WR_REG>
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ffcb 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_H);		FSMC_WR_DAT(Xe >> 8);
 8000b7e:	f642 2002 	movw	r0, #10754	; 0x2a02
 8000b82:	f7ff ffb5 	bl	8000af0 <FSMC_WR_REG>
 8000b86:	887b      	ldrh	r3, [r7, #2]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ffc1 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_L);		FSMC_WR_DAT(Xe & 0x00FFU);
 8000b92:	f642 2003 	movw	r0, #10755	; 0x2a03
 8000b96:	f7ff ffab 	bl	8000af0 <FSMC_WR_REG>
 8000b9a:	887b      	ldrh	r3, [r7, #2]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ffb7 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_H);		FSMC_WR_DAT(Ys >> 8);
 8000ba6:	f44f 502c 	mov.w	r0, #11008	; 0x2b00
 8000baa:	f7ff ffa1 	bl	8000af0 <FSMC_WR_REG>
 8000bae:	88bb      	ldrh	r3, [r7, #4]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ffad 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_L);		FSMC_WR_DAT(Ys & 0x00FFU);
 8000bba:	f642 3001 	movw	r0, #11009	; 0x2b01
 8000bbe:	f7ff ff97 	bl	8000af0 <FSMC_WR_REG>
 8000bc2:	88bb      	ldrh	r3, [r7, #4]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ffa3 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_H);		FSMC_WR_DAT(Ye >> 8);
 8000bce:	f642 3002 	movw	r0, #11010	; 0x2b02
 8000bd2:	f7ff ff8d 	bl	8000af0 <FSMC_WR_REG>
 8000bd6:	883b      	ldrh	r3, [r7, #0]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff99 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_L);		FSMC_WR_DAT(Ye & 0x00FFU);
 8000be2:	f642 3003 	movw	r0, #11011	; 0x2b03
 8000be6:	f7ff ff83 	bl	8000af0 <FSMC_WR_REG>
 8000bea:	883b      	ldrh	r3, [r7, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff8f 	bl	8000b14 <FSMC_WR_DAT>

	FSMC_WR_REG(RAMWR);
 8000bf6:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8000bfa:	f7ff ff79 	bl	8000af0 <FSMC_WR_REG>
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd90      	pop	{r4, r7, pc}
	...

08000c08 <LCD_SetDirection>:
							the selected orientation.
* parameters :Direction(Use Orientation Direction Definitions defined in FSMC_NT35510.h)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetDirection(uint8_t Direction)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	switch(Direction)
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d84b      	bhi.n	8000cb0 <LCD_SetDirection+0xa8>
 8000c18:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <LCD_SetDirection+0x18>)
 8000c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1e:	bf00      	nop
 8000c20:	08000c31 	.word	0x08000c31
 8000c24:	08000c51 	.word	0x08000c51
 8000c28:	08000c71 	.word	0x08000c71
 8000c2c:	08000c91 	.word	0x08000c91
	{
		case 0:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0000U);
 8000c30:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000c34:	f7ff ff5c 	bl	8000af0 <FSMC_WR_REG>
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff ff6b 	bl	8000b14 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 8000c3e:	f240 331f 	movw	r3, #799	; 0x31f
 8000c42:	f240 12df 	movw	r2, #479	; 0x1df
 8000c46:	2100      	movs	r1, #0
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff ff75 	bl	8000b38 <LCD_SetWindow>
		break;
 8000c4e:	e02f      	b.n	8000cb0 <LCD_SetDirection+0xa8>
		case 1:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00C0U);
 8000c50:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000c54:	f7ff ff4c 	bl	8000af0 <FSMC_WR_REG>
 8000c58:	20c0      	movs	r0, #192	; 0xc0
 8000c5a:	f7ff ff5b 	bl	8000b14 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 8000c5e:	f240 331f 	movw	r3, #799	; 0x31f
 8000c62:	f240 12df 	movw	r2, #479	; 0x1df
 8000c66:	2100      	movs	r1, #0
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f7ff ff65 	bl	8000b38 <LCD_SetWindow>
		break;
 8000c6e:	e01f      	b.n	8000cb0 <LCD_SetDirection+0xa8>
		case 2:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0060U);
 8000c70:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000c74:	f7ff ff3c 	bl	8000af0 <FSMC_WR_REG>
 8000c78:	2060      	movs	r0, #96	; 0x60
 8000c7a:	f7ff ff4b 	bl	8000b14 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 8000c7e:	f240 13df 	movw	r3, #479	; 0x1df
 8000c82:	f240 321f 	movw	r2, #799	; 0x31f
 8000c86:	2100      	movs	r1, #0
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff ff55 	bl	8000b38 <LCD_SetWindow>
		break;
 8000c8e:	e00f      	b.n	8000cb0 <LCD_SetDirection+0xa8>
		case 3:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00A0U);
 8000c90:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000c94:	f7ff ff2c 	bl	8000af0 <FSMC_WR_REG>
 8000c98:	20a0      	movs	r0, #160	; 0xa0
 8000c9a:	f7ff ff3b 	bl	8000b14 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 8000c9e:	f240 13df 	movw	r3, #479	; 0x1df
 8000ca2:	f240 321f 	movw	r2, #799	; 0x31f
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff ff45 	bl	8000b38 <LCD_SetWindow>
		break;
 8000cae:	bf00      	nop
	}
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <LCD_ClearScreen>:
							orientation direction change.
* parameters :Color(Desired screen color)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_ClearScreen(uint16_t Color)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t i;

	for(i=0; i<(480*800); i++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	e006      	b.n	8000cd6 <LCD_ClearScreen+0x1e>
	{
		FSMC_WR_DAT(Color);
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff22 	bl	8000b14 <FSMC_WR_DAT>
	for(i=0; i<(480*800); i++)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4a03      	ldr	r2, [pc, #12]	; (8000ce8 <LCD_ClearScreen+0x30>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d9f4      	bls.n	8000cc8 <LCD_ClearScreen+0x10>
	}
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	0005dbff 	.word	0x0005dbff

08000cec <LCD_PrintCh>:
* parameters :X(x start address), Y(y start address), Color(character color), Bcolor(background
							color), Character(use standard ASCII values for characters) and Size(characters size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintCh(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t Character, uint8_t Size)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	80fb      	strh	r3, [r7, #6]
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80bb      	strh	r3, [r7, #4]
 8000d02:	460b      	mov	r3, r1
 8000d04:	807b      	strh	r3, [r7, #2]
 8000d06:	4613      	mov	r3, r2
 8000d08:	803b      	strh	r3, [r7, #0]
	uint8_t i, j, k, p=0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	733b      	strb	r3, [r7, #12]
	uint16_t c=0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	817b      	strh	r3, [r7, #10]
	LCD_SetWindow(X, Y, X+(8 * Size - 1), Y+(8  *Size - 1));									// Define area by character size.
 8000d12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	4413      	add	r3, r2
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	3b01      	subs	r3, #1
 8000d24:	b29c      	uxth	r4, r3
 8000d26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	88bb      	ldrh	r3, [r7, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	3b01      	subs	r3, #1
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	88b9      	ldrh	r1, [r7, #4]
 8000d3c:	88f8      	ldrh	r0, [r7, #6]
 8000d3e:	4622      	mov	r2, r4
 8000d40:	f7ff fefa 	bl	8000b38 <LCD_SetWindow>

	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e03c      	b.n	8000dc4 <LCD_PrintCh+0xd8>
	{
		for(j=0; j < Size; j++)																					// Print each row size times.
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73bb      	strb	r3, [r7, #14]
 8000d4e:	e031      	b.n	8000db4 <LCD_PrintCh+0xc8>
		{
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 8000d50:	2300      	movs	r3, #0
 8000d52:	737b      	strb	r3, [r7, #13]
 8000d54:	e028      	b.n	8000da8 <LCD_PrintCh+0xbc>
			{
				if((ASCIItable[Character][i]>>(7-k)) & 0x01)
 8000d56:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	491d      	ldr	r1, [pc, #116]	; (8000dd4 <LCD_PrintCh+0xe8>)
 8000d5e:	00d2      	lsls	r2, r2, #3
 8000d60:	440a      	add	r2, r1
 8000d62:	4413      	add	r3, r2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	7b7b      	ldrb	r3, [r7, #13]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	fa42 f303 	asr.w	r3, r2, r3
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d002      	beq.n	8000d80 <LCD_PrintCh+0x94>
					c=Color;
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	817b      	strh	r3, [r7, #10]
 8000d7e:	e001      	b.n	8000d84 <LCD_PrintCh+0x98>
				else
					c=Bcolor;
 8000d80:	883b      	ldrh	r3, [r7, #0]
 8000d82:	817b      	strh	r3, [r7, #10]
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 8000d84:	2300      	movs	r3, #0
 8000d86:	733b      	strb	r3, [r7, #12]
 8000d88:	e006      	b.n	8000d98 <LCD_PrintCh+0xac>
				{
					FSMC_WR_DAT(c);
 8000d8a:	897b      	ldrh	r3, [r7, #10]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fec1 	bl	8000b14 <FSMC_WR_DAT>
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 8000d92:	7b3b      	ldrb	r3, [r7, #12]
 8000d94:	3301      	adds	r3, #1
 8000d96:	733b      	strb	r3, [r7, #12]
 8000d98:	7b3a      	ldrb	r2, [r7, #12]
 8000d9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d3f3      	bcc.n	8000d8a <LCD_PrintCh+0x9e>
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 8000da2:	7b7b      	ldrb	r3, [r7, #13]
 8000da4:	3301      	adds	r3, #1
 8000da6:	737b      	strb	r3, [r7, #13]
 8000da8:	7b7b      	ldrb	r3, [r7, #13]
 8000daa:	2b07      	cmp	r3, #7
 8000dac:	d9d3      	bls.n	8000d56 <LCD_PrintCh+0x6a>
		for(j=0; j < Size; j++)																					// Print each row size times.
 8000dae:	7bbb      	ldrb	r3, [r7, #14]
 8000db0:	3301      	adds	r3, #1
 8000db2:	73bb      	strb	r3, [r7, #14]
 8000db4:	7bba      	ldrb	r2, [r7, #14]
 8000db6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d3c8      	bcc.n	8000d50 <LCD_PrintCh+0x64>
	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	2b07      	cmp	r3, #7
 8000dc8:	d9bf      	bls.n	8000d4a <LCD_PrintCh+0x5e>
				}
			}
		}
	}
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd90      	pop	{r4, r7, pc}
 8000dd4:	0801b434 	.word	0x0801b434

08000dd8 <LCD_PrintStr>:
							color), string(pointer to an array of characters, standard ASCII values) and size
							(character size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintStr(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t* String, uint8_t Size)
{
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	4604      	mov	r4, r0
 8000de0:	4608      	mov	r0, r1
 8000de2:	4611      	mov	r1, r2
 8000de4:	461a      	mov	r2, r3
 8000de6:	4623      	mov	r3, r4
 8000de8:	80fb      	strh	r3, [r7, #6]
 8000dea:	4603      	mov	r3, r0
 8000dec:	80bb      	strh	r3, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	807b      	strh	r3, [r7, #2]
 8000df2:	4613      	mov	r3, r2
 8000df4:	803b      	strh	r3, [r7, #0]
	X=X-8*Size;
 8000df6:	7f3b      	ldrb	r3, [r7, #28]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	88fa      	ldrh	r2, [r7, #6]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	80fb      	strh	r3, [r7, #6]
	while(*String)
 8000e04:	e015      	b.n	8000e32 <LCD_PrintStr+0x5a>
		LCD_PrintCh(X = X + 8 * Size, Y, Color, Bcolor, *String++, Size);
 8000e06:	7f3b      	ldrb	r3, [r7, #28]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	4413      	add	r3, r2
 8000e12:	80fb      	strh	r3, [r7, #6]
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	61ba      	str	r2, [r7, #24]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	883d      	ldrh	r5, [r7, #0]
 8000e1e:	887c      	ldrh	r4, [r7, #2]
 8000e20:	88b9      	ldrh	r1, [r7, #4]
 8000e22:	88f8      	ldrh	r0, [r7, #6]
 8000e24:	7f3a      	ldrb	r2, [r7, #28]
 8000e26:	9201      	str	r2, [sp, #4]
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	462b      	mov	r3, r5
 8000e2c:	4622      	mov	r2, r4
 8000e2e:	f7ff ff5d 	bl	8000cec <LCD_PrintCh>
	while(*String)
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1e5      	bne.n	8000e06 <LCD_PrintStr+0x2e>
}
 8000e3a:	bf00      	nop
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}

08000e44 <NT35510_Init>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void NT35510_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	RST_LOW;													// Reset on.
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2140      	movs	r1, #64	; 0x40
 8000e4c:	48fd      	ldr	r0, [pc, #1012]	; (8001244 <NT35510_Init+0x400>)
 8000e4e:	f003 f893 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_Delay(300);											// Short delay needed on power up
 8000e52:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e56:	f001 ff6b 	bl	8002d30 <HAL_Delay>
	RST_HIGH;													// Reset off.
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2140      	movs	r1, #64	; 0x40
 8000e5e:	48f9      	ldr	r0, [pc, #996]	; (8001244 <NT35510_Init+0x400>)
 8000e60:	f003 f88a 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_Delay(800);											// Short delay needed on power up
 8000e64:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000e68:	f001 ff62 	bl	8002d30 <HAL_Delay>

	// Manufacture Command Set selection
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 8000e6c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8000e70:	f7ff fe3e 	bl	8000af0 <FSMC_WR_REG>
 8000e74:	2055      	movs	r0, #85	; 0x55
 8000e76:	f7ff fe4d 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8000e7a:	f24f 0001 	movw	r0, #61441	; 0xf001
 8000e7e:	f7ff fe37 	bl	8000af0 <FSMC_WR_REG>
 8000e82:	20aa      	movs	r0, #170	; 0xaa
 8000e84:	f7ff fe46 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 8000e88:	f24f 0002 	movw	r0, #61442	; 0xf002
 8000e8c:	f7ff fe30 	bl	8000af0 <FSMC_WR_REG>
 8000e90:	2052      	movs	r0, #82	; 0x52
 8000e92:	f7ff fe3f 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8000e96:	f24f 0003 	movw	r0, #61443	; 0xf003
 8000e9a:	f7ff fe29 	bl	8000af0 <FSMC_WR_REG>
 8000e9e:	2008      	movs	r0, #8
 8000ea0:	f7ff fe38 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0001U);		// Select page 1
 8000ea4:	f24f 0004 	movw	r0, #61444	; 0xf004
 8000ea8:	f7ff fe22 	bl	8000af0 <FSMC_WR_REG>
 8000eac:	2001      	movs	r0, #1
 8000eae:	f7ff fe31 	bl	8000b14 <FSMC_WR_DAT>

	// AVDD 5.2V
	FSMC_WR_REG(SETAVDD_NORM);		FSMC_WR_DAT(0x000DU);
 8000eb2:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8000eb6:	f7ff fe1b 	bl	8000af0 <FSMC_WR_REG>
 8000eba:	200d      	movs	r0, #13
 8000ebc:	f7ff fe2a 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_IDLE);		FSMC_WR_DAT(0x000DU);
 8000ec0:	f24b 0001 	movw	r0, #45057	; 0xb001
 8000ec4:	f7ff fe14 	bl	8000af0 <FSMC_WR_REG>
 8000ec8:	200d      	movs	r0, #13
 8000eca:	f7ff fe23 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_PART);		FSMC_WR_DAT(0x000DU);
 8000ece:	f24b 0002 	movw	r0, #45058	; 0xb002
 8000ed2:	f7ff fe0d 	bl	8000af0 <FSMC_WR_REG>
 8000ed6:	200d      	movs	r0, #13
 8000ed8:	f7ff fe1c 	bl	8000b14 <FSMC_WR_DAT>

	// AVDD ratio
	FSMC_WR_REG(BT1CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8000edc:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8000ee0:	f7ff fe06 	bl	8000af0 <FSMC_WR_REG>
 8000ee4:	2034      	movs	r0, #52	; 0x34
 8000ee6:	f7ff fe15 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8000eea:	f24b 6001 	movw	r0, #46593	; 0xb601
 8000eee:	f7ff fdff 	bl	8000af0 <FSMC_WR_REG>
 8000ef2:	2034      	movs	r0, #52	; 0x34
 8000ef4:	f7ff fe0e 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_PART);		FSMC_WR_DAT(0x0034U);
 8000ef8:	f24b 6002 	movw	r0, #46594	; 0xb602
 8000efc:	f7ff fdf8 	bl	8000af0 <FSMC_WR_REG>
 8000f00:	2034      	movs	r0, #52	; 0x34
 8000f02:	f7ff fe07 	bl	8000b14 <FSMC_WR_DAT>

	// AVEE  -5.2V
	FSMC_WR_REG(SETAVEE_NORM);		FSMC_WR_DAT(0x000DU);
 8000f06:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8000f0a:	f7ff fdf1 	bl	8000af0 <FSMC_WR_REG>
 8000f0e:	200d      	movs	r0, #13
 8000f10:	f7ff fe00 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_IDLE);		FSMC_WR_DAT(0x000DU);
 8000f14:	f24b 1001 	movw	r0, #45313	; 0xb101
 8000f18:	f7ff fdea 	bl	8000af0 <FSMC_WR_REG>
 8000f1c:	200d      	movs	r0, #13
 8000f1e:	f7ff fdf9 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_PART);		FSMC_WR_DAT(0x000DU);
 8000f22:	f24b 1002 	movw	r0, #45314	; 0xb102
 8000f26:	f7ff fde3 	bl	8000af0 <FSMC_WR_REG>
 8000f2a:	200d      	movs	r0, #13
 8000f2c:	f7ff fdf2 	bl	8000b14 <FSMC_WR_DAT>

	// AVEE ratio
	FSMC_WR_REG(BT2CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8000f30:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8000f34:	f7ff fddc 	bl	8000af0 <FSMC_WR_REG>
 8000f38:	2034      	movs	r0, #52	; 0x34
 8000f3a:	f7ff fdeb 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8000f3e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8000f42:	f7ff fdd5 	bl	8000af0 <FSMC_WR_REG>
 8000f46:	2034      	movs	r0, #52	; 0x34
 8000f48:	f7ff fde4 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_PART);		FSMC_WR_DAT(0x0034U);
 8000f4c:	f24b 7002 	movw	r0, #46850	; 0xb702
 8000f50:	f7ff fdce 	bl	8000af0 <FSMC_WR_REG>
 8000f54:	2034      	movs	r0, #52	; 0x34
 8000f56:	f7ff fddd 	bl	8000b14 <FSMC_WR_DAT>

	// VCL  -2.5V
	FSMC_WR_REG(SETVCL_NORM);		FSMC_WR_DAT(0x0000U);
 8000f5a:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8000f5e:	f7ff fdc7 	bl	8000af0 <FSMC_WR_REG>
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff fdd6 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_IDLE);		FSMC_WR_DAT(0x0000U);
 8000f68:	f24b 2001 	movw	r0, #45569	; 0xb201
 8000f6c:	f7ff fdc0 	bl	8000af0 <FSMC_WR_REG>
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fdcf 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_PART);		FSMC_WR_DAT(0x0000U);
 8000f76:	f24b 2002 	movw	r0, #45570	; 0xb202
 8000f7a:	f7ff fdb9 	bl	8000af0 <FSMC_WR_REG>
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f7ff fdc8 	bl	8000b14 <FSMC_WR_DAT>

	// VCL ratio
	FSMC_WR_REG(BT3CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8000f84:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8000f88:	f7ff fdb2 	bl	8000af0 <FSMC_WR_REG>
 8000f8c:	2024      	movs	r0, #36	; 0x24
 8000f8e:	f7ff fdc1 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8000f92:	f64b 0001 	movw	r0, #47105	; 0xb801
 8000f96:	f7ff fdab 	bl	8000af0 <FSMC_WR_REG>
 8000f9a:	2024      	movs	r0, #36	; 0x24
 8000f9c:	f7ff fdba 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_PART);		FSMC_WR_DAT(0x0024U);
 8000fa0:	f64b 0002 	movw	r0, #47106	; 0xb802
 8000fa4:	f7ff fda4 	bl	8000af0 <FSMC_WR_REG>
 8000fa8:	2024      	movs	r0, #36	; 0x24
 8000faa:	f7ff fdb3 	bl	8000b14 <FSMC_WR_DAT>

	// VGH  15V
	FSMC_WR_REG(VGHCTR);			FSMC_WR_DAT(0x01);
 8000fae:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8000fb2:	f7ff fd9d 	bl	8000af0 <FSMC_WR_REG>
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f7ff fdac 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_NORM);		FSMC_WR_DAT(0x000FU);
 8000fbc:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8000fc0:	f7ff fd96 	bl	8000af0 <FSMC_WR_REG>
 8000fc4:	200f      	movs	r0, #15
 8000fc6:	f7ff fda5 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_IDLE);		FSMC_WR_DAT(0x000FU);
 8000fca:	f24b 3001 	movw	r0, #45825	; 0xb301
 8000fce:	f7ff fd8f 	bl	8000af0 <FSMC_WR_REG>
 8000fd2:	200f      	movs	r0, #15
 8000fd4:	f7ff fd9e 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_PART);		FSMC_WR_DAT(0x000FU);
 8000fd8:	f24b 3002 	movw	r0, #45826	; 0xb302
 8000fdc:	f7ff fd88 	bl	8000af0 <FSMC_WR_REG>
 8000fe0:	200f      	movs	r0, #15
 8000fe2:	f7ff fd97 	bl	8000b14 <FSMC_WR_DAT>

	// VGH  ratio
	FSMC_WR_REG(BT4CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8000fe6:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8000fea:	f7ff fd81 	bl	8000af0 <FSMC_WR_REG>
 8000fee:	2034      	movs	r0, #52	; 0x34
 8000ff0:	f7ff fd90 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8000ff4:	f64b 1001 	movw	r0, #47361	; 0xb901
 8000ff8:	f7ff fd7a 	bl	8000af0 <FSMC_WR_REG>
 8000ffc:	2034      	movs	r0, #52	; 0x34
 8000ffe:	f7ff fd89 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001002:	f64b 1002 	movw	r0, #47362	; 0xb902
 8001006:	f7ff fd73 	bl	8000af0 <FSMC_WR_REG>
 800100a:	2034      	movs	r0, #52	; 0x34
 800100c:	f7ff fd82 	bl	8000b14 <FSMC_WR_DAT>

	// VGL_REG  -10V
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 8001010:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001014:	f7ff fd6c 	bl	8000af0 <FSMC_WR_REG>
 8001018:	2008      	movs	r0, #8
 800101a:	f7ff fd7b 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 800101e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001022:	f7ff fd65 	bl	8000af0 <FSMC_WR_REG>
 8001026:	2008      	movs	r0, #8
 8001028:	f7ff fd74 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(0xB501);			FSMC_WR_DAT(0x0008U);
 800102c:	f24b 5001 	movw	r0, #46337	; 0xb501
 8001030:	f7ff fd5e 	bl	8000af0 <FSMC_WR_REG>
 8001034:	2008      	movs	r0, #8
 8001036:	f7ff fd6d 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC200);			FSMC_WR_DAT(0x0003U);
 800103a:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 800103e:	f7ff fd57 	bl	8000af0 <FSMC_WR_REG>
 8001042:	2003      	movs	r0, #3
 8001044:	f7ff fd66 	bl	8000b14 <FSMC_WR_DAT>

	// VGLX  ratio
	FSMC_WR_REG(BT5CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8001048:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800104c:	f7ff fd50 	bl	8000af0 <FSMC_WR_REG>
 8001050:	2024      	movs	r0, #36	; 0x24
 8001052:	f7ff fd5f 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8001056:	f64b 2001 	movw	r0, #47617	; 0xba01
 800105a:	f7ff fd49 	bl	8000af0 <FSMC_WR_REG>
 800105e:	2024      	movs	r0, #36	; 0x24
 8001060:	f7ff fd58 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_PART);		FSMC_WR_DAT(0x0024U);
 8001064:	f64b 2002 	movw	r0, #47618	; 0xba02
 8001068:	f7ff fd42 	bl	8000af0 <FSMC_WR_REG>
 800106c:	2024      	movs	r0, #36	; 0x24
 800106e:	f7ff fd51 	bl	8000b14 <FSMC_WR_DAT>

	// VGMP/VGSP 4.5V/0V
	FSMC_WR_REG(SETVGP_0);			FSMC_WR_DAT(0x0000U);
 8001072:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8001076:	f7ff fd3b 	bl	8000af0 <FSMC_WR_REG>
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff fd4a 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_1);			FSMC_WR_DAT(0x0078U);
 8001080:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8001084:	f7ff fd34 	bl	8000af0 <FSMC_WR_REG>
 8001088:	2078      	movs	r0, #120	; 0x78
 800108a:	f7ff fd43 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_2);			FSMC_WR_DAT(0x0000U);
 800108e:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8001092:	f7ff fd2d 	bl	8000af0 <FSMC_WR_REG>
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff fd3c 	bl	8000b14 <FSMC_WR_DAT>

	// VGMN/VGSN -4.5V/0V
	FSMC_WR_REG(SETVGN_0);			FSMC_WR_DAT(0x0000U);
 800109c:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80010a0:	f7ff fd26 	bl	8000af0 <FSMC_WR_REG>
 80010a4:	2000      	movs	r0, #0
 80010a6:	f7ff fd35 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_1);			FSMC_WR_DAT(0x0078U);
 80010aa:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80010ae:	f7ff fd1f 	bl	8000af0 <FSMC_WR_REG>
 80010b2:	2078      	movs	r0, #120	; 0x78
 80010b4:	f7ff fd2e 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_2);			FSMC_WR_DAT(0x0000U);
 80010b8:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80010bc:	f7ff fd18 	bl	8000af0 <FSMC_WR_REG>
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff fd27 	bl	8000b14 <FSMC_WR_DAT>

	// VCOM  -1.325V
	FSMC_WR_REG(SETVCMOFF_0);		FSMC_WR_DAT(0x0000);
 80010c6:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80010ca:	f7ff fd11 	bl	8000af0 <FSMC_WR_REG>
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff fd20 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCMOFF_1);		FSMC_WR_DAT(0x0089);
 80010d4:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80010d8:	f7ff fd0a 	bl	8000af0 <FSMC_WR_REG>
 80010dc:	2089      	movs	r0, #137	; 0x89
 80010de:	f7ff fd19 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(GMBCTR2_BASE | 0x0033U);    FSMC_WR_DAT(0x007FU);
*/
	//**************************************************************************************************************************//

	// Select Page 0
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 80010e2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80010e6:	f7ff fd03 	bl	8000af0 <FSMC_WR_REG>
 80010ea:	2055      	movs	r0, #85	; 0x55
 80010ec:	f7ff fd12 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 80010f0:	f24f 0001 	movw	r0, #61441	; 0xf001
 80010f4:	f7ff fcfc 	bl	8000af0 <FSMC_WR_REG>
 80010f8:	20aa      	movs	r0, #170	; 0xaa
 80010fa:	f7ff fd0b 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 80010fe:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001102:	f7ff fcf5 	bl	8000af0 <FSMC_WR_REG>
 8001106:	2052      	movs	r0, #82	; 0x52
 8001108:	f7ff fd04 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 800110c:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001110:	f7ff fcee 	bl	8000af0 <FSMC_WR_REG>
 8001114:	2008      	movs	r0, #8
 8001116:	f7ff fcfd 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0000U);		// Select page 0
 800111a:	f24f 0004 	movw	r0, #61444	; 0xf004
 800111e:	f7ff fce7 	bl	8000af0 <FSMC_WR_REG>
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff fcf6 	bl	8000b14 <FSMC_WR_DAT>

	// DISPLAY CONTROL
	FSMC_WR_REG(DOPCTR_0);			FSMC_WR_DAT(0x00CCU);
 8001128:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800112c:	f7ff fce0 	bl	8000af0 <FSMC_WR_REG>
 8001130:	20cc      	movs	r0, #204	; 0xcc
 8001132:	f7ff fcef 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(DOPCTR_1);			FSMC_WR_DAT(0x0000U);
 8001136:	f24b 1001 	movw	r0, #45313	; 0xb101
 800113a:	f7ff fcd9 	bl	8000af0 <FSMC_WR_REG>
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff fce8 	bl	8000b14 <FSMC_WR_DAT>

	FSMC_WR_REG(DPRSLCTR);			FSMC_WR_DAT(0x0050U);			// Display Resolution 480RGB x 800
 8001144:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001148:	f7ff fcd2 	bl	8000af0 <FSMC_WR_REG>
 800114c:	2050      	movs	r0, #80	; 0x50
 800114e:	f7ff fce1 	bl	8000b14 <FSMC_WR_DAT>

	// SOURCE HOLD TIME
	FSMC_WR_REG(SDHDTCTR);			FSMC_WR_DAT(0x0005U);
 8001152:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8001156:	f7ff fccb 	bl	8000af0 <FSMC_WR_REG>
 800115a:	2005      	movs	r0, #5
 800115c:	f7ff fcda 	bl	8000b14 <FSMC_WR_DAT>

	// Set Gate EQ
	FSMC_WR_REG(GSEQCTR_ST);		FSMC_WR_DAT(0x0070U);
 8001160:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8001164:	f7ff fcc4 	bl	8000af0 <FSMC_WR_REG>
 8001168:	2070      	movs	r0, #112	; 0x70
 800116a:	f7ff fcd3 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(GSEQCTR_CK);		FSMC_WR_DAT(0x0070U);
 800116e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8001172:	f7ff fcbd 	bl	8000af0 <FSMC_WR_REG>
 8001176:	2070      	movs	r0, #112	; 0x70
 8001178:	f7ff fccc 	bl	8000b14 <FSMC_WR_DAT>

	// Source EQ control (Mode 2)
	FSMC_WR_REG(SDEQCTR_MOD );	FSMC_WR_DAT(0x0001U);
 800117c:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8001180:	f7ff fcb6 	bl	8000af0 <FSMC_WR_REG>
 8001184:	2001      	movs	r0, #1
 8001186:	f7ff fcc5 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS1);	FSMC_WR_DAT(0x0003U);
 800118a:	f64b 0001 	movw	r0, #47105	; 0xb801
 800118e:	f7ff fcaf 	bl	8000af0 <FSMC_WR_REG>
 8001192:	2003      	movs	r0, #3
 8001194:	f7ff fcbe 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS2);	FSMC_WR_DAT(0x0003U);
 8001198:	f64b 0002 	movw	r0, #47106	; 0xb802
 800119c:	f7ff fca8 	bl	8000af0 <FSMC_WR_REG>
 80011a0:	2003      	movs	r0, #3
 80011a2:	f7ff fcb7 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS3);	FSMC_WR_DAT(0x0003U);
 80011a6:	f64b 0003 	movw	r0, #47107	; 0xb803
 80011aa:	f7ff fca1 	bl	8000af0 <FSMC_WR_REG>
 80011ae:	2003      	movs	r0, #3
 80011b0:	f7ff fcb0 	bl	8000b14 <FSMC_WR_DAT>

	// INVERSION MODE
	FSMC_WR_REG(INVCTR_NORM);		FSMC_WR_DAT(0x0002U);
 80011b4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80011b8:	f7ff fc9a 	bl	8000af0 <FSMC_WR_REG>
 80011bc:	2002      	movs	r0, #2
 80011be:	f7ff fca9 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_IDLE);		FSMC_WR_DAT(0x0000U);
 80011c2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80011c6:	f7ff fc93 	bl	8000af0 <FSMC_WR_REG>
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff fca2 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_PART);		FSMC_WR_DAT(0x0000U);
 80011d0:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80011d4:	f7ff fc8c 	bl	8000af0 <FSMC_WR_REG>
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fc9b 	bl	8000b14 <FSMC_WR_DAT>

	// Timing control
	FSMC_WR_REG(0xC900);				FSMC_WR_DAT(0x00D0U);
 80011de:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 80011e2:	f7ff fc85 	bl	8000af0 <FSMC_WR_REG>
 80011e6:	20d0      	movs	r0, #208	; 0xd0
 80011e8:	f7ff fc94 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC901);				FSMC_WR_DAT(0x0002U);
 80011ec:	f64c 1001 	movw	r0, #51457	; 0xc901
 80011f0:	f7ff fc7e 	bl	8000af0 <FSMC_WR_REG>
 80011f4:	2002      	movs	r0, #2
 80011f6:	f7ff fc8d 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC902);				FSMC_WR_DAT(0x0050U);
 80011fa:	f64c 1002 	movw	r0, #51458	; 0xc902
 80011fe:	f7ff fc77 	bl	8000af0 <FSMC_WR_REG>
 8001202:	2050      	movs	r0, #80	; 0x50
 8001204:	f7ff fc86 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC903);				FSMC_WR_DAT(0x0050U);
 8001208:	f64c 1003 	movw	r0, #51459	; 0xc903
 800120c:	f7ff fc70 	bl	8000af0 <FSMC_WR_REG>
 8001210:	2050      	movs	r0, #80	; 0x50
 8001212:	f7ff fc7f 	bl	8000b14 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC904);				FSMC_WR_DAT(0x0050U);
 8001216:	f64c 1004 	movw	r0, #51460	; 0xc904
 800121a:	f7ff fc69 	bl	8000af0 <FSMC_WR_REG>
 800121e:	2050      	movs	r0, #80	; 0x50
 8001220:	f7ff fc78 	bl	8000b14 <FSMC_WR_DAT>

	//**************************************************************************************************************************//
	// User Command Set
	FSMC_WR_REG(TEON);   				FSMC_WR_DAT(0x0000U);			// V-Blanking information only
 8001224:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8001228:	f7ff fc62 	bl	8000af0 <FSMC_WR_REG>
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff fc71 	bl	8000b14 <FSMC_WR_DAT>


	FSMC_WR_REG(COLMOD);   			FSMC_WR_DAT(0x0055U);		// RGB and MCU Interface Data format 16-Bits
 8001232:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8001236:	f7ff fc5b 	bl	8000af0 <FSMC_WR_REG>
 800123a:	2055      	movs	r0, #85	; 0x55
 800123c:	f7ff fc6a 	bl	8000b14 <FSMC_WR_DAT>
 8001240:	e002      	b.n	8001248 <NT35510_Init+0x404>
 8001242:	bf00      	nop
 8001244:	40020800 	.word	0x40020800
	FSMC_WR_REG(MADCTL);   			FSMC_WR_DAT(0x0000U);		// MADCTL: MY MX MV RGB MH RSMX RSMY
 8001248:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 800124c:	f7ff fc50 	bl	8000af0 <FSMC_WR_REG>
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff fc5f 	bl	8000b14 <FSMC_WR_DAT>


	FSMC_WR_REG(SLPOUT);   						// Sleep Out
 8001256:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800125a:	f7ff fc49 	bl	8000af0 <FSMC_WR_REG>

	HAL_Delay(120);
 800125e:	2078      	movs	r0, #120	; 0x78
 8001260:	f001 fd66 	bl	8002d30 <HAL_Delay>

	FSMC_WR_REG(DISPON);   						// Display On
 8001264:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8001268:	f7ff fc42 	bl	8000af0 <FSMC_WR_REG>

	HAL_Delay(200);
 800126c:	20c8      	movs	r0, #200	; 0xc8
 800126e:	f001 fd5f 	bl	8002d30 <HAL_Delay>

	LCD_SetDirection(VERTICAL_UP);		// Vertical-up display orientation as default
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff fcc8 	bl	8000c08 <LCD_SetDirection>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <MX_GPIO_Init>:

/** Configure pins
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	; 0x30
 8001280:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	4b79      	ldr	r3, [pc, #484]	; (800147c <MX_GPIO_Init+0x200>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a78      	ldr	r2, [pc, #480]	; (800147c <MX_GPIO_Init+0x200>)
 800129c:	f043 0320 	orr.w	r3, r3, #32
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b76      	ldr	r3, [pc, #472]	; (800147c <MX_GPIO_Init+0x200>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0320 	and.w	r3, r3, #32
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	4b72      	ldr	r3, [pc, #456]	; (800147c <MX_GPIO_Init+0x200>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a71      	ldr	r2, [pc, #452]	; (800147c <MX_GPIO_Init+0x200>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b6f      	ldr	r3, [pc, #444]	; (800147c <MX_GPIO_Init+0x200>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b6b      	ldr	r3, [pc, #428]	; (800147c <MX_GPIO_Init+0x200>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a6a      	ldr	r2, [pc, #424]	; (800147c <MX_GPIO_Init+0x200>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b68      	ldr	r3, [pc, #416]	; (800147c <MX_GPIO_Init+0x200>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b64      	ldr	r3, [pc, #400]	; (800147c <MX_GPIO_Init+0x200>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a63      	ldr	r2, [pc, #396]	; (800147c <MX_GPIO_Init+0x200>)
 80012f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b61      	ldr	r3, [pc, #388]	; (800147c <MX_GPIO_Init+0x200>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b5d      	ldr	r3, [pc, #372]	; (800147c <MX_GPIO_Init+0x200>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a5c      	ldr	r2, [pc, #368]	; (800147c <MX_GPIO_Init+0x200>)
 800130c:	f043 0310 	orr.w	r3, r3, #16
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b5a      	ldr	r3, [pc, #360]	; (800147c <MX_GPIO_Init+0x200>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b56      	ldr	r3, [pc, #344]	; (800147c <MX_GPIO_Init+0x200>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a55      	ldr	r2, [pc, #340]	; (800147c <MX_GPIO_Init+0x200>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b53      	ldr	r3, [pc, #332]	; (800147c <MX_GPIO_Init+0x200>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	4b4f      	ldr	r3, [pc, #316]	; (800147c <MX_GPIO_Init+0x200>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a4e      	ldr	r2, [pc, #312]	; (800147c <MX_GPIO_Init+0x200>)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b4c      	ldr	r3, [pc, #304]	; (800147c <MX_GPIO_Init+0x200>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OV7670_RST_GPIO_Port, OV7670_RST_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2104      	movs	r1, #4
 800135a:	4849      	ldr	r0, [pc, #292]	; (8001480 <MX_GPIO_Init+0x204>)
 800135c:	f002 fe0c 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TOUCH_YD_Pin|TOUCH_XL_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2130      	movs	r1, #48	; 0x30
 8001364:	4847      	ldr	r0, [pc, #284]	; (8001484 <MX_GPIO_Init+0x208>)
 8001366:	f002 fe07 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001370:	4845      	ldr	r0, [pc, #276]	; (8001488 <MX_GPIO_Init+0x20c>)
 8001372:	f002 fe01 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RST_GPIO_Port, FSMC_RST_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2140      	movs	r1, #64	; 0x40
 800137a:	4844      	ldr	r0, [pc, #272]	; (800148c <MX_GPIO_Init+0x210>)
 800137c:	f002 fdfc 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_RST_Pin;
 8001380:	2304      	movs	r3, #4
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OV7670_RST_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	483a      	ldr	r0, [pc, #232]	; (8001480 <MX_GPIO_Init+0x204>)
 8001398:	f002 fc5a 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_YU_Pin;
 800139c:	2308      	movs	r3, #8
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013a0:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <MX_GPIO_Init+0x214>)
 80013a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_YU_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	4835      	ldr	r0, [pc, #212]	; (8001484 <MX_GPIO_Init+0x208>)
 80013b0:	f002 fc4e 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TOUCH_YD_Pin|TOUCH_XL_Pin;
 80013b4:	2330      	movs	r3, #48	; 0x30
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	482e      	ldr	r0, [pc, #184]	; (8001484 <MX_GPIO_Init+0x208>)
 80013cc:	f002 fc40 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OV7670_D0_Pin|OV7670_D1_Pin|OV7670_D2_Pin|OV7670_D3_Pin
 80013d0:	23ff      	movs	r3, #255	; 0xff
 80013d2:	61fb      	str	r3, [r7, #28]
                          |OV7670_D4_Pin|OV7670_D5_Pin|OV7670_D6_Pin|OV7670_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4829      	ldr	r0, [pc, #164]	; (8001488 <MX_GPIO_Init+0x20c>)
 80013e4:	f002 fc34 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_HREF_Pin;
 80013e8:	2301      	movs	r3, #1
 80013ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ec:	4b28      	ldr	r3, [pc, #160]	; (8001490 <MX_GPIO_Init+0x214>)
 80013ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_HREF_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4619      	mov	r1, r3
 80013fa:	4826      	ldr	r0, [pc, #152]	; (8001494 <MX_GPIO_Init+0x218>)
 80013fc:	f002 fc28 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_VSYNC_Pin;
 8001400:	2302      	movs	r3, #2
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <MX_GPIO_Init+0x21c>)
 8001406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4820      	ldr	r0, [pc, #128]	; (8001494 <MX_GPIO_Init+0x218>)
 8001414:	f002 fc1c 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	4815      	ldr	r0, [pc, #84]	; (8001488 <MX_GPIO_Init+0x20c>)
 8001432:	f002 fc0d 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RST_Pin;
 8001436:	2340      	movs	r3, #64	; 0x40
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RST_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	480f      	ldr	r0, [pc, #60]	; (800148c <MX_GPIO_Init+0x210>)
 800144e:	f002 fbff 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_XCLK_Pin;
 8001452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OV7670_XCLK_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	4807      	ldr	r0, [pc, #28]	; (800148c <MX_GPIO_Init+0x210>)
 8001470:	f002 fbee 	bl	8003c50 <HAL_GPIO_Init>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);*/

}
 8001474:	bf00      	nop
 8001476:	3730      	adds	r7, #48	; 0x30
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	40021400 	.word	0x40021400
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400
 800148c:	40020800 	.word	0x40020800
 8001490:	10210000 	.word	0x10210000
 8001494:	40021800 	.word	0x40021800
 8001498:	10310000 	.word	0x10310000

0800149c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_I2C2_Init+0x50>)
 80014a2:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <MX_I2C2_Init+0x54>)
 80014a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_I2C2_Init+0x50>)
 80014a8:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <MX_I2C2_Init+0x58>)
 80014aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_I2C2_Init+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 66;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_I2C2_Init+0x50>)
 80014b4:	2242      	movs	r2, #66	; 0x42
 80014b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_I2C2_Init+0x50>)
 80014ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <MX_I2C2_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_I2C2_Init+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <MX_I2C2_Init+0x50>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_I2C2_Init+0x50>)
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <MX_I2C2_Init+0x50>)
 80014da:	f002 fd7f 	bl	8003fdc <HAL_I2C_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014e4:	f000 f95c 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20025ce4 	.word	0x20025ce4
 80014f0:	40005800 	.word	0x40005800
 80014f4:	00061a80 	.word	0x00061a80

080014f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a1d      	ldr	r2, [pc, #116]	; (800158c <HAL_I2C_MspInit+0x94>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d133      	bne.n	8001582 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <HAL_I2C_MspInit+0x98>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <HAL_I2C_MspInit+0x98>)
 8001524:	f043 0320 	orr.w	r3, r3, #32
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_I2C_MspInit+0x98>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0320 	and.w	r3, r3, #32
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001536:	2303      	movs	r3, #3
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153a:	2312      	movs	r3, #18
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153e:	2301      	movs	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001546:	2304      	movs	r3, #4
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4810      	ldr	r0, [pc, #64]	; (8001594 <HAL_I2C_MspInit+0x9c>)
 8001552:	f002 fb7d 	bl	8003c50 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_I2C_MspInit+0x98>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a0c      	ldr	r2, [pc, #48]	; (8001590 <HAL_I2C_MspInit+0x98>)
 8001560:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_I2C_MspInit+0x98>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2021      	movs	r0, #33	; 0x21
 8001578:	f002 f8bb 	bl	80036f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800157c:	2021      	movs	r0, #33	; 0x21
 800157e:	f002 f8d4 	bl	800372a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001582:	bf00      	nop
 8001584:	3728      	adds	r7, #40	; 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40005800 	.word	0x40005800
 8001590:	40023800 	.word	0x40023800
 8001594:	40021400 	.word	0x40021400

08001598 <i2c_read_reg>:
extern I2C_HandleTypeDef hi2c2;


//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
uint8_t i2c_read_reg(uint8_t address, uint8_t reg)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af02      	add	r7, sp, #8
 800159e:	4603      	mov	r3, r0
 80015a0:	460a      	mov	r2, r1
 80015a2:	71fb      	strb	r3, [r7, #7]
 80015a4:	4613      	mov	r3, r2
 80015a6:	71bb      	strb	r3, [r7, #6]
	tx_data[0] = reg;
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <i2c_read_reg+0x48>)
 80015aa:	79bb      	ldrb	r3, [r7, #6]
 80015ac:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 1, 10);
 80015ae:	230a      	movs	r3, #10
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2301      	movs	r3, #1
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <i2c_read_reg+0x48>)
 80015b6:	2142      	movs	r1, #66	; 0x42
 80015b8:	480a      	ldr	r0, [pc, #40]	; (80015e4 <i2c_read_reg+0x4c>)
 80015ba:	f002 fe53 	bl	8004264 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, 0x42U, rx_data, 1, 10);
 80015be:	230a      	movs	r3, #10
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2301      	movs	r3, #1
 80015c4:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <i2c_read_reg+0x50>)
 80015c6:	2142      	movs	r1, #66	; 0x42
 80015c8:	4806      	ldr	r0, [pc, #24]	; (80015e4 <i2c_read_reg+0x4c>)
 80015ca:	f002 ff49 	bl	8004460 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f001 fbae 	bl	8002d30 <HAL_Delay>
	return rx_data[0];
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <i2c_read_reg+0x50>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000094 	.word	0x20000094
 80015e4:	20025ce4 	.word	0x20025ce4
 80015e8:	2000009c 	.word	0x2000009c

080015ec <i2c_write_reg>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void i2c_write_reg(uint8_t address, uint8_t reg, uint8_t data)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
 80015f6:	460b      	mov	r3, r1
 80015f8:	71bb      	strb	r3, [r7, #6]
 80015fa:	4613      	mov	r3, r2
 80015fc:	717b      	strb	r3, [r7, #5]
	tx_data[0] = reg;
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <i2c_write_reg+0x3c>)
 8001600:	79bb      	ldrb	r3, [r7, #6]
 8001602:	7013      	strb	r3, [r2, #0]
	tx_data[1] = data;
 8001604:	4a08      	ldr	r2, [pc, #32]	; (8001628 <i2c_write_reg+0x3c>)
 8001606:	797b      	ldrb	r3, [r7, #5]
 8001608:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 2, 10);
 800160a:	230a      	movs	r3, #10
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2302      	movs	r3, #2
 8001610:	4a05      	ldr	r2, [pc, #20]	; (8001628 <i2c_write_reg+0x3c>)
 8001612:	2142      	movs	r1, #66	; 0x42
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <i2c_write_reg+0x40>)
 8001616:	f002 fe25 	bl	8004264 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800161a:	2001      	movs	r0, #1
 800161c:	f001 fb88 	bl	8002d30 <HAL_Delay>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000094 	.word	0x20000094
 800162c:	20025ce4 	.word	0x20025ce4

08001630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001634:	f001 fb0a 	bl	8002c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001638:	f000 f814 	bl	8001664 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163c:	f7ff fe1e 	bl	800127c <MX_GPIO_Init>
  MX_DMA_Init();
 8001640:	f7ff f946 	bl	80008d0 <MX_DMA_Init>
  MX_TIM1_Init();
 8001644:	f000 fc32 	bl	8001eac <MX_TIM1_Init>
  MX_FSMC_Init();
 8001648:	f7ff f95c 	bl	8000904 <MX_FSMC_Init>
  MX_I2C2_Init();
 800164c:	f7ff ff26 	bl	800149c <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8001650:	f001 fa56 	bl	8002b00 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001654:	f7fe ffb8 	bl	80005c8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 8001658:	f7ff f83c 	bl	80006d4 <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main_loop();
 800165c:	f7ff f8a0 	bl	80007a0 <app_main_loop>
 8001660:	e7fc      	b.n	800165c <main+0x2c>
	...

08001664 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b0aa      	sub	sp, #168	; 0xa8
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800166e:	2234      	movs	r2, #52	; 0x34
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f007 f9a0 	bl	80089b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	2258      	movs	r2, #88	; 0x58
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f007 f991 	bl	80089b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	4b3f      	ldr	r3, [pc, #252]	; (8001798 <_Z18SystemClock_Configv+0x134>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a3e      	ldr	r2, [pc, #248]	; (8001798 <_Z18SystemClock_Configv+0x134>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b3c      	ldr	r3, [pc, #240]	; (8001798 <_Z18SystemClock_Configv+0x134>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b2:	2300      	movs	r3, #0
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	4b39      	ldr	r3, [pc, #228]	; (800179c <_Z18SystemClock_Configv+0x138>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a38      	ldr	r2, [pc, #224]	; (800179c <_Z18SystemClock_Configv+0x138>)
 80016bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b36      	ldr	r3, [pc, #216]	; (800179c <_Z18SystemClock_Configv+0x138>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ce:	2302      	movs	r3, #2
 80016d0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d2:	2301      	movs	r3, #1
 80016d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d8:	2310      	movs	r3, #16
 80016da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016de:	2302      	movs	r3, #2
 80016e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016ea:	2308      	movs	r3, #8
 80016ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 100;
 80016f0:	2364      	movs	r3, #100	; 0x64
 80016f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f6:	2302      	movs	r3, #2
 80016f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001702:	2302      	movs	r3, #2
 8001704:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001708:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800170c:	4618      	mov	r0, r3
 800170e:	f005 fc5b 	bl	8006fc8 <HAL_RCC_OscConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf14      	ite	ne
 8001718:	2301      	movne	r3, #1
 800171a:	2300      	moveq	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8001722:	f000 f83d 	bl	80017a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001726:	230f      	movs	r3, #15
 8001728:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800172a:	2302      	movs	r3, #2
 800172c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172e:	2300      	movs	r3, #0
 8001730:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001736:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800173c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001740:	2103      	movs	r1, #3
 8001742:	4618      	mov	r0, r3
 8001744:	f004 ff7c 	bl	8006640 <HAL_RCC_ClockConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	bf14      	ite	ne
 800174e:	2301      	movne	r3, #1
 8001750:	2300      	moveq	r3, #0
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 8001758:	f000 f822 	bl	80017a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
 800175c:	2304      	movs	r3, #4
 800175e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8001760:	2301      	movs	r3, #1
 8001762:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	4618      	mov	r0, r3
 800176c:	f005 f9a0 	bl	8006ab0 <HAL_RCCEx_PeriphCLKConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf14      	ite	ne
 8001776:	2301      	movne	r3, #1
 8001778:	2300      	moveq	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <_Z18SystemClock_Configv+0x120>
  {
    Error_Handler();
 8001780:	f000 f80e 	bl	80017a0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_5);
 8001784:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001788:	2100      	movs	r1, #0
 800178a:	2001      	movs	r0, #1
 800178c:	f005 f83e 	bl	800680c <HAL_RCC_MCOConfig>
}
 8001790:	bf00      	nop
 8001792:	37a8      	adds	r7, #168	; 0xa8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	40007000 	.word	0x40007000

080017a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a4:	b672      	cpsid	i
}
 80017a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <Error_Handler+0x8>

080017aa <ov7670_saturation>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_saturation(int8_t s)  //-2 to 2
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
	ov7670_write_register(OV7670_MTX1,	0x80 + 0x20 * s);
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	3304      	adds	r3, #4
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	015b      	lsls	r3, r3, #5
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4619      	mov	r1, r3
 80017c2:	204f      	movs	r0, #79	; 0x4f
 80017c4:	f000 f8ac 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_MTX2, 	0x80 + 0x20 * s);
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	3304      	adds	r3, #4
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	015b      	lsls	r3, r3, #5
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	4619      	mov	r1, r3
 80017d6:	2050      	movs	r0, #80	; 0x50
 80017d8:	f000 f8a2 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_MTX3, 	0x00);
 80017dc:	2100      	movs	r1, #0
 80017de:	2051      	movs	r0, #81	; 0x51
 80017e0:	f000 f89e 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_MTX4, 	0x22 + (0x11 * s) / 2);
 80017e4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80017e8:	4613      	mov	r3, r2
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	4413      	add	r3, r2
 80017ee:	0fda      	lsrs	r2, r3, #31
 80017f0:	4413      	add	r3, r2
 80017f2:	105b      	asrs	r3, r3, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	3322      	adds	r3, #34	; 0x22
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	4619      	mov	r1, r3
 80017fc:	2052      	movs	r0, #82	; 0x52
 80017fe:	f000 f88f 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_MTX5, 	0x5e + (0x2f * s) / 2);
 8001802:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	0fda      	lsrs	r2, r3, #31
 8001812:	4413      	add	r3, r2
 8001814:	105b      	asrs	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	335e      	adds	r3, #94	; 0x5e
 800181a:	b2db      	uxtb	r3, r3
 800181c:	4619      	mov	r1, r3
 800181e:	2053      	movs	r0, #83	; 0x53
 8001820:	f000 f87e 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_MTX6, 	0x80 + 0x20 * s);
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	3304      	adds	r3, #4
 800182a:	b2db      	uxtb	r3, r3
 800182c:	015b      	lsls	r3, r3, #5
 800182e:	b2db      	uxtb	r3, r3
 8001830:	4619      	mov	r1, r3
 8001832:	2054      	movs	r0, #84	; 0x54
 8001834:	f000 f874 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_MTXS, 	0x9e);
 8001838:	219e      	movs	r1, #158	; 0x9e
 800183a:	2058      	movs	r0, #88	; 0x58
 800183c:	f000 f870 	bl	8001920 <ov7670_write_register>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <ov7670_frame_control>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_frame_control(int16_t hStart,  int16_t vStart) // 154 14
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	460a      	mov	r2, r1
 8001852:	80fb      	strh	r3, [r7, #6]
 8001854:	4613      	mov	r3, r2
 8001856:	80bb      	strh	r3, [r7, #4]
	int hStop = (hStart + 640) % 784; // 10
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001860:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <ov7670_frame_control+0x7c>)
 8001862:	fb82 1203 	smull	r1, r2, r2, r3
 8001866:	1211      	asrs	r1, r2, #8
 8001868:	17da      	asrs	r2, r3, #31
 800186a:	1a8a      	subs	r2, r1, r2
 800186c:	f44f 7144 	mov.w	r1, #784	; 0x310
 8001870:	fb01 f202 	mul.w	r2, r1, r2
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
	ov7670_write_register(OV7670_HSTART,	0x15);//hStart >> 3);
 8001878:	2115      	movs	r1, #21
 800187a:	2017      	movs	r0, #23
 800187c:	f000 f850 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_HSTOP,		0x03);//hStop >> 3);
 8001880:	2103      	movs	r1, #3
 8001882:	2018      	movs	r0, #24
 8001884:	f000 f84c 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_HREF, 		0x80);//((hStop & 0b111) << 3) | (hStart & 0b111));
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	2032      	movs	r0, #50	; 0x32
 800188c:	f000 f848 	bl	8001920 <ov7670_write_register>

	int vStop = (vStart + 480); // 494
 8001890:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001894:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001898:	60bb      	str	r3, [r7, #8]
	ov7670_write_register(OV7670_VSTRT, 	0x03);//vStart >> 2);
 800189a:	2103      	movs	r1, #3
 800189c:	2019      	movs	r0, #25
 800189e:	f000 f83f 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_VSTOP, 	0x7b);//vStop >> 2);
 80018a2:	217b      	movs	r1, #123	; 0x7b
 80018a4:	201a      	movs	r0, #26
 80018a6:	f000 f83b 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_VREF, 		0x00);//((vStop & 0b11) << 2) | (vStart & 0b11));
 80018aa:	2100      	movs	r1, #0
 80018ac:	2003      	movs	r0, #3
 80018ae:	f000 f837 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_COM10, 	0x20U);
 80018b2:	2120      	movs	r1, #32
 80018b4:	2015      	movs	r0, #21
 80018b6:	f000 f833 	bl	8001920 <ov7670_write_register>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	5397829d 	.word	0x5397829d

080018c8 <ov7670_subsampling_control>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~= 19 11 f1
void ov7670_subsampling_control(int8_t com14, int8_t downSample, int8_t pclk_div)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
 80018d2:	460b      	mov	r3, r1
 80018d4:	71bb      	strb	r3, [r7, #6]
 80018d6:	4613      	mov	r3, r2
 80018d8:	717b      	strb	r3, [r7, #5]
	ov7670_write_register(OV7670_COM3, 			0x04);		//DCW enable
 80018da:	2104      	movs	r1, #4
 80018dc:	200c      	movs	r0, #12
 80018de:	f000 f81f 	bl	8001920 <ov7670_write_register>

	ov7670_write_register(OV7670_COM14, 		com14);		//pixel clock divided by 4, manual scaling enable, DCW and PCLK controlled by register
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	4619      	mov	r1, r3
 80018e6:	203e      	movs	r0, #62	; 0x3e
 80018e8:	f000 f81a 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_XSC, 		0x3a);
 80018ec:	213a      	movs	r1, #58	; 0x3a
 80018ee:	2070      	movs	r0, #112	; 0x70
 80018f0:	f000 f816 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_YSC, 		0x35);
 80018f4:	2135      	movs	r1, #53	; 0x35
 80018f6:	2071      	movs	r0, #113	; 0x71
 80018f8:	f000 f812 	bl	8001920 <ov7670_write_register>

	ov7670_write_register(OV7670_SCL_DCWCTR, 	downSample);
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	4619      	mov	r1, r3
 8001900:	2072      	movs	r0, #114	; 0x72
 8001902:	f000 f80d 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_PCLK_DIV, 	pclk_div);	//pixel clock divided by 4
 8001906:	797b      	ldrb	r3, [r7, #5]
 8001908:	4619      	mov	r1, r3
 800190a:	2073      	movs	r0, #115	; 0x73
 800190c:	f000 f808 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_PCLK_DLY, 	0x02);
 8001910:	2102      	movs	r1, #2
 8001912:	20a2      	movs	r0, #162	; 0xa2
 8001914:	f000 f804 	bl	8001920 <ov7670_write_register>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <ov7670_write_register>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_write_register(unsigned char reg, unsigned char val)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	460a      	mov	r2, r1
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	4613      	mov	r3, r2
 800192e:	71bb      	strb	r3, [r7, #6]
	i2c_write_reg(0x42U, reg, val);
 8001930:	79ba      	ldrb	r2, [r7, #6]
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4619      	mov	r1, r3
 8001936:	2042      	movs	r0, #66	; 0x42
 8001938:	f7ff fe58 	bl	80015ec <i2c_write_reg>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <ov7670_read_register>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
uint8_t ov7670_read_register(unsigned char reg)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
	return i2c_read_reg(0x42U, reg);
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	4619      	mov	r1, r3
 8001952:	2042      	movs	r0, #66	; 0x42
 8001954:	f7ff fe20 	bl	8001598 <i2c_read_reg>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <ov7670_set_mode>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_set_mode(ov7670_res_fmt_t resolution, uint16_t exposure)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	460a      	mov	r2, r1
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	4613      	mov	r3, r2
 8001970:	80bb      	strh	r3, [r7, #4]
	if (resolution < 0)
		resolution = 0;
	else if(resolution > 2)
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <ov7670_set_mode+0x1a>
		resolution = 2;
 8001978:	2302      	movs	r3, #2
 800197a:	71fb      	strb	r3, [r7, #7]

	ov7670_write_register(OV7670_COM7,	0x80U);			// all registers default
 800197c:	2180      	movs	r1, #128	; 0x80
 800197e:	2012      	movs	r0, #18
 8001980:	f7ff ffce 	bl	8001920 <ov7670_write_register>
	HAL_Delay(3);
 8001984:	2003      	movs	r0, #3
 8001986:	f001 f9d3 	bl	8002d30 <HAL_Delay>
	ov7670_write_register(OV7670_CLKRC,	0x80U);
 800198a:	2180      	movs	r1, #128	; 0x80
 800198c:	2011      	movs	r0, #17
 800198e:	f7ff ffc7 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_COM11,	0x08U | 0x02U);	// enable auto 50/60Hz detect + exposure timing can be less
 8001992:	210a      	movs	r1, #10
 8001994:	203b      	movs	r0, #59	; 0x3b
 8001996:	f7ff ffc3 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_COM7,	0x04U);			// RGB
 800199a:	2104      	movs	r1, #4
 800199c:	2012      	movs	r0, #18
 800199e:	f7ff ffbf 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_COM15,	0xC0U | 0x10U);	// RGB565
 80019a2:	21d0      	movs	r1, #208	; 0xd0
 80019a4:	2040      	movs	r0, #64	; 0x40
 80019a6:	f7ff ffbb 	bl	8001920 <ov7670_write_register>

	switch (resolution) {
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d01c      	beq.n	80019ea <ov7670_set_mode+0x88>
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	dc25      	bgt.n	8001a00 <ov7670_set_mode+0x9e>
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <ov7670_set_mode+0x5c>
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d00b      	beq.n	80019d4 <ov7670_set_mode+0x72>
 80019bc:	e020      	b.n	8001a00 <ov7670_set_mode+0x9e>
	case QQQVGA_RGB565:
		ov7670_subsampling_control(0x1B, 0x33, 0xF3);
 80019be:	f06f 020c 	mvn.w	r2, #12
 80019c2:	2133      	movs	r1, #51	; 0x33
 80019c4:	201b      	movs	r0, #27
 80019c6:	f7ff ff7f 	bl	80018c8 <ov7670_subsampling_control>
		ov7670_frame_control(196, 14);
 80019ca:	210e      	movs	r1, #14
 80019cc:	20c4      	movs	r0, #196	; 0xc4
 80019ce:	f7ff ff3b 	bl	8001848 <ov7670_frame_control>
		break;
 80019d2:	e015      	b.n	8001a00 <ov7670_set_mode+0x9e>
	case QQVGA_RGB565:
		ov7670_subsampling_control(0x1A, 0x22, 0xF2);
 80019d4:	f06f 020d 	mvn.w	r2, #13
 80019d8:	2122      	movs	r1, #34	; 0x22
 80019da:	201a      	movs	r0, #26
 80019dc:	f7ff ff74 	bl	80018c8 <ov7670_subsampling_control>
		ov7670_frame_control(174, 14);
 80019e0:	210e      	movs	r1, #14
 80019e2:	20ae      	movs	r0, #174	; 0xae
 80019e4:	f7ff ff30 	bl	8001848 <ov7670_frame_control>
		break;
 80019e8:	e00a      	b.n	8001a00 <ov7670_set_mode+0x9e>
	case QVGA_RGB565:
		ov7670_subsampling_control(0x19, 0x11, 0xF1);
 80019ea:	f06f 020e 	mvn.w	r2, #14
 80019ee:	2111      	movs	r1, #17
 80019f0:	2019      	movs	r0, #25
 80019f2:	f7ff ff69 	bl	80018c8 <ov7670_subsampling_control>
		ov7670_frame_control(154, 14);
 80019f6:	210e      	movs	r1, #14
 80019f8:	209a      	movs	r0, #154	; 0x9a
 80019fa:	f7ff ff25 	bl	8001848 <ov7670_frame_control>
		break;
 80019fe:	bf00      	nop
	}

	ov7670_write_register(0xB0U, 			0x84U);
 8001a00:	2184      	movs	r1, #132	; 0x84
 8001a02:	20b0      	movs	r0, #176	; 0xb0
 8001a04:	f7ff ff8c 	bl	8001920 <ov7670_write_register>
	ov7670_saturation(0);
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff fece 	bl	80017aa <ov7670_saturation>
	ov7670_write_register(OV7670_COM8,		0xE7U); // AGC AWB AEC on
 8001a0e:	21e7      	movs	r1, #231	; 0xe7
 8001a10:	2013      	movs	r0, #19
 8001a12:	f7ff ff85 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_AWBCTR0,	0x9FU); // AWB
 8001a16:	219f      	movs	r1, #159	; 0x9f
 8001a18:	206f      	movs	r0, #111	; 0x6f
 8001a1a:	f7ff ff81 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_CLKRC, 	0x80U);
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	2011      	movs	r0, #17
 8001a22:	f7ff ff7d 	bl	8001920 <ov7670_write_register>

	HAL_Delay(50);
 8001a26:	2032      	movs	r0, #50	; 0x32
 8001a28:	f001 f982 	bl	8002d30 <HAL_Delay>

	uint8_t com1 = exposure & 0x03U;				// AEC[1:0]
 8001a2c:	88bb      	ldrh	r3, [r7, #4]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	73fb      	strb	r3, [r7, #15]
	uint8_t aech = (exposure >> 2) & 0xFFU;			// AEC[9:2]
 8001a36:	88bb      	ldrh	r3, [r7, #4]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	73bb      	strb	r3, [r7, #14]
	uint8_t aechh = (exposure >> 10) & 0xFFU;		// AEC[15:10]
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	0a9b      	lsrs	r3, r3, #10
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	737b      	strb	r3, [r7, #13]

	ov7670_write_register(OV7670_COM1, 		(ov7670_read_register(OV7670_COM1) & ~0x03U) | com1);
 8001a46:	2004      	movs	r0, #4
 8001a48:	f7ff ff7c 	bl	8001944 <ov7670_read_register>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f023 0303 	bic.w	r3, r3, #3
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	2004      	movs	r0, #4
 8001a5e:	f7ff ff5f 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_AECH, 		aech);
 8001a62:	7bbb      	ldrb	r3, [r7, #14]
 8001a64:	4619      	mov	r1, r3
 8001a66:	2010      	movs	r0, #16
 8001a68:	f7ff ff5a 	bl	8001920 <ov7670_write_register>
	ov7670_write_register(OV7670_AECHH, 	aechh);
 8001a6c:	7b7b      	ldrb	r3, [r7, #13]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	2007      	movs	r0, #7
 8001a72:	f7ff ff55 	bl	8001920 <ov7670_write_register>
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <ov7670_init1>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_init1()
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	OV7670_RST_LOW;
 8001a84:	2200      	movs	r2, #0
 8001a86:	2104      	movs	r1, #4
 8001a88:	4815      	ldr	r0, [pc, #84]	; (8001ae0 <ov7670_init1+0x60>)
 8001a8a:	f002 fa75 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001a8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a92:	f001 f94d 	bl	8002d30 <HAL_Delay>
	OV7670_RST_HIGH;
 8001a96:	2201      	movs	r2, #1
 8001a98:	2104      	movs	r1, #4
 8001a9a:	4811      	ldr	r0, [pc, #68]	; (8001ae0 <ov7670_init1+0x60>)
 8001a9c:	f002 fa6c 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001aa0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001aa4:	f001 f944 	bl	8002d30 <HAL_Delay>

	ov7670_set_mode(QVGA_RGB565, 300);
 8001aa8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001aac:	2002      	movs	r0, #2
 8001aae:	f7ff ff58 	bl	8001962 <ov7670_set_mode>
	HAL_Delay(300);
 8001ab2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ab6:	f001 f93b 	bl	8002d30 <HAL_Delay>

	TIM1->DIER |= TIM_DIER_TDE;
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <ov7670_init1+0x64>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <ov7670_init1+0x64>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac4:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start(&htim1);
 8001ac6:	4808      	ldr	r0, [pc, #32]	; (8001ae8 <ov7670_init1+0x68>)
 8001ac8:	f005 fd96 	bl	80075f8 <HAL_TIM_Base_Start>

	HAL_NVIC_SetPriority(OV7670_VSYNC_EXTI_IRQn, 0, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2007      	movs	r0, #7
 8001ad2:	f001 fe0e 	bl	80036f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7670_VSYNC_EXTI_IRQn);
 8001ad6:	2007      	movs	r0, #7
 8001ad8:	f001 fe27 	bl	800372a <HAL_NVIC_EnableIRQ>
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021400 	.word	0x40021400
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	20025d98 	.word	0x20025d98

08001aec <EXTI0_HREF_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI0_HREF_Callback()
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	// Falling edge
	HAL_DMA_Abort(&hdma_tim1_trig);
 8001af0:	4810      	ldr	r0, [pc, #64]	; (8001b34 <EXTI0_HREF_Callback+0x48>)
 8001af2:	f001 ff2c 	bl	800394e <HAL_DMA_Abort>
	HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)(g_cam_buff + g_offset), 640);
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <EXTI0_HREF_Callback+0x4c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <EXTI0_HREF_Callback+0x50>)
 8001afc:	4413      	add	r3, r2
 8001afe:	461a      	mov	r2, r3
 8001b00:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001b04:	490e      	ldr	r1, [pc, #56]	; (8001b40 <EXTI0_HREF_Callback+0x54>)
 8001b06:	480b      	ldr	r0, [pc, #44]	; (8001b34 <EXTI0_HREF_Callback+0x48>)
 8001b08:	f001 fee6 	bl	80038d8 <HAL_DMA_Start>
	if(g_cam_buff + g_offset >= g_cam_buff + OV7670_FRAME_SIZE_QVGA - 640)//38080=38400-320
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <EXTI0_HREF_Callback+0x4c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <EXTI0_HREF_Callback+0x50>)
 8001b12:	4413      	add	r3, r2
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <EXTI0_HREF_Callback+0x58>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d303      	bcc.n	8001b22 <EXTI0_HREF_Callback+0x36>
		g_offset = 0;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <EXTI0_HREF_Callback+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
	else
		g_offset += 640;
}
 8001b20:	e005      	b.n	8001b2e <EXTI0_HREF_Callback+0x42>
		g_offset += 640;
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <EXTI0_HREF_Callback+0x4c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b2a:	4a03      	ldr	r2, [pc, #12]	; (8001b38 <EXTI0_HREF_Callback+0x4c>)
 8001b2c:	6013      	str	r3, [r2, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20025d38 	.word	0x20025d38
 8001b38:	20025b24 	.word	0x20025b24
 8001b3c:	200000a4 	.word	0x200000a4
 8001b40:	40020410 	.word	0x40020410
 8001b44:	20025624 	.word	0x20025624

08001b48 <EXTI1_VSYNC_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI1_VSYNC_Callback()
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	// Rising edge
	if(OV7670_VSYNC_GPIO_Port->IDR & OV7670_VSYNC_Pin)
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <EXTI1_VSYNC_Callback+0x54>)
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <EXTI1_VSYNC_Callback+0x1e>
	{
		HAL_DMA_Abort(&hdma_tim1_trig);
 8001b58:	4811      	ldr	r0, [pc, #68]	; (8001ba0 <EXTI1_VSYNC_Callback+0x58>)
 8001b5a:	f001 fef8 	bl	800394e <HAL_DMA_Abort>
		HAL_NVIC_DisableIRQ(OV7670_HREF_EXTI_IRQn);
 8001b5e:	2006      	movs	r0, #6
 8001b60:	f001 fdf1 	bl	8003746 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_EnableIRQ(OV7670_HREF_EXTI_IRQn);
		HAL_DMA_Abort(&hdma_tim1_trig);
		HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)g_cam_buff, 640); // first line
		g_offset += 640;
	}
}
 8001b64:	e017      	b.n	8001b96 <EXTI1_VSYNC_Callback+0x4e>
		HAL_NVIC_SetPriority(OV7670_HREF_EXTI_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2006      	movs	r0, #6
 8001b6c:	f001 fdc1 	bl	80036f2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(OV7670_HREF_EXTI_IRQn);
 8001b70:	2006      	movs	r0, #6
 8001b72:	f001 fdda 	bl	800372a <HAL_NVIC_EnableIRQ>
		HAL_DMA_Abort(&hdma_tim1_trig);
 8001b76:	480a      	ldr	r0, [pc, #40]	; (8001ba0 <EXTI1_VSYNC_Callback+0x58>)
 8001b78:	f001 fee9 	bl	800394e <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)g_cam_buff, 640); // first line
 8001b7c:	4a09      	ldr	r2, [pc, #36]	; (8001ba4 <EXTI1_VSYNC_Callback+0x5c>)
 8001b7e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001b82:	4909      	ldr	r1, [pc, #36]	; (8001ba8 <EXTI1_VSYNC_Callback+0x60>)
 8001b84:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <EXTI1_VSYNC_Callback+0x58>)
 8001b86:	f001 fea7 	bl	80038d8 <HAL_DMA_Start>
		g_offset += 640;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <EXTI1_VSYNC_Callback+0x64>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b92:	4a06      	ldr	r2, [pc, #24]	; (8001bac <EXTI1_VSYNC_Callback+0x64>)
 8001b94:	6013      	str	r3, [r2, #0]
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	20025d38 	.word	0x20025d38
 8001ba4:	200000a4 	.word	0x200000a4
 8001ba8:	40020410 	.word	0x40020410
 8001bac:	20025b24 	.word	0x20025b24

08001bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_MspInit+0x4c>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <HAL_MspInit+0x4c>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <HAL_MspInit+0x4c>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_MspInit+0x4c>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <HAL_MspInit+0x4c>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_MspInit+0x4c>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800

08001c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <NMI_Handler+0x4>

08001c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <HardFault_Handler+0x4>

08001c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <MemManage_Handler+0x4>

08001c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <BusFault_Handler+0x4>

08001c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <UsageFault_Handler+0x4>

08001c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4c:	f001 f850 	bl	8002cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f002 f9a7 	bl	8003fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001c66:	2002      	movs	r0, #2
 8001c68:	f002 f9a0 	bl	8003fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001c74:	2008      	movs	r0, #8
 8001c76:	f002 f999 	bl	8003fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <I2C2_EV_IRQHandler+0x10>)
 8001c86:	f002 fe11 	bl	80048ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20025ce4 	.word	0x20025ce4

08001c94 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((USART6->SR & USART_SR_RXNE) && (USART6->CR1 & USART_CR1_RXNEIE))
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <USART6_IRQHandler+0x2c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d007      	beq.n	8001cb4 <USART6_IRQHandler+0x20>
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <USART6_IRQHandler+0x2c>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <USART6_IRQHandler+0x20>
		uart_rx_callback();
 8001cb0:	f000 fd86 	bl	80027c0 <uart_rx_callback>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001cb4:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <USART6_IRQHandler+0x30>)
 8001cb6:	f006 f805 	bl	8007cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40011400 	.word	0x40011400
 8001cc4:	20025f14 	.word	0x20025f14

08001cc8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == OV7670_VSYNC_Pin)
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d102      	bne.n	8001cde <HAL_GPIO_EXTI_Callback+0x16>
		EXTI1_VSYNC_Callback();
 8001cd8:	f7ff ff36 	bl	8001b48 <EXTI1_VSYNC_Callback>
	else if(GPIO_Pin == OV7670_HREF_Pin)
		EXTI0_HREF_Callback();
	else if(GPIO_Pin == TOUCH_YU_Pin)
		EXTI3_TOUCH_Callback();
}
 8001cdc:	e00a      	b.n	8001cf4 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == OV7670_HREF_Pin)
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d102      	bne.n	8001cea <HAL_GPIO_EXTI_Callback+0x22>
		EXTI0_HREF_Callback();
 8001ce4:	f7ff ff02 	bl	8001aec <EXTI0_HREF_Callback>
}
 8001ce8:	e004      	b.n	8001cf4 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == TOUCH_YU_Pin)
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d101      	bne.n	8001cf4 <HAL_GPIO_EXTI_Callback+0x2c>
		EXTI3_TOUCH_Callback();
 8001cf0:	f000 fb24 	bl	800233c <EXTI3_TOUCH_Callback>
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
	return 1;
 8001d00:	2301      	movs	r3, #1
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_kill>:

int _kill(int pid, int sig)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d16:	f006 fde3 	bl	80088e0 <__errno>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2216      	movs	r2, #22
 8001d1e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_exit>:

void _exit (int status)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ffe7 	bl	8001d0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d3e:	e7fe      	b.n	8001d3e <_exit+0x12>

08001d40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	e00a      	b.n	8001d68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d52:	f3af 8000 	nop.w
 8001d56:	4601      	mov	r1, r0
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	60ba      	str	r2, [r7, #8]
 8001d5e:	b2ca      	uxtb	r2, r1
 8001d60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbf0      	blt.n	8001d52 <_read+0x12>
	}

return len;
 8001d70:	687b      	ldr	r3, [r7, #4]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e009      	b.n	8001da0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	60ba      	str	r2, [r7, #8]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	dbf1      	blt.n	8001d8c <_write+0x12>
	}
	return len;
 8001da8:	687b      	ldr	r3, [r7, #4]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <_close>:

int _close(int file)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
	return -1;
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dda:	605a      	str	r2, [r3, #4]
	return 0;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <_isatty>:

int _isatty(int file)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
	return 1;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <_sbrk+0x5c>)
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <_sbrk+0x60>)
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <_sbrk+0x64>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <_sbrk+0x68>)
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d207      	bcs.n	8001e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e4c:	f006 fd48 	bl	80088e0 <__errno>
 8001e50:	4603      	mov	r3, r0
 8001e52:	220c      	movs	r2, #12
 8001e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e5a:	e009      	b.n	8001e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <_sbrk+0x64>)
 8001e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20050000 	.word	0x20050000
 8001e7c:	00000400 	.word	0x00000400
 8001e80:	20025b28 	.word	0x20025b28
 8001e84:	20025f70 	.word	0x20025f70

08001e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <SystemInit+0x20>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <SystemInit+0x20>)
 8001e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
 8001ec0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eca:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <MX_TIM1_Init+0xa4>)
 8001ecc:	4a21      	ldr	r2, [pc, #132]	; (8001f54 <MX_TIM1_Init+0xa8>)
 8001ece:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <MX_TIM1_Init+0xa4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <MX_TIM1_Init+0xa4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001edc:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <MX_TIM1_Init+0xa4>)
 8001ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <MX_TIM1_Init+0xa4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eea:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <MX_TIM1_Init+0xa4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <MX_TIM1_Init+0xa4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ef6:	4816      	ldr	r0, [pc, #88]	; (8001f50 <MX_TIM1_Init+0xa4>)
 8001ef8:	f005 fb2e 	bl	8007558 <HAL_TIM_Base_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001f02:	f7ff fc4d 	bl	80017a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001f06:	2307      	movs	r3, #7
 8001f08:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001f0a:	2360      	movs	r3, #96	; 0x60
 8001f0c:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	480c      	ldr	r0, [pc, #48]	; (8001f50 <MX_TIM1_Init+0xa4>)
 8001f1e:	f005 fbd3 	bl	80076c8 <HAL_TIM_SlaveConfigSynchro>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001f28:	f7ff fc3a 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	4619      	mov	r1, r3
 8001f38:	4805      	ldr	r0, [pc, #20]	; (8001f50 <MX_TIM1_Init+0xa4>)
 8001f3a:	f005 fdb5 	bl	8007aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001f44:	f7ff fc2c 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f48:	bf00      	nop
 8001f4a:	3720      	adds	r7, #32
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20025d98 	.word	0x20025d98
 8001f54:	40010000 	.word	0x40010000

08001f58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a31      	ldr	r2, [pc, #196]	; (800203c <HAL_TIM_Base_MspInit+0xe4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d15b      	bne.n	8002032 <HAL_TIM_Base_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	4b30      	ldr	r3, [pc, #192]	; (8002040 <HAL_TIM_Base_MspInit+0xe8>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	4a2f      	ldr	r2, [pc, #188]	; (8002040 <HAL_TIM_Base_MspInit+0xe8>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_TIM_Base_MspInit+0xe8>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b29      	ldr	r3, [pc, #164]	; (8002040 <HAL_TIM_Base_MspInit+0xe8>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a28      	ldr	r2, [pc, #160]	; (8002040 <HAL_TIM_Base_MspInit+0xe8>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b26      	ldr	r3, [pc, #152]	; (8002040 <HAL_TIM_Base_MspInit+0xe8>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = OV7670_PCLK_Pin;
 8001fb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OV7670_PCLK_GPIO_Port, &GPIO_InitStruct);
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4619      	mov	r1, r3
 8001fce:	481d      	ldr	r0, [pc, #116]	; (8002044 <HAL_TIM_Base_MspInit+0xec>)
 8001fd0:	f001 fe3e 	bl	8003c50 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_TRIG Init */
    hdma_tim1_trig.Instance = DMA2_Stream0;
 8001fd4:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <HAL_TIM_Base_MspInit+0xf0>)
 8001fd6:	4a1d      	ldr	r2, [pc, #116]	; (800204c <HAL_TIM_Base_MspInit+0xf4>)
 8001fd8:	601a      	str	r2, [r3, #0]
    hdma_tim1_trig.Init.Channel = DMA_CHANNEL_6;
 8001fda:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_TIM_Base_MspInit+0xf0>)
 8001fdc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001fe0:	605a      	str	r2, [r3, #4]
    hdma_tim1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe2:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_TIM_Base_MspInit+0xf0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
    hdma_tim1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_TIM_Base_MspInit+0xf0>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
    hdma_tim1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001fee:	4b16      	ldr	r3, [pc, #88]	; (8002048 <HAL_TIM_Base_MspInit+0xf0>)
 8001ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff4:	611a      	str	r2, [r3, #16]
    hdma_tim1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <HAL_TIM_Base_MspInit+0xf0>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	615a      	str	r2, [r3, #20]
    hdma_tim1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_TIM_Base_MspInit+0xf0>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
    hdma_tim1_trig.Init.Mode = DMA_NORMAL;
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_TIM_Base_MspInit+0xf0>)
 8002004:	2200      	movs	r2, #0
 8002006:	61da      	str	r2, [r3, #28]
    hdma_tim1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <HAL_TIM_Base_MspInit+0xf0>)
 800200a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800200e:	621a      	str	r2, [r3, #32]
    hdma_tim1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_TIM_Base_MspInit+0xf0>)
 8002012:	2200      	movs	r2, #0
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_trig) != HAL_OK)
 8002016:	480c      	ldr	r0, [pc, #48]	; (8002048 <HAL_TIM_Base_MspInit+0xf0>)
 8002018:	f001 fbb0 	bl	800377c <HAL_DMA_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_TIM_Base_MspInit+0xce>
    {
      Error_Handler();
 8002022:	f7ff fbbd 	bl	80017a0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_trig);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HAL_TIM_Base_MspInit+0xf0>)
 800202a:	639a      	str	r2, [r3, #56]	; 0x38
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <HAL_TIM_Base_MspInit+0xf0>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40010000 	.word	0x40010000
 8002040:	40023800 	.word	0x40023800
 8002044:	40020000 	.word	0x40020000
 8002048:	20025d38 	.word	0x20025d38
 800204c:	40026410 	.word	0x40026410

08002050 <adc_select_y>:

/******************************************************
 *
******************************************************/
void adc_select_y(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002056:	463b      	mov	r3, r7
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]

	sConfig.Channel = TOUCH_YU_ADC_CHANNEL;
 8002062:	2303      	movs	r3, #3
 8002064:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002066:	2301      	movs	r3, #1
 8002068:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800206e:	463b      	mov	r3, r7
 8002070:	4619      	mov	r1, r3
 8002072:	4806      	ldr	r0, [pc, #24]	; (800208c <adc_select_y+0x3c>)
 8002074:	f001 f810 	bl	8003098 <HAL_ADC_ConfigChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <adc_select_y+0x32>
	{
		Error_Handler();
 800207e:	f7ff fb8f 	bl	80017a0 <Error_Handler>
	}
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20025c4c 	.word	0x20025c4c

08002090 <adc_select_x>:

/******************************************************
 *
******************************************************/
void adc_select_x(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002096:	463b      	mov	r3, r7
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]

	sConfig.Channel = TOUCH_XR_ADC_CHANNEL;
 80020a2:	2302      	movs	r3, #2
 80020a4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ae:	463b      	mov	r3, r7
 80020b0:	4619      	mov	r1, r3
 80020b2:	4806      	ldr	r0, [pc, #24]	; (80020cc <adc_select_x+0x3c>)
 80020b4:	f000 fff0 	bl	8003098 <HAL_ADC_ConfigChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <adc_select_x+0x32>
	{
		Error_Handler();
 80020be:	f7ff fb6f 	bl	80017a0 <Error_Handler>
	}
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20025c4c 	.word	0x20025c4c

080020d0 <touch_read_coordinates>:
 * ||  read X  || adc  | open | high | low  |
 * ||  read Y  || high | low  | adc  | open |
 * ------------------------------------------
******************************************************/
touch_coordinates_t touch_read_coordinates()
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
	touch_coordinates_t ret = {0};
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
	uint8_t adc_cnt = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
	uint16_t adc_values = 0;//[5] = {0};
 80020de:	2300      	movs	r3, #0
 80020e0:	81bb      	strh	r3, [r7, #12]

	// TOUCH_XR output-high
	GPIOA->MODER &= ~GPIO_MODER_MODER2_Msk;
 80020e2:	4b59      	ldr	r3, [pc, #356]	; (8002248 <touch_read_coordinates+0x178>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a58      	ldr	r2, [pc, #352]	; (8002248 <touch_read_coordinates+0x178>)
 80020e8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020ec:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER2_0;
 80020ee:	4b56      	ldr	r3, [pc, #344]	; (8002248 <touch_read_coordinates+0x178>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a55      	ldr	r2, [pc, #340]	; (8002248 <touch_read_coordinates+0x178>)
 80020f4:	f043 0310 	orr.w	r3, r3, #16
 80020f8:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_OD2;
 80020fa:	4b53      	ldr	r3, [pc, #332]	; (8002248 <touch_read_coordinates+0x178>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4a52      	ldr	r2, [pc, #328]	; (8002248 <touch_read_coordinates+0x178>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6153      	str	r3, [r2, #20]
	// TOUCH_XL output-low
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8002106:	4b50      	ldr	r3, [pc, #320]	; (8002248 <touch_read_coordinates+0x178>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a4f      	ldr	r2, [pc, #316]	; (8002248 <touch_read_coordinates+0x178>)
 800210c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002110:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_0;
 8002112:	4b4d      	ldr	r3, [pc, #308]	; (8002248 <touch_read_coordinates+0x178>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a4c      	ldr	r2, [pc, #304]	; (8002248 <touch_read_coordinates+0x178>)
 8002118:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211c:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~TOUCH_XL_Pin;
 800211e:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <touch_read_coordinates+0x178>)
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	4a49      	ldr	r2, [pc, #292]	; (8002248 <touch_read_coordinates+0x178>)
 8002124:	f023 0320 	bic.w	r3, r3, #32
 8002128:	6153      	str	r3, [r2, #20]
	// TOUCH_YD inout-open
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <touch_read_coordinates+0x178>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a46      	ldr	r2, [pc, #280]	; (8002248 <touch_read_coordinates+0x178>)
 8002130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002134:	6013      	str	r3, [r2, #0]
	//HAL_Delay(5);
	// TOUCH_YU as ADC
	GPIOA->MODER |= GPIO_MODER_MODER3_Msk;
 8002136:	4b44      	ldr	r3, [pc, #272]	; (8002248 <touch_read_coordinates+0x178>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a43      	ldr	r2, [pc, #268]	; (8002248 <touch_read_coordinates+0x178>)
 800213c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002140:	6013      	str	r3, [r2, #0]
	for(adc_cnt = 0; adc_cnt < 5; adc_cnt++)
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]
 8002146:	e014      	b.n	8002172 <touch_read_coordinates+0xa2>
	{
		adc_select_y();
 8002148:	f7ff ff82 	bl	8002050 <adc_select_y>
		HAL_ADC_Start(&hadc1);
 800214c:	483f      	ldr	r0, [pc, #252]	; (800224c <touch_read_coordinates+0x17c>)
 800214e:	f000 fe57 	bl	8002e00 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 500);
 8002152:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002156:	483d      	ldr	r0, [pc, #244]	; (800224c <touch_read_coordinates+0x17c>)
 8002158:	f000 ff06 	bl	8002f68 <HAL_ADC_PollForConversion>
		adc_values += HAL_ADC_GetValue(&hadc1);
 800215c:	483b      	ldr	r0, [pc, #236]	; (800224c <touch_read_coordinates+0x17c>)
 800215e:	f000 ff8e 	bl	800307e <HAL_ADC_GetValue>
 8002162:	4603      	mov	r3, r0
 8002164:	b29a      	uxth	r2, r3
 8002166:	89bb      	ldrh	r3, [r7, #12]
 8002168:	4413      	add	r3, r2
 800216a:	81bb      	strh	r3, [r7, #12]
	for(adc_cnt = 0; adc_cnt < 5; adc_cnt++)
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	3301      	adds	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d9e7      	bls.n	8002148 <touch_read_coordinates+0x78>
	}
	adc_values = adc_values/5;
 8002178:	89bb      	ldrh	r3, [r7, #12]
 800217a:	4a35      	ldr	r2, [pc, #212]	; (8002250 <touch_read_coordinates+0x180>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	81bb      	strh	r3, [r7, #12]
	//qsort(adc_values, sizeof(adc_values)/sizeof(*adc_values), sizeof(*adc_values), comp);
	ret.x = adc_values;//[2];
 8002184:	89bb      	ldrh	r3, [r7, #12]
 8002186:	80bb      	strh	r3, [r7, #4]

	// TOUCH_YU output-high
	GPIOA->MODER &= ~GPIO_MODER_MODER3_Msk;
 8002188:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <touch_read_coordinates+0x178>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a2e      	ldr	r2, [pc, #184]	; (8002248 <touch_read_coordinates+0x178>)
 800218e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002192:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER3_0;
 8002194:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <touch_read_coordinates+0x178>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a2b      	ldr	r2, [pc, #172]	; (8002248 <touch_read_coordinates+0x178>)
 800219a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800219e:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_OD3;
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <touch_read_coordinates+0x178>)
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	4a28      	ldr	r2, [pc, #160]	; (8002248 <touch_read_coordinates+0x178>)
 80021a6:	f043 0308 	orr.w	r3, r3, #8
 80021aa:	6153      	str	r3, [r2, #20]
	// TOUCH_YD output-low
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 80021ac:	4b26      	ldr	r3, [pc, #152]	; (8002248 <touch_read_coordinates+0x178>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a25      	ldr	r2, [pc, #148]	; (8002248 <touch_read_coordinates+0x178>)
 80021b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER4_0;
 80021b8:	4b23      	ldr	r3, [pc, #140]	; (8002248 <touch_read_coordinates+0x178>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a22      	ldr	r2, [pc, #136]	; (8002248 <touch_read_coordinates+0x178>)
 80021be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c2:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~TOUCH_YD_Pin;
 80021c4:	4b20      	ldr	r3, [pc, #128]	; (8002248 <touch_read_coordinates+0x178>)
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	4a1f      	ldr	r2, [pc, #124]	; (8002248 <touch_read_coordinates+0x178>)
 80021ca:	f023 0310 	bic.w	r3, r3, #16
 80021ce:	6153      	str	r3, [r2, #20]
	// TOUCH_XL input-open
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <touch_read_coordinates+0x178>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <touch_read_coordinates+0x178>)
 80021d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80021da:	6013      	str	r3, [r2, #0]
	//HAL_Delay(5);
	// TOUCH_XR as ADC
	GPIOA->MODER |= GPIO_MODER_MODER2_Msk;//YU analog
 80021dc:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <touch_read_coordinates+0x178>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a19      	ldr	r2, [pc, #100]	; (8002248 <touch_read_coordinates+0x178>)
 80021e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80021e6:	6013      	str	r3, [r2, #0]
	for(adc_cnt = 0; adc_cnt < 5; adc_cnt++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]
 80021ec:	e014      	b.n	8002218 <touch_read_coordinates+0x148>
	{
		adc_select_x();
 80021ee:	f7ff ff4f 	bl	8002090 <adc_select_x>
		HAL_ADC_Start(&hadc1);
 80021f2:	4816      	ldr	r0, [pc, #88]	; (800224c <touch_read_coordinates+0x17c>)
 80021f4:	f000 fe04 	bl	8002e00 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 500);
 80021f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80021fc:	4813      	ldr	r0, [pc, #76]	; (800224c <touch_read_coordinates+0x17c>)
 80021fe:	f000 feb3 	bl	8002f68 <HAL_ADC_PollForConversion>
		adc_values += HAL_ADC_GetValue(&hadc1);
 8002202:	4812      	ldr	r0, [pc, #72]	; (800224c <touch_read_coordinates+0x17c>)
 8002204:	f000 ff3b 	bl	800307e <HAL_ADC_GetValue>
 8002208:	4603      	mov	r3, r0
 800220a:	b29a      	uxth	r2, r3
 800220c:	89bb      	ldrh	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	81bb      	strh	r3, [r7, #12]
	for(adc_cnt = 0; adc_cnt < 5; adc_cnt++)
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	3301      	adds	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d9e7      	bls.n	80021ee <touch_read_coordinates+0x11e>
	}
	adc_values = adc_values / 5;
 800221e:	89bb      	ldrh	r3, [r7, #12]
 8002220:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <touch_read_coordinates+0x180>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	81bb      	strh	r3, [r7, #12]
	//qsort(adc_values, sizeof(adc_values)/sizeof(*adc_values), sizeof(*adc_values), comp);
	ret.y = adc_values;//[2];
 800222a:	89bb      	ldrh	r3, [r7, #12]
 800222c:	80fb      	strh	r3, [r7, #6]

	return ret;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	2300      	movs	r3, #0
 8002234:	893a      	ldrh	r2, [r7, #8]
 8002236:	f362 030f 	bfi	r3, r2, #0, #16
 800223a:	897a      	ldrh	r2, [r7, #10]
 800223c:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40020000 	.word	0x40020000
 800224c:	20025c4c 	.word	0x20025c4c
 8002250:	cccccccd 	.word	0xcccccccd

08002254 <init_TOUCH_YU_as_adc>:



void init_TOUCH_YU_as_adc(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]

	// Disable interrupt on TOUCH_YU pin
	HAL_NVIC_DisableIRQ(TOUCH_YU_EXTI_IRQn);
 8002268:	2009      	movs	r0, #9
 800226a:	f001 fa6c 	bl	8003746 <HAL_NVIC_DisableIRQ>

	// Init analog mode on TOUCH_YU pin
    GPIO_InitStruct.Pin = TOUCH_YU_Pin;
 800226e:	2308      	movs	r3, #8
 8002270:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002272:	2303      	movs	r3, #3
 8002274:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(TOUCH_YU_GPIO_Port, &GPIO_InitStruct);
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	4619      	mov	r1, r3
 800227e:	4803      	ldr	r0, [pc, #12]	; (800228c <init_TOUCH_YU_as_adc+0x38>)
 8002280:	f001 fce6 	bl	8003c50 <HAL_GPIO_Init>
}
 8002284:	bf00      	nop
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40020000 	.word	0x40020000

08002290 <init_TOUCH_YU_as_interrupt>:



void init_TOUCH_YU_as_interrupt(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]

	// TOUCH_YD as input-open
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a22      	ldr	r2, [pc, #136]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ae:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD4_Msk;
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a1f      	ldr	r2, [pc, #124]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ba:	60d3      	str	r3, [r2, #12]

	// TOUCH_XL output-low
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022c2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80022c6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_0;
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a19      	ldr	r2, [pc, #100]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d2:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~TOUCH_XL_Pin;
 80022d4:	4b17      	ldr	r3, [pc, #92]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	4a16      	ldr	r2, [pc, #88]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022da:	f023 0320 	bic.w	r3, r3, #32
 80022de:	6153      	str	r3, [r2, #20]

	// TOUCH_XL output-low
	GPIOA->MODER &= ~GPIO_MODER_MODER2_Msk;
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a13      	ldr	r2, [pc, #76]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022ea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER2_0;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a10      	ldr	r2, [pc, #64]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022f2:	f043 0310 	orr.w	r3, r3, #16
 80022f6:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~TOUCH_XR_Pin;
 80022f8:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 80022fe:	f023 0304 	bic.w	r3, r3, #4
 8002302:	6153      	str	r3, [r2, #20]

	// TOUCH_YU as interrupt input
	GPIO_InitStruct.Pin = TOUCH_YU_Pin;
 8002304:	2308      	movs	r3, #8
 8002306:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <init_TOUCH_YU_as_interrupt+0xa8>)
 800230a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800230c:	2301      	movs	r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	4619      	mov	r1, r3
 8002314:	4807      	ldr	r0, [pc, #28]	; (8002334 <init_TOUCH_YU_as_interrupt+0xa4>)
 8002316:	f001 fc9b 	bl	8003c50 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(TOUCH_YU_EXTI_IRQn, 0, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	2009      	movs	r0, #9
 8002320:	f001 f9e7 	bl	80036f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TOUCH_YU_EXTI_IRQn);
 8002324:	2009      	movs	r0, #9
 8002326:	f001 fa00 	bl	800372a <HAL_NVIC_EnableIRQ>
}
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40020000 	.word	0x40020000
 8002338:	10210000 	.word	0x10210000

0800233c <EXTI3_TOUCH_Callback>:



void EXTI3_TOUCH_Callback()
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
	init_TOUCH_YU_as_adc();
 8002340:	f7ff ff88 	bl	8002254 <init_TOUCH_YU_as_adc>
	g_touch_state = TOUCH_TOUCHED;
 8002344:	4b02      	ldr	r3, [pc, #8]	; (8002350 <EXTI3_TOUCH_Callback+0x14>)
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20025b2c 	.word	0x20025b2c

08002354 <touch_init>:



void touch_init()
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	// TOUCH_YD as input-open
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <touch_init+0x48>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0f      	ldr	r2, [pc, #60]	; (800239c <touch_init+0x48>)
 800235e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002362:	6013      	str	r3, [r2, #0]

	// TOUCH_XL output-low
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8002364:	4b0d      	ldr	r3, [pc, #52]	; (800239c <touch_init+0x48>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0c      	ldr	r2, [pc, #48]	; (800239c <touch_init+0x48>)
 800236a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800236e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_0;
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <touch_init+0x48>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a09      	ldr	r2, [pc, #36]	; (800239c <touch_init+0x48>)
 8002376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800237a:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~TOUCH_XL_Pin;
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <touch_init+0x48>)
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <touch_init+0x48>)
 8002382:	f023 0320 	bic.w	r3, r3, #32
 8002386:	6153      	str	r3, [r2, #20]

	// Enable interrupt
	HAL_NVIC_SetPriority(TOUCH_YU_EXTI_IRQn, 0, 0);
 8002388:	2200      	movs	r2, #0
 800238a:	2100      	movs	r1, #0
 800238c:	2009      	movs	r0, #9
 800238e:	f001 f9b0 	bl	80036f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TOUCH_YU_EXTI_IRQn);
 8002392:	2009      	movs	r0, #9
 8002394:	f001 f9c9 	bl	800372a <HAL_NVIC_EnableIRQ>
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40020000 	.word	0x40020000

080023a0 <touch_process>:



void touch_process()
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	switch(g_touch_state)
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <touch_process+0x4c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d016      	beq.n	80023da <touch_process+0x3a>
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	dc1a      	bgt.n	80023e6 <touch_process+0x46>
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <touch_process+0x1a>
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d007      	beq.n	80023c8 <touch_process+0x28>
	case TOUCH_RELEASED:
		init_TOUCH_YU_as_interrupt();
		g_touch_state = TOUCH_IDLE;
		break;
	}
}
 80023b8:	e015      	b.n	80023e6 <touch_process+0x46>
		g_touch_coordinates.x = 0;
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <touch_process+0x50>)
 80023bc:	2200      	movs	r2, #0
 80023be:	801a      	strh	r2, [r3, #0]
		g_touch_coordinates.y = 0;
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <touch_process+0x50>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	805a      	strh	r2, [r3, #2]
		break;
 80023c6:	e00e      	b.n	80023e6 <touch_process+0x46>
		g_touch_coordinates = touch_read_coordinates();
 80023c8:	f7ff fe82 	bl	80020d0 <touch_read_coordinates>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <touch_process+0x50>)
 80023d0:	6013      	str	r3, [r2, #0]
		g_touch_state = TOUCH_RELEASED;
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <touch_process+0x4c>)
 80023d4:	2202      	movs	r2, #2
 80023d6:	701a      	strb	r2, [r3, #0]
		break;
 80023d8:	e005      	b.n	80023e6 <touch_process+0x46>
		init_TOUCH_YU_as_interrupt();
 80023da:	f7ff ff59 	bl	8002290 <init_TOUCH_YU_as_interrupt>
		g_touch_state = TOUCH_IDLE;
 80023de:	4b03      	ldr	r3, [pc, #12]	; (80023ec <touch_process+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
		break;
 80023e4:	bf00      	nop
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20025b2c 	.word	0x20025b2c
 80023f0:	20025b30 	.word	0x20025b30

080023f4 <uart_init>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_init()
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <uart_init+0x20>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <uart_init+0x20>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0220 	orr.w	r2, r2, #32
 8002406:	60da      	str	r2, [r3, #12]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20025f14 	.word	0x20025f14

08002418 <uart_tx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_tx_process()
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
	static uint8_t last_nose = 0;
	uint8_t string_size;

	switch(g_uart_tx_state)
 800241e:	4b34      	ldr	r3, [pc, #208]	; (80024f0 <uart_tx_process+0xd8>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d030      	beq.n	8002488 <uart_tx_process+0x70>
 8002426:	2b02      	cmp	r3, #2
 8002428:	dc5e      	bgt.n	80024e8 <uart_tx_process+0xd0>
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <uart_tx_process+0x1c>
 800242e:	2b01      	cmp	r3, #1
 8002430:	d00a      	beq.n	8002448 <uart_tx_process+0x30>
			g_uart_tx_state = UART_TX_TRANSMIT;
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
			g_uart_tx_state = UART_TX_IDLE;
		break;
	}
}
 8002432:	e059      	b.n	80024e8 <uart_tx_process+0xd0>
		if(g_uart_tx_nose != g_uart_tx_tail)
 8002434:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <uart_tx_process+0xdc>)
 8002436:	881a      	ldrh	r2, [r3, #0]
 8002438:	4b2f      	ldr	r3, [pc, #188]	; (80024f8 <uart_tx_process+0xe0>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d050      	beq.n	80024e2 <uart_tx_process+0xca>
			g_uart_tx_state = UART_TX_TRANSMIT;
 8002440:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <uart_tx_process+0xd8>)
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
		break;
 8002446:	e04c      	b.n	80024e2 <uart_tx_process+0xca>
		string_size = strlen(g_uart_tx_buffer + (g_uart_tx_nose)) + 1;
 8002448:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <uart_tx_process+0xdc>)
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <uart_tx_process+0xe4>)
 8002450:	4413      	add	r3, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f7fd ff34 	bl	80002c0 <strlen>
 8002458:	4603      	mov	r3, r0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	3301      	adds	r3, #1
 800245e:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit_IT(
 8002460:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <uart_tx_process+0xdc>)
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	4b25      	ldr	r3, [pc, #148]	; (80024fc <uart_tx_process+0xe4>)
 8002468:	4413      	add	r3, r2
 800246a:	79fa      	ldrb	r2, [r7, #7]
 800246c:	b292      	uxth	r2, r2
 800246e:	4619      	mov	r1, r3
 8002470:	4823      	ldr	r0, [pc, #140]	; (8002500 <uart_tx_process+0xe8>)
 8002472:	f005 fbe2 	bl	8007c3a <HAL_UART_Transmit_IT>
		last_nose = g_uart_tx_nose;
 8002476:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <uart_tx_process+0xdc>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b21      	ldr	r3, [pc, #132]	; (8002504 <uart_tx_process+0xec>)
 800247e:	701a      	strb	r2, [r3, #0]
		g_uart_tx_state = UART_TX_TRANSMITING;
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <uart_tx_process+0xd8>)
 8002482:	2202      	movs	r2, #2
 8002484:	701a      	strb	r2, [r3, #0]
		break;
 8002486:	e02f      	b.n	80024e8 <uart_tx_process+0xd0>
		if((last_nose == g_uart_tx_nose))
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <uart_tx_process+0xec>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b29a      	uxth	r2, r3
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <uart_tx_process+0xdc>)
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d103      	bne.n	800249e <uart_tx_process+0x86>
			g_uart_tx_state = UART_TX_TRANSMITING;
 8002496:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <uart_tx_process+0xd8>)
 8002498:	2202      	movs	r2, #2
 800249a:	701a      	strb	r2, [r3, #0]
		break;
 800249c:	e023      	b.n	80024e6 <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail != g_uart_tx_nose))
 800249e:	4b19      	ldr	r3, [pc, #100]	; (8002504 <uart_tx_process+0xec>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <uart_tx_process+0xdc>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d009      	beq.n	80024c0 <uart_tx_process+0xa8>
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <uart_tx_process+0xe0>)
 80024ae:	881a      	ldrh	r2, [r3, #0]
 80024b0:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <uart_tx_process+0xdc>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d003      	beq.n	80024c0 <uart_tx_process+0xa8>
			g_uart_tx_state = UART_TX_TRANSMIT;
 80024b8:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <uart_tx_process+0xd8>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
		break;
 80024be:	e012      	b.n	80024e6 <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
 80024c0:	4b10      	ldr	r3, [pc, #64]	; (8002504 <uart_tx_process+0xec>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <uart_tx_process+0xdc>)
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d00b      	beq.n	80024e6 <uart_tx_process+0xce>
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <uart_tx_process+0xe0>)
 80024d0:	881a      	ldrh	r2, [r3, #0]
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <uart_tx_process+0xdc>)
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d105      	bne.n	80024e6 <uart_tx_process+0xce>
			g_uart_tx_state = UART_TX_IDLE;
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <uart_tx_process+0xd8>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
		break;
 80024e0:	e001      	b.n	80024e6 <uart_tx_process+0xce>
		break;
 80024e2:	bf00      	nop
 80024e4:	e000      	b.n	80024e8 <uart_tx_process+0xd0>
		break;
 80024e6:	bf00      	nop
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20025b34 	.word	0x20025b34
 80024f4:	20025c38 	.word	0x20025c38
 80024f8:	20025c3a 	.word	0x20025c3a
 80024fc:	20025b38 	.word	0x20025b38
 8002500:	20025f14 	.word	0x20025f14
 8002504:	20025c42 	.word	0x20025c42

08002508 <uart_write>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_write(uint8_t* buff)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	uint8_t string_size = strlen(buff) + 1;
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7fd fed5 	bl	80002c0 <strlen>
 8002516:	4603      	mov	r3, r0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	3301      	adds	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]

	if(
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 800251e:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <uart_write+0x110>)
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	4b3d      	ldr	r3, [pc, #244]	; (800261c <uart_write+0x114>)
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	1ad3      	subs	r3, r2, r3
	if(
 800252a:	2b00      	cmp	r3, #0
 800252c:	db0a      	blt.n	8002544 <uart_write+0x3c>
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	4b39      	ldr	r3, [pc, #228]	; (8002618 <uart_write+0x110>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	4619      	mov	r1, r3
 8002536:	4b39      	ldr	r3, [pc, #228]	; (800261c <uart_write+0x114>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	1acb      	subs	r3, r1, r3
 800253c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002540:	429a      	cmp	r2, r3
 8002542:	db10      	blt.n	8002566 <uart_write+0x5e>
			((g_uart_tx_tail - g_uart_tx_nose <= 0) && (string_size < g_uart_tx_nose - g_uart_tx_tail)))
 8002544:	4b34      	ldr	r3, [pc, #208]	; (8002618 <uart_write+0x110>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b34      	ldr	r3, [pc, #208]	; (800261c <uart_write+0x114>)
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	1ad3      	subs	r3, r2, r3
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8002550:	2b00      	cmp	r3, #0
 8002552:	dc5c      	bgt.n	800260e <uart_write+0x106>
			((g_uart_tx_tail - g_uart_tx_nose <= 0) && (string_size < g_uart_tx_nose - g_uart_tx_tail)))
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	4b31      	ldr	r3, [pc, #196]	; (800261c <uart_write+0x114>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	4619      	mov	r1, r3
 800255c:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <uart_write+0x110>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	1acb      	subs	r3, r1, r3
 8002562:	429a      	cmp	r2, r3
 8002564:	da53      	bge.n	800260e <uart_write+0x106>
	{
		if(((g_uart_tx_tail - g_uart_tx_nose >= 0)) && (string_size > (UART_TX_BUFFER_MAX - g_uart_tx_tail)))
 8002566:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <uart_write+0x110>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	4b2b      	ldr	r3, [pc, #172]	; (800261c <uart_write+0x114>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	db2f      	blt.n	80025d6 <uart_write+0xce>
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <uart_write+0x110>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002580:	429a      	cmp	r2, r3
 8002582:	dd28      	ble.n	80025d6 <uart_write+0xce>
		{
			strncpy(g_uart_tx_buffer + g_uart_tx_tail, buff, UART_TX_BUFFER_MAX - g_uart_tx_tail);
 8002584:	4b24      	ldr	r3, [pc, #144]	; (8002618 <uart_write+0x110>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b25      	ldr	r3, [pc, #148]	; (8002620 <uart_write+0x118>)
 800258c:	4413      	add	r3, r2
 800258e:	4a22      	ldr	r2, [pc, #136]	; (8002618 <uart_write+0x110>)
 8002590:	8812      	ldrh	r2, [r2, #0]
 8002592:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4618      	mov	r0, r3
 800259a:	f006 fe3b 	bl	8009214 <strncpy>
			string_size -= (UART_TX_BUFFER_MAX - g_uart_tx_tail);
 800259e:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <uart_write+0x110>)
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	4413      	add	r3, r2
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
			strncpy(g_uart_tx_buffer + 0, buff + (UART_TX_BUFFER_MAX - g_uart_tx_tail), string_size);
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <uart_write+0x110>)
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80025b6:	461a      	mov	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	4619      	mov	r1, r3
 80025c0:	4817      	ldr	r0, [pc, #92]	; (8002620 <uart_write+0x118>)
 80025c2:	f006 fe27 	bl	8009214 <strncpy>
			g_uart_tx_tail = 0;
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <uart_write+0x110>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	801a      	strh	r2, [r3, #0]
			g_uart_tx_tail = string_size;
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <uart_write+0x110>)
 80025d2:	801a      	strh	r2, [r3, #0]
				g_uart_tx_tail += string_size;
			else
				g_uart_tx_tail = 0;
		}
	}
}
 80025d4:	e01b      	b.n	800260e <uart_write+0x106>
			strcpy(g_uart_tx_buffer + g_uart_tx_tail, buff);
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <uart_write+0x110>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <uart_write+0x118>)
 80025de:	4413      	add	r3, r2
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f006 fdfc 	bl	80091e0 <strcpy>
			if(g_uart_tx_tail + string_size < UART_TX_BUFFER_MAX)
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <uart_write+0x110>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	4413      	add	r3, r2
 80025f2:	2bfe      	cmp	r3, #254	; 0xfe
 80025f4:	dc08      	bgt.n	8002608 <uart_write+0x100>
				g_uart_tx_tail += string_size;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <uart_write+0x110>)
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	b29a      	uxth	r2, r3
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <uart_write+0x110>)
 8002604:	801a      	strh	r2, [r3, #0]
}
 8002606:	e002      	b.n	800260e <uart_write+0x106>
				g_uart_tx_tail = 0;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <uart_write+0x110>)
 800260a:	2200      	movs	r2, #0
 800260c:	801a      	strh	r2, [r3, #0]
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20025c3a 	.word	0x20025c3a
 800261c:	20025c38 	.word	0x20025c38
 8002620:	20025b38 	.word	0x20025b38

08002624 <HAL_UART_TxCpltCallback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	g_uart_tx_nose += strlen(g_uart_tx_buffer + g_uart_tx_nose) + 1;
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <HAL_UART_TxCpltCallback+0x44>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_UART_TxCpltCallback+0x48>)
 8002634:	4413      	add	r3, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd fe42 	bl	80002c0 <strlen>
 800263c:	4603      	mov	r3, r0
 800263e:	b29a      	uxth	r2, r3
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_UART_TxCpltCallback+0x44>)
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	4413      	add	r3, r2
 8002646:	b29b      	uxth	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_UART_TxCpltCallback+0x44>)
 800264e:	801a      	strh	r2, [r3, #0]

	if(g_uart_tx_nose >= UART_TX_BUFFER_MAX)
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_UART_TxCpltCallback+0x44>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	2bfe      	cmp	r3, #254	; 0xfe
 8002656:	d902      	bls.n	800265e <HAL_UART_TxCpltCallback+0x3a>
		g_uart_tx_nose = 0;
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <HAL_UART_TxCpltCallback+0x44>)
 800265a:	2200      	movs	r2, #0
 800265c:	801a      	strh	r2, [r3, #0]

}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20025c38 	.word	0x20025c38
 800266c:	20025b38 	.word	0x20025b38

08002670 <uart_rx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_process()
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
	uint8_t string_size = strlen(g_uart_rx_buffer + g_uart_rx_nose + 1) + 1;
 8002676:	4b4b      	ldr	r3, [pc, #300]	; (80027a4 <uart_rx_process+0x134>)
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	4a4a      	ldr	r2, [pc, #296]	; (80027a8 <uart_rx_process+0x138>)
 800267e:	4413      	add	r3, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd fe1d 	bl	80002c0 <strlen>
 8002686:	4603      	mov	r3, r0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	3301      	adds	r3, #1
 800268c:	71fb      	strb	r3, [r7, #7]

	switch(g_uart_rx_state)
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <uart_rx_process+0x13c>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <uart_rx_process+0x2c>
 8002696:	2b01      	cmp	r3, #1
 8002698:	d008      	beq.n	80026ac <uart_rx_process+0x3c>
			g_uart_rx_state = UART_RX_IDLE;
		break;


	}
}
 800269a:	e07e      	b.n	800279a <uart_rx_process+0x12a>
		if(g_uart_rx_cnt)
 800269c:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <uart_rx_process+0x140>)
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d077      	beq.n	8002794 <uart_rx_process+0x124>
			g_uart_rx_state = UART_RX_RECEIVE;
 80026a4:	4b41      	ldr	r3, [pc, #260]	; (80027ac <uart_rx_process+0x13c>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
		break;
 80026aa:	e073      	b.n	8002794 <uart_rx_process+0x124>
		if(g_uart_rx_nose < g_uart_rx_tail &&
 80026ac:	4b3d      	ldr	r3, [pc, #244]	; (80027a4 <uart_rx_process+0x134>)
 80026ae:	881a      	ldrh	r2, [r3, #0]
 80026b0:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <uart_rx_process+0x144>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d21c      	bcs.n	80026f2 <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 80026b8:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <uart_rx_process+0x134>)
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	4413      	add	r3, r2
 80026c2:	3b02      	subs	r3, #2
 80026c4:	4a38      	ldr	r2, [pc, #224]	; (80027a8 <uart_rx_process+0x138>)
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
		if(g_uart_rx_nose < g_uart_rx_tail &&
 80026c8:	2b0d      	cmp	r3, #13
 80026ca:	d112      	bne.n	80026f2 <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 1] == '\n'))
 80026cc:	4b35      	ldr	r3, [pc, #212]	; (80027a4 <uart_rx_process+0x134>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	4413      	add	r3, r2
 80026d6:	3b01      	subs	r3, #1
 80026d8:	4a33      	ldr	r2, [pc, #204]	; (80027a8 <uart_rx_process+0x138>)
 80026da:	5cd3      	ldrb	r3, [r2, r3]
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 80026dc:	2b0a      	cmp	r3, #10
 80026de:	d108      	bne.n	80026f2 <uart_rx_process+0x82>
			serial_protocol(g_uart_rx_buffer + g_uart_rx_nose + 1);
 80026e0:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <uart_rx_process+0x134>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	4a30      	ldr	r2, [pc, #192]	; (80027a8 <uart_rx_process+0x138>)
 80026e8:	4413      	add	r3, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f92c 	bl	8002948 <serial_protocol>
 80026f0:	e02e      	b.n	8002750 <uart_rx_process+0xe0>
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 80026f2:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <uart_rx_process+0x134>)
 80026f4:	881a      	ldrh	r2, [r3, #0]
 80026f6:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <uart_rx_process+0x144>)
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d928      	bls.n	8002750 <uart_rx_process+0xe0>
							(g_uart_rx_buffer[strlen(g_uart_rx_buffer) - 1] == '\n'))
 80026fe:	482a      	ldr	r0, [pc, #168]	; (80027a8 <uart_rx_process+0x138>)
 8002700:	f7fd fdde 	bl	80002c0 <strlen>
 8002704:	4603      	mov	r3, r0
 8002706:	3b01      	subs	r3, #1
 8002708:	4a27      	ldr	r2, [pc, #156]	; (80027a8 <uart_rx_process+0x138>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 800270c:	2b0a      	cmp	r3, #10
 800270e:	d11f      	bne.n	8002750 <uart_rx_process+0xe0>
			strncpy(g_uart_rx_tmp_buf, g_uart_rx_buffer + g_uart_rx_nose + 1, string_size);
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <uart_rx_process+0x134>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	3301      	adds	r3, #1
 8002716:	4a24      	ldr	r2, [pc, #144]	; (80027a8 <uart_rx_process+0x138>)
 8002718:	4413      	add	r3, r2
 800271a:	79fa      	ldrb	r2, [r7, #7]
 800271c:	4619      	mov	r1, r3
 800271e:	4826      	ldr	r0, [pc, #152]	; (80027b8 <uart_rx_process+0x148>)
 8002720:	f006 fd78 	bl	8009214 <strncpy>
			string_size = strlen(g_uart_rx_buffer + 1) + 1;
 8002724:	4b25      	ldr	r3, [pc, #148]	; (80027bc <uart_rx_process+0x14c>)
 8002726:	4618      	mov	r0, r3
 8002728:	f7fd fdca 	bl	80002c0 <strlen>
 800272c:	4603      	mov	r3, r0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	3301      	adds	r3, #1
 8002732:	71fb      	strb	r3, [r7, #7]
			strncpy(g_uart_rx_tmp_buf + strlen(g_uart_rx_tmp_buf), g_uart_rx_buffer , string_size);
 8002734:	4820      	ldr	r0, [pc, #128]	; (80027b8 <uart_rx_process+0x148>)
 8002736:	f7fd fdc3 	bl	80002c0 <strlen>
 800273a:	4603      	mov	r3, r0
 800273c:	4a1e      	ldr	r2, [pc, #120]	; (80027b8 <uart_rx_process+0x148>)
 800273e:	4413      	add	r3, r2
 8002740:	79fa      	ldrb	r2, [r7, #7]
 8002742:	4919      	ldr	r1, [pc, #100]	; (80027a8 <uart_rx_process+0x138>)
 8002744:	4618      	mov	r0, r3
 8002746:	f006 fd65 	bl	8009214 <strncpy>
			serial_protocol(g_uart_rx_tmp_buf);
 800274a:	481b      	ldr	r0, [pc, #108]	; (80027b8 <uart_rx_process+0x148>)
 800274c:	f000 f8fc 	bl	8002948 <serial_protocol>
		g_uart_rx_cnt--;
 8002750:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <uart_rx_process+0x140>)
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <uart_rx_process+0x140>)
 800275a:	801a      	strh	r2, [r3, #0]
		if(g_uart_rx_nose + string_size < UART_RX_BUFFER_MAX)
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <uart_rx_process+0x134>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	4413      	add	r3, r2
 8002766:	2bfe      	cmp	r3, #254	; 0xfe
 8002768:	dc08      	bgt.n	800277c <uart_rx_process+0x10c>
			g_uart_rx_nose += string_size;
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	b29a      	uxth	r2, r3
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <uart_rx_process+0x134>)
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	4413      	add	r3, r2
 8002774:	b29a      	uxth	r2, r3
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <uart_rx_process+0x134>)
 8002778:	801a      	strh	r2, [r3, #0]
 800277a:	e003      	b.n	8002784 <uart_rx_process+0x114>
			g_uart_rx_nose = string_size;
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	b29a      	uxth	r2, r3
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <uart_rx_process+0x134>)
 8002782:	801a      	strh	r2, [r3, #0]
		if(!g_uart_rx_cnt)
 8002784:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <uart_rx_process+0x140>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d105      	bne.n	8002798 <uart_rx_process+0x128>
			g_uart_rx_state = UART_RX_IDLE;
 800278c:	4b07      	ldr	r3, [pc, #28]	; (80027ac <uart_rx_process+0x13c>)
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
		break;
 8002792:	e001      	b.n	8002798 <uart_rx_process+0x128>
		break;
 8002794:	bf00      	nop
 8002796:	e000      	b.n	800279a <uart_rx_process+0x12a>
		break;
 8002798:	bf00      	nop
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20025c3c 	.word	0x20025c3c
 80027a8:	20025e14 	.word	0x20025e14
 80027ac:	20025b35 	.word	0x20025b35
 80027b0:	20025c40 	.word	0x20025c40
 80027b4:	20025c3e 	.word	0x20025c3e
 80027b8:	20025de0 	.word	0x20025de0
 80027bc:	20025e15 	.word	0x20025e15

080027c0 <uart_rx_callback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_callback()
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
	g_uart_rx_tail++;
 80027c4:	4b5b      	ldr	r3, [pc, #364]	; (8002934 <uart_rx_callback+0x174>)
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	3301      	adds	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	4b59      	ldr	r3, [pc, #356]	; (8002934 <uart_rx_callback+0x174>)
 80027ce:	801a      	strh	r2, [r3, #0]

	if((g_uart_rx_tail < (UART_RX_BUFFER_MAX - 1)) && ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2/*1*/)))
 80027d0:	4b58      	ldr	r3, [pc, #352]	; (8002934 <uart_rx_callback+0x174>)
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	2bfd      	cmp	r3, #253	; 0xfd
 80027d6:	d847      	bhi.n	8002868 <uart_rx_callback+0xa8>
 80027d8:	4b57      	ldr	r3, [pc, #348]	; (8002938 <uart_rx_callback+0x178>)
 80027da:	881a      	ldrh	r2, [r3, #0]
 80027dc:	4b55      	ldr	r3, [pc, #340]	; (8002934 <uart_rx_callback+0x174>)
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d307      	bcc.n	80027f4 <uart_rx_callback+0x34>
 80027e4:	4b54      	ldr	r3, [pc, #336]	; (8002938 <uart_rx_callback+0x178>)
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b52      	ldr	r3, [pc, #328]	; (8002934 <uart_rx_callback+0x174>)
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	dd39      	ble.n	8002868 <uart_rx_callback+0xa8>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);//253
 80027f4:	4b51      	ldr	r3, [pc, #324]	; (800293c <uart_rx_callback+0x17c>)
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	4b4e      	ldr	r3, [pc, #312]	; (8002934 <uart_rx_callback+0x174>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	b2c9      	uxtb	r1, r1
 8002800:	4b4f      	ldr	r3, [pc, #316]	; (8002940 <uart_rx_callback+0x180>)
 8002802:	5499      	strb	r1, [r3, r2]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8002804:	4b4b      	ldr	r3, [pc, #300]	; (8002934 <uart_rx_callback+0x174>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4b4d      	ldr	r3, [pc, #308]	; (8002940 <uart_rx_callback+0x180>)
 800280c:	5c9b      	ldrb	r3, [r3, r2]
 800280e:	2b0d      	cmp	r3, #13
 8002810:	f040 8087 	bne.w	8002922 <uart_rx_callback+0x162>
		{
			g_uart_rx_buffer[++g_uart_rx_tail] = '\n';//254
 8002814:	4b47      	ldr	r3, [pc, #284]	; (8002934 <uart_rx_callback+0x174>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	3301      	adds	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	4b45      	ldr	r3, [pc, #276]	; (8002934 <uart_rx_callback+0x174>)
 800281e:	801a      	strh	r2, [r3, #0]
 8002820:	4b44      	ldr	r3, [pc, #272]	; (8002934 <uart_rx_callback+0x174>)
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b46      	ldr	r3, [pc, #280]	; (8002940 <uart_rx_callback+0x180>)
 8002828:	210a      	movs	r1, #10
 800282a:	5499      	strb	r1, [r3, r2]
			g_uart_rx_cnt++;
 800282c:	4b45      	ldr	r3, [pc, #276]	; (8002944 <uart_rx_callback+0x184>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	4b43      	ldr	r3, [pc, #268]	; (8002944 <uart_rx_callback+0x184>)
 8002836:	801a      	strh	r2, [r3, #0]
			g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 8002838:	4b3e      	ldr	r3, [pc, #248]	; (8002934 <uart_rx_callback+0x174>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	4b3c      	ldr	r3, [pc, #240]	; (8002934 <uart_rx_callback+0x174>)
 8002842:	801a      	strh	r2, [r3, #0]
 8002844:	4b3b      	ldr	r3, [pc, #236]	; (8002934 <uart_rx_callback+0x174>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <uart_rx_callback+0x180>)
 800284c:	2100      	movs	r1, #0
 800284e:	5499      	strb	r1, [r3, r2]
			if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 0))
 8002850:	4b38      	ldr	r3, [pc, #224]	; (8002934 <uart_rx_callback+0x174>)
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	2bff      	cmp	r3, #255	; 0xff
 8002856:	d164      	bne.n	8002922 <uart_rx_callback+0x162>
 8002858:	4b37      	ldr	r3, [pc, #220]	; (8002938 <uart_rx_callback+0x178>)
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d060      	beq.n	8002922 <uart_rx_callback+0x162>
			{
				g_uart_rx_tail = 0;
 8002860:	4b34      	ldr	r3, [pc, #208]	; (8002934 <uart_rx_callback+0x174>)
 8002862:	2200      	movs	r2, #0
 8002864:	801a      	strh	r2, [r3, #0]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8002866:	e05c      	b.n	8002922 <uart_rx_callback+0x162>
			}
		}
	}
	else if((g_uart_rx_tail == (UART_RX_BUFFER_MAX - 1)) && (g_uart_rx_nose > 1)/*(g_uart_rx_nose < g_uart_rx_tail)*/)
 8002868:	4b32      	ldr	r3, [pc, #200]	; (8002934 <uart_rx_callback+0x174>)
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	2bfe      	cmp	r3, #254	; 0xfe
 800286e:	d13e      	bne.n	80028ee <uart_rx_callback+0x12e>
 8002870:	4b31      	ldr	r3, [pc, #196]	; (8002938 <uart_rx_callback+0x178>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d93a      	bls.n	80028ee <uart_rx_callback+0x12e>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);//254
 8002878:	4b30      	ldr	r3, [pc, #192]	; (800293c <uart_rx_callback+0x17c>)
 800287a:	6859      	ldr	r1, [r3, #4]
 800287c:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <uart_rx_callback+0x174>)
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	b2c9      	uxtb	r1, r1
 8002884:	4b2e      	ldr	r3, [pc, #184]	; (8002940 <uart_rx_callback+0x180>)
 8002886:	5499      	strb	r1, [r3, r2]
		g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 8002888:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <uart_rx_callback+0x174>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	4b28      	ldr	r3, [pc, #160]	; (8002934 <uart_rx_callback+0x174>)
 8002892:	801a      	strh	r2, [r3, #0]
 8002894:	4b27      	ldr	r3, [pc, #156]	; (8002934 <uart_rx_callback+0x174>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <uart_rx_callback+0x180>)
 800289c:	2100      	movs	r1, #0
 800289e:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 80028a0:	4b24      	ldr	r3, [pc, #144]	; (8002934 <uart_rx_callback+0x174>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	4a26      	ldr	r2, [pc, #152]	; (8002940 <uart_rx_callback+0x180>)
 80028a8:	5cd3      	ldrb	r3, [r2, r3]
 80028aa:	2b0d      	cmp	r3, #13
 80028ac:	d13b      	bne.n	8002926 <uart_rx_callback+0x166>
		{
			g_uart_rx_cnt++;
 80028ae:	4b25      	ldr	r3, [pc, #148]	; (8002944 <uart_rx_callback+0x184>)
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	4b23      	ldr	r3, [pc, #140]	; (8002944 <uart_rx_callback+0x184>)
 80028b8:	801a      	strh	r2, [r3, #0]
			if(g_uart_rx_nose > 1)
 80028ba:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <uart_rx_callback+0x178>)
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d931      	bls.n	8002926 <uart_rx_callback+0x166>
			{
				g_uart_rx_tail = 0;
 80028c2:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <uart_rx_callback+0x174>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	801a      	strh	r2, [r3, #0]
				g_uart_rx_buffer[g_uart_rx_tail] = '\n';//0
 80028c8:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <uart_rx_callback+0x174>)
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <uart_rx_callback+0x180>)
 80028d0:	210a      	movs	r1, #10
 80028d2:	5499      	strb	r1, [r3, r2]
				g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//1
 80028d4:	4b17      	ldr	r3, [pc, #92]	; (8002934 <uart_rx_callback+0x174>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	4b15      	ldr	r3, [pc, #84]	; (8002934 <uart_rx_callback+0x174>)
 80028de:	801a      	strh	r2, [r3, #0]
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <uart_rx_callback+0x174>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b16      	ldr	r3, [pc, #88]	; (8002940 <uart_rx_callback+0x180>)
 80028e8:	2100      	movs	r1, #0
 80028ea:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 80028ec:	e01b      	b.n	8002926 <uart_rx_callback+0x166>
			{
				//error - full
			}
		}
	}
	else if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 1))
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <uart_rx_callback+0x174>)
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	2bff      	cmp	r3, #255	; 0xff
 80028f4:	d118      	bne.n	8002928 <uart_rx_callback+0x168>
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <uart_rx_callback+0x178>)
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d914      	bls.n	8002928 <uart_rx_callback+0x168>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = '\0';
 80028fe:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <uart_rx_callback+0x174>)
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <uart_rx_callback+0x180>)
 8002906:	2100      	movs	r1, #0
 8002908:	5499      	strb	r1, [r3, r2]
		g_uart_rx_tail = 1;
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <uart_rx_callback+0x174>)
 800290c:	2201      	movs	r2, #1
 800290e:	801a      	strh	r2, [r3, #0]
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <uart_rx_callback+0x17c>)
 8002912:	6859      	ldr	r1, [r3, #4]
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <uart_rx_callback+0x174>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	b2c9      	uxtb	r1, r1
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <uart_rx_callback+0x180>)
 800291e:	5499      	strb	r1, [r3, r2]

	}

}
 8002920:	e002      	b.n	8002928 <uart_rx_callback+0x168>
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8002922:	bf00      	nop
 8002924:	e000      	b.n	8002928 <uart_rx_callback+0x168>
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 8002926:	bf00      	nop
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20025c3e 	.word	0x20025c3e
 8002938:	20025c3c 	.word	0x20025c3c
 800293c:	40011400 	.word	0x40011400
 8002940:	20025e14 	.word	0x20025e14
 8002944:	20025c40 	.word	0x20025c40

08002948 <serial_protocol>:


#include <stdlib.h>
//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void serial_protocol(uint8_t* buff)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af02      	add	r7, sp, #8
 800294e:	6078      	str	r0, [r7, #4]
	char *token;
	char temp_buff[5] = {0};
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	2300      	movs	r3, #0
 8002956:	733b      	strb	r3, [r7, #12]
	unsigned short address, value = 0xFF;
 8002958:	23ff      	movs	r3, #255	; 0xff
 800295a:	82fb      	strh	r3, [r7, #22]

	if (strncmp(buff, "OVW", 3) == 0)
 800295c:	2203      	movs	r2, #3
 800295e:	4964      	ldr	r1, [pc, #400]	; (8002af0 <serial_protocol+0x1a8>)
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f006 fc45 	bl	80091f0 <strncmp>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d169      	bne.n	8002a40 <serial_protocol+0xf8>
	{
		token = strtok(buff, ",");
 800296c:	4961      	ldr	r1, [pc, #388]	; (8002af4 <serial_protocol+0x1ac>)
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f006 fc64 	bl	800923c <strtok>
 8002974:	6138      	str	r0, [r7, #16]

		token = strtok(NULL, ",");
 8002976:	495f      	ldr	r1, [pc, #380]	; (8002af4 <serial_protocol+0x1ac>)
 8002978:	2000      	movs	r0, #0
 800297a:	f006 fc5f 	bl	800923c <strtok>
 800297e:	6138      	str	r0, [r7, #16]
		strncpy(temp_buff, token, 2);
 8002980:	f107 0308 	add.w	r3, r7, #8
 8002984:	2202      	movs	r2, #2
 8002986:	6939      	ldr	r1, [r7, #16]
 8002988:	4618      	mov	r0, r3
 800298a:	f006 fc43 	bl	8009214 <strncpy>
		address = strtoll(temp_buff, NULL, 16);
 800298e:	f107 0308 	add.w	r3, r7, #8
 8002992:	2210      	movs	r2, #16
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f006 fd42 	bl	8009420 <strtoll>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4613      	mov	r3, r2
 80029a2:	81fb      	strh	r3, [r7, #14]

		token = strtok(NULL, ",");
 80029a4:	4953      	ldr	r1, [pc, #332]	; (8002af4 <serial_protocol+0x1ac>)
 80029a6:	2000      	movs	r0, #0
 80029a8:	f006 fc48 	bl	800923c <strtok>
 80029ac:	6138      	str	r0, [r7, #16]
		strncpy(temp_buff, token, 2);
 80029ae:	f107 0308 	add.w	r3, r7, #8
 80029b2:	2202      	movs	r2, #2
 80029b4:	6939      	ldr	r1, [r7, #16]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f006 fc2c 	bl	8009214 <strncpy>
		value = strtoll(temp_buff, NULL, 16);
 80029bc:	f107 0308 	add.w	r3, r7, #8
 80029c0:	2210      	movs	r2, #16
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f006 fd2b 	bl	8009420 <strtoll>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4613      	mov	r3, r2
 80029d0:	82fb      	strh	r3, [r7, #22]

		ov7670_write_register(address, value);
 80029d2:	89fb      	ldrh	r3, [r7, #14]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	8afa      	ldrh	r2, [r7, #22]
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe ff9f 	bl	8001920 <ov7670_write_register>
		sprintf(temp_buff, "%02X\0", address);
 80029e2:	89fa      	ldrh	r2, [r7, #14]
 80029e4:	f107 0308 	add.w	r3, r7, #8
 80029e8:	4943      	ldr	r1, [pc, #268]	; (8002af8 <serial_protocol+0x1b0>)
 80029ea:	4618      	mov	r0, r3
 80029ec:	f006 fbd8 	bl	80091a0 <siprintf>
		LCD_PrintStr(20, 400, 0, 0x841FU, temp_buff, 5);
 80029f0:	2305      	movs	r3, #5
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	f107 0308 	add.w	r3, r7, #8
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	f248 431f 	movw	r3, #33823	; 0x841f
 80029fe:	2200      	movs	r2, #0
 8002a00:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002a04:	2014      	movs	r0, #20
 8002a06:	f7fe f9e7 	bl	8000dd8 <LCD_PrintStr>
		sprintf(temp_buff, "%02X\0", ov7670_read_register(address));
 8002a0a:	89fb      	ldrh	r3, [r7, #14]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe ff98 	bl	8001944 <ov7670_read_register>
 8002a14:	4603      	mov	r3, r0
 8002a16:	461a      	mov	r2, r3
 8002a18:	f107 0308 	add.w	r3, r7, #8
 8002a1c:	4936      	ldr	r1, [pc, #216]	; (8002af8 <serial_protocol+0x1b0>)
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f006 fbbe 	bl	80091a0 <siprintf>
		LCD_PrintStr(20, 440, 0, 0x841FU, temp_buff, 5);
 8002a24:	2305      	movs	r3, #5
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	f107 0308 	add.w	r3, r7, #8
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	f248 431f 	movw	r3, #33823	; 0x841f
 8002a32:	2200      	movs	r2, #0
 8002a34:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8002a38:	2014      	movs	r0, #20
 8002a3a:	f7fe f9cd 	bl	8000dd8 <LCD_PrintStr>
		LCD_PrintStr(20, 400, 0, 0x841FU, temp_buff, 5);
		sprintf(temp_buff, "%02X\0", value);
		LCD_PrintStr(20, 440, 0, 0x841FU, temp_buff, 5);
	}
		//LCD_PrintStr(20, 400, 0, 0x841FU, buff, 5);
}
 8002a3e:	e052      	b.n	8002ae6 <serial_protocol+0x19e>
	else if (strncmp(buff, "OVR", 3) == 0)
 8002a40:	2203      	movs	r2, #3
 8002a42:	492e      	ldr	r1, [pc, #184]	; (8002afc <serial_protocol+0x1b4>)
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f006 fbd3 	bl	80091f0 <strncmp>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d14a      	bne.n	8002ae6 <serial_protocol+0x19e>
		token = strtok(buff, ",");
 8002a50:	4928      	ldr	r1, [pc, #160]	; (8002af4 <serial_protocol+0x1ac>)
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f006 fbf2 	bl	800923c <strtok>
 8002a58:	6138      	str	r0, [r7, #16]
		token = strtok(NULL, ",");
 8002a5a:	4926      	ldr	r1, [pc, #152]	; (8002af4 <serial_protocol+0x1ac>)
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f006 fbed 	bl	800923c <strtok>
 8002a62:	6138      	str	r0, [r7, #16]
		strncpy(temp_buff, token, 2);
 8002a64:	f107 0308 	add.w	r3, r7, #8
 8002a68:	2202      	movs	r2, #2
 8002a6a:	6939      	ldr	r1, [r7, #16]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f006 fbd1 	bl	8009214 <strncpy>
		address = strtoll(temp_buff, NULL, 16);
 8002a72:	f107 0308 	add.w	r3, r7, #8
 8002a76:	2210      	movs	r2, #16
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f006 fcd0 	bl	8009420 <strtoll>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4613      	mov	r3, r2
 8002a86:	81fb      	strh	r3, [r7, #14]
		value = ov7670_read_register(address);
 8002a88:	89fb      	ldrh	r3, [r7, #14]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe ff59 	bl	8001944 <ov7670_read_register>
 8002a92:	4603      	mov	r3, r0
 8002a94:	82fb      	strh	r3, [r7, #22]
		sprintf(temp_buff, "%02X\0", address);
 8002a96:	89fa      	ldrh	r2, [r7, #14]
 8002a98:	f107 0308 	add.w	r3, r7, #8
 8002a9c:	4916      	ldr	r1, [pc, #88]	; (8002af8 <serial_protocol+0x1b0>)
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f006 fb7e 	bl	80091a0 <siprintf>
		LCD_PrintStr(20, 400, 0, 0x841FU, temp_buff, 5);
 8002aa4:	2305      	movs	r3, #5
 8002aa6:	9301      	str	r3, [sp, #4]
 8002aa8:	f107 0308 	add.w	r3, r7, #8
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	f248 431f 	movw	r3, #33823	; 0x841f
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002ab8:	2014      	movs	r0, #20
 8002aba:	f7fe f98d 	bl	8000dd8 <LCD_PrintStr>
		sprintf(temp_buff, "%02X\0", value);
 8002abe:	8afa      	ldrh	r2, [r7, #22]
 8002ac0:	f107 0308 	add.w	r3, r7, #8
 8002ac4:	490c      	ldr	r1, [pc, #48]	; (8002af8 <serial_protocol+0x1b0>)
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f006 fb6a 	bl	80091a0 <siprintf>
		LCD_PrintStr(20, 440, 0, 0x841FU, temp_buff, 5);
 8002acc:	2305      	movs	r3, #5
 8002ace:	9301      	str	r3, [sp, #4]
 8002ad0:	f107 0308 	add.w	r3, r7, #8
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	f248 431f 	movw	r3, #33823	; 0x841f
 8002ada:	2200      	movs	r2, #0
 8002adc:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8002ae0:	2014      	movs	r0, #20
 8002ae2:	f7fe f979 	bl	8000dd8 <LCD_PrintStr>
}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	08009ea0 	.word	0x08009ea0
 8002af4:	08009ea4 	.word	0x08009ea4
 8002af8:	08009ea8 	.word	0x08009ea8
 8002afc:	08009eb0 	.word	0x08009eb0

08002b00 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <MX_USART6_UART_Init+0x4c>)
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <MX_USART6_UART_Init+0x50>)
 8002b08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <MX_USART6_UART_Init+0x4c>)
 8002b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b10:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <MX_USART6_UART_Init+0x4c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <MX_USART6_UART_Init+0x4c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <MX_USART6_UART_Init+0x4c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <MX_USART6_UART_Init+0x4c>)
 8002b26:	220c      	movs	r2, #12
 8002b28:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <MX_USART6_UART_Init+0x4c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <MX_USART6_UART_Init+0x4c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002b36:	4805      	ldr	r0, [pc, #20]	; (8002b4c <MX_USART6_UART_Init+0x4c>)
 8002b38:	f005 f832 	bl	8007ba0 <HAL_UART_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002b42:	f7fe fe2d 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20025f14 	.word	0x20025f14
 8002b50:	40011400 	.word	0x40011400

08002b54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08a      	sub	sp, #40	; 0x28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a1e      	ldr	r2, [pc, #120]	; (8002bec <HAL_UART_MspInit+0x98>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d136      	bne.n	8002be4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_UART_MspInit+0x9c>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <HAL_UART_MspInit+0x9c>)
 8002b80:	f043 0320 	orr.w	r3, r3, #32
 8002b84:	6453      	str	r3, [r2, #68]	; 0x44
 8002b86:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <HAL_UART_MspInit+0x9c>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <HAL_UART_MspInit+0x9c>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <HAL_UART_MspInit+0x9c>)
 8002b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba2:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <HAL_UART_MspInit+0x9c>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8002bae:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002bc0:	2308      	movs	r3, #8
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	4619      	mov	r1, r3
 8002bca:	480a      	ldr	r0, [pc, #40]	; (8002bf4 <HAL_UART_MspInit+0xa0>)
 8002bcc:	f001 f840 	bl	8003c50 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	2047      	movs	r0, #71	; 0x47
 8002bd6:	f000 fd8c 	bl	80036f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002bda:	2047      	movs	r0, #71	; 0x47
 8002bdc:	f000 fda5 	bl	800372a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */
    uart_init();
 8002be0:	f7ff fc08 	bl	80023f4 <uart_init>
  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002be4:	bf00      	nop
 8002be6:	3728      	adds	r7, #40	; 0x28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40011400 	.word	0x40011400
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40021800 	.word	0x40021800

08002bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bfc:	480d      	ldr	r0, [pc, #52]	; (8002c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bfe:	490e      	ldr	r1, [pc, #56]	; (8002c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c00:	4a0e      	ldr	r2, [pc, #56]	; (8002c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c04:	e002      	b.n	8002c0c <LoopCopyDataInit>

08002c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0a:	3304      	adds	r3, #4

08002c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c10:	d3f9      	bcc.n	8002c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c12:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c14:	4c0b      	ldr	r4, [pc, #44]	; (8002c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c18:	e001      	b.n	8002c1e <LoopFillZerobss>

08002c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c1c:	3204      	adds	r2, #4

08002c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c20:	d3fb      	bcc.n	8002c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c22:	f7ff f931 	bl	8001e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c26:	f005 fe73 	bl	8008910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c2a:	f7fe fd01 	bl	8001630 <main>
  bx  lr    
 8002c2e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002c30:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c38:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002c3c:	0801bab0 	.word	0x0801bab0
  ldr r2, =_sbss
 8002c40:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002c44:	20025f6c 	.word	0x20025f6c

08002c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c48:	e7fe      	b.n	8002c48 <ADC_IRQHandler>
	...

08002c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c50:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <HAL_Init+0x40>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <HAL_Init+0x40>)
 8002c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <HAL_Init+0x40>)
 8002c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a07      	ldr	r2, [pc, #28]	; (8002c8c <HAL_Init+0x40>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c74:	2003      	movs	r0, #3
 8002c76:	f000 fd31 	bl	80036dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f000 f808 	bl	8002c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c80:	f7fe ff96 	bl	8001bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023c00 	.word	0x40023c00

08002c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c98:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <HAL_InitTick+0x54>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_InitTick+0x58>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fd57 	bl	8003762 <HAL_SYSTICK_Config>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00e      	b.n	8002cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b0f      	cmp	r3, #15
 8002cc2:	d80a      	bhi.n	8002cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ccc:	f000 fd11 	bl	80036f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cd0:	4a06      	ldr	r2, [pc, #24]	; (8002cec <HAL_InitTick+0x5c>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000004 	.word	0x20000004
 8002ce8:	2000000c 	.word	0x2000000c
 8002cec:	20000008 	.word	0x20000008

08002cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_IncTick+0x20>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_IncTick+0x24>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <HAL_IncTick+0x24>)
 8002d02:	6013      	str	r3, [r2, #0]
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	2000000c 	.word	0x2000000c
 8002d14:	20025f58 	.word	0x20025f58

08002d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_GetTick+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20025f58 	.word	0x20025f58

08002d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d38:	f7ff ffee 	bl	8002d18 <HAL_GetTick>
 8002d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d48:	d005      	beq.n	8002d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_Delay+0x44>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d56:	bf00      	nop
 8002d58:	f7ff ffde 	bl	8002d18 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d8f7      	bhi.n	8002d58 <HAL_Delay+0x28>
  {
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	2000000c 	.word	0x2000000c

08002d78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e033      	b.n	8002df6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fd fc58 	bl	800064c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d118      	bne.n	8002de8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dbe:	f023 0302 	bic.w	r3, r3, #2
 8002dc2:	f043 0202 	orr.w	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fa96 	bl	80032fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
 8002de6:	e001      	b.n	8002dec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_ADC_Start+0x1a>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e097      	b.n	8002f4a <HAL_ADC_Start+0x14a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d018      	beq.n	8002e62 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e40:	4b45      	ldr	r3, [pc, #276]	; (8002f58 <HAL_ADC_Start+0x158>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a45      	ldr	r2, [pc, #276]	; (8002f5c <HAL_ADC_Start+0x15c>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0c9a      	lsrs	r2, r3, #18
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e54:	e002      	b.n	8002e5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f9      	bne.n	8002e56 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d15f      	bne.n	8002f30 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eae:	d106      	bne.n	8002ebe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	f023 0206 	bic.w	r2, r3, #6
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	645a      	str	r2, [r3, #68]	; 0x44
 8002ebc:	e002      	b.n	8002ec4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ecc:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_ADC_Start+0x160>)
 8002ece:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ed8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10f      	bne.n	8002f06 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d129      	bne.n	8002f48 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	e020      	b.n	8002f48 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a16      	ldr	r2, [pc, #88]	; (8002f64 <HAL_ADC_Start+0x164>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d11b      	bne.n	8002f48 <HAL_ADC_Start+0x148>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d114      	bne.n	8002f48 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	e00b      	b.n	8002f48 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f043 0210 	orr.w	r2, r3, #16
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	f043 0201 	orr.w	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20000004 	.word	0x20000004
 8002f5c:	431bde83 	.word	0x431bde83
 8002f60:	40012300 	.word	0x40012300
 8002f64:	40012000 	.word	0x40012000

08002f68 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f84:	d113      	bne.n	8002fae <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f94:	d10b      	bne.n	8002fae <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f043 0220 	orr.w	r2, r3, #32
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e063      	b.n	8003076 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002fae:	f7ff feb3 	bl	8002d18 <HAL_GetTick>
 8002fb2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fb4:	e021      	b.n	8002ffa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fbc:	d01d      	beq.n	8002ffa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <HAL_ADC_PollForConversion+0x6c>
 8002fc4:	f7ff fea8 	bl	8002d18 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d212      	bcs.n	8002ffa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d00b      	beq.n	8002ffa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f043 0204 	orr.w	r2, r3, #4
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e03d      	b.n	8003076 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b02      	cmp	r3, #2
 8003006:	d1d6      	bne.n	8002fb6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0212 	mvn.w	r2, #18
 8003010:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d123      	bne.n	8003074 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003030:	2b00      	cmp	r3, #0
 8003032:	d11f      	bne.n	8003074 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800303e:	2b00      	cmp	r3, #0
 8003040:	d006      	beq.n	8003050 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800304c:	2b00      	cmp	r3, #0
 800304e:	d111      	bne.n	8003074 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x1c>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e113      	b.n	80032dc <HAL_ADC_ConfigChannel+0x244>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b09      	cmp	r3, #9
 80030c2:	d925      	bls.n	8003110 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68d9      	ldr	r1, [r3, #12]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	3b1e      	subs	r3, #30
 80030da:	2207      	movs	r2, #7
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43da      	mvns	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	400a      	ands	r2, r1
 80030e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68d9      	ldr	r1, [r3, #12]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	4603      	mov	r3, r0
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4403      	add	r3, r0
 8003102:	3b1e      	subs	r3, #30
 8003104:	409a      	lsls	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	e022      	b.n	8003156 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6919      	ldr	r1, [r3, #16]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	4613      	mov	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	2207      	movs	r2, #7
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43da      	mvns	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	400a      	ands	r2, r1
 8003132:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6919      	ldr	r1, [r3, #16]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	4618      	mov	r0, r3
 8003146:	4603      	mov	r3, r0
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4403      	add	r3, r0
 800314c:	409a      	lsls	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b06      	cmp	r3, #6
 800315c:	d824      	bhi.n	80031a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	3b05      	subs	r3, #5
 8003170:	221f      	movs	r2, #31
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43da      	mvns	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	400a      	ands	r2, r1
 800317e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	4618      	mov	r0, r3
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	3b05      	subs	r3, #5
 800319a:	fa00 f203 	lsl.w	r2, r0, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	635a      	str	r2, [r3, #52]	; 0x34
 80031a6:	e04c      	b.n	8003242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	d824      	bhi.n	80031fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	3b23      	subs	r3, #35	; 0x23
 80031c2:	221f      	movs	r2, #31
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43da      	mvns	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	400a      	ands	r2, r1
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	4618      	mov	r0, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	3b23      	subs	r3, #35	; 0x23
 80031ec:	fa00 f203 	lsl.w	r2, r0, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
 80031f8:	e023      	b.n	8003242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	3b41      	subs	r3, #65	; 0x41
 800320c:	221f      	movs	r2, #31
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43da      	mvns	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	400a      	ands	r2, r1
 800321a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	b29b      	uxth	r3, r3
 8003228:	4618      	mov	r0, r3
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	3b41      	subs	r3, #65	; 0x41
 8003236:	fa00 f203 	lsl.w	r2, r0, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003242:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <HAL_ADC_ConfigChannel+0x250>)
 8003244:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a28      	ldr	r2, [pc, #160]	; (80032ec <HAL_ADC_ConfigChannel+0x254>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d10f      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x1d8>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b12      	cmp	r3, #18
 8003256:	d10b      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <HAL_ADC_ConfigChannel+0x254>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d12b      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x23a>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_ADC_ConfigChannel+0x258>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d003      	beq.n	800328c <HAL_ADC_ConfigChannel+0x1f4>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b11      	cmp	r3, #17
 800328a:	d122      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a11      	ldr	r2, [pc, #68]	; (80032f0 <HAL_ADC_ConfigChannel+0x258>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d111      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032ae:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <HAL_ADC_ConfigChannel+0x25c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a11      	ldr	r2, [pc, #68]	; (80032f8 <HAL_ADC_ConfigChannel+0x260>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	0c9a      	lsrs	r2, r3, #18
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032c4:	e002      	b.n	80032cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f9      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40012300 	.word	0x40012300
 80032ec:	40012000 	.word	0x40012000
 80032f0:	10000012 	.word	0x10000012
 80032f4:	20000004 	.word	0x20000004
 80032f8:	431bde83 	.word	0x431bde83

080032fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003304:	4b79      	ldr	r3, [pc, #484]	; (80034ec <ADC_Init+0x1f0>)
 8003306:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	431a      	orrs	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6859      	ldr	r1, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	021a      	lsls	r2, r3, #8
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003354:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6859      	ldr	r1, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003376:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6899      	ldr	r1, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	4a58      	ldr	r2, [pc, #352]	; (80034f0 <ADC_Init+0x1f4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d022      	beq.n	80033da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6899      	ldr	r1, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6899      	ldr	r1, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	e00f      	b.n	80033fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0202 	bic.w	r2, r2, #2
 8003408:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6899      	ldr	r1, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	7e1b      	ldrb	r3, [r3, #24]
 8003414:	005a      	lsls	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01b      	beq.n	8003460 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003436:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003446:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6859      	ldr	r1, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	3b01      	subs	r3, #1
 8003454:	035a      	lsls	r2, r3, #13
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	e007      	b.n	8003470 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800346e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800347e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	3b01      	subs	r3, #1
 800348c:	051a      	lsls	r2, r3, #20
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6899      	ldr	r1, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034b2:	025a      	lsls	r2, r3, #9
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6899      	ldr	r1, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	029a      	lsls	r2, r3, #10
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	609a      	str	r2, [r3, #8]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	40012300 	.word	0x40012300
 80034f0:	0f000001 	.word	0x0f000001

080034f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <__NVIC_SetPriorityGrouping+0x44>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003510:	4013      	ands	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800351c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003526:	4a04      	ldr	r2, [pc, #16]	; (8003538 <__NVIC_SetPriorityGrouping+0x44>)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	60d3      	str	r3, [r2, #12]
}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <__NVIC_GetPriorityGrouping+0x18>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	f003 0307 	and.w	r3, r3, #7
}
 800354a:	4618      	mov	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	2b00      	cmp	r3, #0
 8003568:	db0b      	blt.n	8003582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	f003 021f 	and.w	r2, r3, #31
 8003570:	4907      	ldr	r1, [pc, #28]	; (8003590 <__NVIC_EnableIRQ+0x38>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2001      	movs	r0, #1
 800357a:	fa00 f202 	lsl.w	r2, r0, r2
 800357e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	e000e100 	.word	0xe000e100

08003594 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800359e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	db12      	blt.n	80035cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	f003 021f 	and.w	r2, r3, #31
 80035ac:	490a      	ldr	r1, [pc, #40]	; (80035d8 <__NVIC_DisableIRQ+0x44>)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2001      	movs	r0, #1
 80035b6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ba:	3320      	adds	r3, #32
 80035bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80035c0:	f3bf 8f4f 	dsb	sy
}
 80035c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80035c6:	f3bf 8f6f 	isb	sy
}
 80035ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000e100 	.word	0xe000e100

080035dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	6039      	str	r1, [r7, #0]
 80035e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	db0a      	blt.n	8003606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	490c      	ldr	r1, [pc, #48]	; (8003628 <__NVIC_SetPriority+0x4c>)
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	0112      	lsls	r2, r2, #4
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	440b      	add	r3, r1
 8003600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003604:	e00a      	b.n	800361c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4908      	ldr	r1, [pc, #32]	; (800362c <__NVIC_SetPriority+0x50>)
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	3b04      	subs	r3, #4
 8003614:	0112      	lsls	r2, r2, #4
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	440b      	add	r3, r1
 800361a:	761a      	strb	r2, [r3, #24]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	e000e100 	.word	0xe000e100
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003630:	b480      	push	{r7}
 8003632:	b089      	sub	sp, #36	; 0x24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f1c3 0307 	rsb	r3, r3, #7
 800364a:	2b04      	cmp	r3, #4
 800364c:	bf28      	it	cs
 800364e:	2304      	movcs	r3, #4
 8003650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3304      	adds	r3, #4
 8003656:	2b06      	cmp	r3, #6
 8003658:	d902      	bls.n	8003660 <NVIC_EncodePriority+0x30>
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3b03      	subs	r3, #3
 800365e:	e000      	b.n	8003662 <NVIC_EncodePriority+0x32>
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43da      	mvns	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	401a      	ands	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003678:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	43d9      	mvns	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003688:	4313      	orrs	r3, r2
         );
}
 800368a:	4618      	mov	r0, r3
 800368c:	3724      	adds	r7, #36	; 0x24
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036a8:	d301      	bcc.n	80036ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036aa:	2301      	movs	r3, #1
 80036ac:	e00f      	b.n	80036ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ae:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <SysTick_Config+0x40>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036b6:	210f      	movs	r1, #15
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036bc:	f7ff ff8e 	bl	80035dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <SysTick_Config+0x40>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036c6:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <SysTick_Config+0x40>)
 80036c8:	2207      	movs	r2, #7
 80036ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	e000e010 	.word	0xe000e010

080036dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff05 	bl	80034f4 <__NVIC_SetPriorityGrouping>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	4603      	mov	r3, r0
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003704:	f7ff ff1a 	bl	800353c <__NVIC_GetPriorityGrouping>
 8003708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	6978      	ldr	r0, [r7, #20]
 8003710:	f7ff ff8e 	bl	8003630 <NVIC_EncodePriority>
 8003714:	4602      	mov	r2, r0
 8003716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ff5d 	bl	80035dc <__NVIC_SetPriority>
}
 8003722:	bf00      	nop
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	4603      	mov	r3, r0
 8003732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ff0d 	bl	8003558 <__NVIC_EnableIRQ>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	4603      	mov	r3, r0
 800374e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff1d 	bl	8003594 <__NVIC_DisableIRQ>
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ff94 	bl	8003698 <SysTick_Config>
 8003770:	4603      	mov	r3, r0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003788:	f7ff fac6 	bl	8002d18 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e099      	b.n	80038cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037b8:	e00f      	b.n	80037da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ba:	f7ff faad 	bl	8002d18 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	d908      	bls.n	80037da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2203      	movs	r2, #3
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e078      	b.n	80038cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e8      	bne.n	80037ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4b38      	ldr	r3, [pc, #224]	; (80038d4 <HAL_DMA_Init+0x158>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003806:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800381e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	2b04      	cmp	r3, #4
 8003832:	d107      	bne.n	8003844 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	4313      	orrs	r3, r2
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f023 0307 	bic.w	r3, r3, #7
 800385a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	2b04      	cmp	r3, #4
 800386c:	d117      	bne.n	800389e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00e      	beq.n	800389e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f969 	bl	8003b58 <DMA_CheckFifoParam>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2240      	movs	r2, #64	; 0x40
 8003890:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800389a:	2301      	movs	r3, #1
 800389c:	e016      	b.n	80038cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f920 	bl	8003aec <DMA_CalcBaseAndBitshift>
 80038ac:	4603      	mov	r3, r0
 80038ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b4:	223f      	movs	r2, #63	; 0x3f
 80038b6:	409a      	lsls	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	e010803f 	.word	0xe010803f

080038d8 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_DMA_Start+0x20>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e026      	b.n	8003946 <HAL_DMA_Start+0x6e>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d115      	bne.n	8003938 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f8b4 	bl	8003a8e <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0201 	orr.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e005      	b.n	8003944 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003940:	2302      	movs	r3, #2
 8003942:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8003944:	7dfb      	ldrb	r3, [r7, #23]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800395c:	f7ff f9dc 	bl	8002d18 <HAL_GetTick>
 8003960:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d008      	beq.n	8003980 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2280      	movs	r2, #128	; 0x80
 8003972:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e052      	b.n	8003a26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0216 	bic.w	r2, r2, #22
 800398e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800399e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d103      	bne.n	80039b0 <HAL_DMA_Abort+0x62>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d007      	beq.n	80039c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0208 	bic.w	r2, r2, #8
 80039be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039d0:	e013      	b.n	80039fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039d2:	f7ff f9a1 	bl	8002d18 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b05      	cmp	r3, #5
 80039de:	d90c      	bls.n	80039fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2203      	movs	r2, #3
 80039f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e015      	b.n	8003a26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e4      	bne.n	80039d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	223f      	movs	r2, #63	; 0x3f
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d004      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2280      	movs	r2, #128	; 0x80
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e00c      	b.n	8003a66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2205      	movs	r2, #5
 8003a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a80:	b2db      	uxtb	r3, r3
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b085      	sub	sp, #20
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d108      	bne.n	8003ace <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003acc:	e007      	b.n	8003ade <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	60da      	str	r2, [r3, #12]
}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
	...

08003aec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	3b10      	subs	r3, #16
 8003afc:	4a14      	ldr	r2, [pc, #80]	; (8003b50 <DMA_CalcBaseAndBitshift+0x64>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b06:	4a13      	ldr	r2, [pc, #76]	; (8003b54 <DMA_CalcBaseAndBitshift+0x68>)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d909      	bls.n	8003b2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	1d1a      	adds	r2, r3, #4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	659a      	str	r2, [r3, #88]	; 0x58
 8003b2c:	e007      	b.n	8003b3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b36:	f023 0303 	bic.w	r3, r3, #3
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	aaaaaaab 	.word	0xaaaaaaab
 8003b54:	0801b84c 	.word	0x0801b84c

08003b58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d11f      	bne.n	8003bb2 <DMA_CheckFifoParam+0x5a>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d856      	bhi.n	8003c26 <DMA_CheckFifoParam+0xce>
 8003b78:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <DMA_CheckFifoParam+0x28>)
 8003b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7e:	bf00      	nop
 8003b80:	08003b91 	.word	0x08003b91
 8003b84:	08003ba3 	.word	0x08003ba3
 8003b88:	08003b91 	.word	0x08003b91
 8003b8c:	08003c27 	.word	0x08003c27
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d046      	beq.n	8003c2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba0:	e043      	b.n	8003c2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003baa:	d140      	bne.n	8003c2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb0:	e03d      	b.n	8003c2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bba:	d121      	bne.n	8003c00 <DMA_CheckFifoParam+0xa8>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d837      	bhi.n	8003c32 <DMA_CheckFifoParam+0xda>
 8003bc2:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <DMA_CheckFifoParam+0x70>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003bd9 	.word	0x08003bd9
 8003bcc:	08003bdf 	.word	0x08003bdf
 8003bd0:	08003bd9 	.word	0x08003bd9
 8003bd4:	08003bf1 	.word	0x08003bf1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
      break;
 8003bdc:	e030      	b.n	8003c40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d025      	beq.n	8003c36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bee:	e022      	b.n	8003c36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bf8:	d11f      	bne.n	8003c3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bfe:	e01c      	b.n	8003c3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d903      	bls.n	8003c0e <DMA_CheckFifoParam+0xb6>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d003      	beq.n	8003c14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c0c:	e018      	b.n	8003c40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	73fb      	strb	r3, [r7, #15]
      break;
 8003c12:	e015      	b.n	8003c40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00e      	beq.n	8003c3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
      break;
 8003c24:	e00b      	b.n	8003c3e <DMA_CheckFifoParam+0xe6>
      break;
 8003c26:	bf00      	nop
 8003c28:	e00a      	b.n	8003c40 <DMA_CheckFifoParam+0xe8>
      break;
 8003c2a:	bf00      	nop
 8003c2c:	e008      	b.n	8003c40 <DMA_CheckFifoParam+0xe8>
      break;
 8003c2e:	bf00      	nop
 8003c30:	e006      	b.n	8003c40 <DMA_CheckFifoParam+0xe8>
      break;
 8003c32:	bf00      	nop
 8003c34:	e004      	b.n	8003c40 <DMA_CheckFifoParam+0xe8>
      break;
 8003c36:	bf00      	nop
 8003c38:	e002      	b.n	8003c40 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c3a:	bf00      	nop
 8003c3c:	e000      	b.n	8003c40 <DMA_CheckFifoParam+0xe8>
      break;
 8003c3e:	bf00      	nop
    }
  } 
  
  return status; 
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop

08003c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b089      	sub	sp, #36	; 0x24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	e165      	b.n	8003f38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	f040 8154 	bne.w	8003f32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d005      	beq.n	8003ca2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d130      	bne.n	8003d04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	2203      	movs	r2, #3
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cd8:	2201      	movs	r2, #1
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 0201 	and.w	r2, r3, #1
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d017      	beq.n	8003d40 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d123      	bne.n	8003d94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	08da      	lsrs	r2, r3, #3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3208      	adds	r2, #8
 8003d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	220f      	movs	r2, #15
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	08da      	lsrs	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3208      	adds	r2, #8
 8003d8e:	69b9      	ldr	r1, [r7, #24]
 8003d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	2203      	movs	r2, #3
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4013      	ands	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0203 	and.w	r2, r3, #3
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80ae 	beq.w	8003f32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	4b5d      	ldr	r3, [pc, #372]	; (8003f50 <HAL_GPIO_Init+0x300>)
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	4a5c      	ldr	r2, [pc, #368]	; (8003f50 <HAL_GPIO_Init+0x300>)
 8003de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003de4:	6453      	str	r3, [r2, #68]	; 0x44
 8003de6:	4b5a      	ldr	r3, [pc, #360]	; (8003f50 <HAL_GPIO_Init+0x300>)
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003df2:	4a58      	ldr	r2, [pc, #352]	; (8003f54 <HAL_GPIO_Init+0x304>)
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	089b      	lsrs	r3, r3, #2
 8003df8:	3302      	adds	r3, #2
 8003dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	220f      	movs	r2, #15
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a4f      	ldr	r2, [pc, #316]	; (8003f58 <HAL_GPIO_Init+0x308>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d025      	beq.n	8003e6a <HAL_GPIO_Init+0x21a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a4e      	ldr	r2, [pc, #312]	; (8003f5c <HAL_GPIO_Init+0x30c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01f      	beq.n	8003e66 <HAL_GPIO_Init+0x216>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a4d      	ldr	r2, [pc, #308]	; (8003f60 <HAL_GPIO_Init+0x310>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d019      	beq.n	8003e62 <HAL_GPIO_Init+0x212>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a4c      	ldr	r2, [pc, #304]	; (8003f64 <HAL_GPIO_Init+0x314>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <HAL_GPIO_Init+0x20e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a4b      	ldr	r2, [pc, #300]	; (8003f68 <HAL_GPIO_Init+0x318>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00d      	beq.n	8003e5a <HAL_GPIO_Init+0x20a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a4a      	ldr	r2, [pc, #296]	; (8003f6c <HAL_GPIO_Init+0x31c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d007      	beq.n	8003e56 <HAL_GPIO_Init+0x206>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a49      	ldr	r2, [pc, #292]	; (8003f70 <HAL_GPIO_Init+0x320>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d101      	bne.n	8003e52 <HAL_GPIO_Init+0x202>
 8003e4e:	2306      	movs	r3, #6
 8003e50:	e00c      	b.n	8003e6c <HAL_GPIO_Init+0x21c>
 8003e52:	2307      	movs	r3, #7
 8003e54:	e00a      	b.n	8003e6c <HAL_GPIO_Init+0x21c>
 8003e56:	2305      	movs	r3, #5
 8003e58:	e008      	b.n	8003e6c <HAL_GPIO_Init+0x21c>
 8003e5a:	2304      	movs	r3, #4
 8003e5c:	e006      	b.n	8003e6c <HAL_GPIO_Init+0x21c>
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e004      	b.n	8003e6c <HAL_GPIO_Init+0x21c>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e002      	b.n	8003e6c <HAL_GPIO_Init+0x21c>
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <HAL_GPIO_Init+0x21c>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	f002 0203 	and.w	r2, r2, #3
 8003e72:	0092      	lsls	r2, r2, #2
 8003e74:	4093      	lsls	r3, r2
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e7c:	4935      	ldr	r1, [pc, #212]	; (8003f54 <HAL_GPIO_Init+0x304>)
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	3302      	adds	r3, #2
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e8a:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <HAL_GPIO_Init+0x324>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4013      	ands	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eae:	4a31      	ldr	r2, [pc, #196]	; (8003f74 <HAL_GPIO_Init+0x324>)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003eb4:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <HAL_GPIO_Init+0x324>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ed8:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <HAL_GPIO_Init+0x324>)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ede:	4b25      	ldr	r3, [pc, #148]	; (8003f74 <HAL_GPIO_Init+0x324>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4013      	ands	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f02:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <HAL_GPIO_Init+0x324>)
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f08:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <HAL_GPIO_Init+0x324>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f2c:	4a11      	ldr	r2, [pc, #68]	; (8003f74 <HAL_GPIO_Init+0x324>)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3301      	adds	r3, #1
 8003f36:	61fb      	str	r3, [r7, #28]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	2b0f      	cmp	r3, #15
 8003f3c:	f67f ae96 	bls.w	8003c6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
 8003f44:	3724      	adds	r7, #36	; 0x24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40013800 	.word	0x40013800
 8003f58:	40020000 	.word	0x40020000
 8003f5c:	40020400 	.word	0x40020400
 8003f60:	40020800 	.word	0x40020800
 8003f64:	40020c00 	.word	0x40020c00
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40021400 	.word	0x40021400
 8003f70:	40021800 	.word	0x40021800
 8003f74:	40013c00 	.word	0x40013c00

08003f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	807b      	strh	r3, [r7, #2]
 8003f84:	4613      	mov	r3, r2
 8003f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f88:	787b      	ldrb	r3, [r7, #1]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f8e:	887a      	ldrh	r2, [r7, #2]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f94:	e003      	b.n	8003f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f96:	887b      	ldrh	r3, [r7, #2]
 8003f98:	041a      	lsls	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	619a      	str	r2, [r3, #24]
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fb6:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d006      	beq.n	8003fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fc2:	4a05      	ldr	r2, [pc, #20]	; (8003fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fd fe7c 	bl	8001cc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40013c00 	.word	0x40013c00

08003fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e12b      	b.n	8004246 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fd fa78 	bl	80014f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2224      	movs	r2, #36	; 0x24
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0201 	bic.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800402e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800403e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004040:	f002 fd0e 	bl	8006a60 <HAL_RCC_GetPCLK1Freq>
 8004044:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4a81      	ldr	r2, [pc, #516]	; (8004250 <HAL_I2C_Init+0x274>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d807      	bhi.n	8004060 <HAL_I2C_Init+0x84>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4a80      	ldr	r2, [pc, #512]	; (8004254 <HAL_I2C_Init+0x278>)
 8004054:	4293      	cmp	r3, r2
 8004056:	bf94      	ite	ls
 8004058:	2301      	movls	r3, #1
 800405a:	2300      	movhi	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	e006      	b.n	800406e <HAL_I2C_Init+0x92>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a7d      	ldr	r2, [pc, #500]	; (8004258 <HAL_I2C_Init+0x27c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	bf94      	ite	ls
 8004068:	2301      	movls	r3, #1
 800406a:	2300      	movhi	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e0e7      	b.n	8004246 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a78      	ldr	r2, [pc, #480]	; (800425c <HAL_I2C_Init+0x280>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	0c9b      	lsrs	r3, r3, #18
 8004080:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4a6a      	ldr	r2, [pc, #424]	; (8004250 <HAL_I2C_Init+0x274>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d802      	bhi.n	80040b0 <HAL_I2C_Init+0xd4>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	3301      	adds	r3, #1
 80040ae:	e009      	b.n	80040c4 <HAL_I2C_Init+0xe8>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	4a69      	ldr	r2, [pc, #420]	; (8004260 <HAL_I2C_Init+0x284>)
 80040bc:	fba2 2303 	umull	r2, r3, r2, r3
 80040c0:	099b      	lsrs	r3, r3, #6
 80040c2:	3301      	adds	r3, #1
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	495c      	ldr	r1, [pc, #368]	; (8004250 <HAL_I2C_Init+0x274>)
 80040e0:	428b      	cmp	r3, r1
 80040e2:	d819      	bhi.n	8004118 <HAL_I2C_Init+0x13c>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1e59      	subs	r1, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80040f2:	1c59      	adds	r1, r3, #1
 80040f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040f8:	400b      	ands	r3, r1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_I2C_Init+0x138>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1e59      	subs	r1, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	fbb1 f3f3 	udiv	r3, r1, r3
 800410c:	3301      	adds	r3, #1
 800410e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004112:	e051      	b.n	80041b8 <HAL_I2C_Init+0x1dc>
 8004114:	2304      	movs	r3, #4
 8004116:	e04f      	b.n	80041b8 <HAL_I2C_Init+0x1dc>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d111      	bne.n	8004144 <HAL_I2C_Init+0x168>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1e58      	subs	r0, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6859      	ldr	r1, [r3, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	440b      	add	r3, r1
 800412e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004132:	3301      	adds	r3, #1
 8004134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e012      	b.n	800416a <HAL_I2C_Init+0x18e>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	1e58      	subs	r0, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6859      	ldr	r1, [r3, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	0099      	lsls	r1, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	fbb0 f3f3 	udiv	r3, r0, r3
 800415a:	3301      	adds	r3, #1
 800415c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf0c      	ite	eq
 8004164:	2301      	moveq	r3, #1
 8004166:	2300      	movne	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_I2C_Init+0x196>
 800416e:	2301      	movs	r3, #1
 8004170:	e022      	b.n	80041b8 <HAL_I2C_Init+0x1dc>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10e      	bne.n	8004198 <HAL_I2C_Init+0x1bc>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1e58      	subs	r0, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6859      	ldr	r1, [r3, #4]
 8004182:	460b      	mov	r3, r1
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	440b      	add	r3, r1
 8004188:	fbb0 f3f3 	udiv	r3, r0, r3
 800418c:	3301      	adds	r3, #1
 800418e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004196:	e00f      	b.n	80041b8 <HAL_I2C_Init+0x1dc>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1e58      	subs	r0, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6859      	ldr	r1, [r3, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	0099      	lsls	r1, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ae:	3301      	adds	r3, #1
 80041b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	6809      	ldr	r1, [r1, #0]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6911      	ldr	r1, [r2, #16]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68d2      	ldr	r2, [r2, #12]
 80041f2:	4311      	orrs	r1, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	430b      	orrs	r3, r1
 80041fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	000186a0 	.word	0x000186a0
 8004254:	001e847f 	.word	0x001e847f
 8004258:	003d08ff 	.word	0x003d08ff
 800425c:	431bde83 	.word	0x431bde83
 8004260:	10624dd3 	.word	0x10624dd3

08004264 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	607a      	str	r2, [r7, #4]
 800426e:	461a      	mov	r2, r3
 8004270:	460b      	mov	r3, r1
 8004272:	817b      	strh	r3, [r7, #10]
 8004274:	4613      	mov	r3, r2
 8004276:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004278:	f7fe fd4e 	bl	8002d18 <HAL_GetTick>
 800427c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b20      	cmp	r3, #32
 8004288:	f040 80e0 	bne.w	800444c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2319      	movs	r3, #25
 8004292:	2201      	movs	r2, #1
 8004294:	4970      	ldr	r1, [pc, #448]	; (8004458 <HAL_I2C_Master_Transmit+0x1f4>)
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f001 ffa8 	bl	80061ec <I2C_WaitOnFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
 80042a4:	e0d3      	b.n	800444e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_I2C_Master_Transmit+0x50>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e0cc      	b.n	800444e <HAL_I2C_Master_Transmit+0x1ea>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d007      	beq.n	80042da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0201 	orr.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2221      	movs	r2, #33	; 0x21
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2210      	movs	r2, #16
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	893a      	ldrh	r2, [r7, #8]
 800430a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4a50      	ldr	r2, [pc, #320]	; (800445c <HAL_I2C_Master_Transmit+0x1f8>)
 800431a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800431c:	8979      	ldrh	r1, [r7, #10]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	6a3a      	ldr	r2, [r7, #32]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f001 fd6a 	bl	8005dfc <I2C_MasterRequestWrite>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e08d      	b.n	800444e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004332:	2300      	movs	r3, #0
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004348:	e066      	b.n	8004418 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	6a39      	ldr	r1, [r7, #32]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f002 f822 	bl	8006398 <I2C_WaitOnTXEFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00d      	beq.n	8004376 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	2b04      	cmp	r3, #4
 8004360:	d107      	bne.n	8004372 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004370:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e06b      	b.n	800444e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	781a      	ldrb	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d11b      	bne.n	80043ec <HAL_I2C_Master_Transmit+0x188>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d017      	beq.n	80043ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	6a39      	ldr	r1, [r7, #32]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f002 f812 	bl	800641a <I2C_WaitOnBTFFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00d      	beq.n	8004418 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	2b04      	cmp	r3, #4
 8004402:	d107      	bne.n	8004414 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004412:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e01a      	b.n	800444e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441c:	2b00      	cmp	r3, #0
 800441e:	d194      	bne.n	800434a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	e000      	b.n	800444e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800444c:	2302      	movs	r3, #2
  }
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	00100002 	.word	0x00100002
 800445c:	ffff0000 	.word	0xffff0000

08004460 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08c      	sub	sp, #48	; 0x30
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	607a      	str	r2, [r7, #4]
 800446a:	461a      	mov	r2, r3
 800446c:	460b      	mov	r3, r1
 800446e:	817b      	strh	r3, [r7, #10]
 8004470:	4613      	mov	r3, r2
 8004472:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004474:	f7fe fc50 	bl	8002d18 <HAL_GetTick>
 8004478:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b20      	cmp	r3, #32
 8004484:	f040 820b 	bne.w	800489e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	2319      	movs	r3, #25
 800448e:	2201      	movs	r2, #1
 8004490:	497c      	ldr	r1, [pc, #496]	; (8004684 <HAL_I2C_Master_Receive+0x224>)
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f001 feaa 	bl	80061ec <I2C_WaitOnFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
 80044a0:	e1fe      	b.n	80048a0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_I2C_Master_Receive+0x50>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e1f7      	b.n	80048a0 <HAL_I2C_Master_Receive+0x440>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d007      	beq.n	80044d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2222      	movs	r2, #34	; 0x22
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2210      	movs	r2, #16
 80044f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	893a      	ldrh	r2, [r7, #8]
 8004506:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4a5c      	ldr	r2, [pc, #368]	; (8004688 <HAL_I2C_Master_Receive+0x228>)
 8004516:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004518:	8979      	ldrh	r1, [r7, #10]
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f001 fcee 	bl	8005f00 <I2C_MasterRequestRead>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e1b8      	b.n	80048a0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004532:	2b00      	cmp	r3, #0
 8004534:	d113      	bne.n	800455e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004536:	2300      	movs	r3, #0
 8004538:	623b      	str	r3, [r7, #32]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	623b      	str	r3, [r7, #32]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	623b      	str	r3, [r7, #32]
 800454a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e18c      	b.n	8004878 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004562:	2b01      	cmp	r3, #1
 8004564:	d11b      	bne.n	800459e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004574:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	e16c      	b.n	8004878 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d11b      	bne.n	80045de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c6:	2300      	movs	r3, #0
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	e14c      	b.n	8004878 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004604:	e138      	b.n	8004878 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460a:	2b03      	cmp	r3, #3
 800460c:	f200 80f1 	bhi.w	80047f2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004614:	2b01      	cmp	r3, #1
 8004616:	d123      	bne.n	8004660 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f001 ff6f 	bl	8006500 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e139      	b.n	80048a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800465e:	e10b      	b.n	8004878 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004664:	2b02      	cmp	r3, #2
 8004666:	d14e      	bne.n	8004706 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	2200      	movs	r2, #0
 8004670:	4906      	ldr	r1, [pc, #24]	; (800468c <HAL_I2C_Master_Receive+0x22c>)
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f001 fdba 	bl	80061ec <I2C_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e10e      	b.n	80048a0 <HAL_I2C_Master_Receive+0x440>
 8004682:	bf00      	nop
 8004684:	00100002 	.word	0x00100002
 8004688:	ffff0000 	.word	0xffff0000
 800468c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004704:	e0b8      	b.n	8004878 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470c:	2200      	movs	r2, #0
 800470e:	4966      	ldr	r1, [pc, #408]	; (80048a8 <HAL_I2C_Master_Receive+0x448>)
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f001 fd6b 	bl	80061ec <I2C_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e0bf      	b.n	80048a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004768:	2200      	movs	r2, #0
 800476a:	494f      	ldr	r1, [pc, #316]	; (80048a8 <HAL_I2C_Master_Receive+0x448>)
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f001 fd3d 	bl	80061ec <I2C_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e091      	b.n	80048a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800478a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047f0:	e042      	b.n	8004878 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f001 fe82 	bl	8006500 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e04c      	b.n	80048a0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b04      	cmp	r3, #4
 8004844:	d118      	bne.n	8004878 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487c:	2b00      	cmp	r3, #0
 800487e:	f47f aec2 	bne.w	8004606 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e000      	b.n	80048a0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800489e:	2302      	movs	r3, #2
  }
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3728      	adds	r7, #40	; 0x28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	00010004 	.word	0x00010004

080048ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d003      	beq.n	80048e4 <HAL_I2C_EV_IRQHandler+0x38>
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b40      	cmp	r3, #64	; 0x40
 80048e0:	f040 80bd 	bne.w	8004a5e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10d      	bne.n	800491a <HAL_I2C_EV_IRQHandler+0x6e>
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004904:	d003      	beq.n	800490e <HAL_I2C_EV_IRQHandler+0x62>
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800490c:	d101      	bne.n	8004912 <HAL_I2C_EV_IRQHandler+0x66>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <HAL_I2C_EV_IRQHandler+0x68>
 8004912:	2300      	movs	r3, #0
 8004914:	2b01      	cmp	r3, #1
 8004916:	f000 812e 	beq.w	8004b76 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00c      	beq.n	800493e <HAL_I2C_EV_IRQHandler+0x92>
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	0a5b      	lsrs	r3, r3, #9
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d006      	beq.n	800493e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f001 fe6a 	bl	800660a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fcbb 	bl	80052b2 <I2C_Master_SB>
 800493c:	e08e      	b.n	8004a5c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	08db      	lsrs	r3, r3, #3
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <HAL_I2C_EV_IRQHandler+0xb2>
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	0a5b      	lsrs	r3, r3, #9
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fd31 	bl	80053be <I2C_Master_ADD10>
 800495c:	e07e      	b.n	8004a5c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d009      	beq.n	800497e <HAL_I2C_EV_IRQHandler+0xd2>
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	0a5b      	lsrs	r3, r3, #9
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fd4b 	bl	8005412 <I2C_Master_ADDR>
 800497c:	e06e      	b.n	8004a5c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	089b      	lsrs	r3, r3, #2
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d037      	beq.n	80049fa <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004998:	f000 80ef 	beq.w	8004b7a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	09db      	lsrs	r3, r3, #7
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00f      	beq.n	80049c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	0a9b      	lsrs	r3, r3, #10
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	089b      	lsrs	r3, r3, #2
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d103      	bne.n	80049c8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f948 	bl	8004c56 <I2C_MasterTransmit_TXE>
 80049c6:	e049      	b.n	8004a5c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	089b      	lsrs	r3, r3, #2
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 80d2 	beq.w	8004b7a <HAL_I2C_EV_IRQHandler+0x2ce>
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	0a5b      	lsrs	r3, r3, #9
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 80cb 	beq.w	8004b7a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	2b10      	cmp	r3, #16
 80049e8:	d103      	bne.n	80049f2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f9cf 	bl	8004d8e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049f0:	e0c3      	b.n	8004b7a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fa33 	bl	8004e5e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049f8:	e0bf      	b.n	8004b7a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a08:	f000 80b7 	beq.w	8004b7a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	099b      	lsrs	r3, r3, #6
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00f      	beq.n	8004a38 <HAL_I2C_EV_IRQHandler+0x18c>
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	0a9b      	lsrs	r3, r3, #10
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d009      	beq.n	8004a38 <HAL_I2C_EV_IRQHandler+0x18c>
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	089b      	lsrs	r3, r3, #2
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d103      	bne.n	8004a38 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 faa3 	bl	8004f7c <I2C_MasterReceive_RXNE>
 8004a36:	e011      	b.n	8004a5c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	089b      	lsrs	r3, r3, #2
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 809a 	beq.w	8004b7a <HAL_I2C_EV_IRQHandler+0x2ce>
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	0a5b      	lsrs	r3, r3, #9
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 8093 	beq.w	8004b7a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fb42 	bl	80050de <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a5a:	e08e      	b.n	8004b7a <HAL_I2C_EV_IRQHandler+0x2ce>
 8004a5c:	e08d      	b.n	8004b7a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	e007      	b.n	8004a80 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d012      	beq.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x206>
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	0a5b      	lsrs	r3, r3, #9
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00c      	beq.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004aa8:	69b9      	ldr	r1, [r7, #24]
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 ff00 	bl	80058b0 <I2C_Slave_ADDR>
 8004ab0:	e066      	b.n	8004b80 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d009      	beq.n	8004ad2 <HAL_I2C_EV_IRQHandler+0x226>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	0a5b      	lsrs	r3, r3, #9
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 ff34 	bl	8005938 <I2C_Slave_STOPF>
 8004ad0:	e056      	b.n	8004b80 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ad2:	7bbb      	ldrb	r3, [r7, #14]
 8004ad4:	2b21      	cmp	r3, #33	; 0x21
 8004ad6:	d002      	beq.n	8004ade <HAL_I2C_EV_IRQHandler+0x232>
 8004ad8:	7bbb      	ldrb	r3, [r7, #14]
 8004ada:	2b29      	cmp	r3, #41	; 0x29
 8004adc:	d125      	bne.n	8004b2a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	09db      	lsrs	r3, r3, #7
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00f      	beq.n	8004b0a <HAL_I2C_EV_IRQHandler+0x25e>
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	0a9b      	lsrs	r3, r3, #10
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <HAL_I2C_EV_IRQHandler+0x25e>
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	089b      	lsrs	r3, r3, #2
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d103      	bne.n	8004b0a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fe16 	bl	8005734 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b08:	e039      	b.n	8004b7e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	089b      	lsrs	r3, r3, #2
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d033      	beq.n	8004b7e <HAL_I2C_EV_IRQHandler+0x2d2>
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	0a5b      	lsrs	r3, r3, #9
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d02d      	beq.n	8004b7e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fe43 	bl	80057ae <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b28:	e029      	b.n	8004b7e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	099b      	lsrs	r3, r3, #6
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00f      	beq.n	8004b56 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	0a9b      	lsrs	r3, r3, #10
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d103      	bne.n	8004b56 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fe4e 	bl	80057f0 <I2C_SlaveReceive_RXNE>
 8004b54:	e014      	b.n	8004b80 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	089b      	lsrs	r3, r3, #2
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00e      	beq.n	8004b80 <HAL_I2C_EV_IRQHandler+0x2d4>
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	0a5b      	lsrs	r3, r3, #9
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d008      	beq.n	8004b80 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fe7c 	bl	800586c <I2C_SlaveReceive_BTF>
 8004b74:	e004      	b.n	8004b80 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8004b76:	bf00      	nop
 8004b78:	e002      	b.n	8004b80 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b7a:	bf00      	nop
 8004b7c:	e000      	b.n	8004b80 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b7e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	460b      	mov	r3, r1
 8004be0:	70fb      	strb	r3, [r7, #3]
 8004be2:	4613      	mov	r3, r2
 8004be4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c64:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c6c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d150      	bne.n	8004d1e <I2C_MasterTransmit_TXE+0xc8>
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b21      	cmp	r3, #33	; 0x21
 8004c80:	d14d      	bne.n	8004d1e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d01d      	beq.n	8004cc4 <I2C_MasterTransmit_TXE+0x6e>
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d01a      	beq.n	8004cc4 <I2C_MasterTransmit_TXE+0x6e>
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c94:	d016      	beq.n	8004cc4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ca4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2211      	movs	r2, #17
 8004caa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff ff62 	bl	8004b86 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cc2:	e060      	b.n	8004d86 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cd2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d107      	bne.n	8004d0e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff ff7d 	bl	8004c06 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d0c:	e03b      	b.n	8004d86 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff ff35 	bl	8004b86 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d1c:	e033      	b.n	8004d86 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b21      	cmp	r3, #33	; 0x21
 8004d22:	d005      	beq.n	8004d30 <I2C_MasterTransmit_TXE+0xda>
 8004d24:	7bbb      	ldrb	r3, [r7, #14]
 8004d26:	2b40      	cmp	r3, #64	; 0x40
 8004d28:	d12d      	bne.n	8004d86 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	2b22      	cmp	r3, #34	; 0x22
 8004d2e:	d12a      	bne.n	8004d86 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d108      	bne.n	8004d4c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d48:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004d4a:	e01c      	b.n	8004d86 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b40      	cmp	r3, #64	; 0x40
 8004d56:	d103      	bne.n	8004d60 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f880 	bl	8004e5e <I2C_MemoryTransmit_TXE_BTF>
}
 8004d5e:	e012      	b.n	8004d86 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	781a      	ldrb	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d84:	e7ff      	b.n	8004d86 <I2C_MasterTransmit_TXE+0x130>
 8004d86:	bf00      	nop
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b21      	cmp	r3, #33	; 0x21
 8004da6:	d156      	bne.n	8004e56 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d012      	beq.n	8004dd8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	781a      	ldrb	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004dd6:	e03e      	b.n	8004e56 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d01d      	beq.n	8004e1a <I2C_MasterTransmit_BTF+0x8c>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	d01a      	beq.n	8004e1a <I2C_MasterTransmit_BTF+0x8c>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dea:	d016      	beq.n	8004e1a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dfa:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2211      	movs	r2, #17
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff feb7 	bl	8004b86 <HAL_I2C_MasterTxCpltCallback>
}
 8004e18:	e01d      	b.n	8004e56 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e28:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e38:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff fe98 	bl	8004b86 <HAL_I2C_MasterTxCpltCallback>
}
 8004e56:	bf00      	nop
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d11d      	bne.n	8004eb2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d10b      	bne.n	8004e96 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8e:	1c9a      	adds	r2, r3, #2
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004e94:	e06e      	b.n	8004f74 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	121b      	asrs	r3, r3, #8
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004eb0:	e060      	b.n	8004f74 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d10b      	bne.n	8004ed2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ed0:	e050      	b.n	8004f74 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d14c      	bne.n	8004f74 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	2b22      	cmp	r3, #34	; 0x22
 8004ede:	d108      	bne.n	8004ef2 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eee:	601a      	str	r2, [r3, #0]
}
 8004ef0:	e040      	b.n	8004f74 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d015      	beq.n	8004f28 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b21      	cmp	r3, #33	; 0x21
 8004f00:	d112      	bne.n	8004f28 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	781a      	ldrb	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f26:	e025      	b.n	8004f74 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d120      	bne.n	8004f74 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	2b21      	cmp	r3, #33	; 0x21
 8004f36:	d11d      	bne.n	8004f74 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f46:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff fe49 	bl	8004c06 <HAL_I2C_MemTxCpltCallback>
}
 8004f74:	bf00      	nop
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b22      	cmp	r3, #34	; 0x22
 8004f8e:	f040 80a2 	bne.w	80050d6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d921      	bls.n	8004fe4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	f040 8082 	bne.w	80050d6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004fe2:	e078      	b.n	80050d6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d074      	beq.n	80050d6 <I2C_MasterReceive_RXNE+0x15a>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d002      	beq.n	8004ff8 <I2C_MasterReceive_RXNE+0x7c>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d16e      	bne.n	80050d6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f001 fa4f 	bl	800649c <I2C_WaitOnSTOPRequestThroughIT>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d142      	bne.n	800508a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005012:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005022:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b40      	cmp	r3, #64	; 0x40
 800505c:	d10a      	bne.n	8005074 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff fdd4 	bl	8004c1a <HAL_I2C_MemRxCpltCallback>
}
 8005072:	e030      	b.n	80050d6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2212      	movs	r2, #18
 8005080:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fd89 	bl	8004b9a <HAL_I2C_MasterRxCpltCallback>
}
 8005088:	e025      	b.n	80050d6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005098:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff fdac 	bl	8004c2e <HAL_I2C_ErrorCallback>
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d11b      	bne.n	800512e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005104:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800512c:	e0bd      	b.n	80052aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b03      	cmp	r3, #3
 8005136:	d129      	bne.n	800518c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005146:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b04      	cmp	r3, #4
 800514c:	d00a      	beq.n	8005164 <I2C_MasterReceive_BTF+0x86>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d007      	beq.n	8005164 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005162:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800518a:	e08e      	b.n	80052aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d176      	bne.n	8005284 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d002      	beq.n	80051a2 <I2C_MasterReceive_BTF+0xc4>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d108      	bne.n	80051b4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	e019      	b.n	80051e8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d002      	beq.n	80051c0 <I2C_MasterReceive_BTF+0xe2>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d108      	bne.n	80051d2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	e00a      	b.n	80051e8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d007      	beq.n	80051e8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005242:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b40      	cmp	r3, #64	; 0x40
 8005256:	d10a      	bne.n	800526e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff fcd7 	bl	8004c1a <HAL_I2C_MemRxCpltCallback>
}
 800526c:	e01d      	b.n	80052aa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2212      	movs	r2, #18
 800527a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff fc8c 	bl	8004b9a <HAL_I2C_MasterRxCpltCallback>
}
 8005282:	e012      	b.n	80052aa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691a      	ldr	r2, [r3, #16]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052aa:	bf00      	nop
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d117      	bne.n	80052f6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052de:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80052e0:	e067      	b.n	80053b2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	611a      	str	r2, [r3, #16]
}
 80052f4:	e05d      	b.n	80053b2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052fe:	d133      	bne.n	8005368 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b21      	cmp	r3, #33	; 0x21
 800530a:	d109      	bne.n	8005320 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005310:	b2db      	uxtb	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800531c:	611a      	str	r2, [r3, #16]
 800531e:	e008      	b.n	8005332 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005324:	b2db      	uxtb	r3, r3
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	b2da      	uxtb	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	2b00      	cmp	r3, #0
 8005338:	d004      	beq.n	8005344 <I2C_Master_SB+0x92>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d108      	bne.n	8005356 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	2b00      	cmp	r3, #0
 800534a:	d032      	beq.n	80053b2 <I2C_Master_SB+0x100>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005352:	2b00      	cmp	r3, #0
 8005354:	d02d      	beq.n	80053b2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005364:	605a      	str	r2, [r3, #4]
}
 8005366:	e024      	b.n	80053b2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10e      	bne.n	800538e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005374:	b29b      	uxth	r3, r3
 8005376:	11db      	asrs	r3, r3, #7
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f003 0306 	and.w	r3, r3, #6
 800537e:	b2db      	uxtb	r3, r3
 8005380:	f063 030f 	orn	r3, r3, #15
 8005384:	b2da      	uxtb	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	611a      	str	r2, [r3, #16]
}
 800538c:	e011      	b.n	80053b2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005392:	2b01      	cmp	r3, #1
 8005394:	d10d      	bne.n	80053b2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	b29b      	uxth	r3, r3
 800539c:	11db      	asrs	r3, r3, #7
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	f003 0306 	and.w	r3, r3, #6
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	f063 030e 	orn	r3, r3, #14
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	611a      	str	r2, [r3, #16]
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d004      	beq.n	80053e4 <I2C_Master_ADD10+0x26>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d108      	bne.n	80053f6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00c      	beq.n	8005406 <I2C_Master_ADD10+0x48>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d007      	beq.n	8005406 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005404:	605a      	str	r2, [r3, #4]
  }
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005412:	b480      	push	{r7}
 8005414:	b091      	sub	sp, #68	; 0x44
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005420:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b22      	cmp	r3, #34	; 0x22
 800543a:	f040 8169 	bne.w	8005710 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10f      	bne.n	8005466 <I2C_Master_ADDR+0x54>
 8005446:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800544a:	2b40      	cmp	r3, #64	; 0x40
 800544c:	d10b      	bne.n	8005466 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544e:	2300      	movs	r3, #0
 8005450:	633b      	str	r3, [r7, #48]	; 0x30
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	633b      	str	r3, [r7, #48]	; 0x30
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	633b      	str	r3, [r7, #48]	; 0x30
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	e160      	b.n	8005728 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546a:	2b00      	cmp	r3, #0
 800546c:	d11d      	bne.n	80054aa <I2C_Master_ADDR+0x98>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005476:	d118      	bne.n	80054aa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005478:	2300      	movs	r3, #0
 800547a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800548c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800549c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	651a      	str	r2, [r3, #80]	; 0x50
 80054a8:	e13e      	b.n	8005728 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d113      	bne.n	80054dc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b4:	2300      	movs	r3, #0
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	e115      	b.n	8005708 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	f040 808a 	bne.w	80055fc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054ee:	d137      	bne.n	8005560 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054fe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800550a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800550e:	d113      	bne.n	8005538 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005520:	2300      	movs	r3, #0
 8005522:	627b      	str	r3, [r7, #36]	; 0x24
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	e0e7      	b.n	8005708 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005538:	2300      	movs	r3, #0
 800553a:	623b      	str	r3, [r7, #32]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	623b      	str	r3, [r7, #32]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	623b      	str	r3, [r7, #32]
 800554c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e0d3      	b.n	8005708 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005562:	2b08      	cmp	r3, #8
 8005564:	d02e      	beq.n	80055c4 <I2C_Master_ADDR+0x1b2>
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	2b20      	cmp	r3, #32
 800556a:	d02b      	beq.n	80055c4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556e:	2b12      	cmp	r3, #18
 8005570:	d102      	bne.n	8005578 <I2C_Master_ADDR+0x166>
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	2b01      	cmp	r3, #1
 8005576:	d125      	bne.n	80055c4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	2b04      	cmp	r3, #4
 800557c:	d00e      	beq.n	800559c <I2C_Master_ADDR+0x18a>
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	2b02      	cmp	r3, #2
 8005582:	d00b      	beq.n	800559c <I2C_Master_ADDR+0x18a>
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	2b10      	cmp	r3, #16
 8005588:	d008      	beq.n	800559c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e007      	b.n	80055ac <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055aa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	e0a1      	b.n	8005708 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d4:	2300      	movs	r3, #0
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	61bb      	str	r3, [r7, #24]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	61bb      	str	r3, [r7, #24]
 80055e8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	e085      	b.n	8005708 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d14d      	bne.n	80056a2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	2b04      	cmp	r3, #4
 800560a:	d016      	beq.n	800563a <I2C_Master_ADDR+0x228>
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	2b02      	cmp	r3, #2
 8005610:	d013      	beq.n	800563a <I2C_Master_ADDR+0x228>
 8005612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005614:	2b10      	cmp	r3, #16
 8005616:	d010      	beq.n	800563a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005626:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	e007      	b.n	800564a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005648:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005658:	d117      	bne.n	800568a <I2C_Master_ADDR+0x278>
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005660:	d00b      	beq.n	800567a <I2C_Master_ADDR+0x268>
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	2b01      	cmp	r3, #1
 8005666:	d008      	beq.n	800567a <I2C_Master_ADDR+0x268>
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	2b08      	cmp	r3, #8
 800566c:	d005      	beq.n	800567a <I2C_Master_ADDR+0x268>
 800566e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005670:	2b10      	cmp	r3, #16
 8005672:	d002      	beq.n	800567a <I2C_Master_ADDR+0x268>
 8005674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005676:	2b20      	cmp	r3, #32
 8005678:	d107      	bne.n	800568a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005688:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800568a:	2300      	movs	r3, #0
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	e032      	b.n	8005708 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056b0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c0:	d117      	bne.n	80056f2 <I2C_Master_ADDR+0x2e0>
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056c8:	d00b      	beq.n	80056e2 <I2C_Master_ADDR+0x2d0>
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d008      	beq.n	80056e2 <I2C_Master_ADDR+0x2d0>
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d005      	beq.n	80056e2 <I2C_Master_ADDR+0x2d0>
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d002      	beq.n	80056e2 <I2C_Master_ADDR+0x2d0>
 80056dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d107      	bne.n	80056f2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056f2:	2300      	movs	r3, #0
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800570e:	e00b      	b.n	8005728 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
}
 8005726:	e7ff      	b.n	8005728 <I2C_Master_ADDR+0x316>
 8005728:	bf00      	nop
 800572a:	3744      	adds	r7, #68	; 0x44
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005742:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d02b      	beq.n	80057a6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	781a      	ldrb	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d114      	bne.n	80057a6 <I2C_SlaveTransmit_TXE+0x72>
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	2b29      	cmp	r3, #41	; 0x29
 8005780:	d111      	bne.n	80057a6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005790:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2221      	movs	r2, #33	; 0x21
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2228      	movs	r2, #40	; 0x28
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff fa04 	bl	8004bae <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d011      	beq.n	80057e4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	781a      	ldrb	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d02c      	beq.n	8005864 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d114      	bne.n	8005864 <I2C_SlaveReceive_RXNE+0x74>
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	2b2a      	cmp	r3, #42	; 0x2a
 800583e:	d111      	bne.n	8005864 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2222      	movs	r2, #34	; 0x22
 8005854:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2228      	movs	r2, #40	; 0x28
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff f9af 	bl	8004bc2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d012      	beq.n	80058a4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	b2d2      	uxtb	r2, r2
 800588a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80058ba:	2300      	movs	r3, #0
 80058bc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058ca:	2b28      	cmp	r3, #40	; 0x28
 80058cc:	d127      	bne.n	800591e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058dc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	089b      	lsrs	r3, r3, #2
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80058ea:	2301      	movs	r3, #1
 80058ec:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	09db      	lsrs	r3, r3, #7
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	81bb      	strh	r3, [r7, #12]
 8005900:	e002      	b.n	8005908 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005910:	89ba      	ldrh	r2, [r7, #12]
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff f95d 	bl	8004bd6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800591c:	e008      	b.n	8005930 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f06f 0202 	mvn.w	r2, #2
 8005926:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005930:	bf00      	nop
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005946:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005956:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005958:	2300      	movs	r3, #0
 800595a:	60bb      	str	r3, [r7, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	60bb      	str	r3, [r7, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005984:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005994:	d172      	bne.n	8005a7c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	2b22      	cmp	r3, #34	; 0x22
 800599a:	d002      	beq.n	80059a2 <I2C_Slave_STOPF+0x6a>
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	2b2a      	cmp	r3, #42	; 0x2a
 80059a0:	d135      	bne.n	8005a0e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d005      	beq.n	80059c6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	f043 0204 	orr.w	r2, r3, #4
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe f849 	bl	8003a72 <HAL_DMA_GetState>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d049      	beq.n	8005a7a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	4a69      	ldr	r2, [pc, #420]	; (8005b90 <I2C_Slave_STOPF+0x258>)
 80059ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe f81b 	bl	8003a2e <HAL_DMA_Abort_IT>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d03d      	beq.n	8005a7a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a08:	4610      	mov	r0, r2
 8005a0a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a0c:	e035      	b.n	8005a7a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f043 0204 	orr.w	r2, r3, #4
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe f813 	bl	8003a72 <HAL_DMA_GetState>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d014      	beq.n	8005a7c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a56:	4a4e      	ldr	r2, [pc, #312]	; (8005b90 <I2C_Slave_STOPF+0x258>)
 8005a58:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fd ffe5 	bl	8003a2e <HAL_DMA_Abort_IT>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d008      	beq.n	8005a7c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a74:	4610      	mov	r0, r2
 8005a76:	4798      	blx	r3
 8005a78:	e000      	b.n	8005a7c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a7a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d03e      	beq.n	8005b04 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d112      	bne.n	8005aba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691a      	ldr	r2, [r3, #16]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d112      	bne.n	8005aee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	f043 0204 	orr.w	r2, r3, #4
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d003      	beq.n	8005b14 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f843 	bl	8005b98 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b12:	e039      	b.n	8005b88 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	2b2a      	cmp	r3, #42	; 0x2a
 8005b18:	d109      	bne.n	8005b2e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2228      	movs	r2, #40	; 0x28
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff f84a 	bl	8004bc2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b28      	cmp	r3, #40	; 0x28
 8005b38:	d111      	bne.n	8005b5e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a15      	ldr	r2, [pc, #84]	; (8005b94 <I2C_Slave_STOPF+0x25c>)
 8005b3e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff f84b 	bl	8004bf2 <HAL_I2C_ListenCpltCallback>
}
 8005b5c:	e014      	b.n	8005b88 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b62:	2b22      	cmp	r3, #34	; 0x22
 8005b64:	d002      	beq.n	8005b6c <I2C_Slave_STOPF+0x234>
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
 8005b68:	2b22      	cmp	r3, #34	; 0x22
 8005b6a:	d10d      	bne.n	8005b88 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff f81d 	bl	8004bc2 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b88:	bf00      	nop
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	0800609d 	.word	0x0800609d
 8005b94:	ffff0000 	.word	0xffff0000

08005b98 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005bb0:	7bbb      	ldrb	r3, [r7, #14]
 8005bb2:	2b10      	cmp	r3, #16
 8005bb4:	d002      	beq.n	8005bbc <I2C_ITError+0x24>
 8005bb6:	7bbb      	ldrb	r3, [r7, #14]
 8005bb8:	2b40      	cmp	r3, #64	; 0x40
 8005bba:	d10a      	bne.n	8005bd2 <I2C_ITError+0x3a>
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
 8005bbe:	2b22      	cmp	r3, #34	; 0x22
 8005bc0:	d107      	bne.n	8005bd2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bd0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005bd8:	2b28      	cmp	r3, #40	; 0x28
 8005bda:	d107      	bne.n	8005bec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2228      	movs	r2, #40	; 0x28
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005bea:	e015      	b.n	8005c18 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bfa:	d00a      	beq.n	8005c12 <I2C_ITError+0x7a>
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
 8005bfe:	2b60      	cmp	r3, #96	; 0x60
 8005c00:	d007      	beq.n	8005c12 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c26:	d162      	bne.n	8005cee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c36:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d020      	beq.n	8005c88 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4a:	4a6a      	ldr	r2, [pc, #424]	; (8005df4 <I2C_ITError+0x25c>)
 8005c4c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fd feeb 	bl	8003a2e <HAL_DMA_Abort_IT>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 8089 	beq.w	8005d72 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c82:	4610      	mov	r0, r2
 8005c84:	4798      	blx	r3
 8005c86:	e074      	b.n	8005d72 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	4a59      	ldr	r2, [pc, #356]	; (8005df4 <I2C_ITError+0x25c>)
 8005c8e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fd feca 	bl	8003a2e <HAL_DMA_Abort_IT>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d068      	beq.n	8005d72 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b40      	cmp	r3, #64	; 0x40
 8005cac:	d10b      	bne.n	8005cc6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4798      	blx	r3
 8005cec:	e041      	b.n	8005d72 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b60      	cmp	r3, #96	; 0x60
 8005cf8:	d125      	bne.n	8005d46 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b40      	cmp	r3, #64	; 0x40
 8005d14:	d10b      	bne.n	8005d2e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0201 	bic.w	r2, r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fe ff7f 	bl	8004c42 <HAL_I2C_AbortCpltCallback>
 8005d44:	e015      	b.n	8005d72 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d50:	2b40      	cmp	r3, #64	; 0x40
 8005d52:	d10b      	bne.n	8005d6c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691a      	ldr	r2, [r3, #16]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7fe ff5e 	bl	8004c2e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10e      	bne.n	8005da0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d104      	bne.n	8005da0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d113      	bne.n	8005dec <I2C_ITError+0x254>
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	2b28      	cmp	r3, #40	; 0x28
 8005dc8:	d110      	bne.n	8005dec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <I2C_ITError+0x260>)
 8005dce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fe ff03 	bl	8004bf2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005dec:	bf00      	nop
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	0800609d 	.word	0x0800609d
 8005df8:	ffff0000 	.word	0xffff0000

08005dfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	607a      	str	r2, [r7, #4]
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d006      	beq.n	8005e26 <I2C_MasterRequestWrite+0x2a>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d003      	beq.n	8005e26 <I2C_MasterRequestWrite+0x2a>
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e24:	d108      	bne.n	8005e38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	e00b      	b.n	8005e50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	2b12      	cmp	r3, #18
 8005e3e:	d107      	bne.n	8005e50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f9c5 	bl	80061ec <I2C_WaitOnFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00d      	beq.n	8005e84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e76:	d103      	bne.n	8005e80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e035      	b.n	8005ef0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e8c:	d108      	bne.n	8005ea0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e8e:	897b      	ldrh	r3, [r7, #10]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	461a      	mov	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e9c:	611a      	str	r2, [r3, #16]
 8005e9e:	e01b      	b.n	8005ed8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ea0:	897b      	ldrh	r3, [r7, #10]
 8005ea2:	11db      	asrs	r3, r3, #7
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	f003 0306 	and.w	r3, r3, #6
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	f063 030f 	orn	r3, r3, #15
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	490e      	ldr	r1, [pc, #56]	; (8005ef8 <I2C_MasterRequestWrite+0xfc>)
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 f9eb 	bl	800629a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e010      	b.n	8005ef0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ece:	897b      	ldrh	r3, [r7, #10]
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	4907      	ldr	r1, [pc, #28]	; (8005efc <I2C_MasterRequestWrite+0x100>)
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f9db 	bl	800629a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	00010008 	.word	0x00010008
 8005efc:	00010002 	.word	0x00010002

08005f00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	607a      	str	r2, [r7, #4]
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d006      	beq.n	8005f3a <I2C_MasterRequestRead+0x3a>
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d003      	beq.n	8005f3a <I2C_MasterRequestRead+0x3a>
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f38:	d108      	bne.n	8005f4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	e00b      	b.n	8005f64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f50:	2b11      	cmp	r3, #17
 8005f52:	d107      	bne.n	8005f64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f93b 	bl	80061ec <I2C_WaitOnFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00d      	beq.n	8005f98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f8a:	d103      	bne.n	8005f94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e079      	b.n	800608c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fa0:	d108      	bne.n	8005fb4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fa2:	897b      	ldrh	r3, [r7, #10]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	f043 0301 	orr.w	r3, r3, #1
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	611a      	str	r2, [r3, #16]
 8005fb2:	e05f      	b.n	8006074 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005fb4:	897b      	ldrh	r3, [r7, #10]
 8005fb6:	11db      	asrs	r3, r3, #7
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	f003 0306 	and.w	r3, r3, #6
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f063 030f 	orn	r3, r3, #15
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	4930      	ldr	r1, [pc, #192]	; (8006094 <I2C_MasterRequestRead+0x194>)
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f961 	bl	800629a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e054      	b.n	800608c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005fe2:	897b      	ldrh	r3, [r7, #10]
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	4929      	ldr	r1, [pc, #164]	; (8006098 <I2C_MasterRequestRead+0x198>)
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 f951 	bl	800629a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e044      	b.n	800608c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006002:	2300      	movs	r3, #0
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006026:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f8d9 	bl	80061ec <I2C_WaitOnFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00d      	beq.n	800605c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800604e:	d103      	bne.n	8006058 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006056:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e017      	b.n	800608c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800605c:	897b      	ldrh	r3, [r7, #10]
 800605e:	11db      	asrs	r3, r3, #7
 8006060:	b2db      	uxtb	r3, r3
 8006062:	f003 0306 	and.w	r3, r3, #6
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f063 030e 	orn	r3, r3, #14
 800606c:	b2da      	uxtb	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	4907      	ldr	r1, [pc, #28]	; (8006098 <I2C_MasterRequestRead+0x198>)
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 f90d 	bl	800629a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e000      	b.n	800608c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	00010008 	.word	0x00010008
 8006098:	00010002 	.word	0x00010002

0800609c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80060b6:	4b4b      	ldr	r3, [pc, #300]	; (80061e4 <I2C_DMAAbort+0x148>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	08db      	lsrs	r3, r3, #3
 80060bc:	4a4a      	ldr	r2, [pc, #296]	; (80061e8 <I2C_DMAAbort+0x14c>)
 80060be:	fba2 2303 	umull	r2, r3, r2, r3
 80060c2:	0a1a      	lsrs	r2, r3, #8
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	00da      	lsls	r2, r3, #3
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	f043 0220 	orr.w	r2, r3, #32
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80060e2:	e00a      	b.n	80060fa <I2C_DMAAbort+0x5e>
    }
    count--;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f8:	d0ea      	beq.n	80060d0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006106:	2200      	movs	r2, #0
 8006108:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	2200      	movs	r2, #0
 8006118:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006128:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2200      	movs	r2, #0
 800612e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613c:	2200      	movs	r2, #0
 800613e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	2200      	movs	r2, #0
 800614e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b60      	cmp	r3, #96	; 0x60
 800616a:	d10e      	bne.n	800618a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2220      	movs	r2, #32
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2200      	movs	r2, #0
 8006180:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006182:	6978      	ldr	r0, [r7, #20]
 8006184:	f7fe fd5d 	bl	8004c42 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006188:	e027      	b.n	80061da <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800618a:	7cfb      	ldrb	r3, [r7, #19]
 800618c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006190:	2b28      	cmp	r3, #40	; 0x28
 8006192:	d117      	bne.n	80061c4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0201 	orr.w	r2, r2, #1
 80061a2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061b2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2200      	movs	r2, #0
 80061b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2228      	movs	r2, #40	; 0x28
 80061be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061c2:	e007      	b.n	80061d4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80061d4:	6978      	ldr	r0, [r7, #20]
 80061d6:	f7fe fd2a 	bl	8004c2e <HAL_I2C_ErrorCallback>
}
 80061da:	bf00      	nop
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000004 	.word	0x20000004
 80061e8:	14f8b589 	.word	0x14f8b589

080061ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	4613      	mov	r3, r2
 80061fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061fc:	e025      	b.n	800624a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006204:	d021      	beq.n	800624a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006206:	f7fc fd87 	bl	8002d18 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d302      	bcc.n	800621c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d116      	bne.n	800624a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	f043 0220 	orr.w	r2, r3, #32
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e023      	b.n	8006292 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	0c1b      	lsrs	r3, r3, #16
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b01      	cmp	r3, #1
 8006252:	d10d      	bne.n	8006270 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	43da      	mvns	r2, r3
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4013      	ands	r3, r2
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	bf0c      	ite	eq
 8006266:	2301      	moveq	r3, #1
 8006268:	2300      	movne	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	461a      	mov	r2, r3
 800626e:	e00c      	b.n	800628a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	43da      	mvns	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4013      	ands	r3, r2
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	bf0c      	ite	eq
 8006282:	2301      	moveq	r3, #1
 8006284:	2300      	movne	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	461a      	mov	r2, r3
 800628a:	79fb      	ldrb	r3, [r7, #7]
 800628c:	429a      	cmp	r2, r3
 800628e:	d0b6      	beq.n	80061fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	607a      	str	r2, [r7, #4]
 80062a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062a8:	e051      	b.n	800634e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b8:	d123      	bne.n	8006302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2220      	movs	r2, #32
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	f043 0204 	orr.w	r2, r3, #4
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e046      	b.n	8006390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006308:	d021      	beq.n	800634e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630a:	f7fc fd05 	bl	8002d18 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	429a      	cmp	r2, r3
 8006318:	d302      	bcc.n	8006320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d116      	bne.n	800634e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f043 0220 	orr.w	r2, r3, #32
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e020      	b.n	8006390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	0c1b      	lsrs	r3, r3, #16
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b01      	cmp	r3, #1
 8006356:	d10c      	bne.n	8006372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	43da      	mvns	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4013      	ands	r3, r2
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	bf14      	ite	ne
 800636a:	2301      	movne	r3, #1
 800636c:	2300      	moveq	r3, #0
 800636e:	b2db      	uxtb	r3, r3
 8006370:	e00b      	b.n	800638a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	43da      	mvns	r2, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	4013      	ands	r3, r2
 800637e:	b29b      	uxth	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	bf14      	ite	ne
 8006384:	2301      	movne	r3, #1
 8006386:	2300      	moveq	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d18d      	bne.n	80062aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063a4:	e02d      	b.n	8006402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 f900 	bl	80065ac <I2C_IsAcknowledgeFailed>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e02d      	b.n	8006412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063bc:	d021      	beq.n	8006402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063be:	f7fc fcab 	bl	8002d18 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d302      	bcc.n	80063d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d116      	bne.n	8006402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	f043 0220 	orr.w	r2, r3, #32
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e007      	b.n	8006412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640c:	2b80      	cmp	r3, #128	; 0x80
 800640e:	d1ca      	bne.n	80063a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b084      	sub	sp, #16
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006426:	e02d      	b.n	8006484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f8bf 	bl	80065ac <I2C_IsAcknowledgeFailed>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e02d      	b.n	8006494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800643e:	d021      	beq.n	8006484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006440:	f7fc fc6a 	bl	8002d18 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	429a      	cmp	r2, r3
 800644e:	d302      	bcc.n	8006456 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d116      	bne.n	8006484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	f043 0220 	orr.w	r2, r3, #32
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e007      	b.n	8006494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b04      	cmp	r3, #4
 8006490:	d1ca      	bne.n	8006428 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80064a8:	4b13      	ldr	r3, [pc, #76]	; (80064f8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	08db      	lsrs	r3, r3, #3
 80064ae:	4a13      	ldr	r2, [pc, #76]	; (80064fc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80064b0:	fba2 2303 	umull	r2, r3, r2, r3
 80064b4:	0a1a      	lsrs	r2, r3, #8
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d107      	bne.n	80064da <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	f043 0220 	orr.w	r2, r3, #32
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e008      	b.n	80064ec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064e8:	d0e9      	beq.n	80064be <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	20000004 	.word	0x20000004
 80064fc:	14f8b589 	.word	0x14f8b589

08006500 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800650c:	e042      	b.n	8006594 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f003 0310 	and.w	r3, r3, #16
 8006518:	2b10      	cmp	r3, #16
 800651a:	d119      	bne.n	8006550 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f06f 0210 	mvn.w	r2, #16
 8006524:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e029      	b.n	80065a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006550:	f7fc fbe2 	bl	8002d18 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	429a      	cmp	r2, r3
 800655e:	d302      	bcc.n	8006566 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d116      	bne.n	8006594 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2220      	movs	r2, #32
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	f043 0220 	orr.w	r2, r3, #32
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e007      	b.n	80065a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d1b5      	bne.n	800650e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c2:	d11b      	bne.n	80065fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	f043 0204 	orr.w	r2, r3, #4
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e000      	b.n	80065fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800661a:	d103      	bne.n	8006624 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006622:	e007      	b.n	8006634 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800662c:	d102      	bne.n	8006634 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2208      	movs	r2, #8
 8006632:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e0cc      	b.n	80067ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006654:	4b68      	ldr	r3, [pc, #416]	; (80067f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d90c      	bls.n	800667c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006662:	4b65      	ldr	r3, [pc, #404]	; (80067f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800666a:	4b63      	ldr	r3, [pc, #396]	; (80067f8 <HAL_RCC_ClockConfig+0x1b8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0307 	and.w	r3, r3, #7
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d001      	beq.n	800667c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e0b8      	b.n	80067ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d020      	beq.n	80066ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d005      	beq.n	80066a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006694:	4b59      	ldr	r3, [pc, #356]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	4a58      	ldr	r2, [pc, #352]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 800669a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800669e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066ac:	4b53      	ldr	r3, [pc, #332]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	4a52      	ldr	r2, [pc, #328]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 80066b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066b8:	4b50      	ldr	r3, [pc, #320]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	494d      	ldr	r1, [pc, #308]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d044      	beq.n	8006760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d107      	bne.n	80066ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066de:	4b47      	ldr	r3, [pc, #284]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d119      	bne.n	800671e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e07f      	b.n	80067ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d003      	beq.n	80066fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d107      	bne.n	800670e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066fe:	4b3f      	ldr	r3, [pc, #252]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e06f      	b.n	80067ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800670e:	4b3b      	ldr	r3, [pc, #236]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e067      	b.n	80067ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800671e:	4b37      	ldr	r3, [pc, #220]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f023 0203 	bic.w	r2, r3, #3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	4934      	ldr	r1, [pc, #208]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 800672c:	4313      	orrs	r3, r2
 800672e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006730:	f7fc faf2 	bl	8002d18 <HAL_GetTick>
 8006734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006736:	e00a      	b.n	800674e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006738:	f7fc faee 	bl	8002d18 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	f241 3288 	movw	r2, #5000	; 0x1388
 8006746:	4293      	cmp	r3, r2
 8006748:	d901      	bls.n	800674e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e04f      	b.n	80067ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800674e:	4b2b      	ldr	r3, [pc, #172]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 020c 	and.w	r2, r3, #12
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	429a      	cmp	r2, r3
 800675e:	d1eb      	bne.n	8006738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006760:	4b25      	ldr	r3, [pc, #148]	; (80067f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d20c      	bcs.n	8006788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800676e:	4b22      	ldr	r3, [pc, #136]	; (80067f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006776:	4b20      	ldr	r3, [pc, #128]	; (80067f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d001      	beq.n	8006788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e032      	b.n	80067ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d008      	beq.n	80067a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006794:	4b19      	ldr	r3, [pc, #100]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	4916      	ldr	r1, [pc, #88]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0308 	and.w	r3, r3, #8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067b2:	4b12      	ldr	r3, [pc, #72]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	490e      	ldr	r1, [pc, #56]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067c6:	f000 f889 	bl	80068dc <HAL_RCC_GetSysClockFreq>
 80067ca:	4602      	mov	r2, r0
 80067cc:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <HAL_RCC_ClockConfig+0x1bc>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	091b      	lsrs	r3, r3, #4
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	490a      	ldr	r1, [pc, #40]	; (8006800 <HAL_RCC_ClockConfig+0x1c0>)
 80067d8:	5ccb      	ldrb	r3, [r1, r3]
 80067da:	fa22 f303 	lsr.w	r3, r2, r3
 80067de:	4a09      	ldr	r2, [pc, #36]	; (8006804 <HAL_RCC_ClockConfig+0x1c4>)
 80067e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067e2:	4b09      	ldr	r3, [pc, #36]	; (8006808 <HAL_RCC_ClockConfig+0x1c8>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fc fa52 	bl	8002c90 <HAL_InitTick>

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	40023c00 	.word	0x40023c00
 80067fc:	40023800 	.word	0x40023800
 8006800:	0801b834 	.word	0x0801b834
 8006804:	20000004 	.word	0x20000004
 8006808:	20000008 	.word	0x20000008

0800680c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08c      	sub	sp, #48	; 0x30
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d129      	bne.n	8006872 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800681e:	2300      	movs	r3, #0
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	4b2b      	ldr	r3, [pc, #172]	; (80068d0 <HAL_RCC_MCOConfig+0xc4>)
 8006824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006826:	4a2a      	ldr	r2, [pc, #168]	; (80068d0 <HAL_RCC_MCOConfig+0xc4>)
 8006828:	f043 0301 	orr.w	r3, r3, #1
 800682c:	6313      	str	r3, [r2, #48]	; 0x30
 800682e:	4b28      	ldr	r3, [pc, #160]	; (80068d0 <HAL_RCC_MCOConfig+0xc4>)
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	61bb      	str	r3, [r7, #24]
 8006838:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800683a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800683e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006840:	2302      	movs	r3, #2
 8006842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006844:	2303      	movs	r3, #3
 8006846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006848:	2300      	movs	r3, #0
 800684a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800684c:	2300      	movs	r3, #0
 800684e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006850:	f107 031c 	add.w	r3, r7, #28
 8006854:	4619      	mov	r1, r3
 8006856:	481f      	ldr	r0, [pc, #124]	; (80068d4 <HAL_RCC_MCOConfig+0xc8>)
 8006858:	f7fd f9fa 	bl	8003c50 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800685c:	4b1c      	ldr	r3, [pc, #112]	; (80068d0 <HAL_RCC_MCOConfig+0xc4>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8006864:	68b9      	ldr	r1, [r7, #8]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	430b      	orrs	r3, r1
 800686a:	4919      	ldr	r1, [pc, #100]	; (80068d0 <HAL_RCC_MCOConfig+0xc4>)
 800686c:	4313      	orrs	r3, r2
 800686e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8006870:	e029      	b.n	80068c6 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8006872:	2300      	movs	r3, #0
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	4b16      	ldr	r3, [pc, #88]	; (80068d0 <HAL_RCC_MCOConfig+0xc4>)
 8006878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687a:	4a15      	ldr	r2, [pc, #84]	; (80068d0 <HAL_RCC_MCOConfig+0xc4>)
 800687c:	f043 0304 	orr.w	r3, r3, #4
 8006880:	6313      	str	r3, [r2, #48]	; 0x30
 8006882:	4b13      	ldr	r3, [pc, #76]	; (80068d0 <HAL_RCC_MCOConfig+0xc4>)
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800688e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006894:	2302      	movs	r3, #2
 8006896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006898:	2303      	movs	r3, #3
 800689a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800689c:	2300      	movs	r3, #0
 800689e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80068a0:	2300      	movs	r3, #0
 80068a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80068a4:	f107 031c 	add.w	r3, r7, #28
 80068a8:	4619      	mov	r1, r3
 80068aa:	480b      	ldr	r0, [pc, #44]	; (80068d8 <HAL_RCC_MCOConfig+0xcc>)
 80068ac:	f7fd f9d0 	bl	8003c50 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80068b0:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <HAL_RCC_MCOConfig+0xc4>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	00d9      	lsls	r1, r3, #3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	430b      	orrs	r3, r1
 80068c0:	4903      	ldr	r1, [pc, #12]	; (80068d0 <HAL_RCC_MCOConfig+0xc4>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	608b      	str	r3, [r1, #8]
}
 80068c6:	bf00      	nop
 80068c8:	3730      	adds	r7, #48	; 0x30
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	40023800 	.word	0x40023800
 80068d4:	40020000 	.word	0x40020000
 80068d8:	40020800 	.word	0x40020800

080068dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068dc:	b5b0      	push	{r4, r5, r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068e2:	2100      	movs	r1, #0
 80068e4:	6079      	str	r1, [r7, #4]
 80068e6:	2100      	movs	r1, #0
 80068e8:	60f9      	str	r1, [r7, #12]
 80068ea:	2100      	movs	r1, #0
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80068ee:	2100      	movs	r1, #0
 80068f0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068f2:	4952      	ldr	r1, [pc, #328]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x160>)
 80068f4:	6889      	ldr	r1, [r1, #8]
 80068f6:	f001 010c 	and.w	r1, r1, #12
 80068fa:	2908      	cmp	r1, #8
 80068fc:	d00d      	beq.n	800691a <HAL_RCC_GetSysClockFreq+0x3e>
 80068fe:	2908      	cmp	r1, #8
 8006900:	f200 8094 	bhi.w	8006a2c <HAL_RCC_GetSysClockFreq+0x150>
 8006904:	2900      	cmp	r1, #0
 8006906:	d002      	beq.n	800690e <HAL_RCC_GetSysClockFreq+0x32>
 8006908:	2904      	cmp	r1, #4
 800690a:	d003      	beq.n	8006914 <HAL_RCC_GetSysClockFreq+0x38>
 800690c:	e08e      	b.n	8006a2c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800690e:	4b4c      	ldr	r3, [pc, #304]	; (8006a40 <HAL_RCC_GetSysClockFreq+0x164>)
 8006910:	60bb      	str	r3, [r7, #8]
       break;
 8006912:	e08e      	b.n	8006a32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006914:	4b4b      	ldr	r3, [pc, #300]	; (8006a44 <HAL_RCC_GetSysClockFreq+0x168>)
 8006916:	60bb      	str	r3, [r7, #8]
      break;
 8006918:	e08b      	b.n	8006a32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800691a:	4948      	ldr	r1, [pc, #288]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x160>)
 800691c:	6849      	ldr	r1, [r1, #4]
 800691e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006922:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006924:	4945      	ldr	r1, [pc, #276]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x160>)
 8006926:	6849      	ldr	r1, [r1, #4]
 8006928:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800692c:	2900      	cmp	r1, #0
 800692e:	d024      	beq.n	800697a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006930:	4942      	ldr	r1, [pc, #264]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x160>)
 8006932:	6849      	ldr	r1, [r1, #4]
 8006934:	0989      	lsrs	r1, r1, #6
 8006936:	4608      	mov	r0, r1
 8006938:	f04f 0100 	mov.w	r1, #0
 800693c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006940:	f04f 0500 	mov.w	r5, #0
 8006944:	ea00 0204 	and.w	r2, r0, r4
 8006948:	ea01 0305 	and.w	r3, r1, r5
 800694c:	493d      	ldr	r1, [pc, #244]	; (8006a44 <HAL_RCC_GetSysClockFreq+0x168>)
 800694e:	fb01 f003 	mul.w	r0, r1, r3
 8006952:	2100      	movs	r1, #0
 8006954:	fb01 f102 	mul.w	r1, r1, r2
 8006958:	1844      	adds	r4, r0, r1
 800695a:	493a      	ldr	r1, [pc, #232]	; (8006a44 <HAL_RCC_GetSysClockFreq+0x168>)
 800695c:	fba2 0101 	umull	r0, r1, r2, r1
 8006960:	1863      	adds	r3, r4, r1
 8006962:	4619      	mov	r1, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	461a      	mov	r2, r3
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	f7f9 fcb0 	bl	80002d0 <__aeabi_uldivmod>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4613      	mov	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	e04a      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800697a:	4b30      	ldr	r3, [pc, #192]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x160>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	099b      	lsrs	r3, r3, #6
 8006980:	461a      	mov	r2, r3
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	f240 10ff 	movw	r0, #511	; 0x1ff
 800698a:	f04f 0100 	mov.w	r1, #0
 800698e:	ea02 0400 	and.w	r4, r2, r0
 8006992:	ea03 0501 	and.w	r5, r3, r1
 8006996:	4620      	mov	r0, r4
 8006998:	4629      	mov	r1, r5
 800699a:	f04f 0200 	mov.w	r2, #0
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	014b      	lsls	r3, r1, #5
 80069a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069a8:	0142      	lsls	r2, r0, #5
 80069aa:	4610      	mov	r0, r2
 80069ac:	4619      	mov	r1, r3
 80069ae:	1b00      	subs	r0, r0, r4
 80069b0:	eb61 0105 	sbc.w	r1, r1, r5
 80069b4:	f04f 0200 	mov.w	r2, #0
 80069b8:	f04f 0300 	mov.w	r3, #0
 80069bc:	018b      	lsls	r3, r1, #6
 80069be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069c2:	0182      	lsls	r2, r0, #6
 80069c4:	1a12      	subs	r2, r2, r0
 80069c6:	eb63 0301 	sbc.w	r3, r3, r1
 80069ca:	f04f 0000 	mov.w	r0, #0
 80069ce:	f04f 0100 	mov.w	r1, #0
 80069d2:	00d9      	lsls	r1, r3, #3
 80069d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069d8:	00d0      	lsls	r0, r2, #3
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	1912      	adds	r2, r2, r4
 80069e0:	eb45 0303 	adc.w	r3, r5, r3
 80069e4:	f04f 0000 	mov.w	r0, #0
 80069e8:	f04f 0100 	mov.w	r1, #0
 80069ec:	0299      	lsls	r1, r3, #10
 80069ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80069f2:	0290      	lsls	r0, r2, #10
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4610      	mov	r0, r2
 80069fa:	4619      	mov	r1, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	461a      	mov	r2, r3
 8006a00:	f04f 0300 	mov.w	r3, #0
 8006a04:	f7f9 fc64 	bl	80002d0 <__aeabi_uldivmod>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a10:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x160>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	0c1b      	lsrs	r3, r3, #16
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a28:	60bb      	str	r3, [r7, #8]
      break;
 8006a2a:	e002      	b.n	8006a32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a2c:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <HAL_RCC_GetSysClockFreq+0x164>)
 8006a2e:	60bb      	str	r3, [r7, #8]
      break;
 8006a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a32:	68bb      	ldr	r3, [r7, #8]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	00f42400 	.word	0x00f42400
 8006a44:	017d7840 	.word	0x017d7840

08006a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a4c:	4b03      	ldr	r3, [pc, #12]	; (8006a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	20000004 	.word	0x20000004

08006a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a64:	f7ff fff0 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	0a9b      	lsrs	r3, r3, #10
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	4903      	ldr	r1, [pc, #12]	; (8006a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a76:	5ccb      	ldrb	r3, [r1, r3]
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40023800 	.word	0x40023800
 8006a84:	0801b844 	.word	0x0801b844

08006a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a8c:	f7ff ffdc 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8006a90:	4602      	mov	r2, r0
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	0b5b      	lsrs	r3, r3, #13
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	4903      	ldr	r1, [pc, #12]	; (8006aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a9e:	5ccb      	ldrb	r3, [r1, r3]
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	0801b844 	.word	0x0801b844

08006ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d010      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006ad4:	4b7a      	ldr	r3, [pc, #488]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ada:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	4977      	ldr	r1, [pc, #476]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8006af2:	2301      	movs	r3, #1
 8006af4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d010      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006b02:	4b6f      	ldr	r3, [pc, #444]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b08:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	496b      	ldr	r1, [pc, #428]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8006b20:	2301      	movs	r3, #1
 8006b22:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d022      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8006b30:	4b63      	ldr	r3, [pc, #396]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b3e:	4960      	ldr	r1, [pc, #384]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b5a:	d10c      	bne.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006b5c:	4b58      	ldr	r3, [pc, #352]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b62:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	4954      	ldr	r1, [pc, #336]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d022      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8006b82:	4b4f      	ldr	r3, [pc, #316]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b90:	494b      	ldr	r1, [pc, #300]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bac:	d10c      	bne.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006bae:	4b44      	ldr	r3, [pc, #272]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	021b      	lsls	r3, r3, #8
 8006bc0:	493f      	ldr	r1, [pc, #252]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 808a 	beq.w	8006cea <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	4b39      	ldr	r3, [pc, #228]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	4a38      	ldr	r2, [pc, #224]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be4:	6413      	str	r3, [r2, #64]	; 0x40
 8006be6:	4b36      	ldr	r3, [pc, #216]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006bf2:	4b34      	ldr	r3, [pc, #208]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a33      	ldr	r2, [pc, #204]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bfc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bfe:	f7fc f88b 	bl	8002d18 <HAL_GetTick>
 8006c02:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c04:	e008      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c06:	f7fc f887 	bl	8002d18 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d901      	bls.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e1d1      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c18:	4b2a      	ldr	r3, [pc, #168]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0f0      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c24:	4b26      	ldr	r3, [pc, #152]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c2c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d02f      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d028      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c42:	4b1f      	ldr	r3, [pc, #124]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c4a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c4c:	4b1e      	ldr	r3, [pc, #120]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c52:	4b1d      	ldr	r3, [pc, #116]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c58:	4a19      	ldr	r2, [pc, #100]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c5e:	4b18      	ldr	r3, [pc, #96]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d114      	bne.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c6a:	f7fc f855 	bl	8002d18 <HAL_GetTick>
 8006c6e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c70:	e00a      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c72:	f7fc f851 	bl	8002d18 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e199      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c88:	4b0d      	ldr	r3, [pc, #52]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0ee      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca0:	d114      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006ca2:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb6:	4902      	ldr	r1, [pc, #8]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	608b      	str	r3, [r1, #8]
 8006cbc:	e00c      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006cbe:	bf00      	nop
 8006cc0:	40023800 	.word	0x40023800
 8006cc4:	40007000 	.word	0x40007000
 8006cc8:	42470e40 	.word	0x42470e40
 8006ccc:	4b89      	ldr	r3, [pc, #548]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	4a88      	ldr	r2, [pc, #544]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006cd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006cd6:	6093      	str	r3, [r2, #8]
 8006cd8:	4b86      	ldr	r3, [pc, #536]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006cda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ce4:	4983      	ldr	r1, [pc, #524]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0304 	and.w	r3, r3, #4
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d004      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8006cfc:	4b7e      	ldr	r3, [pc, #504]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8006cfe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00a      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006d0c:	4b79      	ldr	r3, [pc, #484]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1a:	4976      	ldr	r1, [pc, #472]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d011      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d2e:	4b71      	ldr	r3, [pc, #452]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d34:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3c:	496d      	ldr	r1, [pc, #436]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d4c:	d101      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00a      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006d5e:	4b65      	ldr	r3, [pc, #404]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d64:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6c:	4961      	ldr	r1, [pc, #388]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d004      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b80      	cmp	r3, #128	; 0x80
 8006d80:	f040 80c6 	bne.w	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d84:	4b5d      	ldr	r3, [pc, #372]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d8a:	f7fb ffc5 	bl	8002d18 <HAL_GetTick>
 8006d8e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d90:	e008      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d92:	f7fb ffc1 	bl	8002d18 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d901      	bls.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e10b      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006da4:	4b53      	ldr	r3, [pc, #332]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1f0      	bne.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8006db0:	4a53      	ldr	r2, [pc, #332]	; (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d023      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d019      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d004      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006df4:	d00e      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d019      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d115      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e12:	d110      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	019b      	lsls	r3, r3, #6
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	061b      	lsls	r3, r3, #24
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	071b      	lsls	r3, r3, #28
 8006e2e:	4931      	ldr	r1, [pc, #196]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d009      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d026      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d122      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e5e:	4b25      	ldr	r3, [pc, #148]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e64:	0e1b      	lsrs	r3, r3, #24
 8006e66:	f003 030f 	and.w	r3, r3, #15
 8006e6a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	019b      	lsls	r3, r3, #6
 8006e76:	431a      	orrs	r2, r3
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	061b      	lsls	r3, r3, #24
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	071b      	lsls	r3, r3, #28
 8006e84:	491b      	ldr	r1, [pc, #108]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8006e8c:	4b19      	ldr	r3, [pc, #100]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e92:	f023 021f 	bic.w	r2, r3, #31
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	4915      	ldr	r1, [pc, #84]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d010      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	019b      	lsls	r3, r3, #6
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	061b      	lsls	r3, r3, #24
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	071b      	lsls	r3, r3, #28
 8006eca:	490a      	ldr	r1, [pc, #40]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ed2:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ed8:	f7fb ff1e 	bl	8002d18 <HAL_GetTick>
 8006edc:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ede:	e011      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ee0:	f7fb ff1a 	bl	8002d18 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d90a      	bls.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e064      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006ef2:	bf00      	nop
 8006ef4:	40023800 	.word	0x40023800
 8006ef8:	424711e0 	.word	0x424711e0
 8006efc:	42470068 	.word	0x42470068
 8006f00:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f04:	4b2f      	ldr	r3, [pc, #188]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0e7      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00a      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f1c:	4b29      	ldr	r3, [pc, #164]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2a:	4926      	ldr	r1, [pc, #152]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006f3e:	4b21      	ldr	r3, [pc, #132]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f44:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	491d      	ldr	r1, [pc, #116]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00a      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006f60:	4b18      	ldr	r3, [pc, #96]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	4915      	ldr	r1, [pc, #84]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8006f82:	4b10      	ldr	r3, [pc, #64]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f88:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	490c      	ldr	r1, [pc, #48]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00a      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fa4:	4b07      	ldr	r3, [pc, #28]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006faa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb2:	4904      	ldr	r1, [pc, #16]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3720      	adds	r7, #32
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	40023800 	.word	0x40023800

08006fc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e270      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d075      	beq.n	80070d2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006fe6:	4ba3      	ldr	r3, [pc, #652]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 030c 	and.w	r3, r3, #12
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d00c      	beq.n	800700c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ff2:	4ba0      	ldr	r3, [pc, #640]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ffa:	2b08      	cmp	r3, #8
 8006ffc:	d112      	bne.n	8007024 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ffe:	4b9d      	ldr	r3, [pc, #628]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800700a:	d10b      	bne.n	8007024 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800700c:	4b99      	ldr	r3, [pc, #612]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d05b      	beq.n	80070d0 <HAL_RCC_OscConfig+0x108>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d157      	bne.n	80070d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e24b      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800702c:	d106      	bne.n	800703c <HAL_RCC_OscConfig+0x74>
 800702e:	4b91      	ldr	r3, [pc, #580]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a90      	ldr	r2, [pc, #576]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8007034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	e01d      	b.n	8007078 <HAL_RCC_OscConfig+0xb0>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007044:	d10c      	bne.n	8007060 <HAL_RCC_OscConfig+0x98>
 8007046:	4b8b      	ldr	r3, [pc, #556]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a8a      	ldr	r2, [pc, #552]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 800704c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	4b88      	ldr	r3, [pc, #544]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a87      	ldr	r2, [pc, #540]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8007058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	e00b      	b.n	8007078 <HAL_RCC_OscConfig+0xb0>
 8007060:	4b84      	ldr	r3, [pc, #528]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a83      	ldr	r2, [pc, #524]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8007066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	4b81      	ldr	r3, [pc, #516]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a80      	ldr	r2, [pc, #512]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8007072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d013      	beq.n	80070a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007080:	f7fb fe4a 	bl	8002d18 <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007088:	f7fb fe46 	bl	8002d18 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b64      	cmp	r3, #100	; 0x64
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e210      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800709a:	4b76      	ldr	r3, [pc, #472]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d0f0      	beq.n	8007088 <HAL_RCC_OscConfig+0xc0>
 80070a6:	e014      	b.n	80070d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a8:	f7fb fe36 	bl	8002d18 <HAL_GetTick>
 80070ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ae:	e008      	b.n	80070c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070b0:	f7fb fe32 	bl	8002d18 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b64      	cmp	r3, #100	; 0x64
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e1fc      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070c2:	4b6c      	ldr	r3, [pc, #432]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1f0      	bne.n	80070b0 <HAL_RCC_OscConfig+0xe8>
 80070ce:	e000      	b.n	80070d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d063      	beq.n	80071a6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80070de:	4b65      	ldr	r3, [pc, #404]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 030c 	and.w	r3, r3, #12
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00b      	beq.n	8007102 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070ea:	4b62      	ldr	r3, [pc, #392]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d11c      	bne.n	8007130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070f6:	4b5f      	ldr	r3, [pc, #380]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d116      	bne.n	8007130 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007102:	4b5c      	ldr	r3, [pc, #368]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <HAL_RCC_OscConfig+0x152>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d001      	beq.n	800711a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e1d0      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800711a:	4b56      	ldr	r3, [pc, #344]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	4952      	ldr	r1, [pc, #328]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 800712a:	4313      	orrs	r3, r2
 800712c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800712e:	e03a      	b.n	80071a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d020      	beq.n	800717a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007138:	4b4f      	ldr	r3, [pc, #316]	; (8007278 <HAL_RCC_OscConfig+0x2b0>)
 800713a:	2201      	movs	r2, #1
 800713c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713e:	f7fb fdeb 	bl	8002d18 <HAL_GetTick>
 8007142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007144:	e008      	b.n	8007158 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007146:	f7fb fde7 	bl	8002d18 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b02      	cmp	r3, #2
 8007152:	d901      	bls.n	8007158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e1b1      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007158:	4b46      	ldr	r3, [pc, #280]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d0f0      	beq.n	8007146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007164:	4b43      	ldr	r3, [pc, #268]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	4940      	ldr	r1, [pc, #256]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8007174:	4313      	orrs	r3, r2
 8007176:	600b      	str	r3, [r1, #0]
 8007178:	e015      	b.n	80071a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800717a:	4b3f      	ldr	r3, [pc, #252]	; (8007278 <HAL_RCC_OscConfig+0x2b0>)
 800717c:	2200      	movs	r2, #0
 800717e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007180:	f7fb fdca 	bl	8002d18 <HAL_GetTick>
 8007184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007188:	f7fb fdc6 	bl	8002d18 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e190      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800719a:	4b36      	ldr	r3, [pc, #216]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f0      	bne.n	8007188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0308 	and.w	r3, r3, #8
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d030      	beq.n	8007214 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d016      	beq.n	80071e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071ba:	4b30      	ldr	r3, [pc, #192]	; (800727c <HAL_RCC_OscConfig+0x2b4>)
 80071bc:	2201      	movs	r2, #1
 80071be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c0:	f7fb fdaa 	bl	8002d18 <HAL_GetTick>
 80071c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071c8:	f7fb fda6 	bl	8002d18 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e170      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071da:	4b26      	ldr	r3, [pc, #152]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 80071dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0f0      	beq.n	80071c8 <HAL_RCC_OscConfig+0x200>
 80071e6:	e015      	b.n	8007214 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071e8:	4b24      	ldr	r3, [pc, #144]	; (800727c <HAL_RCC_OscConfig+0x2b4>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ee:	f7fb fd93 	bl	8002d18 <HAL_GetTick>
 80071f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071f4:	e008      	b.n	8007208 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071f6:	f7fb fd8f 	bl	8002d18 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e159      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007208:	4b1a      	ldr	r3, [pc, #104]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 800720a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1f0      	bne.n	80071f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 80a0 	beq.w	8007362 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007222:	2300      	movs	r3, #0
 8007224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007226:	4b13      	ldr	r3, [pc, #76]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10f      	bne.n	8007252 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007232:	2300      	movs	r3, #0
 8007234:	60bb      	str	r3, [r7, #8]
 8007236:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	4a0e      	ldr	r2, [pc, #56]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 800723c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007240:	6413      	str	r3, [r2, #64]	; 0x40
 8007242:	4b0c      	ldr	r3, [pc, #48]	; (8007274 <HAL_RCC_OscConfig+0x2ac>)
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800724a:	60bb      	str	r3, [r7, #8]
 800724c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800724e:	2301      	movs	r3, #1
 8007250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007252:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <HAL_RCC_OscConfig+0x2b8>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725a:	2b00      	cmp	r3, #0
 800725c:	d121      	bne.n	80072a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800725e:	4b08      	ldr	r3, [pc, #32]	; (8007280 <HAL_RCC_OscConfig+0x2b8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a07      	ldr	r2, [pc, #28]	; (8007280 <HAL_RCC_OscConfig+0x2b8>)
 8007264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800726a:	f7fb fd55 	bl	8002d18 <HAL_GetTick>
 800726e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007270:	e011      	b.n	8007296 <HAL_RCC_OscConfig+0x2ce>
 8007272:	bf00      	nop
 8007274:	40023800 	.word	0x40023800
 8007278:	42470000 	.word	0x42470000
 800727c:	42470e80 	.word	0x42470e80
 8007280:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007284:	f7fb fd48 	bl	8002d18 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b02      	cmp	r3, #2
 8007290:	d901      	bls.n	8007296 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e112      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007296:	4b8b      	ldr	r3, [pc, #556]	; (80074c4 <HAL_RCC_OscConfig+0x4fc>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d0f0      	beq.n	8007284 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d106      	bne.n	80072b8 <HAL_RCC_OscConfig+0x2f0>
 80072aa:	4b87      	ldr	r3, [pc, #540]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 80072ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ae:	4a86      	ldr	r2, [pc, #536]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 80072b0:	f043 0301 	orr.w	r3, r3, #1
 80072b4:	6713      	str	r3, [r2, #112]	; 0x70
 80072b6:	e01c      	b.n	80072f2 <HAL_RCC_OscConfig+0x32a>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	2b05      	cmp	r3, #5
 80072be:	d10c      	bne.n	80072da <HAL_RCC_OscConfig+0x312>
 80072c0:	4b81      	ldr	r3, [pc, #516]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 80072c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c4:	4a80      	ldr	r2, [pc, #512]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 80072c6:	f043 0304 	orr.w	r3, r3, #4
 80072ca:	6713      	str	r3, [r2, #112]	; 0x70
 80072cc:	4b7e      	ldr	r3, [pc, #504]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 80072ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d0:	4a7d      	ldr	r2, [pc, #500]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 80072d2:	f043 0301 	orr.w	r3, r3, #1
 80072d6:	6713      	str	r3, [r2, #112]	; 0x70
 80072d8:	e00b      	b.n	80072f2 <HAL_RCC_OscConfig+0x32a>
 80072da:	4b7b      	ldr	r3, [pc, #492]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 80072dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072de:	4a7a      	ldr	r2, [pc, #488]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 80072e0:	f023 0301 	bic.w	r3, r3, #1
 80072e4:	6713      	str	r3, [r2, #112]	; 0x70
 80072e6:	4b78      	ldr	r3, [pc, #480]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 80072e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ea:	4a77      	ldr	r2, [pc, #476]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 80072ec:	f023 0304 	bic.w	r3, r3, #4
 80072f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d015      	beq.n	8007326 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072fa:	f7fb fd0d 	bl	8002d18 <HAL_GetTick>
 80072fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007300:	e00a      	b.n	8007318 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007302:	f7fb fd09 	bl	8002d18 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007310:	4293      	cmp	r3, r2
 8007312:	d901      	bls.n	8007318 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e0d1      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007318:	4b6b      	ldr	r3, [pc, #428]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 800731a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d0ee      	beq.n	8007302 <HAL_RCC_OscConfig+0x33a>
 8007324:	e014      	b.n	8007350 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007326:	f7fb fcf7 	bl	8002d18 <HAL_GetTick>
 800732a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800732c:	e00a      	b.n	8007344 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800732e:	f7fb fcf3 	bl	8002d18 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	f241 3288 	movw	r2, #5000	; 0x1388
 800733c:	4293      	cmp	r3, r2
 800733e:	d901      	bls.n	8007344 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e0bb      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007344:	4b60      	ldr	r3, [pc, #384]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 8007346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1ee      	bne.n	800732e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d105      	bne.n	8007362 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007356:	4b5c      	ldr	r3, [pc, #368]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	4a5b      	ldr	r2, [pc, #364]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 800735c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007360:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 80a7 	beq.w	80074ba <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800736c:	4b56      	ldr	r3, [pc, #344]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f003 030c 	and.w	r3, r3, #12
 8007374:	2b08      	cmp	r3, #8
 8007376:	d060      	beq.n	800743a <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	2b02      	cmp	r3, #2
 800737e:	d145      	bne.n	800740c <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007380:	4b52      	ldr	r3, [pc, #328]	; (80074cc <HAL_RCC_OscConfig+0x504>)
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007386:	f7fb fcc7 	bl	8002d18 <HAL_GetTick>
 800738a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800738c:	e008      	b.n	80073a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800738e:	f7fb fcc3 	bl	8002d18 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	2b02      	cmp	r3, #2
 800739a:	d901      	bls.n	80073a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e08d      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073a0:	4b49      	ldr	r3, [pc, #292]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1f0      	bne.n	800738e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	69da      	ldr	r2, [r3, #28]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	019b      	lsls	r3, r3, #6
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c2:	085b      	lsrs	r3, r3, #1
 80073c4:	3b01      	subs	r3, #1
 80073c6:	041b      	lsls	r3, r3, #16
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ce:	061b      	lsls	r3, r3, #24
 80073d0:	431a      	orrs	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d6:	071b      	lsls	r3, r3, #28
 80073d8:	493b      	ldr	r1, [pc, #236]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073de:	4b3b      	ldr	r3, [pc, #236]	; (80074cc <HAL_RCC_OscConfig+0x504>)
 80073e0:	2201      	movs	r2, #1
 80073e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e4:	f7fb fc98 	bl	8002d18 <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073ea:	e008      	b.n	80073fe <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073ec:	f7fb fc94 	bl	8002d18 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e05e      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073fe:	4b32      	ldr	r3, [pc, #200]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0f0      	beq.n	80073ec <HAL_RCC_OscConfig+0x424>
 800740a:	e056      	b.n	80074ba <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800740c:	4b2f      	ldr	r3, [pc, #188]	; (80074cc <HAL_RCC_OscConfig+0x504>)
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007412:	f7fb fc81 	bl	8002d18 <HAL_GetTick>
 8007416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007418:	e008      	b.n	800742c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800741a:	f7fb fc7d 	bl	8002d18 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e047      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800742c:	4b26      	ldr	r3, [pc, #152]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1f0      	bne.n	800741a <HAL_RCC_OscConfig+0x452>
 8007438:	e03f      	b.n	80074ba <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d101      	bne.n	8007446 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e03a      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007446:	4b20      	ldr	r3, [pc, #128]	; (80074c8 <HAL_RCC_OscConfig+0x500>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d030      	beq.n	80074b6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800745e:	429a      	cmp	r2, r3
 8007460:	d129      	bne.n	80074b6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800746c:	429a      	cmp	r2, r3
 800746e:	d122      	bne.n	80074b6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007476:	4013      	ands	r3, r2
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800747c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800747e:	4293      	cmp	r3, r2
 8007480:	d119      	bne.n	80074b6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748c:	085b      	lsrs	r3, r3, #1
 800748e:	3b01      	subs	r3, #1
 8007490:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007492:	429a      	cmp	r2, r3
 8007494:	d10f      	bne.n	80074b6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d107      	bne.n	80074b6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b0:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d001      	beq.n	80074ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e000      	b.n	80074bc <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	40007000 	.word	0x40007000
 80074c8:	40023800 	.word	0x40023800
 80074cc:	42470060 	.word	0x42470060

080074d0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e034      	b.n	8007550 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d106      	bne.n	8007500 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f7f9 faee 	bl	8000adc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	3308      	adds	r3, #8
 8007508:	4619      	mov	r1, r3
 800750a:	4610      	mov	r0, r2
 800750c:	f001 f8be 	bl	800868c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	461a      	mov	r2, r3
 800751a:	68b9      	ldr	r1, [r7, #8]
 800751c:	f001 f926 	bl	800876c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6858      	ldr	r0, [r3, #4]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752c:	6879      	ldr	r1, [r7, #4]
 800752e:	f001 f971 	bl	8008814 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	6892      	ldr	r2, [r2, #8]
 800753a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	6892      	ldr	r2, [r2, #8]
 8007546:	f041 0101 	orr.w	r1, r1, #1
 800754a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e041      	b.n	80075ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d106      	bne.n	8007584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fa fcea 	bl	8001f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3304      	adds	r3, #4
 8007594:	4619      	mov	r1, r3
 8007596:	4610      	mov	r0, r2
 8007598:	f000 f8d8 	bl	800774c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b01      	cmp	r3, #1
 800760a:	d001      	beq.n	8007610 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e046      	b.n	800769e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a23      	ldr	r2, [pc, #140]	; (80076ac <HAL_TIM_Base_Start+0xb4>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d022      	beq.n	8007668 <HAL_TIM_Base_Start+0x70>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762a:	d01d      	beq.n	8007668 <HAL_TIM_Base_Start+0x70>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a1f      	ldr	r2, [pc, #124]	; (80076b0 <HAL_TIM_Base_Start+0xb8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d018      	beq.n	8007668 <HAL_TIM_Base_Start+0x70>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a1e      	ldr	r2, [pc, #120]	; (80076b4 <HAL_TIM_Base_Start+0xbc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d013      	beq.n	8007668 <HAL_TIM_Base_Start+0x70>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a1c      	ldr	r2, [pc, #112]	; (80076b8 <HAL_TIM_Base_Start+0xc0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00e      	beq.n	8007668 <HAL_TIM_Base_Start+0x70>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a1b      	ldr	r2, [pc, #108]	; (80076bc <HAL_TIM_Base_Start+0xc4>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d009      	beq.n	8007668 <HAL_TIM_Base_Start+0x70>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a19      	ldr	r2, [pc, #100]	; (80076c0 <HAL_TIM_Base_Start+0xc8>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d004      	beq.n	8007668 <HAL_TIM_Base_Start+0x70>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a18      	ldr	r2, [pc, #96]	; (80076c4 <HAL_TIM_Base_Start+0xcc>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d111      	bne.n	800768c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 0307 	and.w	r3, r3, #7
 8007672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b06      	cmp	r3, #6
 8007678:	d010      	beq.n	800769c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f042 0201 	orr.w	r2, r2, #1
 8007688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768a:	e007      	b.n	800769c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f042 0201 	orr.w	r2, r2, #1
 800769a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	40010000 	.word	0x40010000
 80076b0:	40000400 	.word	0x40000400
 80076b4:	40000800 	.word	0x40000800
 80076b8:	40000c00 	.word	0x40000c00
 80076bc:	40010400 	.word	0x40010400
 80076c0:	40014000 	.word	0x40014000
 80076c4:	40001800 	.word	0x40001800

080076c8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d101      	bne.n	80076e0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80076dc:	2302      	movs	r3, #2
 80076de:	e031      	b.n	8007744 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f8ca 	bl	800788c <TIM_SlaveTimer_SetConfig>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e018      	b.n	8007744 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007720:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007730:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a40      	ldr	r2, [pc, #256]	; (8007860 <TIM_Base_SetConfig+0x114>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d013      	beq.n	800778c <TIM_Base_SetConfig+0x40>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776a:	d00f      	beq.n	800778c <TIM_Base_SetConfig+0x40>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a3d      	ldr	r2, [pc, #244]	; (8007864 <TIM_Base_SetConfig+0x118>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d00b      	beq.n	800778c <TIM_Base_SetConfig+0x40>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a3c      	ldr	r2, [pc, #240]	; (8007868 <TIM_Base_SetConfig+0x11c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d007      	beq.n	800778c <TIM_Base_SetConfig+0x40>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a3b      	ldr	r2, [pc, #236]	; (800786c <TIM_Base_SetConfig+0x120>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d003      	beq.n	800778c <TIM_Base_SetConfig+0x40>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a3a      	ldr	r2, [pc, #232]	; (8007870 <TIM_Base_SetConfig+0x124>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d108      	bne.n	800779e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a2f      	ldr	r2, [pc, #188]	; (8007860 <TIM_Base_SetConfig+0x114>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d02b      	beq.n	80077fe <TIM_Base_SetConfig+0xb2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ac:	d027      	beq.n	80077fe <TIM_Base_SetConfig+0xb2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a2c      	ldr	r2, [pc, #176]	; (8007864 <TIM_Base_SetConfig+0x118>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d023      	beq.n	80077fe <TIM_Base_SetConfig+0xb2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a2b      	ldr	r2, [pc, #172]	; (8007868 <TIM_Base_SetConfig+0x11c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d01f      	beq.n	80077fe <TIM_Base_SetConfig+0xb2>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a2a      	ldr	r2, [pc, #168]	; (800786c <TIM_Base_SetConfig+0x120>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d01b      	beq.n	80077fe <TIM_Base_SetConfig+0xb2>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a29      	ldr	r2, [pc, #164]	; (8007870 <TIM_Base_SetConfig+0x124>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d017      	beq.n	80077fe <TIM_Base_SetConfig+0xb2>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a28      	ldr	r2, [pc, #160]	; (8007874 <TIM_Base_SetConfig+0x128>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d013      	beq.n	80077fe <TIM_Base_SetConfig+0xb2>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a27      	ldr	r2, [pc, #156]	; (8007878 <TIM_Base_SetConfig+0x12c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00f      	beq.n	80077fe <TIM_Base_SetConfig+0xb2>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a26      	ldr	r2, [pc, #152]	; (800787c <TIM_Base_SetConfig+0x130>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00b      	beq.n	80077fe <TIM_Base_SetConfig+0xb2>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a25      	ldr	r2, [pc, #148]	; (8007880 <TIM_Base_SetConfig+0x134>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d007      	beq.n	80077fe <TIM_Base_SetConfig+0xb2>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a24      	ldr	r2, [pc, #144]	; (8007884 <TIM_Base_SetConfig+0x138>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_Base_SetConfig+0xb2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a23      	ldr	r2, [pc, #140]	; (8007888 <TIM_Base_SetConfig+0x13c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d108      	bne.n	8007810 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a0a      	ldr	r2, [pc, #40]	; (8007860 <TIM_Base_SetConfig+0x114>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d003      	beq.n	8007844 <TIM_Base_SetConfig+0xf8>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a0c      	ldr	r2, [pc, #48]	; (8007870 <TIM_Base_SetConfig+0x124>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d103      	bne.n	800784c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	691a      	ldr	r2, [r3, #16]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	615a      	str	r2, [r3, #20]
}
 8007852:	bf00      	nop
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	40010000 	.word	0x40010000
 8007864:	40000400 	.word	0x40000400
 8007868:	40000800 	.word	0x40000800
 800786c:	40000c00 	.word	0x40000c00
 8007870:	40010400 	.word	0x40010400
 8007874:	40014000 	.word	0x40014000
 8007878:	40014400 	.word	0x40014400
 800787c:	40014800 	.word	0x40014800
 8007880:	40001800 	.word	0x40001800
 8007884:	40001c00 	.word	0x40001c00
 8007888:	40002000 	.word	0x40002000

0800788c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f023 0307 	bic.w	r3, r3, #7
 80078b6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	2b70      	cmp	r3, #112	; 0x70
 80078d0:	d01a      	beq.n	8007908 <TIM_SlaveTimer_SetConfig+0x7c>
 80078d2:	2b70      	cmp	r3, #112	; 0x70
 80078d4:	d860      	bhi.n	8007998 <TIM_SlaveTimer_SetConfig+0x10c>
 80078d6:	2b60      	cmp	r3, #96	; 0x60
 80078d8:	d054      	beq.n	8007984 <TIM_SlaveTimer_SetConfig+0xf8>
 80078da:	2b60      	cmp	r3, #96	; 0x60
 80078dc:	d85c      	bhi.n	8007998 <TIM_SlaveTimer_SetConfig+0x10c>
 80078de:	2b50      	cmp	r3, #80	; 0x50
 80078e0:	d046      	beq.n	8007970 <TIM_SlaveTimer_SetConfig+0xe4>
 80078e2:	2b50      	cmp	r3, #80	; 0x50
 80078e4:	d858      	bhi.n	8007998 <TIM_SlaveTimer_SetConfig+0x10c>
 80078e6:	2b40      	cmp	r3, #64	; 0x40
 80078e8:	d019      	beq.n	800791e <TIM_SlaveTimer_SetConfig+0x92>
 80078ea:	2b40      	cmp	r3, #64	; 0x40
 80078ec:	d854      	bhi.n	8007998 <TIM_SlaveTimer_SetConfig+0x10c>
 80078ee:	2b30      	cmp	r3, #48	; 0x30
 80078f0:	d054      	beq.n	800799c <TIM_SlaveTimer_SetConfig+0x110>
 80078f2:	2b30      	cmp	r3, #48	; 0x30
 80078f4:	d850      	bhi.n	8007998 <TIM_SlaveTimer_SetConfig+0x10c>
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d050      	beq.n	800799c <TIM_SlaveTimer_SetConfig+0x110>
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d84c      	bhi.n	8007998 <TIM_SlaveTimer_SetConfig+0x10c>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d04c      	beq.n	800799c <TIM_SlaveTimer_SetConfig+0x110>
 8007902:	2b10      	cmp	r3, #16
 8007904:	d04a      	beq.n	800799c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8007906:	e047      	b.n	8007998 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6818      	ldr	r0, [r3, #0]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	68d9      	ldr	r1, [r3, #12]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f000 f8a5 	bl	8007a66 <TIM_ETR_SetConfig>
      break;
 800791c:	e03f      	b.n	800799e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b05      	cmp	r3, #5
 8007924:	d101      	bne.n	800792a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e03a      	b.n	80079a0 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6a1a      	ldr	r2, [r3, #32]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 0201 	bic.w	r2, r2, #1
 8007940:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007950:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4313      	orrs	r3, r2
 800795c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	621a      	str	r2, [r3, #32]
      break;
 800796e:	e016      	b.n	800799e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	6899      	ldr	r1, [r3, #8]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	461a      	mov	r2, r3
 800797e:	f000 f813 	bl	80079a8 <TIM_TI1_ConfigInputStage>
      break;
 8007982:	e00c      	b.n	800799e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6818      	ldr	r0, [r3, #0]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	6899      	ldr	r1, [r3, #8]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	461a      	mov	r2, r3
 8007992:	f000 f838 	bl	8007a06 <TIM_TI2_ConfigInputStage>
      break;
 8007996:	e002      	b.n	800799e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8007998:	bf00      	nop
 800799a:	e000      	b.n	800799e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800799c:	bf00      	nop
  }
  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	f023 0201 	bic.w	r2, r3, #1
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	4313      	orrs	r3, r2
 80079dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	f023 030a 	bic.w	r3, r3, #10
 80079e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	621a      	str	r2, [r3, #32]
}
 80079fa:	bf00      	nop
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b087      	sub	sp, #28
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	60f8      	str	r0, [r7, #12]
 8007a0e:	60b9      	str	r1, [r7, #8]
 8007a10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	f023 0210 	bic.w	r2, r3, #16
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	031b      	lsls	r3, r3, #12
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	621a      	str	r2, [r3, #32]
}
 8007a5a:	bf00      	nop
 8007a5c:	371c      	adds	r7, #28
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b087      	sub	sp, #28
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	607a      	str	r2, [r7, #4]
 8007a72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	021a      	lsls	r2, r3, #8
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	609a      	str	r2, [r3, #8]
}
 8007a9a:	bf00      	nop
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
	...

08007aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d101      	bne.n	8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007abc:	2302      	movs	r3, #2
 8007abe:	e05a      	b.n	8007b76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a21      	ldr	r2, [pc, #132]	; (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d022      	beq.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b0c:	d01d      	beq.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a1d      	ldr	r2, [pc, #116]	; (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d018      	beq.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a1b      	ldr	r2, [pc, #108]	; (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d013      	beq.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a1a      	ldr	r2, [pc, #104]	; (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d00e      	beq.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a18      	ldr	r2, [pc, #96]	; (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d009      	beq.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a17      	ldr	r2, [pc, #92]	; (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d004      	beq.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a15      	ldr	r2, [pc, #84]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d10c      	bne.n	8007b64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	40010000 	.word	0x40010000
 8007b88:	40000400 	.word	0x40000400
 8007b8c:	40000800 	.word	0x40000800
 8007b90:	40000c00 	.word	0x40000c00
 8007b94:	40010400 	.word	0x40010400
 8007b98:	40014000 	.word	0x40014000
 8007b9c:	40001800 	.word	0x40001800

08007ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e03f      	b.n	8007c32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d106      	bne.n	8007bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7fa ffc4 	bl	8002b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2224      	movs	r2, #36	; 0x24
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68da      	ldr	r2, [r3, #12]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fb79 	bl	80082dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	691a      	ldr	r2, [r3, #16]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	695a      	ldr	r2, [r3, #20]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68da      	ldr	r2, [r3, #12]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2220      	movs	r2, #32
 8007c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	4613      	mov	r3, r2
 8007c46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b20      	cmp	r3, #32
 8007c52:	d130      	bne.n	8007cb6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <HAL_UART_Transmit_IT+0x26>
 8007c5a:	88fb      	ldrh	r3, [r7, #6]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e029      	b.n	8007cb8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d101      	bne.n	8007c72 <HAL_UART_Transmit_IT+0x38>
 8007c6e:	2302      	movs	r3, #2
 8007c70:	e022      	b.n	8007cb8 <HAL_UART_Transmit_IT+0x7e>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	88fa      	ldrh	r2, [r7, #6]
 8007c84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	88fa      	ldrh	r2, [r7, #6]
 8007c8a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2221      	movs	r2, #33	; 0x21
 8007c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cb0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e000      	b.n	8007cb8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007cb6:	2302      	movs	r3, #2
  }
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08a      	sub	sp, #40	; 0x28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	f003 030f 	and.w	r3, r3, #15
 8007cf2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10d      	bne.n	8007d16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d008      	beq.n	8007d16 <HAL_UART_IRQHandler+0x52>
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	f003 0320 	and.w	r3, r3, #32
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa4d 	bl	80081ae <UART_Receive_IT>
      return;
 8007d14:	e17c      	b.n	8008010 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 80b1 	beq.w	8007e80 <HAL_UART_IRQHandler+0x1bc>
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d105      	bne.n	8007d34 <HAL_UART_IRQHandler+0x70>
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 80a6 	beq.w	8007e80 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <HAL_UART_IRQHandler+0x90>
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4c:	f043 0201 	orr.w	r2, r3, #1
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	f003 0304 	and.w	r3, r3, #4
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00a      	beq.n	8007d74 <HAL_UART_IRQHandler+0xb0>
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	f043 0202 	orr.w	r2, r3, #2
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <HAL_UART_IRQHandler+0xd0>
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d005      	beq.n	8007d94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8c:	f043 0204 	orr.w	r2, r3, #4
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	f003 0308 	and.w	r3, r3, #8
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00f      	beq.n	8007dbe <HAL_UART_IRQHandler+0xfa>
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	f003 0320 	and.w	r3, r3, #32
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d104      	bne.n	8007db2 <HAL_UART_IRQHandler+0xee>
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	f043 0208 	orr.w	r2, r3, #8
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 811f 	beq.w	8008006 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d007      	beq.n	8007de2 <HAL_UART_IRQHandler+0x11e>
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	f003 0320 	and.w	r3, r3, #32
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f9e6 	bl	80081ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dec:	2b40      	cmp	r3, #64	; 0x40
 8007dee:	bf0c      	ite	eq
 8007df0:	2301      	moveq	r3, #1
 8007df2:	2300      	movne	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfc:	f003 0308 	and.w	r3, r3, #8
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d102      	bne.n	8007e0a <HAL_UART_IRQHandler+0x146>
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d031      	beq.n	8007e6e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f926 	bl	800805c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1a:	2b40      	cmp	r3, #64	; 0x40
 8007e1c:	d123      	bne.n	8007e66 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	695a      	ldr	r2, [r3, #20]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e2c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d013      	beq.n	8007e5e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	4a77      	ldr	r2, [pc, #476]	; (8008018 <HAL_UART_IRQHandler+0x354>)
 8007e3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fb fdf3 	bl	8003a2e <HAL_DMA_Abort_IT>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d016      	beq.n	8007e7c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e5c:	e00e      	b.n	8007e7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f8e6 	bl	8008030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e64:	e00a      	b.n	8007e7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f8e2 	bl	8008030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e6c:	e006      	b.n	8007e7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f8de 	bl	8008030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007e7a:	e0c4      	b.n	8008006 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e7c:	bf00      	nop
    return;
 8007e7e:	e0c2      	b.n	8008006 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	f040 80a2 	bne.w	8007fce <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	f003 0310 	and.w	r3, r3, #16
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 809c 	beq.w	8007fce <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	f003 0310 	and.w	r3, r3, #16
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 8096 	beq.w	8007fce <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]
 8007eb6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec2:	2b40      	cmp	r3, #64	; 0x40
 8007ec4:	d14f      	bne.n	8007f66 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007ed0:	8a3b      	ldrh	r3, [r7, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 8099 	beq.w	800800a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007edc:	8a3a      	ldrh	r2, [r7, #16]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	f080 8093 	bcs.w	800800a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	8a3a      	ldrh	r2, [r7, #16]
 8007ee8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ef4:	d02b      	beq.n	8007f4e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68da      	ldr	r2, [r3, #12]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f04:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	695a      	ldr	r2, [r3, #20]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 0201 	bic.w	r2, r2, #1
 8007f14:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	695a      	ldr	r2, [r3, #20]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f24:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 0210 	bic.w	r2, r2, #16
 8007f42:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fb fd00 	bl	800394e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f870 	bl	8008044 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007f64:	e051      	b.n	800800a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d047      	beq.n	800800e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007f7e:	8a7b      	ldrh	r3, [r7, #18]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d044      	beq.n	800800e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f92:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	695a      	ldr	r2, [r3, #20]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f022 0201 	bic.w	r2, r2, #1
 8007fa2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f022 0210 	bic.w	r2, r2, #16
 8007fc0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fc2:	8a7b      	ldrh	r3, [r7, #18]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f83c 	bl	8008044 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007fcc:	e01f      	b.n	800800e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d008      	beq.n	8007fea <HAL_UART_IRQHandler+0x326>
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f87b 	bl	80080de <UART_Transmit_IT>
    return;
 8007fe8:	e012      	b.n	8008010 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00d      	beq.n	8008010 <HAL_UART_IRQHandler+0x34c>
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d008      	beq.n	8008010 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f8bd 	bl	800817e <UART_EndTransmit_IT>
    return;
 8008004:	e004      	b.n	8008010 <HAL_UART_IRQHandler+0x34c>
    return;
 8008006:	bf00      	nop
 8008008:	e002      	b.n	8008010 <HAL_UART_IRQHandler+0x34c>
      return;
 800800a:	bf00      	nop
 800800c:	e000      	b.n	8008010 <HAL_UART_IRQHandler+0x34c>
      return;
 800800e:	bf00      	nop
  }
}
 8008010:	3728      	adds	r7, #40	; 0x28
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	080080b7 	.word	0x080080b7

0800801c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68da      	ldr	r2, [r3, #12]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008072:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	695a      	ldr	r2, [r3, #20]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f022 0201 	bic.w	r2, r2, #1
 8008082:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008088:	2b01      	cmp	r3, #1
 800808a:	d107      	bne.n	800809c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 0210 	bic.w	r2, r2, #16
 800809a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2220      	movs	r2, #32
 80080a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80080aa:	bf00      	nop
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f7ff ffad 	bl	8008030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080d6:	bf00      	nop
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080de:	b480      	push	{r7}
 80080e0:	b085      	sub	sp, #20
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b21      	cmp	r3, #33	; 0x21
 80080f0:	d13e      	bne.n	8008170 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080fa:	d114      	bne.n	8008126 <UART_Transmit_IT+0x48>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d110      	bne.n	8008126 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a1b      	ldr	r3, [r3, #32]
 8008108:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008118:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	1c9a      	adds	r2, r3, #2
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	621a      	str	r2, [r3, #32]
 8008124:	e008      	b.n	8008138 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	1c59      	adds	r1, r3, #1
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6211      	str	r1, [r2, #32]
 8008130:	781a      	ldrb	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800813c:	b29b      	uxth	r3, r3
 800813e:	3b01      	subs	r3, #1
 8008140:	b29b      	uxth	r3, r3
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	4619      	mov	r1, r3
 8008146:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10f      	bne.n	800816c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68da      	ldr	r2, [r3, #12]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800815a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800816a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	e000      	b.n	8008172 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008170:	2302      	movs	r3, #2
  }
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b082      	sub	sp, #8
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68da      	ldr	r2, [r3, #12]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008194:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2220      	movs	r2, #32
 800819a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7fa fa40 	bl	8002624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b22      	cmp	r3, #34	; 0x22
 80081c0:	f040 8087 	bne.w	80082d2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081cc:	d117      	bne.n	80081fe <UART_Receive_IT+0x50>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d113      	bne.n	80081fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081de:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	1c9a      	adds	r2, r3, #2
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	629a      	str	r2, [r3, #40]	; 0x28
 80081fc:	e026      	b.n	800824c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008202:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008204:	2300      	movs	r3, #0
 8008206:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008210:	d007      	beq.n	8008222 <UART_Receive_IT+0x74>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10a      	bne.n	8008230 <UART_Receive_IT+0x82>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d106      	bne.n	8008230 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	b2da      	uxtb	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	e008      	b.n	8008242 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823c:	b2da      	uxtb	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008250:	b29b      	uxth	r3, r3
 8008252:	3b01      	subs	r3, #1
 8008254:	b29b      	uxth	r3, r3
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	4619      	mov	r1, r3
 800825a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800825c:	2b00      	cmp	r3, #0
 800825e:	d136      	bne.n	80082ce <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 0220 	bic.w	r2, r2, #32
 800826e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800827e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	695a      	ldr	r2, [r3, #20]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f022 0201 	bic.w	r2, r2, #1
 800828e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2220      	movs	r2, #32
 8008294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829c:	2b01      	cmp	r3, #1
 800829e:	d10e      	bne.n	80082be <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68da      	ldr	r2, [r3, #12]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0210 	bic.w	r2, r2, #16
 80082ae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff fec4 	bl	8008044 <HAL_UARTEx_RxEventCallback>
 80082bc:	e002      	b.n	80082c4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7ff feac 	bl	800801c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	e002      	b.n	80082d4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	e000      	b.n	80082d4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80082d2:	2302      	movs	r3, #2
  }
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e0:	b09f      	sub	sp, #124	; 0x7c
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f2:	68d9      	ldr	r1, [r3, #12]
 80082f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	ea40 0301 	orr.w	r3, r0, r1
 80082fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008300:	689a      	ldr	r2, [r3, #8]
 8008302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	431a      	orrs	r2, r3
 8008308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	431a      	orrs	r2, r3
 800830e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	4313      	orrs	r3, r2
 8008314:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008320:	f021 010c 	bic.w	r1, r1, #12
 8008324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800832a:	430b      	orrs	r3, r1
 800832c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800832e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800833a:	6999      	ldr	r1, [r3, #24]
 800833c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	ea40 0301 	orr.w	r3, r0, r1
 8008344:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8008346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	4b6a      	ldr	r3, [pc, #424]	; (80084f4 <UART_SetConfig+0x218>)
 800834c:	429a      	cmp	r2, r3
 800834e:	d00e      	beq.n	800836e <UART_SetConfig+0x92>
 8008350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	4b68      	ldr	r3, [pc, #416]	; (80084f8 <UART_SetConfig+0x21c>)
 8008356:	429a      	cmp	r2, r3
 8008358:	d009      	beq.n	800836e <UART_SetConfig+0x92>
 800835a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	4b67      	ldr	r3, [pc, #412]	; (80084fc <UART_SetConfig+0x220>)
 8008360:	429a      	cmp	r2, r3
 8008362:	d004      	beq.n	800836e <UART_SetConfig+0x92>
 8008364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	4b65      	ldr	r3, [pc, #404]	; (8008500 <UART_SetConfig+0x224>)
 800836a:	429a      	cmp	r2, r3
 800836c:	d103      	bne.n	8008376 <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800836e:	f7fe fb8b 	bl	8006a88 <HAL_RCC_GetPCLK2Freq>
 8008372:	6778      	str	r0, [r7, #116]	; 0x74
 8008374:	e002      	b.n	800837c <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008376:	f7fe fb73 	bl	8006a60 <HAL_RCC_GetPCLK1Freq>
 800837a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800837c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008384:	f040 80c0 	bne.w	8008508 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800838a:	461c      	mov	r4, r3
 800838c:	f04f 0500 	mov.w	r5, #0
 8008390:	4622      	mov	r2, r4
 8008392:	462b      	mov	r3, r5
 8008394:	1891      	adds	r1, r2, r2
 8008396:	6439      	str	r1, [r7, #64]	; 0x40
 8008398:	415b      	adcs	r3, r3
 800839a:	647b      	str	r3, [r7, #68]	; 0x44
 800839c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083a0:	1912      	adds	r2, r2, r4
 80083a2:	eb45 0303 	adc.w	r3, r5, r3
 80083a6:	f04f 0000 	mov.w	r0, #0
 80083aa:	f04f 0100 	mov.w	r1, #0
 80083ae:	00d9      	lsls	r1, r3, #3
 80083b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083b4:	00d0      	lsls	r0, r2, #3
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	1911      	adds	r1, r2, r4
 80083bc:	6639      	str	r1, [r7, #96]	; 0x60
 80083be:	416b      	adcs	r3, r5
 80083c0:	667b      	str	r3, [r7, #100]	; 0x64
 80083c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	461a      	mov	r2, r3
 80083c8:	f04f 0300 	mov.w	r3, #0
 80083cc:	1891      	adds	r1, r2, r2
 80083ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80083d0:	415b      	adcs	r3, r3
 80083d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80083dc:	f7f7 ff78 	bl	80002d0 <__aeabi_uldivmod>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	4b47      	ldr	r3, [pc, #284]	; (8008504 <UART_SetConfig+0x228>)
 80083e6:	fba3 2302 	umull	r2, r3, r3, r2
 80083ea:	095b      	lsrs	r3, r3, #5
 80083ec:	011e      	lsls	r6, r3, #4
 80083ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083f0:	461c      	mov	r4, r3
 80083f2:	f04f 0500 	mov.w	r5, #0
 80083f6:	4622      	mov	r2, r4
 80083f8:	462b      	mov	r3, r5
 80083fa:	1891      	adds	r1, r2, r2
 80083fc:	6339      	str	r1, [r7, #48]	; 0x30
 80083fe:	415b      	adcs	r3, r3
 8008400:	637b      	str	r3, [r7, #52]	; 0x34
 8008402:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008406:	1912      	adds	r2, r2, r4
 8008408:	eb45 0303 	adc.w	r3, r5, r3
 800840c:	f04f 0000 	mov.w	r0, #0
 8008410:	f04f 0100 	mov.w	r1, #0
 8008414:	00d9      	lsls	r1, r3, #3
 8008416:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800841a:	00d0      	lsls	r0, r2, #3
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	1911      	adds	r1, r2, r4
 8008422:	65b9      	str	r1, [r7, #88]	; 0x58
 8008424:	416b      	adcs	r3, r5
 8008426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	461a      	mov	r2, r3
 800842e:	f04f 0300 	mov.w	r3, #0
 8008432:	1891      	adds	r1, r2, r2
 8008434:	62b9      	str	r1, [r7, #40]	; 0x28
 8008436:	415b      	adcs	r3, r3
 8008438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800843a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800843e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008442:	f7f7 ff45 	bl	80002d0 <__aeabi_uldivmod>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	4b2e      	ldr	r3, [pc, #184]	; (8008504 <UART_SetConfig+0x228>)
 800844c:	fba3 1302 	umull	r1, r3, r3, r2
 8008450:	095b      	lsrs	r3, r3, #5
 8008452:	2164      	movs	r1, #100	; 0x64
 8008454:	fb01 f303 	mul.w	r3, r1, r3
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	00db      	lsls	r3, r3, #3
 800845c:	3332      	adds	r3, #50	; 0x32
 800845e:	4a29      	ldr	r2, [pc, #164]	; (8008504 <UART_SetConfig+0x228>)
 8008460:	fba2 2303 	umull	r2, r3, r2, r3
 8008464:	095b      	lsrs	r3, r3, #5
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800846c:	441e      	add	r6, r3
 800846e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008470:	4618      	mov	r0, r3
 8008472:	f04f 0100 	mov.w	r1, #0
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	1894      	adds	r4, r2, r2
 800847c:	623c      	str	r4, [r7, #32]
 800847e:	415b      	adcs	r3, r3
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
 8008482:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008486:	1812      	adds	r2, r2, r0
 8008488:	eb41 0303 	adc.w	r3, r1, r3
 800848c:	f04f 0400 	mov.w	r4, #0
 8008490:	f04f 0500 	mov.w	r5, #0
 8008494:	00dd      	lsls	r5, r3, #3
 8008496:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800849a:	00d4      	lsls	r4, r2, #3
 800849c:	4622      	mov	r2, r4
 800849e:	462b      	mov	r3, r5
 80084a0:	1814      	adds	r4, r2, r0
 80084a2:	653c      	str	r4, [r7, #80]	; 0x50
 80084a4:	414b      	adcs	r3, r1
 80084a6:	657b      	str	r3, [r7, #84]	; 0x54
 80084a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	461a      	mov	r2, r3
 80084ae:	f04f 0300 	mov.w	r3, #0
 80084b2:	1891      	adds	r1, r2, r2
 80084b4:	61b9      	str	r1, [r7, #24]
 80084b6:	415b      	adcs	r3, r3
 80084b8:	61fb      	str	r3, [r7, #28]
 80084ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80084c2:	f7f7 ff05 	bl	80002d0 <__aeabi_uldivmod>
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	4b0e      	ldr	r3, [pc, #56]	; (8008504 <UART_SetConfig+0x228>)
 80084cc:	fba3 1302 	umull	r1, r3, r3, r2
 80084d0:	095b      	lsrs	r3, r3, #5
 80084d2:	2164      	movs	r1, #100	; 0x64
 80084d4:	fb01 f303 	mul.w	r3, r1, r3
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	3332      	adds	r3, #50	; 0x32
 80084de:	4a09      	ldr	r2, [pc, #36]	; (8008504 <UART_SetConfig+0x228>)
 80084e0:	fba2 2303 	umull	r2, r3, r2, r3
 80084e4:	095b      	lsrs	r3, r3, #5
 80084e6:	f003 0207 	and.w	r2, r3, #7
 80084ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4432      	add	r2, r6
 80084f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084f2:	e0c3      	b.n	800867c <UART_SetConfig+0x3a0>
 80084f4:	40011000 	.word	0x40011000
 80084f8:	40011400 	.word	0x40011400
 80084fc:	40011800 	.word	0x40011800
 8008500:	40011c00 	.word	0x40011c00
 8008504:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800850a:	461c      	mov	r4, r3
 800850c:	f04f 0500 	mov.w	r5, #0
 8008510:	4622      	mov	r2, r4
 8008512:	462b      	mov	r3, r5
 8008514:	1891      	adds	r1, r2, r2
 8008516:	6139      	str	r1, [r7, #16]
 8008518:	415b      	adcs	r3, r3
 800851a:	617b      	str	r3, [r7, #20]
 800851c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008520:	1912      	adds	r2, r2, r4
 8008522:	eb45 0303 	adc.w	r3, r5, r3
 8008526:	f04f 0000 	mov.w	r0, #0
 800852a:	f04f 0100 	mov.w	r1, #0
 800852e:	00d9      	lsls	r1, r3, #3
 8008530:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008534:	00d0      	lsls	r0, r2, #3
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	eb12 0804 	adds.w	r8, r2, r4
 800853e:	eb43 0905 	adc.w	r9, r3, r5
 8008542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	4618      	mov	r0, r3
 8008548:	f04f 0100 	mov.w	r1, #0
 800854c:	f04f 0200 	mov.w	r2, #0
 8008550:	f04f 0300 	mov.w	r3, #0
 8008554:	008b      	lsls	r3, r1, #2
 8008556:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800855a:	0082      	lsls	r2, r0, #2
 800855c:	4640      	mov	r0, r8
 800855e:	4649      	mov	r1, r9
 8008560:	f7f7 feb6 	bl	80002d0 <__aeabi_uldivmod>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	4b47      	ldr	r3, [pc, #284]	; (8008688 <UART_SetConfig+0x3ac>)
 800856a:	fba3 2302 	umull	r2, r3, r3, r2
 800856e:	095b      	lsrs	r3, r3, #5
 8008570:	011e      	lsls	r6, r3, #4
 8008572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008574:	4618      	mov	r0, r3
 8008576:	f04f 0100 	mov.w	r1, #0
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	1894      	adds	r4, r2, r2
 8008580:	60bc      	str	r4, [r7, #8]
 8008582:	415b      	adcs	r3, r3
 8008584:	60fb      	str	r3, [r7, #12]
 8008586:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800858a:	1812      	adds	r2, r2, r0
 800858c:	eb41 0303 	adc.w	r3, r1, r3
 8008590:	f04f 0400 	mov.w	r4, #0
 8008594:	f04f 0500 	mov.w	r5, #0
 8008598:	00dd      	lsls	r5, r3, #3
 800859a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800859e:	00d4      	lsls	r4, r2, #3
 80085a0:	4622      	mov	r2, r4
 80085a2:	462b      	mov	r3, r5
 80085a4:	1814      	adds	r4, r2, r0
 80085a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80085a8:	414b      	adcs	r3, r1
 80085aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f04f 0100 	mov.w	r1, #0
 80085b6:	f04f 0200 	mov.w	r2, #0
 80085ba:	f04f 0300 	mov.w	r3, #0
 80085be:	008b      	lsls	r3, r1, #2
 80085c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80085c4:	0082      	lsls	r2, r0, #2
 80085c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80085ca:	f7f7 fe81 	bl	80002d0 <__aeabi_uldivmod>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4b2d      	ldr	r3, [pc, #180]	; (8008688 <UART_SetConfig+0x3ac>)
 80085d4:	fba3 1302 	umull	r1, r3, r3, r2
 80085d8:	095b      	lsrs	r3, r3, #5
 80085da:	2164      	movs	r1, #100	; 0x64
 80085dc:	fb01 f303 	mul.w	r3, r1, r3
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	011b      	lsls	r3, r3, #4
 80085e4:	3332      	adds	r3, #50	; 0x32
 80085e6:	4a28      	ldr	r2, [pc, #160]	; (8008688 <UART_SetConfig+0x3ac>)
 80085e8:	fba2 2303 	umull	r2, r3, r2, r3
 80085ec:	095b      	lsrs	r3, r3, #5
 80085ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085f2:	441e      	add	r6, r3
 80085f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085f6:	4618      	mov	r0, r3
 80085f8:	f04f 0100 	mov.w	r1, #0
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	1894      	adds	r4, r2, r2
 8008602:	603c      	str	r4, [r7, #0]
 8008604:	415b      	adcs	r3, r3
 8008606:	607b      	str	r3, [r7, #4]
 8008608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800860c:	1812      	adds	r2, r2, r0
 800860e:	eb41 0303 	adc.w	r3, r1, r3
 8008612:	f04f 0400 	mov.w	r4, #0
 8008616:	f04f 0500 	mov.w	r5, #0
 800861a:	00dd      	lsls	r5, r3, #3
 800861c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008620:	00d4      	lsls	r4, r2, #3
 8008622:	4622      	mov	r2, r4
 8008624:	462b      	mov	r3, r5
 8008626:	eb12 0a00 	adds.w	sl, r2, r0
 800862a:	eb43 0b01 	adc.w	fp, r3, r1
 800862e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	4618      	mov	r0, r3
 8008634:	f04f 0100 	mov.w	r1, #0
 8008638:	f04f 0200 	mov.w	r2, #0
 800863c:	f04f 0300 	mov.w	r3, #0
 8008640:	008b      	lsls	r3, r1, #2
 8008642:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008646:	0082      	lsls	r2, r0, #2
 8008648:	4650      	mov	r0, sl
 800864a:	4659      	mov	r1, fp
 800864c:	f7f7 fe40 	bl	80002d0 <__aeabi_uldivmod>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <UART_SetConfig+0x3ac>)
 8008656:	fba3 1302 	umull	r1, r3, r3, r2
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	2164      	movs	r1, #100	; 0x64
 800865e:	fb01 f303 	mul.w	r3, r1, r3
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	011b      	lsls	r3, r3, #4
 8008666:	3332      	adds	r3, #50	; 0x32
 8008668:	4a07      	ldr	r2, [pc, #28]	; (8008688 <UART_SetConfig+0x3ac>)
 800866a:	fba2 2303 	umull	r2, r3, r2, r3
 800866e:	095b      	lsrs	r3, r3, #5
 8008670:	f003 020f 	and.w	r2, r3, #15
 8008674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4432      	add	r2, r6
 800867a:	609a      	str	r2, [r3, #8]
}
 800867c:	bf00      	nop
 800867e:	377c      	adds	r7, #124	; 0x7c
 8008680:	46bd      	mov	sp, r7
 8008682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008686:	bf00      	nop
 8008688:	51eb851f 	.word	0x51eb851f

0800868c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008696:	2300      	movs	r3, #0
 8008698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a4:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4b2f      	ldr	r3, [pc, #188]	; (8008768 <FSMC_NORSRAM_Init+0xdc>)
 80086aa:	4013      	ands	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80086b6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80086bc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80086c2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80086c8:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 80086ce:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80086d4:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80086da:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80086e0:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80086e6:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 80086ec:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 80086f2:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 80086f8:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 80086fe:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	4313      	orrs	r3, r2
 8008704:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	2b08      	cmp	r3, #8
 800870c:	d103      	bne.n	8008716 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008714:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68f9      	ldr	r1, [r7, #12]
 800871e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800872a:	d10a      	bne.n	8008742 <FSMC_NORSRAM_Init+0xb6>
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d006      	beq.n	8008742 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873c:	431a      	orrs	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d006      	beq.n	8008758 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008752:	431a      	orrs	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	ffc00480 	.word	0xffc00480

0800876c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	1c5a      	adds	r2, r3, #1
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008786:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800878e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800879a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80087a2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80087aa:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80087b4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	3b02      	subs	r3, #2
 80087bc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80087be:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80087c4:	4313      	orrs	r3, r2
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6979      	ldr	r1, [r7, #20]
 80087d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087e4:	d10e      	bne.n	8008804 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80087ee:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	3b01      	subs	r3, #1
 80087f6:	051b      	lsls	r3, r3, #20
 80087f8:	697a      	ldr	r2, [r7, #20]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	371c      	adds	r7, #28
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
	...

08008814 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
 8008820:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800882c:	d122      	bne.n	8008874 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008836:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	4b15      	ldr	r3, [pc, #84]	; (8008890 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800883c:	4013      	ands	r3, r2
 800883e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800884a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008852:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800885a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008860:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	4313      	orrs	r3, r2
 8008866:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	6979      	ldr	r1, [r7, #20]
 800886e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008872:	e005      	b.n	8008880 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800887c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	371c      	adds	r7, #28
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	cff00000 	.word	0xcff00000

08008894 <abort>:
 8008894:	b508      	push	{r3, lr}
 8008896:	2006      	movs	r0, #6
 8008898:	f000 fc66 	bl	8009168 <raise>
 800889c:	2001      	movs	r0, #1
 800889e:	f7f9 fa45 	bl	8001d2c <_exit>
	...

080088a4 <__assert_func>:
 80088a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088a6:	4614      	mov	r4, r2
 80088a8:	461a      	mov	r2, r3
 80088aa:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <__assert_func+0x2c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4605      	mov	r5, r0
 80088b0:	68d8      	ldr	r0, [r3, #12]
 80088b2:	b14c      	cbz	r4, 80088c8 <__assert_func+0x24>
 80088b4:	4b07      	ldr	r3, [pc, #28]	; (80088d4 <__assert_func+0x30>)
 80088b6:	9100      	str	r1, [sp, #0]
 80088b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088bc:	4906      	ldr	r1, [pc, #24]	; (80088d8 <__assert_func+0x34>)
 80088be:	462b      	mov	r3, r5
 80088c0:	f000 f814 	bl	80088ec <fiprintf>
 80088c4:	f7ff ffe6 	bl	8008894 <abort>
 80088c8:	4b04      	ldr	r3, [pc, #16]	; (80088dc <__assert_func+0x38>)
 80088ca:	461c      	mov	r4, r3
 80088cc:	e7f3      	b.n	80088b6 <__assert_func+0x12>
 80088ce:	bf00      	nop
 80088d0:	20000010 	.word	0x20000010
 80088d4:	0801b854 	.word	0x0801b854
 80088d8:	0801b861 	.word	0x0801b861
 80088dc:	0801b88f 	.word	0x0801b88f

080088e0 <__errno>:
 80088e0:	4b01      	ldr	r3, [pc, #4]	; (80088e8 <__errno+0x8>)
 80088e2:	6818      	ldr	r0, [r3, #0]
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	20000010 	.word	0x20000010

080088ec <fiprintf>:
 80088ec:	b40e      	push	{r1, r2, r3}
 80088ee:	b503      	push	{r0, r1, lr}
 80088f0:	4601      	mov	r1, r0
 80088f2:	ab03      	add	r3, sp, #12
 80088f4:	4805      	ldr	r0, [pc, #20]	; (800890c <fiprintf+0x20>)
 80088f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088fa:	6800      	ldr	r0, [r0, #0]
 80088fc:	9301      	str	r3, [sp, #4]
 80088fe:	f000 f937 	bl	8008b70 <_vfiprintf_r>
 8008902:	b002      	add	sp, #8
 8008904:	f85d eb04 	ldr.w	lr, [sp], #4
 8008908:	b003      	add	sp, #12
 800890a:	4770      	bx	lr
 800890c:	20000010 	.word	0x20000010

08008910 <__libc_init_array>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	4d0d      	ldr	r5, [pc, #52]	; (8008948 <__libc_init_array+0x38>)
 8008914:	4c0d      	ldr	r4, [pc, #52]	; (800894c <__libc_init_array+0x3c>)
 8008916:	1b64      	subs	r4, r4, r5
 8008918:	10a4      	asrs	r4, r4, #2
 800891a:	2600      	movs	r6, #0
 800891c:	42a6      	cmp	r6, r4
 800891e:	d109      	bne.n	8008934 <__libc_init_array+0x24>
 8008920:	4d0b      	ldr	r5, [pc, #44]	; (8008950 <__libc_init_array+0x40>)
 8008922:	4c0c      	ldr	r4, [pc, #48]	; (8008954 <__libc_init_array+0x44>)
 8008924:	f001 faa6 	bl	8009e74 <_init>
 8008928:	1b64      	subs	r4, r4, r5
 800892a:	10a4      	asrs	r4, r4, #2
 800892c:	2600      	movs	r6, #0
 800892e:	42a6      	cmp	r6, r4
 8008930:	d105      	bne.n	800893e <__libc_init_array+0x2e>
 8008932:	bd70      	pop	{r4, r5, r6, pc}
 8008934:	f855 3b04 	ldr.w	r3, [r5], #4
 8008938:	4798      	blx	r3
 800893a:	3601      	adds	r6, #1
 800893c:	e7ee      	b.n	800891c <__libc_init_array+0xc>
 800893e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008942:	4798      	blx	r3
 8008944:	3601      	adds	r6, #1
 8008946:	e7f2      	b.n	800892e <__libc_init_array+0x1e>
 8008948:	0801baa8 	.word	0x0801baa8
 800894c:	0801baa8 	.word	0x0801baa8
 8008950:	0801baa8 	.word	0x0801baa8
 8008954:	0801baac 	.word	0x0801baac

08008958 <malloc>:
 8008958:	4b02      	ldr	r3, [pc, #8]	; (8008964 <malloc+0xc>)
 800895a:	4601      	mov	r1, r0
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	f000 b883 	b.w	8008a68 <_malloc_r>
 8008962:	bf00      	nop
 8008964:	20000010 	.word	0x20000010

08008968 <memcpy>:
 8008968:	440a      	add	r2, r1
 800896a:	4291      	cmp	r1, r2
 800896c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008970:	d100      	bne.n	8008974 <memcpy+0xc>
 8008972:	4770      	bx	lr
 8008974:	b510      	push	{r4, lr}
 8008976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800897a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800897e:	4291      	cmp	r1, r2
 8008980:	d1f9      	bne.n	8008976 <memcpy+0xe>
 8008982:	bd10      	pop	{r4, pc}

08008984 <memmove>:
 8008984:	4288      	cmp	r0, r1
 8008986:	b510      	push	{r4, lr}
 8008988:	eb01 0402 	add.w	r4, r1, r2
 800898c:	d902      	bls.n	8008994 <memmove+0x10>
 800898e:	4284      	cmp	r4, r0
 8008990:	4623      	mov	r3, r4
 8008992:	d807      	bhi.n	80089a4 <memmove+0x20>
 8008994:	1e43      	subs	r3, r0, #1
 8008996:	42a1      	cmp	r1, r4
 8008998:	d008      	beq.n	80089ac <memmove+0x28>
 800899a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800899e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089a2:	e7f8      	b.n	8008996 <memmove+0x12>
 80089a4:	4402      	add	r2, r0
 80089a6:	4601      	mov	r1, r0
 80089a8:	428a      	cmp	r2, r1
 80089aa:	d100      	bne.n	80089ae <memmove+0x2a>
 80089ac:	bd10      	pop	{r4, pc}
 80089ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089b6:	e7f7      	b.n	80089a8 <memmove+0x24>

080089b8 <memset>:
 80089b8:	4402      	add	r2, r0
 80089ba:	4603      	mov	r3, r0
 80089bc:	4293      	cmp	r3, r2
 80089be:	d100      	bne.n	80089c2 <memset+0xa>
 80089c0:	4770      	bx	lr
 80089c2:	f803 1b01 	strb.w	r1, [r3], #1
 80089c6:	e7f9      	b.n	80089bc <memset+0x4>

080089c8 <_free_r>:
 80089c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089ca:	2900      	cmp	r1, #0
 80089cc:	d048      	beq.n	8008a60 <_free_r+0x98>
 80089ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089d2:	9001      	str	r0, [sp, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f1a1 0404 	sub.w	r4, r1, #4
 80089da:	bfb8      	it	lt
 80089dc:	18e4      	addlt	r4, r4, r3
 80089de:	f001 f807 	bl	80099f0 <__malloc_lock>
 80089e2:	4a20      	ldr	r2, [pc, #128]	; (8008a64 <_free_r+0x9c>)
 80089e4:	9801      	ldr	r0, [sp, #4]
 80089e6:	6813      	ldr	r3, [r2, #0]
 80089e8:	4615      	mov	r5, r2
 80089ea:	b933      	cbnz	r3, 80089fa <_free_r+0x32>
 80089ec:	6063      	str	r3, [r4, #4]
 80089ee:	6014      	str	r4, [r2, #0]
 80089f0:	b003      	add	sp, #12
 80089f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089f6:	f001 b801 	b.w	80099fc <__malloc_unlock>
 80089fa:	42a3      	cmp	r3, r4
 80089fc:	d90b      	bls.n	8008a16 <_free_r+0x4e>
 80089fe:	6821      	ldr	r1, [r4, #0]
 8008a00:	1862      	adds	r2, r4, r1
 8008a02:	4293      	cmp	r3, r2
 8008a04:	bf04      	itt	eq
 8008a06:	681a      	ldreq	r2, [r3, #0]
 8008a08:	685b      	ldreq	r3, [r3, #4]
 8008a0a:	6063      	str	r3, [r4, #4]
 8008a0c:	bf04      	itt	eq
 8008a0e:	1852      	addeq	r2, r2, r1
 8008a10:	6022      	streq	r2, [r4, #0]
 8008a12:	602c      	str	r4, [r5, #0]
 8008a14:	e7ec      	b.n	80089f0 <_free_r+0x28>
 8008a16:	461a      	mov	r2, r3
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	b10b      	cbz	r3, 8008a20 <_free_r+0x58>
 8008a1c:	42a3      	cmp	r3, r4
 8008a1e:	d9fa      	bls.n	8008a16 <_free_r+0x4e>
 8008a20:	6811      	ldr	r1, [r2, #0]
 8008a22:	1855      	adds	r5, r2, r1
 8008a24:	42a5      	cmp	r5, r4
 8008a26:	d10b      	bne.n	8008a40 <_free_r+0x78>
 8008a28:	6824      	ldr	r4, [r4, #0]
 8008a2a:	4421      	add	r1, r4
 8008a2c:	1854      	adds	r4, r2, r1
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	6011      	str	r1, [r2, #0]
 8008a32:	d1dd      	bne.n	80089f0 <_free_r+0x28>
 8008a34:	681c      	ldr	r4, [r3, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	6053      	str	r3, [r2, #4]
 8008a3a:	4421      	add	r1, r4
 8008a3c:	6011      	str	r1, [r2, #0]
 8008a3e:	e7d7      	b.n	80089f0 <_free_r+0x28>
 8008a40:	d902      	bls.n	8008a48 <_free_r+0x80>
 8008a42:	230c      	movs	r3, #12
 8008a44:	6003      	str	r3, [r0, #0]
 8008a46:	e7d3      	b.n	80089f0 <_free_r+0x28>
 8008a48:	6825      	ldr	r5, [r4, #0]
 8008a4a:	1961      	adds	r1, r4, r5
 8008a4c:	428b      	cmp	r3, r1
 8008a4e:	bf04      	itt	eq
 8008a50:	6819      	ldreq	r1, [r3, #0]
 8008a52:	685b      	ldreq	r3, [r3, #4]
 8008a54:	6063      	str	r3, [r4, #4]
 8008a56:	bf04      	itt	eq
 8008a58:	1949      	addeq	r1, r1, r5
 8008a5a:	6021      	streq	r1, [r4, #0]
 8008a5c:	6054      	str	r4, [r2, #4]
 8008a5e:	e7c7      	b.n	80089f0 <_free_r+0x28>
 8008a60:	b003      	add	sp, #12
 8008a62:	bd30      	pop	{r4, r5, pc}
 8008a64:	20025c44 	.word	0x20025c44

08008a68 <_malloc_r>:
 8008a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6a:	1ccd      	adds	r5, r1, #3
 8008a6c:	f025 0503 	bic.w	r5, r5, #3
 8008a70:	3508      	adds	r5, #8
 8008a72:	2d0c      	cmp	r5, #12
 8008a74:	bf38      	it	cc
 8008a76:	250c      	movcc	r5, #12
 8008a78:	2d00      	cmp	r5, #0
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	db01      	blt.n	8008a82 <_malloc_r+0x1a>
 8008a7e:	42a9      	cmp	r1, r5
 8008a80:	d903      	bls.n	8008a8a <_malloc_r+0x22>
 8008a82:	230c      	movs	r3, #12
 8008a84:	6033      	str	r3, [r6, #0]
 8008a86:	2000      	movs	r0, #0
 8008a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a8a:	f000 ffb1 	bl	80099f0 <__malloc_lock>
 8008a8e:	4921      	ldr	r1, [pc, #132]	; (8008b14 <_malloc_r+0xac>)
 8008a90:	680a      	ldr	r2, [r1, #0]
 8008a92:	4614      	mov	r4, r2
 8008a94:	b99c      	cbnz	r4, 8008abe <_malloc_r+0x56>
 8008a96:	4f20      	ldr	r7, [pc, #128]	; (8008b18 <_malloc_r+0xb0>)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	b923      	cbnz	r3, 8008aa6 <_malloc_r+0x3e>
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	f000 fb2a 	bl	80090f8 <_sbrk_r>
 8008aa4:	6038      	str	r0, [r7, #0]
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f000 fb25 	bl	80090f8 <_sbrk_r>
 8008aae:	1c43      	adds	r3, r0, #1
 8008ab0:	d123      	bne.n	8008afa <_malloc_r+0x92>
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	6033      	str	r3, [r6, #0]
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f000 ffa0 	bl	80099fc <__malloc_unlock>
 8008abc:	e7e3      	b.n	8008a86 <_malloc_r+0x1e>
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	1b5b      	subs	r3, r3, r5
 8008ac2:	d417      	bmi.n	8008af4 <_malloc_r+0x8c>
 8008ac4:	2b0b      	cmp	r3, #11
 8008ac6:	d903      	bls.n	8008ad0 <_malloc_r+0x68>
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	441c      	add	r4, r3
 8008acc:	6025      	str	r5, [r4, #0]
 8008ace:	e004      	b.n	8008ada <_malloc_r+0x72>
 8008ad0:	6863      	ldr	r3, [r4, #4]
 8008ad2:	42a2      	cmp	r2, r4
 8008ad4:	bf0c      	ite	eq
 8008ad6:	600b      	streq	r3, [r1, #0]
 8008ad8:	6053      	strne	r3, [r2, #4]
 8008ada:	4630      	mov	r0, r6
 8008adc:	f000 ff8e 	bl	80099fc <__malloc_unlock>
 8008ae0:	f104 000b 	add.w	r0, r4, #11
 8008ae4:	1d23      	adds	r3, r4, #4
 8008ae6:	f020 0007 	bic.w	r0, r0, #7
 8008aea:	1ac2      	subs	r2, r0, r3
 8008aec:	d0cc      	beq.n	8008a88 <_malloc_r+0x20>
 8008aee:	1a1b      	subs	r3, r3, r0
 8008af0:	50a3      	str	r3, [r4, r2]
 8008af2:	e7c9      	b.n	8008a88 <_malloc_r+0x20>
 8008af4:	4622      	mov	r2, r4
 8008af6:	6864      	ldr	r4, [r4, #4]
 8008af8:	e7cc      	b.n	8008a94 <_malloc_r+0x2c>
 8008afa:	1cc4      	adds	r4, r0, #3
 8008afc:	f024 0403 	bic.w	r4, r4, #3
 8008b00:	42a0      	cmp	r0, r4
 8008b02:	d0e3      	beq.n	8008acc <_malloc_r+0x64>
 8008b04:	1a21      	subs	r1, r4, r0
 8008b06:	4630      	mov	r0, r6
 8008b08:	f000 faf6 	bl	80090f8 <_sbrk_r>
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d1dd      	bne.n	8008acc <_malloc_r+0x64>
 8008b10:	e7cf      	b.n	8008ab2 <_malloc_r+0x4a>
 8008b12:	bf00      	nop
 8008b14:	20025c44 	.word	0x20025c44
 8008b18:	20025c48 	.word	0x20025c48

08008b1c <__sfputc_r>:
 8008b1c:	6893      	ldr	r3, [r2, #8]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	b410      	push	{r4}
 8008b24:	6093      	str	r3, [r2, #8]
 8008b26:	da08      	bge.n	8008b3a <__sfputc_r+0x1e>
 8008b28:	6994      	ldr	r4, [r2, #24]
 8008b2a:	42a3      	cmp	r3, r4
 8008b2c:	db01      	blt.n	8008b32 <__sfputc_r+0x16>
 8008b2e:	290a      	cmp	r1, #10
 8008b30:	d103      	bne.n	8008b3a <__sfputc_r+0x1e>
 8008b32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b36:	f000 bc7d 	b.w	8009434 <__swbuf_r>
 8008b3a:	6813      	ldr	r3, [r2, #0]
 8008b3c:	1c58      	adds	r0, r3, #1
 8008b3e:	6010      	str	r0, [r2, #0]
 8008b40:	7019      	strb	r1, [r3, #0]
 8008b42:	4608      	mov	r0, r1
 8008b44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <__sfputs_r>:
 8008b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	460f      	mov	r7, r1
 8008b50:	4614      	mov	r4, r2
 8008b52:	18d5      	adds	r5, r2, r3
 8008b54:	42ac      	cmp	r4, r5
 8008b56:	d101      	bne.n	8008b5c <__sfputs_r+0x12>
 8008b58:	2000      	movs	r0, #0
 8008b5a:	e007      	b.n	8008b6c <__sfputs_r+0x22>
 8008b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b60:	463a      	mov	r2, r7
 8008b62:	4630      	mov	r0, r6
 8008b64:	f7ff ffda 	bl	8008b1c <__sfputc_r>
 8008b68:	1c43      	adds	r3, r0, #1
 8008b6a:	d1f3      	bne.n	8008b54 <__sfputs_r+0xa>
 8008b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b70 <_vfiprintf_r>:
 8008b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b74:	460d      	mov	r5, r1
 8008b76:	b09d      	sub	sp, #116	; 0x74
 8008b78:	4614      	mov	r4, r2
 8008b7a:	4698      	mov	r8, r3
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	b118      	cbz	r0, 8008b88 <_vfiprintf_r+0x18>
 8008b80:	6983      	ldr	r3, [r0, #24]
 8008b82:	b90b      	cbnz	r3, 8008b88 <_vfiprintf_r+0x18>
 8008b84:	f000 fe30 	bl	80097e8 <__sinit>
 8008b88:	4b89      	ldr	r3, [pc, #548]	; (8008db0 <_vfiprintf_r+0x240>)
 8008b8a:	429d      	cmp	r5, r3
 8008b8c:	d11b      	bne.n	8008bc6 <_vfiprintf_r+0x56>
 8008b8e:	6875      	ldr	r5, [r6, #4]
 8008b90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b92:	07d9      	lsls	r1, r3, #31
 8008b94:	d405      	bmi.n	8008ba2 <_vfiprintf_r+0x32>
 8008b96:	89ab      	ldrh	r3, [r5, #12]
 8008b98:	059a      	lsls	r2, r3, #22
 8008b9a:	d402      	bmi.n	8008ba2 <_vfiprintf_r+0x32>
 8008b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b9e:	f000 fec1 	bl	8009924 <__retarget_lock_acquire_recursive>
 8008ba2:	89ab      	ldrh	r3, [r5, #12]
 8008ba4:	071b      	lsls	r3, r3, #28
 8008ba6:	d501      	bpl.n	8008bac <_vfiprintf_r+0x3c>
 8008ba8:	692b      	ldr	r3, [r5, #16]
 8008baa:	b9eb      	cbnz	r3, 8008be8 <_vfiprintf_r+0x78>
 8008bac:	4629      	mov	r1, r5
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f000 fc92 	bl	80094d8 <__swsetup_r>
 8008bb4:	b1c0      	cbz	r0, 8008be8 <_vfiprintf_r+0x78>
 8008bb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bb8:	07dc      	lsls	r4, r3, #31
 8008bba:	d50e      	bpl.n	8008bda <_vfiprintf_r+0x6a>
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bc0:	b01d      	add	sp, #116	; 0x74
 8008bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc6:	4b7b      	ldr	r3, [pc, #492]	; (8008db4 <_vfiprintf_r+0x244>)
 8008bc8:	429d      	cmp	r5, r3
 8008bca:	d101      	bne.n	8008bd0 <_vfiprintf_r+0x60>
 8008bcc:	68b5      	ldr	r5, [r6, #8]
 8008bce:	e7df      	b.n	8008b90 <_vfiprintf_r+0x20>
 8008bd0:	4b79      	ldr	r3, [pc, #484]	; (8008db8 <_vfiprintf_r+0x248>)
 8008bd2:	429d      	cmp	r5, r3
 8008bd4:	bf08      	it	eq
 8008bd6:	68f5      	ldreq	r5, [r6, #12]
 8008bd8:	e7da      	b.n	8008b90 <_vfiprintf_r+0x20>
 8008bda:	89ab      	ldrh	r3, [r5, #12]
 8008bdc:	0598      	lsls	r0, r3, #22
 8008bde:	d4ed      	bmi.n	8008bbc <_vfiprintf_r+0x4c>
 8008be0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008be2:	f000 fea0 	bl	8009926 <__retarget_lock_release_recursive>
 8008be6:	e7e9      	b.n	8008bbc <_vfiprintf_r+0x4c>
 8008be8:	2300      	movs	r3, #0
 8008bea:	9309      	str	r3, [sp, #36]	; 0x24
 8008bec:	2320      	movs	r3, #32
 8008bee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bf6:	2330      	movs	r3, #48	; 0x30
 8008bf8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008dbc <_vfiprintf_r+0x24c>
 8008bfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c00:	f04f 0901 	mov.w	r9, #1
 8008c04:	4623      	mov	r3, r4
 8008c06:	469a      	mov	sl, r3
 8008c08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c0c:	b10a      	cbz	r2, 8008c12 <_vfiprintf_r+0xa2>
 8008c0e:	2a25      	cmp	r2, #37	; 0x25
 8008c10:	d1f9      	bne.n	8008c06 <_vfiprintf_r+0x96>
 8008c12:	ebba 0b04 	subs.w	fp, sl, r4
 8008c16:	d00b      	beq.n	8008c30 <_vfiprintf_r+0xc0>
 8008c18:	465b      	mov	r3, fp
 8008c1a:	4622      	mov	r2, r4
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f7ff ff93 	bl	8008b4a <__sfputs_r>
 8008c24:	3001      	adds	r0, #1
 8008c26:	f000 80aa 	beq.w	8008d7e <_vfiprintf_r+0x20e>
 8008c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c2c:	445a      	add	r2, fp
 8008c2e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c30:	f89a 3000 	ldrb.w	r3, [sl]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 80a2 	beq.w	8008d7e <_vfiprintf_r+0x20e>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c44:	f10a 0a01 	add.w	sl, sl, #1
 8008c48:	9304      	str	r3, [sp, #16]
 8008c4a:	9307      	str	r3, [sp, #28]
 8008c4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c50:	931a      	str	r3, [sp, #104]	; 0x68
 8008c52:	4654      	mov	r4, sl
 8008c54:	2205      	movs	r2, #5
 8008c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c5a:	4858      	ldr	r0, [pc, #352]	; (8008dbc <_vfiprintf_r+0x24c>)
 8008c5c:	f7f7 fae0 	bl	8000220 <memchr>
 8008c60:	9a04      	ldr	r2, [sp, #16]
 8008c62:	b9d8      	cbnz	r0, 8008c9c <_vfiprintf_r+0x12c>
 8008c64:	06d1      	lsls	r1, r2, #27
 8008c66:	bf44      	itt	mi
 8008c68:	2320      	movmi	r3, #32
 8008c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c6e:	0713      	lsls	r3, r2, #28
 8008c70:	bf44      	itt	mi
 8008c72:	232b      	movmi	r3, #43	; 0x2b
 8008c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c78:	f89a 3000 	ldrb.w	r3, [sl]
 8008c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c7e:	d015      	beq.n	8008cac <_vfiprintf_r+0x13c>
 8008c80:	9a07      	ldr	r2, [sp, #28]
 8008c82:	4654      	mov	r4, sl
 8008c84:	2000      	movs	r0, #0
 8008c86:	f04f 0c0a 	mov.w	ip, #10
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c90:	3b30      	subs	r3, #48	; 0x30
 8008c92:	2b09      	cmp	r3, #9
 8008c94:	d94e      	bls.n	8008d34 <_vfiprintf_r+0x1c4>
 8008c96:	b1b0      	cbz	r0, 8008cc6 <_vfiprintf_r+0x156>
 8008c98:	9207      	str	r2, [sp, #28]
 8008c9a:	e014      	b.n	8008cc6 <_vfiprintf_r+0x156>
 8008c9c:	eba0 0308 	sub.w	r3, r0, r8
 8008ca0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	9304      	str	r3, [sp, #16]
 8008ca8:	46a2      	mov	sl, r4
 8008caa:	e7d2      	b.n	8008c52 <_vfiprintf_r+0xe2>
 8008cac:	9b03      	ldr	r3, [sp, #12]
 8008cae:	1d19      	adds	r1, r3, #4
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	9103      	str	r1, [sp, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	bfbb      	ittet	lt
 8008cb8:	425b      	neglt	r3, r3
 8008cba:	f042 0202 	orrlt.w	r2, r2, #2
 8008cbe:	9307      	strge	r3, [sp, #28]
 8008cc0:	9307      	strlt	r3, [sp, #28]
 8008cc2:	bfb8      	it	lt
 8008cc4:	9204      	strlt	r2, [sp, #16]
 8008cc6:	7823      	ldrb	r3, [r4, #0]
 8008cc8:	2b2e      	cmp	r3, #46	; 0x2e
 8008cca:	d10c      	bne.n	8008ce6 <_vfiprintf_r+0x176>
 8008ccc:	7863      	ldrb	r3, [r4, #1]
 8008cce:	2b2a      	cmp	r3, #42	; 0x2a
 8008cd0:	d135      	bne.n	8008d3e <_vfiprintf_r+0x1ce>
 8008cd2:	9b03      	ldr	r3, [sp, #12]
 8008cd4:	1d1a      	adds	r2, r3, #4
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	9203      	str	r2, [sp, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	bfb8      	it	lt
 8008cde:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ce2:	3402      	adds	r4, #2
 8008ce4:	9305      	str	r3, [sp, #20]
 8008ce6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008dcc <_vfiprintf_r+0x25c>
 8008cea:	7821      	ldrb	r1, [r4, #0]
 8008cec:	2203      	movs	r2, #3
 8008cee:	4650      	mov	r0, sl
 8008cf0:	f7f7 fa96 	bl	8000220 <memchr>
 8008cf4:	b140      	cbz	r0, 8008d08 <_vfiprintf_r+0x198>
 8008cf6:	2340      	movs	r3, #64	; 0x40
 8008cf8:	eba0 000a 	sub.w	r0, r0, sl
 8008cfc:	fa03 f000 	lsl.w	r0, r3, r0
 8008d00:	9b04      	ldr	r3, [sp, #16]
 8008d02:	4303      	orrs	r3, r0
 8008d04:	3401      	adds	r4, #1
 8008d06:	9304      	str	r3, [sp, #16]
 8008d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d0c:	482c      	ldr	r0, [pc, #176]	; (8008dc0 <_vfiprintf_r+0x250>)
 8008d0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d12:	2206      	movs	r2, #6
 8008d14:	f7f7 fa84 	bl	8000220 <memchr>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d03f      	beq.n	8008d9c <_vfiprintf_r+0x22c>
 8008d1c:	4b29      	ldr	r3, [pc, #164]	; (8008dc4 <_vfiprintf_r+0x254>)
 8008d1e:	bb1b      	cbnz	r3, 8008d68 <_vfiprintf_r+0x1f8>
 8008d20:	9b03      	ldr	r3, [sp, #12]
 8008d22:	3307      	adds	r3, #7
 8008d24:	f023 0307 	bic.w	r3, r3, #7
 8008d28:	3308      	adds	r3, #8
 8008d2a:	9303      	str	r3, [sp, #12]
 8008d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d2e:	443b      	add	r3, r7
 8008d30:	9309      	str	r3, [sp, #36]	; 0x24
 8008d32:	e767      	b.n	8008c04 <_vfiprintf_r+0x94>
 8008d34:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d38:	460c      	mov	r4, r1
 8008d3a:	2001      	movs	r0, #1
 8008d3c:	e7a5      	b.n	8008c8a <_vfiprintf_r+0x11a>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	3401      	adds	r4, #1
 8008d42:	9305      	str	r3, [sp, #20]
 8008d44:	4619      	mov	r1, r3
 8008d46:	f04f 0c0a 	mov.w	ip, #10
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d50:	3a30      	subs	r2, #48	; 0x30
 8008d52:	2a09      	cmp	r2, #9
 8008d54:	d903      	bls.n	8008d5e <_vfiprintf_r+0x1ee>
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0c5      	beq.n	8008ce6 <_vfiprintf_r+0x176>
 8008d5a:	9105      	str	r1, [sp, #20]
 8008d5c:	e7c3      	b.n	8008ce6 <_vfiprintf_r+0x176>
 8008d5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d62:	4604      	mov	r4, r0
 8008d64:	2301      	movs	r3, #1
 8008d66:	e7f0      	b.n	8008d4a <_vfiprintf_r+0x1da>
 8008d68:	ab03      	add	r3, sp, #12
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	462a      	mov	r2, r5
 8008d6e:	4b16      	ldr	r3, [pc, #88]	; (8008dc8 <_vfiprintf_r+0x258>)
 8008d70:	a904      	add	r1, sp, #16
 8008d72:	4630      	mov	r0, r6
 8008d74:	f3af 8000 	nop.w
 8008d78:	4607      	mov	r7, r0
 8008d7a:	1c78      	adds	r0, r7, #1
 8008d7c:	d1d6      	bne.n	8008d2c <_vfiprintf_r+0x1bc>
 8008d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d80:	07d9      	lsls	r1, r3, #31
 8008d82:	d405      	bmi.n	8008d90 <_vfiprintf_r+0x220>
 8008d84:	89ab      	ldrh	r3, [r5, #12]
 8008d86:	059a      	lsls	r2, r3, #22
 8008d88:	d402      	bmi.n	8008d90 <_vfiprintf_r+0x220>
 8008d8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d8c:	f000 fdcb 	bl	8009926 <__retarget_lock_release_recursive>
 8008d90:	89ab      	ldrh	r3, [r5, #12]
 8008d92:	065b      	lsls	r3, r3, #25
 8008d94:	f53f af12 	bmi.w	8008bbc <_vfiprintf_r+0x4c>
 8008d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d9a:	e711      	b.n	8008bc0 <_vfiprintf_r+0x50>
 8008d9c:	ab03      	add	r3, sp, #12
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	462a      	mov	r2, r5
 8008da2:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <_vfiprintf_r+0x258>)
 8008da4:	a904      	add	r1, sp, #16
 8008da6:	4630      	mov	r0, r6
 8008da8:	f000 f880 	bl	8008eac <_printf_i>
 8008dac:	e7e4      	b.n	8008d78 <_vfiprintf_r+0x208>
 8008dae:	bf00      	nop
 8008db0:	0801ba60 	.word	0x0801ba60
 8008db4:	0801ba80 	.word	0x0801ba80
 8008db8:	0801ba40 	.word	0x0801ba40
 8008dbc:	0801b894 	.word	0x0801b894
 8008dc0:	0801b89e 	.word	0x0801b89e
 8008dc4:	00000000 	.word	0x00000000
 8008dc8:	08008b4b 	.word	0x08008b4b
 8008dcc:	0801b89a 	.word	0x0801b89a

08008dd0 <_printf_common>:
 8008dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	4616      	mov	r6, r2
 8008dd6:	4699      	mov	r9, r3
 8008dd8:	688a      	ldr	r2, [r1, #8]
 8008dda:	690b      	ldr	r3, [r1, #16]
 8008ddc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008de0:	4293      	cmp	r3, r2
 8008de2:	bfb8      	it	lt
 8008de4:	4613      	movlt	r3, r2
 8008de6:	6033      	str	r3, [r6, #0]
 8008de8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dec:	4607      	mov	r7, r0
 8008dee:	460c      	mov	r4, r1
 8008df0:	b10a      	cbz	r2, 8008df6 <_printf_common+0x26>
 8008df2:	3301      	adds	r3, #1
 8008df4:	6033      	str	r3, [r6, #0]
 8008df6:	6823      	ldr	r3, [r4, #0]
 8008df8:	0699      	lsls	r1, r3, #26
 8008dfa:	bf42      	ittt	mi
 8008dfc:	6833      	ldrmi	r3, [r6, #0]
 8008dfe:	3302      	addmi	r3, #2
 8008e00:	6033      	strmi	r3, [r6, #0]
 8008e02:	6825      	ldr	r5, [r4, #0]
 8008e04:	f015 0506 	ands.w	r5, r5, #6
 8008e08:	d106      	bne.n	8008e18 <_printf_common+0x48>
 8008e0a:	f104 0a19 	add.w	sl, r4, #25
 8008e0e:	68e3      	ldr	r3, [r4, #12]
 8008e10:	6832      	ldr	r2, [r6, #0]
 8008e12:	1a9b      	subs	r3, r3, r2
 8008e14:	42ab      	cmp	r3, r5
 8008e16:	dc26      	bgt.n	8008e66 <_printf_common+0x96>
 8008e18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e1c:	1e13      	subs	r3, r2, #0
 8008e1e:	6822      	ldr	r2, [r4, #0]
 8008e20:	bf18      	it	ne
 8008e22:	2301      	movne	r3, #1
 8008e24:	0692      	lsls	r2, r2, #26
 8008e26:	d42b      	bmi.n	8008e80 <_printf_common+0xb0>
 8008e28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e2c:	4649      	mov	r1, r9
 8008e2e:	4638      	mov	r0, r7
 8008e30:	47c0      	blx	r8
 8008e32:	3001      	adds	r0, #1
 8008e34:	d01e      	beq.n	8008e74 <_printf_common+0xa4>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	68e5      	ldr	r5, [r4, #12]
 8008e3a:	6832      	ldr	r2, [r6, #0]
 8008e3c:	f003 0306 	and.w	r3, r3, #6
 8008e40:	2b04      	cmp	r3, #4
 8008e42:	bf08      	it	eq
 8008e44:	1aad      	subeq	r5, r5, r2
 8008e46:	68a3      	ldr	r3, [r4, #8]
 8008e48:	6922      	ldr	r2, [r4, #16]
 8008e4a:	bf0c      	ite	eq
 8008e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e50:	2500      	movne	r5, #0
 8008e52:	4293      	cmp	r3, r2
 8008e54:	bfc4      	itt	gt
 8008e56:	1a9b      	subgt	r3, r3, r2
 8008e58:	18ed      	addgt	r5, r5, r3
 8008e5a:	2600      	movs	r6, #0
 8008e5c:	341a      	adds	r4, #26
 8008e5e:	42b5      	cmp	r5, r6
 8008e60:	d11a      	bne.n	8008e98 <_printf_common+0xc8>
 8008e62:	2000      	movs	r0, #0
 8008e64:	e008      	b.n	8008e78 <_printf_common+0xa8>
 8008e66:	2301      	movs	r3, #1
 8008e68:	4652      	mov	r2, sl
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	47c0      	blx	r8
 8008e70:	3001      	adds	r0, #1
 8008e72:	d103      	bne.n	8008e7c <_printf_common+0xac>
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e7c:	3501      	adds	r5, #1
 8008e7e:	e7c6      	b.n	8008e0e <_printf_common+0x3e>
 8008e80:	18e1      	adds	r1, r4, r3
 8008e82:	1c5a      	adds	r2, r3, #1
 8008e84:	2030      	movs	r0, #48	; 0x30
 8008e86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e8a:	4422      	add	r2, r4
 8008e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e94:	3302      	adds	r3, #2
 8008e96:	e7c7      	b.n	8008e28 <_printf_common+0x58>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	4622      	mov	r2, r4
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	47c0      	blx	r8
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	d0e6      	beq.n	8008e74 <_printf_common+0xa4>
 8008ea6:	3601      	adds	r6, #1
 8008ea8:	e7d9      	b.n	8008e5e <_printf_common+0x8e>
	...

08008eac <_printf_i>:
 8008eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb0:	460c      	mov	r4, r1
 8008eb2:	4691      	mov	r9, r2
 8008eb4:	7e27      	ldrb	r7, [r4, #24]
 8008eb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008eb8:	2f78      	cmp	r7, #120	; 0x78
 8008eba:	4680      	mov	r8, r0
 8008ebc:	469a      	mov	sl, r3
 8008ebe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ec2:	d807      	bhi.n	8008ed4 <_printf_i+0x28>
 8008ec4:	2f62      	cmp	r7, #98	; 0x62
 8008ec6:	d80a      	bhi.n	8008ede <_printf_i+0x32>
 8008ec8:	2f00      	cmp	r7, #0
 8008eca:	f000 80d8 	beq.w	800907e <_printf_i+0x1d2>
 8008ece:	2f58      	cmp	r7, #88	; 0x58
 8008ed0:	f000 80a3 	beq.w	800901a <_printf_i+0x16e>
 8008ed4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ed8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008edc:	e03a      	b.n	8008f54 <_printf_i+0xa8>
 8008ede:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ee2:	2b15      	cmp	r3, #21
 8008ee4:	d8f6      	bhi.n	8008ed4 <_printf_i+0x28>
 8008ee6:	a001      	add	r0, pc, #4	; (adr r0, 8008eec <_printf_i+0x40>)
 8008ee8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008eec:	08008f45 	.word	0x08008f45
 8008ef0:	08008f59 	.word	0x08008f59
 8008ef4:	08008ed5 	.word	0x08008ed5
 8008ef8:	08008ed5 	.word	0x08008ed5
 8008efc:	08008ed5 	.word	0x08008ed5
 8008f00:	08008ed5 	.word	0x08008ed5
 8008f04:	08008f59 	.word	0x08008f59
 8008f08:	08008ed5 	.word	0x08008ed5
 8008f0c:	08008ed5 	.word	0x08008ed5
 8008f10:	08008ed5 	.word	0x08008ed5
 8008f14:	08008ed5 	.word	0x08008ed5
 8008f18:	08009065 	.word	0x08009065
 8008f1c:	08008f89 	.word	0x08008f89
 8008f20:	08009047 	.word	0x08009047
 8008f24:	08008ed5 	.word	0x08008ed5
 8008f28:	08008ed5 	.word	0x08008ed5
 8008f2c:	08009087 	.word	0x08009087
 8008f30:	08008ed5 	.word	0x08008ed5
 8008f34:	08008f89 	.word	0x08008f89
 8008f38:	08008ed5 	.word	0x08008ed5
 8008f3c:	08008ed5 	.word	0x08008ed5
 8008f40:	0800904f 	.word	0x0800904f
 8008f44:	680b      	ldr	r3, [r1, #0]
 8008f46:	1d1a      	adds	r2, r3, #4
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	600a      	str	r2, [r1, #0]
 8008f4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f54:	2301      	movs	r3, #1
 8008f56:	e0a3      	b.n	80090a0 <_printf_i+0x1f4>
 8008f58:	6825      	ldr	r5, [r4, #0]
 8008f5a:	6808      	ldr	r0, [r1, #0]
 8008f5c:	062e      	lsls	r6, r5, #24
 8008f5e:	f100 0304 	add.w	r3, r0, #4
 8008f62:	d50a      	bpl.n	8008f7a <_printf_i+0xce>
 8008f64:	6805      	ldr	r5, [r0, #0]
 8008f66:	600b      	str	r3, [r1, #0]
 8008f68:	2d00      	cmp	r5, #0
 8008f6a:	da03      	bge.n	8008f74 <_printf_i+0xc8>
 8008f6c:	232d      	movs	r3, #45	; 0x2d
 8008f6e:	426d      	negs	r5, r5
 8008f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f74:	485e      	ldr	r0, [pc, #376]	; (80090f0 <_printf_i+0x244>)
 8008f76:	230a      	movs	r3, #10
 8008f78:	e019      	b.n	8008fae <_printf_i+0x102>
 8008f7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008f7e:	6805      	ldr	r5, [r0, #0]
 8008f80:	600b      	str	r3, [r1, #0]
 8008f82:	bf18      	it	ne
 8008f84:	b22d      	sxthne	r5, r5
 8008f86:	e7ef      	b.n	8008f68 <_printf_i+0xbc>
 8008f88:	680b      	ldr	r3, [r1, #0]
 8008f8a:	6825      	ldr	r5, [r4, #0]
 8008f8c:	1d18      	adds	r0, r3, #4
 8008f8e:	6008      	str	r0, [r1, #0]
 8008f90:	0628      	lsls	r0, r5, #24
 8008f92:	d501      	bpl.n	8008f98 <_printf_i+0xec>
 8008f94:	681d      	ldr	r5, [r3, #0]
 8008f96:	e002      	b.n	8008f9e <_printf_i+0xf2>
 8008f98:	0669      	lsls	r1, r5, #25
 8008f9a:	d5fb      	bpl.n	8008f94 <_printf_i+0xe8>
 8008f9c:	881d      	ldrh	r5, [r3, #0]
 8008f9e:	4854      	ldr	r0, [pc, #336]	; (80090f0 <_printf_i+0x244>)
 8008fa0:	2f6f      	cmp	r7, #111	; 0x6f
 8008fa2:	bf0c      	ite	eq
 8008fa4:	2308      	moveq	r3, #8
 8008fa6:	230a      	movne	r3, #10
 8008fa8:	2100      	movs	r1, #0
 8008faa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fae:	6866      	ldr	r6, [r4, #4]
 8008fb0:	60a6      	str	r6, [r4, #8]
 8008fb2:	2e00      	cmp	r6, #0
 8008fb4:	bfa2      	ittt	ge
 8008fb6:	6821      	ldrge	r1, [r4, #0]
 8008fb8:	f021 0104 	bicge.w	r1, r1, #4
 8008fbc:	6021      	strge	r1, [r4, #0]
 8008fbe:	b90d      	cbnz	r5, 8008fc4 <_printf_i+0x118>
 8008fc0:	2e00      	cmp	r6, #0
 8008fc2:	d04d      	beq.n	8009060 <_printf_i+0x1b4>
 8008fc4:	4616      	mov	r6, r2
 8008fc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fca:	fb03 5711 	mls	r7, r3, r1, r5
 8008fce:	5dc7      	ldrb	r7, [r0, r7]
 8008fd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fd4:	462f      	mov	r7, r5
 8008fd6:	42bb      	cmp	r3, r7
 8008fd8:	460d      	mov	r5, r1
 8008fda:	d9f4      	bls.n	8008fc6 <_printf_i+0x11a>
 8008fdc:	2b08      	cmp	r3, #8
 8008fde:	d10b      	bne.n	8008ff8 <_printf_i+0x14c>
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	07df      	lsls	r7, r3, #31
 8008fe4:	d508      	bpl.n	8008ff8 <_printf_i+0x14c>
 8008fe6:	6923      	ldr	r3, [r4, #16]
 8008fe8:	6861      	ldr	r1, [r4, #4]
 8008fea:	4299      	cmp	r1, r3
 8008fec:	bfde      	ittt	le
 8008fee:	2330      	movle	r3, #48	; 0x30
 8008ff0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ff4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008ff8:	1b92      	subs	r2, r2, r6
 8008ffa:	6122      	str	r2, [r4, #16]
 8008ffc:	f8cd a000 	str.w	sl, [sp]
 8009000:	464b      	mov	r3, r9
 8009002:	aa03      	add	r2, sp, #12
 8009004:	4621      	mov	r1, r4
 8009006:	4640      	mov	r0, r8
 8009008:	f7ff fee2 	bl	8008dd0 <_printf_common>
 800900c:	3001      	adds	r0, #1
 800900e:	d14c      	bne.n	80090aa <_printf_i+0x1fe>
 8009010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009014:	b004      	add	sp, #16
 8009016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800901a:	4835      	ldr	r0, [pc, #212]	; (80090f0 <_printf_i+0x244>)
 800901c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	680e      	ldr	r6, [r1, #0]
 8009024:	061f      	lsls	r7, r3, #24
 8009026:	f856 5b04 	ldr.w	r5, [r6], #4
 800902a:	600e      	str	r6, [r1, #0]
 800902c:	d514      	bpl.n	8009058 <_printf_i+0x1ac>
 800902e:	07d9      	lsls	r1, r3, #31
 8009030:	bf44      	itt	mi
 8009032:	f043 0320 	orrmi.w	r3, r3, #32
 8009036:	6023      	strmi	r3, [r4, #0]
 8009038:	b91d      	cbnz	r5, 8009042 <_printf_i+0x196>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	f023 0320 	bic.w	r3, r3, #32
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	2310      	movs	r3, #16
 8009044:	e7b0      	b.n	8008fa8 <_printf_i+0xfc>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	f043 0320 	orr.w	r3, r3, #32
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	2378      	movs	r3, #120	; 0x78
 8009050:	4828      	ldr	r0, [pc, #160]	; (80090f4 <_printf_i+0x248>)
 8009052:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009056:	e7e3      	b.n	8009020 <_printf_i+0x174>
 8009058:	065e      	lsls	r6, r3, #25
 800905a:	bf48      	it	mi
 800905c:	b2ad      	uxthmi	r5, r5
 800905e:	e7e6      	b.n	800902e <_printf_i+0x182>
 8009060:	4616      	mov	r6, r2
 8009062:	e7bb      	b.n	8008fdc <_printf_i+0x130>
 8009064:	680b      	ldr	r3, [r1, #0]
 8009066:	6826      	ldr	r6, [r4, #0]
 8009068:	6960      	ldr	r0, [r4, #20]
 800906a:	1d1d      	adds	r5, r3, #4
 800906c:	600d      	str	r5, [r1, #0]
 800906e:	0635      	lsls	r5, r6, #24
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	d501      	bpl.n	8009078 <_printf_i+0x1cc>
 8009074:	6018      	str	r0, [r3, #0]
 8009076:	e002      	b.n	800907e <_printf_i+0x1d2>
 8009078:	0671      	lsls	r1, r6, #25
 800907a:	d5fb      	bpl.n	8009074 <_printf_i+0x1c8>
 800907c:	8018      	strh	r0, [r3, #0]
 800907e:	2300      	movs	r3, #0
 8009080:	6123      	str	r3, [r4, #16]
 8009082:	4616      	mov	r6, r2
 8009084:	e7ba      	b.n	8008ffc <_printf_i+0x150>
 8009086:	680b      	ldr	r3, [r1, #0]
 8009088:	1d1a      	adds	r2, r3, #4
 800908a:	600a      	str	r2, [r1, #0]
 800908c:	681e      	ldr	r6, [r3, #0]
 800908e:	6862      	ldr	r2, [r4, #4]
 8009090:	2100      	movs	r1, #0
 8009092:	4630      	mov	r0, r6
 8009094:	f7f7 f8c4 	bl	8000220 <memchr>
 8009098:	b108      	cbz	r0, 800909e <_printf_i+0x1f2>
 800909a:	1b80      	subs	r0, r0, r6
 800909c:	6060      	str	r0, [r4, #4]
 800909e:	6863      	ldr	r3, [r4, #4]
 80090a0:	6123      	str	r3, [r4, #16]
 80090a2:	2300      	movs	r3, #0
 80090a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090a8:	e7a8      	b.n	8008ffc <_printf_i+0x150>
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	4632      	mov	r2, r6
 80090ae:	4649      	mov	r1, r9
 80090b0:	4640      	mov	r0, r8
 80090b2:	47d0      	blx	sl
 80090b4:	3001      	adds	r0, #1
 80090b6:	d0ab      	beq.n	8009010 <_printf_i+0x164>
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	079b      	lsls	r3, r3, #30
 80090bc:	d413      	bmi.n	80090e6 <_printf_i+0x23a>
 80090be:	68e0      	ldr	r0, [r4, #12]
 80090c0:	9b03      	ldr	r3, [sp, #12]
 80090c2:	4298      	cmp	r0, r3
 80090c4:	bfb8      	it	lt
 80090c6:	4618      	movlt	r0, r3
 80090c8:	e7a4      	b.n	8009014 <_printf_i+0x168>
 80090ca:	2301      	movs	r3, #1
 80090cc:	4632      	mov	r2, r6
 80090ce:	4649      	mov	r1, r9
 80090d0:	4640      	mov	r0, r8
 80090d2:	47d0      	blx	sl
 80090d4:	3001      	adds	r0, #1
 80090d6:	d09b      	beq.n	8009010 <_printf_i+0x164>
 80090d8:	3501      	adds	r5, #1
 80090da:	68e3      	ldr	r3, [r4, #12]
 80090dc:	9903      	ldr	r1, [sp, #12]
 80090de:	1a5b      	subs	r3, r3, r1
 80090e0:	42ab      	cmp	r3, r5
 80090e2:	dcf2      	bgt.n	80090ca <_printf_i+0x21e>
 80090e4:	e7eb      	b.n	80090be <_printf_i+0x212>
 80090e6:	2500      	movs	r5, #0
 80090e8:	f104 0619 	add.w	r6, r4, #25
 80090ec:	e7f5      	b.n	80090da <_printf_i+0x22e>
 80090ee:	bf00      	nop
 80090f0:	0801b8a5 	.word	0x0801b8a5
 80090f4:	0801b8b6 	.word	0x0801b8b6

080090f8 <_sbrk_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	4d06      	ldr	r5, [pc, #24]	; (8009114 <_sbrk_r+0x1c>)
 80090fc:	2300      	movs	r3, #0
 80090fe:	4604      	mov	r4, r0
 8009100:	4608      	mov	r0, r1
 8009102:	602b      	str	r3, [r5, #0]
 8009104:	f7f8 fe8a 	bl	8001e1c <_sbrk>
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	d102      	bne.n	8009112 <_sbrk_r+0x1a>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	b103      	cbz	r3, 8009112 <_sbrk_r+0x1a>
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	20025f68 	.word	0x20025f68

08009118 <_raise_r>:
 8009118:	291f      	cmp	r1, #31
 800911a:	b538      	push	{r3, r4, r5, lr}
 800911c:	4604      	mov	r4, r0
 800911e:	460d      	mov	r5, r1
 8009120:	d904      	bls.n	800912c <_raise_r+0x14>
 8009122:	2316      	movs	r3, #22
 8009124:	6003      	str	r3, [r0, #0]
 8009126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800912a:	bd38      	pop	{r3, r4, r5, pc}
 800912c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800912e:	b112      	cbz	r2, 8009136 <_raise_r+0x1e>
 8009130:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009134:	b94b      	cbnz	r3, 800914a <_raise_r+0x32>
 8009136:	4620      	mov	r0, r4
 8009138:	f000 f830 	bl	800919c <_getpid_r>
 800913c:	462a      	mov	r2, r5
 800913e:	4601      	mov	r1, r0
 8009140:	4620      	mov	r0, r4
 8009142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009146:	f000 b817 	b.w	8009178 <_kill_r>
 800914a:	2b01      	cmp	r3, #1
 800914c:	d00a      	beq.n	8009164 <_raise_r+0x4c>
 800914e:	1c59      	adds	r1, r3, #1
 8009150:	d103      	bne.n	800915a <_raise_r+0x42>
 8009152:	2316      	movs	r3, #22
 8009154:	6003      	str	r3, [r0, #0]
 8009156:	2001      	movs	r0, #1
 8009158:	e7e7      	b.n	800912a <_raise_r+0x12>
 800915a:	2400      	movs	r4, #0
 800915c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009160:	4628      	mov	r0, r5
 8009162:	4798      	blx	r3
 8009164:	2000      	movs	r0, #0
 8009166:	e7e0      	b.n	800912a <_raise_r+0x12>

08009168 <raise>:
 8009168:	4b02      	ldr	r3, [pc, #8]	; (8009174 <raise+0xc>)
 800916a:	4601      	mov	r1, r0
 800916c:	6818      	ldr	r0, [r3, #0]
 800916e:	f7ff bfd3 	b.w	8009118 <_raise_r>
 8009172:	bf00      	nop
 8009174:	20000010 	.word	0x20000010

08009178 <_kill_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4d07      	ldr	r5, [pc, #28]	; (8009198 <_kill_r+0x20>)
 800917c:	2300      	movs	r3, #0
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	4611      	mov	r1, r2
 8009184:	602b      	str	r3, [r5, #0]
 8009186:	f7f8 fdc1 	bl	8001d0c <_kill>
 800918a:	1c43      	adds	r3, r0, #1
 800918c:	d102      	bne.n	8009194 <_kill_r+0x1c>
 800918e:	682b      	ldr	r3, [r5, #0]
 8009190:	b103      	cbz	r3, 8009194 <_kill_r+0x1c>
 8009192:	6023      	str	r3, [r4, #0]
 8009194:	bd38      	pop	{r3, r4, r5, pc}
 8009196:	bf00      	nop
 8009198:	20025f68 	.word	0x20025f68

0800919c <_getpid_r>:
 800919c:	f7f8 bdae 	b.w	8001cfc <_getpid>

080091a0 <siprintf>:
 80091a0:	b40e      	push	{r1, r2, r3}
 80091a2:	b500      	push	{lr}
 80091a4:	b09c      	sub	sp, #112	; 0x70
 80091a6:	ab1d      	add	r3, sp, #116	; 0x74
 80091a8:	9002      	str	r0, [sp, #8]
 80091aa:	9006      	str	r0, [sp, #24]
 80091ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091b0:	4809      	ldr	r0, [pc, #36]	; (80091d8 <siprintf+0x38>)
 80091b2:	9107      	str	r1, [sp, #28]
 80091b4:	9104      	str	r1, [sp, #16]
 80091b6:	4909      	ldr	r1, [pc, #36]	; (80091dc <siprintf+0x3c>)
 80091b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091bc:	9105      	str	r1, [sp, #20]
 80091be:	6800      	ldr	r0, [r0, #0]
 80091c0:	9301      	str	r3, [sp, #4]
 80091c2:	a902      	add	r1, sp, #8
 80091c4:	f000 fca2 	bl	8009b0c <_svfiprintf_r>
 80091c8:	9b02      	ldr	r3, [sp, #8]
 80091ca:	2200      	movs	r2, #0
 80091cc:	701a      	strb	r2, [r3, #0]
 80091ce:	b01c      	add	sp, #112	; 0x70
 80091d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091d4:	b003      	add	sp, #12
 80091d6:	4770      	bx	lr
 80091d8:	20000010 	.word	0x20000010
 80091dc:	ffff0208 	.word	0xffff0208

080091e0 <strcpy>:
 80091e0:	4603      	mov	r3, r0
 80091e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091e6:	f803 2b01 	strb.w	r2, [r3], #1
 80091ea:	2a00      	cmp	r2, #0
 80091ec:	d1f9      	bne.n	80091e2 <strcpy+0x2>
 80091ee:	4770      	bx	lr

080091f0 <strncmp>:
 80091f0:	b510      	push	{r4, lr}
 80091f2:	b16a      	cbz	r2, 8009210 <strncmp+0x20>
 80091f4:	3901      	subs	r1, #1
 80091f6:	1884      	adds	r4, r0, r2
 80091f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80091fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009200:	4293      	cmp	r3, r2
 8009202:	d103      	bne.n	800920c <strncmp+0x1c>
 8009204:	42a0      	cmp	r0, r4
 8009206:	d001      	beq.n	800920c <strncmp+0x1c>
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1f5      	bne.n	80091f8 <strncmp+0x8>
 800920c:	1a98      	subs	r0, r3, r2
 800920e:	bd10      	pop	{r4, pc}
 8009210:	4610      	mov	r0, r2
 8009212:	e7fc      	b.n	800920e <strncmp+0x1e>

08009214 <strncpy>:
 8009214:	b510      	push	{r4, lr}
 8009216:	3901      	subs	r1, #1
 8009218:	4603      	mov	r3, r0
 800921a:	b132      	cbz	r2, 800922a <strncpy+0x16>
 800921c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009220:	f803 4b01 	strb.w	r4, [r3], #1
 8009224:	3a01      	subs	r2, #1
 8009226:	2c00      	cmp	r4, #0
 8009228:	d1f7      	bne.n	800921a <strncpy+0x6>
 800922a:	441a      	add	r2, r3
 800922c:	2100      	movs	r1, #0
 800922e:	4293      	cmp	r3, r2
 8009230:	d100      	bne.n	8009234 <strncpy+0x20>
 8009232:	bd10      	pop	{r4, pc}
 8009234:	f803 1b01 	strb.w	r1, [r3], #1
 8009238:	e7f9      	b.n	800922e <strncpy+0x1a>
	...

0800923c <strtok>:
 800923c:	4b16      	ldr	r3, [pc, #88]	; (8009298 <strtok+0x5c>)
 800923e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009240:	681e      	ldr	r6, [r3, #0]
 8009242:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009244:	4605      	mov	r5, r0
 8009246:	b9fc      	cbnz	r4, 8009288 <strtok+0x4c>
 8009248:	2050      	movs	r0, #80	; 0x50
 800924a:	9101      	str	r1, [sp, #4]
 800924c:	f7ff fb84 	bl	8008958 <malloc>
 8009250:	9901      	ldr	r1, [sp, #4]
 8009252:	65b0      	str	r0, [r6, #88]	; 0x58
 8009254:	4602      	mov	r2, r0
 8009256:	b920      	cbnz	r0, 8009262 <strtok+0x26>
 8009258:	4b10      	ldr	r3, [pc, #64]	; (800929c <strtok+0x60>)
 800925a:	4811      	ldr	r0, [pc, #68]	; (80092a0 <strtok+0x64>)
 800925c:	2157      	movs	r1, #87	; 0x57
 800925e:	f7ff fb21 	bl	80088a4 <__assert_func>
 8009262:	e9c0 4400 	strd	r4, r4, [r0]
 8009266:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800926a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800926e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009272:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009276:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800927a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800927e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009282:	6184      	str	r4, [r0, #24]
 8009284:	7704      	strb	r4, [r0, #28]
 8009286:	6244      	str	r4, [r0, #36]	; 0x24
 8009288:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800928a:	2301      	movs	r3, #1
 800928c:	4628      	mov	r0, r5
 800928e:	b002      	add	sp, #8
 8009290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009294:	f000 b806 	b.w	80092a4 <__strtok_r>
 8009298:	20000010 	.word	0x20000010
 800929c:	0801b8c7 	.word	0x0801b8c7
 80092a0:	0801b8de 	.word	0x0801b8de

080092a4 <__strtok_r>:
 80092a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092a6:	b908      	cbnz	r0, 80092ac <__strtok_r+0x8>
 80092a8:	6810      	ldr	r0, [r2, #0]
 80092aa:	b188      	cbz	r0, 80092d0 <__strtok_r+0x2c>
 80092ac:	4604      	mov	r4, r0
 80092ae:	4620      	mov	r0, r4
 80092b0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80092b4:	460f      	mov	r7, r1
 80092b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80092ba:	b91e      	cbnz	r6, 80092c4 <__strtok_r+0x20>
 80092bc:	b965      	cbnz	r5, 80092d8 <__strtok_r+0x34>
 80092be:	6015      	str	r5, [r2, #0]
 80092c0:	4628      	mov	r0, r5
 80092c2:	e005      	b.n	80092d0 <__strtok_r+0x2c>
 80092c4:	42b5      	cmp	r5, r6
 80092c6:	d1f6      	bne.n	80092b6 <__strtok_r+0x12>
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1f0      	bne.n	80092ae <__strtok_r+0xa>
 80092cc:	6014      	str	r4, [r2, #0]
 80092ce:	7003      	strb	r3, [r0, #0]
 80092d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092d2:	461c      	mov	r4, r3
 80092d4:	e00c      	b.n	80092f0 <__strtok_r+0x4c>
 80092d6:	b915      	cbnz	r5, 80092de <__strtok_r+0x3a>
 80092d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80092dc:	460e      	mov	r6, r1
 80092de:	f816 5b01 	ldrb.w	r5, [r6], #1
 80092e2:	42ab      	cmp	r3, r5
 80092e4:	d1f7      	bne.n	80092d6 <__strtok_r+0x32>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0f3      	beq.n	80092d2 <__strtok_r+0x2e>
 80092ea:	2300      	movs	r3, #0
 80092ec:	f804 3c01 	strb.w	r3, [r4, #-1]
 80092f0:	6014      	str	r4, [r2, #0]
 80092f2:	e7ed      	b.n	80092d0 <__strtok_r+0x2c>

080092f4 <_strtoll_l.isra.0>:
 80092f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f8:	b087      	sub	sp, #28
 80092fa:	4691      	mov	r9, r2
 80092fc:	4a47      	ldr	r2, [pc, #284]	; (800941c <_strtoll_l.isra.0+0x128>)
 80092fe:	9005      	str	r0, [sp, #20]
 8009300:	4688      	mov	r8, r1
 8009302:	461f      	mov	r7, r3
 8009304:	460d      	mov	r5, r1
 8009306:	462b      	mov	r3, r5
 8009308:	f815 4b01 	ldrb.w	r4, [r5], #1
 800930c:	5ca6      	ldrb	r6, [r4, r2]
 800930e:	f016 0608 	ands.w	r6, r6, #8
 8009312:	d1f8      	bne.n	8009306 <_strtoll_l.isra.0+0x12>
 8009314:	2c2d      	cmp	r4, #45	; 0x2d
 8009316:	d147      	bne.n	80093a8 <_strtoll_l.isra.0+0xb4>
 8009318:	782c      	ldrb	r4, [r5, #0]
 800931a:	2601      	movs	r6, #1
 800931c:	1c9d      	adds	r5, r3, #2
 800931e:	2f00      	cmp	r7, #0
 8009320:	d077      	beq.n	8009412 <_strtoll_l.isra.0+0x11e>
 8009322:	2f10      	cmp	r7, #16
 8009324:	d109      	bne.n	800933a <_strtoll_l.isra.0+0x46>
 8009326:	2c30      	cmp	r4, #48	; 0x30
 8009328:	d107      	bne.n	800933a <_strtoll_l.isra.0+0x46>
 800932a:	782b      	ldrb	r3, [r5, #0]
 800932c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009330:	2b58      	cmp	r3, #88	; 0x58
 8009332:	d169      	bne.n	8009408 <_strtoll_l.isra.0+0x114>
 8009334:	786c      	ldrb	r4, [r5, #1]
 8009336:	2710      	movs	r7, #16
 8009338:	3502      	adds	r5, #2
 800933a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800933e:	1990      	adds	r0, r2, r6
 8009340:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009344:	ea4f 7be7 	mov.w	fp, r7, asr #31
 8009348:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 800934c:	463a      	mov	r2, r7
 800934e:	465b      	mov	r3, fp
 8009350:	e9cd 0100 	strd	r0, r1, [sp]
 8009354:	f7f6 ffbc 	bl	80002d0 <__aeabi_uldivmod>
 8009358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800935c:	46ba      	mov	sl, r7
 800935e:	4696      	mov	lr, r2
 8009360:	2300      	movs	r3, #0
 8009362:	2000      	movs	r0, #0
 8009364:	2100      	movs	r1, #0
 8009366:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800936a:	f1bc 0f09 	cmp.w	ip, #9
 800936e:	d820      	bhi.n	80093b2 <_strtoll_l.isra.0+0xbe>
 8009370:	4664      	mov	r4, ip
 8009372:	42a7      	cmp	r7, r4
 8009374:	dd2e      	ble.n	80093d4 <_strtoll_l.isra.0+0xe0>
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	d013      	beq.n	80093a2 <_strtoll_l.isra.0+0xae>
 800937a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800937e:	428b      	cmp	r3, r1
 8009380:	bf08      	it	eq
 8009382:	4282      	cmpeq	r2, r0
 8009384:	d323      	bcc.n	80093ce <_strtoll_l.isra.0+0xda>
 8009386:	d101      	bne.n	800938c <_strtoll_l.isra.0+0x98>
 8009388:	45a6      	cmp	lr, r4
 800938a:	db20      	blt.n	80093ce <_strtoll_l.isra.0+0xda>
 800938c:	fb0a f301 	mul.w	r3, sl, r1
 8009390:	fb00 330b 	mla	r3, r0, fp, r3
 8009394:	fbaa 0100 	umull	r0, r1, sl, r0
 8009398:	4419      	add	r1, r3
 800939a:	1900      	adds	r0, r0, r4
 800939c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80093a0:	2301      	movs	r3, #1
 80093a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093a6:	e7de      	b.n	8009366 <_strtoll_l.isra.0+0x72>
 80093a8:	2c2b      	cmp	r4, #43	; 0x2b
 80093aa:	bf04      	itt	eq
 80093ac:	782c      	ldrbeq	r4, [r5, #0]
 80093ae:	1c9d      	addeq	r5, r3, #2
 80093b0:	e7b5      	b.n	800931e <_strtoll_l.isra.0+0x2a>
 80093b2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80093b6:	f1bc 0f19 	cmp.w	ip, #25
 80093ba:	d801      	bhi.n	80093c0 <_strtoll_l.isra.0+0xcc>
 80093bc:	3c37      	subs	r4, #55	; 0x37
 80093be:	e7d8      	b.n	8009372 <_strtoll_l.isra.0+0x7e>
 80093c0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80093c4:	f1bc 0f19 	cmp.w	ip, #25
 80093c8:	d804      	bhi.n	80093d4 <_strtoll_l.isra.0+0xe0>
 80093ca:	3c57      	subs	r4, #87	; 0x57
 80093cc:	e7d1      	b.n	8009372 <_strtoll_l.isra.0+0x7e>
 80093ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093d2:	e7e6      	b.n	80093a2 <_strtoll_l.isra.0+0xae>
 80093d4:	1c5a      	adds	r2, r3, #1
 80093d6:	d10a      	bne.n	80093ee <_strtoll_l.isra.0+0xfa>
 80093d8:	9a05      	ldr	r2, [sp, #20]
 80093da:	2322      	movs	r3, #34	; 0x22
 80093dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	f1b9 0f00 	cmp.w	r9, #0
 80093e6:	d10a      	bne.n	80093fe <_strtoll_l.isra.0+0x10a>
 80093e8:	b007      	add	sp, #28
 80093ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ee:	b116      	cbz	r6, 80093f6 <_strtoll_l.isra.0+0x102>
 80093f0:	4240      	negs	r0, r0
 80093f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80093f6:	f1b9 0f00 	cmp.w	r9, #0
 80093fa:	d0f5      	beq.n	80093e8 <_strtoll_l.isra.0+0xf4>
 80093fc:	b10b      	cbz	r3, 8009402 <_strtoll_l.isra.0+0x10e>
 80093fe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8009402:	f8c9 8000 	str.w	r8, [r9]
 8009406:	e7ef      	b.n	80093e8 <_strtoll_l.isra.0+0xf4>
 8009408:	2430      	movs	r4, #48	; 0x30
 800940a:	2f00      	cmp	r7, #0
 800940c:	d195      	bne.n	800933a <_strtoll_l.isra.0+0x46>
 800940e:	2708      	movs	r7, #8
 8009410:	e793      	b.n	800933a <_strtoll_l.isra.0+0x46>
 8009412:	2c30      	cmp	r4, #48	; 0x30
 8009414:	d089      	beq.n	800932a <_strtoll_l.isra.0+0x36>
 8009416:	270a      	movs	r7, #10
 8009418:	e78f      	b.n	800933a <_strtoll_l.isra.0+0x46>
 800941a:	bf00      	nop
 800941c:	0801b940 	.word	0x0801b940

08009420 <strtoll>:
 8009420:	4613      	mov	r3, r2
 8009422:	460a      	mov	r2, r1
 8009424:	4601      	mov	r1, r0
 8009426:	4802      	ldr	r0, [pc, #8]	; (8009430 <strtoll+0x10>)
 8009428:	6800      	ldr	r0, [r0, #0]
 800942a:	f7ff bf63 	b.w	80092f4 <_strtoll_l.isra.0>
 800942e:	bf00      	nop
 8009430:	20000010 	.word	0x20000010

08009434 <__swbuf_r>:
 8009434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009436:	460e      	mov	r6, r1
 8009438:	4614      	mov	r4, r2
 800943a:	4605      	mov	r5, r0
 800943c:	b118      	cbz	r0, 8009446 <__swbuf_r+0x12>
 800943e:	6983      	ldr	r3, [r0, #24]
 8009440:	b90b      	cbnz	r3, 8009446 <__swbuf_r+0x12>
 8009442:	f000 f9d1 	bl	80097e8 <__sinit>
 8009446:	4b21      	ldr	r3, [pc, #132]	; (80094cc <__swbuf_r+0x98>)
 8009448:	429c      	cmp	r4, r3
 800944a:	d12b      	bne.n	80094a4 <__swbuf_r+0x70>
 800944c:	686c      	ldr	r4, [r5, #4]
 800944e:	69a3      	ldr	r3, [r4, #24]
 8009450:	60a3      	str	r3, [r4, #8]
 8009452:	89a3      	ldrh	r3, [r4, #12]
 8009454:	071a      	lsls	r2, r3, #28
 8009456:	d52f      	bpl.n	80094b8 <__swbuf_r+0x84>
 8009458:	6923      	ldr	r3, [r4, #16]
 800945a:	b36b      	cbz	r3, 80094b8 <__swbuf_r+0x84>
 800945c:	6923      	ldr	r3, [r4, #16]
 800945e:	6820      	ldr	r0, [r4, #0]
 8009460:	1ac0      	subs	r0, r0, r3
 8009462:	6963      	ldr	r3, [r4, #20]
 8009464:	b2f6      	uxtb	r6, r6
 8009466:	4283      	cmp	r3, r0
 8009468:	4637      	mov	r7, r6
 800946a:	dc04      	bgt.n	8009476 <__swbuf_r+0x42>
 800946c:	4621      	mov	r1, r4
 800946e:	4628      	mov	r0, r5
 8009470:	f000 f926 	bl	80096c0 <_fflush_r>
 8009474:	bb30      	cbnz	r0, 80094c4 <__swbuf_r+0x90>
 8009476:	68a3      	ldr	r3, [r4, #8]
 8009478:	3b01      	subs	r3, #1
 800947a:	60a3      	str	r3, [r4, #8]
 800947c:	6823      	ldr	r3, [r4, #0]
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	6022      	str	r2, [r4, #0]
 8009482:	701e      	strb	r6, [r3, #0]
 8009484:	6963      	ldr	r3, [r4, #20]
 8009486:	3001      	adds	r0, #1
 8009488:	4283      	cmp	r3, r0
 800948a:	d004      	beq.n	8009496 <__swbuf_r+0x62>
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	07db      	lsls	r3, r3, #31
 8009490:	d506      	bpl.n	80094a0 <__swbuf_r+0x6c>
 8009492:	2e0a      	cmp	r6, #10
 8009494:	d104      	bne.n	80094a0 <__swbuf_r+0x6c>
 8009496:	4621      	mov	r1, r4
 8009498:	4628      	mov	r0, r5
 800949a:	f000 f911 	bl	80096c0 <_fflush_r>
 800949e:	b988      	cbnz	r0, 80094c4 <__swbuf_r+0x90>
 80094a0:	4638      	mov	r0, r7
 80094a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094a4:	4b0a      	ldr	r3, [pc, #40]	; (80094d0 <__swbuf_r+0x9c>)
 80094a6:	429c      	cmp	r4, r3
 80094a8:	d101      	bne.n	80094ae <__swbuf_r+0x7a>
 80094aa:	68ac      	ldr	r4, [r5, #8]
 80094ac:	e7cf      	b.n	800944e <__swbuf_r+0x1a>
 80094ae:	4b09      	ldr	r3, [pc, #36]	; (80094d4 <__swbuf_r+0xa0>)
 80094b0:	429c      	cmp	r4, r3
 80094b2:	bf08      	it	eq
 80094b4:	68ec      	ldreq	r4, [r5, #12]
 80094b6:	e7ca      	b.n	800944e <__swbuf_r+0x1a>
 80094b8:	4621      	mov	r1, r4
 80094ba:	4628      	mov	r0, r5
 80094bc:	f000 f80c 	bl	80094d8 <__swsetup_r>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d0cb      	beq.n	800945c <__swbuf_r+0x28>
 80094c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80094c8:	e7ea      	b.n	80094a0 <__swbuf_r+0x6c>
 80094ca:	bf00      	nop
 80094cc:	0801ba60 	.word	0x0801ba60
 80094d0:	0801ba80 	.word	0x0801ba80
 80094d4:	0801ba40 	.word	0x0801ba40

080094d8 <__swsetup_r>:
 80094d8:	4b32      	ldr	r3, [pc, #200]	; (80095a4 <__swsetup_r+0xcc>)
 80094da:	b570      	push	{r4, r5, r6, lr}
 80094dc:	681d      	ldr	r5, [r3, #0]
 80094de:	4606      	mov	r6, r0
 80094e0:	460c      	mov	r4, r1
 80094e2:	b125      	cbz	r5, 80094ee <__swsetup_r+0x16>
 80094e4:	69ab      	ldr	r3, [r5, #24]
 80094e6:	b913      	cbnz	r3, 80094ee <__swsetup_r+0x16>
 80094e8:	4628      	mov	r0, r5
 80094ea:	f000 f97d 	bl	80097e8 <__sinit>
 80094ee:	4b2e      	ldr	r3, [pc, #184]	; (80095a8 <__swsetup_r+0xd0>)
 80094f0:	429c      	cmp	r4, r3
 80094f2:	d10f      	bne.n	8009514 <__swsetup_r+0x3c>
 80094f4:	686c      	ldr	r4, [r5, #4]
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094fc:	0719      	lsls	r1, r3, #28
 80094fe:	d42c      	bmi.n	800955a <__swsetup_r+0x82>
 8009500:	06dd      	lsls	r5, r3, #27
 8009502:	d411      	bmi.n	8009528 <__swsetup_r+0x50>
 8009504:	2309      	movs	r3, #9
 8009506:	6033      	str	r3, [r6, #0]
 8009508:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800950c:	81a3      	strh	r3, [r4, #12]
 800950e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009512:	e03e      	b.n	8009592 <__swsetup_r+0xba>
 8009514:	4b25      	ldr	r3, [pc, #148]	; (80095ac <__swsetup_r+0xd4>)
 8009516:	429c      	cmp	r4, r3
 8009518:	d101      	bne.n	800951e <__swsetup_r+0x46>
 800951a:	68ac      	ldr	r4, [r5, #8]
 800951c:	e7eb      	b.n	80094f6 <__swsetup_r+0x1e>
 800951e:	4b24      	ldr	r3, [pc, #144]	; (80095b0 <__swsetup_r+0xd8>)
 8009520:	429c      	cmp	r4, r3
 8009522:	bf08      	it	eq
 8009524:	68ec      	ldreq	r4, [r5, #12]
 8009526:	e7e6      	b.n	80094f6 <__swsetup_r+0x1e>
 8009528:	0758      	lsls	r0, r3, #29
 800952a:	d512      	bpl.n	8009552 <__swsetup_r+0x7a>
 800952c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800952e:	b141      	cbz	r1, 8009542 <__swsetup_r+0x6a>
 8009530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009534:	4299      	cmp	r1, r3
 8009536:	d002      	beq.n	800953e <__swsetup_r+0x66>
 8009538:	4630      	mov	r0, r6
 800953a:	f7ff fa45 	bl	80089c8 <_free_r>
 800953e:	2300      	movs	r3, #0
 8009540:	6363      	str	r3, [r4, #52]	; 0x34
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009548:	81a3      	strh	r3, [r4, #12]
 800954a:	2300      	movs	r3, #0
 800954c:	6063      	str	r3, [r4, #4]
 800954e:	6923      	ldr	r3, [r4, #16]
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	f043 0308 	orr.w	r3, r3, #8
 8009558:	81a3      	strh	r3, [r4, #12]
 800955a:	6923      	ldr	r3, [r4, #16]
 800955c:	b94b      	cbnz	r3, 8009572 <__swsetup_r+0x9a>
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009568:	d003      	beq.n	8009572 <__swsetup_r+0x9a>
 800956a:	4621      	mov	r1, r4
 800956c:	4630      	mov	r0, r6
 800956e:	f000 f9ff 	bl	8009970 <__smakebuf_r>
 8009572:	89a0      	ldrh	r0, [r4, #12]
 8009574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009578:	f010 0301 	ands.w	r3, r0, #1
 800957c:	d00a      	beq.n	8009594 <__swsetup_r+0xbc>
 800957e:	2300      	movs	r3, #0
 8009580:	60a3      	str	r3, [r4, #8]
 8009582:	6963      	ldr	r3, [r4, #20]
 8009584:	425b      	negs	r3, r3
 8009586:	61a3      	str	r3, [r4, #24]
 8009588:	6923      	ldr	r3, [r4, #16]
 800958a:	b943      	cbnz	r3, 800959e <__swsetup_r+0xc6>
 800958c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009590:	d1ba      	bne.n	8009508 <__swsetup_r+0x30>
 8009592:	bd70      	pop	{r4, r5, r6, pc}
 8009594:	0781      	lsls	r1, r0, #30
 8009596:	bf58      	it	pl
 8009598:	6963      	ldrpl	r3, [r4, #20]
 800959a:	60a3      	str	r3, [r4, #8]
 800959c:	e7f4      	b.n	8009588 <__swsetup_r+0xb0>
 800959e:	2000      	movs	r0, #0
 80095a0:	e7f7      	b.n	8009592 <__swsetup_r+0xba>
 80095a2:	bf00      	nop
 80095a4:	20000010 	.word	0x20000010
 80095a8:	0801ba60 	.word	0x0801ba60
 80095ac:	0801ba80 	.word	0x0801ba80
 80095b0:	0801ba40 	.word	0x0801ba40

080095b4 <__sflush_r>:
 80095b4:	898a      	ldrh	r2, [r1, #12]
 80095b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ba:	4605      	mov	r5, r0
 80095bc:	0710      	lsls	r0, r2, #28
 80095be:	460c      	mov	r4, r1
 80095c0:	d458      	bmi.n	8009674 <__sflush_r+0xc0>
 80095c2:	684b      	ldr	r3, [r1, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	dc05      	bgt.n	80095d4 <__sflush_r+0x20>
 80095c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	dc02      	bgt.n	80095d4 <__sflush_r+0x20>
 80095ce:	2000      	movs	r0, #0
 80095d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095d6:	2e00      	cmp	r6, #0
 80095d8:	d0f9      	beq.n	80095ce <__sflush_r+0x1a>
 80095da:	2300      	movs	r3, #0
 80095dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095e0:	682f      	ldr	r7, [r5, #0]
 80095e2:	602b      	str	r3, [r5, #0]
 80095e4:	d032      	beq.n	800964c <__sflush_r+0x98>
 80095e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095e8:	89a3      	ldrh	r3, [r4, #12]
 80095ea:	075a      	lsls	r2, r3, #29
 80095ec:	d505      	bpl.n	80095fa <__sflush_r+0x46>
 80095ee:	6863      	ldr	r3, [r4, #4]
 80095f0:	1ac0      	subs	r0, r0, r3
 80095f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095f4:	b10b      	cbz	r3, 80095fa <__sflush_r+0x46>
 80095f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095f8:	1ac0      	subs	r0, r0, r3
 80095fa:	2300      	movs	r3, #0
 80095fc:	4602      	mov	r2, r0
 80095fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009600:	6a21      	ldr	r1, [r4, #32]
 8009602:	4628      	mov	r0, r5
 8009604:	47b0      	blx	r6
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	89a3      	ldrh	r3, [r4, #12]
 800960a:	d106      	bne.n	800961a <__sflush_r+0x66>
 800960c:	6829      	ldr	r1, [r5, #0]
 800960e:	291d      	cmp	r1, #29
 8009610:	d82c      	bhi.n	800966c <__sflush_r+0xb8>
 8009612:	4a2a      	ldr	r2, [pc, #168]	; (80096bc <__sflush_r+0x108>)
 8009614:	40ca      	lsrs	r2, r1
 8009616:	07d6      	lsls	r6, r2, #31
 8009618:	d528      	bpl.n	800966c <__sflush_r+0xb8>
 800961a:	2200      	movs	r2, #0
 800961c:	6062      	str	r2, [r4, #4]
 800961e:	04d9      	lsls	r1, r3, #19
 8009620:	6922      	ldr	r2, [r4, #16]
 8009622:	6022      	str	r2, [r4, #0]
 8009624:	d504      	bpl.n	8009630 <__sflush_r+0x7c>
 8009626:	1c42      	adds	r2, r0, #1
 8009628:	d101      	bne.n	800962e <__sflush_r+0x7a>
 800962a:	682b      	ldr	r3, [r5, #0]
 800962c:	b903      	cbnz	r3, 8009630 <__sflush_r+0x7c>
 800962e:	6560      	str	r0, [r4, #84]	; 0x54
 8009630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009632:	602f      	str	r7, [r5, #0]
 8009634:	2900      	cmp	r1, #0
 8009636:	d0ca      	beq.n	80095ce <__sflush_r+0x1a>
 8009638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800963c:	4299      	cmp	r1, r3
 800963e:	d002      	beq.n	8009646 <__sflush_r+0x92>
 8009640:	4628      	mov	r0, r5
 8009642:	f7ff f9c1 	bl	80089c8 <_free_r>
 8009646:	2000      	movs	r0, #0
 8009648:	6360      	str	r0, [r4, #52]	; 0x34
 800964a:	e7c1      	b.n	80095d0 <__sflush_r+0x1c>
 800964c:	6a21      	ldr	r1, [r4, #32]
 800964e:	2301      	movs	r3, #1
 8009650:	4628      	mov	r0, r5
 8009652:	47b0      	blx	r6
 8009654:	1c41      	adds	r1, r0, #1
 8009656:	d1c7      	bne.n	80095e8 <__sflush_r+0x34>
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d0c4      	beq.n	80095e8 <__sflush_r+0x34>
 800965e:	2b1d      	cmp	r3, #29
 8009660:	d001      	beq.n	8009666 <__sflush_r+0xb2>
 8009662:	2b16      	cmp	r3, #22
 8009664:	d101      	bne.n	800966a <__sflush_r+0xb6>
 8009666:	602f      	str	r7, [r5, #0]
 8009668:	e7b1      	b.n	80095ce <__sflush_r+0x1a>
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	e7ad      	b.n	80095d0 <__sflush_r+0x1c>
 8009674:	690f      	ldr	r7, [r1, #16]
 8009676:	2f00      	cmp	r7, #0
 8009678:	d0a9      	beq.n	80095ce <__sflush_r+0x1a>
 800967a:	0793      	lsls	r3, r2, #30
 800967c:	680e      	ldr	r6, [r1, #0]
 800967e:	bf08      	it	eq
 8009680:	694b      	ldreq	r3, [r1, #20]
 8009682:	600f      	str	r7, [r1, #0]
 8009684:	bf18      	it	ne
 8009686:	2300      	movne	r3, #0
 8009688:	eba6 0807 	sub.w	r8, r6, r7
 800968c:	608b      	str	r3, [r1, #8]
 800968e:	f1b8 0f00 	cmp.w	r8, #0
 8009692:	dd9c      	ble.n	80095ce <__sflush_r+0x1a>
 8009694:	6a21      	ldr	r1, [r4, #32]
 8009696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009698:	4643      	mov	r3, r8
 800969a:	463a      	mov	r2, r7
 800969c:	4628      	mov	r0, r5
 800969e:	47b0      	blx	r6
 80096a0:	2800      	cmp	r0, #0
 80096a2:	dc06      	bgt.n	80096b2 <__sflush_r+0xfe>
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096aa:	81a3      	strh	r3, [r4, #12]
 80096ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096b0:	e78e      	b.n	80095d0 <__sflush_r+0x1c>
 80096b2:	4407      	add	r7, r0
 80096b4:	eba8 0800 	sub.w	r8, r8, r0
 80096b8:	e7e9      	b.n	800968e <__sflush_r+0xda>
 80096ba:	bf00      	nop
 80096bc:	20400001 	.word	0x20400001

080096c0 <_fflush_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	690b      	ldr	r3, [r1, #16]
 80096c4:	4605      	mov	r5, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	b913      	cbnz	r3, 80096d0 <_fflush_r+0x10>
 80096ca:	2500      	movs	r5, #0
 80096cc:	4628      	mov	r0, r5
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	b118      	cbz	r0, 80096da <_fflush_r+0x1a>
 80096d2:	6983      	ldr	r3, [r0, #24]
 80096d4:	b90b      	cbnz	r3, 80096da <_fflush_r+0x1a>
 80096d6:	f000 f887 	bl	80097e8 <__sinit>
 80096da:	4b14      	ldr	r3, [pc, #80]	; (800972c <_fflush_r+0x6c>)
 80096dc:	429c      	cmp	r4, r3
 80096de:	d11b      	bne.n	8009718 <_fflush_r+0x58>
 80096e0:	686c      	ldr	r4, [r5, #4]
 80096e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d0ef      	beq.n	80096ca <_fflush_r+0xa>
 80096ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096ec:	07d0      	lsls	r0, r2, #31
 80096ee:	d404      	bmi.n	80096fa <_fflush_r+0x3a>
 80096f0:	0599      	lsls	r1, r3, #22
 80096f2:	d402      	bmi.n	80096fa <_fflush_r+0x3a>
 80096f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096f6:	f000 f915 	bl	8009924 <__retarget_lock_acquire_recursive>
 80096fa:	4628      	mov	r0, r5
 80096fc:	4621      	mov	r1, r4
 80096fe:	f7ff ff59 	bl	80095b4 <__sflush_r>
 8009702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009704:	07da      	lsls	r2, r3, #31
 8009706:	4605      	mov	r5, r0
 8009708:	d4e0      	bmi.n	80096cc <_fflush_r+0xc>
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	059b      	lsls	r3, r3, #22
 800970e:	d4dd      	bmi.n	80096cc <_fflush_r+0xc>
 8009710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009712:	f000 f908 	bl	8009926 <__retarget_lock_release_recursive>
 8009716:	e7d9      	b.n	80096cc <_fflush_r+0xc>
 8009718:	4b05      	ldr	r3, [pc, #20]	; (8009730 <_fflush_r+0x70>)
 800971a:	429c      	cmp	r4, r3
 800971c:	d101      	bne.n	8009722 <_fflush_r+0x62>
 800971e:	68ac      	ldr	r4, [r5, #8]
 8009720:	e7df      	b.n	80096e2 <_fflush_r+0x22>
 8009722:	4b04      	ldr	r3, [pc, #16]	; (8009734 <_fflush_r+0x74>)
 8009724:	429c      	cmp	r4, r3
 8009726:	bf08      	it	eq
 8009728:	68ec      	ldreq	r4, [r5, #12]
 800972a:	e7da      	b.n	80096e2 <_fflush_r+0x22>
 800972c:	0801ba60 	.word	0x0801ba60
 8009730:	0801ba80 	.word	0x0801ba80
 8009734:	0801ba40 	.word	0x0801ba40

08009738 <std>:
 8009738:	2300      	movs	r3, #0
 800973a:	b510      	push	{r4, lr}
 800973c:	4604      	mov	r4, r0
 800973e:	e9c0 3300 	strd	r3, r3, [r0]
 8009742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009746:	6083      	str	r3, [r0, #8]
 8009748:	8181      	strh	r1, [r0, #12]
 800974a:	6643      	str	r3, [r0, #100]	; 0x64
 800974c:	81c2      	strh	r2, [r0, #14]
 800974e:	6183      	str	r3, [r0, #24]
 8009750:	4619      	mov	r1, r3
 8009752:	2208      	movs	r2, #8
 8009754:	305c      	adds	r0, #92	; 0x5c
 8009756:	f7ff f92f 	bl	80089b8 <memset>
 800975a:	4b05      	ldr	r3, [pc, #20]	; (8009770 <std+0x38>)
 800975c:	6263      	str	r3, [r4, #36]	; 0x24
 800975e:	4b05      	ldr	r3, [pc, #20]	; (8009774 <std+0x3c>)
 8009760:	62a3      	str	r3, [r4, #40]	; 0x28
 8009762:	4b05      	ldr	r3, [pc, #20]	; (8009778 <std+0x40>)
 8009764:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009766:	4b05      	ldr	r3, [pc, #20]	; (800977c <std+0x44>)
 8009768:	6224      	str	r4, [r4, #32]
 800976a:	6323      	str	r3, [r4, #48]	; 0x30
 800976c:	bd10      	pop	{r4, pc}
 800976e:	bf00      	nop
 8009770:	08009d0d 	.word	0x08009d0d
 8009774:	08009d2f 	.word	0x08009d2f
 8009778:	08009d67 	.word	0x08009d67
 800977c:	08009d8b 	.word	0x08009d8b

08009780 <_cleanup_r>:
 8009780:	4901      	ldr	r1, [pc, #4]	; (8009788 <_cleanup_r+0x8>)
 8009782:	f000 b8af 	b.w	80098e4 <_fwalk_reent>
 8009786:	bf00      	nop
 8009788:	080096c1 	.word	0x080096c1

0800978c <__sfmoreglue>:
 800978c:	b570      	push	{r4, r5, r6, lr}
 800978e:	1e4a      	subs	r2, r1, #1
 8009790:	2568      	movs	r5, #104	; 0x68
 8009792:	4355      	muls	r5, r2
 8009794:	460e      	mov	r6, r1
 8009796:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800979a:	f7ff f965 	bl	8008a68 <_malloc_r>
 800979e:	4604      	mov	r4, r0
 80097a0:	b140      	cbz	r0, 80097b4 <__sfmoreglue+0x28>
 80097a2:	2100      	movs	r1, #0
 80097a4:	e9c0 1600 	strd	r1, r6, [r0]
 80097a8:	300c      	adds	r0, #12
 80097aa:	60a0      	str	r0, [r4, #8]
 80097ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097b0:	f7ff f902 	bl	80089b8 <memset>
 80097b4:	4620      	mov	r0, r4
 80097b6:	bd70      	pop	{r4, r5, r6, pc}

080097b8 <__sfp_lock_acquire>:
 80097b8:	4801      	ldr	r0, [pc, #4]	; (80097c0 <__sfp_lock_acquire+0x8>)
 80097ba:	f000 b8b3 	b.w	8009924 <__retarget_lock_acquire_recursive>
 80097be:	bf00      	nop
 80097c0:	20025f60 	.word	0x20025f60

080097c4 <__sfp_lock_release>:
 80097c4:	4801      	ldr	r0, [pc, #4]	; (80097cc <__sfp_lock_release+0x8>)
 80097c6:	f000 b8ae 	b.w	8009926 <__retarget_lock_release_recursive>
 80097ca:	bf00      	nop
 80097cc:	20025f60 	.word	0x20025f60

080097d0 <__sinit_lock_acquire>:
 80097d0:	4801      	ldr	r0, [pc, #4]	; (80097d8 <__sinit_lock_acquire+0x8>)
 80097d2:	f000 b8a7 	b.w	8009924 <__retarget_lock_acquire_recursive>
 80097d6:	bf00      	nop
 80097d8:	20025f5f 	.word	0x20025f5f

080097dc <__sinit_lock_release>:
 80097dc:	4801      	ldr	r0, [pc, #4]	; (80097e4 <__sinit_lock_release+0x8>)
 80097de:	f000 b8a2 	b.w	8009926 <__retarget_lock_release_recursive>
 80097e2:	bf00      	nop
 80097e4:	20025f5f 	.word	0x20025f5f

080097e8 <__sinit>:
 80097e8:	b510      	push	{r4, lr}
 80097ea:	4604      	mov	r4, r0
 80097ec:	f7ff fff0 	bl	80097d0 <__sinit_lock_acquire>
 80097f0:	69a3      	ldr	r3, [r4, #24]
 80097f2:	b11b      	cbz	r3, 80097fc <__sinit+0x14>
 80097f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097f8:	f7ff bff0 	b.w	80097dc <__sinit_lock_release>
 80097fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009800:	6523      	str	r3, [r4, #80]	; 0x50
 8009802:	4b13      	ldr	r3, [pc, #76]	; (8009850 <__sinit+0x68>)
 8009804:	4a13      	ldr	r2, [pc, #76]	; (8009854 <__sinit+0x6c>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	62a2      	str	r2, [r4, #40]	; 0x28
 800980a:	42a3      	cmp	r3, r4
 800980c:	bf04      	itt	eq
 800980e:	2301      	moveq	r3, #1
 8009810:	61a3      	streq	r3, [r4, #24]
 8009812:	4620      	mov	r0, r4
 8009814:	f000 f820 	bl	8009858 <__sfp>
 8009818:	6060      	str	r0, [r4, #4]
 800981a:	4620      	mov	r0, r4
 800981c:	f000 f81c 	bl	8009858 <__sfp>
 8009820:	60a0      	str	r0, [r4, #8]
 8009822:	4620      	mov	r0, r4
 8009824:	f000 f818 	bl	8009858 <__sfp>
 8009828:	2200      	movs	r2, #0
 800982a:	60e0      	str	r0, [r4, #12]
 800982c:	2104      	movs	r1, #4
 800982e:	6860      	ldr	r0, [r4, #4]
 8009830:	f7ff ff82 	bl	8009738 <std>
 8009834:	68a0      	ldr	r0, [r4, #8]
 8009836:	2201      	movs	r2, #1
 8009838:	2109      	movs	r1, #9
 800983a:	f7ff ff7d 	bl	8009738 <std>
 800983e:	68e0      	ldr	r0, [r4, #12]
 8009840:	2202      	movs	r2, #2
 8009842:	2112      	movs	r1, #18
 8009844:	f7ff ff78 	bl	8009738 <std>
 8009848:	2301      	movs	r3, #1
 800984a:	61a3      	str	r3, [r4, #24]
 800984c:	e7d2      	b.n	80097f4 <__sinit+0xc>
 800984e:	bf00      	nop
 8009850:	0801b890 	.word	0x0801b890
 8009854:	08009781 	.word	0x08009781

08009858 <__sfp>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	4607      	mov	r7, r0
 800985c:	f7ff ffac 	bl	80097b8 <__sfp_lock_acquire>
 8009860:	4b1e      	ldr	r3, [pc, #120]	; (80098dc <__sfp+0x84>)
 8009862:	681e      	ldr	r6, [r3, #0]
 8009864:	69b3      	ldr	r3, [r6, #24]
 8009866:	b913      	cbnz	r3, 800986e <__sfp+0x16>
 8009868:	4630      	mov	r0, r6
 800986a:	f7ff ffbd 	bl	80097e8 <__sinit>
 800986e:	3648      	adds	r6, #72	; 0x48
 8009870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009874:	3b01      	subs	r3, #1
 8009876:	d503      	bpl.n	8009880 <__sfp+0x28>
 8009878:	6833      	ldr	r3, [r6, #0]
 800987a:	b30b      	cbz	r3, 80098c0 <__sfp+0x68>
 800987c:	6836      	ldr	r6, [r6, #0]
 800987e:	e7f7      	b.n	8009870 <__sfp+0x18>
 8009880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009884:	b9d5      	cbnz	r5, 80098bc <__sfp+0x64>
 8009886:	4b16      	ldr	r3, [pc, #88]	; (80098e0 <__sfp+0x88>)
 8009888:	60e3      	str	r3, [r4, #12]
 800988a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800988e:	6665      	str	r5, [r4, #100]	; 0x64
 8009890:	f000 f847 	bl	8009922 <__retarget_lock_init_recursive>
 8009894:	f7ff ff96 	bl	80097c4 <__sfp_lock_release>
 8009898:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800989c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098a0:	6025      	str	r5, [r4, #0]
 80098a2:	61a5      	str	r5, [r4, #24]
 80098a4:	2208      	movs	r2, #8
 80098a6:	4629      	mov	r1, r5
 80098a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098ac:	f7ff f884 	bl	80089b8 <memset>
 80098b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098b8:	4620      	mov	r0, r4
 80098ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098bc:	3468      	adds	r4, #104	; 0x68
 80098be:	e7d9      	b.n	8009874 <__sfp+0x1c>
 80098c0:	2104      	movs	r1, #4
 80098c2:	4638      	mov	r0, r7
 80098c4:	f7ff ff62 	bl	800978c <__sfmoreglue>
 80098c8:	4604      	mov	r4, r0
 80098ca:	6030      	str	r0, [r6, #0]
 80098cc:	2800      	cmp	r0, #0
 80098ce:	d1d5      	bne.n	800987c <__sfp+0x24>
 80098d0:	f7ff ff78 	bl	80097c4 <__sfp_lock_release>
 80098d4:	230c      	movs	r3, #12
 80098d6:	603b      	str	r3, [r7, #0]
 80098d8:	e7ee      	b.n	80098b8 <__sfp+0x60>
 80098da:	bf00      	nop
 80098dc:	0801b890 	.word	0x0801b890
 80098e0:	ffff0001 	.word	0xffff0001

080098e4 <_fwalk_reent>:
 80098e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e8:	4606      	mov	r6, r0
 80098ea:	4688      	mov	r8, r1
 80098ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098f0:	2700      	movs	r7, #0
 80098f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098f6:	f1b9 0901 	subs.w	r9, r9, #1
 80098fa:	d505      	bpl.n	8009908 <_fwalk_reent+0x24>
 80098fc:	6824      	ldr	r4, [r4, #0]
 80098fe:	2c00      	cmp	r4, #0
 8009900:	d1f7      	bne.n	80098f2 <_fwalk_reent+0xe>
 8009902:	4638      	mov	r0, r7
 8009904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009908:	89ab      	ldrh	r3, [r5, #12]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d907      	bls.n	800991e <_fwalk_reent+0x3a>
 800990e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009912:	3301      	adds	r3, #1
 8009914:	d003      	beq.n	800991e <_fwalk_reent+0x3a>
 8009916:	4629      	mov	r1, r5
 8009918:	4630      	mov	r0, r6
 800991a:	47c0      	blx	r8
 800991c:	4307      	orrs	r7, r0
 800991e:	3568      	adds	r5, #104	; 0x68
 8009920:	e7e9      	b.n	80098f6 <_fwalk_reent+0x12>

08009922 <__retarget_lock_init_recursive>:
 8009922:	4770      	bx	lr

08009924 <__retarget_lock_acquire_recursive>:
 8009924:	4770      	bx	lr

08009926 <__retarget_lock_release_recursive>:
 8009926:	4770      	bx	lr

08009928 <__swhatbuf_r>:
 8009928:	b570      	push	{r4, r5, r6, lr}
 800992a:	460e      	mov	r6, r1
 800992c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009930:	2900      	cmp	r1, #0
 8009932:	b096      	sub	sp, #88	; 0x58
 8009934:	4614      	mov	r4, r2
 8009936:	461d      	mov	r5, r3
 8009938:	da07      	bge.n	800994a <__swhatbuf_r+0x22>
 800993a:	2300      	movs	r3, #0
 800993c:	602b      	str	r3, [r5, #0]
 800993e:	89b3      	ldrh	r3, [r6, #12]
 8009940:	061a      	lsls	r2, r3, #24
 8009942:	d410      	bmi.n	8009966 <__swhatbuf_r+0x3e>
 8009944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009948:	e00e      	b.n	8009968 <__swhatbuf_r+0x40>
 800994a:	466a      	mov	r2, sp
 800994c:	f000 fa44 	bl	8009dd8 <_fstat_r>
 8009950:	2800      	cmp	r0, #0
 8009952:	dbf2      	blt.n	800993a <__swhatbuf_r+0x12>
 8009954:	9a01      	ldr	r2, [sp, #4]
 8009956:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800995a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800995e:	425a      	negs	r2, r3
 8009960:	415a      	adcs	r2, r3
 8009962:	602a      	str	r2, [r5, #0]
 8009964:	e7ee      	b.n	8009944 <__swhatbuf_r+0x1c>
 8009966:	2340      	movs	r3, #64	; 0x40
 8009968:	2000      	movs	r0, #0
 800996a:	6023      	str	r3, [r4, #0]
 800996c:	b016      	add	sp, #88	; 0x58
 800996e:	bd70      	pop	{r4, r5, r6, pc}

08009970 <__smakebuf_r>:
 8009970:	898b      	ldrh	r3, [r1, #12]
 8009972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009974:	079d      	lsls	r5, r3, #30
 8009976:	4606      	mov	r6, r0
 8009978:	460c      	mov	r4, r1
 800997a:	d507      	bpl.n	800998c <__smakebuf_r+0x1c>
 800997c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	6123      	str	r3, [r4, #16]
 8009984:	2301      	movs	r3, #1
 8009986:	6163      	str	r3, [r4, #20]
 8009988:	b002      	add	sp, #8
 800998a:	bd70      	pop	{r4, r5, r6, pc}
 800998c:	ab01      	add	r3, sp, #4
 800998e:	466a      	mov	r2, sp
 8009990:	f7ff ffca 	bl	8009928 <__swhatbuf_r>
 8009994:	9900      	ldr	r1, [sp, #0]
 8009996:	4605      	mov	r5, r0
 8009998:	4630      	mov	r0, r6
 800999a:	f7ff f865 	bl	8008a68 <_malloc_r>
 800999e:	b948      	cbnz	r0, 80099b4 <__smakebuf_r+0x44>
 80099a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a4:	059a      	lsls	r2, r3, #22
 80099a6:	d4ef      	bmi.n	8009988 <__smakebuf_r+0x18>
 80099a8:	f023 0303 	bic.w	r3, r3, #3
 80099ac:	f043 0302 	orr.w	r3, r3, #2
 80099b0:	81a3      	strh	r3, [r4, #12]
 80099b2:	e7e3      	b.n	800997c <__smakebuf_r+0xc>
 80099b4:	4b0d      	ldr	r3, [pc, #52]	; (80099ec <__smakebuf_r+0x7c>)
 80099b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	6020      	str	r0, [r4, #0]
 80099bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c0:	81a3      	strh	r3, [r4, #12]
 80099c2:	9b00      	ldr	r3, [sp, #0]
 80099c4:	6163      	str	r3, [r4, #20]
 80099c6:	9b01      	ldr	r3, [sp, #4]
 80099c8:	6120      	str	r0, [r4, #16]
 80099ca:	b15b      	cbz	r3, 80099e4 <__smakebuf_r+0x74>
 80099cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099d0:	4630      	mov	r0, r6
 80099d2:	f000 fa13 	bl	8009dfc <_isatty_r>
 80099d6:	b128      	cbz	r0, 80099e4 <__smakebuf_r+0x74>
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	f023 0303 	bic.w	r3, r3, #3
 80099de:	f043 0301 	orr.w	r3, r3, #1
 80099e2:	81a3      	strh	r3, [r4, #12]
 80099e4:	89a0      	ldrh	r0, [r4, #12]
 80099e6:	4305      	orrs	r5, r0
 80099e8:	81a5      	strh	r5, [r4, #12]
 80099ea:	e7cd      	b.n	8009988 <__smakebuf_r+0x18>
 80099ec:	08009781 	.word	0x08009781

080099f0 <__malloc_lock>:
 80099f0:	4801      	ldr	r0, [pc, #4]	; (80099f8 <__malloc_lock+0x8>)
 80099f2:	f7ff bf97 	b.w	8009924 <__retarget_lock_acquire_recursive>
 80099f6:	bf00      	nop
 80099f8:	20025f5c 	.word	0x20025f5c

080099fc <__malloc_unlock>:
 80099fc:	4801      	ldr	r0, [pc, #4]	; (8009a04 <__malloc_unlock+0x8>)
 80099fe:	f7ff bf92 	b.w	8009926 <__retarget_lock_release_recursive>
 8009a02:	bf00      	nop
 8009a04:	20025f5c 	.word	0x20025f5c

08009a08 <_realloc_r>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	4614      	mov	r4, r2
 8009a0e:	460e      	mov	r6, r1
 8009a10:	b921      	cbnz	r1, 8009a1c <_realloc_r+0x14>
 8009a12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a16:	4611      	mov	r1, r2
 8009a18:	f7ff b826 	b.w	8008a68 <_malloc_r>
 8009a1c:	b922      	cbnz	r2, 8009a28 <_realloc_r+0x20>
 8009a1e:	f7fe ffd3 	bl	80089c8 <_free_r>
 8009a22:	4625      	mov	r5, r4
 8009a24:	4628      	mov	r0, r5
 8009a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a28:	f000 fa0a 	bl	8009e40 <_malloc_usable_size_r>
 8009a2c:	42a0      	cmp	r0, r4
 8009a2e:	d20f      	bcs.n	8009a50 <_realloc_r+0x48>
 8009a30:	4621      	mov	r1, r4
 8009a32:	4638      	mov	r0, r7
 8009a34:	f7ff f818 	bl	8008a68 <_malloc_r>
 8009a38:	4605      	mov	r5, r0
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	d0f2      	beq.n	8009a24 <_realloc_r+0x1c>
 8009a3e:	4631      	mov	r1, r6
 8009a40:	4622      	mov	r2, r4
 8009a42:	f7fe ff91 	bl	8008968 <memcpy>
 8009a46:	4631      	mov	r1, r6
 8009a48:	4638      	mov	r0, r7
 8009a4a:	f7fe ffbd 	bl	80089c8 <_free_r>
 8009a4e:	e7e9      	b.n	8009a24 <_realloc_r+0x1c>
 8009a50:	4635      	mov	r5, r6
 8009a52:	e7e7      	b.n	8009a24 <_realloc_r+0x1c>

08009a54 <__ssputs_r>:
 8009a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a58:	688e      	ldr	r6, [r1, #8]
 8009a5a:	429e      	cmp	r6, r3
 8009a5c:	4682      	mov	sl, r0
 8009a5e:	460c      	mov	r4, r1
 8009a60:	4690      	mov	r8, r2
 8009a62:	461f      	mov	r7, r3
 8009a64:	d838      	bhi.n	8009ad8 <__ssputs_r+0x84>
 8009a66:	898a      	ldrh	r2, [r1, #12]
 8009a68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a6c:	d032      	beq.n	8009ad4 <__ssputs_r+0x80>
 8009a6e:	6825      	ldr	r5, [r4, #0]
 8009a70:	6909      	ldr	r1, [r1, #16]
 8009a72:	eba5 0901 	sub.w	r9, r5, r1
 8009a76:	6965      	ldr	r5, [r4, #20]
 8009a78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a80:	3301      	adds	r3, #1
 8009a82:	444b      	add	r3, r9
 8009a84:	106d      	asrs	r5, r5, #1
 8009a86:	429d      	cmp	r5, r3
 8009a88:	bf38      	it	cc
 8009a8a:	461d      	movcc	r5, r3
 8009a8c:	0553      	lsls	r3, r2, #21
 8009a8e:	d531      	bpl.n	8009af4 <__ssputs_r+0xa0>
 8009a90:	4629      	mov	r1, r5
 8009a92:	f7fe ffe9 	bl	8008a68 <_malloc_r>
 8009a96:	4606      	mov	r6, r0
 8009a98:	b950      	cbnz	r0, 8009ab0 <__ssputs_r+0x5c>
 8009a9a:	230c      	movs	r3, #12
 8009a9c:	f8ca 3000 	str.w	r3, [sl]
 8009aa0:	89a3      	ldrh	r3, [r4, #12]
 8009aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa6:	81a3      	strh	r3, [r4, #12]
 8009aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab0:	6921      	ldr	r1, [r4, #16]
 8009ab2:	464a      	mov	r2, r9
 8009ab4:	f7fe ff58 	bl	8008968 <memcpy>
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ac2:	81a3      	strh	r3, [r4, #12]
 8009ac4:	6126      	str	r6, [r4, #16]
 8009ac6:	6165      	str	r5, [r4, #20]
 8009ac8:	444e      	add	r6, r9
 8009aca:	eba5 0509 	sub.w	r5, r5, r9
 8009ace:	6026      	str	r6, [r4, #0]
 8009ad0:	60a5      	str	r5, [r4, #8]
 8009ad2:	463e      	mov	r6, r7
 8009ad4:	42be      	cmp	r6, r7
 8009ad6:	d900      	bls.n	8009ada <__ssputs_r+0x86>
 8009ad8:	463e      	mov	r6, r7
 8009ada:	4632      	mov	r2, r6
 8009adc:	6820      	ldr	r0, [r4, #0]
 8009ade:	4641      	mov	r1, r8
 8009ae0:	f7fe ff50 	bl	8008984 <memmove>
 8009ae4:	68a3      	ldr	r3, [r4, #8]
 8009ae6:	6822      	ldr	r2, [r4, #0]
 8009ae8:	1b9b      	subs	r3, r3, r6
 8009aea:	4432      	add	r2, r6
 8009aec:	60a3      	str	r3, [r4, #8]
 8009aee:	6022      	str	r2, [r4, #0]
 8009af0:	2000      	movs	r0, #0
 8009af2:	e7db      	b.n	8009aac <__ssputs_r+0x58>
 8009af4:	462a      	mov	r2, r5
 8009af6:	f7ff ff87 	bl	8009a08 <_realloc_r>
 8009afa:	4606      	mov	r6, r0
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d1e1      	bne.n	8009ac4 <__ssputs_r+0x70>
 8009b00:	6921      	ldr	r1, [r4, #16]
 8009b02:	4650      	mov	r0, sl
 8009b04:	f7fe ff60 	bl	80089c8 <_free_r>
 8009b08:	e7c7      	b.n	8009a9a <__ssputs_r+0x46>
	...

08009b0c <_svfiprintf_r>:
 8009b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b10:	4698      	mov	r8, r3
 8009b12:	898b      	ldrh	r3, [r1, #12]
 8009b14:	061b      	lsls	r3, r3, #24
 8009b16:	b09d      	sub	sp, #116	; 0x74
 8009b18:	4607      	mov	r7, r0
 8009b1a:	460d      	mov	r5, r1
 8009b1c:	4614      	mov	r4, r2
 8009b1e:	d50e      	bpl.n	8009b3e <_svfiprintf_r+0x32>
 8009b20:	690b      	ldr	r3, [r1, #16]
 8009b22:	b963      	cbnz	r3, 8009b3e <_svfiprintf_r+0x32>
 8009b24:	2140      	movs	r1, #64	; 0x40
 8009b26:	f7fe ff9f 	bl	8008a68 <_malloc_r>
 8009b2a:	6028      	str	r0, [r5, #0]
 8009b2c:	6128      	str	r0, [r5, #16]
 8009b2e:	b920      	cbnz	r0, 8009b3a <_svfiprintf_r+0x2e>
 8009b30:	230c      	movs	r3, #12
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b38:	e0d1      	b.n	8009cde <_svfiprintf_r+0x1d2>
 8009b3a:	2340      	movs	r3, #64	; 0x40
 8009b3c:	616b      	str	r3, [r5, #20]
 8009b3e:	2300      	movs	r3, #0
 8009b40:	9309      	str	r3, [sp, #36]	; 0x24
 8009b42:	2320      	movs	r3, #32
 8009b44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b4c:	2330      	movs	r3, #48	; 0x30
 8009b4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009cf8 <_svfiprintf_r+0x1ec>
 8009b52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b56:	f04f 0901 	mov.w	r9, #1
 8009b5a:	4623      	mov	r3, r4
 8009b5c:	469a      	mov	sl, r3
 8009b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b62:	b10a      	cbz	r2, 8009b68 <_svfiprintf_r+0x5c>
 8009b64:	2a25      	cmp	r2, #37	; 0x25
 8009b66:	d1f9      	bne.n	8009b5c <_svfiprintf_r+0x50>
 8009b68:	ebba 0b04 	subs.w	fp, sl, r4
 8009b6c:	d00b      	beq.n	8009b86 <_svfiprintf_r+0x7a>
 8009b6e:	465b      	mov	r3, fp
 8009b70:	4622      	mov	r2, r4
 8009b72:	4629      	mov	r1, r5
 8009b74:	4638      	mov	r0, r7
 8009b76:	f7ff ff6d 	bl	8009a54 <__ssputs_r>
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	f000 80aa 	beq.w	8009cd4 <_svfiprintf_r+0x1c8>
 8009b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b82:	445a      	add	r2, fp
 8009b84:	9209      	str	r2, [sp, #36]	; 0x24
 8009b86:	f89a 3000 	ldrb.w	r3, [sl]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 80a2 	beq.w	8009cd4 <_svfiprintf_r+0x1c8>
 8009b90:	2300      	movs	r3, #0
 8009b92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b9a:	f10a 0a01 	add.w	sl, sl, #1
 8009b9e:	9304      	str	r3, [sp, #16]
 8009ba0:	9307      	str	r3, [sp, #28]
 8009ba2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ba6:	931a      	str	r3, [sp, #104]	; 0x68
 8009ba8:	4654      	mov	r4, sl
 8009baa:	2205      	movs	r2, #5
 8009bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb0:	4851      	ldr	r0, [pc, #324]	; (8009cf8 <_svfiprintf_r+0x1ec>)
 8009bb2:	f7f6 fb35 	bl	8000220 <memchr>
 8009bb6:	9a04      	ldr	r2, [sp, #16]
 8009bb8:	b9d8      	cbnz	r0, 8009bf2 <_svfiprintf_r+0xe6>
 8009bba:	06d0      	lsls	r0, r2, #27
 8009bbc:	bf44      	itt	mi
 8009bbe:	2320      	movmi	r3, #32
 8009bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bc4:	0711      	lsls	r1, r2, #28
 8009bc6:	bf44      	itt	mi
 8009bc8:	232b      	movmi	r3, #43	; 0x2b
 8009bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bce:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8009bd4:	d015      	beq.n	8009c02 <_svfiprintf_r+0xf6>
 8009bd6:	9a07      	ldr	r2, [sp, #28]
 8009bd8:	4654      	mov	r4, sl
 8009bda:	2000      	movs	r0, #0
 8009bdc:	f04f 0c0a 	mov.w	ip, #10
 8009be0:	4621      	mov	r1, r4
 8009be2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009be6:	3b30      	subs	r3, #48	; 0x30
 8009be8:	2b09      	cmp	r3, #9
 8009bea:	d94e      	bls.n	8009c8a <_svfiprintf_r+0x17e>
 8009bec:	b1b0      	cbz	r0, 8009c1c <_svfiprintf_r+0x110>
 8009bee:	9207      	str	r2, [sp, #28]
 8009bf0:	e014      	b.n	8009c1c <_svfiprintf_r+0x110>
 8009bf2:	eba0 0308 	sub.w	r3, r0, r8
 8009bf6:	fa09 f303 	lsl.w	r3, r9, r3
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	9304      	str	r3, [sp, #16]
 8009bfe:	46a2      	mov	sl, r4
 8009c00:	e7d2      	b.n	8009ba8 <_svfiprintf_r+0x9c>
 8009c02:	9b03      	ldr	r3, [sp, #12]
 8009c04:	1d19      	adds	r1, r3, #4
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	9103      	str	r1, [sp, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	bfbb      	ittet	lt
 8009c0e:	425b      	neglt	r3, r3
 8009c10:	f042 0202 	orrlt.w	r2, r2, #2
 8009c14:	9307      	strge	r3, [sp, #28]
 8009c16:	9307      	strlt	r3, [sp, #28]
 8009c18:	bfb8      	it	lt
 8009c1a:	9204      	strlt	r2, [sp, #16]
 8009c1c:	7823      	ldrb	r3, [r4, #0]
 8009c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8009c20:	d10c      	bne.n	8009c3c <_svfiprintf_r+0x130>
 8009c22:	7863      	ldrb	r3, [r4, #1]
 8009c24:	2b2a      	cmp	r3, #42	; 0x2a
 8009c26:	d135      	bne.n	8009c94 <_svfiprintf_r+0x188>
 8009c28:	9b03      	ldr	r3, [sp, #12]
 8009c2a:	1d1a      	adds	r2, r3, #4
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	9203      	str	r2, [sp, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	bfb8      	it	lt
 8009c34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009c38:	3402      	adds	r4, #2
 8009c3a:	9305      	str	r3, [sp, #20]
 8009c3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d08 <_svfiprintf_r+0x1fc>
 8009c40:	7821      	ldrb	r1, [r4, #0]
 8009c42:	2203      	movs	r2, #3
 8009c44:	4650      	mov	r0, sl
 8009c46:	f7f6 faeb 	bl	8000220 <memchr>
 8009c4a:	b140      	cbz	r0, 8009c5e <_svfiprintf_r+0x152>
 8009c4c:	2340      	movs	r3, #64	; 0x40
 8009c4e:	eba0 000a 	sub.w	r0, r0, sl
 8009c52:	fa03 f000 	lsl.w	r0, r3, r0
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	4303      	orrs	r3, r0
 8009c5a:	3401      	adds	r4, #1
 8009c5c:	9304      	str	r3, [sp, #16]
 8009c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c62:	4826      	ldr	r0, [pc, #152]	; (8009cfc <_svfiprintf_r+0x1f0>)
 8009c64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c68:	2206      	movs	r2, #6
 8009c6a:	f7f6 fad9 	bl	8000220 <memchr>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d038      	beq.n	8009ce4 <_svfiprintf_r+0x1d8>
 8009c72:	4b23      	ldr	r3, [pc, #140]	; (8009d00 <_svfiprintf_r+0x1f4>)
 8009c74:	bb1b      	cbnz	r3, 8009cbe <_svfiprintf_r+0x1b2>
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	3307      	adds	r3, #7
 8009c7a:	f023 0307 	bic.w	r3, r3, #7
 8009c7e:	3308      	adds	r3, #8
 8009c80:	9303      	str	r3, [sp, #12]
 8009c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c84:	4433      	add	r3, r6
 8009c86:	9309      	str	r3, [sp, #36]	; 0x24
 8009c88:	e767      	b.n	8009b5a <_svfiprintf_r+0x4e>
 8009c8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c8e:	460c      	mov	r4, r1
 8009c90:	2001      	movs	r0, #1
 8009c92:	e7a5      	b.n	8009be0 <_svfiprintf_r+0xd4>
 8009c94:	2300      	movs	r3, #0
 8009c96:	3401      	adds	r4, #1
 8009c98:	9305      	str	r3, [sp, #20]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	f04f 0c0a 	mov.w	ip, #10
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ca6:	3a30      	subs	r2, #48	; 0x30
 8009ca8:	2a09      	cmp	r2, #9
 8009caa:	d903      	bls.n	8009cb4 <_svfiprintf_r+0x1a8>
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d0c5      	beq.n	8009c3c <_svfiprintf_r+0x130>
 8009cb0:	9105      	str	r1, [sp, #20]
 8009cb2:	e7c3      	b.n	8009c3c <_svfiprintf_r+0x130>
 8009cb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cb8:	4604      	mov	r4, r0
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e7f0      	b.n	8009ca0 <_svfiprintf_r+0x194>
 8009cbe:	ab03      	add	r3, sp, #12
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	462a      	mov	r2, r5
 8009cc4:	4b0f      	ldr	r3, [pc, #60]	; (8009d04 <_svfiprintf_r+0x1f8>)
 8009cc6:	a904      	add	r1, sp, #16
 8009cc8:	4638      	mov	r0, r7
 8009cca:	f3af 8000 	nop.w
 8009cce:	1c42      	adds	r2, r0, #1
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	d1d6      	bne.n	8009c82 <_svfiprintf_r+0x176>
 8009cd4:	89ab      	ldrh	r3, [r5, #12]
 8009cd6:	065b      	lsls	r3, r3, #25
 8009cd8:	f53f af2c 	bmi.w	8009b34 <_svfiprintf_r+0x28>
 8009cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cde:	b01d      	add	sp, #116	; 0x74
 8009ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce4:	ab03      	add	r3, sp, #12
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	462a      	mov	r2, r5
 8009cea:	4b06      	ldr	r3, [pc, #24]	; (8009d04 <_svfiprintf_r+0x1f8>)
 8009cec:	a904      	add	r1, sp, #16
 8009cee:	4638      	mov	r0, r7
 8009cf0:	f7ff f8dc 	bl	8008eac <_printf_i>
 8009cf4:	e7eb      	b.n	8009cce <_svfiprintf_r+0x1c2>
 8009cf6:	bf00      	nop
 8009cf8:	0801b894 	.word	0x0801b894
 8009cfc:	0801b89e 	.word	0x0801b89e
 8009d00:	00000000 	.word	0x00000000
 8009d04:	08009a55 	.word	0x08009a55
 8009d08:	0801b89a 	.word	0x0801b89a

08009d0c <__sread>:
 8009d0c:	b510      	push	{r4, lr}
 8009d0e:	460c      	mov	r4, r1
 8009d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d14:	f000 f89c 	bl	8009e50 <_read_r>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	bfab      	itete	ge
 8009d1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d1e:	89a3      	ldrhlt	r3, [r4, #12]
 8009d20:	181b      	addge	r3, r3, r0
 8009d22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d26:	bfac      	ite	ge
 8009d28:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d2a:	81a3      	strhlt	r3, [r4, #12]
 8009d2c:	bd10      	pop	{r4, pc}

08009d2e <__swrite>:
 8009d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d32:	461f      	mov	r7, r3
 8009d34:	898b      	ldrh	r3, [r1, #12]
 8009d36:	05db      	lsls	r3, r3, #23
 8009d38:	4605      	mov	r5, r0
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	4616      	mov	r6, r2
 8009d3e:	d505      	bpl.n	8009d4c <__swrite+0x1e>
 8009d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d44:	2302      	movs	r3, #2
 8009d46:	2200      	movs	r2, #0
 8009d48:	f000 f868 	bl	8009e1c <_lseek_r>
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d56:	81a3      	strh	r3, [r4, #12]
 8009d58:	4632      	mov	r2, r6
 8009d5a:	463b      	mov	r3, r7
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d62:	f000 b817 	b.w	8009d94 <_write_r>

08009d66 <__sseek>:
 8009d66:	b510      	push	{r4, lr}
 8009d68:	460c      	mov	r4, r1
 8009d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d6e:	f000 f855 	bl	8009e1c <_lseek_r>
 8009d72:	1c43      	adds	r3, r0, #1
 8009d74:	89a3      	ldrh	r3, [r4, #12]
 8009d76:	bf15      	itete	ne
 8009d78:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d82:	81a3      	strheq	r3, [r4, #12]
 8009d84:	bf18      	it	ne
 8009d86:	81a3      	strhne	r3, [r4, #12]
 8009d88:	bd10      	pop	{r4, pc}

08009d8a <__sclose>:
 8009d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d8e:	f000 b813 	b.w	8009db8 <_close_r>
	...

08009d94 <_write_r>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	4d07      	ldr	r5, [pc, #28]	; (8009db4 <_write_r+0x20>)
 8009d98:	4604      	mov	r4, r0
 8009d9a:	4608      	mov	r0, r1
 8009d9c:	4611      	mov	r1, r2
 8009d9e:	2200      	movs	r2, #0
 8009da0:	602a      	str	r2, [r5, #0]
 8009da2:	461a      	mov	r2, r3
 8009da4:	f7f7 ffe9 	bl	8001d7a <_write>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d102      	bne.n	8009db2 <_write_r+0x1e>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	b103      	cbz	r3, 8009db2 <_write_r+0x1e>
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	20025f68 	.word	0x20025f68

08009db8 <_close_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	4d06      	ldr	r5, [pc, #24]	; (8009dd4 <_close_r+0x1c>)
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	4608      	mov	r0, r1
 8009dc2:	602b      	str	r3, [r5, #0]
 8009dc4:	f7f7 fff5 	bl	8001db2 <_close>
 8009dc8:	1c43      	adds	r3, r0, #1
 8009dca:	d102      	bne.n	8009dd2 <_close_r+0x1a>
 8009dcc:	682b      	ldr	r3, [r5, #0]
 8009dce:	b103      	cbz	r3, 8009dd2 <_close_r+0x1a>
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	bd38      	pop	{r3, r4, r5, pc}
 8009dd4:	20025f68 	.word	0x20025f68

08009dd8 <_fstat_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4d07      	ldr	r5, [pc, #28]	; (8009df8 <_fstat_r+0x20>)
 8009ddc:	2300      	movs	r3, #0
 8009dde:	4604      	mov	r4, r0
 8009de0:	4608      	mov	r0, r1
 8009de2:	4611      	mov	r1, r2
 8009de4:	602b      	str	r3, [r5, #0]
 8009de6:	f7f7 fff0 	bl	8001dca <_fstat>
 8009dea:	1c43      	adds	r3, r0, #1
 8009dec:	d102      	bne.n	8009df4 <_fstat_r+0x1c>
 8009dee:	682b      	ldr	r3, [r5, #0]
 8009df0:	b103      	cbz	r3, 8009df4 <_fstat_r+0x1c>
 8009df2:	6023      	str	r3, [r4, #0]
 8009df4:	bd38      	pop	{r3, r4, r5, pc}
 8009df6:	bf00      	nop
 8009df8:	20025f68 	.word	0x20025f68

08009dfc <_isatty_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d06      	ldr	r5, [pc, #24]	; (8009e18 <_isatty_r+0x1c>)
 8009e00:	2300      	movs	r3, #0
 8009e02:	4604      	mov	r4, r0
 8009e04:	4608      	mov	r0, r1
 8009e06:	602b      	str	r3, [r5, #0]
 8009e08:	f7f7 ffef 	bl	8001dea <_isatty>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	d102      	bne.n	8009e16 <_isatty_r+0x1a>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	b103      	cbz	r3, 8009e16 <_isatty_r+0x1a>
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	20025f68 	.word	0x20025f68

08009e1c <_lseek_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4d07      	ldr	r5, [pc, #28]	; (8009e3c <_lseek_r+0x20>)
 8009e20:	4604      	mov	r4, r0
 8009e22:	4608      	mov	r0, r1
 8009e24:	4611      	mov	r1, r2
 8009e26:	2200      	movs	r2, #0
 8009e28:	602a      	str	r2, [r5, #0]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f7f7 ffe8 	bl	8001e00 <_lseek>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d102      	bne.n	8009e3a <_lseek_r+0x1e>
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	b103      	cbz	r3, 8009e3a <_lseek_r+0x1e>
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
 8009e3c:	20025f68 	.word	0x20025f68

08009e40 <_malloc_usable_size_r>:
 8009e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e44:	1f18      	subs	r0, r3, #4
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	bfbc      	itt	lt
 8009e4a:	580b      	ldrlt	r3, [r1, r0]
 8009e4c:	18c0      	addlt	r0, r0, r3
 8009e4e:	4770      	bx	lr

08009e50 <_read_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d07      	ldr	r5, [pc, #28]	; (8009e70 <_read_r+0x20>)
 8009e54:	4604      	mov	r4, r0
 8009e56:	4608      	mov	r0, r1
 8009e58:	4611      	mov	r1, r2
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	602a      	str	r2, [r5, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	f7f7 ff6e 	bl	8001d40 <_read>
 8009e64:	1c43      	adds	r3, r0, #1
 8009e66:	d102      	bne.n	8009e6e <_read_r+0x1e>
 8009e68:	682b      	ldr	r3, [r5, #0]
 8009e6a:	b103      	cbz	r3, 8009e6e <_read_r+0x1e>
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	bd38      	pop	{r3, r4, r5, pc}
 8009e70:	20025f68 	.word	0x20025f68

08009e74 <_init>:
 8009e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e76:	bf00      	nop
 8009e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7a:	bc08      	pop	{r3}
 8009e7c:	469e      	mov	lr, r3
 8009e7e:	4770      	bx	lr

08009e80 <_fini>:
 8009e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e82:	bf00      	nop
 8009e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e86:	bc08      	pop	{r3}
 8009e88:	469e      	mov	lr, r3
 8009e8a:	4770      	bx	lr
