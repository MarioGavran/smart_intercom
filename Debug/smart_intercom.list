
smart_intercom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026570  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004f5cc  08026750  08026750  00036750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08075d1c  08075d1c  00090084  2**0
                  CONTENTS
  4 .ARM          00000008  08075d1c  08075d1c  00085d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08075d24  08075d24  00090084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08075d24  08075d24  00085d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08075d28  08075d28  00085d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08075d2c  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004a4bc  20000084  08075db0  00090084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2004a540  08075db0  0009a540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00090084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0034a350  00000000  00000000  000900b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000223ca  00000000  00000000  003da404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00009fa8  00000000  00000000  003fc7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00009b00  00000000  00000000  00406778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000416c3  00000000  00000000  00410278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00089a6c  00000000  00000000  0045193b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b4cd1  00000000  00000000  004db3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00690078  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0002df88  00000000  00000000  006900cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	08026738 	.word	0x08026738

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	08026738 	.word	0x08026738

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <strlen>:
 80002d4:	4603      	mov	r3, r0
 80002d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d1fb      	bne.n	80002d6 <strlen+0x2>
 80002de:	1a18      	subs	r0, r3, r0
 80002e0:	3801      	subs	r0, #1
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_drsub>:
 80002e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__adddf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_dsub>:
 80002ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f0 <__adddf3>:
 80002f0:	b530      	push	{r4, r5, lr}
 80002f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fa:	ea94 0f05 	teq	r4, r5
 80002fe:	bf08      	it	eq
 8000300:	ea90 0f02 	teqeq	r0, r2
 8000304:	bf1f      	itttt	ne
 8000306:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000316:	f000 80e2 	beq.w	80004de <__adddf3+0x1ee>
 800031a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000322:	bfb8      	it	lt
 8000324:	426d      	neglt	r5, r5
 8000326:	dd0c      	ble.n	8000342 <__adddf3+0x52>
 8000328:	442c      	add	r4, r5
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	ea82 0000 	eor.w	r0, r2, r0
 8000336:	ea83 0101 	eor.w	r1, r3, r1
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	2d36      	cmp	r5, #54	; 0x36
 8000344:	bf88      	it	hi
 8000346:	bd30      	pophi	{r4, r5, pc}
 8000348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800034c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x70>
 800035a:	4240      	negs	r0, r0
 800035c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000364:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x84>
 800036e:	4252      	negs	r2, r2
 8000370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000374:	ea94 0f05 	teq	r4, r5
 8000378:	f000 80a7 	beq.w	80004ca <__adddf3+0x1da>
 800037c:	f1a4 0401 	sub.w	r4, r4, #1
 8000380:	f1d5 0e20 	rsbs	lr, r5, #32
 8000384:	db0d      	blt.n	80003a2 <__adddf3+0xb2>
 8000386:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038a:	fa22 f205 	lsr.w	r2, r2, r5
 800038e:	1880      	adds	r0, r0, r2
 8000390:	f141 0100 	adc.w	r1, r1, #0
 8000394:	fa03 f20e 	lsl.w	r2, r3, lr
 8000398:	1880      	adds	r0, r0, r2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	4159      	adcs	r1, r3
 80003a0:	e00e      	b.n	80003c0 <__adddf3+0xd0>
 80003a2:	f1a5 0520 	sub.w	r5, r5, #32
 80003a6:	f10e 0e20 	add.w	lr, lr, #32
 80003aa:	2a01      	cmp	r2, #1
 80003ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b0:	bf28      	it	cs
 80003b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	18c0      	adds	r0, r0, r3
 80003bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	d507      	bpl.n	80003d6 <__adddf3+0xe6>
 80003c6:	f04f 0e00 	mov.w	lr, #0
 80003ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003da:	d31b      	bcc.n	8000414 <__adddf3+0x124>
 80003dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e0:	d30c      	bcc.n	80003fc <__adddf3+0x10c>
 80003e2:	0849      	lsrs	r1, r1, #1
 80003e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ec:	f104 0401 	add.w	r4, r4, #1
 80003f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f8:	f080 809a 	bcs.w	8000530 <__adddf3+0x240>
 80003fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000400:	bf08      	it	eq
 8000402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000406:	f150 0000 	adcs.w	r0, r0, #0
 800040a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040e:	ea41 0105 	orr.w	r1, r1, r5
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000418:	4140      	adcs	r0, r0
 800041a:	eb41 0101 	adc.w	r1, r1, r1
 800041e:	3c01      	subs	r4, #1
 8000420:	bf28      	it	cs
 8000422:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000426:	d2e9      	bcs.n	80003fc <__adddf3+0x10c>
 8000428:	f091 0f00 	teq	r1, #0
 800042c:	bf04      	itt	eq
 800042e:	4601      	moveq	r1, r0
 8000430:	2000      	moveq	r0, #0
 8000432:	fab1 f381 	clz	r3, r1
 8000436:	bf08      	it	eq
 8000438:	3320      	addeq	r3, #32
 800043a:	f1a3 030b 	sub.w	r3, r3, #11
 800043e:	f1b3 0220 	subs.w	r2, r3, #32
 8000442:	da0c      	bge.n	800045e <__adddf3+0x16e>
 8000444:	320c      	adds	r2, #12
 8000446:	dd08      	ble.n	800045a <__adddf3+0x16a>
 8000448:	f102 0c14 	add.w	ip, r2, #20
 800044c:	f1c2 020c 	rsb	r2, r2, #12
 8000450:	fa01 f00c 	lsl.w	r0, r1, ip
 8000454:	fa21 f102 	lsr.w	r1, r1, r2
 8000458:	e00c      	b.n	8000474 <__adddf3+0x184>
 800045a:	f102 0214 	add.w	r2, r2, #20
 800045e:	bfd8      	it	le
 8000460:	f1c2 0c20 	rsble	ip, r2, #32
 8000464:	fa01 f102 	lsl.w	r1, r1, r2
 8000468:	fa20 fc0c 	lsr.w	ip, r0, ip
 800046c:	bfdc      	itt	le
 800046e:	ea41 010c 	orrle.w	r1, r1, ip
 8000472:	4090      	lslle	r0, r2
 8000474:	1ae4      	subs	r4, r4, r3
 8000476:	bfa2      	ittt	ge
 8000478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800047c:	4329      	orrge	r1, r5
 800047e:	bd30      	popge	{r4, r5, pc}
 8000480:	ea6f 0404 	mvn.w	r4, r4
 8000484:	3c1f      	subs	r4, #31
 8000486:	da1c      	bge.n	80004c2 <__adddf3+0x1d2>
 8000488:	340c      	adds	r4, #12
 800048a:	dc0e      	bgt.n	80004aa <__adddf3+0x1ba>
 800048c:	f104 0414 	add.w	r4, r4, #20
 8000490:	f1c4 0220 	rsb	r2, r4, #32
 8000494:	fa20 f004 	lsr.w	r0, r0, r4
 8000498:	fa01 f302 	lsl.w	r3, r1, r2
 800049c:	ea40 0003 	orr.w	r0, r0, r3
 80004a0:	fa21 f304 	lsr.w	r3, r1, r4
 80004a4:	ea45 0103 	orr.w	r1, r5, r3
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f1c4 040c 	rsb	r4, r4, #12
 80004ae:	f1c4 0220 	rsb	r2, r4, #32
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ba:	ea40 0003 	orr.w	r0, r0, r3
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	fa21 f004 	lsr.w	r0, r1, r4
 80004c6:	4629      	mov	r1, r5
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f094 0f00 	teq	r4, #0
 80004ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d2:	bf06      	itte	eq
 80004d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d8:	3401      	addeq	r4, #1
 80004da:	3d01      	subne	r5, #1
 80004dc:	e74e      	b.n	800037c <__adddf3+0x8c>
 80004de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e2:	bf18      	it	ne
 80004e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e8:	d029      	beq.n	800053e <__adddf3+0x24e>
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	d005      	beq.n	8000502 <__adddf3+0x212>
 80004f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fa:	bf04      	itt	eq
 80004fc:	4619      	moveq	r1, r3
 80004fe:	4610      	moveq	r0, r2
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea91 0f03 	teq	r1, r3
 8000506:	bf1e      	ittt	ne
 8000508:	2100      	movne	r1, #0
 800050a:	2000      	movne	r0, #0
 800050c:	bd30      	popne	{r4, r5, pc}
 800050e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000512:	d105      	bne.n	8000520 <__adddf3+0x230>
 8000514:	0040      	lsls	r0, r0, #1
 8000516:	4149      	adcs	r1, r1
 8000518:	bf28      	it	cs
 800051a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051e:	bd30      	pop	{r4, r5, pc}
 8000520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000524:	bf3c      	itt	cc
 8000526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052a:	bd30      	popcc	{r4, r5, pc}
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000538:	f04f 0000 	mov.w	r0, #0
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000542:	bf1a      	itte	ne
 8000544:	4619      	movne	r1, r3
 8000546:	4610      	movne	r0, r2
 8000548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800054c:	bf1c      	itt	ne
 800054e:	460b      	movne	r3, r1
 8000550:	4602      	movne	r2, r0
 8000552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000556:	bf06      	itte	eq
 8000558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800055c:	ea91 0f03 	teqeq	r1, r3
 8000560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	bf00      	nop

08000568 <__aeabi_ui2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f04f 0500 	mov.w	r5, #0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e750      	b.n	8000428 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_i2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a0:	bf48      	it	mi
 80005a2:	4240      	negmi	r0, r0
 80005a4:	f04f 0100 	mov.w	r1, #0
 80005a8:	e73e      	b.n	8000428 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_f2d>:
 80005ac:	0042      	lsls	r2, r0, #1
 80005ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ba:	bf1f      	itttt	ne
 80005bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c8:	4770      	bxne	lr
 80005ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ce:	bf08      	it	eq
 80005d0:	4770      	bxeq	lr
 80005d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d6:	bf04      	itt	eq
 80005d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	e71c      	b.n	8000428 <__adddf3+0x138>
 80005ee:	bf00      	nop

080005f0 <__aeabi_ul2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	e00a      	b.n	8000616 <__aeabi_l2d+0x16>

08000600 <__aeabi_l2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060e:	d502      	bpl.n	8000616 <__aeabi_l2d+0x16>
 8000610:	4240      	negs	r0, r0
 8000612:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000616:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000622:	f43f aed8 	beq.w	80003d6 <__adddf3+0xe6>
 8000626:	f04f 0203 	mov.w	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000636:	bf18      	it	ne
 8000638:	3203      	addne	r2, #3
 800063a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	fa00 fc03 	lsl.w	ip, r0, r3
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 fe03 	lsl.w	lr, r1, r3
 800064e:	ea40 000e 	orr.w	r0, r0, lr
 8000652:	fa21 f102 	lsr.w	r1, r1, r2
 8000656:	4414      	add	r4, r2
 8000658:	e6bd      	b.n	80003d6 <__adddf3+0xe6>
 800065a:	bf00      	nop

0800065c <__aeabi_dmul>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066a:	bf1d      	ittte	ne
 800066c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000670:	ea94 0f0c 	teqne	r4, ip
 8000674:	ea95 0f0c 	teqne	r5, ip
 8000678:	f000 f8de 	bleq	8000838 <__aeabi_dmul+0x1dc>
 800067c:	442c      	add	r4, r5
 800067e:	ea81 0603 	eor.w	r6, r1, r3
 8000682:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000686:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068e:	bf18      	it	ne
 8000690:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069c:	d038      	beq.n	8000710 <__aeabi_dmul+0xb4>
 800069e:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a2:	f04f 0500 	mov.w	r5, #0
 80006a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b2:	f04f 0600 	mov.w	r6, #0
 80006b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ba:	f09c 0f00 	teq	ip, #0
 80006be:	bf18      	it	ne
 80006c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d0:	d204      	bcs.n	80006dc <__aeabi_dmul+0x80>
 80006d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d6:	416d      	adcs	r5, r5
 80006d8:	eb46 0606 	adc.w	r6, r6, r6
 80006dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f4:	bf88      	it	hi
 80006f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fa:	d81e      	bhi.n	800073a <__aeabi_dmul+0xde>
 80006fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000700:	bf08      	it	eq
 8000702:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000714:	ea46 0101 	orr.w	r1, r6, r1
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000724:	bfc2      	ittt	gt
 8000726:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072e:	bd70      	popgt	{r4, r5, r6, pc}
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f04f 0e00 	mov.w	lr, #0
 8000738:	3c01      	subs	r4, #1
 800073a:	f300 80ab 	bgt.w	8000894 <__aeabi_dmul+0x238>
 800073e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000742:	bfde      	ittt	le
 8000744:	2000      	movle	r0, #0
 8000746:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074a:	bd70      	pople	{r4, r5, r6, pc}
 800074c:	f1c4 0400 	rsb	r4, r4, #0
 8000750:	3c20      	subs	r4, #32
 8000752:	da35      	bge.n	80007c0 <__aeabi_dmul+0x164>
 8000754:	340c      	adds	r4, #12
 8000756:	dc1b      	bgt.n	8000790 <__aeabi_dmul+0x134>
 8000758:	f104 0414 	add.w	r4, r4, #20
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f305 	lsl.w	r3, r0, r5
 8000764:	fa20 f004 	lsr.w	r0, r0, r4
 8000768:	fa01 f205 	lsl.w	r2, r1, r5
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	fa21 f604 	lsr.w	r6, r1, r4
 8000780:	eb42 0106 	adc.w	r1, r2, r6
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 040c 	rsb	r4, r4, #12
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f304 	lsl.w	r3, r0, r4
 800079c:	fa20 f005 	lsr.w	r0, r0, r5
 80007a0:	fa01 f204 	lsl.w	r2, r1, r4
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b0:	f141 0100 	adc.w	r1, r1, #0
 80007b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b8:	bf08      	it	eq
 80007ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f205 	lsl.w	r2, r0, r5
 80007c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007cc:	fa20 f304 	lsr.w	r3, r0, r4
 80007d0:	fa01 f205 	lsl.w	r2, r1, r5
 80007d4:	ea43 0302 	orr.w	r3, r3, r2
 80007d8:	fa21 f004 	lsr.w	r0, r1, r4
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	fa21 f204 	lsr.w	r2, r1, r4
 80007e4:	ea20 0002 	bic.w	r0, r0, r2
 80007e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f0:	bf08      	it	eq
 80007f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f094 0f00 	teq	r4, #0
 80007fc:	d10f      	bne.n	800081e <__aeabi_dmul+0x1c2>
 80007fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000802:	0040      	lsls	r0, r0, #1
 8000804:	eb41 0101 	adc.w	r1, r1, r1
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3c01      	subeq	r4, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1a6>
 8000812:	ea41 0106 	orr.w	r1, r1, r6
 8000816:	f095 0f00 	teq	r5, #0
 800081a:	bf18      	it	ne
 800081c:	4770      	bxne	lr
 800081e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	eb43 0303 	adc.w	r3, r3, r3
 8000828:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800082c:	bf08      	it	eq
 800082e:	3d01      	subeq	r5, #1
 8000830:	d0f7      	beq.n	8000822 <__aeabi_dmul+0x1c6>
 8000832:	ea43 0306 	orr.w	r3, r3, r6
 8000836:	4770      	bx	lr
 8000838:	ea94 0f0c 	teq	r4, ip
 800083c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000840:	bf18      	it	ne
 8000842:	ea95 0f0c 	teqne	r5, ip
 8000846:	d00c      	beq.n	8000862 <__aeabi_dmul+0x206>
 8000848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084c:	bf18      	it	ne
 800084e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000852:	d1d1      	bne.n	80007f8 <__aeabi_dmul+0x19c>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000866:	bf06      	itte	eq
 8000868:	4610      	moveq	r0, r2
 800086a:	4619      	moveq	r1, r3
 800086c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000870:	d019      	beq.n	80008a6 <__aeabi_dmul+0x24a>
 8000872:	ea94 0f0c 	teq	r4, ip
 8000876:	d102      	bne.n	800087e <__aeabi_dmul+0x222>
 8000878:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800087c:	d113      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 800087e:	ea95 0f0c 	teq	r5, ip
 8000882:	d105      	bne.n	8000890 <__aeabi_dmul+0x234>
 8000884:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000888:	bf1c      	itt	ne
 800088a:	4610      	movne	r0, r2
 800088c:	4619      	movne	r1, r3
 800088e:	d10a      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a0:	f04f 0000 	mov.w	r0, #0
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <__aeabi_ddiv>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008be:	bf1d      	ittte	ne
 80008c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c4:	ea94 0f0c 	teqne	r4, ip
 80008c8:	ea95 0f0c 	teqne	r5, ip
 80008cc:	f000 f8a7 	bleq	8000a1e <__aeabi_ddiv+0x16e>
 80008d0:	eba4 0405 	sub.w	r4, r4, r5
 80008d4:	ea81 0e03 	eor.w	lr, r1, r3
 80008d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e0:	f000 8088 	beq.w	80009f4 <__aeabi_ddiv+0x144>
 80008e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000900:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000904:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000908:	429d      	cmp	r5, r3
 800090a:	bf08      	it	eq
 800090c:	4296      	cmpeq	r6, r2
 800090e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000912:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000916:	d202      	bcs.n	800091e <__aeabi_ddiv+0x6e>
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	1ab6      	subs	r6, r6, r2
 8000920:	eb65 0503 	sbc.w	r5, r5, r3
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 000c 	orrcs.w	r0, r0, ip
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	ebb6 0e02 	subs.w	lr, r6, r2
 800097e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000982:	bf22      	ittt	cs
 8000984:	1ab6      	subcs	r6, r6, r2
 8000986:	4675      	movcs	r5, lr
 8000988:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800098c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000990:	d018      	beq.n	80009c4 <__aeabi_ddiv+0x114>
 8000992:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000996:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ae:	d1c0      	bne.n	8000932 <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	d10b      	bne.n	80009ce <__aeabi_ddiv+0x11e>
 80009b6:	ea41 0100 	orr.w	r1, r1, r0
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c2:	e7b6      	b.n	8000932 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	bf04      	itt	eq
 80009ca:	4301      	orreq	r1, r0
 80009cc:	2000      	moveq	r0, #0
 80009ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d2:	bf88      	it	hi
 80009d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d8:	f63f aeaf 	bhi.w	800073a <__aeabi_dmul+0xde>
 80009dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e0:	bf04      	itt	eq
 80009e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ea:	f150 0000 	adcs.w	r0, r0, #0
 80009ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a00:	bfc2      	ittt	gt
 8000a02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a10:	f04f 0e00 	mov.w	lr, #0
 8000a14:	3c01      	subs	r4, #1
 8000a16:	e690      	b.n	800073a <__aeabi_dmul+0xde>
 8000a18:	ea45 0e06 	orr.w	lr, r5, r6
 8000a1c:	e68d      	b.n	800073a <__aeabi_dmul+0xde>
 8000a1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	bf08      	it	eq
 8000a28:	ea95 0f0c 	teqeq	r5, ip
 8000a2c:	f43f af3b 	beq.w	80008a6 <__aeabi_dmul+0x24a>
 8000a30:	ea94 0f0c 	teq	r4, ip
 8000a34:	d10a      	bne.n	8000a4c <__aeabi_ddiv+0x19c>
 8000a36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3a:	f47f af34 	bne.w	80008a6 <__aeabi_dmul+0x24a>
 8000a3e:	ea95 0f0c 	teq	r5, ip
 8000a42:	f47f af25 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e72c      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a4c:	ea95 0f0c 	teq	r5, ip
 8000a50:	d106      	bne.n	8000a60 <__aeabi_ddiv+0x1b0>
 8000a52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a56:	f43f aefd 	beq.w	8000854 <__aeabi_dmul+0x1f8>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e722      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6a:	f47f aec5 	bne.w	80007f8 <__aeabi_dmul+0x19c>
 8000a6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a72:	f47f af0d 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7a:	f47f aeeb 	bne.w	8000854 <__aeabi_dmul+0x1f8>
 8000a7e:	e712      	b.n	80008a6 <__aeabi_dmul+0x24a>

08000a80 <__gedf2>:
 8000a80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a84:	e006      	b.n	8000a94 <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__ledf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	e002      	b.n	8000a94 <__cmpdf2+0x4>
 8000a8e:	bf00      	nop

08000a90 <__cmpdf2>:
 8000a90:	f04f 0c01 	mov.w	ip, #1
 8000a94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aaa:	d01b      	beq.n	8000ae4 <__cmpdf2+0x54>
 8000aac:	b001      	add	sp, #4
 8000aae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ab2:	bf0c      	ite	eq
 8000ab4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab8:	ea91 0f03 	teqne	r1, r3
 8000abc:	bf02      	ittt	eq
 8000abe:	ea90 0f02 	teqeq	r0, r2
 8000ac2:	2000      	moveq	r0, #0
 8000ac4:	4770      	bxeq	lr
 8000ac6:	f110 0f00 	cmn.w	r0, #0
 8000aca:	ea91 0f03 	teq	r1, r3
 8000ace:	bf58      	it	pl
 8000ad0:	4299      	cmppl	r1, r3
 8000ad2:	bf08      	it	eq
 8000ad4:	4290      	cmpeq	r0, r2
 8000ad6:	bf2c      	ite	cs
 8000ad8:	17d8      	asrcs	r0, r3, #31
 8000ada:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ade:	f040 0001 	orr.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__cmpdf2+0x64>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d107      	bne.n	8000b04 <__cmpdf2+0x74>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d1d6      	bne.n	8000aac <__cmpdf2+0x1c>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d0d3      	beq.n	8000aac <__cmpdf2+0x1c>
 8000b04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdrcmple>:
 8000b0c:	4684      	mov	ip, r0
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4662      	mov	r2, ip
 8000b12:	468c      	mov	ip, r1
 8000b14:	4619      	mov	r1, r3
 8000b16:	4663      	mov	r3, ip
 8000b18:	e000      	b.n	8000b1c <__aeabi_cdcmpeq>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdcmpeq>:
 8000b1c:	b501      	push	{r0, lr}
 8000b1e:	f7ff ffb7 	bl	8000a90 <__cmpdf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	bf48      	it	mi
 8000b26:	f110 0f00 	cmnmi.w	r0, #0
 8000b2a:	bd01      	pop	{r0, pc}

08000b2c <__aeabi_dcmpeq>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff fff4 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b34:	bf0c      	ite	eq
 8000b36:	2001      	moveq	r0, #1
 8000b38:	2000      	movne	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmplt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffea 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmple>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffe0 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpge>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffce 	bl	8000b0c <__aeabi_cdrcmple>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpgt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffc4 	bl	8000b0c <__aeabi_cdrcmple>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c94:	f000 b9a4 	b.w	8000fe0 <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f83c 	bl	8000d1c <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_d2lz>:
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	460d      	mov	r5, r1
 8000cba:	f7ff ff41 	bl	8000b40 <__aeabi_dcmplt>
 8000cbe:	b928      	cbnz	r0, 8000ccc <__aeabi_d2lz+0x1c>
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	4629      	mov	r1, r5
 8000cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc8:	f000 b80a 	b.w	8000ce0 <__aeabi_d2ulz>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cd2:	f000 f805 	bl	8000ce0 <__aeabi_d2ulz>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	bd38      	pop	{r3, r4, r5, pc}
 8000cde:	bf00      	nop

08000ce0 <__aeabi_d2ulz>:
 8000ce0:	b5d0      	push	{r4, r6, r7, lr}
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__aeabi_d2ulz+0x34>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	4606      	mov	r6, r0
 8000ce8:	460f      	mov	r7, r1
 8000cea:	f7ff fcb7 	bl	800065c <__aeabi_dmul>
 8000cee:	f000 f979 	bl	8000fe4 <__aeabi_d2uiz>
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	f7ff fc38 	bl	8000568 <__aeabi_ui2d>
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <__aeabi_d2ulz+0x38>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f7ff fcae 	bl	800065c <__aeabi_dmul>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	4630      	mov	r0, r6
 8000d06:	4639      	mov	r1, r7
 8000d08:	f7ff faf0 	bl	80002ec <__aeabi_dsub>
 8000d0c:	f000 f96a 	bl	8000fe4 <__aeabi_d2uiz>
 8000d10:	4621      	mov	r1, r4
 8000d12:	bdd0      	pop	{r4, r6, r7, pc}
 8000d14:	3df00000 	.word	0x3df00000
 8000d18:	41f00000 	.word	0x41f00000

08000d1c <__udivmoddi4>:
 8000d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d20:	9d08      	ldr	r5, [sp, #32]
 8000d22:	4604      	mov	r4, r0
 8000d24:	468c      	mov	ip, r1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 8083 	bne.w	8000e32 <__udivmoddi4+0x116>
 8000d2c:	428a      	cmp	r2, r1
 8000d2e:	4617      	mov	r7, r2
 8000d30:	d947      	bls.n	8000dc2 <__udivmoddi4+0xa6>
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	b142      	cbz	r2, 8000d4a <__udivmoddi4+0x2e>
 8000d38:	f1c2 0020 	rsb	r0, r2, #32
 8000d3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d40:	4091      	lsls	r1, r2
 8000d42:	4097      	lsls	r7, r2
 8000d44:	ea40 0c01 	orr.w	ip, r0, r1
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d4e:	0c23      	lsrs	r3, r4, #16
 8000d50:	fbbc f6f8 	udiv	r6, ip, r8
 8000d54:	fa1f fe87 	uxth.w	lr, r7
 8000d58:	fb08 c116 	mls	r1, r8, r6, ip
 8000d5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d60:	fb06 f10e 	mul.w	r1, r6, lr
 8000d64:	4299      	cmp	r1, r3
 8000d66:	d909      	bls.n	8000d7c <__udivmoddi4+0x60>
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d6e:	f080 8119 	bcs.w	8000fa4 <__udivmoddi4+0x288>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 8116 	bls.w	8000fa4 <__udivmoddi4+0x288>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	443b      	add	r3, r7
 8000d7c:	1a5b      	subs	r3, r3, r1
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3310 	mls	r3, r8, r0, r3
 8000d88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x8c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d9a:	f080 8105 	bcs.w	8000fa8 <__udivmoddi4+0x28c>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f240 8102 	bls.w	8000fa8 <__udivmoddi4+0x28c>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dac:	eba4 040e 	sub.w	r4, r4, lr
 8000db0:	2600      	movs	r6, #0
 8000db2:	b11d      	cbz	r5, 8000dbc <__udivmoddi4+0xa0>
 8000db4:	40d4      	lsrs	r4, r2
 8000db6:	2300      	movs	r3, #0
 8000db8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	b902      	cbnz	r2, 8000dc6 <__udivmoddi4+0xaa>
 8000dc4:	deff      	udf	#255	; 0xff
 8000dc6:	fab2 f282 	clz	r2, r2
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	d150      	bne.n	8000e70 <__udivmoddi4+0x154>
 8000dce:	1bcb      	subs	r3, r1, r7
 8000dd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd4:	fa1f f887 	uxth.w	r8, r7
 8000dd8:	2601      	movs	r6, #1
 8000dda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dde:	0c21      	lsrs	r1, r4, #16
 8000de0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de8:	fb08 f30c 	mul.w	r3, r8, ip
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0xe4>
 8000df0:	1879      	adds	r1, r7, r1
 8000df2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0xe2>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	f200 80e9 	bhi.w	8000fd0 <__udivmoddi4+0x2b4>
 8000dfe:	4684      	mov	ip, r0
 8000e00:	1ac9      	subs	r1, r1, r3
 8000e02:	b2a3      	uxth	r3, r4
 8000e04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e10:	fb08 f800 	mul.w	r8, r8, r0
 8000e14:	45a0      	cmp	r8, r4
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0x10c>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0x10a>
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	f200 80d9 	bhi.w	8000fd8 <__udivmoddi4+0x2bc>
 8000e26:	4618      	mov	r0, r3
 8000e28:	eba4 0408 	sub.w	r4, r4, r8
 8000e2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e30:	e7bf      	b.n	8000db2 <__udivmoddi4+0x96>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d909      	bls.n	8000e4a <__udivmoddi4+0x12e>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	f000 80b1 	beq.w	8000f9e <__udivmoddi4+0x282>
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e42:	4630      	mov	r0, r6
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	fab3 f683 	clz	r6, r3
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	d14a      	bne.n	8000ee8 <__udivmoddi4+0x1cc>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d302      	bcc.n	8000e5c <__udivmoddi4+0x140>
 8000e56:	4282      	cmp	r2, r0
 8000e58:	f200 80b8 	bhi.w	8000fcc <__udivmoddi4+0x2b0>
 8000e5c:	1a84      	subs	r4, r0, r2
 8000e5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000e62:	2001      	movs	r0, #1
 8000e64:	468c      	mov	ip, r1
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d0a8      	beq.n	8000dbc <__udivmoddi4+0xa0>
 8000e6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0xa0>
 8000e70:	f1c2 0320 	rsb	r3, r2, #32
 8000e74:	fa20 f603 	lsr.w	r6, r0, r3
 8000e78:	4097      	lsls	r7, r2
 8000e7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e82:	40d9      	lsrs	r1, r3
 8000e84:	4330      	orrs	r0, r6
 8000e86:	0c03      	lsrs	r3, r0, #16
 8000e88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e8c:	fa1f f887 	uxth.w	r8, r7
 8000e90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e98:	fb06 f108 	mul.w	r1, r6, r8
 8000e9c:	4299      	cmp	r1, r3
 8000e9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea2:	d909      	bls.n	8000eb8 <__udivmoddi4+0x19c>
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eaa:	f080 808d 	bcs.w	8000fc8 <__udivmoddi4+0x2ac>
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	f240 808a 	bls.w	8000fc8 <__udivmoddi4+0x2ac>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	443b      	add	r3, r7
 8000eb8:	1a5b      	subs	r3, r3, r1
 8000eba:	b281      	uxth	r1, r0
 8000ebc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb00 f308 	mul.w	r3, r0, r8
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d907      	bls.n	8000ee0 <__udivmoddi4+0x1c4>
 8000ed0:	1879      	adds	r1, r7, r1
 8000ed2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ed6:	d273      	bcs.n	8000fc0 <__udivmoddi4+0x2a4>
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d971      	bls.n	8000fc0 <__udivmoddi4+0x2a4>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4439      	add	r1, r7
 8000ee0:	1acb      	subs	r3, r1, r3
 8000ee2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ee6:	e778      	b.n	8000dda <__udivmoddi4+0xbe>
 8000ee8:	f1c6 0c20 	rsb	ip, r6, #32
 8000eec:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ef4:	431c      	orrs	r4, r3
 8000ef6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000efa:	fa01 f306 	lsl.w	r3, r1, r6
 8000efe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f06:	431f      	orrs	r7, r3
 8000f08:	0c3b      	lsrs	r3, r7, #16
 8000f0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0e:	fa1f f884 	uxth.w	r8, r4
 8000f12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f1e:	458a      	cmp	sl, r1
 8000f20:	fa02 f206 	lsl.w	r2, r2, r6
 8000f24:	fa00 f306 	lsl.w	r3, r0, r6
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x220>
 8000f2a:	1861      	adds	r1, r4, r1
 8000f2c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f30:	d248      	bcs.n	8000fc4 <__udivmoddi4+0x2a8>
 8000f32:	458a      	cmp	sl, r1
 8000f34:	d946      	bls.n	8000fc4 <__udivmoddi4+0x2a8>
 8000f36:	f1a9 0902 	sub.w	r9, r9, #2
 8000f3a:	4421      	add	r1, r4
 8000f3c:	eba1 010a 	sub.w	r1, r1, sl
 8000f40:	b2bf      	uxth	r7, r7
 8000f42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f4e:	fb00 f808 	mul.w	r8, r0, r8
 8000f52:	45b8      	cmp	r8, r7
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x24a>
 8000f56:	19e7      	adds	r7, r4, r7
 8000f58:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f5c:	d22e      	bcs.n	8000fbc <__udivmoddi4+0x2a0>
 8000f5e:	45b8      	cmp	r8, r7
 8000f60:	d92c      	bls.n	8000fbc <__udivmoddi4+0x2a0>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4427      	add	r7, r4
 8000f66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f6a:	eba7 0708 	sub.w	r7, r7, r8
 8000f6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000f72:	454f      	cmp	r7, r9
 8000f74:	46c6      	mov	lr, r8
 8000f76:	4649      	mov	r1, r9
 8000f78:	d31a      	bcc.n	8000fb0 <__udivmoddi4+0x294>
 8000f7a:	d017      	beq.n	8000fac <__udivmoddi4+0x290>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x27a>
 8000f7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000f82:	eb67 0701 	sbc.w	r7, r7, r1
 8000f86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f8a:	40f2      	lsrs	r2, r6
 8000f8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f90:	40f7      	lsrs	r7, r6
 8000f92:	e9c5 2700 	strd	r2, r7, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	462e      	mov	r6, r5
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	e70b      	b.n	8000dbc <__udivmoddi4+0xa0>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	e6e9      	b.n	8000d7c <__udivmoddi4+0x60>
 8000fa8:	4618      	mov	r0, r3
 8000faa:	e6fd      	b.n	8000da8 <__udivmoddi4+0x8c>
 8000fac:	4543      	cmp	r3, r8
 8000fae:	d2e5      	bcs.n	8000f7c <__udivmoddi4+0x260>
 8000fb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000fb8:	3801      	subs	r0, #1
 8000fba:	e7df      	b.n	8000f7c <__udivmoddi4+0x260>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e7d2      	b.n	8000f66 <__udivmoddi4+0x24a>
 8000fc0:	4660      	mov	r0, ip
 8000fc2:	e78d      	b.n	8000ee0 <__udivmoddi4+0x1c4>
 8000fc4:	4681      	mov	r9, r0
 8000fc6:	e7b9      	b.n	8000f3c <__udivmoddi4+0x220>
 8000fc8:	4666      	mov	r6, ip
 8000fca:	e775      	b.n	8000eb8 <__udivmoddi4+0x19c>
 8000fcc:	4630      	mov	r0, r6
 8000fce:	e74a      	b.n	8000e66 <__udivmoddi4+0x14a>
 8000fd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd4:	4439      	add	r1, r7
 8000fd6:	e713      	b.n	8000e00 <__udivmoddi4+0xe4>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	443c      	add	r4, r7
 8000fdc:	e724      	b.n	8000e28 <__udivmoddi4+0x10c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2uiz>:
 8000fe4:	004a      	lsls	r2, r1, #1
 8000fe6:	d211      	bcs.n	800100c <__aeabi_d2uiz+0x28>
 8000fe8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fec:	d211      	bcs.n	8001012 <__aeabi_d2uiz+0x2e>
 8000fee:	d50d      	bpl.n	800100c <__aeabi_d2uiz+0x28>
 8000ff0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ff4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ff8:	d40e      	bmi.n	8001018 <__aeabi_d2uiz+0x34>
 8000ffa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001002:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001006:	fa23 f002 	lsr.w	r0, r3, r2
 800100a:	4770      	bx	lr
 800100c:	f04f 0000 	mov.w	r0, #0
 8001010:	4770      	bx	lr
 8001012:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001016:	d102      	bne.n	800101e <__aeabi_d2uiz+0x3a>
 8001018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800101c:	4770      	bx	lr
 800101e:	f04f 0000 	mov.w	r0, #0
 8001022:	4770      	bx	lr

08001024 <app_main_init>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_init()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af02      	add	r7, sp, #8
	NT35510_Init();
 800102a:	f000 fcd3 	bl	80019d4 <NT35510_Init>

	LCD_ClearScreen(0x7FFFU);
 800102e:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8001032:	f000 fb55 	bl	80016e0 <LCD_ClearScreen>
	LCD_SetDirection(HORIZONTAL_RIGHT);
 8001036:	2003      	movs	r0, #3
 8001038:	f000 fafa 	bl	8001630 <LCD_SetDirection>
	LCD_ClearScreen(0xffffU);
 800103c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001040:	f000 fb4e 	bl	80016e0 <LCD_ClearScreen>

	// Draw frame:
	LCD_DrawLine(10, 10, 790, 10, 0xF800U,4);		// up
 8001044:	2304      	movs	r3, #4
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	230a      	movs	r3, #10
 8001050:	f240 3216 	movw	r2, #790	; 0x316
 8001054:	210a      	movs	r1, #10
 8001056:	200a      	movs	r0, #10
 8001058:	f000 fb95 	bl	8001786 <LCD_DrawLine>
	LCD_DrawLine(10, 10, 10, 470, 0x07E0U,4);		// left
 800105c:	2304      	movs	r3, #4
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800106a:	220a      	movs	r2, #10
 800106c:	210a      	movs	r1, #10
 800106e:	200a      	movs	r0, #10
 8001070:	f000 fb89 	bl	8001786 <LCD_DrawLine>
	LCD_DrawLine(790, 10, 790, 470, 0x001FU,4);		// right
 8001074:	2304      	movs	r3, #4
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	231f      	movs	r3, #31
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8001080:	f240 3216 	movw	r2, #790	; 0x316
 8001084:	210a      	movs	r1, #10
 8001086:	f240 3016 	movw	r0, #790	; 0x316
 800108a:	f000 fb7c 	bl	8001786 <LCD_DrawLine>
	LCD_DrawLine(10, 470, 790, 470, 0xF800U,4);		// down
 800108e:	2304      	movs	r3, #4
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800109c:	f240 3216 	movw	r2, #790	; 0x316
 80010a0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80010a4:	200a      	movs	r0, #10
 80010a6:	f000 fb6e 	bl	8001786 <LCD_DrawLine>


	ov7670_init();
 80010aa:	f001 fab7 	bl	800261c <ov7670_init>
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <app_main_loop>:

//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_loop()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af02      	add	r7, sp, #8
	uint8_t buff[10] = {0};
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	809a      	strh	r2, [r3, #4]
	//uint8_t i2cDatToSnd[5] = {0};
	//uint8_t i2cDatToRec[5] = {0};
	uint32_t milis = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t milis2 = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
	int j,z,k = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

	LCD_SetDirection(VERTICAL_UP);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f000 faab 	bl	8001630 <LCD_SetDirection>
	LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
 80010da:	f240 1303 	movw	r3, #259	; 0x103
 80010de:	f240 1253 	movw	r2, #339	; 0x153
 80010e2:	2114      	movs	r1, #20
 80010e4:	2014      	movs	r0, #20
 80010e6:	f000 fa3b 	bl	8001560 <LCD_SetWindow>
	tflite_micro_setup();
 80010ea:	f00f fb2b 	bl	8010744 <setup>



	while(1)
	{
		tflite_micro_loop();
 80010ee:	f00f fc1b 	bl	8010928 <loop>
		sprintf(buff,"%03d",abs(g_person_score));
 80010f2:	4b79      	ldr	r3, [pc, #484]	; (80012d8 <app_main_loop+0x224>)
 80010f4:	f993 3000 	ldrsb.w	r3, [r3]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bfb8      	it	lt
 80010fc:	425b      	neglt	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4975      	ldr	r1, [pc, #468]	; (80012dc <app_main_loop+0x228>)
 8001106:	4618      	mov	r0, r3
 8001108:	f024 fd48 	bl	8025b9c <siprintf>
		LCD_PrintStr(20, 400, 0xffff, 0x0000, buff, 5);
 800110c:	2305      	movs	r3, #5
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2300      	movs	r3, #0
 8001116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800111e:	2014      	movs	r0, #20
 8001120:	f000 fc22 	bl	8001968 <LCD_PrintStr>

		uart_tx_process();
 8001124:	f001 fd74 	bl	8002c10 <uart_tx_process>
		uart_rx_process();
 8001128:	f001 fe9e 	bl	8002e68 <uart_rx_process>

		LCD_SetWindow(20 , 280, 20+96-1, 280+96-1); // 320 x 240
 800112c:	f240 1377 	movw	r3, #375	; 0x177
 8001130:	2273      	movs	r2, #115	; 0x73
 8001132:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001136:	2014      	movs	r0, #20
 8001138:	f000 fa12 	bl	8001560 <LCD_SetWindow>
		for(j = 72; j <= 72 + 96; j++)
 800113c:	2348      	movs	r3, #72	; 0x48
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	e072      	b.n	8001228 <app_main_loop+0x174>
		{
			for(z = 112*2; z < 112*2 + 96*2; z+=2)
 8001142:	23e0      	movs	r3, #224	; 0xe0
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	e068      	b.n	800121a <app_main_loop+0x166>
			{
				uint8_t gray =
						(((g_cam_buff[(j-1)*320*2+z] & 0xF8U) >> 3) +	//red
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	01db      	lsls	r3, r3, #7
 8001154:	461a      	mov	r2, r3
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	4413      	add	r3, r2
 800115a:	4a61      	ldr	r2, [pc, #388]	; (80012e0 <app_main_loop+0x22c>)
 800115c:	5cd3      	ldrb	r3, [r2, r3]
 800115e:	08db      	lsrs	r3, r3, #3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4618      	mov	r0, r3
								(((g_cam_buff[(j-1)*320*2+z] & 0x07U) << 3) | ((g_cam_buff[(j-1)*320*2+z+1] & 0xC0U) >> 6)) +	//green
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	1e5a      	subs	r2, r3, #1
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	01db      	lsls	r3, r3, #7
 8001170:	461a      	mov	r2, r3
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	4413      	add	r3, r2
 8001176:	4a5a      	ldr	r2, [pc, #360]	; (80012e0 <app_main_loop+0x22c>)
 8001178:	5cd3      	ldrb	r3, [r2, r3]
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	f003 0138 	and.w	r1, r3, #56	; 0x38
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	1e5a      	subs	r2, r3, #1
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	01db      	lsls	r3, r3, #7
 800118c:	461a      	mov	r2, r3
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	4413      	add	r3, r2
 8001192:	3301      	adds	r3, #1
 8001194:	4a52      	ldr	r2, [pc, #328]	; (80012e0 <app_main_loop+0x22c>)
 8001196:	5cd3      	ldrb	r3, [r2, r3]
 8001198:	099b      	lsrs	r3, r3, #6
 800119a:	b2db      	uxtb	r3, r3
 800119c:	430b      	orrs	r3, r1
						(((g_cam_buff[(j-1)*320*2+z] & 0xF8U) >> 3) +	//red
 800119e:	18c1      	adds	r1, r0, r3
								((g_cam_buff[(j-1)*320*2+z+1] & 0x1FU))	//blue
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	1e5a      	subs	r2, r3, #1
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	01db      	lsls	r3, r3, #7
 80011ac:	461a      	mov	r2, r3
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4413      	add	r3, r2
 80011b2:	3301      	adds	r3, #1
 80011b4:	4a4a      	ldr	r2, [pc, #296]	; (80012e0 <app_main_loop+0x22c>)
 80011b6:	5cd3      	ldrb	r3, [r2, r3]
 80011b8:	f003 031f 	and.w	r3, r3, #31
								(((g_cam_buff[(j-1)*320*2+z] & 0x07U) << 3) | ((g_cam_buff[(j-1)*320*2+z+1] & 0xC0U) >> 6)) +	//green
 80011bc:	440b      	add	r3, r1
						) / 3;
 80011be:	4a49      	ldr	r2, [pc, #292]	; (80012e4 <app_main_loop+0x230>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	085b      	lsrs	r3, r3, #1
				uint8_t gray =
 80011c6:	74fb      	strb	r3, [r7, #19]

				uint16_t graysc =
						(((gray << 11) & 0xF800U) |
 80011c8:	7cfb      	ldrb	r3, [r7, #19]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	02db      	lsls	r3, r3, #11
 80011ce:	b29a      	uxth	r2, r3
								((gray << 6) & 0x07C0U) |
 80011d0:	7cfb      	ldrb	r3, [r7, #19]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	019b      	lsls	r3, r3, #6
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80011dc:	b29b      	uxth	r3, r3
						(((gray << 11) & 0xF800U) |
 80011de:	4313      	orrs	r3, r2
 80011e0:	b29a      	uxth	r2, r3
								(gray & 0x001FU));
 80011e2:	7cfb      	ldrb	r3, [r7, #19]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	b29b      	uxth	r3, r3
				uint16_t graysc =
 80011ec:	4313      	orrs	r3, r2
 80011ee:	823b      	strh	r3, [r7, #16]

				g_cam_gray_frame[k] = gray;
 80011f0:	4a3d      	ldr	r2, [pc, #244]	; (80012e8 <app_main_loop+0x234>)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	4413      	add	r3, r2
 80011f6:	7cfa      	ldrb	r2, [r7, #19]
 80011f8:	701a      	strb	r2, [r3, #0]
				k++;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
				if(k > OV7670_GRAY_SIZE)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 8001206:	dd01      	ble.n	800120c <app_main_loop+0x158>
					k = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

				FSMC_WR_DAT(graysc);
 800120c:	8a3b      	ldrh	r3, [r7, #16]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f994 	bl	800153c <FSMC_WR_DAT>
			for(z = 112*2; z < 112*2 + 96*2; z+=2)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	3302      	adds	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8001220:	db92      	blt.n	8001148 <app_main_loop+0x94>
		for(j = 72; j <= 72 + 96; j++)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3301      	adds	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	2ba8      	cmp	r3, #168	; 0xa8
 800122c:	dd89      	ble.n	8001142 <app_main_loop+0x8e>
			}
		}


		LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
 800122e:	f240 1303 	movw	r3, #259	; 0x103
 8001232:	f240 1253 	movw	r2, #339	; 0x153
 8001236:	2114      	movs	r1, #20
 8001238:	2014      	movs	r0, #20
 800123a:	f000 f991 	bl	8001560 <LCD_SetWindow>
		for(j = 0; j <= OV7670_FRAME_SIZE_QVGA - 2; j+=2)
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	e013      	b.n	800126c <app_main_loop+0x1b8>
			//		(gray & 0x001FU));
			// FSMC_WR_DAT(graysc);


			// RRRRR GGGGGG BBBBB
			FSMC_WR_DAT(((g_cam_buff[j] << 8) & 0xFF00U) | (g_cam_buff[j+1] & 0x00FFU));
 8001244:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <app_main_loop+0x22c>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	4413      	add	r3, r2
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b29b      	uxth	r3, r3
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	b29a      	uxth	r2, r3
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	4922      	ldr	r1, [pc, #136]	; (80012e0 <app_main_loop+0x22c>)
 8001258:	5ccb      	ldrb	r3, [r1, r3]
 800125a:	b29b      	uxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b29b      	uxth	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f96b 	bl	800153c <FSMC_WR_DAT>
		for(j = 0; j <= OV7670_FRAME_SIZE_QVGA - 2; j+=2)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3302      	adds	r3, #2
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	4a1f      	ldr	r2, [pc, #124]	; (80012ec <app_main_loop+0x238>)
 8001270:	4293      	cmp	r3, r2
 8001272:	dde7      	ble.n	8001244 <app_main_loop+0x190>
		}

		if(HAL_GetTick() > milis + 1000)
 8001274:	f002 f884 	bl	8003380 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001280:	429a      	cmp	r2, r3
 8001282:	d913      	bls.n	80012ac <app_main_loop+0x1f8>
		{
			milis = HAL_GetTick();
 8001284:	f002 f87c 	bl	8003380 <HAL_GetTick>
 8001288:	6278      	str	r0, [r7, #36]	; 0x24
			if(milis >= (0xFFFFFFFFU - 1000U))
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	f46f 727a 	mvn.w	r2, #1000	; 0x3e8
 8001290:	4293      	cmp	r3, r2
 8001292:	d302      	bcc.n	800129a <app_main_loop+0x1e6>
			{
				milis = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
 8001298:	e008      	b.n	80012ac <app_main_loop+0x1f8>
			}
			else
			{// every second
				sprintf(buff, "0x\r\n");
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4914      	ldr	r1, [pc, #80]	; (80012f0 <app_main_loop+0x23c>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f024 fc7c 	bl	8025b9c <siprintf>
				uart_write(buff);
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 fd2a 	bl	8002d00 <uart_write>
			}
		}
		if(HAL_GetTick() > milis2 + 5000)
 80012ac:	f002 f868 	bl	8003380 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80012b8:	3308      	adds	r3, #8
 80012ba:	429a      	cmp	r2, r3
 80012bc:	f67f af17 	bls.w	80010ee <app_main_loop+0x3a>
		{
			milis2 = HAL_GetTick();
 80012c0:	f002 f85e 	bl	8003380 <HAL_GetTick>
 80012c4:	6238      	str	r0, [r7, #32]
			if(milis2 >= (0xFFFFFFFFU - 5000U))
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <app_main_loop+0x240>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	f67f af0f 	bls.w	80010ee <app_main_loop+0x3a>
			{
				milis2 = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
		tflite_micro_loop();
 80012d4:	e70b      	b.n	80010ee <app_main_loop+0x3a>
 80012d6:	bf00      	nop
 80012d8:	200000a0 	.word	0x200000a0
 80012dc:	08026750 	.word	0x08026750
 80012e0:	200000b8 	.word	0x200000b8
 80012e4:	aaaaaaab 	.word	0xaaaaaaab
 80012e8:	20025b38 	.word	0x20025b38
 80012ec:	000257fe 	.word	0x000257fe
 80012f0:	08026758 	.word	0x08026758
 80012f4:	ffffec76 	.word	0xffffec76

080012f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_DMA_Init+0x30>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <MX_DMA_Init+0x30>)
 8001308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_DMA_Init+0x30>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]

}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	; 0x38
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
 8001342:	615a      	str	r2, [r3, #20]
 8001344:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001346:	463b      	mov	r3, r7
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
 8001354:	615a      	str	r2, [r3, #20]
 8001356:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <MX_FSMC_Init+0xf0>)
 800135a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800135e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001360:	4b2e      	ldr	r3, [pc, #184]	; (800141c <MX_FSMC_Init+0xf0>)
 8001362:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <MX_FSMC_Init+0xf4>)
 8001364:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <MX_FSMC_Init+0xf0>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <MX_FSMC_Init+0xf0>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <MX_FSMC_Init+0xf0>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <MX_FSMC_Init+0xf0>)
 800137a:	2210      	movs	r2, #16
 800137c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <MX_FSMC_Init+0xf0>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001384:	4b25      	ldr	r3, [pc, #148]	; (800141c <MX_FSMC_Init+0xf0>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <MX_FSMC_Init+0xf0>)
 800138c:	2200      	movs	r2, #0
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <MX_FSMC_Init+0xf0>)
 8001392:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001398:	4b20      	ldr	r3, [pc, #128]	; (800141c <MX_FSMC_Init+0xf0>)
 800139a:	2200      	movs	r2, #0
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MX_FSMC_Init+0xf0>)
 80013a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_FSMC_Init+0xf0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_FSMC_Init+0xf0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_FSMC_Init+0xf0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_FSMC_Init+0xf0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <MX_FSMC_Init+0xf0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 9;
 80013c4:	2309      	movs	r3, #9
 80013c6:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80013c8:	230f      	movs	r3, #15
 80013ca:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 5;
 80013cc:	2305      	movs	r3, #5
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80013d4:	2310      	movs	r3, #16
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80013d8:	2311      	movs	r3, #17
 80013da:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80013dc:	2300      	movs	r3, #0
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80013e4:	230f      	movs	r3, #15
 80013e6:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 80013e8:	2303      	movs	r3, #3
 80013ea:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80013f0:	2310      	movs	r3, #16
 80013f2:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80013f4:	2311      	movs	r3, #17
 80013f6:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80013fc:	463a      	mov	r2, r7
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_FSMC_Init+0xf0>)
 8001406:	f005 ffd9 	bl	80073bc <HAL_SRAM_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_FSMC_Init+0xe8>
  {
    Error_Handler( );
 8001410:	f000 ff6c 	bl	80022ec <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001414:	bf00      	nop
 8001416:	3738      	adds	r7, #56	; 0x38
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2004a268 	.word	0x2004a268
 8001420:	a0000104 	.word	0xa0000104

08001424 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001438:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <HAL_FSMC_MspInit+0xc8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d151      	bne.n	80014e4 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001440:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <HAL_FSMC_MspInit+0xc8>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <HAL_FSMC_MspInit+0xcc>)
 800144c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144e:	4a28      	ldr	r2, [pc, #160]	; (80014f0 <HAL_FSMC_MspInit+0xcc>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6393      	str	r3, [r2, #56]	; 0x38
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <HAL_FSMC_MspInit+0xcc>)
 8001458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001462:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001466:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001474:	230c      	movs	r3, #12
 8001476:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4619      	mov	r1, r3
 800147c:	481d      	ldr	r0, [pc, #116]	; (80014f4 <HAL_FSMC_MspInit+0xd0>)
 800147e:	f002 fb5d 	bl	8003b3c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001494:	230c      	movs	r3, #12
 8001496:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4816      	ldr	r0, [pc, #88]	; (80014f8 <HAL_FSMC_MspInit+0xd4>)
 800149e:	f002 fb4d 	bl	8003b3c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 80014a2:	f64c 63b0 	movw	r3, #52912	; 0xceb0
 80014a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014b4:	230c      	movs	r3, #12
 80014b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	480f      	ldr	r0, [pc, #60]	; (80014fc <HAL_FSMC_MspInit+0xd8>)
 80014be:	f002 fb3d 	bl	8003b3c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014d4:	230a      	movs	r3, #10
 80014d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	4808      	ldr	r0, [pc, #32]	; (8001500 <HAL_FSMC_MspInit+0xdc>)
 80014de:	f002 fb2d 	bl	8003b3c <HAL_GPIO_Init>
 80014e2:	e000      	b.n	80014e6 <HAL_FSMC_MspInit+0xc2>
    return;
 80014e4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200000a4 	.word	0x200000a4
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	40020800 	.word	0x40020800

08001504 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800150c:	f7ff ff8a 	bl	8001424 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <FSMC_WR_REG>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void FSMC_WR_REG(uint32_t Reg)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	LCD_FSMC->REG = Reg;
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <FSMC_WR_REG+0x20>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	b292      	uxth	r2, r2
 8001528:	801a      	strh	r2, [r3, #0]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000000 	.word	0x20000000

0800153c <FSMC_WR_DAT>:
* function   :
* parameters :N/A
* retvalue   :N/A
*******************************************************************************************************************************/
void FSMC_WR_DAT(uint16_t Dat)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
	LCD_FSMC->DAT = Dat;
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <FSMC_WR_DAT+0x20>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	88fa      	ldrh	r2, [r7, #6]
 800154c:	805a      	strh	r2, [r3, #2]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000000 	.word	0x20000000

08001560 <LCD_SetWindow>:
							LCD_SetDirection function. It calls to FSMC_WR_REG(RAMWR) function at the end.
* parameters :XS(x start address), YS(y start address), XE(x end address) and YE(y end address)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetWindow(uint16_t Xs, uint16_t Ys, uint16_t Xe, uint16_t Ye)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4604      	mov	r4, r0
 8001568:	4608      	mov	r0, r1
 800156a:	4611      	mov	r1, r2
 800156c:	461a      	mov	r2, r3
 800156e:	4623      	mov	r3, r4
 8001570:	80fb      	strh	r3, [r7, #6]
 8001572:	4603      	mov	r3, r0
 8001574:	80bb      	strh	r3, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	807b      	strh	r3, [r7, #2]
 800157a:	4613      	mov	r3, r2
 800157c:	803b      	strh	r3, [r7, #0]
	FSMC_WR_REG(CASET_XS_H);		FSMC_WR_DAT(Xs >> 8);
 800157e:	f44f 5028 	mov.w	r0, #10752	; 0x2a00
 8001582:	f7ff ffc9 	bl	8001518 <FSMC_WR_REG>
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	b29b      	uxth	r3, r3
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ffd5 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XS_L);		FSMC_WR_DAT(Xs & 0x00FFU);
 8001592:	f642 2001 	movw	r0, #10753	; 0x2a01
 8001596:	f7ff ffbf 	bl	8001518 <FSMC_WR_REG>
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ffcb 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_H);		FSMC_WR_DAT(Xe >> 8);
 80015a6:	f642 2002 	movw	r0, #10754	; 0x2a02
 80015aa:	f7ff ffb5 	bl	8001518 <FSMC_WR_REG>
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ffc1 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_L);		FSMC_WR_DAT(Xe & 0x00FFU);
 80015ba:	f642 2003 	movw	r0, #10755	; 0x2a03
 80015be:	f7ff ffab 	bl	8001518 <FSMC_WR_REG>
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ffb7 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_H);		FSMC_WR_DAT(Ys >> 8);
 80015ce:	f44f 502c 	mov.w	r0, #11008	; 0x2b00
 80015d2:	f7ff ffa1 	bl	8001518 <FSMC_WR_REG>
 80015d6:	88bb      	ldrh	r3, [r7, #4]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	b29b      	uxth	r3, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ffad 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_L);		FSMC_WR_DAT(Ys & 0x00FFU);
 80015e2:	f642 3001 	movw	r0, #11009	; 0x2b01
 80015e6:	f7ff ff97 	bl	8001518 <FSMC_WR_REG>
 80015ea:	88bb      	ldrh	r3, [r7, #4]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ffa3 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_H);		FSMC_WR_DAT(Ye >> 8);
 80015f6:	f642 3002 	movw	r0, #11010	; 0x2b02
 80015fa:	f7ff ff8d 	bl	8001518 <FSMC_WR_REG>
 80015fe:	883b      	ldrh	r3, [r7, #0]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	b29b      	uxth	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff99 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_L);		FSMC_WR_DAT(Ye & 0x00FFU);
 800160a:	f642 3003 	movw	r0, #11011	; 0x2b03
 800160e:	f7ff ff83 	bl	8001518 <FSMC_WR_REG>
 8001612:	883b      	ldrh	r3, [r7, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	b29b      	uxth	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff8f 	bl	800153c <FSMC_WR_DAT>

	FSMC_WR_REG(RAMWR);
 800161e:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8001622:	f7ff ff79 	bl	8001518 <FSMC_WR_REG>
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bd90      	pop	{r4, r7, pc}
	...

08001630 <LCD_SetDirection>:
							the selected orientation.
* parameters :Direction(Use Orientation Direction Definitions defined in FSMC_NT35510.h)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetDirection(uint8_t Direction)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
	switch(Direction)
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b03      	cmp	r3, #3
 800163e:	d84b      	bhi.n	80016d8 <LCD_SetDirection+0xa8>
 8001640:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <LCD_SetDirection+0x18>)
 8001642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001646:	bf00      	nop
 8001648:	08001659 	.word	0x08001659
 800164c:	08001679 	.word	0x08001679
 8001650:	08001699 	.word	0x08001699
 8001654:	080016b9 	.word	0x080016b9
	{
		case 0:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0000U);
 8001658:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 800165c:	f7ff ff5c 	bl	8001518 <FSMC_WR_REG>
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff ff6b 	bl	800153c <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 8001666:	f240 331f 	movw	r3, #799	; 0x31f
 800166a:	f240 12df 	movw	r2, #479	; 0x1df
 800166e:	2100      	movs	r1, #0
 8001670:	2000      	movs	r0, #0
 8001672:	f7ff ff75 	bl	8001560 <LCD_SetWindow>
		break;
 8001676:	e02f      	b.n	80016d8 <LCD_SetDirection+0xa8>
		case 1:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00C0U);
 8001678:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 800167c:	f7ff ff4c 	bl	8001518 <FSMC_WR_REG>
 8001680:	20c0      	movs	r0, #192	; 0xc0
 8001682:	f7ff ff5b 	bl	800153c <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 8001686:	f240 331f 	movw	r3, #799	; 0x31f
 800168a:	f240 12df 	movw	r2, #479	; 0x1df
 800168e:	2100      	movs	r1, #0
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff ff65 	bl	8001560 <LCD_SetWindow>
		break;
 8001696:	e01f      	b.n	80016d8 <LCD_SetDirection+0xa8>
		case 2:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0060U);
 8001698:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 800169c:	f7ff ff3c 	bl	8001518 <FSMC_WR_REG>
 80016a0:	2060      	movs	r0, #96	; 0x60
 80016a2:	f7ff ff4b 	bl	800153c <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 80016a6:	f240 13df 	movw	r3, #479	; 0x1df
 80016aa:	f240 321f 	movw	r2, #799	; 0x31f
 80016ae:	2100      	movs	r1, #0
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff ff55 	bl	8001560 <LCD_SetWindow>
		break;
 80016b6:	e00f      	b.n	80016d8 <LCD_SetDirection+0xa8>
		case 3:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00A0U);
 80016b8:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 80016bc:	f7ff ff2c 	bl	8001518 <FSMC_WR_REG>
 80016c0:	20a0      	movs	r0, #160	; 0xa0
 80016c2:	f7ff ff3b 	bl	800153c <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 80016c6:	f240 13df 	movw	r3, #479	; 0x1df
 80016ca:	f240 321f 	movw	r2, #799	; 0x31f
 80016ce:	2100      	movs	r1, #0
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff ff45 	bl	8001560 <LCD_SetWindow>
		break;
 80016d6:	bf00      	nop
	}
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <LCD_ClearScreen>:
							orientation direction change.
* parameters :Color(Desired screen color)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_ClearScreen(uint16_t Color)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
  uint32_t i;

	for(i=0; i<(480*800); i++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	e006      	b.n	80016fe <LCD_ClearScreen+0x1e>
	{
		FSMC_WR_DAT(Color);
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff22 	bl	800153c <FSMC_WR_DAT>
	for(i=0; i<(480*800); i++)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3301      	adds	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4a03      	ldr	r2, [pc, #12]	; (8001710 <LCD_ClearScreen+0x30>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d9f4      	bls.n	80016f0 <LCD_ClearScreen+0x10>
	}
}
 8001706:	bf00      	nop
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	0005dbff 	.word	0x0005dbff

08001714 <LCD_DrawPoint>:
* parameters :X(x address of the center of the point), Y(y address of the center of the point)
							Color(point color), Size(point size)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_DrawPoint(uint16_t X, uint16_t Y, uint16_t Color, uint8_t Size)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	4604      	mov	r4, r0
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4623      	mov	r3, r4
 8001724:	80fb      	strh	r3, [r7, #6]
 8001726:	4603      	mov	r3, r0
 8001728:	80bb      	strh	r3, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	807b      	strh	r3, [r7, #2]
 800172e:	4613      	mov	r3, r2
 8001730:	707b      	strb	r3, [r7, #1]
  uint32_t i;
	LCD_SetWindow(X, Y, X + (Size - 1), Y + (Size - 1));
 8001732:	787b      	ldrb	r3, [r7, #1]
 8001734:	b29a      	uxth	r2, r3
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	4413      	add	r3, r2
 800173a:	b29b      	uxth	r3, r3
 800173c:	3b01      	subs	r3, #1
 800173e:	b29c      	uxth	r4, r3
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	b29a      	uxth	r2, r3
 8001744:	88bb      	ldrh	r3, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	b29b      	uxth	r3, r3
 800174a:	3b01      	subs	r3, #1
 800174c:	b29b      	uxth	r3, r3
 800174e:	88b9      	ldrh	r1, [r7, #4]
 8001750:	88f8      	ldrh	r0, [r7, #6]
 8001752:	4622      	mov	r2, r4
 8001754:	f7ff ff04 	bl	8001560 <LCD_SetWindow>
	for(i=0; i < (Size) * (Size); i++)
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e006      	b.n	800176c <LCD_DrawPoint+0x58>
	{
		FSMC_WR_DAT(Color);
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff feeb 	bl	800153c <FSMC_WR_DAT>
	for(i=0; i < (Size) * (Size); i++)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3301      	adds	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	787a      	ldrb	r2, [r7, #1]
 8001770:	fb02 f303 	mul.w	r3, r2, r3
 8001774:	461a      	mov	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4293      	cmp	r3, r2
 800177a:	d3f0      	bcc.n	800175e <LCD_DrawPoint+0x4a>
	}
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bd90      	pop	{r4, r7, pc}

08001786 <LCD_DrawLine>:
* function   :
* parameters :Xs(x start address), Ys(y start address), Xe(x end address), Ye(y end address), Color(line color), Size(line size)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_DrawLine(uint16_t Xs, uint16_t Ys, uint16_t Xe, uint16_t Ye, uint16_t Color, uint8_t Size)
{
 8001786:	b590      	push	{r4, r7, lr}
 8001788:	b087      	sub	sp, #28
 800178a:	af00      	add	r7, sp, #0
 800178c:	4604      	mov	r4, r0
 800178e:	4608      	mov	r0, r1
 8001790:	4611      	mov	r1, r2
 8001792:	461a      	mov	r2, r3
 8001794:	4623      	mov	r3, r4
 8001796:	80fb      	strh	r3, [r7, #6]
 8001798:	4603      	mov	r3, r0
 800179a:	80bb      	strh	r3, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	803b      	strh	r3, [r7, #0]


	int16_t	deltaX = Xe - Xs;
 80017a4:	887a      	ldrh	r2, [r7, #2]
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	82fb      	strh	r3, [r7, #22]
	if(deltaX<0)
 80017ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	da03      	bge.n	80017be <LCD_DrawLine+0x38>
		deltaX = deltaX * (-1);
 80017b6:	8afb      	ldrh	r3, [r7, #22]
 80017b8:	425b      	negs	r3, r3
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	82fb      	strh	r3, [r7, #22]

	int16_t	deltaY = Ye - Ys;
 80017be:	883a      	ldrh	r2, [r7, #0]
 80017c0:	88bb      	ldrh	r3, [r7, #4]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	827b      	strh	r3, [r7, #18]
	if(deltaY<0)
 80017c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	da03      	bge.n	80017d8 <LCD_DrawLine+0x52>
		deltaX = deltaY * (-1);
 80017d0:	8a7b      	ldrh	r3, [r7, #18]
 80017d2:	425b      	negs	r3, r3
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	82fb      	strh	r3, [r7, #22]

	int8_t		signX = (Xs < Xe) ? (1) : (-1);
 80017d8:	88fa      	ldrh	r2, [r7, #6]
 80017da:	887b      	ldrh	r3, [r7, #2]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d201      	bcs.n	80017e4 <LCD_DrawLine+0x5e>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e001      	b.n	80017e8 <LCD_DrawLine+0x62>
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017e8:	747b      	strb	r3, [r7, #17]
	int8_t		signY = (Ys < Ye) ? (1) : (-1);
 80017ea:	88ba      	ldrh	r2, [r7, #4]
 80017ec:	883b      	ldrh	r3, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d201      	bcs.n	80017f6 <LCD_DrawLine+0x70>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e001      	b.n	80017fa <LCD_DrawLine+0x74>
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017fa:	743b      	strb	r3, [r7, #16]
	int16_t		error = deltaX - deltaY;
 80017fc:	8afa      	ldrh	r2, [r7, #22]
 80017fe:	8a7b      	ldrh	r3, [r7, #18]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	b29b      	uxth	r3, r3
 8001804:	82bb      	strh	r3, [r7, #20]

	for (;;)
	{
		LCD_DrawPoint(Xs, Ys, Color, Size);
 8001806:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800180a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800180c:	88b9      	ldrh	r1, [r7, #4]
 800180e:	88f8      	ldrh	r0, [r7, #6]
 8001810:	f7ff ff80 	bl	8001714 <LCD_DrawPoint>

		if(Xs == Xe && Ys == Ye)
 8001814:	88fa      	ldrh	r2, [r7, #6]
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	429a      	cmp	r2, r3
 800181a:	d103      	bne.n	8001824 <LCD_DrawLine+0x9e>
 800181c:	88ba      	ldrh	r2, [r7, #4]
 800181e:	883b      	ldrh	r3, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d025      	beq.n	8001870 <LCD_DrawLine+0xea>
			break;

		int16_t error2 = error;
 8001824:	8abb      	ldrh	r3, [r7, #20]
 8001826:	81fb      	strh	r3, [r7, #14]

		if(error2 > -deltaY)
 8001828:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800182c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001830:	425b      	negs	r3, r3
 8001832:	429a      	cmp	r2, r3
 8001834:	dd0a      	ble.n	800184c <LCD_DrawLine+0xc6>
		{
			error -= deltaY;
 8001836:	8aba      	ldrh	r2, [r7, #20]
 8001838:	8a7b      	ldrh	r3, [r7, #18]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	b29b      	uxth	r3, r3
 800183e:	82bb      	strh	r3, [r7, #20]
			Xs += signX;
 8001840:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001844:	b29a      	uxth	r2, r3
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	4413      	add	r3, r2
 800184a:	80fb      	strh	r3, [r7, #6]
		}

		if(error2 < deltaX)
 800184c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001850:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001854:	429a      	cmp	r2, r3
 8001856:	dad6      	bge.n	8001806 <LCD_DrawLine+0x80>
		{
			error += deltaX;
 8001858:	8aba      	ldrh	r2, [r7, #20]
 800185a:	8afb      	ldrh	r3, [r7, #22]
 800185c:	4413      	add	r3, r2
 800185e:	b29b      	uxth	r3, r3
 8001860:	82bb      	strh	r3, [r7, #20]
			Ys += signY;
 8001862:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001866:	b29a      	uxth	r2, r3
 8001868:	88bb      	ldrh	r3, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	80bb      	strh	r3, [r7, #4]
	{
 800186e:	e7ca      	b.n	8001806 <LCD_DrawLine+0x80>
			break;
 8001870:	bf00      	nop
		}
	}
}
 8001872:	bf00      	nop
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd90      	pop	{r4, r7, pc}
	...

0800187c <LCD_PrintCh>:
* parameters :X(x start address), Y(y start address), Color(character color), Bcolor(background
							color), Character(use standard ASCII values for characters) and Size(characters size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintCh(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t Character, uint8_t Size)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4604      	mov	r4, r0
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4623      	mov	r3, r4
 800188c:	80fb      	strh	r3, [r7, #6]
 800188e:	4603      	mov	r3, r0
 8001890:	80bb      	strh	r3, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	807b      	strh	r3, [r7, #2]
 8001896:	4613      	mov	r3, r2
 8001898:	803b      	strh	r3, [r7, #0]
	uint8_t i, j, k, p=0;
 800189a:	2300      	movs	r3, #0
 800189c:	733b      	strb	r3, [r7, #12]
	uint16_t c=0;
 800189e:	2300      	movs	r3, #0
 80018a0:	817b      	strh	r3, [r7, #10]
	LCD_SetWindow(X, Y, X+(8 * Size - 1), Y+(8  *Size - 1));									// Define area by character size.
 80018a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	4413      	add	r3, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29c      	uxth	r4, r3
 80018b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	b29a      	uxth	r2, r3
 80018c0:	88bb      	ldrh	r3, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	88b9      	ldrh	r1, [r7, #4]
 80018cc:	88f8      	ldrh	r0, [r7, #6]
 80018ce:	4622      	mov	r2, r4
 80018d0:	f7ff fe46 	bl	8001560 <LCD_SetWindow>

	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	e03c      	b.n	8001954 <LCD_PrintCh+0xd8>
	{
		for(j=0; j < Size; j++)																					// Print each row size times.
 80018da:	2300      	movs	r3, #0
 80018dc:	73bb      	strb	r3, [r7, #14]
 80018de:	e031      	b.n	8001944 <LCD_PrintCh+0xc8>
		{
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 80018e0:	2300      	movs	r3, #0
 80018e2:	737b      	strb	r3, [r7, #13]
 80018e4:	e028      	b.n	8001938 <LCD_PrintCh+0xbc>
			{
				if((ASCIItable[Character][i]>>(7-k)) & 0x01)
 80018e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	491d      	ldr	r1, [pc, #116]	; (8001964 <LCD_PrintCh+0xe8>)
 80018ee:	00d2      	lsls	r2, r2, #3
 80018f0:	440a      	add	r2, r1
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	7b7b      	ldrb	r3, [r7, #13]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	fa42 f303 	asr.w	r3, r2, r3
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <LCD_PrintCh+0x94>
					c=Color;
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	817b      	strh	r3, [r7, #10]
 800190e:	e001      	b.n	8001914 <LCD_PrintCh+0x98>
				else
					c=Bcolor;
 8001910:	883b      	ldrh	r3, [r7, #0]
 8001912:	817b      	strh	r3, [r7, #10]
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 8001914:	2300      	movs	r3, #0
 8001916:	733b      	strb	r3, [r7, #12]
 8001918:	e006      	b.n	8001928 <LCD_PrintCh+0xac>
				{
					FSMC_WR_DAT(c);
 800191a:	897b      	ldrh	r3, [r7, #10]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fe0d 	bl	800153c <FSMC_WR_DAT>
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 8001922:	7b3b      	ldrb	r3, [r7, #12]
 8001924:	3301      	adds	r3, #1
 8001926:	733b      	strb	r3, [r7, #12]
 8001928:	7b3a      	ldrb	r2, [r7, #12]
 800192a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800192e:	429a      	cmp	r2, r3
 8001930:	d3f3      	bcc.n	800191a <LCD_PrintCh+0x9e>
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 8001932:	7b7b      	ldrb	r3, [r7, #13]
 8001934:	3301      	adds	r3, #1
 8001936:	737b      	strb	r3, [r7, #13]
 8001938:	7b7b      	ldrb	r3, [r7, #13]
 800193a:	2b07      	cmp	r3, #7
 800193c:	d9d3      	bls.n	80018e6 <LCD_PrintCh+0x6a>
		for(j=0; j < Size; j++)																					// Print each row size times.
 800193e:	7bbb      	ldrb	r3, [r7, #14]
 8001940:	3301      	adds	r3, #1
 8001942:	73bb      	strb	r3, [r7, #14]
 8001944:	7bba      	ldrb	r2, [r7, #14]
 8001946:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800194a:	429a      	cmp	r2, r3
 800194c:	d3c8      	bcc.n	80018e0 <LCD_PrintCh+0x64>
	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	3301      	adds	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	2b07      	cmp	r3, #7
 8001958:	d9bf      	bls.n	80018da <LCD_PrintCh+0x5e>
				}
			}
		}
	}
}
 800195a:	bf00      	nop
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bd90      	pop	{r4, r7, pc}
 8001964:	0802bdd0 	.word	0x0802bdd0

08001968 <LCD_PrintStr>:
							color), string(pointer to an array of characters, standard ASCII values) and size
							(character size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintStr(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t* String, uint8_t Size)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	80fb      	strh	r3, [r7, #6]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	X=X-8*Size;
 8001986:	7f3b      	ldrb	r3, [r7, #28]
 8001988:	b29b      	uxth	r3, r3
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	b29b      	uxth	r3, r3
 800198e:	88fa      	ldrh	r2, [r7, #6]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	80fb      	strh	r3, [r7, #6]
	while(*String)
 8001994:	e015      	b.n	80019c2 <LCD_PrintStr+0x5a>
		LCD_PrintCh(X = X + 8 * Size, Y, Color, Bcolor, *String++, Size);
 8001996:	7f3b      	ldrb	r3, [r7, #28]
 8001998:	b29b      	uxth	r3, r3
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	b29a      	uxth	r2, r3
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	4413      	add	r3, r2
 80019a2:	80fb      	strh	r3, [r7, #6]
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	61ba      	str	r2, [r7, #24]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	883d      	ldrh	r5, [r7, #0]
 80019ae:	887c      	ldrh	r4, [r7, #2]
 80019b0:	88b9      	ldrh	r1, [r7, #4]
 80019b2:	88f8      	ldrh	r0, [r7, #6]
 80019b4:	7f3a      	ldrb	r2, [r7, #28]
 80019b6:	9201      	str	r2, [sp, #4]
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	462b      	mov	r3, r5
 80019bc:	4622      	mov	r2, r4
 80019be:	f7ff ff5d 	bl	800187c <LCD_PrintCh>
	while(*String)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1e5      	bne.n	8001996 <LCD_PrintStr+0x2e>
}
 80019ca:	bf00      	nop
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bdb0      	pop	{r4, r5, r7, pc}

080019d4 <NT35510_Init>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void NT35510_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	RST_LOW;													// Reset on.
 80019d8:	2200      	movs	r2, #0
 80019da:	2140      	movs	r1, #64	; 0x40
 80019dc:	48fd      	ldr	r0, [pc, #1012]	; (8001dd4 <NT35510_Init+0x400>)
 80019de:	f002 fa41 	bl	8003e64 <HAL_GPIO_WritePin>
	HAL_Delay(300);											// Short delay needed on power up
 80019e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019e6:	f001 fcd7 	bl	8003398 <HAL_Delay>
	RST_HIGH;													// Reset off.
 80019ea:	2201      	movs	r2, #1
 80019ec:	2140      	movs	r1, #64	; 0x40
 80019ee:	48f9      	ldr	r0, [pc, #996]	; (8001dd4 <NT35510_Init+0x400>)
 80019f0:	f002 fa38 	bl	8003e64 <HAL_GPIO_WritePin>
	HAL_Delay(800);											// Short delay needed on power up
 80019f4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80019f8:	f001 fcce 	bl	8003398 <HAL_Delay>

	// Manufacture Command Set selection
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 80019fc:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001a00:	f7ff fd8a 	bl	8001518 <FSMC_WR_REG>
 8001a04:	2055      	movs	r0, #85	; 0x55
 8001a06:	f7ff fd99 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8001a0a:	f24f 0001 	movw	r0, #61441	; 0xf001
 8001a0e:	f7ff fd83 	bl	8001518 <FSMC_WR_REG>
 8001a12:	20aa      	movs	r0, #170	; 0xaa
 8001a14:	f7ff fd92 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 8001a18:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001a1c:	f7ff fd7c 	bl	8001518 <FSMC_WR_REG>
 8001a20:	2052      	movs	r0, #82	; 0x52
 8001a22:	f7ff fd8b 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8001a26:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001a2a:	f7ff fd75 	bl	8001518 <FSMC_WR_REG>
 8001a2e:	2008      	movs	r0, #8
 8001a30:	f7ff fd84 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0001U);		// Select page 1
 8001a34:	f24f 0004 	movw	r0, #61444	; 0xf004
 8001a38:	f7ff fd6e 	bl	8001518 <FSMC_WR_REG>
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7ff fd7d 	bl	800153c <FSMC_WR_DAT>

	// AVDD 5.2V
	FSMC_WR_REG(SETAVDD_NORM);		FSMC_WR_DAT(0x000DU);
 8001a42:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8001a46:	f7ff fd67 	bl	8001518 <FSMC_WR_REG>
 8001a4a:	200d      	movs	r0, #13
 8001a4c:	f7ff fd76 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_IDLE);		FSMC_WR_DAT(0x000DU);
 8001a50:	f24b 0001 	movw	r0, #45057	; 0xb001
 8001a54:	f7ff fd60 	bl	8001518 <FSMC_WR_REG>
 8001a58:	200d      	movs	r0, #13
 8001a5a:	f7ff fd6f 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_PART);		FSMC_WR_DAT(0x000DU);
 8001a5e:	f24b 0002 	movw	r0, #45058	; 0xb002
 8001a62:	f7ff fd59 	bl	8001518 <FSMC_WR_REG>
 8001a66:	200d      	movs	r0, #13
 8001a68:	f7ff fd68 	bl	800153c <FSMC_WR_DAT>

	// AVDD ratio
	FSMC_WR_REG(BT1CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001a6c:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8001a70:	f7ff fd52 	bl	8001518 <FSMC_WR_REG>
 8001a74:	2034      	movs	r0, #52	; 0x34
 8001a76:	f7ff fd61 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001a7a:	f24b 6001 	movw	r0, #46593	; 0xb601
 8001a7e:	f7ff fd4b 	bl	8001518 <FSMC_WR_REG>
 8001a82:	2034      	movs	r0, #52	; 0x34
 8001a84:	f7ff fd5a 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001a88:	f24b 6002 	movw	r0, #46594	; 0xb602
 8001a8c:	f7ff fd44 	bl	8001518 <FSMC_WR_REG>
 8001a90:	2034      	movs	r0, #52	; 0x34
 8001a92:	f7ff fd53 	bl	800153c <FSMC_WR_DAT>

	// AVEE  -5.2V
	FSMC_WR_REG(SETAVEE_NORM);		FSMC_WR_DAT(0x000DU);
 8001a96:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8001a9a:	f7ff fd3d 	bl	8001518 <FSMC_WR_REG>
 8001a9e:	200d      	movs	r0, #13
 8001aa0:	f7ff fd4c 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_IDLE);		FSMC_WR_DAT(0x000DU);
 8001aa4:	f24b 1001 	movw	r0, #45313	; 0xb101
 8001aa8:	f7ff fd36 	bl	8001518 <FSMC_WR_REG>
 8001aac:	200d      	movs	r0, #13
 8001aae:	f7ff fd45 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_PART);		FSMC_WR_DAT(0x000DU);
 8001ab2:	f24b 1002 	movw	r0, #45314	; 0xb102
 8001ab6:	f7ff fd2f 	bl	8001518 <FSMC_WR_REG>
 8001aba:	200d      	movs	r0, #13
 8001abc:	f7ff fd3e 	bl	800153c <FSMC_WR_DAT>

	// AVEE ratio
	FSMC_WR_REG(BT2CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001ac0:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8001ac4:	f7ff fd28 	bl	8001518 <FSMC_WR_REG>
 8001ac8:	2034      	movs	r0, #52	; 0x34
 8001aca:	f7ff fd37 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001ace:	f24b 7001 	movw	r0, #46849	; 0xb701
 8001ad2:	f7ff fd21 	bl	8001518 <FSMC_WR_REG>
 8001ad6:	2034      	movs	r0, #52	; 0x34
 8001ad8:	f7ff fd30 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001adc:	f24b 7002 	movw	r0, #46850	; 0xb702
 8001ae0:	f7ff fd1a 	bl	8001518 <FSMC_WR_REG>
 8001ae4:	2034      	movs	r0, #52	; 0x34
 8001ae6:	f7ff fd29 	bl	800153c <FSMC_WR_DAT>

	// VCL  -2.5V
	FSMC_WR_REG(SETVCL_NORM);		FSMC_WR_DAT(0x0000U);
 8001aea:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8001aee:	f7ff fd13 	bl	8001518 <FSMC_WR_REG>
 8001af2:	2000      	movs	r0, #0
 8001af4:	f7ff fd22 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_IDLE);		FSMC_WR_DAT(0x0000U);
 8001af8:	f24b 2001 	movw	r0, #45569	; 0xb201
 8001afc:	f7ff fd0c 	bl	8001518 <FSMC_WR_REG>
 8001b00:	2000      	movs	r0, #0
 8001b02:	f7ff fd1b 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_PART);		FSMC_WR_DAT(0x0000U);
 8001b06:	f24b 2002 	movw	r0, #45570	; 0xb202
 8001b0a:	f7ff fd05 	bl	8001518 <FSMC_WR_REG>
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f7ff fd14 	bl	800153c <FSMC_WR_DAT>

	// VCL ratio
	FSMC_WR_REG(BT3CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8001b14:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8001b18:	f7ff fcfe 	bl	8001518 <FSMC_WR_REG>
 8001b1c:	2024      	movs	r0, #36	; 0x24
 8001b1e:	f7ff fd0d 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8001b22:	f64b 0001 	movw	r0, #47105	; 0xb801
 8001b26:	f7ff fcf7 	bl	8001518 <FSMC_WR_REG>
 8001b2a:	2024      	movs	r0, #36	; 0x24
 8001b2c:	f7ff fd06 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_PART);		FSMC_WR_DAT(0x0024U);
 8001b30:	f64b 0002 	movw	r0, #47106	; 0xb802
 8001b34:	f7ff fcf0 	bl	8001518 <FSMC_WR_REG>
 8001b38:	2024      	movs	r0, #36	; 0x24
 8001b3a:	f7ff fcff 	bl	800153c <FSMC_WR_DAT>

	// VGH  15V
	FSMC_WR_REG(VGHCTR);			FSMC_WR_DAT(0x01);
 8001b3e:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8001b42:	f7ff fce9 	bl	8001518 <FSMC_WR_REG>
 8001b46:	2001      	movs	r0, #1
 8001b48:	f7ff fcf8 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_NORM);		FSMC_WR_DAT(0x000FU);
 8001b4c:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8001b50:	f7ff fce2 	bl	8001518 <FSMC_WR_REG>
 8001b54:	200f      	movs	r0, #15
 8001b56:	f7ff fcf1 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_IDLE);		FSMC_WR_DAT(0x000FU);
 8001b5a:	f24b 3001 	movw	r0, #45825	; 0xb301
 8001b5e:	f7ff fcdb 	bl	8001518 <FSMC_WR_REG>
 8001b62:	200f      	movs	r0, #15
 8001b64:	f7ff fcea 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_PART);		FSMC_WR_DAT(0x000FU);
 8001b68:	f24b 3002 	movw	r0, #45826	; 0xb302
 8001b6c:	f7ff fcd4 	bl	8001518 <FSMC_WR_REG>
 8001b70:	200f      	movs	r0, #15
 8001b72:	f7ff fce3 	bl	800153c <FSMC_WR_DAT>

	// VGH  ratio
	FSMC_WR_REG(BT4CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001b76:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8001b7a:	f7ff fccd 	bl	8001518 <FSMC_WR_REG>
 8001b7e:	2034      	movs	r0, #52	; 0x34
 8001b80:	f7ff fcdc 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001b84:	f64b 1001 	movw	r0, #47361	; 0xb901
 8001b88:	f7ff fcc6 	bl	8001518 <FSMC_WR_REG>
 8001b8c:	2034      	movs	r0, #52	; 0x34
 8001b8e:	f7ff fcd5 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001b92:	f64b 1002 	movw	r0, #47362	; 0xb902
 8001b96:	f7ff fcbf 	bl	8001518 <FSMC_WR_REG>
 8001b9a:	2034      	movs	r0, #52	; 0x34
 8001b9c:	f7ff fcce 	bl	800153c <FSMC_WR_DAT>

	// VGL_REG  -10V
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 8001ba0:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001ba4:	f7ff fcb8 	bl	8001518 <FSMC_WR_REG>
 8001ba8:	2008      	movs	r0, #8
 8001baa:	f7ff fcc7 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 8001bae:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001bb2:	f7ff fcb1 	bl	8001518 <FSMC_WR_REG>
 8001bb6:	2008      	movs	r0, #8
 8001bb8:	f7ff fcc0 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(0xB501);			FSMC_WR_DAT(0x0008U);
 8001bbc:	f24b 5001 	movw	r0, #46337	; 0xb501
 8001bc0:	f7ff fcaa 	bl	8001518 <FSMC_WR_REG>
 8001bc4:	2008      	movs	r0, #8
 8001bc6:	f7ff fcb9 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(0xC200);			FSMC_WR_DAT(0x0003U);
 8001bca:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8001bce:	f7ff fca3 	bl	8001518 <FSMC_WR_REG>
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	f7ff fcb2 	bl	800153c <FSMC_WR_DAT>

	// VGLX  ratio
	FSMC_WR_REG(BT5CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8001bd8:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8001bdc:	f7ff fc9c 	bl	8001518 <FSMC_WR_REG>
 8001be0:	2024      	movs	r0, #36	; 0x24
 8001be2:	f7ff fcab 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8001be6:	f64b 2001 	movw	r0, #47617	; 0xba01
 8001bea:	f7ff fc95 	bl	8001518 <FSMC_WR_REG>
 8001bee:	2024      	movs	r0, #36	; 0x24
 8001bf0:	f7ff fca4 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_PART);		FSMC_WR_DAT(0x0024U);
 8001bf4:	f64b 2002 	movw	r0, #47618	; 0xba02
 8001bf8:	f7ff fc8e 	bl	8001518 <FSMC_WR_REG>
 8001bfc:	2024      	movs	r0, #36	; 0x24
 8001bfe:	f7ff fc9d 	bl	800153c <FSMC_WR_DAT>

	// VGMP/VGSP 4.5V/0V
	FSMC_WR_REG(SETVGP_0);			FSMC_WR_DAT(0x0000U);
 8001c02:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8001c06:	f7ff fc87 	bl	8001518 <FSMC_WR_REG>
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff fc96 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_1);			FSMC_WR_DAT(0x0078U);
 8001c10:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8001c14:	f7ff fc80 	bl	8001518 <FSMC_WR_REG>
 8001c18:	2078      	movs	r0, #120	; 0x78
 8001c1a:	f7ff fc8f 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_2);			FSMC_WR_DAT(0x0000U);
 8001c1e:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8001c22:	f7ff fc79 	bl	8001518 <FSMC_WR_REG>
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fc88 	bl	800153c <FSMC_WR_DAT>

	// VGMN/VGSN -4.5V/0V
	FSMC_WR_REG(SETVGN_0);			FSMC_WR_DAT(0x0000U);
 8001c2c:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8001c30:	f7ff fc72 	bl	8001518 <FSMC_WR_REG>
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fc81 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_1);			FSMC_WR_DAT(0x0078U);
 8001c3a:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8001c3e:	f7ff fc6b 	bl	8001518 <FSMC_WR_REG>
 8001c42:	2078      	movs	r0, #120	; 0x78
 8001c44:	f7ff fc7a 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_2);			FSMC_WR_DAT(0x0000U);
 8001c48:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8001c4c:	f7ff fc64 	bl	8001518 <FSMC_WR_REG>
 8001c50:	2000      	movs	r0, #0
 8001c52:	f7ff fc73 	bl	800153c <FSMC_WR_DAT>

	// VCOM  -1.325V
	FSMC_WR_REG(SETVCMOFF_0);		FSMC_WR_DAT(0x0000);
 8001c56:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8001c5a:	f7ff fc5d 	bl	8001518 <FSMC_WR_REG>
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff fc6c 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCMOFF_1);		FSMC_WR_DAT(0x0089);
 8001c64:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8001c68:	f7ff fc56 	bl	8001518 <FSMC_WR_REG>
 8001c6c:	2089      	movs	r0, #137	; 0x89
 8001c6e:	f7ff fc65 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(GMBCTR2_BASE | 0x0033U);    FSMC_WR_DAT(0x007FU);
*/
	//**************************************************************************************************************************//

	// Select Page 0
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 8001c72:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001c76:	f7ff fc4f 	bl	8001518 <FSMC_WR_REG>
 8001c7a:	2055      	movs	r0, #85	; 0x55
 8001c7c:	f7ff fc5e 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8001c80:	f24f 0001 	movw	r0, #61441	; 0xf001
 8001c84:	f7ff fc48 	bl	8001518 <FSMC_WR_REG>
 8001c88:	20aa      	movs	r0, #170	; 0xaa
 8001c8a:	f7ff fc57 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 8001c8e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001c92:	f7ff fc41 	bl	8001518 <FSMC_WR_REG>
 8001c96:	2052      	movs	r0, #82	; 0x52
 8001c98:	f7ff fc50 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8001c9c:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001ca0:	f7ff fc3a 	bl	8001518 <FSMC_WR_REG>
 8001ca4:	2008      	movs	r0, #8
 8001ca6:	f7ff fc49 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0000U);		// Select page 0
 8001caa:	f24f 0004 	movw	r0, #61444	; 0xf004
 8001cae:	f7ff fc33 	bl	8001518 <FSMC_WR_REG>
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f7ff fc42 	bl	800153c <FSMC_WR_DAT>

	// DISPLAY CONTROL
	FSMC_WR_REG(DOPCTR_0);			FSMC_WR_DAT(0x00CCU);
 8001cb8:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8001cbc:	f7ff fc2c 	bl	8001518 <FSMC_WR_REG>
 8001cc0:	20cc      	movs	r0, #204	; 0xcc
 8001cc2:	f7ff fc3b 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(DOPCTR_1);			FSMC_WR_DAT(0x0000U);
 8001cc6:	f24b 1001 	movw	r0, #45313	; 0xb101
 8001cca:	f7ff fc25 	bl	8001518 <FSMC_WR_REG>
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f7ff fc34 	bl	800153c <FSMC_WR_DAT>

	FSMC_WR_REG(DPRSLCTR);			FSMC_WR_DAT(0x0050U);			// Display Resolution 480RGB x 800
 8001cd4:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001cd8:	f7ff fc1e 	bl	8001518 <FSMC_WR_REG>
 8001cdc:	2050      	movs	r0, #80	; 0x50
 8001cde:	f7ff fc2d 	bl	800153c <FSMC_WR_DAT>

	// SOURCE HOLD TIME
	FSMC_WR_REG(SDHDTCTR);			FSMC_WR_DAT(0x0005U);
 8001ce2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8001ce6:	f7ff fc17 	bl	8001518 <FSMC_WR_REG>
 8001cea:	2005      	movs	r0, #5
 8001cec:	f7ff fc26 	bl	800153c <FSMC_WR_DAT>

	// Set Gate EQ
	FSMC_WR_REG(GSEQCTR_ST);		FSMC_WR_DAT(0x0070U);
 8001cf0:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8001cf4:	f7ff fc10 	bl	8001518 <FSMC_WR_REG>
 8001cf8:	2070      	movs	r0, #112	; 0x70
 8001cfa:	f7ff fc1f 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(GSEQCTR_CK);		FSMC_WR_DAT(0x0070U);
 8001cfe:	f24b 7001 	movw	r0, #46849	; 0xb701
 8001d02:	f7ff fc09 	bl	8001518 <FSMC_WR_REG>
 8001d06:	2070      	movs	r0, #112	; 0x70
 8001d08:	f7ff fc18 	bl	800153c <FSMC_WR_DAT>

	// Source EQ control (Mode 2)
	FSMC_WR_REG(SDEQCTR_MOD );	FSMC_WR_DAT(0x0001U);
 8001d0c:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8001d10:	f7ff fc02 	bl	8001518 <FSMC_WR_REG>
 8001d14:	2001      	movs	r0, #1
 8001d16:	f7ff fc11 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS1);	FSMC_WR_DAT(0x0003U);
 8001d1a:	f64b 0001 	movw	r0, #47105	; 0xb801
 8001d1e:	f7ff fbfb 	bl	8001518 <FSMC_WR_REG>
 8001d22:	2003      	movs	r0, #3
 8001d24:	f7ff fc0a 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS2);	FSMC_WR_DAT(0x0003U);
 8001d28:	f64b 0002 	movw	r0, #47106	; 0xb802
 8001d2c:	f7ff fbf4 	bl	8001518 <FSMC_WR_REG>
 8001d30:	2003      	movs	r0, #3
 8001d32:	f7ff fc03 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS3);	FSMC_WR_DAT(0x0003U);
 8001d36:	f64b 0003 	movw	r0, #47107	; 0xb803
 8001d3a:	f7ff fbed 	bl	8001518 <FSMC_WR_REG>
 8001d3e:	2003      	movs	r0, #3
 8001d40:	f7ff fbfc 	bl	800153c <FSMC_WR_DAT>

	// INVERSION MODE
	FSMC_WR_REG(INVCTR_NORM);		FSMC_WR_DAT(0x0002U);
 8001d44:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8001d48:	f7ff fbe6 	bl	8001518 <FSMC_WR_REG>
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	f7ff fbf5 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_IDLE);		FSMC_WR_DAT(0x0000U);
 8001d52:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8001d56:	f7ff fbdf 	bl	8001518 <FSMC_WR_REG>
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7ff fbee 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_PART);		FSMC_WR_DAT(0x0000U);
 8001d60:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8001d64:	f7ff fbd8 	bl	8001518 <FSMC_WR_REG>
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff fbe7 	bl	800153c <FSMC_WR_DAT>

	// Timing control
	FSMC_WR_REG(0xC900);				FSMC_WR_DAT(0x00D0U);
 8001d6e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8001d72:	f7ff fbd1 	bl	8001518 <FSMC_WR_REG>
 8001d76:	20d0      	movs	r0, #208	; 0xd0
 8001d78:	f7ff fbe0 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(0xC901);				FSMC_WR_DAT(0x0002U);
 8001d7c:	f64c 1001 	movw	r0, #51457	; 0xc901
 8001d80:	f7ff fbca 	bl	8001518 <FSMC_WR_REG>
 8001d84:	2002      	movs	r0, #2
 8001d86:	f7ff fbd9 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(0xC902);				FSMC_WR_DAT(0x0050U);
 8001d8a:	f64c 1002 	movw	r0, #51458	; 0xc902
 8001d8e:	f7ff fbc3 	bl	8001518 <FSMC_WR_REG>
 8001d92:	2050      	movs	r0, #80	; 0x50
 8001d94:	f7ff fbd2 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(0xC903);				FSMC_WR_DAT(0x0050U);
 8001d98:	f64c 1003 	movw	r0, #51459	; 0xc903
 8001d9c:	f7ff fbbc 	bl	8001518 <FSMC_WR_REG>
 8001da0:	2050      	movs	r0, #80	; 0x50
 8001da2:	f7ff fbcb 	bl	800153c <FSMC_WR_DAT>
	FSMC_WR_REG(0xC904);				FSMC_WR_DAT(0x0050U);
 8001da6:	f64c 1004 	movw	r0, #51460	; 0xc904
 8001daa:	f7ff fbb5 	bl	8001518 <FSMC_WR_REG>
 8001dae:	2050      	movs	r0, #80	; 0x50
 8001db0:	f7ff fbc4 	bl	800153c <FSMC_WR_DAT>

	//**************************************************************************************************************************//
	// User Command Set
	FSMC_WR_REG(TEON);   				FSMC_WR_DAT(0x0000U);			// V-Blanking information only
 8001db4:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8001db8:	f7ff fbae 	bl	8001518 <FSMC_WR_REG>
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f7ff fbbd 	bl	800153c <FSMC_WR_DAT>


	FSMC_WR_REG(COLMOD);   			FSMC_WR_DAT(0x0055U);		// RGB and MCU Interface Data format 16-Bits
 8001dc2:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8001dc6:	f7ff fba7 	bl	8001518 <FSMC_WR_REG>
 8001dca:	2055      	movs	r0, #85	; 0x55
 8001dcc:	f7ff fbb6 	bl	800153c <FSMC_WR_DAT>
 8001dd0:	e002      	b.n	8001dd8 <NT35510_Init+0x404>
 8001dd2:	bf00      	nop
 8001dd4:	40020800 	.word	0x40020800
	FSMC_WR_REG(MADCTL);   			FSMC_WR_DAT(0x0000U);		// MADCTL: MY MX MV RGB MH RSMX RSMY
 8001dd8:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8001ddc:	f7ff fb9c 	bl	8001518 <FSMC_WR_REG>
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff fbab 	bl	800153c <FSMC_WR_DAT>


	FSMC_WR_REG(SLPOUT);   						// Sleep Out
 8001de6:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8001dea:	f7ff fb95 	bl	8001518 <FSMC_WR_REG>

	HAL_Delay(120);
 8001dee:	2078      	movs	r0, #120	; 0x78
 8001df0:	f001 fad2 	bl	8003398 <HAL_Delay>

	FSMC_WR_REG(DISPON);   						// Display On
 8001df4:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8001df8:	f7ff fb8e 	bl	8001518 <FSMC_WR_REG>

	HAL_Delay(200);
 8001dfc:	20c8      	movs	r0, #200	; 0xc8
 8001dfe:	f001 facb 	bl	8003398 <HAL_Delay>

	LCD_SetDirection(VERTICAL_UP);		// Vertical-up display orientation as default
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff fc14 	bl	8001630 <LCD_SetDirection>
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <MX_GPIO_Init>:

/** Configure pins
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	; 0x30
 8001e10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
 8001e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	4b6a      	ldr	r3, [pc, #424]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a69      	ldr	r2, [pc, #420]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001e2c:	f043 0320 	orr.w	r3, r3, #32
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b67      	ldr	r3, [pc, #412]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a62      	ldr	r2, [pc, #392]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b60      	ldr	r3, [pc, #384]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b5c      	ldr	r3, [pc, #368]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a5b      	ldr	r2, [pc, #364]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b55      	ldr	r3, [pc, #340]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a54      	ldr	r2, [pc, #336]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001e80:	f043 0310 	orr.w	r3, r3, #16
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b52      	ldr	r3, [pc, #328]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b4e      	ldr	r3, [pc, #312]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a4d      	ldr	r2, [pc, #308]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b4b      	ldr	r3, [pc, #300]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a46      	ldr	r2, [pc, #280]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a3f      	ldr	r2, [pc, #252]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <MX_GPIO_Init+0x1c4>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OV7670_RST_GPIO_Port, OV7670_RST_Pin, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2104      	movs	r1, #4
 8001eea:	483a      	ldr	r0, [pc, #232]	; (8001fd4 <MX_GPIO_Init+0x1c8>)
 8001eec:	f001 ffba 	bl	8003e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef6:	4838      	ldr	r0, [pc, #224]	; (8001fd8 <MX_GPIO_Init+0x1cc>)
 8001ef8:	f001 ffb4 	bl	8003e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RST_GPIO_Port, FSMC_RST_Pin, GPIO_PIN_RESET);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2140      	movs	r1, #64	; 0x40
 8001f00:	4836      	ldr	r0, [pc, #216]	; (8001fdc <MX_GPIO_Init+0x1d0>)
 8001f02:	f001 ffaf 	bl	8003e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_RST_Pin;
 8001f06:	2304      	movs	r3, #4
 8001f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OV7670_RST_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	482d      	ldr	r0, [pc, #180]	; (8001fd4 <MX_GPIO_Init+0x1c8>)
 8001f1e:	f001 fe0d 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OV7670_D0_Pin|OV7670_D1_Pin|OV7670_D2_Pin|OV7670_D3_Pin
 8001f22:	23ff      	movs	r3, #255	; 0xff
 8001f24:	61fb      	str	r3, [r7, #28]
                          |OV7670_D4_Pin|OV7670_D5_Pin|OV7670_D6_Pin|OV7670_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2e:	f107 031c 	add.w	r3, r7, #28
 8001f32:	4619      	mov	r1, r3
 8001f34:	4828      	ldr	r0, [pc, #160]	; (8001fd8 <MX_GPIO_Init+0x1cc>)
 8001f36:	f001 fe01 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_HREF_Pin;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f3e:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <MX_GPIO_Init+0x1d4>)
 8001f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_HREF_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4825      	ldr	r0, [pc, #148]	; (8001fe4 <MX_GPIO_Init+0x1d8>)
 8001f4e:	f001 fdf5 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_VSYNC_Pin;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <MX_GPIO_Init+0x1dc>)
 8001f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4619      	mov	r1, r3
 8001f64:	481f      	ldr	r0, [pc, #124]	; (8001fe4 <MX_GPIO_Init+0x1d8>)
 8001f66:	f001 fde9 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f70:	2301      	movs	r3, #1
 8001f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	4619      	mov	r1, r3
 8001f82:	4815      	ldr	r0, [pc, #84]	; (8001fd8 <MX_GPIO_Init+0x1cc>)
 8001f84:	f001 fdda 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RST_Pin;
 8001f88:	2340      	movs	r3, #64	; 0x40
 8001f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RST_GPIO_Port, &GPIO_InitStruct);
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	480f      	ldr	r0, [pc, #60]	; (8001fdc <MX_GPIO_Init+0x1d0>)
 8001fa0:	f001 fdcc 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4806      	ldr	r0, [pc, #24]	; (8001fdc <MX_GPIO_Init+0x1d0>)
 8001fc2:	f001 fdbb 	bl	8003b3c <HAL_GPIO_Init>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);*/

}
 8001fc6:	bf00      	nop
 8001fc8:	3730      	adds	r7, #48	; 0x30
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40021400 	.word	0x40021400
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	10210000 	.word	0x10210000
 8001fe4:	40021800 	.word	0x40021800
 8001fe8:	10310000 	.word	0x10310000

08001fec <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <MX_I2C2_Init+0x50>)
 8001ff2:	4a13      	ldr	r2, [pc, #76]	; (8002040 <MX_I2C2_Init+0x54>)
 8001ff4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <MX_I2C2_Init+0x50>)
 8001ff8:	4a12      	ldr	r2, [pc, #72]	; (8002044 <MX_I2C2_Init+0x58>)
 8001ffa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <MX_I2C2_Init+0x50>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 66;
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <MX_I2C2_Init+0x50>)
 8002004:	2242      	movs	r2, #66	; 0x42
 8002006:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <MX_I2C2_Init+0x50>)
 800200a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800200e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002010:	4b0a      	ldr	r3, [pc, #40]	; (800203c <MX_I2C2_Init+0x50>)
 8002012:	2200      	movs	r2, #0
 8002014:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <MX_I2C2_Init+0x50>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <MX_I2C2_Init+0x50>)
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <MX_I2C2_Init+0x50>)
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002028:	4804      	ldr	r0, [pc, #16]	; (800203c <MX_I2C2_Init+0x50>)
 800202a:	f001 ff4d 	bl	8003ec8 <HAL_I2C_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002034:	f000 f95a 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}
 800203c:	2004a2b8 	.word	0x2004a2b8
 8002040:	40005800 	.word	0x40005800
 8002044:	00061a80 	.word	0x00061a80

08002048 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <HAL_I2C_MspInit+0x94>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d133      	bne.n	80020d2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <HAL_I2C_MspInit+0x98>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <HAL_I2C_MspInit+0x98>)
 8002074:	f043 0320 	orr.w	r3, r3, #32
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <HAL_I2C_MspInit+0x98>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002086:	2303      	movs	r3, #3
 8002088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208a:	2312      	movs	r3, #18
 800208c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800208e:	2301      	movs	r3, #1
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002096:	2304      	movs	r3, #4
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4810      	ldr	r0, [pc, #64]	; (80020e4 <HAL_I2C_MspInit+0x9c>)
 80020a2:	f001 fd4b 	bl	8003b3c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_I2C_MspInit+0x98>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <HAL_I2C_MspInit+0x98>)
 80020b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_I2C_MspInit+0x98>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2021      	movs	r0, #33	; 0x21
 80020c8:	f001 fa89 	bl	80035de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80020cc:	2021      	movs	r0, #33	; 0x21
 80020ce:	f001 faa2 	bl	8003616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80020d2:	bf00      	nop
 80020d4:	3728      	adds	r7, #40	; 0x28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40005800 	.word	0x40005800
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40021400 	.word	0x40021400

080020e8 <i2c_read_reg>:
extern I2C_HandleTypeDef hi2c2;


//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
uint8_t i2c_read_reg(uint8_t address, uint8_t reg)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	4603      	mov	r3, r0
 80020f0:	460a      	mov	r2, r1
 80020f2:	71fb      	strb	r3, [r7, #7]
 80020f4:	4613      	mov	r3, r2
 80020f6:	71bb      	strb	r3, [r7, #6]
	tx_data[0] = reg;
 80020f8:	4a0d      	ldr	r2, [pc, #52]	; (8002130 <i2c_read_reg+0x48>)
 80020fa:	79bb      	ldrb	r3, [r7, #6]
 80020fc:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 2, 10);
 80020fe:	230a      	movs	r3, #10
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	2302      	movs	r3, #2
 8002104:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <i2c_read_reg+0x48>)
 8002106:	2142      	movs	r1, #66	; 0x42
 8002108:	480a      	ldr	r0, [pc, #40]	; (8002134 <i2c_read_reg+0x4c>)
 800210a:	f002 f821 	bl	8004150 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, 0x42U, rx_data, 1, 10);
 800210e:	230a      	movs	r3, #10
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2301      	movs	r3, #1
 8002114:	4a08      	ldr	r2, [pc, #32]	; (8002138 <i2c_read_reg+0x50>)
 8002116:	2142      	movs	r1, #66	; 0x42
 8002118:	4806      	ldr	r0, [pc, #24]	; (8002134 <i2c_read_reg+0x4c>)
 800211a:	f002 f917 	bl	800434c <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 800211e:	2001      	movs	r0, #1
 8002120:	f001 f93a 	bl	8003398 <HAL_Delay>
	return rx_data[0];
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <i2c_read_reg+0x50>)
 8002126:	781b      	ldrb	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200000a8 	.word	0x200000a8
 8002134:	2004a2b8 	.word	0x2004a2b8
 8002138:	200000b0 	.word	0x200000b0

0800213c <i2c_write_reg>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void i2c_write_reg(uint8_t address, uint8_t reg, uint8_t data)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af02      	add	r7, sp, #8
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
 8002146:	460b      	mov	r3, r1
 8002148:	71bb      	strb	r3, [r7, #6]
 800214a:	4613      	mov	r3, r2
 800214c:	717b      	strb	r3, [r7, #5]
	tx_data[0] = reg;
 800214e:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <i2c_write_reg+0x3c>)
 8002150:	79bb      	ldrb	r3, [r7, #6]
 8002152:	7013      	strb	r3, [r2, #0]
	tx_data[1] = data;
 8002154:	4a08      	ldr	r2, [pc, #32]	; (8002178 <i2c_write_reg+0x3c>)
 8002156:	797b      	ldrb	r3, [r7, #5]
 8002158:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 3, 10);
 800215a:	230a      	movs	r3, #10
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2303      	movs	r3, #3
 8002160:	4a05      	ldr	r2, [pc, #20]	; (8002178 <i2c_write_reg+0x3c>)
 8002162:	2142      	movs	r1, #66	; 0x42
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <i2c_write_reg+0x40>)
 8002166:	f001 fff3 	bl	8004150 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800216a:	2001      	movs	r0, #1
 800216c:	f001 f914 	bl	8003398 <HAL_Delay>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	200000a8 	.word	0x200000a8
 800217c:	2004a2b8 	.word	0x2004a2b8

08002180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002184:	f001 f896 	bl	80032b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002188:	f000 f812 	bl	80021b0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800218c:	f7ff fe3e 	bl	8001e0c <MX_GPIO_Init>
  MX_DMA_Init();
 8002190:	f7ff f8b2 	bl	80012f8 <MX_DMA_Init>
  MX_TIM1_Init();
 8002194:	f000 fc58 	bl	8002a48 <MX_TIM1_Init>
  MX_FSMC_Init();
 8002198:	f7ff f8c8 	bl	800132c <MX_FSMC_Init>
  MX_I2C2_Init();
 800219c:	f7ff ff26 	bl	8001fec <MX_I2C2_Init>
  MX_USART6_UART_Init();
 80021a0:	f000 ffe2 	bl	8003168 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 80021a4:	f7fe ff3e 	bl	8001024 <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main_loop();
 80021a8:	f7fe ff84 	bl	80010b4 <app_main_loop>
 80021ac:	e7fc      	b.n	80021a8 <main+0x28>
	...

080021b0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b0aa      	sub	sp, #168	; 0xa8
 80021b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021ba:	2234      	movs	r2, #52	; 0x34
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f023 f8f8 	bl	80253b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021d4:	f107 0308 	add.w	r3, r7, #8
 80021d8:	2258      	movs	r2, #88	; 0x58
 80021da:	2100      	movs	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f023 f8e9 	bl	80253b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	4b3f      	ldr	r3, [pc, #252]	; (80022e4 <_Z18SystemClock_Configv+0x134>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a3e      	ldr	r2, [pc, #248]	; (80022e4 <_Z18SystemClock_Configv+0x134>)
 80021ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b3c      	ldr	r3, [pc, #240]	; (80022e4 <_Z18SystemClock_Configv+0x134>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021fe:	2300      	movs	r3, #0
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <_Z18SystemClock_Configv+0x138>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a38      	ldr	r2, [pc, #224]	; (80022e8 <_Z18SystemClock_Configv+0x138>)
 8002208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <_Z18SystemClock_Configv+0x138>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800221a:	2302      	movs	r3, #2
 800221c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800221e:	2301      	movs	r3, #1
 8002220:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002224:	2310      	movs	r3, #16
 8002226:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800222a:	2302      	movs	r3, #2
 800222c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002236:	2308      	movs	r3, #8
 8002238:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 100;
 800223c:	2364      	movs	r3, #100	; 0x64
 800223e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002242:	2302      	movs	r3, #2
 8002244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002248:	2302      	movs	r3, #2
 800224a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800224e:	2302      	movs	r3, #2
 8002250:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002254:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002258:	4618      	mov	r0, r3
 800225a:	f004 fe2b 	bl	8006eb4 <HAL_RCC_OscConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf14      	ite	ne
 8002264:	2301      	movne	r3, #1
 8002266:	2300      	moveq	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 800226e:	f000 f83d 	bl	80022ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002272:	230f      	movs	r3, #15
 8002274:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002276:	2302      	movs	r3, #2
 8002278:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800227a:	2300      	movs	r3, #0
 800227c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800227e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002282:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002284:	2300      	movs	r3, #0
 8002286:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002288:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800228c:	2103      	movs	r1, #3
 800228e:	4618      	mov	r0, r3
 8002290:	f004 f94c 	bl	800652c <HAL_RCC_ClockConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	bf14      	ite	ne
 800229a:	2301      	movne	r3, #1
 800229c:	2300      	moveq	r3, #0
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 80022a4:	f000 f822 	bl	80022ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
 80022a8:	2304      	movs	r3, #4
 80022aa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b2:	f107 0308 	add.w	r3, r7, #8
 80022b6:	4618      	mov	r0, r3
 80022b8:	f004 fb70 	bl	800699c <HAL_RCCEx_PeriphCLKConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bf14      	ite	ne
 80022c2:	2301      	movne	r3, #1
 80022c4:	2300      	moveq	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <_Z18SystemClock_Configv+0x120>
  {
    Error_Handler();
 80022cc:	f000 f80e 	bl	80022ec <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_5);
 80022d0:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80022d4:	2100      	movs	r1, #0
 80022d6:	2001      	movs	r0, #1
 80022d8:	f004 fa0e 	bl	80066f8 <HAL_RCC_MCOConfig>
}
 80022dc:	bf00      	nop
 80022de:	37a8      	adds	r7, #168	; 0xa8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40007000 	.word	0x40007000

080022ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f0:	b672      	cpsid	i
}
 80022f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <Error_Handler+0x8>

080022f6 <ov7670_saturation>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_saturation(int8_t s)  //-2 to 2
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	71fb      	strb	r3, [r7, #7]
	//color matrix values
	ov7670_write_register(OV7670_MTX1,	0x80 + 0x20 * s);
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	3304      	adds	r3, #4
 8002306:	b2db      	uxtb	r3, r3
 8002308:	015b      	lsls	r3, r3, #5
 800230a:	b2db      	uxtb	r3, r3
 800230c:	4619      	mov	r1, r3
 800230e:	204f      	movs	r0, #79	; 0x4f
 8002310:	f000 f8d8 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_MTX2, 	0x80 + 0x20 * s);
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	3304      	adds	r3, #4
 800231a:	b2db      	uxtb	r3, r3
 800231c:	015b      	lsls	r3, r3, #5
 800231e:	b2db      	uxtb	r3, r3
 8002320:	4619      	mov	r1, r3
 8002322:	2050      	movs	r0, #80	; 0x50
 8002324:	f000 f8ce 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_MTX3, 	0x00);
 8002328:	2100      	movs	r1, #0
 800232a:	2051      	movs	r0, #81	; 0x51
 800232c:	f000 f8ca 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_MTX4, 	0x22 + (0x11 * s) / 2);
 8002330:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002334:	4613      	mov	r3, r2
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	4413      	add	r3, r2
 800233a:	0fda      	lsrs	r2, r3, #31
 800233c:	4413      	add	r3, r2
 800233e:	105b      	asrs	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3322      	adds	r3, #34	; 0x22
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4619      	mov	r1, r3
 8002348:	2052      	movs	r0, #82	; 0x52
 800234a:	f000 f8bb 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_MTX5, 	0x5e + (0x2f * s) / 2);
 800234e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	0fda      	lsrs	r2, r3, #31
 800235e:	4413      	add	r3, r2
 8002360:	105b      	asrs	r3, r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	335e      	adds	r3, #94	; 0x5e
 8002366:	b2db      	uxtb	r3, r3
 8002368:	4619      	mov	r1, r3
 800236a:	2053      	movs	r0, #83	; 0x53
 800236c:	f000 f8aa 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_MTX6, 	0x80 + 0x20 * s);
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	3304      	adds	r3, #4
 8002376:	b2db      	uxtb	r3, r3
 8002378:	015b      	lsls	r3, r3, #5
 800237a:	b2db      	uxtb	r3, r3
 800237c:	4619      	mov	r1, r3
 800237e:	2054      	movs	r0, #84	; 0x54
 8002380:	f000 f8a0 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_MTXS, 	0x9e);  //matrix signs
 8002384:	219e      	movs	r1, #158	; 0x9e
 8002386:	2058      	movs	r0, #88	; 0x58
 8002388:	f000 f89c 	bl	80024c4 <ov7670_write_register>
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <ov7670_frame_control>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_frame_control(int16_t hStart,  int16_t vStart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	460a      	mov	r2, r1
 800239e:	80fb      	strh	r3, [r7, #6]
 80023a0:	4613      	mov	r3, r2
 80023a2:	80bb      	strh	r3, [r7, #4]
	int hStop = (hStart + 640) % 784;
 80023a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023ac:	4a2e      	ldr	r2, [pc, #184]	; (8002468 <ov7670_frame_control+0xd4>)
 80023ae:	fb82 1203 	smull	r1, r2, r2, r3
 80023b2:	1211      	asrs	r1, r2, #8
 80023b4:	17da      	asrs	r2, r3, #31
 80023b6:	1a8a      	subs	r2, r1, r2
 80023b8:	f44f 7144 	mov.w	r1, #784	; 0x310
 80023bc:	fb01 f202 	mul.w	r2, r1, r2
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
	ov7670_write_register(OV7670_HSTART,	hStart >> 3);
 80023c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023c8:	10db      	asrs	r3, r3, #3
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	4619      	mov	r1, r3
 80023d0:	2017      	movs	r0, #23
 80023d2:	f000 f877 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_HSTOP,		hStop >> 3);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	10db      	asrs	r3, r3, #3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	4619      	mov	r1, r3
 80023de:	2018      	movs	r0, #24
 80023e0:	f000 f870 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_HREF, 		((hStop & 0b111) << 3) | (hStart & 0b111));
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	b25b      	sxtb	r3, r3
 80023ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ee:	b25a      	sxtb	r2, r3
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	b25b      	sxtb	r3, r3
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	b25b      	sxtb	r3, r3
 80023fa:	4313      	orrs	r3, r2
 80023fc:	b25b      	sxtb	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	4619      	mov	r1, r3
 8002402:	2032      	movs	r0, #50	; 0x32
 8002404:	f000 f85e 	bl	80024c4 <ov7670_write_register>

	int vStop = (vStart + 480);
 8002408:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800240c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002410:	60bb      	str	r3, [r7, #8]
	ov7670_write_register(OV7670_VSTRT, 	vStart >> 2);
 8002412:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002416:	109b      	asrs	r3, r3, #2
 8002418:	b21b      	sxth	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	4619      	mov	r1, r3
 800241e:	2019      	movs	r0, #25
 8002420:	f000 f850 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_VSTOP, 	vStop >> 2);
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	109b      	asrs	r3, r3, #2
 8002428:	b2db      	uxtb	r3, r3
 800242a:	4619      	mov	r1, r3
 800242c:	201a      	movs	r0, #26
 800242e:	f000 f849 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_VREF, 		((vStop & 0b11) << 2) | (vStart & 0b11));
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	b25b      	sxtb	r3, r3
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	b25a      	sxtb	r2, r3
 800243e:	88bb      	ldrh	r3, [r7, #4]
 8002440:	b25b      	sxtb	r3, r3
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	b25b      	sxtb	r3, r3
 8002448:	4313      	orrs	r3, r2
 800244a:	b25b      	sxtb	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	4619      	mov	r1, r3
 8002450:	2003      	movs	r0, #3
 8002452:	f000 f837 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_COM10, 	0x20U);
 8002456:	2120      	movs	r1, #32
 8002458:	2015      	movs	r0, #21
 800245a:	f000 f833 	bl	80024c4 <ov7670_write_register>
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	5397829d 	.word	0x5397829d

0800246c <ov7670_subsampling_control>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_subsampling_control(int8_t com14, int8_t downSample, int8_t pclk_div)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
 8002476:	460b      	mov	r3, r1
 8002478:	71bb      	strb	r3, [r7, #6]
 800247a:	4613      	mov	r3, r2
 800247c:	717b      	strb	r3, [r7, #5]
	ov7670_write_register(OV7670_COM3, 			0x04);  //DCW enable
 800247e:	2104      	movs	r1, #4
 8002480:	200c      	movs	r0, #12
 8002482:	f000 f81f 	bl	80024c4 <ov7670_write_register>

	ov7670_write_register(OV7670_COM14, 		com14);       //pixel clock divided by 4, manual scaling enable, DCW and PCLK controlled by register
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	4619      	mov	r1, r3
 800248a:	203e      	movs	r0, #62	; 0x3e
 800248c:	f000 f81a 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_XSC, 		0x3a);
 8002490:	213a      	movs	r1, #58	; 0x3a
 8002492:	2070      	movs	r0, #112	; 0x70
 8002494:	f000 f816 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_YSC, 		0x35);
 8002498:	2135      	movs	r1, #53	; 0x35
 800249a:	2071      	movs	r0, #113	; 0x71
 800249c:	f000 f812 	bl	80024c4 <ov7670_write_register>

	ov7670_write_register(OV7670_SCL_DCWCTR, 	downSample);
 80024a0:	79bb      	ldrb	r3, [r7, #6]
 80024a2:	4619      	mov	r1, r3
 80024a4:	2072      	movs	r0, #114	; 0x72
 80024a6:	f000 f80d 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_PCLK_DIV, 	pclk_div); //pixel clock divided by 4
 80024aa:	797b      	ldrb	r3, [r7, #5]
 80024ac:	4619      	mov	r1, r3
 80024ae:	2073      	movs	r0, #115	; 0x73
 80024b0:	f000 f808 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_PCLK_DLY, 	0x02);
 80024b4:	2102      	movs	r1, #2
 80024b6:	20a2      	movs	r0, #162	; 0xa2
 80024b8:	f000 f804 	bl	80024c4 <ov7670_write_register>
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <ov7670_write_register>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_write_register(unsigned char reg, unsigned char val)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	460a      	mov	r2, r1
 80024ce:	71fb      	strb	r3, [r7, #7]
 80024d0:	4613      	mov	r3, r2
 80024d2:	71bb      	strb	r3, [r7, #6]
	//uint8_t buff[25] = {0};

	//sprintf(buff, "0x%02x,0x%02x,", reg, i2c_read_reg(0x43, reg));
	i2c_write_reg(0x42U, reg, val);
 80024d4:	79ba      	ldrb	r2, [r7, #6]
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	4619      	mov	r1, r3
 80024da:	2042      	movs	r0, #66	; 0x42
 80024dc:	f7ff fe2e 	bl	800213c <i2c_write_reg>
	//sprintf(buff + strlen(buff), "0x%02x\r\n", i2c_read_reg(0x43, reg));
	//uart_write(buff);
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <ov7670_read_register>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
uint8_t ov7670_read_register(unsigned char reg)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
	return i2c_read_reg(0x42U, reg);
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	4619      	mov	r1, r3
 80024f6:	2042      	movs	r0, #66	; 0x42
 80024f8:	f7ff fdf6 	bl	80020e8 <i2c_read_reg>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <ov7670_set_mode>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_set_mode(ov7670_res_fmt_t resolution, uint16_t exposure)
{   // 0,1 or 2 for QQQ, QQ, or Q VGA.  All are RGB565
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	460a      	mov	r2, r1
 8002510:	71fb      	strb	r3, [r7, #7]
 8002512:	4613      	mov	r3, r2
 8002514:	80bb      	strh	r3, [r7, #4]
	if (resolution < 0)
		resolution = 0;
	else if(resolution > 2)
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <ov7670_set_mode+0x1a>
		resolution = 2;
 800251c:	2302      	movs	r3, #2
 800251e:	71fb      	strb	r3, [r7, #7]

	ov7670_write_register(OV7670_COM7,	0x80U);				// all registers default
 8002520:	2180      	movs	r1, #128	; 0x80
 8002522:	2012      	movs	r0, #18
 8002524:	f7ff ffce 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_CLKRC,	0x80U);				// double clock?? My spec sheet says Reserved
 8002528:	2180      	movs	r1, #128	; 0x80
 800252a:	2011      	movs	r0, #17
 800252c:	f7ff ffca 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_COM11,	0x08U | 0x02U);		// enable auto 50/60Hz detect + exposure timing can be less...
 8002530:	210a      	movs	r1, #10
 8002532:	203b      	movs	r0, #59	; 0x3b
 8002534:	f7ff ffc6 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_COM7,	0x04U);				// RGB
 8002538:	2104      	movs	r1, #4
 800253a:	2012      	movs	r0, #18
 800253c:	f7ff ffc2 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_COM15,	0xC0U | 0x10U);		// RGB565
 8002540:	21d0      	movs	r1, #208	; 0xd0
 8002542:	2040      	movs	r0, #64	; 0x40
 8002544:	f7ff ffbe 	bl	80024c4 <ov7670_write_register>

	switch (resolution) {
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d01c      	beq.n	8002588 <ov7670_set_mode+0x82>
 800254e:	2b02      	cmp	r3, #2
 8002550:	dc25      	bgt.n	800259e <ov7670_set_mode+0x98>
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <ov7670_set_mode+0x56>
 8002556:	2b01      	cmp	r3, #1
 8002558:	d00b      	beq.n	8002572 <ov7670_set_mode+0x6c>
 800255a:	e020      	b.n	800259e <ov7670_set_mode+0x98>
	case 0:
		ov7670_subsampling_control(0x1B, 0x33, 0xF3);
 800255c:	f06f 020c 	mvn.w	r2, #12
 8002560:	2133      	movs	r1, #51	; 0x33
 8002562:	201b      	movs	r0, #27
 8002564:	f7ff ff82 	bl	800246c <ov7670_subsampling_control>
		ov7670_frame_control(196, 14);
 8002568:	210e      	movs	r1, #14
 800256a:	20c4      	movs	r0, #196	; 0xc4
 800256c:	f7ff ff12 	bl	8002394 <ov7670_frame_control>
		break;
 8002570:	e015      	b.n	800259e <ov7670_set_mode+0x98>
	case 1:
		ov7670_subsampling_control(0x1A, 0x22, 0xF2);
 8002572:	f06f 020d 	mvn.w	r2, #13
 8002576:	2122      	movs	r1, #34	; 0x22
 8002578:	201a      	movs	r0, #26
 800257a:	f7ff ff77 	bl	800246c <ov7670_subsampling_control>
		ov7670_frame_control(174, 14);
 800257e:	210e      	movs	r1, #14
 8002580:	20ae      	movs	r0, #174	; 0xae
 8002582:	f7ff ff07 	bl	8002394 <ov7670_frame_control>
		break;
 8002586:	e00a      	b.n	800259e <ov7670_set_mode+0x98>
	case 2:
		ov7670_subsampling_control(0x19, 0x11, 0xF1);
 8002588:	f06f 020e 	mvn.w	r2, #14
 800258c:	2111      	movs	r1, #17
 800258e:	2019      	movs	r0, #25
 8002590:	f7ff ff6c 	bl	800246c <ov7670_subsampling_control>
		ov7670_frame_control(154, 14);
 8002594:	210e      	movs	r1, #14
 8002596:	209a      	movs	r0, #154	; 0x9a
 8002598:	f7ff fefc 	bl	8002394 <ov7670_frame_control>
		break;
 800259c:	bf00      	nop
	}

	//ov7670_writeRegist(OV7670_COM10, 0x02); //VSYNC negative
	//ov7670_writeRegist(OV7670_MVFP, 0x2b);  //mirror flip

	ov7670_write_register(0xB0U, 			0x84U); // no clue what this is but it's most important for colors
 800259e:	2184      	movs	r1, #132	; 0x84
 80025a0:	20b0      	movs	r0, #176	; 0xb0
 80025a2:	f7ff ff8f 	bl	80024c4 <ov7670_write_register>
	ov7670_saturation(0);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7ff fea5 	bl	80022f6 <ov7670_saturation>
	ov7670_write_register(OV7670_COM8, 		0xE7U); // AGC AWB AEC all on
 80025ac:	21e7      	movs	r1, #231	; 0xe7
 80025ae:	2013      	movs	r0, #19
 80025b0:	f7ff ff88 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_AWBCTR0, 	0x9FU); // Simple AWB
 80025b4:	219f      	movs	r1, #159	; 0x9f
 80025b6:	206f      	movs	r0, #111	; 0x6f
 80025b8:	f7ff ff84 	bl	80024c4 <ov7670_write_register>

	// What is this comment about? I tried but don't see any difference.
	// Line 1029 of https://github.com/yandex/smart/blob/master/drivers/media/i2c/ov7670.c
	ov7670_write_register(OV7670_CLKRC, 	0x80U);
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	2011      	movs	r0, #17
 80025c0:	f7ff ff80 	bl	80024c4 <ov7670_write_register>

	HAL_Delay(50);
 80025c4:	2032      	movs	r0, #50	; 0x32
 80025c6:	f000 fee7 	bl	8003398 <HAL_Delay>

	uint8_t com1 = exposure & 0x03U;			// AEC[1:0]
 80025ca:	88bb      	ldrh	r3, [r7, #4]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	73fb      	strb	r3, [r7, #15]
	uint8_t aech = (exposure >> 2) & 0xFFU;		// AEC[9:2]
 80025d4:	88bb      	ldrh	r3, [r7, #4]
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	b29b      	uxth	r3, r3
 80025da:	73bb      	strb	r3, [r7, #14]
	uint8_t aechh = (exposure >> 10) & 0xFFU;	// AEC[15:10]
 80025dc:	88bb      	ldrh	r3, [r7, #4]
 80025de:	0a9b      	lsrs	r3, r3, #10
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	737b      	strb	r3, [r7, #13]

	ov7670_write_register(OV7670_COM1, 		(ov7670_read_register(OV7670_COM1) & ~0x03U) | com1);
 80025e4:	2004      	movs	r0, #4
 80025e6:	f7ff ff7f 	bl	80024e8 <ov7670_read_register>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f023 0303 	bic.w	r3, r3, #3
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	4619      	mov	r1, r3
 80025fa:	2004      	movs	r0, #4
 80025fc:	f7ff ff62 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_AECH, 		aech);
 8002600:	7bbb      	ldrb	r3, [r7, #14]
 8002602:	4619      	mov	r1, r3
 8002604:	2010      	movs	r0, #16
 8002606:	f7ff ff5d 	bl	80024c4 <ov7670_write_register>
	ov7670_write_register(OV7670_AECHH, 	aechh);
 800260a:	7b7b      	ldrb	r3, [r7, #13]
 800260c:	4619      	mov	r1, r3
 800260e:	2007      	movs	r0, #7
 8002610:	f7ff ff58 	bl	80024c4 <ov7670_write_register>
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <ov7670_init>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_init()
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
	OV7670_RST_LOW;
 8002620:	2200      	movs	r2, #0
 8002622:	2104      	movs	r1, #4
 8002624:	4815      	ldr	r0, [pc, #84]	; (800267c <ov7670_init+0x60>)
 8002626:	f001 fc1d 	bl	8003e64 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800262a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800262e:	f000 feb3 	bl	8003398 <HAL_Delay>
	OV7670_RST_HIGH;
 8002632:	2201      	movs	r2, #1
 8002634:	2104      	movs	r1, #4
 8002636:	4811      	ldr	r0, [pc, #68]	; (800267c <ov7670_init+0x60>)
 8002638:	f001 fc14 	bl	8003e64 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800263c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002640:	f000 feaa 	bl	8003398 <HAL_Delay>

	ov7670_set_mode(QVGA_RGB565, 200);
 8002644:	21c8      	movs	r1, #200	; 0xc8
 8002646:	2002      	movs	r0, #2
 8002648:	f7ff ff5d 	bl	8002506 <ov7670_set_mode>
	HAL_Delay(300);
 800264c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002650:	f000 fea2 	bl	8003398 <HAL_Delay>

	TIM1->DIER |= TIM_DIER_TDE;// | TIM_DIER_TDE TIM_DIER_UDE;
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <ov7670_init+0x64>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a09      	ldr	r2, [pc, #36]	; (8002680 <ov7670_init+0x64>)
 800265a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800265e:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start(&htim1);
 8002660:	4808      	ldr	r0, [pc, #32]	; (8002684 <ov7670_init+0x68>)
 8002662:	f004 ff3f 	bl	80074e4 <HAL_TIM_Base_Start>

	HAL_NVIC_SetPriority(OV7670_VSYNC_EXTI_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	2007      	movs	r0, #7
 800266c:	f000 ffb7 	bl	80035de <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7670_VSYNC_EXTI_IRQn);
 8002670:	2007      	movs	r0, #7
 8002672:	f000 ffd0 	bl	8003616 <HAL_NVIC_EnableIRQ>
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40021400 	.word	0x40021400
 8002680:	40010000 	.word	0x40010000
 8002684:	2004a36c 	.word	0x2004a36c

08002688 <HAL_GPIO_EXTI_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == OV7670_VSYNC_Pin)
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d102      	bne.n	800269e <HAL_GPIO_EXTI_Callback+0x16>
		EXTI1_VSYNC_Callback();
 8002698:	f000 f838 	bl	800270c <EXTI1_VSYNC_Callback>
	else if(GPIO_Pin == OV7670_HREF_Pin)
		EXTI0_HREF_Callback();
}
 800269c:	e004      	b.n	80026a8 <HAL_GPIO_EXTI_Callback+0x20>
	else if(GPIO_Pin == OV7670_HREF_Pin)
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_GPIO_EXTI_Callback+0x20>
		EXTI0_HREF_Callback();
 80026a4:	f000 f804 	bl	80026b0 <EXTI0_HREF_Callback>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <EXTI0_HREF_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI0_HREF_Callback()
{	// Falling edge
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
	HAL_DMA_Abort(&hdma_tim1_trig);
 80026b4:	4810      	ldr	r0, [pc, #64]	; (80026f8 <EXTI0_HREF_Callback+0x48>)
 80026b6:	f001 f8c0 	bl	800383a <HAL_DMA_Abort>
	HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)(g_cam_buff + g_offset), 640);
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <EXTI0_HREF_Callback+0x4c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a10      	ldr	r2, [pc, #64]	; (8002700 <EXTI0_HREF_Callback+0x50>)
 80026c0:	4413      	add	r3, r2
 80026c2:	461a      	mov	r2, r3
 80026c4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80026c8:	490e      	ldr	r1, [pc, #56]	; (8002704 <EXTI0_HREF_Callback+0x54>)
 80026ca:	480b      	ldr	r0, [pc, #44]	; (80026f8 <EXTI0_HREF_Callback+0x48>)
 80026cc:	f001 f87a 	bl	80037c4 <HAL_DMA_Start>
	if(g_cam_buff + g_offset >= g_cam_buff + OV7670_FRAME_SIZE_QVGA - 640)//38080=38400-320
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <EXTI0_HREF_Callback+0x4c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <EXTI0_HREF_Callback+0x50>)
 80026d6:	4413      	add	r3, r2
 80026d8:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <EXTI0_HREF_Callback+0x58>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d303      	bcc.n	80026e6 <EXTI0_HREF_Callback+0x36>
	{
		g_offset = 0;
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <EXTI0_HREF_Callback+0x4c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		g_offset += 640;
	}
}
 80026e4:	e005      	b.n	80026f2 <EXTI0_HREF_Callback+0x42>
		g_offset += 640;
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <EXTI0_HREF_Callback+0x4c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026ee:	4a03      	ldr	r2, [pc, #12]	; (80026fc <EXTI0_HREF_Callback+0x4c>)
 80026f0:	6013      	str	r3, [r2, #0]
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2004a30c 	.word	0x2004a30c
 80026fc:	20027f38 	.word	0x20027f38
 8002700:	200000b8 	.word	0x200000b8
 8002704:	40020410 	.word	0x40020410
 8002708:	20025638 	.word	0x20025638

0800270c <EXTI1_VSYNC_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI1_VSYNC_Callback()
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
	// Rising edge
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8002710:	2201      	movs	r2, #1
 8002712:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002716:	4818      	ldr	r0, [pc, #96]	; (8002778 <EXTI1_VSYNC_Callback+0x6c>)
 8002718:	f001 fba4 	bl	8003e64 <HAL_GPIO_WritePin>
	if(OV7670_VSYNC_GPIO_Port->IDR & OV7670_VSYNC_Pin)
 800271c:	4b17      	ldr	r3, [pc, #92]	; (800277c <EXTI1_VSYNC_Callback+0x70>)
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d006      	beq.n	8002736 <EXTI1_VSYNC_Callback+0x2a>
	{

		HAL_DMA_Abort(&hdma_tim1_trig);
 8002728:	4815      	ldr	r0, [pc, #84]	; (8002780 <EXTI1_VSYNC_Callback+0x74>)
 800272a:	f001 f886 	bl	800383a <HAL_DMA_Abort>
		HAL_NVIC_DisableIRQ(OV7670_HREF_EXTI_IRQn);
 800272e:	2006      	movs	r0, #6
 8002730:	f000 ff7f 	bl	8003632 <HAL_NVIC_DisableIRQ>
 8002734:	e017      	b.n	8002766 <EXTI1_VSYNC_Callback+0x5a>
	}
	// Falling edge
	else
	{
		HAL_NVIC_SetPriority(OV7670_HREF_EXTI_IRQn, 0, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	2006      	movs	r0, #6
 800273c:	f000 ff4f 	bl	80035de <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(OV7670_HREF_EXTI_IRQn);
 8002740:	2006      	movs	r0, #6
 8002742:	f000 ff68 	bl	8003616 <HAL_NVIC_EnableIRQ>
		HAL_DMA_Abort(&hdma_tim1_trig);
 8002746:	480e      	ldr	r0, [pc, #56]	; (8002780 <EXTI1_VSYNC_Callback+0x74>)
 8002748:	f001 f877 	bl	800383a <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)g_cam_buff, 640); // first line
 800274c:	4a0d      	ldr	r2, [pc, #52]	; (8002784 <EXTI1_VSYNC_Callback+0x78>)
 800274e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002752:	490d      	ldr	r1, [pc, #52]	; (8002788 <EXTI1_VSYNC_Callback+0x7c>)
 8002754:	480a      	ldr	r0, [pc, #40]	; (8002780 <EXTI1_VSYNC_Callback+0x74>)
 8002756:	f001 f835 	bl	80037c4 <HAL_DMA_Start>
		g_offset += 640;
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <EXTI1_VSYNC_Callback+0x80>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <EXTI1_VSYNC_Callback+0x80>)
 8002764:	6013      	str	r3, [r2, #0]
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002766:	2200      	movs	r2, #0
 8002768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <EXTI1_VSYNC_Callback+0x6c>)
 800276e:	f001 fb79 	bl	8003e64 <HAL_GPIO_WritePin>
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40020400 	.word	0x40020400
 800277c:	40021800 	.word	0x40021800
 8002780:	2004a30c 	.word	0x2004a30c
 8002784:	200000b8 	.word	0x200000b8
 8002788:	40020410 	.word	0x40020410
 800278c:	20027f38 	.word	0x20027f38

08002790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_MspInit+0x4c>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <HAL_MspInit+0x4c>)
 80027a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_MspInit+0x4c>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_MspInit+0x4c>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a08      	ldr	r2, [pc, #32]	; (80027dc <HAL_MspInit+0x4c>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_MspInit+0x4c>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800

080027e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027e4:	e7fe      	b.n	80027e4 <NMI_Handler+0x4>

080027e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <HardFault_Handler+0x4>

080027ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <MemManage_Handler+0x4>

080027f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f6:	e7fe      	b.n	80027f6 <BusFault_Handler+0x4>

080027f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <UsageFault_Handler+0x4>

080027fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800282c:	f000 fd94 	bl	8003358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}

08002834 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002838:	2001      	movs	r0, #1
 800283a:	f001 fb2d 	bl	8003e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}

08002842 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002846:	2002      	movs	r0, #2
 8002848:	f001 fb26 	bl	8003e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}

08002850 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002854:	4802      	ldr	r0, [pc, #8]	; (8002860 <I2C2_EV_IRQHandler+0x10>)
 8002856:	f001 ff9f 	bl	8004798 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	2004a2b8 	.word	0x2004a2b8

08002864 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((USART6->SR & USART_SR_RXNE) && (USART6->CR1 & USART_CR1_RXNEIE))
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <USART6_IRQHandler+0x2c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b00      	cmp	r3, #0
 8002872:	d007      	beq.n	8002884 <USART6_IRQHandler+0x20>
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <USART6_IRQHandler+0x2c>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <USART6_IRQHandler+0x20>
		uart_rx_callback();
 8002880:	f000 fb9a 	bl	8002fb8 <uart_rx_callback>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002884:	4803      	ldr	r0, [pc, #12]	; (8002894 <USART6_IRQHandler+0x30>)
 8002886:	f005 f993 	bl	8007bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40011400 	.word	0x40011400
 8002894:	2004a4e8 	.word	0x2004a4e8

08002898 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
	return 1;
 800289c:	2301      	movs	r3, #1
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <_kill>:

int _kill(int pid, int sig)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028b2:	f022 fd07 	bl	80252c4 <__errno>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2216      	movs	r2, #22
 80028ba:	601a      	str	r2, [r3, #0]
	return -1;
 80028bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <_exit>:

void _exit (int status)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ffe7 	bl	80028a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028da:	e7fe      	b.n	80028da <_exit+0x12>

080028dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	e00a      	b.n	8002904 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028ee:	f3af 8000 	nop.w
 80028f2:	4601      	mov	r1, r0
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	60ba      	str	r2, [r7, #8]
 80028fa:	b2ca      	uxtb	r2, r1
 80028fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	3301      	adds	r3, #1
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	dbf0      	blt.n	80028ee <_read+0x12>
	}

return len;
 800290c:	687b      	ldr	r3, [r7, #4]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	e009      	b.n	800293c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	60ba      	str	r2, [r7, #8]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3301      	adds	r3, #1
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	429a      	cmp	r2, r3
 8002942:	dbf1      	blt.n	8002928 <_write+0x12>
	}
	return len;
 8002944:	687b      	ldr	r3, [r7, #4]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <_close>:

int _close(int file)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
	return -1;
 8002956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002976:	605a      	str	r2, [r3, #4]
	return 0;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <_isatty>:

int _isatty(int file)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
	return 1;
 800298e:	2301      	movs	r3, #1
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
	return 0;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <_sbrk+0x5c>)
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <_sbrk+0x60>)
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029cc:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <_sbrk+0x64>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <_sbrk+0x64>)
 80029d6:	4a12      	ldr	r2, [pc, #72]	; (8002a20 <_sbrk+0x68>)
 80029d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <_sbrk+0x64>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d207      	bcs.n	80029f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029e8:	f022 fc6c 	bl	80252c4 <__errno>
 80029ec:	4603      	mov	r3, r0
 80029ee:	220c      	movs	r2, #12
 80029f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029f6:	e009      	b.n	8002a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <_sbrk+0x64>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <_sbrk+0x64>)
 8002a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20050000 	.word	0x20050000
 8002a18:	00000400 	.word	0x00000400
 8002a1c:	20027f3c 	.word	0x20027f3c
 8002a20:	2004a540 	.word	0x2004a540

08002a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <SystemInit+0x20>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <SystemInit+0x20>)
 8002a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a4e:	f107 030c 	add.w	r3, r7, #12
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	60da      	str	r2, [r3, #12]
 8002a5c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a66:	4b21      	ldr	r3, [pc, #132]	; (8002aec <MX_TIM1_Init+0xa4>)
 8002a68:	4a21      	ldr	r2, [pc, #132]	; (8002af0 <MX_TIM1_Init+0xa8>)
 8002a6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <MX_TIM1_Init+0xa4>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a72:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <MX_TIM1_Init+0xa4>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a78:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <MX_TIM1_Init+0xa4>)
 8002a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <MX_TIM1_Init+0xa4>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a86:	4b19      	ldr	r3, [pc, #100]	; (8002aec <MX_TIM1_Init+0xa4>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a8c:	4b17      	ldr	r3, [pc, #92]	; (8002aec <MX_TIM1_Init+0xa4>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a92:	4816      	ldr	r0, [pc, #88]	; (8002aec <MX_TIM1_Init+0xa4>)
 8002a94:	f004 fcd6 	bl	8007444 <HAL_TIM_Base_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002a9e:	f7ff fc25 	bl	80022ec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002aa2:	2307      	movs	r3, #7
 8002aa4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002aa6:	2360      	movs	r3, #96	; 0x60
 8002aa8:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002ab2:	f107 030c 	add.w	r3, r7, #12
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	480c      	ldr	r0, [pc, #48]	; (8002aec <MX_TIM1_Init+0xa4>)
 8002aba:	f004 fd7b 	bl	80075b4 <HAL_TIM_SlaveConfigSynchro>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8002ac4:	f7ff fc12 	bl	80022ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4805      	ldr	r0, [pc, #20]	; (8002aec <MX_TIM1_Init+0xa4>)
 8002ad6:	f004 ff5d 	bl	8007994 <HAL_TIMEx_MasterConfigSynchronization>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002ae0:	f7ff fc04 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ae4:	bf00      	nop
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	2004a36c 	.word	0x2004a36c
 8002af0:	40010000 	.word	0x40010000

08002af4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a31      	ldr	r2, [pc, #196]	; (8002bd8 <HAL_TIM_Base_MspInit+0xe4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d15b      	bne.n	8002bce <HAL_TIM_Base_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <HAL_TIM_Base_MspInit+0xe8>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a2f      	ldr	r2, [pc, #188]	; (8002bdc <HAL_TIM_Base_MspInit+0xe8>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <HAL_TIM_Base_MspInit+0xe8>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <HAL_TIM_Base_MspInit+0xe8>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a28      	ldr	r2, [pc, #160]	; (8002bdc <HAL_TIM_Base_MspInit+0xe8>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <HAL_TIM_Base_MspInit+0xe8>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4619      	mov	r1, r3
 8002b6a:	481d      	ldr	r0, [pc, #116]	; (8002be0 <HAL_TIM_Base_MspInit+0xec>)
 8002b6c:	f000 ffe6 	bl	8003b3c <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_TRIG Init */
    hdma_tim1_trig.Instance = DMA2_Stream0;
 8002b70:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <HAL_TIM_Base_MspInit+0xf0>)
 8002b72:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <HAL_TIM_Base_MspInit+0xf4>)
 8002b74:	601a      	str	r2, [r3, #0]
    hdma_tim1_trig.Init.Channel = DMA_CHANNEL_6;
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_TIM_Base_MspInit+0xf0>)
 8002b78:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002b7c:	605a      	str	r2, [r3, #4]
    hdma_tim1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b7e:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_TIM_Base_MspInit+0xf0>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
    hdma_tim1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b84:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <HAL_TIM_Base_MspInit+0xf0>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
    hdma_tim1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002b8a:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <HAL_TIM_Base_MspInit+0xf0>)
 8002b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b90:	611a      	str	r2, [r3, #16]
    hdma_tim1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b92:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <HAL_TIM_Base_MspInit+0xf0>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	615a      	str	r2, [r3, #20]
    hdma_tim1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b98:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_TIM_Base_MspInit+0xf0>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
    hdma_tim1_trig.Init.Mode = DMA_NORMAL;
 8002b9e:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <HAL_TIM_Base_MspInit+0xf0>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	61da      	str	r2, [r3, #28]
    hdma_tim1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <HAL_TIM_Base_MspInit+0xf0>)
 8002ba6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002baa:	621a      	str	r2, [r3, #32]
    hdma_tim1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bac:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_TIM_Base_MspInit+0xf0>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_trig) != HAL_OK)
 8002bb2:	480c      	ldr	r0, [pc, #48]	; (8002be4 <HAL_TIM_Base_MspInit+0xf0>)
 8002bb4:	f000 fd58 	bl	8003668 <HAL_DMA_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_TIM_Base_MspInit+0xce>
    {
      Error_Handler();
 8002bbe:	f7ff fb95 	bl	80022ec <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_trig);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <HAL_TIM_Base_MspInit+0xf0>)
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38
 8002bc8:	4a06      	ldr	r2, [pc, #24]	; (8002be4 <HAL_TIM_Base_MspInit+0xf0>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002bce:	bf00      	nop
 8002bd0:	3728      	adds	r7, #40	; 0x28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40010000 	.word	0x40010000
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40020000 	.word	0x40020000
 8002be4:	2004a30c 	.word	0x2004a30c
 8002be8:	40026410 	.word	0x40026410

08002bec <uart_init>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_init()
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <uart_init+0x20>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <uart_init+0x20>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0220 	orr.w	r2, r2, #32
 8002bfe:	60da      	str	r2, [r3, #12]
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	2004a4e8 	.word	0x2004a4e8

08002c10 <uart_tx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_tx_process()
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
	static uint8_t last_nose = 0;
	uint8_t string_size;

	switch(g_uart_tx_state)
 8002c16:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <uart_tx_process+0xd8>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d030      	beq.n	8002c80 <uart_tx_process+0x70>
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	dc5e      	bgt.n	8002ce0 <uart_tx_process+0xd0>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <uart_tx_process+0x1c>
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d00a      	beq.n	8002c40 <uart_tx_process+0x30>
			g_uart_tx_state = UART_TX_TRANSMIT;
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
			g_uart_tx_state = UART_TX_IDLE;
		break;
	}
}
 8002c2a:	e059      	b.n	8002ce0 <uart_tx_process+0xd0>
		if(g_uart_tx_nose != g_uart_tx_tail)
 8002c2c:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <uart_tx_process+0xdc>)
 8002c2e:	881a      	ldrh	r2, [r3, #0]
 8002c30:	4b2f      	ldr	r3, [pc, #188]	; (8002cf0 <uart_tx_process+0xe0>)
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d050      	beq.n	8002cda <uart_tx_process+0xca>
			g_uart_tx_state = UART_TX_TRANSMIT;
 8002c38:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <uart_tx_process+0xd8>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	701a      	strb	r2, [r3, #0]
		break;
 8002c3e:	e04c      	b.n	8002cda <uart_tx_process+0xca>
		string_size = strlen(g_uart_tx_buffer + (g_uart_tx_nose)) + 1;
 8002c40:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <uart_tx_process+0xdc>)
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <uart_tx_process+0xe4>)
 8002c48:	4413      	add	r3, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fd fb42 	bl	80002d4 <strlen>
 8002c50:	4603      	mov	r3, r0
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	3301      	adds	r3, #1
 8002c56:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit_IT(
 8002c58:	4b24      	ldr	r3, [pc, #144]	; (8002cec <uart_tx_process+0xdc>)
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <uart_tx_process+0xe4>)
 8002c60:	4413      	add	r3, r2
 8002c62:	79fa      	ldrb	r2, [r7, #7]
 8002c64:	b292      	uxth	r2, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	4823      	ldr	r0, [pc, #140]	; (8002cf8 <uart_tx_process+0xe8>)
 8002c6a:	f004 ff5c 	bl	8007b26 <HAL_UART_Transmit_IT>
		last_nose = g_uart_tx_nose;
 8002c6e:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <uart_tx_process+0xdc>)
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <uart_tx_process+0xec>)
 8002c76:	701a      	strb	r2, [r3, #0]
		g_uart_tx_state = UART_TX_TRANSMITING;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <uart_tx_process+0xd8>)
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	701a      	strb	r2, [r3, #0]
		break;
 8002c7e:	e02f      	b.n	8002ce0 <uart_tx_process+0xd0>
		if((last_nose == g_uart_tx_nose))
 8002c80:	4b1e      	ldr	r3, [pc, #120]	; (8002cfc <uart_tx_process+0xec>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	4b19      	ldr	r3, [pc, #100]	; (8002cec <uart_tx_process+0xdc>)
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d103      	bne.n	8002c96 <uart_tx_process+0x86>
			g_uart_tx_state = UART_TX_TRANSMITING;
 8002c8e:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <uart_tx_process+0xd8>)
 8002c90:	2202      	movs	r2, #2
 8002c92:	701a      	strb	r2, [r3, #0]
		break;
 8002c94:	e023      	b.n	8002cde <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail != g_uart_tx_nose))
 8002c96:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <uart_tx_process+0xec>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <uart_tx_process+0xdc>)
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d009      	beq.n	8002cb8 <uart_tx_process+0xa8>
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <uart_tx_process+0xe0>)
 8002ca6:	881a      	ldrh	r2, [r3, #0]
 8002ca8:	4b10      	ldr	r3, [pc, #64]	; (8002cec <uart_tx_process+0xdc>)
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d003      	beq.n	8002cb8 <uart_tx_process+0xa8>
			g_uart_tx_state = UART_TX_TRANSMIT;
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <uart_tx_process+0xd8>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
		break;
 8002cb6:	e012      	b.n	8002cde <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
 8002cb8:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <uart_tx_process+0xec>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <uart_tx_process+0xdc>)
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d00b      	beq.n	8002cde <uart_tx_process+0xce>
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <uart_tx_process+0xe0>)
 8002cc8:	881a      	ldrh	r2, [r3, #0]
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <uart_tx_process+0xdc>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d105      	bne.n	8002cde <uart_tx_process+0xce>
			g_uart_tx_state = UART_TX_IDLE;
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <uart_tx_process+0xd8>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
		break;
 8002cd8:	e001      	b.n	8002cde <uart_tx_process+0xce>
		break;
 8002cda:	bf00      	nop
 8002cdc:	e000      	b.n	8002ce0 <uart_tx_process+0xd0>
		break;
 8002cde:	bf00      	nop
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20027f40 	.word	0x20027f40
 8002cec:	20028044 	.word	0x20028044
 8002cf0:	20028046 	.word	0x20028046
 8002cf4:	20027f44 	.word	0x20027f44
 8002cf8:	2004a4e8 	.word	0x2004a4e8
 8002cfc:	2002804e 	.word	0x2002804e

08002d00 <uart_write>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_write(uint8_t* buff)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	uint8_t string_size = strlen(buff) + 1;
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7fd fae3 	bl	80002d4 <strlen>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]

	if(
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8002d16:	4b3e      	ldr	r3, [pc, #248]	; (8002e10 <uart_write+0x110>)
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <uart_write+0x114>)
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	1ad3      	subs	r3, r2, r3
	if(
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	db0a      	blt.n	8002d3c <uart_write+0x3c>
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8002d26:	7bfa      	ldrb	r2, [r7, #15]
 8002d28:	4b39      	ldr	r3, [pc, #228]	; (8002e10 <uart_write+0x110>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4b39      	ldr	r3, [pc, #228]	; (8002e14 <uart_write+0x114>)
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	1acb      	subs	r3, r1, r3
 8002d34:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	db10      	blt.n	8002d5e <uart_write+0x5e>
			((g_uart_tx_tail - g_uart_tx_nose <= 0) && (string_size < g_uart_tx_nose - g_uart_tx_tail)))
 8002d3c:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <uart_write+0x110>)
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b34      	ldr	r3, [pc, #208]	; (8002e14 <uart_write+0x114>)
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	1ad3      	subs	r3, r2, r3
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	dc5c      	bgt.n	8002e06 <uart_write+0x106>
			((g_uart_tx_tail - g_uart_tx_nose <= 0) && (string_size < g_uart_tx_nose - g_uart_tx_tail)))
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	4b31      	ldr	r3, [pc, #196]	; (8002e14 <uart_write+0x114>)
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	4619      	mov	r1, r3
 8002d54:	4b2e      	ldr	r3, [pc, #184]	; (8002e10 <uart_write+0x110>)
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	1acb      	subs	r3, r1, r3
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	da53      	bge.n	8002e06 <uart_write+0x106>
	{
		if(((g_uart_tx_tail - g_uart_tx_nose >= 0)) && (string_size > (UART_TX_BUFFER_MAX - g_uart_tx_tail)))
 8002d5e:	4b2c      	ldr	r3, [pc, #176]	; (8002e10 <uart_write+0x110>)
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <uart_write+0x114>)
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	db2f      	blt.n	8002dce <uart_write+0xce>
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	4b27      	ldr	r3, [pc, #156]	; (8002e10 <uart_write+0x110>)
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	dd28      	ble.n	8002dce <uart_write+0xce>
		{
			strncpy(g_uart_tx_buffer + g_uart_tx_tail, buff, UART_TX_BUFFER_MAX - g_uart_tx_tail);
 8002d7c:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <uart_write+0x110>)
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <uart_write+0x118>)
 8002d84:	4413      	add	r3, r2
 8002d86:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <uart_write+0x110>)
 8002d88:	8812      	ldrh	r2, [r2, #0]
 8002d8a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f022 ff3d 	bl	8025c10 <strncpy>
			string_size -= (UART_TX_BUFFER_MAX - g_uart_tx_tail);
 8002d96:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <uart_write+0x110>)
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	4413      	add	r3, r2
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
			strncpy(g_uart_tx_buffer + 0, buff + (UART_TX_BUFFER_MAX - g_uart_tx_tail), string_size);
 8002da6:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <uart_write+0x110>)
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002dae:	461a      	mov	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	4619      	mov	r1, r3
 8002db8:	4817      	ldr	r0, [pc, #92]	; (8002e18 <uart_write+0x118>)
 8002dba:	f022 ff29 	bl	8025c10 <strncpy>
			g_uart_tx_tail = 0;
 8002dbe:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <uart_write+0x110>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	801a      	strh	r2, [r3, #0]
			g_uart_tx_tail = string_size;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <uart_write+0x110>)
 8002dca:	801a      	strh	r2, [r3, #0]
				g_uart_tx_tail += string_size;
			else
				g_uart_tx_tail = 0;
		}
	}
}
 8002dcc:	e01b      	b.n	8002e06 <uart_write+0x106>
			strcpy(g_uart_tx_buffer + g_uart_tx_tail, buff);
 8002dce:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <uart_write+0x110>)
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <uart_write+0x118>)
 8002dd6:	4413      	add	r3, r2
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f022 fefe 	bl	8025bdc <strcpy>
			if(g_uart_tx_tail + string_size < UART_TX_BUFFER_MAX)
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <uart_write+0x110>)
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	4413      	add	r3, r2
 8002dea:	2bfe      	cmp	r3, #254	; 0xfe
 8002dec:	dc08      	bgt.n	8002e00 <uart_write+0x100>
				g_uart_tx_tail += string_size;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <uart_write+0x110>)
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <uart_write+0x110>)
 8002dfc:	801a      	strh	r2, [r3, #0]
}
 8002dfe:	e002      	b.n	8002e06 <uart_write+0x106>
				g_uart_tx_tail = 0;
 8002e00:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <uart_write+0x110>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	801a      	strh	r2, [r3, #0]
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20028046 	.word	0x20028046
 8002e14:	20028044 	.word	0x20028044
 8002e18:	20027f44 	.word	0x20027f44

08002e1c <HAL_UART_TxCpltCallback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
	g_uart_tx_nose += strlen(g_uart_tx_buffer + g_uart_tx_nose) + 1;
 8002e24:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <HAL_UART_TxCpltCallback+0x44>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <HAL_UART_TxCpltCallback+0x48>)
 8002e2c:	4413      	add	r3, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fa50 	bl	80002d4 <strlen>
 8002e34:	4603      	mov	r3, r0
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_UART_TxCpltCallback+0x44>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3301      	adds	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_UART_TxCpltCallback+0x44>)
 8002e46:	801a      	strh	r2, [r3, #0]

	if(g_uart_tx_nose >= UART_TX_BUFFER_MAX)
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_UART_TxCpltCallback+0x44>)
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	2bfe      	cmp	r3, #254	; 0xfe
 8002e4e:	d902      	bls.n	8002e56 <HAL_UART_TxCpltCallback+0x3a>
		g_uart_tx_nose = 0;
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HAL_UART_TxCpltCallback+0x44>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	801a      	strh	r2, [r3, #0]

}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20028044 	.word	0x20028044
 8002e64:	20027f44 	.word	0x20027f44

08002e68 <uart_rx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_process()
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
	uint8_t string_size = strlen(g_uart_rx_buffer + g_uart_rx_nose + 1) + 1;
 8002e6e:	4b4b      	ldr	r3, [pc, #300]	; (8002f9c <uart_rx_process+0x134>)
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	4a4a      	ldr	r2, [pc, #296]	; (8002fa0 <uart_rx_process+0x138>)
 8002e76:	4413      	add	r3, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd fa2b 	bl	80002d4 <strlen>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	71fb      	strb	r3, [r7, #7]

	switch(g_uart_rx_state)
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <uart_rx_process+0x13c>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <uart_rx_process+0x2c>
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d008      	beq.n	8002ea4 <uart_rx_process+0x3c>
			g_uart_rx_state = UART_RX_IDLE;
		break;


	}
}
 8002e92:	e07e      	b.n	8002f92 <uart_rx_process+0x12a>
		if(g_uart_rx_cnt)
 8002e94:	4b44      	ldr	r3, [pc, #272]	; (8002fa8 <uart_rx_process+0x140>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d077      	beq.n	8002f8c <uart_rx_process+0x124>
			g_uart_rx_state = UART_RX_RECEIVE;
 8002e9c:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <uart_rx_process+0x13c>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
		break;
 8002ea2:	e073      	b.n	8002f8c <uart_rx_process+0x124>
		if(g_uart_rx_nose < g_uart_rx_tail &&
 8002ea4:	4b3d      	ldr	r3, [pc, #244]	; (8002f9c <uart_rx_process+0x134>)
 8002ea6:	881a      	ldrh	r2, [r3, #0]
 8002ea8:	4b40      	ldr	r3, [pc, #256]	; (8002fac <uart_rx_process+0x144>)
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d21c      	bcs.n	8002eea <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 8002eb0:	4b3a      	ldr	r3, [pc, #232]	; (8002f9c <uart_rx_process+0x134>)
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	4413      	add	r3, r2
 8002eba:	3b02      	subs	r3, #2
 8002ebc:	4a38      	ldr	r2, [pc, #224]	; (8002fa0 <uart_rx_process+0x138>)
 8002ebe:	5cd3      	ldrb	r3, [r2, r3]
		if(g_uart_rx_nose < g_uart_rx_tail &&
 8002ec0:	2b0d      	cmp	r3, #13
 8002ec2:	d112      	bne.n	8002eea <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 1] == '\n'))
 8002ec4:	4b35      	ldr	r3, [pc, #212]	; (8002f9c <uart_rx_process+0x134>)
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	4413      	add	r3, r2
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	4a33      	ldr	r2, [pc, #204]	; (8002fa0 <uart_rx_process+0x138>)
 8002ed2:	5cd3      	ldrb	r3, [r2, r3]
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 8002ed4:	2b0a      	cmp	r3, #10
 8002ed6:	d108      	bne.n	8002eea <uart_rx_process+0x82>
			serial_protocol(g_uart_rx_buffer + g_uart_rx_nose + 1);
 8002ed8:	4b30      	ldr	r3, [pc, #192]	; (8002f9c <uart_rx_process+0x134>)
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	3301      	adds	r3, #1
 8002ede:	4a30      	ldr	r2, [pc, #192]	; (8002fa0 <uart_rx_process+0x138>)
 8002ee0:	4413      	add	r3, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f92c 	bl	8003140 <serial_protocol>
 8002ee8:	e02e      	b.n	8002f48 <uart_rx_process+0xe0>
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 8002eea:	4b2c      	ldr	r3, [pc, #176]	; (8002f9c <uart_rx_process+0x134>)
 8002eec:	881a      	ldrh	r2, [r3, #0]
 8002eee:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <uart_rx_process+0x144>)
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d928      	bls.n	8002f48 <uart_rx_process+0xe0>
							(g_uart_rx_buffer[strlen(g_uart_rx_buffer) - 1] == '\n'))
 8002ef6:	482a      	ldr	r0, [pc, #168]	; (8002fa0 <uart_rx_process+0x138>)
 8002ef8:	f7fd f9ec 	bl	80002d4 <strlen>
 8002efc:	4603      	mov	r3, r0
 8002efe:	3b01      	subs	r3, #1
 8002f00:	4a27      	ldr	r2, [pc, #156]	; (8002fa0 <uart_rx_process+0x138>)
 8002f02:	5cd3      	ldrb	r3, [r2, r3]
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 8002f04:	2b0a      	cmp	r3, #10
 8002f06:	d11f      	bne.n	8002f48 <uart_rx_process+0xe0>
			strncpy(g_uart_rx_tmp_buf, g_uart_rx_buffer + g_uart_rx_nose + 1, string_size);
 8002f08:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <uart_rx_process+0x134>)
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <uart_rx_process+0x138>)
 8002f10:	4413      	add	r3, r2
 8002f12:	79fa      	ldrb	r2, [r7, #7]
 8002f14:	4619      	mov	r1, r3
 8002f16:	4826      	ldr	r0, [pc, #152]	; (8002fb0 <uart_rx_process+0x148>)
 8002f18:	f022 fe7a 	bl	8025c10 <strncpy>
			string_size = strlen(g_uart_rx_buffer + 1) + 1;
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <uart_rx_process+0x14c>)
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd f9d8 	bl	80002d4 <strlen>
 8002f24:	4603      	mov	r3, r0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	71fb      	strb	r3, [r7, #7]
			strncpy(g_uart_rx_tmp_buf + strlen(g_uart_rx_tmp_buf), g_uart_rx_buffer , string_size);
 8002f2c:	4820      	ldr	r0, [pc, #128]	; (8002fb0 <uart_rx_process+0x148>)
 8002f2e:	f7fd f9d1 	bl	80002d4 <strlen>
 8002f32:	4603      	mov	r3, r0
 8002f34:	4a1e      	ldr	r2, [pc, #120]	; (8002fb0 <uart_rx_process+0x148>)
 8002f36:	4413      	add	r3, r2
 8002f38:	79fa      	ldrb	r2, [r7, #7]
 8002f3a:	4919      	ldr	r1, [pc, #100]	; (8002fa0 <uart_rx_process+0x138>)
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f022 fe67 	bl	8025c10 <strncpy>
			serial_protocol(g_uart_rx_tmp_buf);
 8002f42:	481b      	ldr	r0, [pc, #108]	; (8002fb0 <uart_rx_process+0x148>)
 8002f44:	f000 f8fc 	bl	8003140 <serial_protocol>
		g_uart_rx_cnt--;
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <uart_rx_process+0x140>)
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <uart_rx_process+0x140>)
 8002f52:	801a      	strh	r2, [r3, #0]
		if(g_uart_rx_nose + string_size < UART_RX_BUFFER_MAX)
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <uart_rx_process+0x134>)
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	2bfe      	cmp	r3, #254	; 0xfe
 8002f60:	dc08      	bgt.n	8002f74 <uart_rx_process+0x10c>
			g_uart_rx_nose += string_size;
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <uart_rx_process+0x134>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <uart_rx_process+0x134>)
 8002f70:	801a      	strh	r2, [r3, #0]
 8002f72:	e003      	b.n	8002f7c <uart_rx_process+0x114>
			g_uart_rx_nose = string_size;
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <uart_rx_process+0x134>)
 8002f7a:	801a      	strh	r2, [r3, #0]
		if(!g_uart_rx_cnt)
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <uart_rx_process+0x140>)
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d105      	bne.n	8002f90 <uart_rx_process+0x128>
			g_uart_rx_state = UART_RX_IDLE;
 8002f84:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <uart_rx_process+0x13c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
		break;
 8002f8a:	e001      	b.n	8002f90 <uart_rx_process+0x128>
		break;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <uart_rx_process+0x12a>
		break;
 8002f90:	bf00      	nop
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20028048 	.word	0x20028048
 8002fa0:	2004a3e8 	.word	0x2004a3e8
 8002fa4:	20027f41 	.word	0x20027f41
 8002fa8:	2002804c 	.word	0x2002804c
 8002fac:	2002804a 	.word	0x2002804a
 8002fb0:	2004a3b4 	.word	0x2004a3b4
 8002fb4:	2004a3e9 	.word	0x2004a3e9

08002fb8 <uart_rx_callback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_callback()
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
	g_uart_rx_tail++;
 8002fbc:	4b5b      	ldr	r3, [pc, #364]	; (800312c <uart_rx_callback+0x174>)
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	4b59      	ldr	r3, [pc, #356]	; (800312c <uart_rx_callback+0x174>)
 8002fc6:	801a      	strh	r2, [r3, #0]

	if((g_uart_rx_tail < (UART_RX_BUFFER_MAX - 1)) && ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2/*1*/)))
 8002fc8:	4b58      	ldr	r3, [pc, #352]	; (800312c <uart_rx_callback+0x174>)
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	2bfd      	cmp	r3, #253	; 0xfd
 8002fce:	d847      	bhi.n	8003060 <uart_rx_callback+0xa8>
 8002fd0:	4b57      	ldr	r3, [pc, #348]	; (8003130 <uart_rx_callback+0x178>)
 8002fd2:	881a      	ldrh	r2, [r3, #0]
 8002fd4:	4b55      	ldr	r3, [pc, #340]	; (800312c <uart_rx_callback+0x174>)
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d307      	bcc.n	8002fec <uart_rx_callback+0x34>
 8002fdc:	4b54      	ldr	r3, [pc, #336]	; (8003130 <uart_rx_callback+0x178>)
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b52      	ldr	r3, [pc, #328]	; (800312c <uart_rx_callback+0x174>)
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	dd39      	ble.n	8003060 <uart_rx_callback+0xa8>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);//253
 8002fec:	4b51      	ldr	r3, [pc, #324]	; (8003134 <uart_rx_callback+0x17c>)
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	4b4e      	ldr	r3, [pc, #312]	; (800312c <uart_rx_callback+0x174>)
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	b2c9      	uxtb	r1, r1
 8002ff8:	4b4f      	ldr	r3, [pc, #316]	; (8003138 <uart_rx_callback+0x180>)
 8002ffa:	5499      	strb	r1, [r3, r2]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8002ffc:	4b4b      	ldr	r3, [pc, #300]	; (800312c <uart_rx_callback+0x174>)
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	4b4d      	ldr	r3, [pc, #308]	; (8003138 <uart_rx_callback+0x180>)
 8003004:	5c9b      	ldrb	r3, [r3, r2]
 8003006:	2b0d      	cmp	r3, #13
 8003008:	f040 8087 	bne.w	800311a <uart_rx_callback+0x162>
		{
			g_uart_rx_buffer[++g_uart_rx_tail] = '\n';//254
 800300c:	4b47      	ldr	r3, [pc, #284]	; (800312c <uart_rx_callback+0x174>)
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	3301      	adds	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	4b45      	ldr	r3, [pc, #276]	; (800312c <uart_rx_callback+0x174>)
 8003016:	801a      	strh	r2, [r3, #0]
 8003018:	4b44      	ldr	r3, [pc, #272]	; (800312c <uart_rx_callback+0x174>)
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	4b46      	ldr	r3, [pc, #280]	; (8003138 <uart_rx_callback+0x180>)
 8003020:	210a      	movs	r1, #10
 8003022:	5499      	strb	r1, [r3, r2]
			g_uart_rx_cnt++;
 8003024:	4b45      	ldr	r3, [pc, #276]	; (800313c <uart_rx_callback+0x184>)
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	4b43      	ldr	r3, [pc, #268]	; (800313c <uart_rx_callback+0x184>)
 800302e:	801a      	strh	r2, [r3, #0]
			g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 8003030:	4b3e      	ldr	r3, [pc, #248]	; (800312c <uart_rx_callback+0x174>)
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	3301      	adds	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	4b3c      	ldr	r3, [pc, #240]	; (800312c <uart_rx_callback+0x174>)
 800303a:	801a      	strh	r2, [r3, #0]
 800303c:	4b3b      	ldr	r3, [pc, #236]	; (800312c <uart_rx_callback+0x174>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <uart_rx_callback+0x180>)
 8003044:	2100      	movs	r1, #0
 8003046:	5499      	strb	r1, [r3, r2]
			if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 0))
 8003048:	4b38      	ldr	r3, [pc, #224]	; (800312c <uart_rx_callback+0x174>)
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	2bff      	cmp	r3, #255	; 0xff
 800304e:	d164      	bne.n	800311a <uart_rx_callback+0x162>
 8003050:	4b37      	ldr	r3, [pc, #220]	; (8003130 <uart_rx_callback+0x178>)
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d060      	beq.n	800311a <uart_rx_callback+0x162>
			{
				g_uart_rx_tail = 0;
 8003058:	4b34      	ldr	r3, [pc, #208]	; (800312c <uart_rx_callback+0x174>)
 800305a:	2200      	movs	r2, #0
 800305c:	801a      	strh	r2, [r3, #0]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 800305e:	e05c      	b.n	800311a <uart_rx_callback+0x162>
			}
		}
	}
	else if((g_uart_rx_tail == (UART_RX_BUFFER_MAX - 1)) && (g_uart_rx_nose > 1)/*(g_uart_rx_nose < g_uart_rx_tail)*/)
 8003060:	4b32      	ldr	r3, [pc, #200]	; (800312c <uart_rx_callback+0x174>)
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	2bfe      	cmp	r3, #254	; 0xfe
 8003066:	d13e      	bne.n	80030e6 <uart_rx_callback+0x12e>
 8003068:	4b31      	ldr	r3, [pc, #196]	; (8003130 <uart_rx_callback+0x178>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d93a      	bls.n	80030e6 <uart_rx_callback+0x12e>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);//254
 8003070:	4b30      	ldr	r3, [pc, #192]	; (8003134 <uart_rx_callback+0x17c>)
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	4b2d      	ldr	r3, [pc, #180]	; (800312c <uart_rx_callback+0x174>)
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	b2c9      	uxtb	r1, r1
 800307c:	4b2e      	ldr	r3, [pc, #184]	; (8003138 <uart_rx_callback+0x180>)
 800307e:	5499      	strb	r1, [r3, r2]
		g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 8003080:	4b2a      	ldr	r3, [pc, #168]	; (800312c <uart_rx_callback+0x174>)
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	3301      	adds	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	4b28      	ldr	r3, [pc, #160]	; (800312c <uart_rx_callback+0x174>)
 800308a:	801a      	strh	r2, [r3, #0]
 800308c:	4b27      	ldr	r3, [pc, #156]	; (800312c <uart_rx_callback+0x174>)
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	4b29      	ldr	r3, [pc, #164]	; (8003138 <uart_rx_callback+0x180>)
 8003094:	2100      	movs	r1, #0
 8003096:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 8003098:	4b24      	ldr	r3, [pc, #144]	; (800312c <uart_rx_callback+0x174>)
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	3b01      	subs	r3, #1
 800309e:	4a26      	ldr	r2, [pc, #152]	; (8003138 <uart_rx_callback+0x180>)
 80030a0:	5cd3      	ldrb	r3, [r2, r3]
 80030a2:	2b0d      	cmp	r3, #13
 80030a4:	d13b      	bne.n	800311e <uart_rx_callback+0x166>
		{
			g_uart_rx_cnt++;
 80030a6:	4b25      	ldr	r3, [pc, #148]	; (800313c <uart_rx_callback+0x184>)
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	3301      	adds	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	4b23      	ldr	r3, [pc, #140]	; (800313c <uart_rx_callback+0x184>)
 80030b0:	801a      	strh	r2, [r3, #0]
			if(g_uart_rx_nose > 1)
 80030b2:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <uart_rx_callback+0x178>)
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d931      	bls.n	800311e <uart_rx_callback+0x166>
			{
				g_uart_rx_tail = 0;
 80030ba:	4b1c      	ldr	r3, [pc, #112]	; (800312c <uart_rx_callback+0x174>)
 80030bc:	2200      	movs	r2, #0
 80030be:	801a      	strh	r2, [r3, #0]
				g_uart_rx_buffer[g_uart_rx_tail] = '\n';//0
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <uart_rx_callback+0x174>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <uart_rx_callback+0x180>)
 80030c8:	210a      	movs	r1, #10
 80030ca:	5499      	strb	r1, [r3, r2]
				g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//1
 80030cc:	4b17      	ldr	r3, [pc, #92]	; (800312c <uart_rx_callback+0x174>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	3301      	adds	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	4b15      	ldr	r3, [pc, #84]	; (800312c <uart_rx_callback+0x174>)
 80030d6:	801a      	strh	r2, [r3, #0]
 80030d8:	4b14      	ldr	r3, [pc, #80]	; (800312c <uart_rx_callback+0x174>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <uart_rx_callback+0x180>)
 80030e0:	2100      	movs	r1, #0
 80030e2:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 80030e4:	e01b      	b.n	800311e <uart_rx_callback+0x166>
			{
				//error - full
			}
		}
	}
	else if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 1))
 80030e6:	4b11      	ldr	r3, [pc, #68]	; (800312c <uart_rx_callback+0x174>)
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	2bff      	cmp	r3, #255	; 0xff
 80030ec:	d118      	bne.n	8003120 <uart_rx_callback+0x168>
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <uart_rx_callback+0x178>)
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d914      	bls.n	8003120 <uart_rx_callback+0x168>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = '\0';
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <uart_rx_callback+0x174>)
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <uart_rx_callback+0x180>)
 80030fe:	2100      	movs	r1, #0
 8003100:	5499      	strb	r1, [r3, r2]
		g_uart_rx_tail = 1;
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <uart_rx_callback+0x174>)
 8003104:	2201      	movs	r2, #1
 8003106:	801a      	strh	r2, [r3, #0]
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <uart_rx_callback+0x17c>)
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	4b07      	ldr	r3, [pc, #28]	; (800312c <uart_rx_callback+0x174>)
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	b2c9      	uxtb	r1, r1
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <uart_rx_callback+0x180>)
 8003116:	5499      	strb	r1, [r3, r2]

	}

}
 8003118:	e002      	b.n	8003120 <uart_rx_callback+0x168>
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 800311a:	bf00      	nop
 800311c:	e000      	b.n	8003120 <uart_rx_callback+0x168>
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 800311e:	bf00      	nop
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	2002804a 	.word	0x2002804a
 8003130:	20028048 	.word	0x20028048
 8003134:	40011400 	.word	0x40011400
 8003138:	2004a3e8 	.word	0x2004a3e8
 800313c:	2002804c 	.word	0x2002804c

08003140 <serial_protocol>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void serial_protocol(uint8_t* buff)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af02      	add	r7, sp, #8
 8003146:	6078      	str	r0, [r7, #4]
	LCD_PrintStr(20, 100, 0, 0x841FU, buff, 5);
 8003148:	2305      	movs	r3, #5
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	f248 431f 	movw	r3, #33823	; 0x841f
 8003154:	2200      	movs	r2, #0
 8003156:	2164      	movs	r1, #100	; 0x64
 8003158:	2014      	movs	r0, #20
 800315a:	f7fe fc05 	bl	8001968 <LCD_PrintStr>
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <MX_USART6_UART_Init+0x4c>)
 800316e:	4a12      	ldr	r2, [pc, #72]	; (80031b8 <MX_USART6_UART_Init+0x50>)
 8003170:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <MX_USART6_UART_Init+0x4c>)
 8003174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003178:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800317a:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <MX_USART6_UART_Init+0x4c>)
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <MX_USART6_UART_Init+0x4c>)
 8003182:	2200      	movs	r2, #0
 8003184:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <MX_USART6_UART_Init+0x4c>)
 8003188:	2200      	movs	r2, #0
 800318a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <MX_USART6_UART_Init+0x4c>)
 800318e:	220c      	movs	r2, #12
 8003190:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <MX_USART6_UART_Init+0x4c>)
 8003194:	2200      	movs	r2, #0
 8003196:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <MX_USART6_UART_Init+0x4c>)
 800319a:	2200      	movs	r2, #0
 800319c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800319e:	4805      	ldr	r0, [pc, #20]	; (80031b4 <MX_USART6_UART_Init+0x4c>)
 80031a0:	f004 fc74 	bl	8007a8c <HAL_UART_Init>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80031aa:	f7ff f89f 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	2004a4e8 	.word	0x2004a4e8
 80031b8:	40011400 	.word	0x40011400

080031bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1e      	ldr	r2, [pc, #120]	; (8003254 <HAL_UART_MspInit+0x98>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d136      	bne.n	800324c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_UART_MspInit+0x9c>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	4a1c      	ldr	r2, [pc, #112]	; (8003258 <HAL_UART_MspInit+0x9c>)
 80031e8:	f043 0320 	orr.w	r3, r3, #32
 80031ec:	6453      	str	r3, [r2, #68]	; 0x44
 80031ee:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <HAL_UART_MspInit+0x9c>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	4b16      	ldr	r3, [pc, #88]	; (8003258 <HAL_UART_MspInit+0x9c>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a15      	ldr	r2, [pc, #84]	; (8003258 <HAL_UART_MspInit+0x9c>)
 8003204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <HAL_UART_MspInit+0x9c>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8003216:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800321a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003224:	2303      	movs	r3, #3
 8003226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003228:	2308      	movs	r3, #8
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	4619      	mov	r1, r3
 8003232:	480a      	ldr	r0, [pc, #40]	; (800325c <HAL_UART_MspInit+0xa0>)
 8003234:	f000 fc82 	bl	8003b3c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003238:	2200      	movs	r2, #0
 800323a:	2100      	movs	r1, #0
 800323c:	2047      	movs	r0, #71	; 0x47
 800323e:	f000 f9ce 	bl	80035de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003242:	2047      	movs	r0, #71	; 0x47
 8003244:	f000 f9e7 	bl	8003616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */
    uart_init();
 8003248:	f7ff fcd0 	bl	8002bec <uart_init>
  /* USER CODE END USART6_MspInit 1 */
  }
}
 800324c:	bf00      	nop
 800324e:	3728      	adds	r7, #40	; 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40011400 	.word	0x40011400
 8003258:	40023800 	.word	0x40023800
 800325c:	40021800 	.word	0x40021800

08003260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003298 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003264:	480d      	ldr	r0, [pc, #52]	; (800329c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003266:	490e      	ldr	r1, [pc, #56]	; (80032a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003268:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800326a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800326c:	e002      	b.n	8003274 <LoopCopyDataInit>

0800326e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800326e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003272:	3304      	adds	r3, #4

08003274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003278:	d3f9      	bcc.n	800326e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800327a:	4a0b      	ldr	r2, [pc, #44]	; (80032a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800327c:	4c0b      	ldr	r4, [pc, #44]	; (80032ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800327e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003280:	e001      	b.n	8003286 <LoopFillZerobss>

08003282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003284:	3204      	adds	r2, #4

08003286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003288:	d3fb      	bcc.n	8003282 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800328a:	f7ff fbcb 	bl	8002a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800328e:	f022 f831 	bl	80252f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003292:	f7fe ff75 	bl	8002180 <main>
  bx  lr    
 8003296:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003298:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800329c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80032a4:	08075d2c 	.word	0x08075d2c
  ldr r2, =_sbss
 80032a8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80032ac:	2004a540 	.word	0x2004a540

080032b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032b0:	e7fe      	b.n	80032b0 <ADC_IRQHandler>
	...

080032b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032b8:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <HAL_Init+0x40>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0d      	ldr	r2, [pc, #52]	; (80032f4 <HAL_Init+0x40>)
 80032be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_Init+0x40>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a0a      	ldr	r2, [pc, #40]	; (80032f4 <HAL_Init+0x40>)
 80032ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d0:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <HAL_Init+0x40>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <HAL_Init+0x40>)
 80032d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032dc:	2003      	movs	r0, #3
 80032de:	f000 f973 	bl	80035c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032e2:	2000      	movs	r0, #0
 80032e4:	f000 f808 	bl	80032f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032e8:	f7ff fa52 	bl	8002790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40023c00 	.word	0x40023c00

080032f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003300:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_InitTick+0x54>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_InitTick+0x58>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	4619      	mov	r1, r3
 800330a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800330e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003312:	fbb2 f3f3 	udiv	r3, r2, r3
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f999 	bl	800364e <HAL_SYSTICK_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e00e      	b.n	8003344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b0f      	cmp	r3, #15
 800332a:	d80a      	bhi.n	8003342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800332c:	2200      	movs	r2, #0
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003334:	f000 f953 	bl	80035de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003338:	4a06      	ldr	r2, [pc, #24]	; (8003354 <HAL_InitTick+0x5c>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e000      	b.n	8003344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20000004 	.word	0x20000004
 8003350:	2000000c 	.word	0x2000000c
 8003354:	20000008 	.word	0x20000008

08003358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_IncTick+0x20>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_IncTick+0x24>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4413      	add	r3, r2
 8003368:	4a04      	ldr	r2, [pc, #16]	; (800337c <HAL_IncTick+0x24>)
 800336a:	6013      	str	r3, [r2, #0]
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	2000000c 	.word	0x2000000c
 800337c:	2004a52c 	.word	0x2004a52c

08003380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return uwTick;
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_GetTick+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	2004a52c 	.word	0x2004a52c

08003398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a0:	f7ff ffee 	bl	8003380 <HAL_GetTick>
 80033a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b0:	d005      	beq.n	80033be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_Delay+0x44>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033be:	bf00      	nop
 80033c0:	f7ff ffde 	bl	8003380 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d8f7      	bhi.n	80033c0 <HAL_Delay+0x28>
  {
  }
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	2000000c 	.word	0x2000000c

080033e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <__NVIC_SetPriorityGrouping+0x44>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033fc:	4013      	ands	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800340c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003412:	4a04      	ldr	r2, [pc, #16]	; (8003424 <__NVIC_SetPriorityGrouping+0x44>)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	60d3      	str	r3, [r2, #12]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <__NVIC_GetPriorityGrouping+0x18>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	0a1b      	lsrs	r3, r3, #8
 8003432:	f003 0307 	and.w	r3, r3, #7
}
 8003436:	4618      	mov	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	2b00      	cmp	r3, #0
 8003454:	db0b      	blt.n	800346e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	f003 021f 	and.w	r2, r3, #31
 800345c:	4907      	ldr	r1, [pc, #28]	; (800347c <__NVIC_EnableIRQ+0x38>)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2001      	movs	r0, #1
 8003466:	fa00 f202 	lsl.w	r2, r0, r2
 800346a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000e100 	.word	0xe000e100

08003480 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	db12      	blt.n	80034b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	490a      	ldr	r1, [pc, #40]	; (80034c4 <__NVIC_DisableIRQ+0x44>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2001      	movs	r0, #1
 80034a2:	fa00 f202 	lsl.w	r2, r0, r2
 80034a6:	3320      	adds	r3, #32
 80034a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034ac:	f3bf 8f4f 	dsb	sy
}
 80034b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034b2:	f3bf 8f6f 	isb	sy
}
 80034b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000e100 	.word	0xe000e100

080034c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	6039      	str	r1, [r7, #0]
 80034d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	db0a      	blt.n	80034f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	490c      	ldr	r1, [pc, #48]	; (8003514 <__NVIC_SetPriority+0x4c>)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	0112      	lsls	r2, r2, #4
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	440b      	add	r3, r1
 80034ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034f0:	e00a      	b.n	8003508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	4908      	ldr	r1, [pc, #32]	; (8003518 <__NVIC_SetPriority+0x50>)
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	3b04      	subs	r3, #4
 8003500:	0112      	lsls	r2, r2, #4
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	440b      	add	r3, r1
 8003506:	761a      	strb	r2, [r3, #24]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	e000e100 	.word	0xe000e100
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800351c:	b480      	push	{r7}
 800351e:	b089      	sub	sp, #36	; 0x24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f1c3 0307 	rsb	r3, r3, #7
 8003536:	2b04      	cmp	r3, #4
 8003538:	bf28      	it	cs
 800353a:	2304      	movcs	r3, #4
 800353c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3304      	adds	r3, #4
 8003542:	2b06      	cmp	r3, #6
 8003544:	d902      	bls.n	800354c <NVIC_EncodePriority+0x30>
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	3b03      	subs	r3, #3
 800354a:	e000      	b.n	800354e <NVIC_EncodePriority+0x32>
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43da      	mvns	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	401a      	ands	r2, r3
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	43d9      	mvns	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003574:	4313      	orrs	r3, r2
         );
}
 8003576:	4618      	mov	r0, r3
 8003578:	3724      	adds	r7, #36	; 0x24
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3b01      	subs	r3, #1
 8003590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003594:	d301      	bcc.n	800359a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003596:	2301      	movs	r3, #1
 8003598:	e00f      	b.n	80035ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <SysTick_Config+0x40>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3b01      	subs	r3, #1
 80035a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035a2:	210f      	movs	r1, #15
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035a8:	f7ff ff8e 	bl	80034c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <SysTick_Config+0x40>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035b2:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <SysTick_Config+0x40>)
 80035b4:	2207      	movs	r2, #7
 80035b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	e000e010 	.word	0xe000e010

080035c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff ff05 	bl	80033e0 <__NVIC_SetPriorityGrouping>
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035de:	b580      	push	{r7, lr}
 80035e0:	b086      	sub	sp, #24
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	4603      	mov	r3, r0
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035f0:	f7ff ff1a 	bl	8003428 <__NVIC_GetPriorityGrouping>
 80035f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	6978      	ldr	r0, [r7, #20]
 80035fc:	f7ff ff8e 	bl	800351c <NVIC_EncodePriority>
 8003600:	4602      	mov	r2, r0
 8003602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff ff5d 	bl	80034c8 <__NVIC_SetPriority>
}
 800360e:	bf00      	nop
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	4603      	mov	r3, r0
 800361e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff ff0d 	bl	8003444 <__NVIC_EnableIRQ>
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b082      	sub	sp, #8
 8003636:	af00      	add	r7, sp, #0
 8003638:	4603      	mov	r3, r0
 800363a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800363c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff ff1d 	bl	8003480 <__NVIC_DisableIRQ>
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff ff94 	bl	8003584 <SysTick_Config>
 800365c:	4603      	mov	r3, r0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003674:	f7ff fe84 	bl	8003380 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e099      	b.n	80037b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036a4:	e00f      	b.n	80036c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036a6:	f7ff fe6b 	bl	8003380 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b05      	cmp	r3, #5
 80036b2:	d908      	bls.n	80036c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2203      	movs	r2, #3
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e078      	b.n	80037b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e8      	bne.n	80036a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4b38      	ldr	r3, [pc, #224]	; (80037c0 <HAL_DMA_Init+0x158>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800370a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	2b04      	cmp	r3, #4
 800371e:	d107      	bne.n	8003730 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	4313      	orrs	r3, r2
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f023 0307 	bic.w	r3, r3, #7
 8003746:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	2b04      	cmp	r3, #4
 8003758:	d117      	bne.n	800378a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00e      	beq.n	800378a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f969 	bl	8003a44 <DMA_CheckFifoParam>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2240      	movs	r2, #64	; 0x40
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003786:	2301      	movs	r3, #1
 8003788:	e016      	b.n	80037b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f920 	bl	80039d8 <DMA_CalcBaseAndBitshift>
 8003798:	4603      	mov	r3, r0
 800379a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a0:	223f      	movs	r2, #63	; 0x3f
 80037a2:	409a      	lsls	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	e010803f 	.word	0xe010803f

080037c4 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_DMA_Start+0x20>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e026      	b.n	8003832 <HAL_DMA_Start+0x6e>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d115      	bne.n	8003824 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f8b4 	bl	800397a <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e005      	b.n	8003830 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800382c:	2302      	movs	r3, #2
 800382e:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8003830:	7dfb      	ldrb	r3, [r7, #23]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b084      	sub	sp, #16
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003846:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003848:	f7ff fd9a 	bl	8003380 <HAL_GetTick>
 800384c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d008      	beq.n	800386c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2280      	movs	r2, #128	; 0x80
 800385e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e052      	b.n	8003912 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0216 	bic.w	r2, r2, #22
 800387a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800388a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d103      	bne.n	800389c <HAL_DMA_Abort+0x62>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003898:	2b00      	cmp	r3, #0
 800389a:	d007      	beq.n	80038ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0208 	bic.w	r2, r2, #8
 80038aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038bc:	e013      	b.n	80038e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038be:	f7ff fd5f 	bl	8003380 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b05      	cmp	r3, #5
 80038ca:	d90c      	bls.n	80038e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2203      	movs	r2, #3
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e015      	b.n	8003912 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e4      	bne.n	80038be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f8:	223f      	movs	r2, #63	; 0x3f
 80038fa:	409a      	lsls	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d004      	beq.n	8003938 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2280      	movs	r2, #128	; 0x80
 8003932:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e00c      	b.n	8003952 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2205      	movs	r2, #5
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800396c:	b2db      	uxtb	r3, r3
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003996:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d108      	bne.n	80039ba <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039b8:	e007      	b.n	80039ca <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	60da      	str	r2, [r3, #12]
}
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	3b10      	subs	r3, #16
 80039e8:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <DMA_CalcBaseAndBitshift+0x64>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039f2:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <DMA_CalcBaseAndBitshift+0x68>)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d909      	bls.n	8003a1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a0e:	f023 0303 	bic.w	r3, r3, #3
 8003a12:	1d1a      	adds	r2, r3, #4
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	659a      	str	r2, [r3, #88]	; 0x58
 8003a18:	e007      	b.n	8003a2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	aaaaaaab 	.word	0xaaaaaaab
 8003a40:	0802c1e8 	.word	0x0802c1e8

08003a44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d11f      	bne.n	8003a9e <DMA_CheckFifoParam+0x5a>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d856      	bhi.n	8003b12 <DMA_CheckFifoParam+0xce>
 8003a64:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <DMA_CheckFifoParam+0x28>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003a7d 	.word	0x08003a7d
 8003a70:	08003a8f 	.word	0x08003a8f
 8003a74:	08003a7d 	.word	0x08003a7d
 8003a78:	08003b13 	.word	0x08003b13
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d046      	beq.n	8003b16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8c:	e043      	b.n	8003b16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a96:	d140      	bne.n	8003b1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9c:	e03d      	b.n	8003b1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa6:	d121      	bne.n	8003aec <DMA_CheckFifoParam+0xa8>
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d837      	bhi.n	8003b1e <DMA_CheckFifoParam+0xda>
 8003aae:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <DMA_CheckFifoParam+0x70>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003ac5 	.word	0x08003ac5
 8003ab8:	08003acb 	.word	0x08003acb
 8003abc:	08003ac5 	.word	0x08003ac5
 8003ac0:	08003add 	.word	0x08003add
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac8:	e030      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d025      	beq.n	8003b22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ada:	e022      	b.n	8003b22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ae4:	d11f      	bne.n	8003b26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aea:	e01c      	b.n	8003b26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d903      	bls.n	8003afa <DMA_CheckFifoParam+0xb6>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d003      	beq.n	8003b00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003af8:	e018      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
      break;
 8003afe:	e015      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00e      	beq.n	8003b2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b10:	e00b      	b.n	8003b2a <DMA_CheckFifoParam+0xe6>
      break;
 8003b12:	bf00      	nop
 8003b14:	e00a      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b16:	bf00      	nop
 8003b18:	e008      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e006      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e004      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b22:	bf00      	nop
 8003b24:	e002      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b26:	bf00      	nop
 8003b28:	e000      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b2a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop

08003b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b089      	sub	sp, #36	; 0x24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	e165      	b.n	8003e24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b58:	2201      	movs	r2, #1
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	f040 8154 	bne.w	8003e1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d005      	beq.n	8003b8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d130      	bne.n	8003bf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	2203      	movs	r2, #3
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	f003 0201 	and.w	r2, r3, #1
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d017      	beq.n	8003c2c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	2203      	movs	r2, #3
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d123      	bne.n	8003c80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	08da      	lsrs	r2, r3, #3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3208      	adds	r2, #8
 8003c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	220f      	movs	r2, #15
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	08da      	lsrs	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3208      	adds	r2, #8
 8003c7a:	69b9      	ldr	r1, [r7, #24]
 8003c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	43db      	mvns	r3, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4013      	ands	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0203 	and.w	r2, r3, #3
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80ae 	beq.w	8003e1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	4b5d      	ldr	r3, [pc, #372]	; (8003e3c <HAL_GPIO_Init+0x300>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	4a5c      	ldr	r2, [pc, #368]	; (8003e3c <HAL_GPIO_Init+0x300>)
 8003ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cd2:	4b5a      	ldr	r3, [pc, #360]	; (8003e3c <HAL_GPIO_Init+0x300>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cde:	4a58      	ldr	r2, [pc, #352]	; (8003e40 <HAL_GPIO_Init+0x304>)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	089b      	lsrs	r3, r3, #2
 8003ce4:	3302      	adds	r3, #2
 8003ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	220f      	movs	r2, #15
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a4f      	ldr	r2, [pc, #316]	; (8003e44 <HAL_GPIO_Init+0x308>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d025      	beq.n	8003d56 <HAL_GPIO_Init+0x21a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a4e      	ldr	r2, [pc, #312]	; (8003e48 <HAL_GPIO_Init+0x30c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d01f      	beq.n	8003d52 <HAL_GPIO_Init+0x216>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a4d      	ldr	r2, [pc, #308]	; (8003e4c <HAL_GPIO_Init+0x310>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d019      	beq.n	8003d4e <HAL_GPIO_Init+0x212>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a4c      	ldr	r2, [pc, #304]	; (8003e50 <HAL_GPIO_Init+0x314>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <HAL_GPIO_Init+0x20e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a4b      	ldr	r2, [pc, #300]	; (8003e54 <HAL_GPIO_Init+0x318>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00d      	beq.n	8003d46 <HAL_GPIO_Init+0x20a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a4a      	ldr	r2, [pc, #296]	; (8003e58 <HAL_GPIO_Init+0x31c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d007      	beq.n	8003d42 <HAL_GPIO_Init+0x206>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a49      	ldr	r2, [pc, #292]	; (8003e5c <HAL_GPIO_Init+0x320>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d101      	bne.n	8003d3e <HAL_GPIO_Init+0x202>
 8003d3a:	2306      	movs	r3, #6
 8003d3c:	e00c      	b.n	8003d58 <HAL_GPIO_Init+0x21c>
 8003d3e:	2307      	movs	r3, #7
 8003d40:	e00a      	b.n	8003d58 <HAL_GPIO_Init+0x21c>
 8003d42:	2305      	movs	r3, #5
 8003d44:	e008      	b.n	8003d58 <HAL_GPIO_Init+0x21c>
 8003d46:	2304      	movs	r3, #4
 8003d48:	e006      	b.n	8003d58 <HAL_GPIO_Init+0x21c>
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e004      	b.n	8003d58 <HAL_GPIO_Init+0x21c>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e002      	b.n	8003d58 <HAL_GPIO_Init+0x21c>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <HAL_GPIO_Init+0x21c>
 8003d56:	2300      	movs	r3, #0
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	f002 0203 	and.w	r2, r2, #3
 8003d5e:	0092      	lsls	r2, r2, #2
 8003d60:	4093      	lsls	r3, r2
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d68:	4935      	ldr	r1, [pc, #212]	; (8003e40 <HAL_GPIO_Init+0x304>)
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	089b      	lsrs	r3, r3, #2
 8003d6e:	3302      	adds	r3, #2
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d76:	4b3a      	ldr	r3, [pc, #232]	; (8003e60 <HAL_GPIO_Init+0x324>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d9a:	4a31      	ldr	r2, [pc, #196]	; (8003e60 <HAL_GPIO_Init+0x324>)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003da0:	4b2f      	ldr	r3, [pc, #188]	; (8003e60 <HAL_GPIO_Init+0x324>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dc4:	4a26      	ldr	r2, [pc, #152]	; (8003e60 <HAL_GPIO_Init+0x324>)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dca:	4b25      	ldr	r3, [pc, #148]	; (8003e60 <HAL_GPIO_Init+0x324>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dee:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <HAL_GPIO_Init+0x324>)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003df4:	4b1a      	ldr	r3, [pc, #104]	; (8003e60 <HAL_GPIO_Init+0x324>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e18:	4a11      	ldr	r2, [pc, #68]	; (8003e60 <HAL_GPIO_Init+0x324>)
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	3301      	adds	r3, #1
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2b0f      	cmp	r3, #15
 8003e28:	f67f ae96 	bls.w	8003b58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	bf00      	nop
 8003e30:	3724      	adds	r7, #36	; 0x24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40013800 	.word	0x40013800
 8003e44:	40020000 	.word	0x40020000
 8003e48:	40020400 	.word	0x40020400
 8003e4c:	40020800 	.word	0x40020800
 8003e50:	40020c00 	.word	0x40020c00
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40021400 	.word	0x40021400
 8003e5c:	40021800 	.word	0x40021800
 8003e60:	40013c00 	.word	0x40013c00

08003e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	807b      	strh	r3, [r7, #2]
 8003e70:	4613      	mov	r3, r2
 8003e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e74:	787b      	ldrb	r3, [r7, #1]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e80:	e003      	b.n	8003e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e82:	887b      	ldrh	r3, [r7, #2]
 8003e84:	041a      	lsls	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	619a      	str	r2, [r3, #24]
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d006      	beq.n	8003ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eae:	4a05      	ldr	r2, [pc, #20]	; (8003ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fbe6 	bl	8002688 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40013c00 	.word	0x40013c00

08003ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e12b      	b.n	8004132 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fe f8aa 	bl	8002048 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2224      	movs	r2, #36	; 0x24
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f2c:	f002 fd0e 	bl	800694c <HAL_RCC_GetPCLK1Freq>
 8003f30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4a81      	ldr	r2, [pc, #516]	; (800413c <HAL_I2C_Init+0x274>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d807      	bhi.n	8003f4c <HAL_I2C_Init+0x84>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a80      	ldr	r2, [pc, #512]	; (8004140 <HAL_I2C_Init+0x278>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	bf94      	ite	ls
 8003f44:	2301      	movls	r3, #1
 8003f46:	2300      	movhi	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	e006      	b.n	8003f5a <HAL_I2C_Init+0x92>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4a7d      	ldr	r2, [pc, #500]	; (8004144 <HAL_I2C_Init+0x27c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	bf94      	ite	ls
 8003f54:	2301      	movls	r3, #1
 8003f56:	2300      	movhi	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e0e7      	b.n	8004132 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4a78      	ldr	r2, [pc, #480]	; (8004148 <HAL_I2C_Init+0x280>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	0c9b      	lsrs	r3, r3, #18
 8003f6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4a6a      	ldr	r2, [pc, #424]	; (800413c <HAL_I2C_Init+0x274>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d802      	bhi.n	8003f9c <HAL_I2C_Init+0xd4>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	e009      	b.n	8003fb0 <HAL_I2C_Init+0xe8>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	4a69      	ldr	r2, [pc, #420]	; (800414c <HAL_I2C_Init+0x284>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	099b      	lsrs	r3, r3, #6
 8003fae:	3301      	adds	r3, #1
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	495c      	ldr	r1, [pc, #368]	; (800413c <HAL_I2C_Init+0x274>)
 8003fcc:	428b      	cmp	r3, r1
 8003fce:	d819      	bhi.n	8004004 <HAL_I2C_Init+0x13c>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1e59      	subs	r1, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fde:	1c59      	adds	r1, r3, #1
 8003fe0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fe4:	400b      	ands	r3, r1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_I2C_Init+0x138>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1e59      	subs	r1, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffe:	e051      	b.n	80040a4 <HAL_I2C_Init+0x1dc>
 8004000:	2304      	movs	r3, #4
 8004002:	e04f      	b.n	80040a4 <HAL_I2C_Init+0x1dc>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d111      	bne.n	8004030 <HAL_I2C_Init+0x168>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e58      	subs	r0, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	440b      	add	r3, r1
 800401a:	fbb0 f3f3 	udiv	r3, r0, r3
 800401e:	3301      	adds	r3, #1
 8004020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	e012      	b.n	8004056 <HAL_I2C_Init+0x18e>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1e58      	subs	r0, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	0099      	lsls	r1, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	fbb0 f3f3 	udiv	r3, r0, r3
 8004046:	3301      	adds	r3, #1
 8004048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_Init+0x196>
 800405a:	2301      	movs	r3, #1
 800405c:	e022      	b.n	80040a4 <HAL_I2C_Init+0x1dc>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10e      	bne.n	8004084 <HAL_I2C_Init+0x1bc>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1e58      	subs	r0, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6859      	ldr	r1, [r3, #4]
 800406e:	460b      	mov	r3, r1
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	440b      	add	r3, r1
 8004074:	fbb0 f3f3 	udiv	r3, r0, r3
 8004078:	3301      	adds	r3, #1
 800407a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004082:	e00f      	b.n	80040a4 <HAL_I2C_Init+0x1dc>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1e58      	subs	r0, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	0099      	lsls	r1, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	fbb0 f3f3 	udiv	r3, r0, r3
 800409a:	3301      	adds	r3, #1
 800409c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	6809      	ldr	r1, [r1, #0]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6911      	ldr	r1, [r2, #16]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68d2      	ldr	r2, [r2, #12]
 80040de:	4311      	orrs	r1, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	000186a0 	.word	0x000186a0
 8004140:	001e847f 	.word	0x001e847f
 8004144:	003d08ff 	.word	0x003d08ff
 8004148:	431bde83 	.word	0x431bde83
 800414c:	10624dd3 	.word	0x10624dd3

08004150 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af02      	add	r7, sp, #8
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	461a      	mov	r2, r3
 800415c:	460b      	mov	r3, r1
 800415e:	817b      	strh	r3, [r7, #10]
 8004160:	4613      	mov	r3, r2
 8004162:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004164:	f7ff f90c 	bl	8003380 <HAL_GetTick>
 8004168:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b20      	cmp	r3, #32
 8004174:	f040 80e0 	bne.w	8004338 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	2319      	movs	r3, #25
 800417e:	2201      	movs	r2, #1
 8004180:	4970      	ldr	r1, [pc, #448]	; (8004344 <HAL_I2C_Master_Transmit+0x1f4>)
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f001 ffa8 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800418e:	2302      	movs	r3, #2
 8004190:	e0d3      	b.n	800433a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_I2C_Master_Transmit+0x50>
 800419c:	2302      	movs	r3, #2
 800419e:	e0cc      	b.n	800433a <HAL_I2C_Master_Transmit+0x1ea>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d007      	beq.n	80041c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0201 	orr.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2221      	movs	r2, #33	; 0x21
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2210      	movs	r2, #16
 80041e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	893a      	ldrh	r2, [r7, #8]
 80041f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a50      	ldr	r2, [pc, #320]	; (8004348 <HAL_I2C_Master_Transmit+0x1f8>)
 8004206:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004208:	8979      	ldrh	r1, [r7, #10]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	6a3a      	ldr	r2, [r7, #32]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f001 fd6a 	bl	8005ce8 <I2C_MasterRequestWrite>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e08d      	b.n	800433a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421e:	2300      	movs	r3, #0
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004234:	e066      	b.n	8004304 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	6a39      	ldr	r1, [r7, #32]
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f002 f822 	bl	8006284 <I2C_WaitOnTXEFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00d      	beq.n	8004262 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	2b04      	cmp	r3, #4
 800424c:	d107      	bne.n	800425e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e06b      	b.n	800433a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	781a      	ldrb	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b04      	cmp	r3, #4
 800429e:	d11b      	bne.n	80042d8 <HAL_I2C_Master_Transmit+0x188>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d017      	beq.n	80042d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	781a      	ldrb	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	6a39      	ldr	r1, [r7, #32]
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f002 f812 	bl	8006306 <I2C_WaitOnBTFFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00d      	beq.n	8004304 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d107      	bne.n	8004300 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e01a      	b.n	800433a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004308:	2b00      	cmp	r3, #0
 800430a:	d194      	bne.n	8004236 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	e000      	b.n	800433a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004338:	2302      	movs	r3, #2
  }
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	00100002 	.word	0x00100002
 8004348:	ffff0000 	.word	0xffff0000

0800434c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08c      	sub	sp, #48	; 0x30
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	461a      	mov	r2, r3
 8004358:	460b      	mov	r3, r1
 800435a:	817b      	strh	r3, [r7, #10]
 800435c:	4613      	mov	r3, r2
 800435e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004360:	f7ff f80e 	bl	8003380 <HAL_GetTick>
 8004364:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b20      	cmp	r3, #32
 8004370:	f040 820b 	bne.w	800478a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	2319      	movs	r3, #25
 800437a:	2201      	movs	r2, #1
 800437c:	497c      	ldr	r1, [pc, #496]	; (8004570 <HAL_I2C_Master_Receive+0x224>)
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f001 feaa 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
 800438c:	e1fe      	b.n	800478c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_I2C_Master_Receive+0x50>
 8004398:	2302      	movs	r3, #2
 800439a:	e1f7      	b.n	800478c <HAL_I2C_Master_Receive+0x440>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d007      	beq.n	80043c2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2222      	movs	r2, #34	; 0x22
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2210      	movs	r2, #16
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	893a      	ldrh	r2, [r7, #8]
 80043f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a5c      	ldr	r2, [pc, #368]	; (8004574 <HAL_I2C_Master_Receive+0x228>)
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004404:	8979      	ldrh	r1, [r7, #10]
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f001 fcee 	bl	8005dec <I2C_MasterRequestRead>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e1b8      	b.n	800478c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	d113      	bne.n	800444a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004422:	2300      	movs	r3, #0
 8004424:	623b      	str	r3, [r7, #32]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	623b      	str	r3, [r7, #32]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	623b      	str	r3, [r7, #32]
 8004436:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	e18c      	b.n	8004764 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444e:	2b01      	cmp	r3, #1
 8004450:	d11b      	bne.n	800448a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004460:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004462:	2300      	movs	r3, #0
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e16c      	b.n	8004764 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448e:	2b02      	cmp	r3, #2
 8004490:	d11b      	bne.n	80044ca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b2:	2300      	movs	r3, #0
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	e14c      	b.n	8004764 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044f0:	e138      	b.n	8004764 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	f200 80f1 	bhi.w	80046de <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004500:	2b01      	cmp	r3, #1
 8004502:	d123      	bne.n	800454c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004506:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f001 ff6f 	bl	80063ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e139      	b.n	800478c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004540:	b29b      	uxth	r3, r3
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	855a      	strh	r2, [r3, #42]	; 0x2a
 800454a:	e10b      	b.n	8004764 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004550:	2b02      	cmp	r3, #2
 8004552:	d14e      	bne.n	80045f2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	2200      	movs	r2, #0
 800455c:	4906      	ldr	r1, [pc, #24]	; (8004578 <HAL_I2C_Master_Receive+0x22c>)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f001 fdba 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d008      	beq.n	800457c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e10e      	b.n	800478c <HAL_I2C_Master_Receive+0x440>
 800456e:	bf00      	nop
 8004570:	00100002 	.word	0x00100002
 8004574:	ffff0000 	.word	0xffff0000
 8004578:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045f0:	e0b8      	b.n	8004764 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	2200      	movs	r2, #0
 80045fa:	4966      	ldr	r1, [pc, #408]	; (8004794 <HAL_I2C_Master_Receive+0x448>)
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f001 fd6b 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0bf      	b.n	800478c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	2200      	movs	r2, #0
 8004656:	494f      	ldr	r1, [pc, #316]	; (8004794 <HAL_I2C_Master_Receive+0x448>)
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f001 fd3d 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e091      	b.n	800478c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046dc:	e042      	b.n	8004764 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f001 fe82 	bl	80063ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e04c      	b.n	800478c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b04      	cmp	r3, #4
 8004730:	d118      	bne.n	8004764 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004768:	2b00      	cmp	r3, #0
 800476a:	f47f aec2 	bne.w	80044f2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	e000      	b.n	800478c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800478a:	2302      	movs	r3, #2
  }
}
 800478c:	4618      	mov	r0, r3
 800478e:	3728      	adds	r7, #40	; 0x28
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	00010004 	.word	0x00010004

08004798 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	2b10      	cmp	r3, #16
 80047c6:	d003      	beq.n	80047d0 <HAL_I2C_EV_IRQHandler+0x38>
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	f040 80bd 	bne.w	800494a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10d      	bne.n	8004806 <HAL_I2C_EV_IRQHandler+0x6e>
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80047f0:	d003      	beq.n	80047fa <HAL_I2C_EV_IRQHandler+0x62>
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80047f8:	d101      	bne.n	80047fe <HAL_I2C_EV_IRQHandler+0x66>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <HAL_I2C_EV_IRQHandler+0x68>
 80047fe:	2300      	movs	r3, #0
 8004800:	2b01      	cmp	r3, #1
 8004802:	f000 812e 	beq.w	8004a62 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00c      	beq.n	800482a <HAL_I2C_EV_IRQHandler+0x92>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	0a5b      	lsrs	r3, r3, #9
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d006      	beq.n	800482a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f001 fe6a 	bl	80064f6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fcbb 	bl	800519e <I2C_Master_SB>
 8004828:	e08e      	b.n	8004948 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	08db      	lsrs	r3, r3, #3
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <HAL_I2C_EV_IRQHandler+0xb2>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	0a5b      	lsrs	r3, r3, #9
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fd31 	bl	80052aa <I2C_Master_ADD10>
 8004848:	e07e      	b.n	8004948 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	085b      	lsrs	r3, r3, #1
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <HAL_I2C_EV_IRQHandler+0xd2>
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	0a5b      	lsrs	r3, r3, #9
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fd4b 	bl	80052fe <I2C_Master_ADDR>
 8004868:	e06e      	b.n	8004948 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	089b      	lsrs	r3, r3, #2
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d037      	beq.n	80048e6 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004884:	f000 80ef 	beq.w	8004a66 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	09db      	lsrs	r3, r3, #7
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00f      	beq.n	80048b4 <HAL_I2C_EV_IRQHandler+0x11c>
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	0a9b      	lsrs	r3, r3, #10
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d009      	beq.n	80048b4 <HAL_I2C_EV_IRQHandler+0x11c>
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	089b      	lsrs	r3, r3, #2
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d103      	bne.n	80048b4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f948 	bl	8004b42 <I2C_MasterTransmit_TXE>
 80048b2:	e049      	b.n	8004948 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	089b      	lsrs	r3, r3, #2
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80d2 	beq.w	8004a66 <HAL_I2C_EV_IRQHandler+0x2ce>
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	0a5b      	lsrs	r3, r3, #9
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80cb 	beq.w	8004a66 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	2b10      	cmp	r3, #16
 80048d4:	d103      	bne.n	80048de <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f9cf 	bl	8004c7a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048dc:	e0c3      	b.n	8004a66 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fa33 	bl	8004d4a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048e4:	e0bf      	b.n	8004a66 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f4:	f000 80b7 	beq.w	8004a66 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	099b      	lsrs	r3, r3, #6
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00f      	beq.n	8004924 <HAL_I2C_EV_IRQHandler+0x18c>
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	0a9b      	lsrs	r3, r3, #10
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <HAL_I2C_EV_IRQHandler+0x18c>
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	089b      	lsrs	r3, r3, #2
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d103      	bne.n	8004924 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 faa3 	bl	8004e68 <I2C_MasterReceive_RXNE>
 8004922:	e011      	b.n	8004948 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	089b      	lsrs	r3, r3, #2
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 809a 	beq.w	8004a66 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	0a5b      	lsrs	r3, r3, #9
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8093 	beq.w	8004a66 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fb42 	bl	8004fca <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004946:	e08e      	b.n	8004a66 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004948:	e08d      	b.n	8004a66 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	d004      	beq.n	800495c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	e007      	b.n	800496c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	085b      	lsrs	r3, r3, #1
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d012      	beq.n	800499e <HAL_I2C_EV_IRQHandler+0x206>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	0a5b      	lsrs	r3, r3, #9
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00c      	beq.n	800499e <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004994:	69b9      	ldr	r1, [r7, #24]
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 ff00 	bl	800579c <I2C_Slave_ADDR>
 800499c:	e066      	b.n	8004a6c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d009      	beq.n	80049be <HAL_I2C_EV_IRQHandler+0x226>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	0a5b      	lsrs	r3, r3, #9
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 ff34 	bl	8005824 <I2C_Slave_STOPF>
 80049bc:	e056      	b.n	8004a6c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049be:	7bbb      	ldrb	r3, [r7, #14]
 80049c0:	2b21      	cmp	r3, #33	; 0x21
 80049c2:	d002      	beq.n	80049ca <HAL_I2C_EV_IRQHandler+0x232>
 80049c4:	7bbb      	ldrb	r3, [r7, #14]
 80049c6:	2b29      	cmp	r3, #41	; 0x29
 80049c8:	d125      	bne.n	8004a16 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	09db      	lsrs	r3, r3, #7
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00f      	beq.n	80049f6 <HAL_I2C_EV_IRQHandler+0x25e>
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	0a9b      	lsrs	r3, r3, #10
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <HAL_I2C_EV_IRQHandler+0x25e>
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	089b      	lsrs	r3, r3, #2
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d103      	bne.n	80049f6 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fe16 	bl	8005620 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049f4:	e039      	b.n	8004a6a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d033      	beq.n	8004a6a <HAL_I2C_EV_IRQHandler+0x2d2>
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	0a5b      	lsrs	r3, r3, #9
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d02d      	beq.n	8004a6a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fe43 	bl	800569a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a14:	e029      	b.n	8004a6a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	099b      	lsrs	r3, r3, #6
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00f      	beq.n	8004a42 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	0a9b      	lsrs	r3, r3, #10
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	089b      	lsrs	r3, r3, #2
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fe4e 	bl	80056dc <I2C_SlaveReceive_RXNE>
 8004a40:	e014      	b.n	8004a6c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	089b      	lsrs	r3, r3, #2
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00e      	beq.n	8004a6c <HAL_I2C_EV_IRQHandler+0x2d4>
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	0a5b      	lsrs	r3, r3, #9
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d008      	beq.n	8004a6c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fe7c 	bl	8005758 <I2C_SlaveReceive_BTF>
 8004a60:	e004      	b.n	8004a6c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8004a62:	bf00      	nop
 8004a64:	e002      	b.n	8004a6c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a66:	bf00      	nop
 8004a68:	e000      	b.n	8004a6c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a6a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	460b      	mov	r3, r1
 8004acc:	70fb      	strb	r3, [r7, #3]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b58:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d150      	bne.n	8004c0a <I2C_MasterTransmit_TXE+0xc8>
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	2b21      	cmp	r3, #33	; 0x21
 8004b6c:	d14d      	bne.n	8004c0a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d01d      	beq.n	8004bb0 <I2C_MasterTransmit_TXE+0x6e>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	d01a      	beq.n	8004bb0 <I2C_MasterTransmit_TXE+0x6e>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b80:	d016      	beq.n	8004bb0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b90:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2211      	movs	r2, #17
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff ff62 	bl	8004a72 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bae:	e060      	b.n	8004c72 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bbe:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bce:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d107      	bne.n	8004bfa <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7ff ff7d 	bl	8004af2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bf8:	e03b      	b.n	8004c72 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff ff35 	bl	8004a72 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c08:	e033      	b.n	8004c72 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	2b21      	cmp	r3, #33	; 0x21
 8004c0e:	d005      	beq.n	8004c1c <I2C_MasterTransmit_TXE+0xda>
 8004c10:	7bbb      	ldrb	r3, [r7, #14]
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d12d      	bne.n	8004c72 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	2b22      	cmp	r3, #34	; 0x22
 8004c1a:	d12a      	bne.n	8004c72 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d108      	bne.n	8004c38 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c34:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c36:	e01c      	b.n	8004c72 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d103      	bne.n	8004c4c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f880 	bl	8004d4a <I2C_MemoryTransmit_TXE_BTF>
}
 8004c4a:	e012      	b.n	8004c72 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	781a      	ldrb	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c70:	e7ff      	b.n	8004c72 <I2C_MasterTransmit_TXE+0x130>
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b21      	cmp	r3, #33	; 0x21
 8004c92:	d156      	bne.n	8004d42 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d012      	beq.n	8004cc4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	781a      	ldrb	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004cc2:	e03e      	b.n	8004d42 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d01d      	beq.n	8004d06 <I2C_MasterTransmit_BTF+0x8c>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d01a      	beq.n	8004d06 <I2C_MasterTransmit_BTF+0x8c>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cd6:	d016      	beq.n	8004d06 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ce6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2211      	movs	r2, #17
 8004cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff feb7 	bl	8004a72 <HAL_I2C_MasterTxCpltCallback>
}
 8004d04:	e01d      	b.n	8004d42 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d14:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d24:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff fe98 	bl	8004a72 <HAL_I2C_MasterTxCpltCallback>
}
 8004d42:	bf00      	nop
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d58:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d11d      	bne.n	8004d9e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d10b      	bne.n	8004d82 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7a:	1c9a      	adds	r2, r3, #2
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004d80:	e06e      	b.n	8004e60 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	121b      	asrs	r3, r3, #8
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d9c:	e060      	b.n	8004e60 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d10b      	bne.n	8004dbe <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004dbc:	e050      	b.n	8004e60 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d14c      	bne.n	8004e60 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
 8004dc8:	2b22      	cmp	r3, #34	; 0x22
 8004dca:	d108      	bne.n	8004dde <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dda:	601a      	str	r2, [r3, #0]
}
 8004ddc:	e040      	b.n	8004e60 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d015      	beq.n	8004e14 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	2b21      	cmp	r3, #33	; 0x21
 8004dec:	d112      	bne.n	8004e14 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	781a      	ldrb	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e12:	e025      	b.n	8004e60 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d120      	bne.n	8004e60 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	2b21      	cmp	r3, #33	; 0x21
 8004e22:	d11d      	bne.n	8004e60 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e32:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e42:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff fe49 	bl	8004af2 <HAL_I2C_MemTxCpltCallback>
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b22      	cmp	r3, #34	; 0x22
 8004e7a:	f040 80a2 	bne.w	8004fc2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d921      	bls.n	8004ed0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	f040 8082 	bne.w	8004fc2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ecc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004ece:	e078      	b.n	8004fc2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d074      	beq.n	8004fc2 <I2C_MasterReceive_RXNE+0x15a>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d002      	beq.n	8004ee4 <I2C_MasterReceive_RXNE+0x7c>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d16e      	bne.n	8004fc2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f001 fa4f 	bl	8006388 <I2C_WaitOnSTOPRequestThroughIT>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d142      	bne.n	8004f76 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f0e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691a      	ldr	r2, [r3, #16]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b40      	cmp	r3, #64	; 0x40
 8004f48:	d10a      	bne.n	8004f60 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff fdd4 	bl	8004b06 <HAL_I2C_MemRxCpltCallback>
}
 8004f5e:	e030      	b.n	8004fc2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2212      	movs	r2, #18
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff fd89 	bl	8004a86 <HAL_I2C_MasterRxCpltCallback>
}
 8004f74:	e025      	b.n	8004fc2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f84:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff fdac 	bl	8004b1a <HAL_I2C_ErrorCallback>
}
 8004fc2:	bf00      	nop
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d11b      	bne.n	800501a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005018:	e0bd      	b.n	8005196 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501e:	b29b      	uxth	r3, r3
 8005020:	2b03      	cmp	r3, #3
 8005022:	d129      	bne.n	8005078 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005032:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b04      	cmp	r3, #4
 8005038:	d00a      	beq.n	8005050 <I2C_MasterReceive_BTF+0x86>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d007      	beq.n	8005050 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691a      	ldr	r2, [r3, #16]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005076:	e08e      	b.n	8005196 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d176      	bne.n	8005170 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d002      	beq.n	800508e <I2C_MasterReceive_BTF+0xc4>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b10      	cmp	r3, #16
 800508c:	d108      	bne.n	80050a0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	e019      	b.n	80050d4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d002      	beq.n	80050ac <I2C_MasterReceive_BTF+0xe2>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d108      	bne.n	80050be <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	e00a      	b.n	80050d4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b10      	cmp	r3, #16
 80050c2:	d007      	beq.n	80050d4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800512e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	d10a      	bne.n	800515a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff fcd7 	bl	8004b06 <HAL_I2C_MemRxCpltCallback>
}
 8005158:	e01d      	b.n	8005196 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2212      	movs	r2, #18
 8005166:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff fc8c 	bl	8004a86 <HAL_I2C_MasterRxCpltCallback>
}
 800516e:	e012      	b.n	8005196 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005196:	bf00      	nop
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b40      	cmp	r3, #64	; 0x40
 80051b0:	d117      	bne.n	80051e2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d109      	bne.n	80051ce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	461a      	mov	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051ca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80051cc:	e067      	b.n	800529e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	f043 0301 	orr.w	r3, r3, #1
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	611a      	str	r2, [r3, #16]
}
 80051e0:	e05d      	b.n	800529e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ea:	d133      	bne.n	8005254 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b21      	cmp	r3, #33	; 0x21
 80051f6:	d109      	bne.n	800520c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005208:	611a      	str	r2, [r3, #16]
 800520a:	e008      	b.n	800521e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	b2da      	uxtb	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005222:	2b00      	cmp	r3, #0
 8005224:	d004      	beq.n	8005230 <I2C_Master_SB+0x92>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d108      	bne.n	8005242 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	2b00      	cmp	r3, #0
 8005236:	d032      	beq.n	800529e <I2C_Master_SB+0x100>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d02d      	beq.n	800529e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005250:	605a      	str	r2, [r3, #4]
}
 8005252:	e024      	b.n	800529e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10e      	bne.n	800527a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005260:	b29b      	uxth	r3, r3
 8005262:	11db      	asrs	r3, r3, #7
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f003 0306 	and.w	r3, r3, #6
 800526a:	b2db      	uxtb	r3, r3
 800526c:	f063 030f 	orn	r3, r3, #15
 8005270:	b2da      	uxtb	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	611a      	str	r2, [r3, #16]
}
 8005278:	e011      	b.n	800529e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527e:	2b01      	cmp	r3, #1
 8005280:	d10d      	bne.n	800529e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005286:	b29b      	uxth	r3, r3
 8005288:	11db      	asrs	r3, r3, #7
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f003 0306 	and.w	r3, r3, #6
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f063 030e 	orn	r3, r3, #14
 8005296:	b2da      	uxtb	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	611a      	str	r2, [r3, #16]
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <I2C_Master_ADD10+0x26>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d108      	bne.n	80052e2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00c      	beq.n	80052f2 <I2C_Master_ADD10+0x48>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f0:	605a      	str	r2, [r3, #4]
  }
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80052fe:	b480      	push	{r7}
 8005300:	b091      	sub	sp, #68	; 0x44
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800530c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b22      	cmp	r3, #34	; 0x22
 8005326:	f040 8169 	bne.w	80055fc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10f      	bne.n	8005352 <I2C_Master_ADDR+0x54>
 8005332:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005336:	2b40      	cmp	r3, #64	; 0x40
 8005338:	d10b      	bne.n	8005352 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533a:	2300      	movs	r3, #0
 800533c:	633b      	str	r3, [r7, #48]	; 0x30
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	633b      	str	r3, [r7, #48]	; 0x30
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	633b      	str	r3, [r7, #48]	; 0x30
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	e160      	b.n	8005614 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005356:	2b00      	cmp	r3, #0
 8005358:	d11d      	bne.n	8005396 <I2C_Master_ADDR+0x98>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005362:	d118      	bne.n	8005396 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005364:	2300      	movs	r3, #0
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005388:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	651a      	str	r2, [r3, #80]	; 0x50
 8005394:	e13e      	b.n	8005614 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d113      	bne.n	80053c8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a0:	2300      	movs	r3, #0
 80053a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	e115      	b.n	80055f4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	f040 808a 	bne.w	80054e8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80053d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053da:	d137      	bne.n	800544c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053fa:	d113      	bne.n	8005424 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800540c:	2300      	movs	r3, #0
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	e0e7      	b.n	80055f4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005424:	2300      	movs	r3, #0
 8005426:	623b      	str	r3, [r7, #32]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	623b      	str	r3, [r7, #32]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	623b      	str	r3, [r7, #32]
 8005438:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	e0d3      	b.n	80055f4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800544c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544e:	2b08      	cmp	r3, #8
 8005450:	d02e      	beq.n	80054b0 <I2C_Master_ADDR+0x1b2>
 8005452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005454:	2b20      	cmp	r3, #32
 8005456:	d02b      	beq.n	80054b0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545a:	2b12      	cmp	r3, #18
 800545c:	d102      	bne.n	8005464 <I2C_Master_ADDR+0x166>
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	2b01      	cmp	r3, #1
 8005462:	d125      	bne.n	80054b0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	2b04      	cmp	r3, #4
 8005468:	d00e      	beq.n	8005488 <I2C_Master_ADDR+0x18a>
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	2b02      	cmp	r3, #2
 800546e:	d00b      	beq.n	8005488 <I2C_Master_ADDR+0x18a>
 8005470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005472:	2b10      	cmp	r3, #16
 8005474:	d008      	beq.n	8005488 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e007      	b.n	8005498 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005496:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005498:	2300      	movs	r3, #0
 800549a:	61fb      	str	r3, [r7, #28]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	e0a1      	b.n	80055f4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c0:	2300      	movs	r3, #0
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	61bb      	str	r3, [r7, #24]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	e085      	b.n	80055f4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d14d      	bne.n	800558e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d016      	beq.n	8005526 <I2C_Master_ADDR+0x228>
 80054f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d013      	beq.n	8005526 <I2C_Master_ADDR+0x228>
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	2b10      	cmp	r3, #16
 8005502:	d010      	beq.n	8005526 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005512:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e007      	b.n	8005536 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005534:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005544:	d117      	bne.n	8005576 <I2C_Master_ADDR+0x278>
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800554c:	d00b      	beq.n	8005566 <I2C_Master_ADDR+0x268>
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	2b01      	cmp	r3, #1
 8005552:	d008      	beq.n	8005566 <I2C_Master_ADDR+0x268>
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	2b08      	cmp	r3, #8
 8005558:	d005      	beq.n	8005566 <I2C_Master_ADDR+0x268>
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	2b10      	cmp	r3, #16
 800555e:	d002      	beq.n	8005566 <I2C_Master_ADDR+0x268>
 8005560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005562:	2b20      	cmp	r3, #32
 8005564:	d107      	bne.n	8005576 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005574:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005576:	2300      	movs	r3, #0
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	e032      	b.n	80055f4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800559c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ac:	d117      	bne.n	80055de <I2C_Master_ADDR+0x2e0>
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055b4:	d00b      	beq.n	80055ce <I2C_Master_ADDR+0x2d0>
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d008      	beq.n	80055ce <I2C_Master_ADDR+0x2d0>
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d005      	beq.n	80055ce <I2C_Master_ADDR+0x2d0>
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d002      	beq.n	80055ce <I2C_Master_ADDR+0x2d0>
 80055c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d107      	bne.n	80055de <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055dc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055de:	2300      	movs	r3, #0
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80055fa:	e00b      	b.n	8005614 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
}
 8005612:	e7ff      	b.n	8005614 <I2C_Master_ADDR+0x316>
 8005614:	bf00      	nop
 8005616:	3744      	adds	r7, #68	; 0x44
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d02b      	beq.n	8005692 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	781a      	ldrb	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005654:	b29b      	uxth	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	b29a      	uxth	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d114      	bne.n	8005692 <I2C_SlaveTransmit_TXE+0x72>
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b29      	cmp	r3, #41	; 0x29
 800566c:	d111      	bne.n	8005692 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2221      	movs	r2, #33	; 0x21
 8005682:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2228      	movs	r2, #40	; 0x28
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff fa04 	bl	8004a9a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d011      	beq.n	80056d0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d02c      	beq.n	8005750 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d114      	bne.n	8005750 <I2C_SlaveReceive_RXNE+0x74>
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	2b2a      	cmp	r3, #42	; 0x2a
 800572a:	d111      	bne.n	8005750 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800573a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2222      	movs	r2, #34	; 0x22
 8005740:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2228      	movs	r2, #40	; 0x28
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff f9af 	bl	8004aae <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d012      	beq.n	8005790 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057b6:	2b28      	cmp	r3, #40	; 0x28
 80057b8:	d127      	bne.n	800580a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	089b      	lsrs	r3, r3, #2
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80057d6:	2301      	movs	r3, #1
 80057d8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	09db      	lsrs	r3, r3, #7
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d103      	bne.n	80057ee <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	81bb      	strh	r3, [r7, #12]
 80057ec:	e002      	b.n	80057f4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80057fc:	89ba      	ldrh	r2, [r7, #12]
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff f95d 	bl	8004ac2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005808:	e008      	b.n	800581c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f06f 0202 	mvn.w	r2, #2
 8005812:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800581c:	bf00      	nop
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005832:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005842:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005844:	2300      	movs	r3, #0
 8005846:	60bb      	str	r3, [r7, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	60bb      	str	r3, [r7, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005870:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800587c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005880:	d172      	bne.n	8005968 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	2b22      	cmp	r3, #34	; 0x22
 8005886:	d002      	beq.n	800588e <I2C_Slave_STOPF+0x6a>
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	2b2a      	cmp	r3, #42	; 0x2a
 800588c:	d135      	bne.n	80058fa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	b29a      	uxth	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	f043 0204 	orr.w	r2, r3, #4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe f849 	bl	800395e <HAL_DMA_GetState>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d049      	beq.n	8005966 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	4a69      	ldr	r2, [pc, #420]	; (8005a7c <I2C_Slave_STOPF+0x258>)
 80058d8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe f81b 	bl	800391a <HAL_DMA_Abort_IT>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d03d      	beq.n	8005966 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058f4:	4610      	mov	r0, r2
 80058f6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058f8:	e035      	b.n	8005966 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	b29a      	uxth	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d005      	beq.n	800591e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f043 0204 	orr.w	r2, r3, #4
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800592c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	4618      	mov	r0, r3
 8005934:	f7fe f813 	bl	800395e <HAL_DMA_GetState>
 8005938:	4603      	mov	r3, r0
 800593a:	2b01      	cmp	r3, #1
 800593c:	d014      	beq.n	8005968 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005942:	4a4e      	ldr	r2, [pc, #312]	; (8005a7c <I2C_Slave_STOPF+0x258>)
 8005944:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594a:	4618      	mov	r0, r3
 800594c:	f7fd ffe5 	bl	800391a <HAL_DMA_Abort_IT>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d008      	beq.n	8005968 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005960:	4610      	mov	r0, r2
 8005962:	4798      	blx	r3
 8005964:	e000      	b.n	8005968 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005966:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d03e      	beq.n	80059f0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b04      	cmp	r3, #4
 800597e:	d112      	bne.n	80059a6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691a      	ldr	r2, [r3, #16]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599c:	b29b      	uxth	r3, r3
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b0:	2b40      	cmp	r3, #64	; 0x40
 80059b2:	d112      	bne.n	80059da <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	f043 0204 	orr.w	r2, r3, #4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f843 	bl	8005a84 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80059fe:	e039      	b.n	8005a74 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	2b2a      	cmp	r3, #42	; 0x2a
 8005a04:	d109      	bne.n	8005a1a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2228      	movs	r2, #40	; 0x28
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff f84a 	bl	8004aae <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b28      	cmp	r3, #40	; 0x28
 8005a24:	d111      	bne.n	8005a4a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a15      	ldr	r2, [pc, #84]	; (8005a80 <I2C_Slave_STOPF+0x25c>)
 8005a2a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7ff f84b 	bl	8004ade <HAL_I2C_ListenCpltCallback>
}
 8005a48:	e014      	b.n	8005a74 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	2b22      	cmp	r3, #34	; 0x22
 8005a50:	d002      	beq.n	8005a58 <I2C_Slave_STOPF+0x234>
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2b22      	cmp	r3, #34	; 0x22
 8005a56:	d10d      	bne.n	8005a74 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7ff f81d 	bl	8004aae <HAL_I2C_SlaveRxCpltCallback>
}
 8005a74:	bf00      	nop
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	08005f89 	.word	0x08005f89
 8005a80:	ffff0000 	.word	0xffff0000

08005a84 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a9c:	7bbb      	ldrb	r3, [r7, #14]
 8005a9e:	2b10      	cmp	r3, #16
 8005aa0:	d002      	beq.n	8005aa8 <I2C_ITError+0x24>
 8005aa2:	7bbb      	ldrb	r3, [r7, #14]
 8005aa4:	2b40      	cmp	r3, #64	; 0x40
 8005aa6:	d10a      	bne.n	8005abe <I2C_ITError+0x3a>
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	2b22      	cmp	r3, #34	; 0x22
 8005aac:	d107      	bne.n	8005abe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005abc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ac4:	2b28      	cmp	r3, #40	; 0x28
 8005ac6:	d107      	bne.n	8005ad8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2228      	movs	r2, #40	; 0x28
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ad6:	e015      	b.n	8005b04 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ae6:	d00a      	beq.n	8005afe <I2C_ITError+0x7a>
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b60      	cmp	r3, #96	; 0x60
 8005aec:	d007      	beq.n	8005afe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b12:	d162      	bne.n	8005bda <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d020      	beq.n	8005b74 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b36:	4a6a      	ldr	r2, [pc, #424]	; (8005ce0 <I2C_ITError+0x25c>)
 8005b38:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fd feeb 	bl	800391a <HAL_DMA_Abort_IT>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 8089 	beq.w	8005c5e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0201 	bic.w	r2, r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b6e:	4610      	mov	r0, r2
 8005b70:	4798      	blx	r3
 8005b72:	e074      	b.n	8005c5e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	4a59      	ldr	r2, [pc, #356]	; (8005ce0 <I2C_ITError+0x25c>)
 8005b7a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fd feca 	bl	800391a <HAL_DMA_Abort_IT>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d068      	beq.n	8005c5e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b96:	2b40      	cmp	r3, #64	; 0x40
 8005b98:	d10b      	bne.n	8005bb2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0201 	bic.w	r2, r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4798      	blx	r3
 8005bd8:	e041      	b.n	8005c5e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b60      	cmp	r3, #96	; 0x60
 8005be4:	d125      	bne.n	8005c32 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfe:	2b40      	cmp	r3, #64	; 0x40
 8005c00:	d10b      	bne.n	8005c1a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 0201 	bic.w	r2, r2, #1
 8005c28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fe ff7f 	bl	8004b2e <HAL_I2C_AbortCpltCallback>
 8005c30:	e015      	b.n	8005c5e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3c:	2b40      	cmp	r3, #64	; 0x40
 8005c3e:	d10b      	bne.n	8005c58 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7fe ff5e 	bl	8004b1a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10e      	bne.n	8005c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d109      	bne.n	8005c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d104      	bne.n	8005c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d113      	bne.n	8005cd8 <I2C_ITError+0x254>
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	2b28      	cmp	r3, #40	; 0x28
 8005cb4:	d110      	bne.n	8005cd8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a0a      	ldr	r2, [pc, #40]	; (8005ce4 <I2C_ITError+0x260>)
 8005cba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fe ff03 	bl	8004ade <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	08005f89 	.word	0x08005f89
 8005ce4:	ffff0000 	.word	0xffff0000

08005ce8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af02      	add	r7, sp, #8
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	607a      	str	r2, [r7, #4]
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d006      	beq.n	8005d12 <I2C_MasterRequestWrite+0x2a>
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d003      	beq.n	8005d12 <I2C_MasterRequestWrite+0x2a>
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d10:	d108      	bne.n	8005d24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	e00b      	b.n	8005d3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	2b12      	cmp	r3, #18
 8005d2a:	d107      	bne.n	8005d3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f9c5 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00d      	beq.n	8005d70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d62:	d103      	bne.n	8005d6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e035      	b.n	8005ddc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d78:	d108      	bne.n	8005d8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d7a:	897b      	ldrh	r3, [r7, #10]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	461a      	mov	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d88:	611a      	str	r2, [r3, #16]
 8005d8a:	e01b      	b.n	8005dc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d8c:	897b      	ldrh	r3, [r7, #10]
 8005d8e:	11db      	asrs	r3, r3, #7
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	f003 0306 	and.w	r3, r3, #6
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f063 030f 	orn	r3, r3, #15
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	490e      	ldr	r1, [pc, #56]	; (8005de4 <I2C_MasterRequestWrite+0xfc>)
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 f9eb 	bl	8006186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e010      	b.n	8005ddc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dba:	897b      	ldrh	r3, [r7, #10]
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4907      	ldr	r1, [pc, #28]	; (8005de8 <I2C_MasterRequestWrite+0x100>)
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 f9db 	bl	8006186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	00010008 	.word	0x00010008
 8005de8:	00010002 	.word	0x00010002

08005dec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af02      	add	r7, sp, #8
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	607a      	str	r2, [r7, #4]
 8005df6:	603b      	str	r3, [r7, #0]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e10:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d006      	beq.n	8005e26 <I2C_MasterRequestRead+0x3a>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d003      	beq.n	8005e26 <I2C_MasterRequestRead+0x3a>
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e24:	d108      	bne.n	8005e38 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	e00b      	b.n	8005e50 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	2b11      	cmp	r3, #17
 8005e3e:	d107      	bne.n	8005e50 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f93b 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00d      	beq.n	8005e84 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e76:	d103      	bne.n	8005e80 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e079      	b.n	8005f78 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e8c:	d108      	bne.n	8005ea0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e8e:	897b      	ldrh	r3, [r7, #10]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	611a      	str	r2, [r3, #16]
 8005e9e:	e05f      	b.n	8005f60 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ea0:	897b      	ldrh	r3, [r7, #10]
 8005ea2:	11db      	asrs	r3, r3, #7
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	f003 0306 	and.w	r3, r3, #6
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	f063 030f 	orn	r3, r3, #15
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	4930      	ldr	r1, [pc, #192]	; (8005f80 <I2C_MasterRequestRead+0x194>)
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 f961 	bl	8006186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e054      	b.n	8005f78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ece:	897b      	ldrh	r3, [r7, #10]
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	4929      	ldr	r1, [pc, #164]	; (8005f84 <I2C_MasterRequestRead+0x198>)
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f951 	bl	8006186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e044      	b.n	8005f78 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eee:	2300      	movs	r3, #0
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	613b      	str	r3, [r7, #16]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	613b      	str	r3, [r7, #16]
 8005f02:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f12:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 f8d9 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00d      	beq.n	8005f48 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f3a:	d103      	bne.n	8005f44 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f42:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e017      	b.n	8005f78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005f48:	897b      	ldrh	r3, [r7, #10]
 8005f4a:	11db      	asrs	r3, r3, #7
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	f003 0306 	and.w	r3, r3, #6
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	f063 030e 	orn	r3, r3, #14
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	4907      	ldr	r1, [pc, #28]	; (8005f84 <I2C_MasterRequestRead+0x198>)
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 f90d 	bl	8006186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	00010008 	.word	0x00010008
 8005f84:	00010002 	.word	0x00010002

08005f88 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fa2:	4b4b      	ldr	r3, [pc, #300]	; (80060d0 <I2C_DMAAbort+0x148>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	08db      	lsrs	r3, r3, #3
 8005fa8:	4a4a      	ldr	r2, [pc, #296]	; (80060d4 <I2C_DMAAbort+0x14c>)
 8005faa:	fba2 2303 	umull	r2, r3, r2, r3
 8005fae:	0a1a      	lsrs	r2, r3, #8
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	00da      	lsls	r2, r3, #3
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	f043 0220 	orr.w	r2, r3, #32
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005fce:	e00a      	b.n	8005fe6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe4:	d0ea      	beq.n	8005fbc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	2200      	movs	r2, #0
 8006004:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006014:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2200      	movs	r2, #0
 800601a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006028:	2200      	movs	r2, #0
 800602a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	2200      	movs	r2, #0
 800603a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0201 	bic.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b60      	cmp	r3, #96	; 0x60
 8006056:	d10e      	bne.n	8006076 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2200      	movs	r2, #0
 800606c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800606e:	6978      	ldr	r0, [r7, #20]
 8006070:	f7fe fd5d 	bl	8004b2e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006074:	e027      	b.n	80060c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006076:	7cfb      	ldrb	r3, [r7, #19]
 8006078:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800607c:	2b28      	cmp	r3, #40	; 0x28
 800607e:	d117      	bne.n	80060b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800609e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2200      	movs	r2, #0
 80060a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2228      	movs	r2, #40	; 0x28
 80060aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060ae:	e007      	b.n	80060c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80060c0:	6978      	ldr	r0, [r7, #20]
 80060c2:	f7fe fd2a 	bl	8004b1a <HAL_I2C_ErrorCallback>
}
 80060c6:	bf00      	nop
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20000004 	.word	0x20000004
 80060d4:	14f8b589 	.word	0x14f8b589

080060d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	4613      	mov	r3, r2
 80060e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060e8:	e025      	b.n	8006136 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060f0:	d021      	beq.n	8006136 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f2:	f7fd f945 	bl	8003380 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d302      	bcc.n	8006108 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d116      	bne.n	8006136 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	f043 0220 	orr.w	r2, r3, #32
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e023      	b.n	800617e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	0c1b      	lsrs	r3, r3, #16
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	d10d      	bne.n	800615c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	43da      	mvns	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4013      	ands	r3, r2
 800614c:	b29b      	uxth	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	bf0c      	ite	eq
 8006152:	2301      	moveq	r3, #1
 8006154:	2300      	movne	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	e00c      	b.n	8006176 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	43da      	mvns	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4013      	ands	r3, r2
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	bf0c      	ite	eq
 800616e:	2301      	moveq	r3, #1
 8006170:	2300      	movne	r3, #0
 8006172:	b2db      	uxtb	r3, r3
 8006174:	461a      	mov	r2, r3
 8006176:	79fb      	ldrb	r3, [r7, #7]
 8006178:	429a      	cmp	r2, r3
 800617a:	d0b6      	beq.n	80060ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006194:	e051      	b.n	800623a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a4:	d123      	bne.n	80061ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f043 0204 	orr.w	r2, r3, #4
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e046      	b.n	800627c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f4:	d021      	beq.n	800623a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f6:	f7fd f8c3 	bl	8003380 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	429a      	cmp	r2, r3
 8006204:	d302      	bcc.n	800620c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d116      	bne.n	800623a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2220      	movs	r2, #32
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	f043 0220 	orr.w	r2, r3, #32
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e020      	b.n	800627c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	0c1b      	lsrs	r3, r3, #16
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	d10c      	bne.n	800625e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	43da      	mvns	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4013      	ands	r3, r2
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	bf14      	ite	ne
 8006256:	2301      	movne	r3, #1
 8006258:	2300      	moveq	r3, #0
 800625a:	b2db      	uxtb	r3, r3
 800625c:	e00b      	b.n	8006276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	43da      	mvns	r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4013      	ands	r3, r2
 800626a:	b29b      	uxth	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	bf14      	ite	ne
 8006270:	2301      	movne	r3, #1
 8006272:	2300      	moveq	r3, #0
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d18d      	bne.n	8006196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006290:	e02d      	b.n	80062ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 f900 	bl	8006498 <I2C_IsAcknowledgeFailed>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e02d      	b.n	80062fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062a8:	d021      	beq.n	80062ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062aa:	f7fd f869 	bl	8003380 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d302      	bcc.n	80062c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d116      	bne.n	80062ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	f043 0220 	orr.w	r2, r3, #32
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e007      	b.n	80062fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f8:	2b80      	cmp	r3, #128	; 0x80
 80062fa:	d1ca      	bne.n	8006292 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006312:	e02d      	b.n	8006370 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 f8bf 	bl	8006498 <I2C_IsAcknowledgeFailed>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e02d      	b.n	8006380 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800632a:	d021      	beq.n	8006370 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800632c:	f7fd f828 	bl	8003380 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	429a      	cmp	r2, r3
 800633a:	d302      	bcc.n	8006342 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d116      	bne.n	8006370 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2220      	movs	r2, #32
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	f043 0220 	orr.w	r2, r3, #32
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e007      	b.n	8006380 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	2b04      	cmp	r3, #4
 800637c:	d1ca      	bne.n	8006314 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006394:	4b13      	ldr	r3, [pc, #76]	; (80063e4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	08db      	lsrs	r3, r3, #3
 800639a:	4a13      	ldr	r2, [pc, #76]	; (80063e8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800639c:	fba2 2303 	umull	r2, r3, r2, r3
 80063a0:	0a1a      	lsrs	r2, r3, #8
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d107      	bne.n	80063c6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	f043 0220 	orr.w	r2, r3, #32
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e008      	b.n	80063d8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063d4:	d0e9      	beq.n	80063aa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	20000004 	.word	0x20000004
 80063e8:	14f8b589 	.word	0x14f8b589

080063ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063f8:	e042      	b.n	8006480 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	2b10      	cmp	r3, #16
 8006406:	d119      	bne.n	800643c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0210 	mvn.w	r2, #16
 8006410:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e029      	b.n	8006490 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643c:	f7fc ffa0 	bl	8003380 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	429a      	cmp	r2, r3
 800644a:	d302      	bcc.n	8006452 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d116      	bne.n	8006480 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	f043 0220 	orr.w	r2, r3, #32
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e007      	b.n	8006490 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b40      	cmp	r3, #64	; 0x40
 800648c:	d1b5      	bne.n	80063fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ae:	d11b      	bne.n	80064e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d4:	f043 0204 	orr.w	r2, r3, #4
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e000      	b.n	80064ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006502:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006506:	d103      	bne.n	8006510 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800650e:	e007      	b.n	8006520 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006518:	d102      	bne.n	8006520 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2208      	movs	r2, #8
 800651e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e0cc      	b.n	80066da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006540:	4b68      	ldr	r3, [pc, #416]	; (80066e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d90c      	bls.n	8006568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800654e:	4b65      	ldr	r3, [pc, #404]	; (80066e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006556:	4b63      	ldr	r3, [pc, #396]	; (80066e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d001      	beq.n	8006568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e0b8      	b.n	80066da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d020      	beq.n	80065b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	d005      	beq.n	800658c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006580:	4b59      	ldr	r3, [pc, #356]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	4a58      	ldr	r2, [pc, #352]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800658a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006598:	4b53      	ldr	r3, [pc, #332]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	4a52      	ldr	r2, [pc, #328]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 800659e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065a4:	4b50      	ldr	r3, [pc, #320]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	494d      	ldr	r1, [pc, #308]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d044      	beq.n	800664c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d107      	bne.n	80065da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ca:	4b47      	ldr	r3, [pc, #284]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d119      	bne.n	800660a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e07f      	b.n	80066da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d003      	beq.n	80065ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d107      	bne.n	80065fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ea:	4b3f      	ldr	r3, [pc, #252]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d109      	bne.n	800660a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e06f      	b.n	80066da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065fa:	4b3b      	ldr	r3, [pc, #236]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e067      	b.n	80066da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800660a:	4b37      	ldr	r3, [pc, #220]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f023 0203 	bic.w	r2, r3, #3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	4934      	ldr	r1, [pc, #208]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006618:	4313      	orrs	r3, r2
 800661a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800661c:	f7fc feb0 	bl	8003380 <HAL_GetTick>
 8006620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006622:	e00a      	b.n	800663a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006624:	f7fc feac 	bl	8003380 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006632:	4293      	cmp	r3, r2
 8006634:	d901      	bls.n	800663a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e04f      	b.n	80066da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663a:	4b2b      	ldr	r3, [pc, #172]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 020c 	and.w	r2, r3, #12
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	429a      	cmp	r2, r3
 800664a:	d1eb      	bne.n	8006624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800664c:	4b25      	ldr	r3, [pc, #148]	; (80066e4 <HAL_RCC_ClockConfig+0x1b8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d20c      	bcs.n	8006674 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665a:	4b22      	ldr	r3, [pc, #136]	; (80066e4 <HAL_RCC_ClockConfig+0x1b8>)
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006662:	4b20      	ldr	r3, [pc, #128]	; (80066e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	429a      	cmp	r2, r3
 800666e:	d001      	beq.n	8006674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e032      	b.n	80066da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	d008      	beq.n	8006692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006680:	4b19      	ldr	r3, [pc, #100]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	4916      	ldr	r1, [pc, #88]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 800668e:	4313      	orrs	r3, r2
 8006690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d009      	beq.n	80066b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800669e:	4b12      	ldr	r3, [pc, #72]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	490e      	ldr	r1, [pc, #56]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066b2:	f000 f889 	bl	80067c8 <HAL_RCC_GetSysClockFreq>
 80066b6:	4602      	mov	r2, r0
 80066b8:	4b0b      	ldr	r3, [pc, #44]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	091b      	lsrs	r3, r3, #4
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	490a      	ldr	r1, [pc, #40]	; (80066ec <HAL_RCC_ClockConfig+0x1c0>)
 80066c4:	5ccb      	ldrb	r3, [r1, r3]
 80066c6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ca:	4a09      	ldr	r2, [pc, #36]	; (80066f0 <HAL_RCC_ClockConfig+0x1c4>)
 80066cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066ce:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <HAL_RCC_ClockConfig+0x1c8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fc fe10 	bl	80032f8 <HAL_InitTick>

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	40023c00 	.word	0x40023c00
 80066e8:	40023800 	.word	0x40023800
 80066ec:	0802c1d0 	.word	0x0802c1d0
 80066f0:	20000004 	.word	0x20000004
 80066f4:	20000008 	.word	0x20000008

080066f8 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08c      	sub	sp, #48	; 0x30
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d129      	bne.n	800675e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800670a:	2300      	movs	r3, #0
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	4b2b      	ldr	r3, [pc, #172]	; (80067bc <HAL_RCC_MCOConfig+0xc4>)
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	4a2a      	ldr	r2, [pc, #168]	; (80067bc <HAL_RCC_MCOConfig+0xc4>)
 8006714:	f043 0301 	orr.w	r3, r3, #1
 8006718:	6313      	str	r3, [r2, #48]	; 0x30
 800671a:	4b28      	ldr	r3, [pc, #160]	; (80067bc <HAL_RCC_MCOConfig+0xc4>)
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	61bb      	str	r3, [r7, #24]
 8006724:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800672a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800672c:	2302      	movs	r3, #2
 800672e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006730:	2303      	movs	r3, #3
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006734:	2300      	movs	r3, #0
 8006736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006738:	2300      	movs	r3, #0
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800673c:	f107 031c 	add.w	r3, r7, #28
 8006740:	4619      	mov	r1, r3
 8006742:	481f      	ldr	r0, [pc, #124]	; (80067c0 <HAL_RCC_MCOConfig+0xc8>)
 8006744:	f7fd f9fa 	bl	8003b3c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006748:	4b1c      	ldr	r3, [pc, #112]	; (80067bc <HAL_RCC_MCOConfig+0xc4>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	430b      	orrs	r3, r1
 8006756:	4919      	ldr	r1, [pc, #100]	; (80067bc <HAL_RCC_MCOConfig+0xc4>)
 8006758:	4313      	orrs	r3, r2
 800675a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800675c:	e029      	b.n	80067b2 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800675e:	2300      	movs	r3, #0
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	4b16      	ldr	r3, [pc, #88]	; (80067bc <HAL_RCC_MCOConfig+0xc4>)
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	4a15      	ldr	r2, [pc, #84]	; (80067bc <HAL_RCC_MCOConfig+0xc4>)
 8006768:	f043 0304 	orr.w	r3, r3, #4
 800676c:	6313      	str	r3, [r2, #48]	; 0x30
 800676e:	4b13      	ldr	r3, [pc, #76]	; (80067bc <HAL_RCC_MCOConfig+0xc4>)
 8006770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800677a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800677e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006780:	2302      	movs	r3, #2
 8006782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006784:	2303      	movs	r3, #3
 8006786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006788:	2300      	movs	r3, #0
 800678a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800678c:	2300      	movs	r3, #0
 800678e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006790:	f107 031c 	add.w	r3, r7, #28
 8006794:	4619      	mov	r1, r3
 8006796:	480b      	ldr	r0, [pc, #44]	; (80067c4 <HAL_RCC_MCOConfig+0xcc>)
 8006798:	f7fd f9d0 	bl	8003b3c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800679c:	4b07      	ldr	r3, [pc, #28]	; (80067bc <HAL_RCC_MCOConfig+0xc4>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	00d9      	lsls	r1, r3, #3
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	430b      	orrs	r3, r1
 80067ac:	4903      	ldr	r1, [pc, #12]	; (80067bc <HAL_RCC_MCOConfig+0xc4>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	608b      	str	r3, [r1, #8]
}
 80067b2:	bf00      	nop
 80067b4:	3730      	adds	r7, #48	; 0x30
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40023800 	.word	0x40023800
 80067c0:	40020000 	.word	0x40020000
 80067c4:	40020800 	.word	0x40020800

080067c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067c8:	b5b0      	push	{r4, r5, r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80067ce:	2100      	movs	r1, #0
 80067d0:	6079      	str	r1, [r7, #4]
 80067d2:	2100      	movs	r1, #0
 80067d4:	60f9      	str	r1, [r7, #12]
 80067d6:	2100      	movs	r1, #0
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80067da:	2100      	movs	r1, #0
 80067dc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067de:	4952      	ldr	r1, [pc, #328]	; (8006928 <HAL_RCC_GetSysClockFreq+0x160>)
 80067e0:	6889      	ldr	r1, [r1, #8]
 80067e2:	f001 010c 	and.w	r1, r1, #12
 80067e6:	2908      	cmp	r1, #8
 80067e8:	d00d      	beq.n	8006806 <HAL_RCC_GetSysClockFreq+0x3e>
 80067ea:	2908      	cmp	r1, #8
 80067ec:	f200 8094 	bhi.w	8006918 <HAL_RCC_GetSysClockFreq+0x150>
 80067f0:	2900      	cmp	r1, #0
 80067f2:	d002      	beq.n	80067fa <HAL_RCC_GetSysClockFreq+0x32>
 80067f4:	2904      	cmp	r1, #4
 80067f6:	d003      	beq.n	8006800 <HAL_RCC_GetSysClockFreq+0x38>
 80067f8:	e08e      	b.n	8006918 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067fa:	4b4c      	ldr	r3, [pc, #304]	; (800692c <HAL_RCC_GetSysClockFreq+0x164>)
 80067fc:	60bb      	str	r3, [r7, #8]
       break;
 80067fe:	e08e      	b.n	800691e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006800:	4b4b      	ldr	r3, [pc, #300]	; (8006930 <HAL_RCC_GetSysClockFreq+0x168>)
 8006802:	60bb      	str	r3, [r7, #8]
      break;
 8006804:	e08b      	b.n	800691e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006806:	4948      	ldr	r1, [pc, #288]	; (8006928 <HAL_RCC_GetSysClockFreq+0x160>)
 8006808:	6849      	ldr	r1, [r1, #4]
 800680a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800680e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006810:	4945      	ldr	r1, [pc, #276]	; (8006928 <HAL_RCC_GetSysClockFreq+0x160>)
 8006812:	6849      	ldr	r1, [r1, #4]
 8006814:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006818:	2900      	cmp	r1, #0
 800681a:	d024      	beq.n	8006866 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800681c:	4942      	ldr	r1, [pc, #264]	; (8006928 <HAL_RCC_GetSysClockFreq+0x160>)
 800681e:	6849      	ldr	r1, [r1, #4]
 8006820:	0989      	lsrs	r1, r1, #6
 8006822:	4608      	mov	r0, r1
 8006824:	f04f 0100 	mov.w	r1, #0
 8006828:	f240 14ff 	movw	r4, #511	; 0x1ff
 800682c:	f04f 0500 	mov.w	r5, #0
 8006830:	ea00 0204 	and.w	r2, r0, r4
 8006834:	ea01 0305 	and.w	r3, r1, r5
 8006838:	493d      	ldr	r1, [pc, #244]	; (8006930 <HAL_RCC_GetSysClockFreq+0x168>)
 800683a:	fb01 f003 	mul.w	r0, r1, r3
 800683e:	2100      	movs	r1, #0
 8006840:	fb01 f102 	mul.w	r1, r1, r2
 8006844:	1844      	adds	r4, r0, r1
 8006846:	493a      	ldr	r1, [pc, #232]	; (8006930 <HAL_RCC_GetSysClockFreq+0x168>)
 8006848:	fba2 0101 	umull	r0, r1, r2, r1
 800684c:	1863      	adds	r3, r4, r1
 800684e:	4619      	mov	r1, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	461a      	mov	r2, r3
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	f7fa fa12 	bl	8000c80 <__aeabi_uldivmod>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4613      	mov	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	e04a      	b.n	80068fc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006866:	4b30      	ldr	r3, [pc, #192]	; (8006928 <HAL_RCC_GetSysClockFreq+0x160>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	099b      	lsrs	r3, r3, #6
 800686c:	461a      	mov	r2, r3
 800686e:	f04f 0300 	mov.w	r3, #0
 8006872:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006876:	f04f 0100 	mov.w	r1, #0
 800687a:	ea02 0400 	and.w	r4, r2, r0
 800687e:	ea03 0501 	and.w	r5, r3, r1
 8006882:	4620      	mov	r0, r4
 8006884:	4629      	mov	r1, r5
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	014b      	lsls	r3, r1, #5
 8006890:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006894:	0142      	lsls	r2, r0, #5
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	1b00      	subs	r0, r0, r4
 800689c:	eb61 0105 	sbc.w	r1, r1, r5
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	018b      	lsls	r3, r1, #6
 80068aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80068ae:	0182      	lsls	r2, r0, #6
 80068b0:	1a12      	subs	r2, r2, r0
 80068b2:	eb63 0301 	sbc.w	r3, r3, r1
 80068b6:	f04f 0000 	mov.w	r0, #0
 80068ba:	f04f 0100 	mov.w	r1, #0
 80068be:	00d9      	lsls	r1, r3, #3
 80068c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068c4:	00d0      	lsls	r0, r2, #3
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	1912      	adds	r2, r2, r4
 80068cc:	eb45 0303 	adc.w	r3, r5, r3
 80068d0:	f04f 0000 	mov.w	r0, #0
 80068d4:	f04f 0100 	mov.w	r1, #0
 80068d8:	0299      	lsls	r1, r3, #10
 80068da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80068de:	0290      	lsls	r0, r2, #10
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4610      	mov	r0, r2
 80068e6:	4619      	mov	r1, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f04f 0300 	mov.w	r3, #0
 80068f0:	f7fa f9c6 	bl	8000c80 <__aeabi_uldivmod>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4613      	mov	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068fc:	4b0a      	ldr	r3, [pc, #40]	; (8006928 <HAL_RCC_GetSysClockFreq+0x160>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	0c1b      	lsrs	r3, r3, #16
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	3301      	adds	r3, #1
 8006908:	005b      	lsls	r3, r3, #1
 800690a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	fbb2 f3f3 	udiv	r3, r2, r3
 8006914:	60bb      	str	r3, [r7, #8]
      break;
 8006916:	e002      	b.n	800691e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006918:	4b04      	ldr	r3, [pc, #16]	; (800692c <HAL_RCC_GetSysClockFreq+0x164>)
 800691a:	60bb      	str	r3, [r7, #8]
      break;
 800691c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800691e:	68bb      	ldr	r3, [r7, #8]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bdb0      	pop	{r4, r5, r7, pc}
 8006928:	40023800 	.word	0x40023800
 800692c:	00f42400 	.word	0x00f42400
 8006930:	017d7840 	.word	0x017d7840

08006934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006934:	b480      	push	{r7}
 8006936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006938:	4b03      	ldr	r3, [pc, #12]	; (8006948 <HAL_RCC_GetHCLKFreq+0x14>)
 800693a:	681b      	ldr	r3, [r3, #0]
}
 800693c:	4618      	mov	r0, r3
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	20000004 	.word	0x20000004

0800694c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006950:	f7ff fff0 	bl	8006934 <HAL_RCC_GetHCLKFreq>
 8006954:	4602      	mov	r2, r0
 8006956:	4b05      	ldr	r3, [pc, #20]	; (800696c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	0a9b      	lsrs	r3, r3, #10
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	4903      	ldr	r1, [pc, #12]	; (8006970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006962:	5ccb      	ldrb	r3, [r1, r3]
 8006964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006968:	4618      	mov	r0, r3
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40023800 	.word	0x40023800
 8006970:	0802c1e0 	.word	0x0802c1e0

08006974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006978:	f7ff ffdc 	bl	8006934 <HAL_RCC_GetHCLKFreq>
 800697c:	4602      	mov	r2, r0
 800697e:	4b05      	ldr	r3, [pc, #20]	; (8006994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	0b5b      	lsrs	r3, r3, #13
 8006984:	f003 0307 	and.w	r3, r3, #7
 8006988:	4903      	ldr	r1, [pc, #12]	; (8006998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800698a:	5ccb      	ldrb	r3, [r1, r3]
 800698c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006990:	4618      	mov	r0, r3
 8006992:	bd80      	pop	{r7, pc}
 8006994:	40023800 	.word	0x40023800
 8006998:	0802c1e0 	.word	0x0802c1e0

0800699c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d010      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80069c0:	4b7a      	ldr	r3, [pc, #488]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80069c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069c6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	4977      	ldr	r1, [pc, #476]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80069de:	2301      	movs	r3, #1
 80069e0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d010      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80069ee:	4b6f      	ldr	r3, [pc, #444]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80069f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069f4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	496b      	ldr	r1, [pc, #428]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d022      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8006a1c:	4b63      	ldr	r3, [pc, #396]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2a:	4960      	ldr	r1, [pc, #384]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a46:	d10c      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006a48:	4b58      	ldr	r3, [pc, #352]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a4e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	021b      	lsls	r3, r3, #8
 8006a5a:	4954      	ldr	r1, [pc, #336]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d022      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8006a6e:	4b4f      	ldr	r3, [pc, #316]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a7c:	494b      	ldr	r1, [pc, #300]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a98:	d10c      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006a9a:	4b44      	ldr	r3, [pc, #272]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aa0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	021b      	lsls	r3, r3, #8
 8006aac:	493f      	ldr	r1, [pc, #252]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 808a 	beq.w	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	4b39      	ldr	r3, [pc, #228]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	4a38      	ldr	r2, [pc, #224]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ad2:	4b36      	ldr	r3, [pc, #216]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006ade:	4b34      	ldr	r3, [pc, #208]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a33      	ldr	r2, [pc, #204]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ae8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006aea:	f7fc fc49 	bl	8003380 <HAL_GetTick>
 8006aee:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006af0:	e008      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006af2:	f7fc fc45 	bl	8003380 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e1d1      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b04:	4b2a      	ldr	r3, [pc, #168]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d0f0      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b10:	4b26      	ldr	r3, [pc, #152]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b18:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d02f      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d028      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b2e:	4b1f      	ldr	r3, [pc, #124]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b36:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b38:	4b1e      	ldr	r3, [pc, #120]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b3e:	4b1d      	ldr	r3, [pc, #116]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b44:	4a19      	ldr	r2, [pc, #100]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b4a:	4b18      	ldr	r3, [pc, #96]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d114      	bne.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006b56:	f7fc fc13 	bl	8003380 <HAL_GetTick>
 8006b5a:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b5c:	e00a      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b5e:	f7fc fc0f 	bl	8003380 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e199      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b74:	4b0d      	ldr	r3, [pc, #52]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0ee      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b8c:	d114      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006b8e:	4b07      	ldr	r3, [pc, #28]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba2:	4902      	ldr	r1, [pc, #8]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	608b      	str	r3, [r1, #8]
 8006ba8:	e00c      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006baa:	bf00      	nop
 8006bac:	40023800 	.word	0x40023800
 8006bb0:	40007000 	.word	0x40007000
 8006bb4:	42470e40 	.word	0x42470e40
 8006bb8:	4b89      	ldr	r3, [pc, #548]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	4a88      	ldr	r2, [pc, #544]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006bbe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006bc2:	6093      	str	r3, [r2, #8]
 8006bc4:	4b86      	ldr	r3, [pc, #536]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006bc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bd0:	4983      	ldr	r1, [pc, #524]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0304 	and.w	r3, r3, #4
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d004      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8006be8:	4b7e      	ldr	r3, [pc, #504]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8006bea:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006bf8:	4b79      	ldr	r3, [pc, #484]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	4976      	ldr	r1, [pc, #472]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d011      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c1a:	4b71      	ldr	r3, [pc, #452]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c20:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c28:	496d      	ldr	r1, [pc, #436]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c38:	d101      	bne.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006c4a:	4b65      	ldr	r3, [pc, #404]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c50:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c58:	4961      	ldr	r1, [pc, #388]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d004      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b80      	cmp	r3, #128	; 0x80
 8006c6c:	f040 80c6 	bne.w	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c70:	4b5d      	ldr	r3, [pc, #372]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c76:	f7fc fb83 	bl	8003380 <HAL_GetTick>
 8006c7a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c7c:	e008      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c7e:	f7fc fb7f 	bl	8003380 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e10b      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c90:	4b53      	ldr	r3, [pc, #332]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1f0      	bne.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8006c9c:	4a53      	ldr	r2, [pc, #332]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca2:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d023      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d019      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d004      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ce0:	d00e      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d019      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d115      	bne.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cfe:	d110      	bne.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	019b      	lsls	r3, r3, #6
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	061b      	lsls	r3, r3, #24
 8006d12:	431a      	orrs	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	071b      	lsls	r3, r3, #28
 8006d1a:	4931      	ldr	r1, [pc, #196]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d026      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d122      	bne.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d4a:	4b25      	ldr	r3, [pc, #148]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d50:	0e1b      	lsrs	r3, r3, #24
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	019b      	lsls	r3, r3, #6
 8006d62:	431a      	orrs	r2, r3
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	061b      	lsls	r3, r3, #24
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	071b      	lsls	r3, r3, #28
 8006d70:	491b      	ldr	r1, [pc, #108]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8006d78:	4b19      	ldr	r3, [pc, #100]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d7e:	f023 021f 	bic.w	r2, r3, #31
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	4915      	ldr	r1, [pc, #84]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d010      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	019b      	lsls	r3, r3, #6
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	061b      	lsls	r3, r3, #24
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	071b      	lsls	r3, r3, #28
 8006db6:	490a      	ldr	r1, [pc, #40]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006dbe:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006dc4:	f7fc fadc 	bl	8003380 <HAL_GetTick>
 8006dc8:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006dca:	e011      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006dcc:	f7fc fad8 	bl	8003380 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d90a      	bls.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e064      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006dde:	bf00      	nop
 8006de0:	40023800 	.word	0x40023800
 8006de4:	424711e0 	.word	0x424711e0
 8006de8:	42470068 	.word	0x42470068
 8006dec:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006df0:	4b2f      	ldr	r3, [pc, #188]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0e7      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00a      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e08:	4b29      	ldr	r3, [pc, #164]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e16:	4926      	ldr	r1, [pc, #152]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006e2a:	4b21      	ldr	r3, [pc, #132]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e30:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e38:	491d      	ldr	r1, [pc, #116]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006e4c:	4b18      	ldr	r3, [pc, #96]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5a:	4915      	ldr	r1, [pc, #84]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8006e6e:	4b10      	ldr	r3, [pc, #64]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e74:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7c:	490c      	ldr	r1, [pc, #48]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00a      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e96:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9e:	4904      	ldr	r1, [pc, #16]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3720      	adds	r7, #32
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	40023800 	.word	0x40023800

08006eb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e270      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d075      	beq.n	8006fbe <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ed2:	4ba3      	ldr	r3, [pc, #652]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f003 030c 	and.w	r3, r3, #12
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d00c      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ede:	4ba0      	ldr	r3, [pc, #640]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d112      	bne.n	8006f10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006eea:	4b9d      	ldr	r3, [pc, #628]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ef6:	d10b      	bne.n	8006f10 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ef8:	4b99      	ldr	r3, [pc, #612]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d05b      	beq.n	8006fbc <HAL_RCC_OscConfig+0x108>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d157      	bne.n	8006fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e24b      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f18:	d106      	bne.n	8006f28 <HAL_RCC_OscConfig+0x74>
 8006f1a:	4b91      	ldr	r3, [pc, #580]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a90      	ldr	r2, [pc, #576]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	e01d      	b.n	8006f64 <HAL_RCC_OscConfig+0xb0>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f30:	d10c      	bne.n	8006f4c <HAL_RCC_OscConfig+0x98>
 8006f32:	4b8b      	ldr	r3, [pc, #556]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a8a      	ldr	r2, [pc, #552]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	4b88      	ldr	r3, [pc, #544]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a87      	ldr	r2, [pc, #540]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	e00b      	b.n	8006f64 <HAL_RCC_OscConfig+0xb0>
 8006f4c:	4b84      	ldr	r3, [pc, #528]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a83      	ldr	r2, [pc, #524]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	4b81      	ldr	r3, [pc, #516]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a80      	ldr	r2, [pc, #512]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d013      	beq.n	8006f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f6c:	f7fc fa08 	bl	8003380 <HAL_GetTick>
 8006f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f72:	e008      	b.n	8006f86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f74:	f7fc fa04 	bl	8003380 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	2b64      	cmp	r3, #100	; 0x64
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e210      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f86:	4b76      	ldr	r3, [pc, #472]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d0f0      	beq.n	8006f74 <HAL_RCC_OscConfig+0xc0>
 8006f92:	e014      	b.n	8006fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f94:	f7fc f9f4 	bl	8003380 <HAL_GetTick>
 8006f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f9a:	e008      	b.n	8006fae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f9c:	f7fc f9f0 	bl	8003380 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b64      	cmp	r3, #100	; 0x64
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e1fc      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fae:	4b6c      	ldr	r3, [pc, #432]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f0      	bne.n	8006f9c <HAL_RCC_OscConfig+0xe8>
 8006fba:	e000      	b.n	8006fbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d063      	beq.n	8007092 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006fca:	4b65      	ldr	r3, [pc, #404]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 030c 	and.w	r3, r3, #12
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00b      	beq.n	8006fee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fd6:	4b62      	ldr	r3, [pc, #392]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006fde:	2b08      	cmp	r3, #8
 8006fe0:	d11c      	bne.n	800701c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fe2:	4b5f      	ldr	r3, [pc, #380]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d116      	bne.n	800701c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fee:	4b5c      	ldr	r3, [pc, #368]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d005      	beq.n	8007006 <HAL_RCC_OscConfig+0x152>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d001      	beq.n	8007006 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e1d0      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007006:	4b56      	ldr	r3, [pc, #344]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	4952      	ldr	r1, [pc, #328]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8007016:	4313      	orrs	r3, r2
 8007018:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800701a:	e03a      	b.n	8007092 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d020      	beq.n	8007066 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007024:	4b4f      	ldr	r3, [pc, #316]	; (8007164 <HAL_RCC_OscConfig+0x2b0>)
 8007026:	2201      	movs	r2, #1
 8007028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702a:	f7fc f9a9 	bl	8003380 <HAL_GetTick>
 800702e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007030:	e008      	b.n	8007044 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007032:	f7fc f9a5 	bl	8003380 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	2b02      	cmp	r3, #2
 800703e:	d901      	bls.n	8007044 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e1b1      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007044:	4b46      	ldr	r3, [pc, #280]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0f0      	beq.n	8007032 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007050:	4b43      	ldr	r3, [pc, #268]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	4940      	ldr	r1, [pc, #256]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8007060:	4313      	orrs	r3, r2
 8007062:	600b      	str	r3, [r1, #0]
 8007064:	e015      	b.n	8007092 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007066:	4b3f      	ldr	r3, [pc, #252]	; (8007164 <HAL_RCC_OscConfig+0x2b0>)
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706c:	f7fc f988 	bl	8003380 <HAL_GetTick>
 8007070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007074:	f7fc f984 	bl	8003380 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e190      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007086:	4b36      	ldr	r3, [pc, #216]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1f0      	bne.n	8007074 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0308 	and.w	r3, r3, #8
 800709a:	2b00      	cmp	r3, #0
 800709c:	d030      	beq.n	8007100 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d016      	beq.n	80070d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070a6:	4b30      	ldr	r3, [pc, #192]	; (8007168 <HAL_RCC_OscConfig+0x2b4>)
 80070a8:	2201      	movs	r2, #1
 80070aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ac:	f7fc f968 	bl	8003380 <HAL_GetTick>
 80070b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070b2:	e008      	b.n	80070c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070b4:	f7fc f964 	bl	8003380 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e170      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070c6:	4b26      	ldr	r3, [pc, #152]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 80070c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0f0      	beq.n	80070b4 <HAL_RCC_OscConfig+0x200>
 80070d2:	e015      	b.n	8007100 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070d4:	4b24      	ldr	r3, [pc, #144]	; (8007168 <HAL_RCC_OscConfig+0x2b4>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070da:	f7fc f951 	bl	8003380 <HAL_GetTick>
 80070de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070e0:	e008      	b.n	80070f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070e2:	f7fc f94d 	bl	8003380 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d901      	bls.n	80070f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e159      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070f4:	4b1a      	ldr	r3, [pc, #104]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 80070f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1f0      	bne.n	80070e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 80a0 	beq.w	800724e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800710e:	2300      	movs	r3, #0
 8007110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007112:	4b13      	ldr	r3, [pc, #76]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10f      	bne.n	800713e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800711e:	2300      	movs	r3, #0
 8007120:	60bb      	str	r3, [r7, #8]
 8007122:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	4a0e      	ldr	r2, [pc, #56]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8007128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800712c:	6413      	str	r3, [r2, #64]	; 0x40
 800712e:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <HAL_RCC_OscConfig+0x2ac>)
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007136:	60bb      	str	r3, [r7, #8]
 8007138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800713a:	2301      	movs	r3, #1
 800713c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800713e:	4b0b      	ldr	r3, [pc, #44]	; (800716c <HAL_RCC_OscConfig+0x2b8>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007146:	2b00      	cmp	r3, #0
 8007148:	d121      	bne.n	800718e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800714a:	4b08      	ldr	r3, [pc, #32]	; (800716c <HAL_RCC_OscConfig+0x2b8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a07      	ldr	r2, [pc, #28]	; (800716c <HAL_RCC_OscConfig+0x2b8>)
 8007150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007156:	f7fc f913 	bl	8003380 <HAL_GetTick>
 800715a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800715c:	e011      	b.n	8007182 <HAL_RCC_OscConfig+0x2ce>
 800715e:	bf00      	nop
 8007160:	40023800 	.word	0x40023800
 8007164:	42470000 	.word	0x42470000
 8007168:	42470e80 	.word	0x42470e80
 800716c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007170:	f7fc f906 	bl	8003380 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e112      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007182:	4b8b      	ldr	r3, [pc, #556]	; (80073b0 <HAL_RCC_OscConfig+0x4fc>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0f0      	beq.n	8007170 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d106      	bne.n	80071a4 <HAL_RCC_OscConfig+0x2f0>
 8007196:	4b87      	ldr	r3, [pc, #540]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 8007198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719a:	4a86      	ldr	r2, [pc, #536]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 800719c:	f043 0301 	orr.w	r3, r3, #1
 80071a0:	6713      	str	r3, [r2, #112]	; 0x70
 80071a2:	e01c      	b.n	80071de <HAL_RCC_OscConfig+0x32a>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	2b05      	cmp	r3, #5
 80071aa:	d10c      	bne.n	80071c6 <HAL_RCC_OscConfig+0x312>
 80071ac:	4b81      	ldr	r3, [pc, #516]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 80071ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b0:	4a80      	ldr	r2, [pc, #512]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 80071b2:	f043 0304 	orr.w	r3, r3, #4
 80071b6:	6713      	str	r3, [r2, #112]	; 0x70
 80071b8:	4b7e      	ldr	r3, [pc, #504]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 80071ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071bc:	4a7d      	ldr	r2, [pc, #500]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 80071be:	f043 0301 	orr.w	r3, r3, #1
 80071c2:	6713      	str	r3, [r2, #112]	; 0x70
 80071c4:	e00b      	b.n	80071de <HAL_RCC_OscConfig+0x32a>
 80071c6:	4b7b      	ldr	r3, [pc, #492]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 80071c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ca:	4a7a      	ldr	r2, [pc, #488]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 80071cc:	f023 0301 	bic.w	r3, r3, #1
 80071d0:	6713      	str	r3, [r2, #112]	; 0x70
 80071d2:	4b78      	ldr	r3, [pc, #480]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 80071d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d6:	4a77      	ldr	r2, [pc, #476]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 80071d8:	f023 0304 	bic.w	r3, r3, #4
 80071dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d015      	beq.n	8007212 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e6:	f7fc f8cb 	bl	8003380 <HAL_GetTick>
 80071ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ec:	e00a      	b.n	8007204 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071ee:	f7fc f8c7 	bl	8003380 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d901      	bls.n	8007204 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e0d1      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007204:	4b6b      	ldr	r3, [pc, #428]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 8007206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0ee      	beq.n	80071ee <HAL_RCC_OscConfig+0x33a>
 8007210:	e014      	b.n	800723c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007212:	f7fc f8b5 	bl	8003380 <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007218:	e00a      	b.n	8007230 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800721a:	f7fc f8b1 	bl	8003380 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	f241 3288 	movw	r2, #5000	; 0x1388
 8007228:	4293      	cmp	r3, r2
 800722a:	d901      	bls.n	8007230 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e0bb      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007230:	4b60      	ldr	r3, [pc, #384]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 8007232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1ee      	bne.n	800721a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d105      	bne.n	800724e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007242:	4b5c      	ldr	r3, [pc, #368]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	4a5b      	ldr	r2, [pc, #364]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 8007248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800724c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 80a7 	beq.w	80073a6 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007258:	4b56      	ldr	r3, [pc, #344]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f003 030c 	and.w	r3, r3, #12
 8007260:	2b08      	cmp	r3, #8
 8007262:	d060      	beq.n	8007326 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	2b02      	cmp	r3, #2
 800726a:	d145      	bne.n	80072f8 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800726c:	4b52      	ldr	r3, [pc, #328]	; (80073b8 <HAL_RCC_OscConfig+0x504>)
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007272:	f7fc f885 	bl	8003380 <HAL_GetTick>
 8007276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007278:	e008      	b.n	800728c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800727a:	f7fc f881 	bl	8003380 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b02      	cmp	r3, #2
 8007286:	d901      	bls.n	800728c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e08d      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800728c:	4b49      	ldr	r3, [pc, #292]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1f0      	bne.n	800727a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	69da      	ldr	r2, [r3, #28]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	431a      	orrs	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	019b      	lsls	r3, r3, #6
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	3b01      	subs	r3, #1
 80072b2:	041b      	lsls	r3, r3, #16
 80072b4:	431a      	orrs	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ba:	061b      	lsls	r3, r3, #24
 80072bc:	431a      	orrs	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c2:	071b      	lsls	r3, r3, #28
 80072c4:	493b      	ldr	r1, [pc, #236]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072ca:	4b3b      	ldr	r3, [pc, #236]	; (80073b8 <HAL_RCC_OscConfig+0x504>)
 80072cc:	2201      	movs	r2, #1
 80072ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d0:	f7fc f856 	bl	8003380 <HAL_GetTick>
 80072d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072d6:	e008      	b.n	80072ea <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072d8:	f7fc f852 	bl	8003380 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e05e      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072ea:	4b32      	ldr	r3, [pc, #200]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0f0      	beq.n	80072d8 <HAL_RCC_OscConfig+0x424>
 80072f6:	e056      	b.n	80073a6 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072f8:	4b2f      	ldr	r3, [pc, #188]	; (80073b8 <HAL_RCC_OscConfig+0x504>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072fe:	f7fc f83f 	bl	8003380 <HAL_GetTick>
 8007302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007304:	e008      	b.n	8007318 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007306:	f7fc f83b 	bl	8003380 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	2b02      	cmp	r3, #2
 8007312:	d901      	bls.n	8007318 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e047      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007318:	4b26      	ldr	r3, [pc, #152]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1f0      	bne.n	8007306 <HAL_RCC_OscConfig+0x452>
 8007324:	e03f      	b.n	80073a6 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d101      	bne.n	8007332 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e03a      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007332:	4b20      	ldr	r3, [pc, #128]	; (80073b4 <HAL_RCC_OscConfig+0x500>)
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d030      	beq.n	80073a2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800734a:	429a      	cmp	r2, r3
 800734c:	d129      	bne.n	80073a2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007358:	429a      	cmp	r2, r3
 800735a:	d122      	bne.n	80073a2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007362:	4013      	ands	r3, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007368:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800736a:	4293      	cmp	r3, r2
 800736c:	d119      	bne.n	80073a2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007378:	085b      	lsrs	r3, r3, #1
 800737a:	3b01      	subs	r3, #1
 800737c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800737e:	429a      	cmp	r2, r3
 8007380:	d10f      	bne.n	80073a2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800738e:	429a      	cmp	r2, r3
 8007390:	d107      	bne.n	80073a2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739c:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800739e:	429a      	cmp	r2, r3
 80073a0:	d001      	beq.n	80073a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e000      	b.n	80073a8 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	40007000 	.word	0x40007000
 80073b4:	40023800 	.word	0x40023800
 80073b8:	42470060 	.word	0x42470060

080073bc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e034      	b.n	800743c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d106      	bne.n	80073ec <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7fa f88c 	bl	8001504 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3308      	adds	r3, #8
 80073f4:	4619      	mov	r1, r3
 80073f6:	4610      	mov	r0, r2
 80073f8:	f001 f8be 	bl	8008578 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6818      	ldr	r0, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	461a      	mov	r2, r3
 8007406:	68b9      	ldr	r1, [r7, #8]
 8007408:	f001 f926 	bl	8008658 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6858      	ldr	r0, [r3, #4]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	f001 f971 	bl	8008700 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	6892      	ldr	r2, [r2, #8]
 8007426:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	6892      	ldr	r2, [r2, #8]
 8007432:	f041 0101 	orr.w	r1, r1, #1
 8007436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e041      	b.n	80074da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d106      	bne.n	8007470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fb fb42 	bl	8002af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3304      	adds	r3, #4
 8007480:	4619      	mov	r1, r3
 8007482:	4610      	mov	r0, r2
 8007484:	f000 f8d8 	bl	8007638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d001      	beq.n	80074fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e046      	b.n	800758a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a23      	ldr	r2, [pc, #140]	; (8007598 <HAL_TIM_Base_Start+0xb4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d022      	beq.n	8007554 <HAL_TIM_Base_Start+0x70>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007516:	d01d      	beq.n	8007554 <HAL_TIM_Base_Start+0x70>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a1f      	ldr	r2, [pc, #124]	; (800759c <HAL_TIM_Base_Start+0xb8>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d018      	beq.n	8007554 <HAL_TIM_Base_Start+0x70>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a1e      	ldr	r2, [pc, #120]	; (80075a0 <HAL_TIM_Base_Start+0xbc>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d013      	beq.n	8007554 <HAL_TIM_Base_Start+0x70>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a1c      	ldr	r2, [pc, #112]	; (80075a4 <HAL_TIM_Base_Start+0xc0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d00e      	beq.n	8007554 <HAL_TIM_Base_Start+0x70>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a1b      	ldr	r2, [pc, #108]	; (80075a8 <HAL_TIM_Base_Start+0xc4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d009      	beq.n	8007554 <HAL_TIM_Base_Start+0x70>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a19      	ldr	r2, [pc, #100]	; (80075ac <HAL_TIM_Base_Start+0xc8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d004      	beq.n	8007554 <HAL_TIM_Base_Start+0x70>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a18      	ldr	r2, [pc, #96]	; (80075b0 <HAL_TIM_Base_Start+0xcc>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d111      	bne.n	8007578 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b06      	cmp	r3, #6
 8007564:	d010      	beq.n	8007588 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0201 	orr.w	r2, r2, #1
 8007574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007576:	e007      	b.n	8007588 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0201 	orr.w	r2, r2, #1
 8007586:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40010000 	.word	0x40010000
 800759c:	40000400 	.word	0x40000400
 80075a0:	40000800 	.word	0x40000800
 80075a4:	40000c00 	.word	0x40000c00
 80075a8:	40010400 	.word	0x40010400
 80075ac:	40014000 	.word	0x40014000
 80075b0:	40001800 	.word	0x40001800

080075b4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d101      	bne.n	80075cc <HAL_TIM_SlaveConfigSynchro+0x18>
 80075c8:	2302      	movs	r3, #2
 80075ca:	e031      	b.n	8007630 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f8ca 	bl	8007778 <TIM_SlaveTimer_SetConfig>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d009      	beq.n	80075fe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e018      	b.n	8007630 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68da      	ldr	r2, [r3, #12]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800760c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800761c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a40      	ldr	r2, [pc, #256]	; (800774c <TIM_Base_SetConfig+0x114>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d013      	beq.n	8007678 <TIM_Base_SetConfig+0x40>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007656:	d00f      	beq.n	8007678 <TIM_Base_SetConfig+0x40>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a3d      	ldr	r2, [pc, #244]	; (8007750 <TIM_Base_SetConfig+0x118>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d00b      	beq.n	8007678 <TIM_Base_SetConfig+0x40>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a3c      	ldr	r2, [pc, #240]	; (8007754 <TIM_Base_SetConfig+0x11c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d007      	beq.n	8007678 <TIM_Base_SetConfig+0x40>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a3b      	ldr	r2, [pc, #236]	; (8007758 <TIM_Base_SetConfig+0x120>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d003      	beq.n	8007678 <TIM_Base_SetConfig+0x40>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a3a      	ldr	r2, [pc, #232]	; (800775c <TIM_Base_SetConfig+0x124>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d108      	bne.n	800768a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a2f      	ldr	r2, [pc, #188]	; (800774c <TIM_Base_SetConfig+0x114>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d02b      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007698:	d027      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a2c      	ldr	r2, [pc, #176]	; (8007750 <TIM_Base_SetConfig+0x118>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d023      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a2b      	ldr	r2, [pc, #172]	; (8007754 <TIM_Base_SetConfig+0x11c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d01f      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a2a      	ldr	r2, [pc, #168]	; (8007758 <TIM_Base_SetConfig+0x120>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d01b      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a29      	ldr	r2, [pc, #164]	; (800775c <TIM_Base_SetConfig+0x124>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d017      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a28      	ldr	r2, [pc, #160]	; (8007760 <TIM_Base_SetConfig+0x128>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d013      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a27      	ldr	r2, [pc, #156]	; (8007764 <TIM_Base_SetConfig+0x12c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00f      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a26      	ldr	r2, [pc, #152]	; (8007768 <TIM_Base_SetConfig+0x130>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d00b      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a25      	ldr	r2, [pc, #148]	; (800776c <TIM_Base_SetConfig+0x134>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d007      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a24      	ldr	r2, [pc, #144]	; (8007770 <TIM_Base_SetConfig+0x138>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d003      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a23      	ldr	r2, [pc, #140]	; (8007774 <TIM_Base_SetConfig+0x13c>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d108      	bne.n	80076fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	4313      	orrs	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a0a      	ldr	r2, [pc, #40]	; (800774c <TIM_Base_SetConfig+0x114>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d003      	beq.n	8007730 <TIM_Base_SetConfig+0xf8>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a0c      	ldr	r2, [pc, #48]	; (800775c <TIM_Base_SetConfig+0x124>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d103      	bne.n	8007738 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	615a      	str	r2, [r3, #20]
}
 800773e:	bf00      	nop
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	40010000 	.word	0x40010000
 8007750:	40000400 	.word	0x40000400
 8007754:	40000800 	.word	0x40000800
 8007758:	40000c00 	.word	0x40000c00
 800775c:	40010400 	.word	0x40010400
 8007760:	40014000 	.word	0x40014000
 8007764:	40014400 	.word	0x40014400
 8007768:	40014800 	.word	0x40014800
 800776c:	40001800 	.word	0x40001800
 8007770:	40001c00 	.word	0x40001c00
 8007774:	40002000 	.word	0x40002000

08007778 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007790:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	4313      	orrs	r3, r2
 800779a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f023 0307 	bic.w	r3, r3, #7
 80077a2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	2b70      	cmp	r3, #112	; 0x70
 80077bc:	d01a      	beq.n	80077f4 <TIM_SlaveTimer_SetConfig+0x7c>
 80077be:	2b70      	cmp	r3, #112	; 0x70
 80077c0:	d860      	bhi.n	8007884 <TIM_SlaveTimer_SetConfig+0x10c>
 80077c2:	2b60      	cmp	r3, #96	; 0x60
 80077c4:	d054      	beq.n	8007870 <TIM_SlaveTimer_SetConfig+0xf8>
 80077c6:	2b60      	cmp	r3, #96	; 0x60
 80077c8:	d85c      	bhi.n	8007884 <TIM_SlaveTimer_SetConfig+0x10c>
 80077ca:	2b50      	cmp	r3, #80	; 0x50
 80077cc:	d046      	beq.n	800785c <TIM_SlaveTimer_SetConfig+0xe4>
 80077ce:	2b50      	cmp	r3, #80	; 0x50
 80077d0:	d858      	bhi.n	8007884 <TIM_SlaveTimer_SetConfig+0x10c>
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	d019      	beq.n	800780a <TIM_SlaveTimer_SetConfig+0x92>
 80077d6:	2b40      	cmp	r3, #64	; 0x40
 80077d8:	d854      	bhi.n	8007884 <TIM_SlaveTimer_SetConfig+0x10c>
 80077da:	2b30      	cmp	r3, #48	; 0x30
 80077dc:	d054      	beq.n	8007888 <TIM_SlaveTimer_SetConfig+0x110>
 80077de:	2b30      	cmp	r3, #48	; 0x30
 80077e0:	d850      	bhi.n	8007884 <TIM_SlaveTimer_SetConfig+0x10c>
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	d050      	beq.n	8007888 <TIM_SlaveTimer_SetConfig+0x110>
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d84c      	bhi.n	8007884 <TIM_SlaveTimer_SetConfig+0x10c>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d04c      	beq.n	8007888 <TIM_SlaveTimer_SetConfig+0x110>
 80077ee:	2b10      	cmp	r3, #16
 80077f0:	d04a      	beq.n	8007888 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80077f2:	e047      	b.n	8007884 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6818      	ldr	r0, [r3, #0]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	68d9      	ldr	r1, [r3, #12]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f000 f8a5 	bl	8007952 <TIM_ETR_SetConfig>
      break;
 8007808:	e03f      	b.n	800788a <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b05      	cmp	r3, #5
 8007810:	d101      	bne.n	8007816 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e03a      	b.n	800788c <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6a1a      	ldr	r2, [r3, #32]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f022 0201 	bic.w	r2, r2, #1
 800782c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800783c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	4313      	orrs	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	621a      	str	r2, [r3, #32]
      break;
 800785a:	e016      	b.n	800788a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6818      	ldr	r0, [r3, #0]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	6899      	ldr	r1, [r3, #8]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	461a      	mov	r2, r3
 800786a:	f000 f813 	bl	8007894 <TIM_TI1_ConfigInputStage>
      break;
 800786e:	e00c      	b.n	800788a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6818      	ldr	r0, [r3, #0]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	6899      	ldr	r1, [r3, #8]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	461a      	mov	r2, r3
 800787e:	f000 f838 	bl	80078f2 <TIM_TI2_ConfigInputStage>
      break;
 8007882:	e002      	b.n	800788a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8007884:	bf00      	nop
 8007886:	e000      	b.n	800788a <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8007888:	bf00      	nop
  }
  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	f023 0201 	bic.w	r2, r3, #1
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	011b      	lsls	r3, r3, #4
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f023 030a 	bic.w	r3, r3, #10
 80078d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	621a      	str	r2, [r3, #32]
}
 80078e6:	bf00      	nop
 80078e8:	371c      	adds	r7, #28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b087      	sub	sp, #28
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	60b9      	str	r1, [r7, #8]
 80078fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	f023 0210 	bic.w	r2, r3, #16
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800791c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	031b      	lsls	r3, r3, #12
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	4313      	orrs	r3, r2
 8007926:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800792e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	011b      	lsls	r3, r3, #4
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	4313      	orrs	r3, r2
 8007938:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	621a      	str	r2, [r3, #32]
}
 8007946:	bf00      	nop
 8007948:	371c      	adds	r7, #28
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007952:	b480      	push	{r7}
 8007954:	b087      	sub	sp, #28
 8007956:	af00      	add	r7, sp, #0
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	60b9      	str	r1, [r7, #8]
 800795c:	607a      	str	r2, [r7, #4]
 800795e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800796c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	021a      	lsls	r2, r3, #8
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	431a      	orrs	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	4313      	orrs	r3, r2
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	4313      	orrs	r3, r2
 800797e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	609a      	str	r2, [r3, #8]
}
 8007986:	bf00      	nop
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
	...

08007994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d101      	bne.n	80079ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079a8:	2302      	movs	r3, #2
 80079aa:	e05a      	b.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a21      	ldr	r2, [pc, #132]	; (8007a70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d022      	beq.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f8:	d01d      	beq.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a1d      	ldr	r2, [pc, #116]	; (8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d018      	beq.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a1b      	ldr	r2, [pc, #108]	; (8007a78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d013      	beq.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a1a      	ldr	r2, [pc, #104]	; (8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00e      	beq.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a18      	ldr	r2, [pc, #96]	; (8007a80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d009      	beq.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a17      	ldr	r2, [pc, #92]	; (8007a84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d004      	beq.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a15      	ldr	r2, [pc, #84]	; (8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d10c      	bne.n	8007a50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	40010000 	.word	0x40010000
 8007a74:	40000400 	.word	0x40000400
 8007a78:	40000800 	.word	0x40000800
 8007a7c:	40000c00 	.word	0x40000c00
 8007a80:	40010400 	.word	0x40010400
 8007a84:	40014000 	.word	0x40014000
 8007a88:	40001800 	.word	0x40001800

08007a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e03f      	b.n	8007b1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d106      	bne.n	8007ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fb fb82 	bl	80031bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2224      	movs	r2, #36	; 0x24
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fb79 	bl	80081c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	691a      	ldr	r2, [r3, #16]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	695a      	ldr	r2, [r3, #20]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2220      	movs	r2, #32
 8007b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b085      	sub	sp, #20
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	60b9      	str	r1, [r7, #8]
 8007b30:	4613      	mov	r3, r2
 8007b32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	d130      	bne.n	8007ba2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <HAL_UART_Transmit_IT+0x26>
 8007b46:	88fb      	ldrh	r3, [r7, #6]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e029      	b.n	8007ba4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d101      	bne.n	8007b5e <HAL_UART_Transmit_IT+0x38>
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	e022      	b.n	8007ba4 <HAL_UART_Transmit_IT+0x7e>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	88fa      	ldrh	r2, [r7, #6]
 8007b70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	88fa      	ldrh	r2, [r7, #6]
 8007b76:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2221      	movs	r2, #33	; 0x21
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68da      	ldr	r2, [r3, #12]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b9c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e000      	b.n	8007ba4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007ba2:	2302      	movs	r3, #2
  }
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b08a      	sub	sp, #40	; 0x28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	f003 030f 	and.w	r3, r3, #15
 8007bde:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10d      	bne.n	8007c02 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d008      	beq.n	8007c02 <HAL_UART_IRQHandler+0x52>
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	f003 0320 	and.w	r3, r3, #32
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fa4d 	bl	800809a <UART_Receive_IT>
      return;
 8007c00:	e17c      	b.n	8007efc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 80b1 	beq.w	8007d6c <HAL_UART_IRQHandler+0x1bc>
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d105      	bne.n	8007c20 <HAL_UART_IRQHandler+0x70>
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 80a6 	beq.w	8007d6c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <HAL_UART_IRQHandler+0x90>
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d005      	beq.n	8007c40 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c38:	f043 0201 	orr.w	r2, r3, #1
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	f003 0304 	and.w	r3, r3, #4
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <HAL_UART_IRQHandler+0xb0>
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	f043 0202 	orr.w	r2, r3, #2
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <HAL_UART_IRQHandler+0xd0>
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c78:	f043 0204 	orr.w	r2, r3, #4
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00f      	beq.n	8007caa <HAL_UART_IRQHandler+0xfa>
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	f003 0320 	and.w	r3, r3, #32
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d104      	bne.n	8007c9e <HAL_UART_IRQHandler+0xee>
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	f043 0208 	orr.w	r2, r3, #8
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 811f 	beq.w	8007ef2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d007      	beq.n	8007cce <HAL_UART_IRQHandler+0x11e>
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	f003 0320 	and.w	r3, r3, #32
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f9e6 	bl	800809a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd8:	2b40      	cmp	r3, #64	; 0x40
 8007cda:	bf0c      	ite	eq
 8007cdc:	2301      	moveq	r3, #1
 8007cde:	2300      	movne	r3, #0
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce8:	f003 0308 	and.w	r3, r3, #8
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d102      	bne.n	8007cf6 <HAL_UART_IRQHandler+0x146>
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d031      	beq.n	8007d5a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f926 	bl	8007f48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d06:	2b40      	cmp	r3, #64	; 0x40
 8007d08:	d123      	bne.n	8007d52 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	695a      	ldr	r2, [r3, #20]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d18:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d013      	beq.n	8007d4a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d26:	4a77      	ldr	r2, [pc, #476]	; (8007f04 <HAL_UART_IRQHandler+0x354>)
 8007d28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fb fdf3 	bl	800391a <HAL_DMA_Abort_IT>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d016      	beq.n	8007d68 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d44:	4610      	mov	r0, r2
 8007d46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d48:	e00e      	b.n	8007d68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f8e6 	bl	8007f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d50:	e00a      	b.n	8007d68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f8e2 	bl	8007f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d58:	e006      	b.n	8007d68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f8de 	bl	8007f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d66:	e0c4      	b.n	8007ef2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d68:	bf00      	nop
    return;
 8007d6a:	e0c2      	b.n	8007ef2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	f040 80a2 	bne.w	8007eba <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	f003 0310 	and.w	r3, r3, #16
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 809c 	beq.w	8007eba <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	f003 0310 	and.w	r3, r3, #16
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 8096 	beq.w	8007eba <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	60fb      	str	r3, [r7, #12]
 8007da2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dae:	2b40      	cmp	r3, #64	; 0x40
 8007db0:	d14f      	bne.n	8007e52 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007dbc:	8a3b      	ldrh	r3, [r7, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 8099 	beq.w	8007ef6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007dc8:	8a3a      	ldrh	r2, [r7, #16]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	f080 8093 	bcs.w	8007ef6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	8a3a      	ldrh	r2, [r7, #16]
 8007dd4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007de0:	d02b      	beq.n	8007e3a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007df0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	695a      	ldr	r2, [r3, #20]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 0201 	bic.w	r2, r2, #1
 8007e00:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	695a      	ldr	r2, [r3, #20]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e10:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0210 	bic.w	r2, r2, #16
 8007e2e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fb fd00 	bl	800383a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f870 	bl	8007f30 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007e50:	e051      	b.n	8007ef6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d047      	beq.n	8007efa <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007e6a:	8a7b      	ldrh	r3, [r7, #18]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d044      	beq.n	8007efa <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e7e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	695a      	ldr	r2, [r3, #20]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0201 	bic.w	r2, r2, #1
 8007e8e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68da      	ldr	r2, [r3, #12]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f022 0210 	bic.w	r2, r2, #16
 8007eac:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007eae:	8a7b      	ldrh	r3, [r7, #18]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f83c 	bl	8007f30 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007eb8:	e01f      	b.n	8007efa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d008      	beq.n	8007ed6 <HAL_UART_IRQHandler+0x326>
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f87b 	bl	8007fca <UART_Transmit_IT>
    return;
 8007ed4:	e012      	b.n	8007efc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00d      	beq.n	8007efc <HAL_UART_IRQHandler+0x34c>
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d008      	beq.n	8007efc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f8bd 	bl	800806a <UART_EndTransmit_IT>
    return;
 8007ef0:	e004      	b.n	8007efc <HAL_UART_IRQHandler+0x34c>
    return;
 8007ef2:	bf00      	nop
 8007ef4:	e002      	b.n	8007efc <HAL_UART_IRQHandler+0x34c>
      return;
 8007ef6:	bf00      	nop
 8007ef8:	e000      	b.n	8007efc <HAL_UART_IRQHandler+0x34c>
      return;
 8007efa:	bf00      	nop
  }
}
 8007efc:	3728      	adds	r7, #40	; 0x28
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	08007fa3 	.word	0x08007fa3

08007f08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68da      	ldr	r2, [r3, #12]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f5e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	695a      	ldr	r2, [r3, #20]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f022 0201 	bic.w	r2, r2, #1
 8007f6e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d107      	bne.n	8007f88 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f022 0210 	bic.w	r2, r2, #16
 8007f86:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f7ff ffad 	bl	8007f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b21      	cmp	r3, #33	; 0x21
 8007fdc:	d13e      	bne.n	800805c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe6:	d114      	bne.n	8008012 <UART_Transmit_IT+0x48>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d110      	bne.n	8008012 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008004:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	1c9a      	adds	r2, r3, #2
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	621a      	str	r2, [r3, #32]
 8008010:	e008      	b.n	8008024 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	1c59      	adds	r1, r3, #1
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	6211      	str	r1, [r2, #32]
 800801c:	781a      	ldrb	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008028:	b29b      	uxth	r3, r3
 800802a:	3b01      	subs	r3, #1
 800802c:	b29b      	uxth	r3, r3
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	4619      	mov	r1, r3
 8008032:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10f      	bne.n	8008058 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68da      	ldr	r2, [r3, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008046:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68da      	ldr	r2, [r3, #12]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008056:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	e000      	b.n	800805e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800805c:	2302      	movs	r3, #2
  }
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008080:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2220      	movs	r2, #32
 8008086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7fa fec6 	bl	8002e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b22      	cmp	r3, #34	; 0x22
 80080ac:	f040 8087 	bne.w	80081be <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b8:	d117      	bne.n	80080ea <UART_Receive_IT+0x50>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d113      	bne.n	80080ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ca:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d8:	b29a      	uxth	r2, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e2:	1c9a      	adds	r2, r3, #2
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	629a      	str	r2, [r3, #40]	; 0x28
 80080e8:	e026      	b.n	8008138 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ee:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080fc:	d007      	beq.n	800810e <UART_Receive_IT+0x74>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <UART_Receive_IT+0x82>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d106      	bne.n	800811c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	b2da      	uxtb	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	701a      	strb	r2, [r3, #0]
 800811a:	e008      	b.n	800812e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	b2db      	uxtb	r3, r3
 8008124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008128:	b2da      	uxtb	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800813c:	b29b      	uxth	r3, r3
 800813e:	3b01      	subs	r3, #1
 8008140:	b29b      	uxth	r3, r3
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	4619      	mov	r1, r3
 8008146:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008148:	2b00      	cmp	r3, #0
 800814a:	d136      	bne.n	80081ba <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68da      	ldr	r2, [r3, #12]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0220 	bic.w	r2, r2, #32
 800815a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800816a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	695a      	ldr	r2, [r3, #20]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0201 	bic.w	r2, r2, #1
 800817a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2220      	movs	r2, #32
 8008180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008188:	2b01      	cmp	r3, #1
 800818a:	d10e      	bne.n	80081aa <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0210 	bic.w	r2, r2, #16
 800819a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7ff fec4 	bl	8007f30 <HAL_UARTEx_RxEventCallback>
 80081a8:	e002      	b.n	80081b0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7ff feac 	bl	8007f08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	e002      	b.n	80081c0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	e000      	b.n	80081c0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80081be:	2302      	movs	r3, #2
  }
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	b09f      	sub	sp, #124	; 0x7c
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081de:	68d9      	ldr	r1, [r3, #12]
 80081e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	ea40 0301 	orr.w	r3, r0, r1
 80081e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ec:	689a      	ldr	r2, [r3, #8]
 80081ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	431a      	orrs	r2, r3
 80081f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	431a      	orrs	r2, r3
 80081fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	4313      	orrs	r3, r2
 8008200:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800820c:	f021 010c 	bic.w	r1, r1, #12
 8008210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008216:	430b      	orrs	r3, r1
 8008218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800821a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008226:	6999      	ldr	r1, [r3, #24]
 8008228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	ea40 0301 	orr.w	r3, r0, r1
 8008230:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8008232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b6a      	ldr	r3, [pc, #424]	; (80083e0 <UART_SetConfig+0x218>)
 8008238:	429a      	cmp	r2, r3
 800823a:	d00e      	beq.n	800825a <UART_SetConfig+0x92>
 800823c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	4b68      	ldr	r3, [pc, #416]	; (80083e4 <UART_SetConfig+0x21c>)
 8008242:	429a      	cmp	r2, r3
 8008244:	d009      	beq.n	800825a <UART_SetConfig+0x92>
 8008246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	4b67      	ldr	r3, [pc, #412]	; (80083e8 <UART_SetConfig+0x220>)
 800824c:	429a      	cmp	r2, r3
 800824e:	d004      	beq.n	800825a <UART_SetConfig+0x92>
 8008250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	4b65      	ldr	r3, [pc, #404]	; (80083ec <UART_SetConfig+0x224>)
 8008256:	429a      	cmp	r2, r3
 8008258:	d103      	bne.n	8008262 <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800825a:	f7fe fb8b 	bl	8006974 <HAL_RCC_GetPCLK2Freq>
 800825e:	6778      	str	r0, [r7, #116]	; 0x74
 8008260:	e002      	b.n	8008268 <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008262:	f7fe fb73 	bl	800694c <HAL_RCC_GetPCLK1Freq>
 8008266:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008270:	f040 80c0 	bne.w	80083f4 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008276:	461c      	mov	r4, r3
 8008278:	f04f 0500 	mov.w	r5, #0
 800827c:	4622      	mov	r2, r4
 800827e:	462b      	mov	r3, r5
 8008280:	1891      	adds	r1, r2, r2
 8008282:	6439      	str	r1, [r7, #64]	; 0x40
 8008284:	415b      	adcs	r3, r3
 8008286:	647b      	str	r3, [r7, #68]	; 0x44
 8008288:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800828c:	1912      	adds	r2, r2, r4
 800828e:	eb45 0303 	adc.w	r3, r5, r3
 8008292:	f04f 0000 	mov.w	r0, #0
 8008296:	f04f 0100 	mov.w	r1, #0
 800829a:	00d9      	lsls	r1, r3, #3
 800829c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082a0:	00d0      	lsls	r0, r2, #3
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	1911      	adds	r1, r2, r4
 80082a8:	6639      	str	r1, [r7, #96]	; 0x60
 80082aa:	416b      	adcs	r3, r5
 80082ac:	667b      	str	r3, [r7, #100]	; 0x64
 80082ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	461a      	mov	r2, r3
 80082b4:	f04f 0300 	mov.w	r3, #0
 80082b8:	1891      	adds	r1, r2, r2
 80082ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80082bc:	415b      	adcs	r3, r3
 80082be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80082c8:	f7f8 fcda 	bl	8000c80 <__aeabi_uldivmod>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4b47      	ldr	r3, [pc, #284]	; (80083f0 <UART_SetConfig+0x228>)
 80082d2:	fba3 2302 	umull	r2, r3, r3, r2
 80082d6:	095b      	lsrs	r3, r3, #5
 80082d8:	011e      	lsls	r6, r3, #4
 80082da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082dc:	461c      	mov	r4, r3
 80082de:	f04f 0500 	mov.w	r5, #0
 80082e2:	4622      	mov	r2, r4
 80082e4:	462b      	mov	r3, r5
 80082e6:	1891      	adds	r1, r2, r2
 80082e8:	6339      	str	r1, [r7, #48]	; 0x30
 80082ea:	415b      	adcs	r3, r3
 80082ec:	637b      	str	r3, [r7, #52]	; 0x34
 80082ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80082f2:	1912      	adds	r2, r2, r4
 80082f4:	eb45 0303 	adc.w	r3, r5, r3
 80082f8:	f04f 0000 	mov.w	r0, #0
 80082fc:	f04f 0100 	mov.w	r1, #0
 8008300:	00d9      	lsls	r1, r3, #3
 8008302:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008306:	00d0      	lsls	r0, r2, #3
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	1911      	adds	r1, r2, r4
 800830e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008310:	416b      	adcs	r3, r5
 8008312:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	461a      	mov	r2, r3
 800831a:	f04f 0300 	mov.w	r3, #0
 800831e:	1891      	adds	r1, r2, r2
 8008320:	62b9      	str	r1, [r7, #40]	; 0x28
 8008322:	415b      	adcs	r3, r3
 8008324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008326:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800832a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800832e:	f7f8 fca7 	bl	8000c80 <__aeabi_uldivmod>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4b2e      	ldr	r3, [pc, #184]	; (80083f0 <UART_SetConfig+0x228>)
 8008338:	fba3 1302 	umull	r1, r3, r3, r2
 800833c:	095b      	lsrs	r3, r3, #5
 800833e:	2164      	movs	r1, #100	; 0x64
 8008340:	fb01 f303 	mul.w	r3, r1, r3
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	3332      	adds	r3, #50	; 0x32
 800834a:	4a29      	ldr	r2, [pc, #164]	; (80083f0 <UART_SetConfig+0x228>)
 800834c:	fba2 2303 	umull	r2, r3, r2, r3
 8008350:	095b      	lsrs	r3, r3, #5
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008358:	441e      	add	r6, r3
 800835a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800835c:	4618      	mov	r0, r3
 800835e:	f04f 0100 	mov.w	r1, #0
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	1894      	adds	r4, r2, r2
 8008368:	623c      	str	r4, [r7, #32]
 800836a:	415b      	adcs	r3, r3
 800836c:	627b      	str	r3, [r7, #36]	; 0x24
 800836e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008372:	1812      	adds	r2, r2, r0
 8008374:	eb41 0303 	adc.w	r3, r1, r3
 8008378:	f04f 0400 	mov.w	r4, #0
 800837c:	f04f 0500 	mov.w	r5, #0
 8008380:	00dd      	lsls	r5, r3, #3
 8008382:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008386:	00d4      	lsls	r4, r2, #3
 8008388:	4622      	mov	r2, r4
 800838a:	462b      	mov	r3, r5
 800838c:	1814      	adds	r4, r2, r0
 800838e:	653c      	str	r4, [r7, #80]	; 0x50
 8008390:	414b      	adcs	r3, r1
 8008392:	657b      	str	r3, [r7, #84]	; 0x54
 8008394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	461a      	mov	r2, r3
 800839a:	f04f 0300 	mov.w	r3, #0
 800839e:	1891      	adds	r1, r2, r2
 80083a0:	61b9      	str	r1, [r7, #24]
 80083a2:	415b      	adcs	r3, r3
 80083a4:	61fb      	str	r3, [r7, #28]
 80083a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80083ae:	f7f8 fc67 	bl	8000c80 <__aeabi_uldivmod>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	4b0e      	ldr	r3, [pc, #56]	; (80083f0 <UART_SetConfig+0x228>)
 80083b8:	fba3 1302 	umull	r1, r3, r3, r2
 80083bc:	095b      	lsrs	r3, r3, #5
 80083be:	2164      	movs	r1, #100	; 0x64
 80083c0:	fb01 f303 	mul.w	r3, r1, r3
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	3332      	adds	r3, #50	; 0x32
 80083ca:	4a09      	ldr	r2, [pc, #36]	; (80083f0 <UART_SetConfig+0x228>)
 80083cc:	fba2 2303 	umull	r2, r3, r2, r3
 80083d0:	095b      	lsrs	r3, r3, #5
 80083d2:	f003 0207 	and.w	r2, r3, #7
 80083d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4432      	add	r2, r6
 80083dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083de:	e0c3      	b.n	8008568 <UART_SetConfig+0x3a0>
 80083e0:	40011000 	.word	0x40011000
 80083e4:	40011400 	.word	0x40011400
 80083e8:	40011800 	.word	0x40011800
 80083ec:	40011c00 	.word	0x40011c00
 80083f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083f6:	461c      	mov	r4, r3
 80083f8:	f04f 0500 	mov.w	r5, #0
 80083fc:	4622      	mov	r2, r4
 80083fe:	462b      	mov	r3, r5
 8008400:	1891      	adds	r1, r2, r2
 8008402:	6139      	str	r1, [r7, #16]
 8008404:	415b      	adcs	r3, r3
 8008406:	617b      	str	r3, [r7, #20]
 8008408:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800840c:	1912      	adds	r2, r2, r4
 800840e:	eb45 0303 	adc.w	r3, r5, r3
 8008412:	f04f 0000 	mov.w	r0, #0
 8008416:	f04f 0100 	mov.w	r1, #0
 800841a:	00d9      	lsls	r1, r3, #3
 800841c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008420:	00d0      	lsls	r0, r2, #3
 8008422:	4602      	mov	r2, r0
 8008424:	460b      	mov	r3, r1
 8008426:	eb12 0804 	adds.w	r8, r2, r4
 800842a:	eb43 0905 	adc.w	r9, r3, r5
 800842e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	4618      	mov	r0, r3
 8008434:	f04f 0100 	mov.w	r1, #0
 8008438:	f04f 0200 	mov.w	r2, #0
 800843c:	f04f 0300 	mov.w	r3, #0
 8008440:	008b      	lsls	r3, r1, #2
 8008442:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008446:	0082      	lsls	r2, r0, #2
 8008448:	4640      	mov	r0, r8
 800844a:	4649      	mov	r1, r9
 800844c:	f7f8 fc18 	bl	8000c80 <__aeabi_uldivmod>
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	4b47      	ldr	r3, [pc, #284]	; (8008574 <UART_SetConfig+0x3ac>)
 8008456:	fba3 2302 	umull	r2, r3, r3, r2
 800845a:	095b      	lsrs	r3, r3, #5
 800845c:	011e      	lsls	r6, r3, #4
 800845e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008460:	4618      	mov	r0, r3
 8008462:	f04f 0100 	mov.w	r1, #0
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	1894      	adds	r4, r2, r2
 800846c:	60bc      	str	r4, [r7, #8]
 800846e:	415b      	adcs	r3, r3
 8008470:	60fb      	str	r3, [r7, #12]
 8008472:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008476:	1812      	adds	r2, r2, r0
 8008478:	eb41 0303 	adc.w	r3, r1, r3
 800847c:	f04f 0400 	mov.w	r4, #0
 8008480:	f04f 0500 	mov.w	r5, #0
 8008484:	00dd      	lsls	r5, r3, #3
 8008486:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800848a:	00d4      	lsls	r4, r2, #3
 800848c:	4622      	mov	r2, r4
 800848e:	462b      	mov	r3, r5
 8008490:	1814      	adds	r4, r2, r0
 8008492:	64bc      	str	r4, [r7, #72]	; 0x48
 8008494:	414b      	adcs	r3, r1
 8008496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	4618      	mov	r0, r3
 800849e:	f04f 0100 	mov.w	r1, #0
 80084a2:	f04f 0200 	mov.w	r2, #0
 80084a6:	f04f 0300 	mov.w	r3, #0
 80084aa:	008b      	lsls	r3, r1, #2
 80084ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80084b0:	0082      	lsls	r2, r0, #2
 80084b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80084b6:	f7f8 fbe3 	bl	8000c80 <__aeabi_uldivmod>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4b2d      	ldr	r3, [pc, #180]	; (8008574 <UART_SetConfig+0x3ac>)
 80084c0:	fba3 1302 	umull	r1, r3, r3, r2
 80084c4:	095b      	lsrs	r3, r3, #5
 80084c6:	2164      	movs	r1, #100	; 0x64
 80084c8:	fb01 f303 	mul.w	r3, r1, r3
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	011b      	lsls	r3, r3, #4
 80084d0:	3332      	adds	r3, #50	; 0x32
 80084d2:	4a28      	ldr	r2, [pc, #160]	; (8008574 <UART_SetConfig+0x3ac>)
 80084d4:	fba2 2303 	umull	r2, r3, r2, r3
 80084d8:	095b      	lsrs	r3, r3, #5
 80084da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084de:	441e      	add	r6, r3
 80084e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084e2:	4618      	mov	r0, r3
 80084e4:	f04f 0100 	mov.w	r1, #0
 80084e8:	4602      	mov	r2, r0
 80084ea:	460b      	mov	r3, r1
 80084ec:	1894      	adds	r4, r2, r2
 80084ee:	603c      	str	r4, [r7, #0]
 80084f0:	415b      	adcs	r3, r3
 80084f2:	607b      	str	r3, [r7, #4]
 80084f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084f8:	1812      	adds	r2, r2, r0
 80084fa:	eb41 0303 	adc.w	r3, r1, r3
 80084fe:	f04f 0400 	mov.w	r4, #0
 8008502:	f04f 0500 	mov.w	r5, #0
 8008506:	00dd      	lsls	r5, r3, #3
 8008508:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800850c:	00d4      	lsls	r4, r2, #3
 800850e:	4622      	mov	r2, r4
 8008510:	462b      	mov	r3, r5
 8008512:	eb12 0a00 	adds.w	sl, r2, r0
 8008516:	eb43 0b01 	adc.w	fp, r3, r1
 800851a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	4618      	mov	r0, r3
 8008520:	f04f 0100 	mov.w	r1, #0
 8008524:	f04f 0200 	mov.w	r2, #0
 8008528:	f04f 0300 	mov.w	r3, #0
 800852c:	008b      	lsls	r3, r1, #2
 800852e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008532:	0082      	lsls	r2, r0, #2
 8008534:	4650      	mov	r0, sl
 8008536:	4659      	mov	r1, fp
 8008538:	f7f8 fba2 	bl	8000c80 <__aeabi_uldivmod>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	4b0c      	ldr	r3, [pc, #48]	; (8008574 <UART_SetConfig+0x3ac>)
 8008542:	fba3 1302 	umull	r1, r3, r3, r2
 8008546:	095b      	lsrs	r3, r3, #5
 8008548:	2164      	movs	r1, #100	; 0x64
 800854a:	fb01 f303 	mul.w	r3, r1, r3
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	011b      	lsls	r3, r3, #4
 8008552:	3332      	adds	r3, #50	; 0x32
 8008554:	4a07      	ldr	r2, [pc, #28]	; (8008574 <UART_SetConfig+0x3ac>)
 8008556:	fba2 2303 	umull	r2, r3, r2, r3
 800855a:	095b      	lsrs	r3, r3, #5
 800855c:	f003 020f 	and.w	r2, r3, #15
 8008560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4432      	add	r2, r6
 8008566:	609a      	str	r2, [r3, #8]
}
 8008568:	bf00      	nop
 800856a:	377c      	adds	r7, #124	; 0x7c
 800856c:	46bd      	mov	sp, r7
 800856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008572:	bf00      	nop
 8008574:	51eb851f 	.word	0x51eb851f

08008578 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008582:	2300      	movs	r3, #0
 8008584:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008590:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	4b2f      	ldr	r3, [pc, #188]	; (8008654 <FSMC_NORSRAM_Init+0xdc>)
 8008596:	4013      	ands	r3, r2
 8008598:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80085a2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80085a8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80085ae:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80085b4:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 80085ba:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80085c0:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80085c6:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80085cc:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80085d2:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 80085d8:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 80085de:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 80085e4:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 80085ea:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	2b08      	cmp	r3, #8
 80085f8:	d103      	bne.n	8008602 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008600:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68f9      	ldr	r1, [r7, #12]
 800860a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008616:	d10a      	bne.n	800862e <FSMC_NORSRAM_Init+0xb6>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d006      	beq.n	800862e <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008628:	431a      	orrs	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d006      	beq.n	8008644 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863e:	431a      	orrs	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	ffc00480 	.word	0xffc00480

08008658 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008658:	b480      	push	{r7}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008672:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800867a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008686:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800868e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008696:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	3b01      	subs	r3, #1
 800869e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80086a0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	3b02      	subs	r3, #2
 80086a8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80086aa:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80086b0:	4313      	orrs	r3, r2
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6979      	ldr	r1, [r7, #20]
 80086c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086d0:	d10e      	bne.n	80086f0 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086da:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	051b      	lsls	r3, r3, #20
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
	...

08008700 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
 800870c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008718:	d122      	bne.n	8008760 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008722:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	4b15      	ldr	r3, [pc, #84]	; (800877c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008728:	4013      	ands	r3, r2
 800872a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008736:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800873e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008746:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800874c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	4313      	orrs	r3, r2
 8008752:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	6979      	ldr	r1, [r7, #20]
 800875a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800875e:	e005      	b.n	800876c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	371c      	adds	r7, #28
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	cff00000 	.word	0xcff00000

08008780 <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	3301      	adds	r3, #1
 800878c:	009b      	lsls	r3, r3, #2
}
 800878e:	4618      	mov	r0, r3
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
	...

0800879c <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4603      	mov	r3, r0
 80087a4:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	2b10      	cmp	r3, #16
 80087aa:	d847      	bhi.n	800883c <TfLiteTypeGetName+0xa0>
 80087ac:	a201      	add	r2, pc, #4	; (adr r2, 80087b4 <TfLiteTypeGetName+0x18>)
 80087ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b2:	bf00      	nop
 80087b4:	080087f9 	.word	0x080087f9
 80087b8:	080087fd 	.word	0x080087fd
 80087bc:	08008805 	.word	0x08008805
 80087c0:	0800880d 	.word	0x0800880d
 80087c4:	08008815 	.word	0x08008815
 80087c8:	08008829 	.word	0x08008829
 80087cc:	0800881d 	.word	0x0800881d
 80087d0:	08008801 	.word	0x08008801
 80087d4:	08008821 	.word	0x08008821
 80087d8:	08008811 	.word	0x08008811
 80087dc:	0800882d 	.word	0x0800882d
 80087e0:	08008831 	.word	0x08008831
 80087e4:	08008825 	.word	0x08008825
 80087e8:	08008819 	.word	0x08008819
 80087ec:	08008835 	.word	0x08008835
 80087f0:	08008839 	.word	0x08008839
 80087f4:	08008809 	.word	0x08008809
    case kTfLiteNoType:
      return "NOTYPE";
 80087f8:	4b14      	ldr	r3, [pc, #80]	; (800884c <TfLiteTypeGetName+0xb0>)
 80087fa:	e020      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 80087fc:	4b14      	ldr	r3, [pc, #80]	; (8008850 <TfLiteTypeGetName+0xb4>)
 80087fe:	e01e      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 8008800:	4b14      	ldr	r3, [pc, #80]	; (8008854 <TfLiteTypeGetName+0xb8>)
 8008802:	e01c      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 8008804:	4b14      	ldr	r3, [pc, #80]	; (8008858 <TfLiteTypeGetName+0xbc>)
 8008806:	e01a      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 8008808:	4b14      	ldr	r3, [pc, #80]	; (800885c <TfLiteTypeGetName+0xc0>)
 800880a:	e018      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 800880c:	4b14      	ldr	r3, [pc, #80]	; (8008860 <TfLiteTypeGetName+0xc4>)
 800880e:	e016      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 8008810:	4b14      	ldr	r3, [pc, #80]	; (8008864 <TfLiteTypeGetName+0xc8>)
 8008812:	e014      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 8008814:	4b14      	ldr	r3, [pc, #80]	; (8008868 <TfLiteTypeGetName+0xcc>)
 8008816:	e012      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 8008818:	4b14      	ldr	r3, [pc, #80]	; (800886c <TfLiteTypeGetName+0xd0>)
 800881a:	e010      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 800881c:	4b14      	ldr	r3, [pc, #80]	; (8008870 <TfLiteTypeGetName+0xd4>)
 800881e:	e00e      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8008820:	4b14      	ldr	r3, [pc, #80]	; (8008874 <TfLiteTypeGetName+0xd8>)
 8008822:	e00c      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8008824:	4b14      	ldr	r3, [pc, #80]	; (8008878 <TfLiteTypeGetName+0xdc>)
 8008826:	e00a      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 8008828:	4b14      	ldr	r3, [pc, #80]	; (800887c <TfLiteTypeGetName+0xe0>)
 800882a:	e008      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 800882c:	4b14      	ldr	r3, [pc, #80]	; (8008880 <TfLiteTypeGetName+0xe4>)
 800882e:	e006      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8008830:	4b14      	ldr	r3, [pc, #80]	; (8008884 <TfLiteTypeGetName+0xe8>)
 8008832:	e004      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 8008834:	4b14      	ldr	r3, [pc, #80]	; (8008888 <TfLiteTypeGetName+0xec>)
 8008836:	e002      	b.n	800883e <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 8008838:	4b14      	ldr	r3, [pc, #80]	; (800888c <TfLiteTypeGetName+0xf0>)
 800883a:	e000      	b.n	800883e <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 800883c:	4b14      	ldr	r3, [pc, #80]	; (8008890 <TfLiteTypeGetName+0xf4>)
}
 800883e:	4618      	mov	r0, r3
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	08026760 	.word	0x08026760
 8008850:	08026768 	.word	0x08026768
 8008854:	08026770 	.word	0x08026770
 8008858:	08026778 	.word	0x08026778
 800885c:	08026780 	.word	0x08026780
 8008860:	08026788 	.word	0x08026788
 8008864:	08026790 	.word	0x08026790
 8008868:	08026798 	.word	0x08026798
 800886c:	080267a0 	.word	0x080267a0
 8008870:	080267a8 	.word	0x080267a8
 8008874:	080267b0 	.word	0x080267b0
 8008878:	080267bc 	.word	0x080267bc
 800887c:	080267c8 	.word	0x080267c8
 8008880:	080267d0 	.word	0x080267d0
 8008884:	080267d8 	.word	0x080267d8
 8008888:	080267e0 	.word	0x080267e0
 800888c:	080267ec 	.word	0x080267ec
 8008890:	080267f4 	.word	0x080267f4

08008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8008894:	b40e      	push	{r1, r2, r3}
 8008896:	b580      	push	{r7, lr}
 8008898:	b085      	sub	sp, #20
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 800889e:	f107 0320 	add.w	r3, r7, #32
 80088a2:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3308      	adds	r3, #8
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	69f9      	ldr	r1, [r7, #28]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	4798      	blx	r3
 80088b4:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 80088b6:	68fb      	ldr	r3, [r7, #12]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088c2:	b003      	add	sp, #12
 80088c4:	4770      	bx	lr

080088c6 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 80088c6:	b40c      	push	{r2, r3}
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 80088d2:	f107 031c 	add.w	r3, r7, #28
 80088d6:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3308      	adds	r3, #8
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	69b9      	ldr	r1, [r7, #24]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	4798      	blx	r3
 80088e8:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 80088ea:	68fb      	ldr	r3, [r7, #12]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088f6:	b002      	add	sp, #8
 80088f8:	4770      	bx	lr

080088fa <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80088fa:	b480      	push	{r7}
 80088fc:	b083      	sub	sp, #12
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	6039      	str	r1, [r7, #0]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	4618      	mov	r0, r3
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 8008912:	b590      	push	{r4, r7, lr}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 800891a:	687c      	ldr	r4, [r7, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fe3f 	bl	80095a2 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8008924:	4603      	mov	r3, r0
 8008926:	425b      	negs	r3, r3
 8008928:	4423      	add	r3, r4
  }
 800892a:	4618      	mov	r0, r3
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	bd90      	pop	{r4, r7, pc}

08008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	460b      	mov	r3, r1
 800893c:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7ff ffe7 	bl	8008912 <_ZNK11flatbuffers5Table9GetVTableEv>
 8008944:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 fe0f 	bl	800956a <_ZN11flatbuffers10ReadScalarItEET_PKv>
 800894c:	4603      	mov	r3, r0
 800894e:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008950:	887a      	ldrh	r2, [r7, #2]
 8008952:	897b      	ldrh	r3, [r7, #10]
 8008954:	429a      	cmp	r2, r3
 8008956:	d207      	bcs.n	8008968 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 8008958:	887b      	ldrh	r3, [r7, #2]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4413      	add	r3, r2
 800895e:	4618      	mov	r0, r3
 8008960:	f000 fe03 	bl	800956a <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8008964:	4603      	mov	r3, r0
 8008966:	e000      	b.n	800896a <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 8008968:	2300      	movs	r3, #0
  }
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <_ZNK6tflite13Conv2DOptions7paddingEv>:
    VT_STRIDE_H = 8,
    VT_FUSED_ACTIVATION_FUNCTION = 10,
    VT_DILATION_W_FACTOR = 12,
    VT_DILATION_H_FACTOR = 14
  };
  tflite::Padding padding() const {
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	2104      	movs	r1, #4
 8008980:	4618      	mov	r0, r3
 8008982:	f000 fe87 	bl	8009694 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008986:	4603      	mov	r3, r0
 8008988:	b2db      	uxtb	r3, r3
  }
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <_ZNK6tflite13Conv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8008992:	b580      	push	{r7, lr}
 8008994:	b082      	sub	sp, #8
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	2106      	movs	r1, #6
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 fe49 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80089a6:	4603      	mov	r3, r0
  }
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <_ZNK6tflite13Conv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	2108      	movs	r1, #8
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fe3a 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80089c4:	4603      	mov	r3, r0
  }
 80089c6:	4618      	mov	r0, r3
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b082      	sub	sp, #8
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	210a      	movs	r1, #10
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 fe59 	bl	8009694 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80089e2:	4603      	mov	r3, r0
 80089e4:	b2db      	uxtb	r3, r3
  }
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	210c      	movs	r1, #12
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 fe1b 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008a02:	4603      	mov	r3, r0
  }
 8008a04:	4618      	mov	r0, r3
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	210e      	movs	r1, #14
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 fe0c 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008a20:	4603      	mov	r3, r0
  }
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <_ZNK6tflite13Pool2DOptions7paddingEv>:
    VT_STRIDE_H = 8,
    VT_FILTER_WIDTH = 10,
    VT_FILTER_HEIGHT = 12,
    VT_FUSED_ACTIVATION_FUNCTION = 14
  };
  tflite::Padding padding() const {
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	2104      	movs	r1, #4
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 fe2b 	bl	8009694 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	b2db      	uxtb	r3, r3
  }
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <_ZNK6tflite13Pool2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	2106      	movs	r1, #6
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fded 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008a5e:	4603      	mov	r3, r0
  }
 8008a60:	4618      	mov	r0, r3
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <_ZNK6tflite13Pool2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	2108      	movs	r1, #8
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 fdde 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008a7c:	4603      	mov	r3, r0
  }
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <_ZNK6tflite13Pool2DOptions12filter_widthEv>:
  int32_t filter_width() const {
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	210a      	movs	r1, #10
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 fdcf 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008a9a:	4603      	mov	r3, r0
  }
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <_ZNK6tflite13Pool2DOptions13filter_heightEv>:
  int32_t filter_height() const {
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	210c      	movs	r1, #12
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 fdc0 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008ab8:	4603      	mov	r3, r0
  }
 8008aba:	4618      	mov	r0, r3
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	210e      	movs	r1, #14
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 fddf 	bl	8009694 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	b2db      	uxtb	r3, r3
  }
 8008ada:	4618      	mov	r0, r3
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>:
    VT_DEPTH_MULTIPLIER = 10,
    VT_FUSED_ACTIVATION_FUNCTION = 12,
    VT_DILATION_W_FACTOR = 14,
    VT_DILATION_H_FACTOR = 16
  };
  tflite::Padding padding() const {
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b082      	sub	sp, #8
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	2104      	movs	r1, #4
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 fdcf 	bl	8009694 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008af6:	4603      	mov	r3, r0
 8008af8:	b2db      	uxtb	r3, r3
  }
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	2106      	movs	r1, #6
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fd91 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008b16:	4603      	mov	r3, r0
  }
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2108      	movs	r1, #8
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fd82 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008b34:	4603      	mov	r3, r0
  }
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>:
  int32_t depth_multiplier() const {
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b082      	sub	sp, #8
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	210a      	movs	r1, #10
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 fd73 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008b52:	4603      	mov	r3, r0
  }
 8008b54:	4618      	mov	r0, r3
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	210c      	movs	r1, #12
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fd92 	bl	8009694 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008b70:	4603      	mov	r3, r0
 8008b72:	b2db      	uxtb	r3, r3
  }
 8008b74:	4618      	mov	r0, r3
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	210e      	movs	r1, #14
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fd54 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008b90:	4603      	mov	r3, r0
  }
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	2110      	movs	r1, #16
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 fd45 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008bae:	4603      	mov	r3, r0
  }
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <_ZNK6tflite14SoftmaxOptions4betaEv>:
struct SoftmaxOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SoftmaxOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BETA = 4
  };
  float beta() const {
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8008bdc <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 8008bc6:	2104      	movs	r1, #4
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 fd83 	bl	80096d4 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8008bce:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	00000000 	.word	0x00000000

08008be0 <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
struct ReshapeOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReshapeOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NEW_SHAPE = 4
  };
  const flatbuffers::Vector<int32_t> *new_shape() const {
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2104      	movs	r1, #4
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 fd41 	bl	8009674 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8008bf2:	4603      	mov	r3, r0
  }
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <_ZNK6tflite8Operator20builtin_options_typeEv>:
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  tflite::BuiltinOptions builtin_options_type() const {
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	210a      	movs	r1, #10
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fce5 	bl	80095da <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8008c10:	4603      	mov	r3, r0
  }
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	210c      	movs	r1, #12
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fcf6 	bl	8009618 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 8008c2c:	4603      	mov	r3, r0
  }
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>:
  template<typename T> const T *builtin_options_as() const;
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b082      	sub	sp, #8
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff ffdc 	bl	8008bfc <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d104      	bne.n	8008c54 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x1e>
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff ffe5 	bl	8008c1a <_ZNK6tflite8Operator15builtin_optionsEv>
 8008c50:	4603      	mov	r3, r0
 8008c52:	e000      	b.n	8008c56 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x20>
 8008c54:	2300      	movs	r3, #0
  }
 8008c56:	4618      	mov	r0, r3
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>:
  const tflite::DepthwiseConv2DOptions *builtin_options_as_DepthwiseConv2DOptions() const {
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff ffc8 	bl	8008bfc <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d104      	bne.n	8008c7c <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x1e>
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7ff ffd1 	bl	8008c1a <_ZNK6tflite8Operator15builtin_optionsEv>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	e000      	b.n	8008c7e <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x20>
 8008c7c:	2300      	movs	r3, #0
  }
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_ConcatEmbeddingsOptions ? static_cast<const tflite::ConcatEmbeddingsOptions *>(builtin_options()) : nullptr;
  }
  const tflite::LSHProjectionOptions *builtin_options_as_LSHProjectionOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_LSHProjectionOptions ? static_cast<const tflite::LSHProjectionOptions *>(builtin_options()) : nullptr;
  }
  const tflite::Pool2DOptions *builtin_options_as_Pool2DOptions() const {
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b082      	sub	sp, #8
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f7ff ffb4 	bl	8008bfc <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b05      	cmp	r3, #5
 8008c98:	d104      	bne.n	8008ca4 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x1e>
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7ff ffbd 	bl	8008c1a <_ZNK6tflite8Operator15builtin_optionsEv>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	e000      	b.n	8008ca6 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x20>
 8008ca4:	2300      	movs	r3, #0
  }
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
  }
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
  }
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7ff ffa0 	bl	8008bfc <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b09      	cmp	r3, #9
 8008cc0:	d104      	bne.n	8008ccc <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff ffa9 	bl	8008c1a <_ZNK6tflite8Operator15builtin_optionsEv>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	e000      	b.n	8008cce <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 8008ccc:	2300      	movs	r3, #0
  }
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_ResizeBilinearOptions ? static_cast<const tflite::ResizeBilinearOptions *>(builtin_options()) : nullptr;
  }
  const tflite::CallOptions *builtin_options_as_CallOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_CallOptions ? static_cast<const tflite::CallOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b082      	sub	sp, #8
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7ff ff8c 	bl	8008bfc <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b11      	cmp	r3, #17
 8008ce8:	d104      	bne.n	8008cf4 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff ff95 	bl	8008c1a <_ZNK6tflite8Operator15builtin_optionsEv>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	e000      	b.n	8008cf6 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 8008cf4:	2300      	movs	r3, #0
  }
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	601a      	str	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4618      	mov	r0, r3
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3304      	adds	r3, #4
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	4610      	mov	r0, r2
 8008d38:	4798      	blx	r3
 8008d3a:	bf00      	nop
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 8008d42:	b480      	push	{r7}
 8008d44:	b083      	sub	sp, #12
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4618      	mov	r0, r3
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
 8008d6c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 8008d74:	f01c fa7b 	bl	802526e <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8008d7e:	f01c fa76 	bl	802526e <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8008d88:	f01c fa71 	bl	802526e <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8008d92:	f01c fa6c 	bl	802526e <abort>
}
 8008d96:	bf00      	nop
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
 8008da0:	b590      	push	{r4, r7, lr}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d106      	bne.n	8008dc2 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 8008db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008db6:	4917      	ldr	r1, [pc, #92]	; (8008e14 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
 8008db8:	6838      	ldr	r0, [r7, #0]
 8008dba:	f7ff fd6b 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input array not provided for operation '%s'.\n",
                         op_name);
    return kTfLiteError;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e024      	b.n	8008e0c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
  } else {
    size_t num_dimensions = flat_vector->size();
 8008dc2:	68b8      	ldr	r0, [r7, #8]
 8008dc4:	f000 fca8 	bl	8009718 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008dc8:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	089b      	lsrs	r3, r3, #2
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d906      	bls.n	8008de2 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 8008dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dd6:	4910      	ldr	r1, [pc, #64]	; (8008e18 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x78>)
 8008dd8:	6838      	ldr	r0, [r7, #0]
 8008dda:	f7ff fd5b 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e014      	b.n	8008e0c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
    } else {
      for (size_t i = 0; i < num_dimensions; ++i) {
 8008de2:	2300      	movs	r3, #0
 8008de4:	617b      	str	r3, [r7, #20]
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d20d      	bcs.n	8008e0a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6a>
        buffer[i] = flat_vector->Get(i);
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	18d4      	adds	r4, r2, r3
 8008df6:	6979      	ldr	r1, [r7, #20]
 8008df8:	68b8      	ldr	r0, [r7, #8]
 8008dfa:	f000 fc9b 	bl	8009734 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	3301      	adds	r3, #1
 8008e06:	617b      	str	r3, [r7, #20]
 8008e08:	e7ed      	b.n	8008de6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x46>
      }
    }
  }
  return kTfLiteOk;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	371c      	adds	r7, #28
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd90      	pop	{r4, r7, pc}
 8008e14:	08026818 	.word	0x08026818
 8008e18:	08026848 	.word	0x08026848

08008e1c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 8008e26:	79fb      	ldrb	r3, [r7, #7]
 8008e28:	2b05      	cmp	r3, #5
 8008e2a:	d81b      	bhi.n	8008e64 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8008e2c:	a201      	add	r2, pc, #4	; (adr r2, 8008e34 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 8008e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e32:	bf00      	nop
 8008e34:	08008e4d 	.word	0x08008e4d
 8008e38:	08008e51 	.word	0x08008e51
 8008e3c:	08008e55 	.word	0x08008e55
 8008e40:	08008e59 	.word	0x08008e59
 8008e44:	08008e5d 	.word	0x08008e5d
 8008e48:	08008e61 	.word	0x08008e61
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	e00a      	b.n	8008e66 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e008      	b.n	8008e66 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 8008e54:	2302      	movs	r3, #2
 8008e56:	e006      	b.n	8008e66 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e004      	b.n	8008e66 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8008e5c:	2304      	movs	r3, #4
 8008e5e:	e002      	b.n	8008e66 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 8008e60:	2305      	movs	r3, #5
 8008e62:	e000      	b.n	8008e66 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop

08008e74 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 8008e7e:	79fb      	ldrb	r3, [r7, #7]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x16>
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d002      	beq.n	8008e8e <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1a>
 8008e88:	e003      	b.n	8008e92 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1e>
    case Padding_SAME:
      return kTfLitePaddingSame;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e002      	b.n	8008e94 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
    case Padding_VALID:
      return kTfLitePaddingValid;
 8008e8e:	2302      	movs	r3, #2
 8008e90:	e000      	b.n	8008e94 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
  }
  return kTfLitePaddingUnknown;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
 8008eb0:	2b0f      	cmp	r3, #15
 8008eb2:	d873      	bhi.n	8008f9c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xfc>
 8008eb4:	a201      	add	r2, pc, #4	; (adr r2, 8008ebc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 8008eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eba:	bf00      	nop
 8008ebc:	08008f07 	.word	0x08008f07
 8008ec0:	08008efd 	.word	0x08008efd
 8008ec4:	08008f25 	.word	0x08008f25
 8008ec8:	08008f39 	.word	0x08008f39
 8008ecc:	08008f4d 	.word	0x08008f4d
 8008ed0:	08008f61 	.word	0x08008f61
 8008ed4:	08008f6b 	.word	0x08008f6b
 8008ed8:	08008f1b 	.word	0x08008f1b
 8008edc:	08008f75 	.word	0x08008f75
 8008ee0:	08008f43 	.word	0x08008f43
 8008ee4:	08008f11 	.word	0x08008f11
 8008ee8:	08008f7f 	.word	0x08008f7f
 8008eec:	08008f57 	.word	0x08008f57
 8008ef0:	08008f89 	.word	0x08008f89
 8008ef4:	08008f93 	.word	0x08008f93
 8008ef8:	08008f2f 	.word	0x08008f2f
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	220a      	movs	r2, #10
 8008f00:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f02:	2300      	movs	r3, #0
 8008f04:	e054      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e04f      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	220b      	movs	r2, #11
 8008f14:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f16:	2300      	movs	r3, #0
 8008f18:	e04a      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	2207      	movs	r2, #7
 8008f1e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f20:	2300      	movs	r3, #0
 8008f22:	e045      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2202      	movs	r2, #2
 8008f28:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e040      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT32:
      *type = kTfLiteUInt32;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2210      	movs	r2, #16
 8008f32:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f34:	2300      	movs	r3, #0
 8008f36:	e03b      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	2203      	movs	r2, #3
 8008f3c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	e036      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2209      	movs	r2, #9
 8008f46:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e031      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	2204      	movs	r2, #4
 8008f50:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f52:	2300      	movs	r3, #0
 8008f54:	e02c      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	220d      	movs	r2, #13
 8008f5a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	e027      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_STRING:
      *type = kTfLiteString;
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2205      	movs	r2, #5
 8008f64:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f66:	2300      	movs	r3, #0
 8008f68:	e022      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2206      	movs	r2, #6
 8008f6e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f70:	2300      	movs	r3, #0
 8008f72:	e01d      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	2208      	movs	r2, #8
 8008f78:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e018      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	220c      	movs	r2, #12
 8008f82:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f84:	2300      	movs	r3, #0
 8008f86:	e013      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_RESOURCE:
      *type = kTfLiteResource;
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	220e      	movs	r2, #14
 8008f8c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e00e      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	220f      	movs	r2, #15
 8008f96:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e009      	b.n	8008fb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    default:
      *type = kTfLiteNoType;
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	4904      	ldr	r1, [pc, #16]	; (8008fb8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x118>)
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff fc73 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 8008fae:	2301      	movs	r3, #1
  }
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	0802696c 	.word	0x0802696c

08008fbc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  *builtin_data = params.release();
  return kTfLiteOk;
}

TfLiteStatus ParseConv2D(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
 8008fbc:	b5b0      	push	{r4, r5, r7, lr}
 8008fbe:	b08a      	sub	sp, #40	; 0x28
 8008fc0:	af02      	add	r7, sp, #8
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	68b9      	ldr	r1, [r7, #8]
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f7ff fec5 	bl	8008d60 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8008fd6:	f107 0318 	add.w	r3, r7, #24
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7ff feb0 	bl	8008d42 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteConvParams>();
 8008fe2:	f107 0310 	add.w	r3, r7, #16
 8008fe6:	f107 0218 	add.w	r2, r7, #24
 8008fea:	4611      	mov	r1, r2
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 fbc7 	bl	8009780 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008ff2:	f107 0310 	add.w	r3, r7, #16
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 fc01 	bl	8009800 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008ffe:	4603      	mov	r3, r0
 8009000:	f083 0301 	eor.w	r3, r3, #1
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00c      	beq.n	8009024 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800900a:	4b39      	ldr	r3, [pc, #228]	; (80090f0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 800900c:	9301      	str	r3, [sp, #4]
 800900e:	f240 433b 	movw	r3, #1083	; 0x43b
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	4b37      	ldr	r3, [pc, #220]	; (80090f4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8009016:	4a38      	ldr	r2, [pc, #224]	; (80090f8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 8009018:	68b9      	ldr	r1, [r7, #8]
 800901a:	68b8      	ldr	r0, [r7, #8]
 800901c:	f7ff fc53 	bl	80088c6 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8009020:	2401      	movs	r4, #1
 8009022:	e05b      	b.n	80090dc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Conv2DOptions* schema_params = op->builtin_options_as_Conv2DOptions();
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f7ff fe06 	bl	8008c36 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>
 800902a:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d04b      	beq.n	80090ca <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 8009032:	69f8      	ldr	r0, [r7, #28]
 8009034:	f7ff fc9d 	bl	8008972 <_ZNK6tflite13Conv2DOptions7paddingEv>
 8009038:	4603      	mov	r3, r0
 800903a:	461d      	mov	r5, r3
 800903c:	f107 0310 	add.w	r3, r7, #16
 8009040:	4618      	mov	r0, r3
 8009042:	f000 fbea 	bl	800981a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009046:	4604      	mov	r4, r0
 8009048:	4628      	mov	r0, r5
 800904a:	f7ff ff13 	bl	8008e74 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 800904e:	4603      	mov	r3, r0
 8009050:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 8009052:	f107 0310 	add.w	r3, r7, #16
 8009056:	4618      	mov	r0, r3
 8009058:	f000 fbdf 	bl	800981a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800905c:	4604      	mov	r4, r0
 800905e:	69f8      	ldr	r0, [r7, #28]
 8009060:	f7ff fc97 	bl	8008992 <_ZNK6tflite13Conv2DOptions8stride_wEv>
 8009064:	4603      	mov	r3, r0
 8009066:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 8009068:	f107 0310 	add.w	r3, r7, #16
 800906c:	4618      	mov	r0, r3
 800906e:	f000 fbd4 	bl	800981a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009072:	4604      	mov	r4, r0
 8009074:	69f8      	ldr	r0, [r7, #28]
 8009076:	f7ff fc9b 	bl	80089b0 <_ZNK6tflite13Conv2DOptions8stride_hEv>
 800907a:	4603      	mov	r3, r0
 800907c:	60a3      	str	r3, [r4, #8]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 800907e:	69f8      	ldr	r0, [r7, #28]
 8009080:	f7ff fca5 	bl	80089ce <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>
 8009084:	4603      	mov	r3, r0
 8009086:	461d      	mov	r5, r3
    params->activation =
 8009088:	f107 0310 	add.w	r3, r7, #16
 800908c:	4618      	mov	r0, r3
 800908e:	f000 fbc4 	bl	800981a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009092:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8009094:	4628      	mov	r0, r5
 8009096:	f7ff fec1 	bl	8008e1c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800909a:	4603      	mov	r3, r0
    params->activation =
 800909c:	7323      	strb	r3, [r4, #12]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 800909e:	f107 0310 	add.w	r3, r7, #16
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 fbb9 	bl	800981a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80090a8:	4604      	mov	r4, r0
 80090aa:	69f8      	ldr	r0, [r7, #28]
 80090ac:	f7ff fc9f 	bl	80089ee <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>
 80090b0:	4603      	mov	r3, r0
 80090b2:	6123      	str	r3, [r4, #16]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 80090b4:	f107 0310 	add.w	r3, r7, #16
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 fbae 	bl	800981a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80090be:	4604      	mov	r4, r0
 80090c0:	69f8      	ldr	r0, [r7, #28]
 80090c2:	f7ff fca3 	bl	8008a0c <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>
 80090c6:	4603      	mov	r3, r0
 80090c8:	6163      	str	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80090ca:	f107 0310 	add.w	r3, r7, #16
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 fbaf 	bl	8009832 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80090d4:	4602      	mov	r2, r0
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80090da:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteConvParams>();
 80090dc:	f107 0310 	add.w	r3, r7, #16
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fb6b 	bl	80097bc <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80090e6:	4623      	mov	r3, r4
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3720      	adds	r7, #32
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bdb0      	pop	{r4, r5, r7, pc}
 80090f0:	080268ec 	.word	0x080268ec
 80090f4:	0802688c 	.word	0x0802688c
 80090f8:	080268d4 	.word	0x080268d4

080090fc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseDepthwiseConv2D(const Operator* op,
                                  ErrorReporter* error_reporter,
                                  BuiltinDataAllocator* allocator,
                                  void** builtin_data) {
 80090fc:	b5b0      	push	{r4, r5, r7, lr}
 80090fe:	b08a      	sub	sp, #40	; 0x28
 8009100:	af02      	add	r7, sp, #8
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	68b9      	ldr	r1, [r7, #8]
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f7ff fe25 	bl	8008d60 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8009116:	f107 0318 	add.w	r3, r7, #24
 800911a:	6879      	ldr	r1, [r7, #4]
 800911c:	4618      	mov	r0, r3
 800911e:	f7ff fe10 	bl	8008d42 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteDepthwiseConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 8009122:	f107 0310 	add.w	r3, r7, #16
 8009126:	f107 0218 	add.w	r2, r7, #24
 800912a:	4611      	mov	r1, r2
 800912c:	4618      	mov	r0, r3
 800912e:	f000 fb94 	bl	800985a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8009132:	f107 0310 	add.w	r3, r7, #16
 8009136:	2100      	movs	r1, #0
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fbce 	bl	80098da <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800913e:	4603      	mov	r3, r0
 8009140:	f083 0301 	eor.w	r3, r3, #1
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00c      	beq.n	8009164 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800914a:	4b3f      	ldr	r3, [pc, #252]	; (8009248 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>)
 800914c:	9301      	str	r3, [sp, #4]
 800914e:	f44f 6392 	mov.w	r3, #1168	; 0x490
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	4b3d      	ldr	r3, [pc, #244]	; (800924c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>)
 8009156:	4a3e      	ldr	r2, [pc, #248]	; (8009250 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x154>)
 8009158:	68b9      	ldr	r1, [r7, #8]
 800915a:	68b8      	ldr	r0, [r7, #8]
 800915c:	f7ff fbb3 	bl	80088c6 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8009160:	2401      	movs	r4, #1
 8009162:	e066      	b.n	8009232 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>

  const DepthwiseConv2DOptions* schema_params =
      op->builtin_options_as_DepthwiseConv2DOptions();
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f7ff fd7a 	bl	8008c5e <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>
 800916a:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d056      	beq.n	8009220 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>
    params->padding = ConvertPadding(schema_params->padding());
 8009172:	69f8      	ldr	r0, [r7, #28]
 8009174:	f7ff fcb5 	bl	8008ae2 <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>
 8009178:	4603      	mov	r3, r0
 800917a:	461d      	mov	r5, r3
 800917c:	f107 0310 	add.w	r3, r7, #16
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fbb7 	bl	80098f4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009186:	4604      	mov	r4, r0
 8009188:	4628      	mov	r0, r5
 800918a:	f7ff fe73 	bl	8008e74 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 800918e:	4603      	mov	r3, r0
 8009190:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 8009192:	f107 0310 	add.w	r3, r7, #16
 8009196:	4618      	mov	r0, r3
 8009198:	f000 fbac 	bl	80098f4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800919c:	4604      	mov	r4, r0
 800919e:	69f8      	ldr	r0, [r7, #28]
 80091a0:	f7ff fcaf 	bl	8008b02 <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>
 80091a4:	4603      	mov	r3, r0
 80091a6:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 80091a8:	f107 0310 	add.w	r3, r7, #16
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 fba1 	bl	80098f4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80091b2:	4604      	mov	r4, r0
 80091b4:	69f8      	ldr	r0, [r7, #28]
 80091b6:	f7ff fcb3 	bl	8008b20 <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>
 80091ba:	4603      	mov	r3, r0
 80091bc:	60a3      	str	r3, [r4, #8]
    params->depth_multiplier = schema_params->depth_multiplier();
 80091be:	f107 0310 	add.w	r3, r7, #16
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 fb96 	bl	80098f4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80091c8:	4604      	mov	r4, r0
 80091ca:	69f8      	ldr	r0, [r7, #28]
 80091cc:	f7ff fcb7 	bl	8008b3e <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>
 80091d0:	4603      	mov	r3, r0
 80091d2:	60e3      	str	r3, [r4, #12]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80091d4:	69f8      	ldr	r0, [r7, #28]
 80091d6:	f7ff fcc1 	bl	8008b5c <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>
 80091da:	4603      	mov	r3, r0
 80091dc:	461d      	mov	r5, r3
    params->activation =
 80091de:	f107 0310 	add.w	r3, r7, #16
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 fb86 	bl	80098f4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80091e8:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80091ea:	4628      	mov	r0, r5
 80091ec:	f7ff fe16 	bl	8008e1c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80091f0:	4603      	mov	r3, r0
    params->activation =
 80091f2:	7423      	strb	r3, [r4, #16]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 80091f4:	f107 0310 	add.w	r3, r7, #16
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 fb7b 	bl	80098f4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80091fe:	4604      	mov	r4, r0
 8009200:	69f8      	ldr	r0, [r7, #28]
 8009202:	f7ff fcbb 	bl	8008b7c <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>
 8009206:	4603      	mov	r3, r0
 8009208:	6163      	str	r3, [r4, #20]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 800920a:	f107 0310 	add.w	r3, r7, #16
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fb70 	bl	80098f4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009214:	4604      	mov	r4, r0
 8009216:	69f8      	ldr	r0, [r7, #28]
 8009218:	f7ff fcbf 	bl	8008b9a <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>
 800921c:	4603      	mov	r3, r0
 800921e:	61a3      	str	r3, [r4, #24]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8009220:	f107 0310 	add.w	r3, r7, #16
 8009224:	4618      	mov	r0, r3
 8009226:	f000 fb71 	bl	800990c <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800922a:	4602      	mov	r2, r0
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8009230:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 8009232:	f107 0310 	add.w	r3, r7, #16
 8009236:	4618      	mov	r0, r3
 8009238:	f000 fb2d 	bl	8009896 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800923c:	4623      	mov	r3, r4
}
 800923e:	4618      	mov	r0, r3
 8009240:	3720      	adds	r7, #32
 8009242:	46bd      	mov	sp, r7
 8009244:	bdb0      	pop	{r4, r5, r7, pc}
 8009246:	bf00      	nop
 8009248:	080268ec 	.word	0x080268ec
 800924c:	0802688c 	.word	0x0802688c
 8009250:	080268d4 	.word	0x080268d4

08009254 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                        void**) {
  return kTfLiteOk;
}

TfLiteStatus ParsePool(const Operator* op, ErrorReporter* error_reporter,
                       BuiltinDataAllocator* allocator, void** builtin_data) {
 8009254:	b5b0      	push	{r4, r5, r7, lr}
 8009256:	b08a      	sub	sp, #40	; 0x28
 8009258:	af02      	add	r7, sp, #8
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
 8009260:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	68b9      	ldr	r1, [r7, #8]
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f7ff fd79 	bl	8008d60 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800926e:	f107 0318 	add.w	r3, r7, #24
 8009272:	6879      	ldr	r1, [r7, #4]
 8009274:	4618      	mov	r0, r3
 8009276:	f7ff fd64 	bl	8008d42 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLitePoolParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLitePoolParams>();
 800927a:	f107 0310 	add.w	r3, r7, #16
 800927e:	f107 0218 	add.w	r2, r7, #24
 8009282:	4611      	mov	r1, r2
 8009284:	4618      	mov	r0, r3
 8009286:	f000 fb55 	bl	8009934 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800928a:	f107 0310 	add.w	r3, r7, #16
 800928e:	2100      	movs	r1, #0
 8009290:	4618      	mov	r0, r3
 8009292:	f000 fb8f 	bl	80099b4 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8009296:	4603      	mov	r3, r0
 8009298:	f083 0301 	eor.w	r3, r3, #1
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00c      	beq.n	80092bc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80092a2:	4b39      	ldr	r3, [pc, #228]	; (8009388 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 80092a4:	9301      	str	r3, [sp, #4]
 80092a6:	f240 634f 	movw	r3, #1615	; 0x64f
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	4b37      	ldr	r3, [pc, #220]	; (800938c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 80092ae:	4a38      	ldr	r2, [pc, #224]	; (8009390 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 80092b0:	68b9      	ldr	r1, [r7, #8]
 80092b2:	68b8      	ldr	r0, [r7, #8]
 80092b4:	f7ff fb07 	bl	80088c6 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80092b8:	2401      	movs	r4, #1
 80092ba:	e05b      	b.n	8009374 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Pool2DOptions* schema_params = op->builtin_options_as_Pool2DOptions();
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f7ff fce2 	bl	8008c86 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>
 80092c2:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d04b      	beq.n	8009362 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 80092ca:	69f8      	ldr	r0, [r7, #28]
 80092cc:	f7ff fbad 	bl	8008a2a <_ZNK6tflite13Pool2DOptions7paddingEv>
 80092d0:	4603      	mov	r3, r0
 80092d2:	461d      	mov	r5, r3
 80092d4:	f107 0310 	add.w	r3, r7, #16
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 fb78 	bl	80099ce <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80092de:	4604      	mov	r4, r0
 80092e0:	4628      	mov	r0, r5
 80092e2:	f7ff fdc7 	bl	8008e74 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 80092e6:	4603      	mov	r3, r0
 80092e8:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 80092ea:	f107 0310 	add.w	r3, r7, #16
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 fb6d 	bl	80099ce <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80092f4:	4604      	mov	r4, r0
 80092f6:	69f8      	ldr	r0, [r7, #28]
 80092f8:	f7ff fba7 	bl	8008a4a <_ZNK6tflite13Pool2DOptions8stride_wEv>
 80092fc:	4603      	mov	r3, r0
 80092fe:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 8009300:	f107 0310 	add.w	r3, r7, #16
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fb62 	bl	80099ce <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800930a:	4604      	mov	r4, r0
 800930c:	69f8      	ldr	r0, [r7, #28]
 800930e:	f7ff fbab 	bl	8008a68 <_ZNK6tflite13Pool2DOptions8stride_hEv>
 8009312:	4603      	mov	r3, r0
 8009314:	60a3      	str	r3, [r4, #8]
    params->filter_width = schema_params->filter_width();
 8009316:	f107 0310 	add.w	r3, r7, #16
 800931a:	4618      	mov	r0, r3
 800931c:	f000 fb57 	bl	80099ce <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009320:	4604      	mov	r4, r0
 8009322:	69f8      	ldr	r0, [r7, #28]
 8009324:	f7ff fbaf 	bl	8008a86 <_ZNK6tflite13Pool2DOptions12filter_widthEv>
 8009328:	4603      	mov	r3, r0
 800932a:	60e3      	str	r3, [r4, #12]
    params->filter_height = schema_params->filter_height();
 800932c:	f107 0310 	add.w	r3, r7, #16
 8009330:	4618      	mov	r0, r3
 8009332:	f000 fb4c 	bl	80099ce <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009336:	4604      	mov	r4, r0
 8009338:	69f8      	ldr	r0, [r7, #28]
 800933a:	f7ff fbb3 	bl	8008aa4 <_ZNK6tflite13Pool2DOptions13filter_heightEv>
 800933e:	4603      	mov	r3, r0
 8009340:	6123      	str	r3, [r4, #16]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8009342:	69f8      	ldr	r0, [r7, #28]
 8009344:	f7ff fbbd 	bl	8008ac2 <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>
 8009348:	4603      	mov	r3, r0
 800934a:	461d      	mov	r5, r3
    params->activation =
 800934c:	f107 0310 	add.w	r3, r7, #16
 8009350:	4618      	mov	r0, r3
 8009352:	f000 fb3c 	bl	80099ce <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009356:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8009358:	4628      	mov	r0, r5
 800935a:	f7ff fd5f 	bl	8008e1c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800935e:	4603      	mov	r3, r0
    params->activation =
 8009360:	7523      	strb	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8009362:	f107 0310 	add.w	r3, r7, #16
 8009366:	4618      	mov	r0, r3
 8009368:	f000 fb3d 	bl	80099e6 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800936c:	4602      	mov	r2, r0
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8009372:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLitePoolParams>();
 8009374:	f107 0310 	add.w	r3, r7, #16
 8009378:	4618      	mov	r0, r3
 800937a:	f000 faf9 	bl	8009970 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800937e:	4623      	mov	r3, r4
}
 8009380:	4618      	mov	r0, r3
 8009382:	3720      	adds	r7, #32
 8009384:	46bd      	mov	sp, r7
 8009386:	bdb0      	pop	{r4, r5, r7, pc}
 8009388:	080268ec 	.word	0x080268ec
 800938c:	0802688c 	.word	0x0802688c
 8009390:	080268d4 	.word	0x080268d4

08009394 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8009394:	b590      	push	{r4, r7, lr}
 8009396:	b08d      	sub	sp, #52	; 0x34
 8009398:	af02      	add	r7, sp, #8
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
 80093a0:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	68b9      	ldr	r1, [r7, #8]
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f7ff fcd9 	bl	8008d60 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80093ae:	f107 0318 	add.w	r3, r7, #24
 80093b2:	6879      	ldr	r1, [r7, #4]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7ff fcc4 	bl	8008d42 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 80093ba:	f107 0310 	add.w	r3, r7, #16
 80093be:	f107 0218 	add.w	r2, r7, #24
 80093c2:	4611      	mov	r1, r2
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fb22 	bl	8009a0e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80093ca:	f107 0310 	add.w	r3, r7, #16
 80093ce:	2100      	movs	r1, #0
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 fb5c 	bl	8009a8e <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80093d6:	4603      	mov	r3, r0
 80093d8:	f083 0301 	eor.w	r3, r3, #1
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00c      	beq.n	80093fc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80093e2:	4b27      	ldr	r3, [pc, #156]	; (8009480 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>)
 80093e4:	9301      	str	r3, [sp, #4]
 80093e6:	f240 63b1 	movw	r3, #1713	; 0x6b1
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	4b25      	ldr	r3, [pc, #148]	; (8009484 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 80093ee:	4a26      	ldr	r2, [pc, #152]	; (8009488 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 80093f0:	68b9      	ldr	r1, [r7, #8]
 80093f2:	68b8      	ldr	r0, [r7, #8]
 80093f4:	f7ff fa67 	bl	80088c6 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80093f8:	2401      	movs	r4, #1
 80093fa:	e037      	b.n	800946c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f7ff fc6a 	bl	8008cd6 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 8009402:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	2b00      	cmp	r3, #0
 8009408:	d027      	beq.n	800945a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
 800940a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800940c:	f7ff fbe8 	bl	8008be0 <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 8009410:	6238      	str	r0, [r7, #32]
    if (new_shape != nullptr) {
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d020      	beq.n	800945a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
      TF_LITE_ENSURE_STATUS(
 8009418:	f107 0310 	add.w	r3, r7, #16
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fb43 	bl	8009aa8 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009422:	4603      	mov	r3, r0
 8009424:	461a      	mov	r2, r3
 8009426:	4b19      	ldr	r3, [pc, #100]	; (800948c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	6a39      	ldr	r1, [r7, #32]
 800942e:	2020      	movs	r0, #32
 8009430:	f7ff fcb6 	bl	8008da0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 8009434:	4603      	mov	r3, r0
 8009436:	77fb      	strb	r3, [r7, #31]
 8009438:	7ffb      	ldrb	r3, [r7, #31]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
 800943e:	7ffc      	ldrb	r4, [r7, #31]
 8009440:	e014      	b.n	800946c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
 8009442:	6a38      	ldr	r0, [r7, #32]
 8009444:	f000 f968 	bl	8009718 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009448:	4604      	mov	r4, r0
 800944a:	f107 0310 	add.w	r3, r7, #16
 800944e:	4618      	mov	r0, r3
 8009450:	f000 fb2a 	bl	8009aa8 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009454:	4603      	mov	r3, r0
 8009456:	4622      	mov	r2, r4
 8009458:	621a      	str	r2, [r3, #32]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800945a:	f107 0310 	add.w	r3, r7, #16
 800945e:	4618      	mov	r0, r3
 8009460:	f000 fb2e 	bl	8009ac0 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8009464:	4602      	mov	r2, r0
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800946a:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 800946c:	f107 0310 	add.w	r3, r7, #16
 8009470:	4618      	mov	r0, r3
 8009472:	f000 faea 	bl	8009a4a <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8009476:	4623      	mov	r3, r4
}
 8009478:	4618      	mov	r0, r3
 800947a:	372c      	adds	r7, #44	; 0x2c
 800947c:	46bd      	mov	sp, r7
 800947e:	bd90      	pop	{r4, r7, pc}
 8009480:	080268ec 	.word	0x080268ec
 8009484:	0802688c 	.word	0x0802688c
 8009488:	080268d4 	.word	0x080268d4
 800948c:	080269bc 	.word	0x080269bc

08009490 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8009490:	b590      	push	{r4, r7, lr}
 8009492:	b08b      	sub	sp, #44	; 0x2c
 8009494:	af02      	add	r7, sp, #8
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	68b9      	ldr	r1, [r7, #8]
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f7ff fc5b 	bl	8008d60 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80094aa:	f107 0318 	add.w	r3, r7, #24
 80094ae:	6879      	ldr	r1, [r7, #4]
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7ff fc46 	bl	8008d42 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 80094b6:	f107 0310 	add.w	r3, r7, #16
 80094ba:	f107 0218 	add.w	r2, r7, #24
 80094be:	4611      	mov	r1, r2
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 fb11 	bl	8009ae8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80094c6:	f107 0310 	add.w	r3, r7, #16
 80094ca:	2100      	movs	r1, #0
 80094cc:	4618      	mov	r0, r3
 80094ce:	f000 fb4b 	bl	8009b68 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80094d2:	4603      	mov	r3, r0
 80094d4:	f083 0301 	eor.w	r3, r3, #1
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00c      	beq.n	80094f8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80094de:	4b1a      	ldr	r3, [pc, #104]	; (8009548 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 80094e0:	9301      	str	r3, [sp, #4]
 80094e2:	f240 733a 	movw	r3, #1850	; 0x73a
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	4b18      	ldr	r3, [pc, #96]	; (800954c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 80094ea:	4a19      	ldr	r2, [pc, #100]	; (8009550 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 80094ec:	68b9      	ldr	r1, [r7, #8]
 80094ee:	68b8      	ldr	r0, [r7, #8]
 80094f0:	f7ff f9e9 	bl	80088c6 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80094f4:	2401      	movs	r4, #1
 80094f6:	e01c      	b.n	8009532 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7ff fbd8 	bl	8008cae <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 80094fe:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00c      	beq.n	8009520 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    params->beta = schema_params->beta();
 8009506:	f107 0310 	add.w	r3, r7, #16
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fb39 	bl	8009b82 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009510:	4604      	mov	r4, r0
 8009512:	69f8      	ldr	r0, [r7, #28]
 8009514:	f7ff fb50 	bl	8008bb8 <_ZNK6tflite14SoftmaxOptions4betaEv>
 8009518:	eef0 7a40 	vmov.f32	s15, s0
 800951c:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8009520:	f107 0310 	add.w	r3, r7, #16
 8009524:	4618      	mov	r0, r3
 8009526:	f000 fb38 	bl	8009b9a <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800952a:	4602      	mov	r2, r0
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8009530:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 8009532:	f107 0310 	add.w	r3, r7, #16
 8009536:	4618      	mov	r0, r3
 8009538:	f000 faf4 	bl	8009b24 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800953c:	4623      	mov	r3, r4
}
 800953e:	4618      	mov	r0, r3
 8009540:	3724      	adds	r7, #36	; 0x24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd90      	pop	{r4, r7, pc}
 8009546:	bf00      	nop
 8009548:	080268ec 	.word	0x080268ec
 800954c:	0802688c 	.word	0x0802688c
 8009550:	080268d4 	.word	0x080268d4

08009554 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 800955c:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 800955e:	4618      	mov	r0, r3
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 800956a:	b580      	push	{r7, lr}
 800956c:	b082      	sub	sp, #8
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	4618      	mov	r0, r3
 8009578:	f000 fb2e 	bl	8009bd8 <_ZN11flatbuffers12EndianScalarItEET_S1_>
 800957c:	4603      	mov	r3, r0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4618      	mov	r0, r3
 8009594:	f7ff ffde 	bl	8009554 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009598:	4603      	mov	r3, r0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b082      	sub	sp, #8
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 fb07 	bl	8009bc2 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 80095b4:	4603      	mov	r3, r0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 80095be:	b580      	push	{r7, lr}
 80095c0:	b082      	sub	sp, #8
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 fb10 	bl	8009bf0 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 80095d0:	4603      	mov	r3, r0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	807b      	strh	r3, [r7, #2]
 80095e6:	4613      	mov	r3, r2
 80095e8:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 80095ea:	887b      	ldrh	r3, [r7, #2]
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff f99f 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80095f4:	4603      	mov	r3, r0
 80095f6:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80095f8:	89fb      	ldrh	r3, [r7, #14]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d007      	beq.n	800960e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	89fb      	ldrh	r3, [r7, #14]
 8009602:	4413      	add	r3, r2
 8009604:	4618      	mov	r0, r3
 8009606:	f7ff ffda 	bl	80095be <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 800960a:	4603      	mov	r3, r0
 800960c:	e000      	b.n	8009610 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 800960e:	787b      	ldrb	r3, [r7, #1]
  }
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009624:	887b      	ldrh	r3, [r7, #2]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 faed 	bl	8009c08 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 800962e:	4603      	mov	r3, r0
  }
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	460b      	mov	r3, r1
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8009646:	897b      	ldrh	r3, [r7, #10]
 8009648:	4619      	mov	r1, r3
 800964a:	68f8      	ldr	r0, [r7, #12]
 800964c:	f7ff f971 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009650:	4603      	mov	r3, r0
 8009652:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8009654:	8afb      	ldrh	r3, [r7, #22]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d007      	beq.n	800966a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	8afb      	ldrh	r3, [r7, #22]
 800965e:	4413      	add	r3, r2
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff ff9e 	bl	80095a2 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8009666:	4603      	mov	r3, r0
 8009668:	e000      	b.n	800966c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 800966a:	687b      	ldr	r3, [r7, #4]
  }
 800966c:	4618      	mov	r0, r3
 800966e:	3718      	adds	r7, #24
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009680:	887b      	ldrh	r3, [r7, #2]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fadf 	bl	8009c48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800968a:	4603      	mov	r3, r0
  }
 800968c:	4618      	mov	r0, r3
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	807b      	strh	r3, [r7, #2]
 80096a0:	4613      	mov	r3, r2
 80096a2:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 80096a4:	887b      	ldrh	r3, [r7, #2]
 80096a6:	4619      	mov	r1, r3
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7ff f942 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80096ae:	4603      	mov	r3, r0
 80096b0:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80096b2:	89fb      	ldrh	r3, [r7, #14]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d007      	beq.n	80096c8 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	89fb      	ldrh	r3, [r7, #14]
 80096bc:	4413      	add	r3, r2
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 fae2 	bl	8009c88 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 80096c4:	4603      	mov	r3, r0
 80096c6:	e001      	b.n	80096cc <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 80096c8:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	460b      	mov	r3, r1
 80096de:	ed87 0a01 	vstr	s0, [r7, #4]
 80096e2:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80096e4:	897b      	ldrh	r3, [r7, #10]
 80096e6:	4619      	mov	r1, r3
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f7ff f922 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80096ee:	4603      	mov	r3, r0
 80096f0:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80096f2:	8afb      	ldrh	r3, [r7, #22]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d008      	beq.n	800970a <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	8afb      	ldrh	r3, [r7, #22]
 80096fc:	4413      	add	r3, r2
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 fad1 	bl	8009ca6 <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 8009704:	eef0 7a40 	vmov.f32	s15, s0
 8009708:	e001      	b.n	800970e <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 800970a:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 800970e:	eeb0 0a67 	vmov.f32	s0, s15
 8009712:	3718      	adds	r7, #24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4618      	mov	r0, r3
 8009726:	f7ff ff15 	bl	8009554 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800972a:	4603      	mov	r3, r0
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7ff ffea 	bl	8009718 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009744:	4602      	mov	r2, r0
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	4293      	cmp	r3, r2
 800974a:	d306      	bcc.n	800975a <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 800974c:	4b09      	ldr	r3, [pc, #36]	; (8009774 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 800974e:	4a0a      	ldr	r2, [pc, #40]	; (8009778 <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 8009750:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009754:	4809      	ldr	r0, [pc, #36]	; (800977c <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 8009756:	f01b fd91 	bl	802527c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fac7 	bl	8009cee <_ZNK11flatbuffers6VectorIlE4DataEv>
 8009760:	4603      	mov	r3, r0
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	4618      	mov	r0, r3
 8009766:	f000 fab0 	bl	8009cca <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 800976a:	4603      	mov	r3, r0
  }
 800976c:	4618      	mov	r0, r3
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	080269cc 	.word	0x080269cc
 8009778:	080269d8 	.word	0x080269d8
 800977c:	08026aa8 	.word	0x08026aa8

08009780 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009780:	b590      	push	{r4, r7, lr}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800978e:	4618      	mov	r0, r3
 8009790:	f000 fac4 	bl	8009d1c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>
 8009794:	4604      	mov	r4, r0
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	f107 030c 	add.w	r3, r7, #12
 800979e:	4611      	mov	r1, r2
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff faac 	bl	8008cfe <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 80097a6:	f107 030c 	add.w	r3, r7, #12
 80097aa:	461a      	mov	r2, r3
 80097ac:	4621      	mov	r1, r4
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fad3 	bl	8009d5a <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd90      	pop	{r4, r7, pc}

080097bc <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 80097bc:	b590      	push	{r4, r7, lr}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 fadc 	bl	8009d84 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80097cc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00c      	beq.n	80097f0 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fae1 	bl	8009d9e <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 80097dc:	4604      	mov	r4, r0
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f000 faea 	bl	8009db8 <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80097e4:	4603      	mov	r3, r0
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4619      	mov	r1, r3
 80097ea:	4620      	mov	r0, r4
 80097ec:	f7ff fa96 	bl	8008d1c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]
      }
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4618      	mov	r0, r3
 80097fa:	3714      	adds	r7, #20
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd90      	pop	{r4, r7, pc}

08009800 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 faf5 	bl	8009dfa <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009810:	4603      	mov	r3, r0
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
	return get();
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fafa 	bl	8009e1c <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009828:	4603      	mov	r3, r0
      }
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009832:	b580      	push	{r7, lr}
 8009834:	b084      	sub	sp, #16
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 faee 	bl	8009e1c <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009840:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4618      	mov	r0, r3
 8009846:	f000 fa9d 	bl	8009d84 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800984a:	4603      	mov	r3, r0
 800984c:	2200      	movs	r2, #0
 800984e:	601a      	str	r2, [r3, #0]
	return __p;
 8009850:	68fb      	ldr	r3, [r7, #12]
      }
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800985a:	b590      	push	{r4, r7, lr}
 800985c:	b085      	sub	sp, #20
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009868:	4618      	mov	r0, r3
 800986a:	f000 fae4 	bl	8009e36 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>
 800986e:	4604      	mov	r4, r0
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	f107 030c 	add.w	r3, r7, #12
 8009878:	4611      	mov	r1, r2
 800987a:	4618      	mov	r0, r3
 800987c:	f7ff fa3f 	bl	8008cfe <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009880:	f107 030c 	add.w	r3, r7, #12
 8009884:	461a      	mov	r2, r3
 8009886:	4621      	mov	r1, r4
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 faf4 	bl	8009e76 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	bd90      	pop	{r4, r7, pc}

08009896 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009896:	b590      	push	{r4, r7, lr}
 8009898:	b085      	sub	sp, #20
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 fafd 	bl	8009ea0 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80098a6:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00c      	beq.n	80098ca <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fb02 	bl	8009eba <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 80098b6:	4604      	mov	r4, r0
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f000 fb0b 	bl	8009ed4 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80098be:	4603      	mov	r3, r0
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4619      	mov	r1, r3
 80098c4:	4620      	mov	r0, r4
 80098c6:	f7ff fa29 	bl	8008d1c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	601a      	str	r2, [r3, #0]
      }
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4618      	mov	r0, r3
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd90      	pop	{r4, r7, pc}

080098da <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fb16 	bl	8009f16 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80098ea:	4603      	mov	r3, r0
 80098ec:	4618      	mov	r0, r3
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
	return get();
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fb1b 	bl	8009f38 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009902:	4603      	mov	r3, r0
      }
 8009904:	4618      	mov	r0, r3
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fb0f 	bl	8009f38 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800991a:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4618      	mov	r0, r3
 8009920:	f000 fabe 	bl	8009ea0 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009924:	4603      	mov	r3, r0
 8009926:	2200      	movs	r2, #0
 8009928:	601a      	str	r2, [r3, #0]
	return __p;
 800992a:	68fb      	ldr	r3, [r7, #12]
      }
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009934:	b590      	push	{r4, r7, lr}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009942:	4618      	mov	r0, r3
 8009944:	f000 fb05 	bl	8009f52 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>
 8009948:	4604      	mov	r4, r0
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	f107 030c 	add.w	r3, r7, #12
 8009952:	4611      	mov	r1, r2
 8009954:	4618      	mov	r0, r3
 8009956:	f7ff f9d2 	bl	8008cfe <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800995a:	f107 030c 	add.w	r3, r7, #12
 800995e:	461a      	mov	r2, r3
 8009960:	4621      	mov	r1, r4
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fb12 	bl	8009f8c <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	3714      	adds	r7, #20
 800996c:	46bd      	mov	sp, r7
 800996e:	bd90      	pop	{r4, r7, pc}

08009970 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009970:	b590      	push	{r4, r7, lr}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4618      	mov	r0, r3
 800997c:	f000 fb1b 	bl	8009fb6 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009980:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00c      	beq.n	80099a4 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fb20 	bl	8009fd0 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009990:	4604      	mov	r4, r0
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 fb29 	bl	8009fea <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8009998:	4603      	mov	r3, r0
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4619      	mov	r1, r3
 800999e:	4620      	mov	r0, r4
 80099a0:	f7ff f9bc 	bl	8008d1c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2200      	movs	r2, #0
 80099a8:	601a      	str	r2, [r3, #0]
      }
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4618      	mov	r0, r3
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd90      	pop	{r4, r7, pc}

080099b4 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fb34 	bl	800a02c <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80099c4:	4603      	mov	r3, r0
 80099c6:	4618      	mov	r0, r3
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b082      	sub	sp, #8
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
	return get();
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fb39 	bl	800a04e <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80099dc:	4603      	mov	r3, r0
      }
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fb2d 	bl	800a04e <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80099f4:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f000 fadc 	bl	8009fb6 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2200      	movs	r2, #0
 8009a02:	601a      	str	r2, [r3, #0]
	return __p;
 8009a04:	68fb      	ldr	r3, [r7, #12]
      }
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009a0e:	b590      	push	{r4, r7, lr}
 8009a10:	b085      	sub	sp, #20
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 fb23 	bl	800a068 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 8009a22:	4604      	mov	r4, r0
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	f107 030c 	add.w	r3, r7, #12
 8009a2c:	4611      	mov	r1, r2
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7ff f965 	bl	8008cfe <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009a34:	f107 030c 	add.w	r3, r7, #12
 8009a38:	461a      	mov	r2, r3
 8009a3a:	4621      	mov	r1, r4
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fb30 	bl	800a0a2 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd90      	pop	{r4, r7, pc}

08009a4a <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009a4a:	b590      	push	{r4, r7, lr}
 8009a4c:	b085      	sub	sp, #20
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 fb39 	bl	800a0cc <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009a5a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00c      	beq.n	8009a7e <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fb3e 	bl	800a0e6 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f000 fb47 	bl	800a100 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8009a72:	4603      	mov	r3, r0
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4619      	mov	r1, r3
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f7ff f94f 	bl	8008d1c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	601a      	str	r2, [r3, #0]
      }
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd90      	pop	{r4, r7, pc}

08009a8e <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b082      	sub	sp, #8
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fb52 	bl	800a142 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
	return get();
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fb57 	bl	800a164 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009ab6:	4603      	mov	r3, r0
      }
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fb4b 	bl	800a164 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009ace:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 fafa 	bl	800a0cc <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
	return __p;
 8009ade:	68fb      	ldr	r3, [r7, #12]
      }
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009ae8:	b590      	push	{r4, r7, lr}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 fb41 	bl	800a17e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 8009afc:	4604      	mov	r4, r0
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	f107 030c 	add.w	r3, r7, #12
 8009b06:	4611      	mov	r1, r2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7ff f8f8 	bl	8008cfe <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009b0e:	f107 030c 	add.w	r3, r7, #12
 8009b12:	461a      	mov	r2, r3
 8009b14:	4621      	mov	r1, r4
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 fb4a 	bl	800a1b0 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd90      	pop	{r4, r7, pc}

08009b24 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009b24:	b590      	push	{r4, r7, lr}
 8009b26:	b085      	sub	sp, #20
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 fb53 	bl	800a1da <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009b34:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00c      	beq.n	8009b58 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fb58 	bl	800a1f4 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009b44:	4604      	mov	r4, r0
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f000 fb61 	bl	800a20e <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4619      	mov	r1, r3
 8009b52:	4620      	mov	r0, r4
 8009b54:	f7ff f8e2 	bl	8008d1c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	601a      	str	r2, [r3, #0]
      }
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd90      	pop	{r4, r7, pc}

08009b68 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fb6c 	bl	800a250 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
	return get();
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fb71 	bl	800a272 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009b90:	4603      	mov	r3, r0
      }
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b084      	sub	sp, #16
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fb65 	bl	800a272 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009ba8:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f000 fb14 	bl	800a1da <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	601a      	str	r2, [r3, #0]
	return __p;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
      }
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8009bc2:	b480      	push	{r7}
 8009bc4:	b083      	sub	sp, #12
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
    return t;
 8009bca:	687b      	ldr	r3, [r7, #4]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	80fb      	strh	r3, [r7, #6]
    return t;
 8009be2:	88fb      	ldrh	r3, [r7, #6]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	71fb      	strb	r3, [r7, #7]
    return t;
 8009bfa:	79fb      	ldrb	r3, [r7, #7]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	460b      	mov	r3, r1
 8009c12:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8009c14:	887b      	ldrh	r3, [r7, #2]
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7fe fe8a 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	89fb      	ldrh	r3, [r7, #14]
 8009c26:	4413      	add	r3, r2
 8009c28:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009c2a:	89fb      	ldrh	r3, [r7, #14]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d006      	beq.n	8009c3e <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 8009c30:	68b8      	ldr	r0, [r7, #8]
 8009c32:	f7ff fca8 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8009c36:	4602      	mov	r2, r0
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	4413      	add	r3, r2
                        : nullptr;
 8009c3c:	e000      	b.n	8009c40 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009c3e:	2300      	movs	r3, #0
  }
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8009c54:	887b      	ldrh	r3, [r7, #2]
 8009c56:	4619      	mov	r1, r3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7fe fe6a 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	89fb      	ldrh	r3, [r7, #14]
 8009c66:	4413      	add	r3, r2
 8009c68:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009c6a:	89fb      	ldrh	r3, [r7, #14]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d006      	beq.n	8009c7e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 8009c70:	68b8      	ldr	r0, [r7, #8]
 8009c72:	f7ff fc88 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8009c76:	4602      	mov	r2, r0
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	4413      	add	r3, r2
                        : nullptr;
 8009c7c:	e000      	b.n	8009c80 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009c7e:	2300      	movs	r3, #0
  }
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f993 3000 	ldrsb.w	r3, [r3]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 faf8 	bl	800a28c <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 8009c9c:	4603      	mov	r3, r0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	edd3 7a00 	vldr	s15, [r3]
 8009cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8009cb8:	f000 faf5 	bl	800a2a6 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8009cbc:	eef0 7a40 	vmov.f32	s15, s0
}
 8009cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b082      	sub	sp, #8
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	4413      	add	r3, r2
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7ff ff6f 	bl	8009bc2 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8009ce4:	4603      	mov	r3, r0
  }
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	3304      	adds	r3, #4
  }
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d06:	b480      	push	{r7}
 8009d08:	b083      	sub	sp, #12
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4618      	mov	r0, r3
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2204      	movs	r2, #4
 8009d2c:	2118      	movs	r1, #24
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	4798      	blx	r3
 8009d32:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	4619      	mov	r1, r3
 8009d38:	2018      	movs	r0, #24
 8009d3a:	f7fe fdde 	bl	80088fa <_ZnwjPv>
 8009d3e:	4601      	mov	r1, r0
 8009d40:	460a      	mov	r2, r1
 8009d42:	2300      	movs	r3, #0
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	6053      	str	r3, [r2, #4]
 8009d48:	6093      	str	r3, [r2, #8]
 8009d4a:	60d3      	str	r3, [r2, #12]
 8009d4c:	6113      	str	r3, [r2, #16]
 8009d4e:	6153      	str	r3, [r2, #20]
 8009d50:	460b      	mov	r3, r1
  }
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8009d5a:	b590      	push	{r4, r7, lr}
 8009d5c:	b085      	sub	sp, #20
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	60f8      	str	r0, [r7, #12]
 8009d62:	60b9      	str	r1, [r7, #8]
 8009d64:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009d66:	68fc      	ldr	r4, [r7, #12]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 faab 	bl	800a2c4 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	461a      	mov	r2, r3
 8009d72:	68b9      	ldr	r1, [r7, #8]
 8009d74:	4620      	mov	r0, r4
 8009d76:	f000 f82a 	bl	8009dce <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd90      	pop	{r4, r7, pc}

08009d84 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 faa3 	bl	800a2da <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8009d94:	4603      	mov	r3, r0
 8009d96:	4618      	mov	r0, r3
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 faa3 	bl	800a2f4 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8009dae:	4603      	mov	r3, r0
 8009db0:	4618      	mov	r0, r3
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8009dce:	b590      	push	{r4, r7, lr}
 8009dd0:	b085      	sub	sp, #20
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	60f8      	str	r0, [r7, #12]
 8009dd6:	60b9      	str	r1, [r7, #8]
 8009dd8:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009dda:	68fc      	ldr	r4, [r7, #12]
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7ff ff92 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009de2:	4602      	mov	r2, r0
 8009de4:	f107 0308 	add.w	r3, r7, #8
 8009de8:	4619      	mov	r1, r3
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 fa8f 	bl	800a30e <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	4618      	mov	r0, r3
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd90      	pop	{r4, r7, pc}

08009dfa <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f80a 	bl	8009e1c <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	bf14      	ite	ne
 8009e0e:	2301      	movne	r3, #1
 8009e10:	2300      	moveq	r3, #0
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 fa8a 	bl	800a340 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>:
  T* AllocatePOD() {
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b084      	sub	sp, #16
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2204      	movs	r2, #4
 8009e46:	211c      	movs	r1, #28
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	4798      	blx	r3
 8009e4c:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	4619      	mov	r1, r3
 8009e52:	201c      	movs	r0, #28
 8009e54:	f7fe fd51 	bl	80088fa <_ZnwjPv>
 8009e58:	4601      	mov	r1, r0
 8009e5a:	460a      	mov	r2, r1
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	6053      	str	r3, [r2, #4]
 8009e62:	6093      	str	r3, [r2, #8]
 8009e64:	60d3      	str	r3, [r2, #12]
 8009e66:	6113      	str	r3, [r2, #16]
 8009e68:	6153      	str	r3, [r2, #20]
 8009e6a:	6193      	str	r3, [r2, #24]
 8009e6c:	460b      	mov	r3, r1
  }
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8009e76:	b590      	push	{r4, r7, lr}
 8009e78:	b085      	sub	sp, #20
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	60f8      	str	r0, [r7, #12]
 8009e7e:	60b9      	str	r1, [r7, #8]
 8009e80:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009e82:	68fc      	ldr	r4, [r7, #12]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fa1d 	bl	800a2c4 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	68b9      	ldr	r1, [r7, #8]
 8009e90:	4620      	mov	r0, r4
 8009e92:	f000 f82a 	bl	8009eea <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd90      	pop	{r4, r7, pc}

08009ea0 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 fa56 	bl	800a35c <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f000 fa56 	bl	800a376 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4618      	mov	r0, r3
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8009eea:	b590      	push	{r4, r7, lr}
 8009eec:	b085      	sub	sp, #20
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	60f8      	str	r0, [r7, #12]
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009ef6:	68fc      	ldr	r4, [r7, #12]
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7ff ff04 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009efe:	4602      	mov	r2, r0
 8009f00:	f107 0308 	add.w	r3, r7, #8
 8009f04:	4619      	mov	r1, r3
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 fa42 	bl	800a390 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd90      	pop	{r4, r7, pc}

08009f16 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b082      	sub	sp, #8
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f80a 	bl	8009f38 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	bf14      	ite	ne
 8009f2a:	2301      	movne	r3, #1
 8009f2c:	2300      	moveq	r3, #0
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 fa3d 	bl	800a3c2 <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>:
  T* AllocatePOD() {
 8009f52:	b590      	push	{r4, r7, lr}
 8009f54:	b085      	sub	sp, #20
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2204      	movs	r2, #4
 8009f62:	2128      	movs	r1, #40	; 0x28
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	4798      	blx	r3
 8009f68:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	2028      	movs	r0, #40	; 0x28
 8009f70:	f7fe fcc3 	bl	80088fa <_ZnwjPv>
 8009f74:	4604      	mov	r4, r0
 8009f76:	4620      	mov	r0, r4
 8009f78:	2328      	movs	r3, #40	; 0x28
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	f01b fa19 	bl	80253b4 <memset>
 8009f82:	4623      	mov	r3, r4
  }
 8009f84:	4618      	mov	r0, r3
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd90      	pop	{r4, r7, pc}

08009f8c <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8009f8c:	b590      	push	{r4, r7, lr}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009f98:	68fc      	ldr	r4, [r7, #12]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f992 	bl	800a2c4 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	68b9      	ldr	r1, [r7, #8]
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f000 f82a 	bl	800a000 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3714      	adds	r7, #20
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd90      	pop	{r4, r7, pc}

08009fb6 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b082      	sub	sp, #8
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 fa0c 	bl	800a3de <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 fa0c 	bl	800a3f8 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009fea:	b480      	push	{r7}
 8009fec:	b083      	sub	sp, #12
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800a000:	b590      	push	{r4, r7, lr}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800a00c:	68fc      	ldr	r4, [r7, #12]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7ff fe79 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a014:	4602      	mov	r2, r0
 800a016:	f107 0308 	add.w	r3, r7, #8
 800a01a:	4619      	mov	r1, r3
 800a01c:	4620      	mov	r0, r4
 800a01e:	f000 f9f8 	bl	800a412 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	4618      	mov	r0, r3
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd90      	pop	{r4, r7, pc}

0800a02c <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f80a 	bl	800a04e <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	bf14      	ite	ne
 800a040:	2301      	movne	r3, #1
 800a042:	2300      	moveq	r3, #0
 800a044:	b2db      	uxtb	r3, r3
 800a046:	4618      	mov	r0, r3
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800a04e:	b580      	push	{r7, lr}
 800a050:	b082      	sub	sp, #8
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 f9f3 	bl	800a444 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a05e:	4603      	mov	r3, r0
 800a060:	4618      	mov	r0, r3
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 800a068:	b590      	push	{r4, r7, lr}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2204      	movs	r2, #4
 800a078:	2124      	movs	r1, #36	; 0x24
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	4798      	blx	r3
 800a07e:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	4619      	mov	r1, r3
 800a084:	2024      	movs	r0, #36	; 0x24
 800a086:	f7fe fc38 	bl	80088fa <_ZnwjPv>
 800a08a:	4604      	mov	r4, r0
 800a08c:	4620      	mov	r0, r4
 800a08e:	2324      	movs	r3, #36	; 0x24
 800a090:	461a      	mov	r2, r3
 800a092:	2100      	movs	r1, #0
 800a094:	f01b f98e 	bl	80253b4 <memset>
 800a098:	4623      	mov	r3, r4
  }
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd90      	pop	{r4, r7, pc}

0800a0a2 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800a0a2:	b590      	push	{r4, r7, lr}
 800a0a4:	b085      	sub	sp, #20
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800a0ae:	68fc      	ldr	r4, [r7, #12]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f907 	bl	800a2c4 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	68b9      	ldr	r1, [r7, #8]
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f000 f82a 	bl	800a116 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd90      	pop	{r4, r7, pc}

0800a0cc <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f000 f9c2 	bl	800a460 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b082      	sub	sp, #8
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 f9c2 	bl	800a47a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4618      	mov	r0, r3
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800a116:	b590      	push	{r4, r7, lr}
 800a118:	b085      	sub	sp, #20
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	60f8      	str	r0, [r7, #12]
 800a11e:	60b9      	str	r1, [r7, #8]
 800a120:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800a122:	68fc      	ldr	r4, [r7, #12]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7ff fdee 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a12a:	4602      	mov	r2, r0
 800a12c:	f107 0308 	add.w	r3, r7, #8
 800a130:	4619      	mov	r1, r3
 800a132:	4620      	mov	r0, r4
 800a134:	f000 f9ae 	bl	800a494 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	4618      	mov	r0, r3
 800a13c:	3714      	adds	r7, #20
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd90      	pop	{r4, r7, pc}

0800a142 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800a142:	b580      	push	{r7, lr}
 800a144:	b082      	sub	sp, #8
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f80a 	bl	800a164 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	bf14      	ite	ne
 800a156:	2301      	movne	r3, #1
 800a158:	2300      	moveq	r3, #0
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	4618      	mov	r0, r3
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4618      	mov	r0, r3
 800a170:	f000 f9a9 	bl	800a4c6 <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a174:	4603      	mov	r3, r0
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 800a17e:	b580      	push	{r7, lr}
 800a180:	b084      	sub	sp, #16
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2204      	movs	r2, #4
 800a18e:	2104      	movs	r1, #4
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	4798      	blx	r3
 800a194:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	4619      	mov	r1, r3
 800a19a:	2004      	movs	r0, #4
 800a19c:	f7fe fbad 	bl	80088fa <_ZnwjPv>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	f04f 0200 	mov.w	r2, #0
 800a1a6:	601a      	str	r2, [r3, #0]
  }
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800a1b0:	b590      	push	{r4, r7, lr}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800a1bc:	68fc      	ldr	r4, [r7, #12]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f880 	bl	800a2c4 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	68b9      	ldr	r1, [r7, #8]
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f000 f82a 	bl	800a224 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd90      	pop	{r4, r7, pc}

0800a1da <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b082      	sub	sp, #8
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f000 f97c 	bl	800a4e2 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 f97c 	bl	800a4fc <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800a204:	4603      	mov	r3, r0
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a20e:	b480      	push	{r7}
 800a210:	b083      	sub	sp, #12
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800a224:	b590      	push	{r4, r7, lr}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800a230:	68fc      	ldr	r4, [r7, #12]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7ff fd67 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a238:	4602      	mov	r2, r0
 800a23a:	f107 0308 	add.w	r3, r7, #8
 800a23e:	4619      	mov	r1, r3
 800a240:	4620      	mov	r0, r4
 800a242:	f000 f968 	bl	800a516 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	4618      	mov	r0, r3
 800a24a:	3714      	adds	r7, #20
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd90      	pop	{r4, r7, pc}

0800a250 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f80a 	bl	800a272 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	bf14      	ite	ne
 800a264:	2301      	movne	r3, #1
 800a266:	2300      	moveq	r3, #0
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800a272:	b580      	push	{r7, lr}
 800a274:	b082      	sub	sp, #8
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 f963 	bl	800a548 <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a282:	4603      	mov	r3, r0
 800a284:	4618      	mov	r0, r3
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	4603      	mov	r3, r0
 800a294:	71fb      	strb	r3, [r7, #7]
    return t;
 800a296:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800a2a6:	b480      	push	{r7}
 800a2a8:	b083      	sub	sp, #12
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	ee07 3a90 	vmov	s15, r3
}
 800a2b6:	eeb0 0a67 	vmov.f32	s0, s15
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b082      	sub	sp, #8
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 f93d 	bl	800a564 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 f93c 	bl	800a57c <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a304:	4603      	mov	r3, r0
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a30e:	b5b0      	push	{r4, r5, r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	60f8      	str	r0, [r7, #12]
 800a316:	60b9      	str	r1, [r7, #8]
 800a318:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a31a:	68fc      	ldr	r4, [r7, #12]
 800a31c:	68b8      	ldr	r0, [r7, #8]
 800a31e:	f000 f93a 	bl	800a596 <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a322:	4605      	mov	r5, r0
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7ff fcee 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a32a:	4603      	mov	r3, r0
 800a32c:	461a      	mov	r2, r3
 800a32e:	4629      	mov	r1, r5
 800a330:	4620      	mov	r0, r4
 800a332:	f000 f93b 	bl	800a5ac <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bdb0      	pop	{r4, r5, r7, pc}

0800a340 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 f94c 	bl	800a5e8 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a350:	4603      	mov	r3, r0
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4618      	mov	r0, r3
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4618      	mov	r0, r3
 800a368:	f000 f94b 	bl	800a602 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a36c:	4603      	mov	r3, r0
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a376:	b580      	push	{r7, lr}
 800a378:	b082      	sub	sp, #8
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4618      	mov	r0, r3
 800a382:	f000 f94a 	bl	800a61a <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a386:	4603      	mov	r3, r0
 800a388:	4618      	mov	r0, r3
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a390:	b5b0      	push	{r4, r5, r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a39c:	68fc      	ldr	r4, [r7, #12]
 800a39e:	68b8      	ldr	r0, [r7, #8]
 800a3a0:	f000 f948 	bl	800a634 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f7ff fcad 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f000 f949 	bl	800a64a <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bdb0      	pop	{r4, r5, r7, pc}

0800a3c2 <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b082      	sub	sp, #8
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 f95a 	bl	800a686 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b082      	sub	sp, #8
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 f959 	bl	800a6a0 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4618      	mov	r0, r3
 800a404:	f000 f958 	bl	800a6b8 <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a408:	4603      	mov	r3, r0
 800a40a:	4618      	mov	r0, r3
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a412:	b5b0      	push	{r4, r5, r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	60f8      	str	r0, [r7, #12]
 800a41a:	60b9      	str	r1, [r7, #8]
 800a41c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a41e:	68fc      	ldr	r4, [r7, #12]
 800a420:	68b8      	ldr	r0, [r7, #8]
 800a422:	f000 f956 	bl	800a6d2 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a426:	4605      	mov	r5, r0
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7ff fc6c 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a42e:	4603      	mov	r3, r0
 800a430:	461a      	mov	r2, r3
 800a432:	4629      	mov	r1, r5
 800a434:	4620      	mov	r0, r4
 800a436:	f000 f957 	bl	800a6e8 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bdb0      	pop	{r4, r5, r7, pc}

0800a444 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4618      	mov	r0, r3
 800a450:	f000 f968 	bl	800a724 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a454:	4603      	mov	r3, r0
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4618      	mov	r0, r3
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 f967 	bl	800a73e <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a470:	4603      	mov	r3, r0
 800a472:	4618      	mov	r0, r3
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b082      	sub	sp, #8
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4618      	mov	r0, r3
 800a486:	f000 f966 	bl	800a756 <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a48a:	4603      	mov	r3, r0
 800a48c:	4618      	mov	r0, r3
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a494:	b5b0      	push	{r4, r5, r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a4a0:	68fc      	ldr	r4, [r7, #12]
 800a4a2:	68b8      	ldr	r0, [r7, #8]
 800a4a4:	f000 f964 	bl	800a770 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff fc2b 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f000 f965 	bl	800a786 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bdb0      	pop	{r4, r5, r7, pc}

0800a4c6 <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 f976 	bl	800a7c2 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 f975 	bl	800a7dc <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4618      	mov	r0, r3
 800a508:	f000 f974 	bl	800a7f4 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a50c:	4603      	mov	r3, r0
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a516:	b5b0      	push	{r4, r5, r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	60f8      	str	r0, [r7, #12]
 800a51e:	60b9      	str	r1, [r7, #8]
 800a520:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a522:	68fc      	ldr	r4, [r7, #12]
 800a524:	68b8      	ldr	r0, [r7, #8]
 800a526:	f000 f972 	bl	800a80e <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a52a:	4605      	mov	r5, r0
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7ff fbea 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a532:	4603      	mov	r3, r0
 800a534:	461a      	mov	r2, r3
 800a536:	4629      	mov	r1, r5
 800a538:	4620      	mov	r0, r4
 800a53a:	f000 f973 	bl	800a824 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	4618      	mov	r0, r3
 800a542:	3710      	adds	r7, #16
 800a544:	46bd      	mov	sp, r7
 800a546:	bdb0      	pop	{r4, r5, r7, pc}

0800a548 <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4618      	mov	r0, r3
 800a554:	f000 f984 	bl	800a860 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a558:	4603      	mov	r3, r0
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4618      	mov	r0, r3
 800a55e:	3708      	adds	r7, #8
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f9a3 	bl	800a8b8 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a572:	4603      	mov	r3, r0
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4618      	mov	r0, r3
 800a588:	f000 f977 	bl	800a87a <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a58c:	4603      	mov	r3, r0
 800a58e:	4618      	mov	r0, r3
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a596:	b480      	push	{r7}
 800a598:	b083      	sub	sp, #12
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a5ac:	b590      	push	{r4, r7, lr}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a5b8:	68fc      	ldr	r4, [r7, #12]
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff fba3 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f000 f964 	bl	800a892 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	1d1c      	adds	r4, r3, #4
 800a5ce:	68b8      	ldr	r0, [r7, #8]
 800a5d0:	f7ff ffe1 	bl	800a596 <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f000 f97b 	bl	800a8d4 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd90      	pop	{r4, r7, pc}

0800a5e8 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 f97f 	bl	800a8f6 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a602:	b580      	push	{r7, lr}
 800a604:	b082      	sub	sp, #8
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f97f 	bl	800a90e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a610:	4603      	mov	r3, r0
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b082      	sub	sp, #8
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4618      	mov	r0, r3
 800a626:	f000 f928 	bl	800a87a <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a62a:	4603      	mov	r3, r0
 800a62c:	4618      	mov	r0, r3
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4618      	mov	r0, r3
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a64a:	b590      	push	{r4, r7, lr}
 800a64c:	b085      	sub	sp, #20
 800a64e:	af00      	add	r7, sp, #0
 800a650:	60f8      	str	r0, [r7, #12]
 800a652:	60b9      	str	r1, [r7, #8]
 800a654:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a656:	68fc      	ldr	r4, [r7, #12]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7ff fb54 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a65e:	4603      	mov	r3, r0
 800a660:	4619      	mov	r1, r3
 800a662:	4620      	mov	r0, r4
 800a664:	f000 f915 	bl	800a892 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	1d1c      	adds	r4, r3, #4
 800a66c:	68b8      	ldr	r0, [r7, #8]
 800a66e:	f7ff ffe1 	bl	800a634 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a672:	4603      	mov	r3, r0
 800a674:	4619      	mov	r1, r3
 800a676:	4620      	mov	r0, r4
 800a678:	f000 f957 	bl	800a92a <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	bd90      	pop	{r4, r7, pc}

0800a686 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a686:	b580      	push	{r7, lr}
 800a688:	b082      	sub	sp, #8
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4618      	mov	r0, r3
 800a692:	f000 f95b 	bl	800a94c <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a696:	4603      	mov	r3, r0
 800a698:	4618      	mov	r0, r3
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 f95b 	bl	800a964 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 f8d9 	bl	800a87a <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a6d2:	b480      	push	{r7}
 800a6d4:	b083      	sub	sp, #12
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a6e8:	b590      	push	{r4, r7, lr}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a6f4:	68fc      	ldr	r4, [r7, #12]
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7ff fb05 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	4619      	mov	r1, r3
 800a700:	4620      	mov	r0, r4
 800a702:	f000 f8c6 	bl	800a892 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	1d1c      	adds	r4, r3, #4
 800a70a:	68b8      	ldr	r0, [r7, #8]
 800a70c:	f7ff ffe1 	bl	800a6d2 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a710:	4603      	mov	r3, r0
 800a712:	4619      	mov	r1, r3
 800a714:	4620      	mov	r0, r4
 800a716:	f000 f933 	bl	800a980 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	4618      	mov	r0, r3
 800a71e:	3714      	adds	r7, #20
 800a720:	46bd      	mov	sp, r7
 800a722:	bd90      	pop	{r4, r7, pc}

0800a724 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 f937 	bl	800a9a2 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a734:	4603      	mov	r3, r0
 800a736:	4618      	mov	r0, r3
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a73e:	b580      	push	{r7, lr}
 800a740:	b082      	sub	sp, #8
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f937 	bl	800a9ba <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a74c:	4603      	mov	r3, r0
 800a74e:	4618      	mov	r0, r3
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a756:	b580      	push	{r7, lr}
 800a758:	b082      	sub	sp, #8
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4618      	mov	r0, r3
 800a762:	f000 f88a 	bl	800a87a <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a766:	4603      	mov	r3, r0
 800a768:	4618      	mov	r0, r3
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4618      	mov	r0, r3
 800a77c:	370c      	adds	r7, #12
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr

0800a786 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a786:	b590      	push	{r4, r7, lr}
 800a788:	b085      	sub	sp, #20
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	60f8      	str	r0, [r7, #12]
 800a78e:	60b9      	str	r1, [r7, #8]
 800a790:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a792:	68fc      	ldr	r4, [r7, #12]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7ff fab6 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a79a:	4603      	mov	r3, r0
 800a79c:	4619      	mov	r1, r3
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f000 f877 	bl	800a892 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	1d1c      	adds	r4, r3, #4
 800a7a8:	68b8      	ldr	r0, [r7, #8]
 800a7aa:	f7ff ffe1 	bl	800a770 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f000 f90f 	bl	800a9d6 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd90      	pop	{r4, r7, pc}

0800a7c2 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b082      	sub	sp, #8
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 f913 	bl	800a9f8 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 f913 	bl	800aa10 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 f83b 	bl	800a87a <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a804:	4603      	mov	r3, r0
 800a806:	4618      	mov	r0, r3
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a80e:	b480      	push	{r7}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4618      	mov	r0, r3
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a824:	b590      	push	{r4, r7, lr}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a830:	68fc      	ldr	r4, [r7, #12]
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7ff fa67 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a838:	4603      	mov	r3, r0
 800a83a:	4619      	mov	r1, r3
 800a83c:	4620      	mov	r0, r4
 800a83e:	f000 f828 	bl	800a892 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	1d1c      	adds	r4, r3, #4
 800a846:	68b8      	ldr	r0, [r7, #8]
 800a848:	f7ff ffe1 	bl	800a80e <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a84c:	4603      	mov	r3, r0
 800a84e:	4619      	mov	r1, r3
 800a850:	4620      	mov	r0, r4
 800a852:	f000 f8eb 	bl	800aa2c <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd90      	pop	{r4, r7, pc}

0800a860 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 f8ef 	bl	800aa4e <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a870:	4603      	mov	r3, r0
 800a872:	4618      	mov	r0, r3
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b082      	sub	sp, #8
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f8ef 	bl	800aa66 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 800a888:	4603      	mov	r3, r0
 800a88a:	4618      	mov	r0, r3
 800a88c:	3708      	adds	r7, #8
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 800a892:	b590      	push	{r4, r7, lr}
 800a894:	b083      	sub	sp, #12
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
 800a89a:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 800a89c:	687c      	ldr	r4, [r7, #4]
 800a89e:	6838      	ldr	r0, [r7, #0]
 800a8a0:	f7ff fa31 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 f8e9 	bl	800aa80 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd90      	pop	{r4, r7, pc}

0800a8b8 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	3304      	adds	r3, #4
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f000 f8ec 	bl	800aaa2 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a8de:	6838      	ldr	r0, [r7, #0]
 800a8e0:	f7ff fe59 	bl	800a596 <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b082      	sub	sp, #8
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f8da 	bl	800aab8 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800a904:	4603      	mov	r3, r0
 800a906:	4618      	mov	r0, r3
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a90e:	b580      	push	{r7, lr}
 800a910:	b082      	sub	sp, #8
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3304      	adds	r3, #4
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 f8da 	bl	800aad4 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>
 800a920:	4603      	mov	r3, r0
 800a922:	4618      	mov	r0, r3
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b082      	sub	sp, #8
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a934:	6838      	ldr	r0, [r7, #0]
 800a936:	f7ff fe7d 	bl	800a634 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a93a:	4603      	mov	r3, r0
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	601a      	str	r2, [r3, #0]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4618      	mov	r0, r3
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f8c8 	bl	800aaea <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800a95a:	4603      	mov	r3, r0
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	3304      	adds	r3, #4
 800a970:	4618      	mov	r0, r3
 800a972:	f000 f8c8 	bl	800ab06 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>
 800a976:	4603      	mov	r3, r0
 800a978:	4618      	mov	r0, r3
 800a97a:	3708      	adds	r7, #8
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a98a:	6838      	ldr	r0, [r7, #0]
 800a98c:	f7ff fea1 	bl	800a6d2 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a990:	4603      	mov	r3, r0
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	601a      	str	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4618      	mov	r0, r3
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b082      	sub	sp, #8
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f8b6 	bl	800ab1c <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b082      	sub	sp, #8
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	3304      	adds	r3, #4
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f000 f8b6 	bl	800ab38 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b082      	sub	sp, #8
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a9e0:	6838      	ldr	r0, [r7, #0]
 800a9e2:	f7ff fec5 	bl	800a770 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	601a      	str	r2, [r3, #0]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f8a4 	bl	800ab4e <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800aa06:	4603      	mov	r3, r0
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f000 f8a4 	bl	800ab6a <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 800aa22:	4603      	mov	r3, r0
 800aa24:	4618      	mov	r0, r3
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800aa36:	6838      	ldr	r0, [r7, #0]
 800aa38:	f7ff fee9 	bl	800a80e <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	601a      	str	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4618      	mov	r0, r3
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b082      	sub	sp, #8
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f892 	bl	800ab80 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b082      	sub	sp, #8
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f000 f893 	bl	800ab9c <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 800aa76:	4603      	mov	r3, r0
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800aa8a:	6838      	ldr	r0, [r7, #0]
 800aa8c:	f7ff f93b 	bl	8009d06 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800aa90:	4602      	mov	r2, r0
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6812      	ldr	r2, [r2, #0]
 800aa96:	601a      	str	r2, [r3, #0]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800aaa2:	b480      	push	{r7}
 800aaa4:	b083      	sub	sp, #12
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4618      	mov	r0, r3
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	3304      	adds	r3, #4
 800aac4:	4618      	mov	r0, r3
 800aac6:	f000 f874 	bl	800abb2 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>
 800aaca:	4603      	mov	r3, r0
 800aacc:	4618      	mov	r0, r3
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr

0800aaea <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b082      	sub	sp, #8
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 f866 	bl	800abc8 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>
 800aafc:	4603      	mov	r3, r0
 800aafe:	4618      	mov	r0, r3
 800ab00:	3708      	adds	r7, #8
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ab06:	b480      	push	{r7}
 800ab08:	b083      	sub	sp, #12
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4618      	mov	r0, r3
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	3304      	adds	r3, #4
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 f858 	bl	800abde <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	4618      	mov	r0, r3
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4618      	mov	r0, r3
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b082      	sub	sp, #8
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	3304      	adds	r3, #4
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 f84a 	bl	800abf4 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 800ab60:	4603      	mov	r3, r0
 800ab62:	4618      	mov	r0, r3
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ab6a:	b480      	push	{r7}
 800ab6c:	b083      	sub	sp, #12
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4618      	mov	r0, r3
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f000 f83c 	bl	800ac0a <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 800ab92:	4603      	mov	r3, r0
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4618      	mov	r0, r3
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800abb2:	b480      	push	{r7}
 800abb4:	b083      	sub	sp, #12
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4618      	mov	r0, r3
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>:
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4618      	mov	r0, r3
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>:
 800abde:	b480      	push	{r7}
 800abe0:	b083      	sub	sp, #12
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4618      	mov	r0, r3
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	4618      	mov	r0, r3
 800ac00:	370c      	adds	r7, #12
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr

0800ac0a <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 800ac0a:	b480      	push	{r7}
 800ac0c:	b083      	sub	sp, #12
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4618      	mov	r0, r3
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 f8ca 	bl	800adc4 <_ZNK11flatbuffers6VectorIcE4DataEv>
 800ac30:	4603      	mov	r3, r0
 800ac32:	4618      	mov	r0, r3
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
	...

0800ac3c <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 800ac3c:	b480      	push	{r7}
 800ac3e:	af00      	add	r7, sp, #0
  return names;
 800ac40:	4b02      	ldr	r3, [pc, #8]	; (800ac4c <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	0802c1f0 	.word	0x0802c1f0

0800ac50 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	4603      	mov	r3, r0
 800ac58:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CONV_3D_TRANSPOSE)) return "";
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	72bb      	strb	r3, [r7, #10]
 800ac5e:	238d      	movs	r3, #141	; 0x8d
 800ac60:	72fb      	strb	r3, [r7, #11]
 800ac62:	f107 020b 	add.w	r2, r7, #11
 800ac66:	f107 010a 	add.w	r1, r7, #10
 800ac6a:	1dfb      	adds	r3, r7, #7
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 f8b5 	bl	800addc <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d001      	beq.n	800ac7c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 800ac78:	4b07      	ldr	r3, [pc, #28]	; (800ac98 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 800ac7a:	e008      	b.n	800ac8e <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 800ac7c:	79fb      	ldrb	r3, [r7, #7]
 800ac7e:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 800ac80:	f7ff ffdc 	bl	800ac3c <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 800ac84:	4602      	mov	r2, r0
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	681b      	ldr	r3, [r3, #0]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	080271d4 	.word	0x080271d4

0800ac9c <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2106      	movs	r1, #6
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 f8b2 	bl	800ae12 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800acae:	4603      	mov	r3, r0
  }
 800acb0:	4618      	mov	r0, r3
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	2108      	movs	r1, #8
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe fcb6 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800accc:	4603      	mov	r3, r0
  }
 800acce:	4618      	mov	r0, r3
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
	...

0800acd8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 800acd8:	b580      	push	{r7, lr}
 800acda:	b088      	sub	sp, #32
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
 800ace4:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 800ace6:	2300      	movs	r3, #0
 800ace8:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	2200      	movs	r2, #0
 800acee:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f019 fffe 	bl	8024cf2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800acf6:	4603      	mov	r3, r0
 800acf8:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f7ff ffdc 	bl	800acb8 <_ZNK6tflite12OperatorCode7versionEv>
 800ad00:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX ||
 800ad02:	7fbb      	ldrb	r3, [r7, #30]
 800ad04:	2b8d      	cmp	r3, #141	; 0x8d
 800ad06:	d908      	bls.n	800ad1a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
 800ad08:	7fbb      	ldrb	r3, [r7, #30]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	492a      	ldr	r1, [pc, #168]	; (800adb8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f7fd fdc0 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 800ad14:	2301      	movs	r3, #1
 800ad16:	77fb      	strb	r3, [r7, #31]
 800ad18:	e048      	b.n	800adac <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 800ad1a:	7fbb      	ldrb	r3, [r7, #30]
 800ad1c:	2b20      	cmp	r3, #32
 800ad1e:	d01a      	beq.n	800ad56 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	7fb9      	ldrb	r1, [r7, #30]
 800ad28:	69ba      	ldr	r2, [r7, #24]
 800ad2a:	68b8      	ldr	r0, [r7, #8]
 800ad2c:	4798      	blx	r3
 800ad2e:	4602      	mov	r2, r0
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d137      	bne.n	800adac <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 800ad3c:	7fbb      	ldrb	r3, [r7, #30]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7ff ff86 	bl	800ac50 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800ad44:	4602      	mov	r2, r0
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	491c      	ldr	r1, [pc, #112]	; (800adbc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7fd fda2 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'. "
          "An older version of this builtin might be supported. "
          "Are you using an old TFLite binary with a newer model?\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 800ad50:	2301      	movs	r3, #1
 800ad52:	77fb      	strb	r3, [r7, #31]
 800ad54:	e02a      	b.n	800adac <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f7ff ffa0 	bl	800ac9c <_ZNK6tflite12OperatorCode11custom_codeEv>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	bf0c      	ite	eq
 800ad62:	2301      	moveq	r3, #1
 800ad64:	2300      	movne	r3, #0
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d006      	beq.n	800ad7a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 800ad6c:	4914      	ldr	r1, [pc, #80]	; (800adc0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7fd fd90 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 800ad74:	2301      	movs	r3, #1
 800ad76:	77fb      	strb	r3, [r7, #31]
 800ad78:	e018      	b.n	800adac <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f7ff ff8e 	bl	800ac9c <_ZNK6tflite12OperatorCode11custom_codeEv>
 800ad80:	4603      	mov	r3, r0
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7ff ff4c 	bl	800ac20 <_ZNK11flatbuffers6String5c_strEv>
 800ad88:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	69ba      	ldr	r2, [r7, #24]
 800ad94:	6979      	ldr	r1, [r7, #20]
 800ad96:	68b8      	ldr	r0, [r7, #8]
 800ad98:	4798      	blx	r3
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 800ada8:	2301      	movs	r3, #1
 800adaa:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 800adac:	7ffb      	ldrb	r3, [r7, #31]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3720      	adds	r7, #32
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	080271d8 	.word	0x080271d8
 800adbc:	0802722c 	.word	0x0802722c
 800adc0:	080272d0 	.word	0x080272d0

0800adc4 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	3304      	adds	r3, #4
  }
 800add0:	4618      	mov	r0, r3
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 800addc:	b480      	push	{r7}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	781a      	ldrb	r2, [r3, #0]
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d305      	bcc.n	800ae00 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	781a      	ldrb	r2, [r3, #0]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d201      	bcs.n	800ae04 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 800ae00:	2301      	movs	r3, #1
 800ae02:	e000      	b.n	800ae06 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr

0800ae12 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b082      	sub	sp, #8
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800ae1e:	887b      	ldrh	r3, [r7, #2]
 800ae20:	4619      	mov	r1, r3
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f805 	bl	800ae32 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800ae28:	4603      	mov	r3, r0
  }
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b084      	sub	sp, #16
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800ae3e:	887b      	ldrh	r3, [r7, #2]
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7fd fd75 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	89fb      	ldrh	r3, [r7, #14]
 800ae50:	4413      	add	r3, r2
 800ae52:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ae54:	89fb      	ldrh	r3, [r7, #14]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d006      	beq.n	800ae68 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 800ae5a:	68b8      	ldr	r0, [r7, #8]
 800ae5c:	f7fe fb93 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ae60:	4602      	mov	r2, r0
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	4413      	add	r3, r2
                        : nullptr;
 800ae66:	e000      	b.n	800ae6a <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ae68:	2300      	movs	r3, #0
  }
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3710      	adds	r7, #16
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	ed87 0a01 	vstr	s0, [r7, #4]
 800ae7c:	ed97 0a01 	vldr	s0, [r7, #4]
 800ae80:	f01a f8b0 	bl	8024fe4 <roundf>
 800ae84:	eef0 7a40 	vmov.f32	s15, s0
 800ae88:	eeb0 0a67 	vmov.f32	s0, s15
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800ae92:	b480      	push	{r7}
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 800aea4:	b5b0      	push	{r4, r5, r7, lr}
 800aea6:	b088      	sub	sp, #32
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	ed87 0b02 	vstr	d0, [r7, #8]
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800aeb2:	f04f 0200 	mov.w	r2, #0
 800aeb6:	f04f 0300 	mov.w	r3, #0
 800aeba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aebe:	f7f5 fe35 	bl	8000b2c <__aeabi_dcmpeq>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d006      	beq.n	800aed6 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	2200      	movs	r2, #0
 800aed2:	601a      	str	r2, [r3, #0]
    return;
 800aed4:	e06b      	b.n	800afae <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800aed6:	6838      	ldr	r0, [r7, #0]
 800aed8:	ed97 0b02 	vldr	d0, [r7, #8]
 800aedc:	f01a f804 	bl	8024ee8 <frexp>
 800aee0:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 800aee4:	f04f 0200 	mov.w	r2, #0
 800aee8:	4b32      	ldr	r3, [pc, #200]	; (800afb4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 800aeea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aeee:	f7f5 fbb5 	bl	800065c <__aeabi_dmul>
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	ec43 2b17 	vmov	d7, r2, r3
 800aefa:	eeb0 0a47 	vmov.f32	s0, s14
 800aefe:	eef0 0a67 	vmov.f32	s1, s15
 800af02:	f000 f97a 	bl	800b1fa <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800af06:	ec53 2b10 	vmov	r2, r3, d0
 800af0a:	4610      	mov	r0, r2
 800af0c:	4619      	mov	r1, r3
 800af0e:	f7f5 fecf 	bl	8000cb0 <__aeabi_d2lz>
 800af12:	4602      	mov	r2, r0
 800af14:	460b      	mov	r3, r1
 800af16:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 800af1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af1e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800af22:	f04f 0100 	mov.w	r1, #0
 800af26:	4290      	cmp	r0, r2
 800af28:	eb71 0303 	sbcs.w	r3, r1, r3
 800af2c:	da01      	bge.n	800af32 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 800af2e:	f01a f99e 	bl	802526e <abort>
  if (q_fixed == (1ll << 31)) {
 800af32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af36:	2b00      	cmp	r3, #0
 800af38:	bf08      	it	eq
 800af3a:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 800af3e:	d117      	bne.n	800af70 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 800af40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af44:	0fd9      	lsrs	r1, r3, #31
 800af46:	4608      	mov	r0, r1
 800af48:	f04f 0100 	mov.w	r1, #0
 800af4c:	1884      	adds	r4, r0, r2
 800af4e:	eb41 0503 	adc.w	r5, r1, r3
 800af52:	f04f 0200 	mov.w	r2, #0
 800af56:	f04f 0300 	mov.w	r3, #0
 800af5a:	0862      	lsrs	r2, r4, #1
 800af5c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800af60:	106b      	asrs	r3, r5, #1
 800af62:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	1c5a      	adds	r2, r3, #1
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800af70:	f7ff ff8f 	bl	800ae92 <_ZNSt14numeric_limitsIlE3maxEv>
 800af74:	4603      	mov	r3, r0
 800af76:	4618      	mov	r0, r3
 800af78:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800af7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af80:	4290      	cmp	r0, r2
 800af82:	eb71 0303 	sbcs.w	r3, r1, r3
 800af86:	da01      	bge.n	800af8c <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 800af88:	f01a f971 	bl	802526e <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f113 0f1f 	cmn.w	r3, #31
 800af94:	da08      	bge.n	800afa8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	2200      	movs	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800af9c:	f04f 0200 	mov.w	r2, #0
 800afa0:	f04f 0300 	mov.w	r3, #0
 800afa4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800afa8:	69ba      	ldr	r2, [r7, #24]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	601a      	str	r2, [r3, #0]
}
 800afae:	3720      	adds	r7, #32
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bdb0      	pop	{r4, r5, r7, pc}
 800afb4:	41e00000 	.word	0x41e00000

0800afb8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	ed87 0b02 	vstr	d0, [r7, #8]
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 800afc6:	f04f 0200 	mov.w	r2, #0
 800afca:	4b0d      	ldr	r3, [pc, #52]	; (800b000 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 800afcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800afd0:	f7f5 fdd4 	bl	8000b7c <__aeabi_dcmpgt>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800afda:	f01a f948 	bl	802526e <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800afde:	6839      	ldr	r1, [r7, #0]
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	ed97 0b02 	vldr	d0, [r7, #8]
 800afe6:	f7ff ff5d 	bl	800aea4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	da01      	bge.n	800aff6 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 800aff2:	f01a f93c 	bl	802526e <abort>
}
 800aff6:	bf00      	nop
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	3ff00000 	.word	0x3ff00000

0800b004 <_ZSt3minIdERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01a:	f7f5 fd91 	bl	8000b40 <__aeabi_dcmplt>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d001      	beq.n	800b028 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	e000      	b.n	800b02a <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 800b028:	687b      	ldr	r3, [r7, #4]
    }
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	0000      	movs	r0, r0
 800b034:	0000      	movs	r0, r0
	...

0800b038 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 800b038:	b5b0      	push	{r4, r5, r7, lr}
 800b03a:	b08e      	sub	sp, #56	; 0x38
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	ed87 0b06 	vstr	d0, [r7, #24]
 800b042:	ed87 1b04 	vstr	d1, [r7, #16]
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800b04c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b050:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b054:	f7f5 fb02 	bl	800065c <__aeabi_dmul>
 800b058:	4602      	mov	r2, r0
 800b05a:	460b      	mov	r3, r1
 800b05c:	4614      	mov	r4, r2
 800b05e:	461d      	mov	r5, r3
 800b060:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	fa22 f303 	lsr.w	r3, r2, r3
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7f5 fa8c 	bl	8000588 <__aeabi_i2d>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4620      	mov	r0, r4
 800b076:	4629      	mov	r1, r5
 800b078:	f7f5 faf0 	bl	800065c <__aeabi_dmul>
 800b07c:	4602      	mov	r2, r0
 800b07e:	460b      	mov	r3, r1
 800b080:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800b084:	a30e      	add	r3, pc, #56	; (adr r3, 800b0c0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 800b086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800b08e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b092:	f107 0320 	add.w	r3, r7, #32
 800b096:	4611      	mov	r1, r2
 800b098:	4618      	mov	r0, r3
 800b09a:	f7ff ffb3 	bl	800b004 <_ZSt3minIdERKT_S2_S2_>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 800b0a8:	6879      	ldr	r1, [r7, #4]
 800b0aa:	68b8      	ldr	r0, [r7, #8]
 800b0ac:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800b0b0:	f7ff ff82 	bl	800afb8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 800b0b4:	bf00      	nop
 800b0b6:	3738      	adds	r7, #56	; 0x38
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bdb0      	pop	{r4, r5, r7, pc}
 800b0bc:	f3af 8000 	nop.w
 800b0c0:	ffc00000 	.word	0xffc00000
 800b0c4:	41dfffff 	.word	0x41dfffff

0800b0c8 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 800b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	b087      	sub	sp, #28
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	60f8      	str	r0, [r7, #12]
 800b0d2:	60b9      	str	r1, [r7, #8]
 800b0d4:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	fa02 f303 	lsl.w	r3, r2, r3
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7f5 fa51 	bl	8000588 <__aeabi_i2d>
 800b0e6:	4682      	mov	sl, r0
 800b0e8:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	1ad1      	subs	r1, r2, r3
 800b0f0:	f04f 0201 	mov.w	r2, #1
 800b0f4:	f04f 0300 	mov.w	r3, #0
 800b0f8:	f1a1 0620 	sub.w	r6, r1, #32
 800b0fc:	f1c1 0020 	rsb	r0, r1, #32
 800b100:	fa03 f901 	lsl.w	r9, r3, r1
 800b104:	fa02 f606 	lsl.w	r6, r2, r6
 800b108:	ea49 0906 	orr.w	r9, r9, r6
 800b10c:	fa22 f000 	lsr.w	r0, r2, r0
 800b110:	ea49 0900 	orr.w	r9, r9, r0
 800b114:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800b118:	4640      	mov	r0, r8
 800b11a:	4649      	mov	r1, r9
 800b11c:	f7f5 fa70 	bl	8000600 <__aeabi_l2d>
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	4650      	mov	r0, sl
 800b126:	4659      	mov	r1, fp
 800b128:	f7f5 fa98 	bl	800065c <__aeabi_dmul>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	4690      	mov	r8, r2
 800b132:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 800b134:	f04f 0201 	mov.w	r2, #1
 800b138:	f04f 0300 	mov.w	r3, #0
 800b13c:	68b9      	ldr	r1, [r7, #8]
 800b13e:	f1a1 0620 	sub.w	r6, r1, #32
 800b142:	f1c1 0020 	rsb	r0, r1, #32
 800b146:	fa03 f501 	lsl.w	r5, r3, r1
 800b14a:	fa02 f606 	lsl.w	r6, r2, r6
 800b14e:	4335      	orrs	r5, r6
 800b150:	fa22 f000 	lsr.w	r0, r2, r0
 800b154:	4305      	orrs	r5, r0
 800b156:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800b15a:	4620      	mov	r0, r4
 800b15c:	4629      	mov	r1, r5
 800b15e:	f7f5 fa4f 	bl	8000600 <__aeabi_l2d>
 800b162:	4602      	mov	r2, r0
 800b164:	460b      	mov	r3, r1
  const double max_input_rescaled =
 800b166:	4640      	mov	r0, r8
 800b168:	4649      	mov	r1, r9
 800b16a:	f7f5 fba1 	bl	80008b0 <__aeabi_ddiv>
 800b16e:	4602      	mov	r2, r0
 800b170:	460b      	mov	r3, r1
 800b172:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 800b176:	ed97 0b04 	vldr	d0, [r7, #16]
 800b17a:	f019 fe35 	bl	8024de8 <floor>
 800b17e:	ec53 2b10 	vmov	r2, r3, d0
 800b182:	4610      	mov	r0, r2
 800b184:	4619      	mov	r1, r3
 800b186:	f7f5 fd03 	bl	8000b90 <__aeabi_d2iz>
 800b18a:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	371c      	adds	r7, #28
 800b190:	46bd      	mov	sp, r7
 800b192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b196 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800b196:	b480      	push	{r7}
 800b198:	b083      	sub	sp, #12
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
 800b19e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	ed93 7a00 	vldr	s14, [r3]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	edd3 7a00 	vldr	s15, [r3]
 800b1ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b4:	d501      	bpl.n	800b1ba <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	e000      	b.n	800b1bc <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800b1ba:	687b      	ldr	r3, [r7, #4]
    }
 800b1bc:	4618      	mov	r0, r3
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	ed93 7a00 	vldr	s14, [r3]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	edd3 7a00 	vldr	s15, [r3]
 800b1de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1e6:	d501      	bpl.n	800b1ec <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	e000      	b.n	800b1ee <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800b1ec:	687b      	ldr	r3, [r7, #4]
    }
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b082      	sub	sp, #8
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	ed87 0b00 	vstr	d0, [r7]
 800b204:	ed97 0b00 	vldr	d0, [r7]
 800b208:	f019 fea6 	bl	8024f58 <round>
 800b20c:	eeb0 7a40 	vmov.f32	s14, s0
 800b210:	eef0 7a60 	vmov.f32	s15, s1
 800b214:	eeb0 0a47 	vmov.f32	s0, s14
 800b218:	eef0 0a67 	vmov.f32	s1, s15
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 800b222:	b580      	push	{r7, lr}
 800b224:	b082      	sub	sp, #8
 800b226:	af00      	add	r7, sp, #0
 800b228:	ed87 0a01 	vstr	s0, [r7, #4]
 800b22c:	ed97 0a01 	vldr	s0, [r7, #4]
 800b230:	f7ff fe1f 	bl	800ae72 <_ZSt5roundf>
 800b234:	eef0 7a40 	vmov.f32	s15, s0
 800b238:	eeb0 0a67 	vmov.f32	s0, s15
 800b23c:	3708      	adds	r7, #8
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 800b242:	b480      	push	{r7}
 800b244:	af00      	add	r7, sp, #0
 800b246:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800b24a:	4618      	mov	r0, r3
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 800b254:	b480      	push	{r7}
 800b256:	af00      	add	r7, sp, #0
 800b258:	237f      	movs	r3, #127	; 0x7f
 800b25a:	4618      	mov	r0, r3
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 800b264:	b480      	push	{r7}
 800b266:	af00      	add	r7, sp, #0
 800b268:	2300      	movs	r3, #0
 800b26a:	4618      	mov	r0, r3
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 800b274:	b480      	push	{r7}
 800b276:	af00      	add	r7, sp, #0
 800b278:	23ff      	movs	r3, #255	; 0xff
 800b27a:	4618      	mov	r0, r3
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 800b284:	b480      	push	{r7}
 800b286:	af00      	add	r7, sp, #0
 800b288:	4b02      	ldr	r3, [pc, #8]	; (800b294 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800b28a:	4618      	mov	r0, r3
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	ffff8000 	.word	0xffff8000

0800b298 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 800b298:	b480      	push	{r7}
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr

0800b2aa <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800b2aa:	b480      	push	{r7}
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	370c      	adds	r7, #12
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 800b2d6:	b480      	push	{r7}
 800b2d8:	b083      	sub	sp, #12
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	689a      	ldr	r2, [r3, #8]
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	4413      	add	r3, r2
 800b2ea:	685b      	ldr	r3, [r3, #4]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
 800b2f8:	b480      	push	{r7}
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 800b300:	f04f 0201 	mov.w	r2, #1
 800b304:	f04f 0300 	mov.w	r3, #0
 800b308:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800b30c:	2300      	movs	r3, #0
 800b30e:	60fb      	str	r3, [r7, #12]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	429a      	cmp	r2, r3
 800b318:	da1b      	bge.n	800b352 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	4413      	add	r3, r2
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	461a      	mov	r2, r3
 800b326:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b32a:	6979      	ldr	r1, [r7, #20]
 800b32c:	fb02 f001 	mul.w	r0, r2, r1
 800b330:	6939      	ldr	r1, [r7, #16]
 800b332:	fb03 f101 	mul.w	r1, r3, r1
 800b336:	4401      	add	r1, r0
 800b338:	6938      	ldr	r0, [r7, #16]
 800b33a:	fba0 2302 	umull	r2, r3, r0, r2
 800b33e:	4419      	add	r1, r3
 800b340:	460b      	mov	r3, r1
 800b342:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800b346:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	3301      	adds	r3, #1
 800b34e:	60fb      	str	r3, [r7, #12]
 800b350:	e7de      	b.n	800b310 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 800b352:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800b356:	4610      	mov	r0, r2
 800b358:	4619      	mov	r1, r3
 800b35a:	371c      	adds	r7, #28
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <_ZN6tflite11NumElementsEPK12TfLiteTensor>:

inline int64_t NumElements(const TfLiteTensor* t) {
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	4618      	mov	r0, r3
 800b372:	f7ff ffc1 	bl	800b2f8 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 800b376:	4602      	mov	r2, r0
 800b378:	460b      	mov	r3, r1
}
 800b37a:	4610      	mov	r0, r2
 800b37c:	4619      	mov	r1, r3
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	ed87 0b00 	vstr	d0, [r7]
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	6879      	ldr	r1, [r7, #4]
 800b392:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b396:	ec43 2b17 	vmov	d7, r2, r3
 800b39a:	eeb0 0a47 	vmov.f32	s0, s14
 800b39e:	eef0 0a67 	vmov.f32	s1, s15
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d005      	beq.n	800b3ca <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	689a      	ldr	r2, [r3, #8]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	019b      	lsls	r3, r3, #6
 800b3c6:	4413      	add	r3, r2
 800b3c8:	e006      	b.n	800b3d8 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	4798      	blx	r3
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	bf00      	nop
  }
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 800b3e0:	b480      	push	{r7}
 800b3e2:	b087      	sub	sp, #28
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	607a      	str	r2, [r7, #4]
 800b3ec:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	db0f      	blt.n	800b414 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	da0b      	bge.n	800b414 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	683a      	ldr	r2, [r7, #0]
 800b402:	4413      	add	r3, r2
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b40e:	d001      	beq.n	800b414 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	e001      	b.n	800b418 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 800b414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b418:	4618      	mov	r0, r3
 800b41a:	371c      	adds	r7, #28
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 800b434:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800b43c:	6879      	ldr	r1, [r7, #4]
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	f7ff ffce 	bl	800b3e0 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800b444:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	da01      	bge.n	800b450 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800b44c:	2300      	movs	r3, #0
 800b44e:	e005      	b.n	800b45c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 800b450:	6979      	ldr	r1, [r7, #20]
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f7ff ffaa 	bl	800b3ac <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800b458:	4603      	mov	r3, r0
 800b45a:	bf00      	nop
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3718      	adds	r7, #24
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	68b9      	ldr	r1, [r7, #8]
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f7ff ffd5 	bl	800b424 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 800b47a:	4603      	mov	r3, r0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 800b494:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800b49c:	6879      	ldr	r1, [r7, #4]
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f7ff ff9e 	bl	800b3e0 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800b4a4:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	da01      	bge.n	800b4b0 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	e005      	b.n	800b4bc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 800b4b0:	6979      	ldr	r1, [r7, #20]
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f7ff ff7a 	bl	800b3ac <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	bf00      	nop
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3718      	adds	r7, #24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	68b9      	ldr	r1, [r7, #8]
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f7ff ffc5 	bl	800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800b4da:	4603      	mov	r3, r0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 800b4e4:	b5b0      	push	{r4, r5, r7, lr}
 800b4e6:	b09c      	sub	sp, #112	; 0x70
 800b4e8:	af04      	add	r7, sp, #16
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
 800b4f0:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d013      	beq.n	800b524 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	695c      	ldr	r4, [r3, #20]
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b506:	461a      	mov	r2, r3
 800b508:	2301      	movs	r3, #1
 800b50a:	9303      	str	r3, [sp, #12]
 800b50c:	9202      	str	r2, [sp, #8]
 800b50e:	4b98      	ldr	r3, [pc, #608]	; (800b770 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800b510:	9301      	str	r3, [sp, #4]
 800b512:	4b98      	ldr	r3, [pc, #608]	; (800b774 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	23d8      	movs	r3, #216	; 0xd8
 800b518:	4a97      	ldr	r2, [pc, #604]	; (800b778 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b51a:	4998      	ldr	r1, [pc, #608]	; (800b77c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	47a0      	blx	r4
 800b520:	2301      	movs	r3, #1
 800b522:	e173      	b.n	800b80c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d013      	beq.n	800b556 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	695c      	ldr	r4, [r3, #20]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b538:	461a      	mov	r2, r3
 800b53a:	2301      	movs	r3, #1
 800b53c:	9303      	str	r3, [sp, #12]
 800b53e:	9202      	str	r2, [sp, #8]
 800b540:	4b8b      	ldr	r3, [pc, #556]	; (800b770 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	4b8e      	ldr	r3, [pc, #568]	; (800b780 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	23da      	movs	r3, #218	; 0xda
 800b54a:	4a8b      	ldr	r2, [pc, #556]	; (800b778 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b54c:	498b      	ldr	r1, [pc, #556]	; (800b77c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	47a0      	blx	r4
 800b552:	2301      	movs	r3, #1
 800b554:	e15a      	b.n	800b80c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b55a:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 800b55c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10a      	bne.n	800b578 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	695c      	ldr	r4, [r3, #20]
 800b566:	4b87      	ldr	r3, [pc, #540]	; (800b784 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	23e5      	movs	r3, #229	; 0xe5
 800b56c:	4a82      	ldr	r2, [pc, #520]	; (800b778 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b56e:	4986      	ldr	r1, [pc, #536]	; (800b788 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	47a0      	blx	r4
 800b574:	2301      	movs	r3, #1
 800b576:	e149      	b.n	800b80c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 800b578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10a      	bne.n	800b596 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	695c      	ldr	r4, [r3, #20]
 800b584:	4b81      	ldr	r3, [pc, #516]	; (800b78c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	23e6      	movs	r3, #230	; 0xe6
 800b58a:	4a7b      	ldr	r2, [pc, #492]	; (800b778 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b58c:	497e      	ldr	r1, [pc, #504]	; (800b788 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	47a0      	blx	r4
 800b592:	2301      	movs	r3, #1
 800b594:	e13a      	b.n	800b80c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 800b596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	bfcc      	ite	gt
 800b5a0:	2301      	movgt	r3, #1
 800b5a2:	2300      	movle	r3, #0
 800b5a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 800b5a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d067      	beq.n	800b680 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	2b09      	cmp	r3, #9
 800b5b6:	d00e      	beq.n	800b5d6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	2b07      	cmp	r3, #7
 800b5be:	d00a      	beq.n	800b5d6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	695c      	ldr	r4, [r3, #20]
 800b5c4:	4b72      	ldr	r3, [pc, #456]	; (800b790 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	23ea      	movs	r3, #234	; 0xea
 800b5ca:	4a6b      	ldr	r2, [pc, #428]	; (800b778 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b5cc:	496e      	ldr	r1, [pc, #440]	; (800b788 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	47a0      	blx	r4
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e11a      	b.n	800b80c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	2b09      	cmp	r3, #9
 800b5dc:	d012      	beq.n	800b604 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	695c      	ldr	r4, [r3, #20]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	2309      	movs	r3, #9
 800b5ea:	9303      	str	r3, [sp, #12]
 800b5ec:	9202      	str	r2, [sp, #8]
 800b5ee:	4b69      	ldr	r3, [pc, #420]	; (800b794 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 800b5f0:	9301      	str	r3, [sp, #4]
 800b5f2:	4b69      	ldr	r3, [pc, #420]	; (800b798 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	23ec      	movs	r3, #236	; 0xec
 800b5f8:	4a5f      	ldr	r2, [pc, #380]	; (800b778 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b5fa:	4960      	ldr	r1, [pc, #384]	; (800b77c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800b5fc:	68f8      	ldr	r0, [r7, #12]
 800b5fe:	47a0      	blx	r4
 800b600:	2301      	movs	r3, #1
 800b602:	e103      	b.n	800b80c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 800b604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b60e:	429a      	cmp	r2, r3
 800b610:	d013      	beq.n	800b63a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	695c      	ldr	r4, [r3, #20]
 800b616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b620:	9203      	str	r2, [sp, #12]
 800b622:	9302      	str	r3, [sp, #8]
 800b624:	4b5d      	ldr	r3, [pc, #372]	; (800b79c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 800b626:	9301      	str	r3, [sp, #4]
 800b628:	4b5d      	ldr	r3, [pc, #372]	; (800b7a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	23ed      	movs	r3, #237	; 0xed
 800b62e:	4a52      	ldr	r2, [pc, #328]	; (800b778 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b630:	4952      	ldr	r1, [pc, #328]	; (800b77c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	47a0      	blx	r4
 800b636:	2301      	movs	r3, #1
 800b638:	e0e8      	b.n	800b80c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	689a      	ldr	r2, [r3, #8]
 800b63e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	4413      	add	r3, r2
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d017      	beq.n	800b680 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	695c      	ldr	r4, [r3, #20]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	689a      	ldr	r2, [r3, #8]
 800b658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	4413      	add	r3, r2
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	9303      	str	r3, [sp, #12]
 800b664:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b668:	9302      	str	r3, [sp, #8]
 800b66a:	4b4e      	ldr	r3, [pc, #312]	; (800b7a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 800b66c:	9301      	str	r3, [sp, #4]
 800b66e:	4b4b      	ldr	r3, [pc, #300]	; (800b79c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	23ee      	movs	r3, #238	; 0xee
 800b674:	4a40      	ldr	r2, [pc, #256]	; (800b778 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b676:	4941      	ldr	r1, [pc, #260]	; (800b77c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	47a0      	blx	r4
 800b67c:	2301      	movs	r3, #1
 800b67e:	e0c5      	b.n	800b80c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 800b686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 800b68c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	3304      	adds	r3, #4
 800b692:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 800b694:	2300      	movs	r3, #0
 800b696:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b698:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b69a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	da47      	bge.n	800b732 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 800b6a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d005      	beq.n	800b6b6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 800b6aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6b0:	4413      	add	r3, r2
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	e001      	b.n	800b6ba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 800b6b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 800b6bc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b6be:	f7f4 ff75 	bl	80005ac <__aeabi_f2d>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 800b6ca:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b6cc:	f7f4 ff6e 	bl	80005ac <__aeabi_f2d>
 800b6d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b6d4:	f7f4 ffc2 	bl	800065c <__aeabi_dmul>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4614      	mov	r4, r2
 800b6de:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 800b6e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b6e2:	f7f4 ff63 	bl	80005ac <__aeabi_f2d>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	f7f5 f8df 	bl	80008b0 <__aeabi_ddiv>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 800b6fa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b6fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b702:	4611      	mov	r1, r2
 800b704:	4618      	mov	r0, r3
 800b706:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800b70a:	f7ff fbcb 	bl	800aea4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 800b70e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b716:	4413      	add	r3, r2
 800b718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b71a:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 800b71c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b724:	4413      	add	r3, r2
 800b726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b728:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 800b72a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b72c:	3301      	adds	r3, #1
 800b72e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b730:	e7b2      	b.n	800b698 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	2b03      	cmp	r3, #3
 800b738:	d146      	bne.n	800b7c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 800b73a:	f04f 0200 	mov.w	r2, #0
 800b73e:	f04f 0300 	mov.w	r3, #0
 800b742:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800b746:	f107 0318 	add.w	r3, r7, #24
 800b74a:	9301      	str	r3, [sp, #4]
 800b74c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	68b9      	ldr	r1, [r7, #8]
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f000 f85e 	bl	800b818 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800b75c:	4603      	mov	r3, r0
 800b75e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b766:	2b00      	cmp	r3, #0
 800b768:	d01e      	beq.n	800b7a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 800b76a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b76e:	e04d      	b.n	800b80c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
 800b770:	080273c4 	.word	0x080273c4
 800b774:	080273e0 	.word	0x080273e0
 800b778:	0802736c 	.word	0x0802736c
 800b77c:	080273a8 	.word	0x080273a8
 800b780:	080273fc 	.word	0x080273fc
 800b784:	08027430 	.word	0x08027430
 800b788:	08027418 	.word	0x08027418
 800b78c:	08027444 	.word	0x08027444
 800b790:	08027460 	.word	0x08027460
 800b794:	0802749c 	.word	0x0802749c
 800b798:	080274a8 	.word	0x080274a8
 800b79c:	080274b8 	.word	0x080274b8
 800b7a0:	080274c8 	.word	0x080274c8
 800b7a4:	080274ec 	.word	0x080274ec
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 800b7a8:	ed97 7b06 	vldr	d7, [r7, #24]
 800b7ac:	f107 0314 	add.w	r3, r7, #20
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b7b4:	eeb0 0a47 	vmov.f32	s0, s14
 800b7b8:	eef0 0a67 	vmov.f32	s1, s15
 800b7bc:	f7ff fb72 	bl	800aea4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	425a      	negs	r2, r3
 800b7c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b7c6:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	2b09      	cmp	r3, #9
 800b7ce:	d007      	beq.n	800b7e0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	2b03      	cmp	r3, #3
 800b7d6:	d003      	beq.n	800b7e0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800b7dc:	2b07      	cmp	r3, #7
 800b7de:	d114      	bne.n	800b80a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800b7e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7e2:	7819      	ldrb	r1, [r3, #0]
 800b7e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b7ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f000 fa03 	bl	800bbfc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b7fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
 800b804:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b808:	e000      	b.n	800b80c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3760      	adds	r7, #96	; 0x60
 800b810:	46bd      	mov	sp, r7
 800b812:	bdb0      	pop	{r4, r5, r7, pc}
 800b814:	0000      	movs	r0, r0
	...

0800b818 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800b818:	b5b0      	push	{r4, r5, r7, lr}
 800b81a:	b08e      	sub	sp, #56	; 0x38
 800b81c:	af02      	add	r7, sp, #8
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]
 800b824:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7f4 febe 	bl	80005ac <__aeabi_f2d>
 800b830:	4604      	mov	r4, r0
 800b832:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	4618      	mov	r0, r3
 800b83a:	f7f4 feb7 	bl	80005ac <__aeabi_f2d>
 800b83e:	4602      	mov	r2, r0
 800b840:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800b842:	4620      	mov	r0, r4
 800b844:	4629      	mov	r1, r5
 800b846:	f7f4 ff09 	bl	800065c <__aeabi_dmul>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d04b      	beq.n	800b8f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7f4 fea5 	bl	80005ac <__aeabi_f2d>
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800b86a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b86e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b872:	f7f4 fd3b 	bl	80002ec <__aeabi_dsub>
 800b876:	4602      	mov	r2, r0
 800b878:	460b      	mov	r3, r1
 800b87a:	ec43 2b17 	vmov	d7, r2, r3
 800b87e:	eeb0 0a47 	vmov.f32	s0, s14
 800b882:	eef0 0a67 	vmov.f32	s1, s15
 800b886:	f7ff fd7d 	bl	800b384 <_ZSt3absd>
 800b88a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800b88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	4618      	mov	r0, r3
 800b894:	f7f4 fe8a 	bl	80005ac <__aeabi_f2d>
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 800b8a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b8a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b8a8:	f7f5 f802 	bl	80008b0 <__aeabi_ddiv>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	461c      	mov	r4, r3
 800b8b8:	a318      	add	r3, pc, #96	; (adr r3, 800b91c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 800b8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8be:	f7f5 f949 	bl	8000b54 <__aeabi_dcmple>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d101      	bne.n	800b8cc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	461c      	mov	r4, r3
 800b8cc:	b2e3      	uxtb	r3, r4
 800b8ce:	f083 0301 	eor.w	r3, r3, #1
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00b      	beq.n	800b8f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	695c      	ldr	r4, [r3, #20]
 800b8dc:	4b0c      	ldr	r3, [pc, #48]	; (800b910 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	f44f 739e 	mov.w	r3, #316	; 0x13c
 800b8e4:	4a0b      	ldr	r2, [pc, #44]	; (800b914 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800b8e6:	490c      	ldr	r1, [pc, #48]	; (800b918 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	47a0      	blx	r4
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e009      	b.n	800b904 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800b8f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8f2:	9300      	str	r3, [sp, #0]
 800b8f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	68b9      	ldr	r1, [r7, #8]
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f000 f812 	bl	800b924 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800b900:	4603      	mov	r3, r0
                                          multiplier);
 800b902:	bf00      	nop
}
 800b904:	4618      	mov	r0, r3
 800b906:	3730      	adds	r7, #48	; 0x30
 800b908:	46bd      	mov	sp, r7
 800b90a:	bdb0      	pop	{r4, r5, r7, pc}
 800b90c:	f3af 8000 	nop.w
 800b910:	0802752c 	.word	0x0802752c
 800b914:	0802736c 	.word	0x0802736c
 800b918:	08027418 	.word	0x08027418
 800b91c:	47ae147b 	.word	0x47ae147b
 800b920:	3f947ae1 	.word	0x3f947ae1

0800b924 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800b924:	b590      	push	{r4, r7, lr}
 800b926:	b089      	sub	sp, #36	; 0x24
 800b928:	af02      	add	r7, sp, #8
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
 800b930:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	ed93 7a03 	vldr	s14, [r3, #12]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	edd3 7a03 	vldr	s15, [r3, #12]
 800b93e:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 800b942:	ee17 0a90 	vmov	r0, s15
 800b946:	f7f4 fe31 	bl	80005ac <__aeabi_f2d>
 800b94a:	4602      	mov	r2, r0
 800b94c:	460b      	mov	r3, r1
 800b94e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800b952:	2301      	movs	r3, #1
 800b954:	461c      	mov	r4, r3
 800b956:	f04f 0200 	mov.w	r2, #0
 800b95a:	f04f 0300 	mov.w	r3, #0
 800b95e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b962:	f7f5 f901 	bl	8000b68 <__aeabi_dcmpge>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d101      	bne.n	800b970 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 800b96c:	2300      	movs	r3, #0
 800b96e:	461c      	mov	r4, r3
 800b970:	b2e3      	uxtb	r3, r4
 800b972:	f083 0301 	eor.w	r3, r3, #1
 800b976:	b2db      	uxtb	r3, r3
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00b      	beq.n	800b994 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	695c      	ldr	r4, [r3, #20]
 800b980:	4b0f      	ldr	r3, [pc, #60]	; (800b9c0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	f240 1349 	movw	r3, #329	; 0x149
 800b988:	4a0e      	ldr	r2, [pc, #56]	; (800b9c4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800b98a:	490f      	ldr	r1, [pc, #60]	; (800b9c8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	47a0      	blx	r4
 800b990:	2301      	movs	r3, #1
 800b992:	e010      	b.n	800b9b6 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	4618      	mov	r0, r3
 800b99a:	f7f4 fe07 	bl	80005ac <__aeabi_f2d>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b9a6:	f7f4 ff83 	bl	80008b0 <__aeabi_ddiv>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9b0:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	371c      	adds	r7, #28
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd90      	pop	{r4, r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	08027550 	.word	0x08027550
 800b9c4:	0802736c 	.word	0x0802736c
 800b9c8:	08027418 	.word	0x08027418

0800b9cc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 800b9cc:	b590      	push	{r4, r7, lr}
 800b9ce:	b08b      	sub	sp, #44	; 0x2c
 800b9d0:	af02      	add	r7, sp, #8
 800b9d2:	6178      	str	r0, [r7, #20]
 800b9d4:	ed87 0a04 	vstr	s0, [r7, #16]
 800b9d8:	60f9      	str	r1, [r7, #12]
 800b9da:	edc7 0a02 	vstr	s1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 800b9e0:	ed97 7a02 	vldr	s14, [r7, #8]
 800b9e4:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b9ec:	eeb0 0a66 	vmov.f32	s0, s13
 800b9f0:	f7ff fc17 	bl	800b222 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800b9f4:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 800b9f8:	f7ff fc57 	bl	800b2aa <_ZNSt14numeric_limitsIlE3minEv>
 800b9fc:	ee07 0a90 	vmov	s15, r0
 800ba00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba04:	ed97 7a07 	vldr	s14, [r7, #28]
 800ba08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba10:	db0e      	blt.n	800ba30 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 800ba12:	f7ff fa3e 	bl	800ae92 <_ZNSt14numeric_limitsIlE3maxEv>
 800ba16:	ee07 0a90 	vmov	s15, r0
 800ba1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 800ba1e:	ed97 7a07 	vldr	s14, [r7, #28]
 800ba22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba2a:	d801      	bhi.n	800ba30 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e000      	b.n	800ba32 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 800ba30:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 800ba32:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 800ba34:	7efb      	ldrb	r3, [r7, #27]
 800ba36:	f083 0301 	eor.w	r3, r3, #1
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00b      	beq.n	800ba58 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	695c      	ldr	r4, [r3, #20]
 800ba44:	4b0c      	ldr	r3, [pc, #48]	; (800ba78 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	f240 1357 	movw	r3, #343	; 0x157
 800ba4c:	4a0b      	ldr	r2, [pc, #44]	; (800ba7c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 800ba4e:	490c      	ldr	r1, [pc, #48]	; (800ba80 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 800ba50:	6978      	ldr	r0, [r7, #20]
 800ba52:	47a0      	blx	r4
 800ba54:	2301      	movs	r3, #1
 800ba56:	e00a      	b.n	800ba6e <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 800ba58:	edd7 7a07 	vldr	s15, [r7, #28]
 800ba5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba60:	ee17 2a90 	vmov	r2, s15
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	441a      	add	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3724      	adds	r7, #36	; 0x24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd90      	pop	{r4, r7, pc}
 800ba76:	bf00      	nop
 800ba78:	0802756c 	.word	0x0802756c
 800ba7c:	0802736c 	.word	0x0802736c
 800ba80:	08027418 	.word	0x08027418

0800ba84 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b08a      	sub	sp, #40	; 0x28
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	607a      	str	r2, [r7, #4]
 800ba8e:	603b      	str	r3, [r7, #0]
 800ba90:	460b      	mov	r3, r1
 800ba92:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 800ba94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 800ba9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 800baa0:	7afb      	ldrb	r3, [r7, #11]
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d120      	bne.n	800bae8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 800baa6:	f107 0314 	add.w	r3, r7, #20
 800baaa:	461a      	mov	r2, r3
 800baac:	eddf 0a52 	vldr	s1, [pc, #328]	; 800bbf8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 800bab0:	6a39      	ldr	r1, [r7, #32]
 800bab2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f7ff ff88 	bl	800b9cc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800babc:	4603      	mov	r3, r0
 800babe:	76fb      	strb	r3, [r7, #27]
 800bac0:	7efb      	ldrb	r3, [r7, #27]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d001      	beq.n	800baca <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 800bac6:	7efb      	ldrb	r3, [r7, #27]
 800bac8:	e091      	b.n	800bbee <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800baca:	f107 0214 	add.w	r2, r7, #20
 800bace:	1d3b      	adds	r3, r7, #4
 800bad0:	4611      	mov	r1, r2
 800bad2:	4618      	mov	r0, r3
 800bad4:	f000 f912 	bl	800bcfc <_ZSt3maxIlERKT_S2_S2_>
 800bad8:	4603      	mov	r3, r0
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bade:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800bae0:	683a      	ldr	r2, [r7, #0]
 800bae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae4:	601a      	str	r2, [r3, #0]
 800bae6:	e081      	b.n	800bbec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 800bae8:	7afb      	ldrb	r3, [r7, #11]
 800baea:	2b03      	cmp	r3, #3
 800baec:	d13a      	bne.n	800bb64 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 800baee:	f107 0314 	add.w	r3, r7, #20
 800baf2:	461a      	mov	r2, r3
 800baf4:	eddf 0a40 	vldr	s1, [pc, #256]	; 800bbf8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 800baf8:	6a39      	ldr	r1, [r7, #32]
 800bafa:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f7ff ff64 	bl	800b9cc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800bb04:	4603      	mov	r3, r0
 800bb06:	777b      	strb	r3, [r7, #29]
 800bb08:	7f7b      	ldrb	r3, [r7, #29]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 800bb0e:	7f7b      	ldrb	r3, [r7, #29]
 800bb10:	e06d      	b.n	800bbee <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800bb12:	f107 0214 	add.w	r2, r7, #20
 800bb16:	1d3b      	adds	r3, r7, #4
 800bb18:	4611      	mov	r1, r2
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f000 f8ee 	bl	800bcfc <_ZSt3maxIlERKT_S2_S2_>
 800bb20:	4603      	mov	r3, r0
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb26:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 800bb28:	f107 0314 	add.w	r3, r7, #20
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800bb32:	6a39      	ldr	r1, [r7, #32]
 800bb34:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f7ff ff47 	bl	800b9cc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	773b      	strb	r3, [r7, #28]
 800bb42:	7f3b      	ldrb	r3, [r7, #28]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d001      	beq.n	800bb4c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 800bb48:	7f3b      	ldrb	r3, [r7, #28]
 800bb4a:	e050      	b.n	800bbee <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 800bb4c:	f107 0214 	add.w	r2, r7, #20
 800bb50:	463b      	mov	r3, r7
 800bb52:	4611      	mov	r1, r2
 800bb54:	4618      	mov	r0, r3
 800bb56:	f000 f8bd 	bl	800bcd4 <_ZSt3minIlERKT_S2_S2_>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb60:	601a      	str	r2, [r3, #0]
 800bb62:	e043      	b.n	800bbec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 800bb64:	7afb      	ldrb	r3, [r7, #11]
 800bb66:	2b02      	cmp	r3, #2
 800bb68:	d13a      	bne.n	800bbe0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 800bb6a:	f107 0314 	add.w	r3, r7, #20
 800bb6e:	461a      	mov	r2, r3
 800bb70:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800bb74:	6a39      	ldr	r1, [r7, #32]
 800bb76:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f7ff ff26 	bl	800b9cc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800bb80:	4603      	mov	r3, r0
 800bb82:	77fb      	strb	r3, [r7, #31]
 800bb84:	7ffb      	ldrb	r3, [r7, #31]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 800bb8a:	7ffb      	ldrb	r3, [r7, #31]
 800bb8c:	e02f      	b.n	800bbee <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800bb8e:	f107 0214 	add.w	r2, r7, #20
 800bb92:	1d3b      	adds	r3, r7, #4
 800bb94:	4611      	mov	r1, r2
 800bb96:	4618      	mov	r0, r3
 800bb98:	f000 f8b0 	bl	800bcfc <_ZSt3maxIlERKT_S2_S2_>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba2:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 800bba4:	f107 0314 	add.w	r3, r7, #20
 800bba8:	461a      	mov	r2, r3
 800bbaa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800bbae:	6a39      	ldr	r1, [r7, #32]
 800bbb0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	f7ff ff09 	bl	800b9cc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	77bb      	strb	r3, [r7, #30]
 800bbbe:	7fbb      	ldrb	r3, [r7, #30]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d001      	beq.n	800bbc8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 800bbc4:	7fbb      	ldrb	r3, [r7, #30]
 800bbc6:	e012      	b.n	800bbee <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 800bbc8:	f107 0214 	add.w	r2, r7, #20
 800bbcc:	463b      	mov	r3, r7
 800bbce:	4611      	mov	r1, r2
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f000 f87f 	bl	800bcd4 <_ZSt3minIlERKT_S2_S2_>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	e005      	b.n	800bbec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe4:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbea:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3728      	adds	r7, #40	; 0x28
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	00000000 	.word	0x00000000

0800bbfc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800bbfc:	b590      	push	{r4, r7, lr}
 800bbfe:	b08b      	sub	sp, #44	; 0x2c
 800bc00:	af04      	add	r7, sp, #16
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	607a      	str	r2, [r7, #4]
 800bc06:	603b      	str	r3, [r7, #0]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 800bc10:	2300      	movs	r3, #0
 800bc12:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	2b03      	cmp	r3, #3
 800bc1a:	d108      	bne.n	800bc2e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 800bc1c:	f7ff fb22 	bl	800b264 <_ZNSt14numeric_limitsIhE3minEv>
 800bc20:	4603      	mov	r3, r0
 800bc22:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 800bc24:	f7ff fb26 	bl	800b274 <_ZNSt14numeric_limitsIhE3maxEv>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	613b      	str	r3, [r7, #16]
 800bc2c:	e025      	b.n	800bc7a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	2b09      	cmp	r3, #9
 800bc34:	d108      	bne.n	800bc48 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 800bc36:	f7ff fb04 	bl	800b242 <_ZNSt14numeric_limitsIaE3minEv>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 800bc3e:	f7ff fb09 	bl	800b254 <_ZNSt14numeric_limitsIaE3maxEv>
 800bc42:	4603      	mov	r3, r0
 800bc44:	613b      	str	r3, [r7, #16]
 800bc46:	e018      	b.n	800bc7a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	2b07      	cmp	r3, #7
 800bc4e:	d108      	bne.n	800bc62 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 800bc50:	f7ff fb18 	bl	800b284 <_ZNSt14numeric_limitsIsE3minEv>
 800bc54:	4603      	mov	r3, r0
 800bc56:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 800bc58:	f7ff fb1e 	bl	800b298 <_ZNSt14numeric_limitsIsE3maxEv>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	613b      	str	r3, [r7, #16]
 800bc60:	e00b      	b.n	800bc7a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	695c      	ldr	r4, [r3, #20]
 800bc66:	4b0e      	ldr	r3, [pc, #56]	; (800bca0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	f240 138f 	movw	r3, #399	; 0x18f
 800bc6e:	4a0d      	ldr	r2, [pc, #52]	; (800bca4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 800bc70:	490d      	ldr	r1, [pc, #52]	; (800bca8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	47a0      	blx	r4
 800bc76:	2301      	movs	r3, #1
 800bc78:	e00d      	b.n	800bc96 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 800bc7a:	7af9      	ldrb	r1, [r7, #11]
 800bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7e:	9302      	str	r3, [sp, #8]
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	9301      	str	r3, [sp, #4]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f7ff fef9 	bl	800ba84 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 800bc92:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 800bc94:	bf00      	nop
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	371c      	adds	r7, #28
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd90      	pop	{r4, r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	08027594 	.word	0x08027594
 800bca4:	0802736c 	.word	0x0802736c
 800bca8:	08027418 	.word	0x08027418

0800bcac <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	da01      	bge.n	800bcc6 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	e000      	b.n	800bcc8 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800bcc6:	687b      	ldr	r3, [r7, #4]
    }
 800bcc8:	4618      	mov	r0, r3
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	da01      	bge.n	800bcee <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	e000      	b.n	800bcf0 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800bcee:	687b      	ldr	r3, [r7, #4]
    }
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	da01      	bge.n	800bd16 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	e000      	b.n	800bd18 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800bd16:	687b      	ldr	r3, [r7, #4]
    }
 800bd18:	4618      	mov	r0, r3
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f000 f89c 	bl	800be6c <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4618      	mov	r0, r3
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b082      	sub	sp, #8
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7ff ffeb 	bl	800bd24 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4618      	mov	r0, r3
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
    return TfLiteDelegatePtrVector();
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	601a      	str	r2, [r3, #0]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	605a      	str	r2, [r3, #4]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2200      	movs	r2, #0
 800bd74:	609a      	str	r2, [r3, #8]
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f7ff ffe1 	bl	800bd3e <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	4a04      	ldr	r2, [pc, #16]	; (800bda0 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	601a      	str	r2, [r3, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4618      	mov	r0, r3
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr
 800bda0:	0802c460 	.word	0x0802c460

0800bda4 <_ZN6tflite10OpResolverD0Ev>:
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f7ff ffe9 	bl	800bd84 <_ZN6tflite10OpResolverD1Ev>
 800bdb2:	2104      	movs	r1, #4
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f018 ffd4 	bl	8024d62 <_ZdlPvj>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	2301      	movs	r3, #1
 800bdce:	4618      	mov	r0, r3
 800bdd0:	370c      	adds	r7, #12
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b084      	sub	sp, #16
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	60f8      	str	r0, [r7, #12]
 800bde2:	460b      	mov	r3, r1
 800bde4:	607a      	str	r2, [r7, #4]
 800bde6:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	3318      	adds	r3, #24
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	7afa      	ldrb	r2, [r7, #11]
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	4798      	blx	r3
 800bdf8:	4603      	mov	r3, r0
  }
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 800be02:	b580      	push	{r7, lr}
 800be04:	b084      	sub	sp, #16
 800be06:	af00      	add	r7, sp, #0
 800be08:	60f8      	str	r0, [r7, #12]
 800be0a:	60b9      	str	r1, [r7, #8]
 800be0c:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	331c      	adds	r3, #28
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	68b9      	ldr	r1, [r7, #8]
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	4798      	blx	r3
 800be1c:	4603      	mov	r3, r0
  }
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
	...

0800be28 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	4a05      	ldr	r2, [pc, #20]	; (800be48 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	601a      	str	r2, [r3, #0]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4618      	mov	r0, r3
 800be3a:	f7ff ffa3 	bl	800bd84 <_ZN6tflite10OpResolverD1Ev>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4618      	mov	r0, r3
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	0802c434 	.word	0x0802c434

0800be4c <_ZN6tflite15MicroOpResolverD0Ev>:
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f7ff ffe7 	bl	800be28 <_ZN6tflite15MicroOpResolverD1Ev>
 800be5a:	2104      	movs	r1, #4
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f018 ff80 	bl	8024d62 <_ZdlPvj>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4618      	mov	r0, r3
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 f82b 	bl	800bed0 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f000 f833 	bl	800bee8 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4618      	mov	r0, r3
 800be86:	3708      	adds	r7, #8
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	4a04      	ldr	r2, [pc, #16]	; (800bea8 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	601a      	str	r2, [r3, #0]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4618      	mov	r0, r3
 800be9e:	370c      	adds	r7, #12
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr
 800bea8:	0802c460 	.word	0x0802c460

0800beac <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7ff ffe8 	bl	800be8c <_ZN6tflite10OpResolverC1Ev>
 800bebc:	4a03      	ldr	r2, [pc, #12]	; (800becc <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	601a      	str	r2, [r3, #0]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4618      	mov	r0, r3
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	0802c434 	.word	0x0802c434

0800bed0 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 f819 	bl	800bf10 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	605a      	str	r2, [r3, #4]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	609a      	str	r2, [r3, #8]
	{ }
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4618      	mov	r0, r3
 800bf06:	370c      	adds	r7, #12
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	370c      	adds	r7, #12
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* s) {
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b082      	sub	sp, #8
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  //fprintf(stderr, "%s", s);
  uart_write((uint8_t*)s);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7f6 fee6 	bl	8002d00 <uart_write>
#endif
}
 800bf34:	bf00      	nop
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2104      	movs	r1, #4
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7fd fb93 	bl	8009674 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800bf4e:	4603      	mov	r3, r0
  }
 800bf50:	4618      	mov	r0, r3
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	2106      	movs	r1, #6
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fd fb94 	bl	8009694 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	b2db      	uxtb	r3, r3
  }
 800bf70:	4618      	mov	r0, r3
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	601a      	str	r2, [r3, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	68b9      	ldr	r1, [r7, #8]
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f000 f866 	bl	800c07c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b082      	sub	sp, #8
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b05      	cmp	r3, #5
 800bfc8:	dd08      	ble.n	800bfdc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d004      	beq.n	800bfdc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f018 fec5 	bl	8024d66 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 800bfe6:	b480      	push	{r7}
 800bfe8:	b083      	sub	sp, #12
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4618      	mov	r0, r3
 800bff4:	370c      	adds	r7, #12
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 800bffe:	b480      	push	{r7}
 800c000:	b083      	sub	sp, #12
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b05      	cmp	r3, #5
 800c00c:	dd02      	ble.n	800c014 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	e001      	b.n	800c018 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	3304      	adds	r3, #4
  }
 800c018:	4618      	mov	r0, r3
 800c01a:	370c      	adds	r7, #12
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b05      	cmp	r3, #5
 800c034:	dd08      	ble.n	800c048 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d004      	beq.n	800c048 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	4618      	mov	r0, r3
 800c044:	f018 fe8f 	bl	8024d66 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	683a      	ldr	r2, [r7, #0]
 800c04c:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	2b05      	cmp	r3, #5
 800c052:	dd0f      	ble.n	800c074 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d201      	bcs.n	800c062 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	e001      	b.n	800c066 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 800c062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c066:	4618      	mov	r0, r3
 800c068:	f018 fe9f 	bl	8024daa <_Znaj>
 800c06c:	4603      	mov	r3, r0
 800c06e:	461a      	mov	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800c074:	bf00      	nop
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b086      	sub	sp, #24
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 800c088:	68b9      	ldr	r1, [r7, #8]
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f7ff ffca 	bl	800c024 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f7ff ffb4 	bl	800bffe <_ZN6tflite12RuntimeShape8DimsDataEv>
 800c096:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	461a      	mov	r2, r3
 800c09e:	6879      	ldr	r1, [r7, #4]
 800c0a0:	6978      	ldr	r0, [r7, #20]
 800c0a2:	f019 f95f 	bl	8025364 <memcpy>
  }
 800c0a6:	bf00      	nop
 800c0a8:	3718      	adds	r7, #24
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b086      	sub	sp, #24
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d103      	bne.n	800c0c6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7ff ff5a 	bl	800bf78 <_ZN6tflite12RuntimeShapeC1Ev>
 800c0c4:	e00d      	b.n	800c0e2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800c0d8:	68fa      	ldr	r2, [r7, #12]
 800c0da:	6939      	ldr	r1, [r7, #16]
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f7ff ff59 	bl	800bf94 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	3718      	adds	r7, #24
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 800c0ea:	b480      	push	{r7}
 800c0ec:	b085      	sub	sp, #20
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 800c0f8:	683a      	ldr	r2, [r7, #0]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	1e5a      	subs	r2, r3, #1
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	fbb2 f3f3 	udiv	r3, r2, r3
 800c106:	683a      	ldr	r2, [r7, #0]
 800c108:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 800c10c:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800c10e:	68bb      	ldr	r3, [r7, #8]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3714      	adds	r7, #20
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c132:	683a      	ldr	r2, [r7, #0]
 800c134:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 800c138:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800c13a:	68bb      	ldr	r3, [r7, #8]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3714      	adds	r7, #20
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4413      	add	r3, r2
 800c158:	1e5a      	subs	r2, r3, #1
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	fb02 f303 	mul.w	r3, r2, r3
 800c166:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 800c168:	68fb      	ldr	r3, [r7, #12]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3714      	adds	r7, #20
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr
	...

0800c178 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	4603      	mov	r3, r0
 800c180:	6039      	str	r1, [r7, #0]
 800c182:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800c184:	79fb      	ldrb	r3, [r7, #7]
 800c186:	3b01      	subs	r3, #1
 800c188:	2b0f      	cmp	r3, #15
 800c18a:	d857      	bhi.n	800c23c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc4>
 800c18c:	a201      	add	r2, pc, #4	; (adr r2, 800c194 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 800c18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c192:	bf00      	nop
 800c194:	0800c1dd 	.word	0x0800c1dd
 800c198:	0800c1f5 	.word	0x0800c1f5
 800c19c:	0800c205 	.word	0x0800c205
 800c1a0:	0800c215 	.word	0x0800c215
 800c1a4:	0800c23d 	.word	0x0800c23d
 800c1a8:	0800c225 	.word	0x0800c225
 800c1ac:	0800c1ed 	.word	0x0800c1ed
 800c1b0:	0800c22d 	.word	0x0800c22d
 800c1b4:	0800c20d 	.word	0x0800c20d
 800c1b8:	0800c1d5 	.word	0x0800c1d5
 800c1bc:	0800c1e5 	.word	0x0800c1e5
 800c1c0:	0800c235 	.word	0x0800c235
 800c1c4:	0800c21d 	.word	0x0800c21d
 800c1c8:	0800c23d 	.word	0x0800c23d
 800c1cc:	0800c23d 	.word	0x0800c23d
 800c1d0:	0800c1fd 	.word	0x0800c1fd
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	601a      	str	r2, [r3, #0]
      break;
 800c1da:	e031      	b.n	800c240 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat32:
      *size = sizeof(float);
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	2204      	movs	r2, #4
 800c1e0:	601a      	str	r2, [r3, #0]
      break;
 800c1e2:	e02d      	b.n	800c240 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat64:
      *size = sizeof(double);
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	2208      	movs	r2, #8
 800c1e8:	601a      	str	r2, [r3, #0]
      break;
 800c1ea:	e029      	b.n	800c240 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	601a      	str	r2, [r3, #0]
      break;
 800c1f2:	e025      	b.n	800c240 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	2204      	movs	r2, #4
 800c1f8:	601a      	str	r2, [r3, #0]
      break;
 800c1fa:	e021      	b.n	800c240 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	2204      	movs	r2, #4
 800c200:	601a      	str	r2, [r3, #0]
      break;
 800c202:	e01d      	b.n	800c240 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2201      	movs	r2, #1
 800c208:	601a      	str	r2, [r3, #0]
      break;
 800c20a:	e019      	b.n	800c240 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	2201      	movs	r2, #1
 800c210:	601a      	str	r2, [r3, #0]
      break;
 800c212:	e015      	b.n	800c240 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	2208      	movs	r2, #8
 800c218:	601a      	str	r2, [r3, #0]
      break;
 800c21a:	e011      	b.n	800c240 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	2208      	movs	r2, #8
 800c220:	601a      	str	r2, [r3, #0]
      break;
 800c222:	e00d      	b.n	800c240 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteBool:
      *size = sizeof(bool);
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	2201      	movs	r2, #1
 800c228:	601a      	str	r2, [r3, #0]
      break;
 800c22a:	e009      	b.n	800c240 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	2208      	movs	r2, #8
 800c230:	601a      	str	r2, [r3, #0]
      break;
 800c232:	e005      	b.n	800c240 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	2210      	movs	r2, #16
 800c238:	601a      	str	r2, [r3, #0]
      break;
 800c23a:	e001      	b.n	800c240 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    default:
      return kTfLiteError;
 800c23c:	2301      	movs	r3, #1
 800c23e:	e000      	b.n	800c242 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xca>
  }
  return kTfLiteOk;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	370c      	adds	r7, #12
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop

0800c250 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 800c250:	b580      	push	{r7, lr}
 800c252:	b088      	sub	sp, #32
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
 800c25c:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 800c25e:	2301      	movs	r3, #1
 800c260:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f7ff fe6a 	bl	800bf3c <_ZNK6tflite6Tensor5shapeEv>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	bf14      	ite	ne
 800c26e:	2301      	movne	r3, #1
 800c270:	2300      	moveq	r3, #0
 800c272:	b2db      	uxtb	r3, r3
 800c274:	2b00      	cmp	r3, #0
 800c276:	d022      	beq.n	800c2be <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800c278:	2300      	movs	r3, #0
 800c27a:	61bb      	str	r3, [r7, #24]
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	f7ff fe5d 	bl	800bf3c <_ZNK6tflite6Tensor5shapeEv>
 800c282:	4603      	mov	r3, r0
 800c284:	4618      	mov	r0, r3
 800c286:	f000 f884 	bl	800c392 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800c28a:	4602      	mov	r2, r0
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	4293      	cmp	r3, r2
 800c290:	bf34      	ite	cc
 800c292:	2301      	movcc	r3, #1
 800c294:	2300      	movcs	r3, #0
 800c296:	b2db      	uxtb	r3, r3
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d010      	beq.n	800c2be <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 800c29c:	68f8      	ldr	r0, [r7, #12]
 800c29e:	f7ff fe4d 	bl	800bf3c <_ZNK6tflite6Tensor5shapeEv>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	69b9      	ldr	r1, [r7, #24]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fd fa44 	bl	8009734 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	fb02 f303 	mul.w	r3, r2, r3
 800c2b4:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	61bb      	str	r3, [r7, #24]
 800c2bc:	e7de      	b.n	800c27c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f7ff fe4a 	bl	800bf58 <_ZNK6tflite6Tensor4typeEv>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f107 0315 	add.w	r3, r7, #21
 800c2cc:	683a      	ldr	r2, [r7, #0]
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	f7fc fde6 	bl	8008ea0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	75fb      	strb	r3, [r7, #23]
 800c2d8:	7dfb      	ldrb	r3, [r7, #23]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d001      	beq.n	800c2e2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 800c2de:	7dfb      	ldrb	r3, [r7, #23]
 800c2e0:	e013      	b.n	800c30a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 800c2e2:	7d7b      	ldrb	r3, [r7, #21]
 800c2e4:	6879      	ldr	r1, [r7, #4]
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7ff ff46 	bl	800c178 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	75bb      	strb	r3, [r7, #22]
 800c2f0:	7dbb      	ldrb	r3, [r7, #22]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d001      	beq.n	800c2fa <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 800c2f6:	7dbb      	ldrb	r3, [r7, #22]
 800c2f8:	e007      	b.n	800c30a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	69fa      	ldr	r2, [r7, #28]
 800c300:	fb02 f203 	mul.w	r2, r2, r3
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3720      	adds	r7, #32
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 800c312:	b580      	push	{r7, lr}
 800c314:	b086      	sub	sp, #24
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d101      	bne.n	800c326 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 800c322:	f018 ffa4 	bl	802526e <abort>

  int element_count = 1;
 800c326:	2301      	movs	r3, #1
 800c328:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d015      	beq.n	800c35e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 800c332:	2300      	movs	r3, #0
 800c334:	613b      	str	r3, [r7, #16]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	693a      	ldr	r2, [r7, #16]
 800c33e:	429a      	cmp	r2, r3
 800c340:	da0d      	bge.n	800c35e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	685a      	ldr	r2, [r3, #4]
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	4413      	add	r3, r2
 800c34c:	685a      	ldr	r2, [r3, #4]
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	fb02 f303 	mul.w	r3, r2, r3
 800c354:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	3301      	adds	r3, #1
 800c35a:	613b      	str	r3, [r7, #16]
 800c35c:	e7eb      	b.n	800c336 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	7a1b      	ldrb	r3, [r3, #8]
 800c362:	f107 0208 	add.w	r2, r7, #8
 800c366:	4611      	mov	r1, r2
 800c368:	4618      	mov	r0, r3
 800c36a:	f7ff ff05 	bl	800c178 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800c36e:	4603      	mov	r3, r0
 800c370:	73fb      	strb	r3, [r7, #15]
 800c372:	7bfb      	ldrb	r3, [r7, #15]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d001      	beq.n	800c37c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 800c378:	7bfb      	ldrb	r3, [r7, #15]
 800c37a:	e006      	b.n	800c38a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	68ba      	ldr	r2, [r7, #8]
 800c380:	fb02 f203 	mul.w	r2, r2, r3
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3718      	adds	r7, #24
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 800c392:	b580      	push	{r7, lr}
 800c394:	b082      	sub	sp, #8
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7fd f9bc 	bl	8009718 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3708      	adds	r7, #8
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b082      	sub	sp, #8
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2108      	movs	r1, #8
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f001 fca9 	bl	800dd0e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800c3bc:	4603      	mov	r3, r0
  }
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b082      	sub	sp, #8
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	210a      	movs	r1, #10
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f001 fcab 	bl	800dd2e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800c3d8:	4603      	mov	r3, r0
  }
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3708      	adds	r7, #8
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b082      	sub	sp, #8
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	2110      	movs	r1, #16
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fd f921 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800c3f6:	4603      	mov	r3, r0
  }
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	2108      	movs	r1, #8
 800c40e:	4618      	mov	r0, r3
 800c410:	f001 fc9d 	bl	800dd4e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800c414:	4603      	mov	r3, r0
  }
 800c416:	4618      	mov	r0, r3
 800c418:	3708      	adds	r7, #8
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 800c41e:	b580      	push	{r7, lr}
 800c420:	b082      	sub	sp, #8
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	210c      	movs	r1, #12
 800c42a:	4618      	mov	r0, r3
 800c42c:	f001 fcad 	bl	800dd8a <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800c430:	4603      	mov	r3, r0
  }
 800c432:	4618      	mov	r0, r3
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b082      	sub	sp, #8
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2200      	movs	r2, #0
 800c446:	210e      	movs	r1, #14
 800c448:	4618      	mov	r0, r3
 800c44a:	f7fd f8c6 	bl	80095da <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	bf14      	ite	ne
 800c454:	2301      	movne	r3, #1
 800c456:	2300      	moveq	r3, #0
 800c458:	b2db      	uxtb	r3, r3
  }
 800c45a:	4618      	mov	r0, r3
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800c462:	b580      	push	{r7, lr}
 800c464:	b082      	sub	sp, #8
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2106      	movs	r1, #6
 800c46e:	4618      	mov	r0, r3
 800c470:	f7fd f900 	bl	8009674 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800c474:	4603      	mov	r3, r0
  }
 800c476:	4618      	mov	r0, r3
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800c47e:	b580      	push	{r7, lr}
 800c480:	b082      	sub	sp, #8
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2108      	movs	r1, #8
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fd f8f2 	bl	8009674 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800c490:	4603      	mov	r3, r0
  }
 800c492:	4618      	mov	r0, r3
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <_ZNK6tflite8SubGraph7tensorsEv>:
    VT_INPUTS = 6,
    VT_OUTPUTS = 8,
    VT_OPERATORS = 10,
    VT_NAME = 12
  };
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b082      	sub	sp, #8
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2104      	movs	r1, #4
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f001 fc7f 	bl	800ddaa <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800c4ac:	4603      	mov	r3, r0
  }
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b082      	sub	sp, #8
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2106      	movs	r1, #6
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fd f8d6 	bl	8009674 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800c4c8:	4603      	mov	r3, r0
  }
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b082      	sub	sp, #8
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2108      	movs	r1, #8
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fd f8c8 	bl	8009674 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800c4e4:	4603      	mov	r3, r0
  }
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3708      	adds	r7, #8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b082      	sub	sp, #8
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	210a      	movs	r1, #10
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f001 fc65 	bl	800ddca <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800c500:	4603      	mov	r3, r0
  }
 800c502:	4618      	mov	r0, r3
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <_ZNK6tflite6Buffer4dataEv>:
struct Buffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BufferT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint8_t> *data() const {
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b082      	sub	sp, #8
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2104      	movs	r1, #4
 800c516:	4618      	mov	r0, r3
 800c518:	f001 fbe9 	bl	800dcee <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800c51c:	4603      	mov	r3, r0
  }
 800c51e:	4618      	mov	r0, r3
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <_ZNK6tflite8Metadata4nameEv>:
  typedef MetadataT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_BUFFER = 6
  };
  const flatbuffers::String *name() const {
 800c526:	b580      	push	{r7, lr}
 800c528:	b082      	sub	sp, #8
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2104      	movs	r1, #4
 800c532:	4618      	mov	r0, r3
 800c534:	f7fe fc6d 	bl	800ae12 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800c538:	4603      	mov	r3, r0
  }
 800c53a:	4618      	mov	r0, r3
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 800c542:	b580      	push	{r7, lr}
 800c544:	b082      	sub	sp, #8
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	2106      	movs	r1, #6
 800c550:	4618      	mov	r0, r3
 800c552:	f001 fbfc 	bl	800dd4e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800c556:	4603      	mov	r3, r0
  }
 800c558:	4618      	mov	r0, r3
 800c55a:	3708      	adds	r7, #8
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <_ZNK6tflite5Model9subgraphsEv>:
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2108      	movs	r1, #8
 800c56c:	4618      	mov	r0, r3
 800c56e:	f001 fc3c 	bl	800ddea <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800c572:	4603      	mov	r3, r0
  }
 800c574:	4618      	mov	r0, r3
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	210c      	movs	r1, #12
 800c588:	4618      	mov	r0, r3
 800c58a:	f001 fc3e 	bl	800de0a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800c58e:	4603      	mov	r3, r0
  }
 800c590:	4618      	mov	r0, r3
 800c592:	3708      	adds	r7, #8
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<int32_t> *metadata_buffer() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_METADATA_BUFFER);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2110      	movs	r1, #16
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f001 fc40 	bl	800de2a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800c5aa:	4603      	mov	r3, r0
  }
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	4a04      	ldr	r2, [pc, #16]	; (800c5d0 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	601a      	str	r2, [r3, #0]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	370c      	adds	r7, #12
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr
 800c5d0:	0802c4f0 	.word	0x0802c4f0

0800c5d4 <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f7ff ffe9 	bl	800c5b4 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800c5e2:	2104      	movs	r1, #4
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f018 fbbc 	bl	8024d62 <_ZdlPvj>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	4a04      	ldr	r2, [pc, #16]	; (800c610 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	601a      	str	r2, [r3, #0]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4618      	mov	r0, r3
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr
 800c610:	0802c4f0 	.word	0x0802c4f0

0800c614 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	4618      	mov	r0, r3
 800c622:	f7ff ffe7 	bl	800c5f4 <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 800c626:	4a05      	ldr	r2, [pc, #20]	; (800c63c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	601a      	str	r2, [r3, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	683a      	ldr	r2, [r7, #0]
 800c630:	605a      	str	r2, [r3, #4]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4618      	mov	r0, r3
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	0802c49c 	.word	0x0802c49c

0800c640 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6858      	ldr	r0, [r3, #4]
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	330c      	adds	r3, #12
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	68b9      	ldr	r1, [r7, #8]
 800c65e:	4798      	blx	r3
 800c660:	4603      	mov	r3, r0
  }
 800c662:	4618      	mov	r0, r3
 800c664:	3710      	adds	r7, #16
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 800c66a:	b480      	push	{r7}
 800c66c:	b083      	sub	sp, #12
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
 800c672:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 800c674:	bf00      	nop
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	607a      	str	r2, [r7, #4]
 800c68c:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	68ba      	ldr	r2, [r7, #8]
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	605a      	str	r2, [r3, #4]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	683a      	ldr	r2, [r7, #0]
 800c69e:	609a      	str	r2, [r3, #8]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	69ba      	ldr	r2, [r7, #24]
 800c6a4:	60da      	str	r2, [r3, #12]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3714      	adds	r7, #20
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b096      	sub	sp, #88	; 0x58
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
 800c6c0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d101      	bne.n	800c6cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 800c6c8:	f018 fdd1 	bl	802526e <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	657b      	str	r3, [r7, #84]	; 0x54
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d267      	bcs.n	800c7aa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	6819      	ldr	r1, [r3, #0]
 800c6de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	005b      	lsls	r3, r3, #1
 800c6e4:	4413      	add	r3, r2
 800c6e6:	00db      	lsls	r3, r3, #3
 800c6e8:	440b      	add	r3, r1
 800c6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    current->output_ptr = &(eval_tensors[i].data.data);
 800c6ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	005b      	lsls	r3, r3, #1
 800c6f2:	4413      	add	r3, r2
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c700:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 800c702:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c704:	4613      	mov	r3, r2
 800c706:	005b      	lsls	r3, r3, #1
 800c708:	4413      	add	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	461a      	mov	r2, r3
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	4413      	add	r3, r2
 800c712:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c714:	4611      	mov	r1, r2
 800c716:	4618      	mov	r0, r3
 800c718:	f7ff fdfb 	bl	800c312 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800c71c:	4603      	mov	r3, r0
 800c71e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c722:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c726:	2b00      	cmp	r3, #0
 800c728:	d002      	beq.n	800c730 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 800c72a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c72e:	e121      	b.n	800c974 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2c0>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 800c730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c736:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 800c738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c73a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c73e:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 800c740:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c742:	4613      	mov	r3, r2
 800c744:	005b      	lsls	r3, r3, #1
 800c746:	4413      	add	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	461a      	mov	r2, r3
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	4413      	add	r3, r2
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d113      	bne.n	800c77e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 800c756:	68b8      	ldr	r0, [r7, #8]
 800c758:	f7ff fe9f 	bl	800c49a <_ZNK6tflite8SubGraph7tensorsEv>
 800c75c:	4603      	mov	r3, r0
 800c75e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c760:	4618      	mov	r0, r3
 800c762:	f001 fbfb 	bl	800df5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800c766:	4603      	mov	r3, r0
 800c768:	4618      	mov	r0, r3
 800c76a:	f7ff fe66 	bl	800c43a <_ZNK6tflite6Tensor11is_variableEv>
 800c76e:	4603      	mov	r3, r0
 800c770:	f083 0301 	eor.w	r3, r3, #1
 800c774:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 800c776:	2b00      	cmp	r3, #0
 800c778:	d001      	beq.n	800c77e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 800c77a:	2201      	movs	r2, #1
 800c77c:	e000      	b.n	800c780 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 800c77e:	2200      	movs	r2, #0
 800c780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c782:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d007      	beq.n	800c79a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 800c78a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	4413      	add	r3, r2
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c796:	611a      	str	r2, [r3, #16]
 800c798:	e003      	b.n	800c7a2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 800c79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c79c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7a0:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 800c7a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	657b      	str	r3, [r7, #84]	; 0x54
 800c7a8:	e792      	b.n	800c6d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	653b      	str	r3, [r7, #80]	; 0x50
 800c7ae:	68b8      	ldr	r0, [r7, #8]
 800c7b0:	f7ff fe81 	bl	800c4b6 <_ZNK6tflite8SubGraph6inputsEv>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7fc ffae 	bl	8009718 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	bf34      	ite	cc
 800c7c4:	2301      	movcc	r3, #1
 800c7c6:	2300      	movcs	r3, #0
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d018      	beq.n	800c800 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x14c>
    const int tensor_index = subgraph->inputs()->Get(i);
 800c7ce:	68b8      	ldr	r0, [r7, #8]
 800c7d0:	f7ff fe71 	bl	800c4b6 <_ZNK6tflite8SubGraph6inputsEv>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7fc ffab 	bl	8009734 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800c7de:	61b8      	str	r0, [r7, #24]
    AllocationInfo* current = &info_[tensor_index];
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6819      	ldr	r1, [r3, #0]
 800c7e4:	69ba      	ldr	r2, [r7, #24]
 800c7e6:	4613      	mov	r3, r2
 800c7e8:	005b      	lsls	r3, r3, #1
 800c7ea:	4413      	add	r3, r2
 800c7ec:	00db      	lsls	r3, r3, #3
 800c7ee:	440b      	add	r3, r1
 800c7f0:	617b      	str	r3, [r7, #20]
    current->first_created = 0;
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800c7f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	653b      	str	r3, [r7, #80]	; 0x50
 800c7fe:	e7d6      	b.n	800c7ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xfa>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800c800:	2300      	movs	r3, #0
 800c802:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c804:	68b8      	ldr	r0, [r7, #8]
 800c806:	f7ff fe64 	bl	800c4d2 <_ZNK6tflite8SubGraph7outputsEv>
 800c80a:	4603      	mov	r3, r0
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7fc ff83 	bl	8009718 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800c812:	4602      	mov	r2, r0
 800c814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c816:	4293      	cmp	r3, r2
 800c818:	bf34      	ite	cc
 800c81a:	2301      	movcc	r3, #1
 800c81c:	2300      	movcs	r3, #0
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	2b00      	cmp	r3, #0
 800c822:	d021      	beq.n	800c868 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
    const int tensor_index = subgraph->outputs()->Get(i);
 800c824:	68b8      	ldr	r0, [r7, #8]
 800c826:	f7ff fe54 	bl	800c4d2 <_ZNK6tflite8SubGraph7outputsEv>
 800c82a:	4603      	mov	r3, r0
 800c82c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fc ff80 	bl	8009734 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800c834:	6238      	str	r0, [r7, #32]
    AllocationInfo* current = &info_[tensor_index];
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6819      	ldr	r1, [r3, #0]
 800c83a:	6a3a      	ldr	r2, [r7, #32]
 800c83c:	4613      	mov	r3, r2
 800c83e:	005b      	lsls	r3, r3, #1
 800c840:	4413      	add	r3, r2
 800c842:	00db      	lsls	r3, r3, #3
 800c844:	440b      	add	r3, r1
 800c846:	61fb      	str	r3, [r7, #28]
    current->last_used = subgraph->operators()->size() - 1;
 800c848:	68b8      	ldr	r0, [r7, #8]
 800c84a:	f7ff fe50 	bl	800c4ee <_ZNK6tflite8SubGraph9operatorsEv>
 800c84e:	4603      	mov	r3, r0
 800c850:	4618      	mov	r0, r3
 800c852:	f001 fba9 	bl	800dfa8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800c856:	4603      	mov	r3, r0
 800c858:	3b01      	subs	r3, #1
 800c85a:	461a      	mov	r2, r3
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800c860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c862:	3301      	adds	r3, #1
 800c864:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c866:	e7cd      	b.n	800c804 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x150>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 800c868:	68b8      	ldr	r0, [r7, #8]
 800c86a:	f7ff fe40 	bl	800c4ee <_ZNK6tflite8SubGraph9operatorsEv>
 800c86e:	4603      	mov	r3, r0
 800c870:	4618      	mov	r0, r3
 800c872:	f001 fb99 	bl	800dfa8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800c876:	4603      	mov	r3, r0
 800c878:	3b01      	subs	r3, #1
 800c87a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c87c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c87e:	2b00      	cmp	r3, #0
 800c880:	db77      	blt.n	800c972 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2be>
    const auto* op = subgraph->operators()->Get(i);
 800c882:	68b8      	ldr	r0, [r7, #8]
 800c884:	f7ff fe33 	bl	800c4ee <_ZNK6tflite8SubGraph9operatorsEv>
 800c888:	4602      	mov	r2, r0
 800c88a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c88c:	4619      	mov	r1, r3
 800c88e:	4610      	mov	r0, r2
 800c890:	f001 fb98 	bl	800dfc4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800c894:	6378      	str	r0, [r7, #52]	; 0x34
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800c896:	2300      	movs	r3, #0
 800c898:	647b      	str	r3, [r7, #68]	; 0x44
 800c89a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c89c:	f7ff fde1 	bl	800c462 <_ZNK6tflite8Operator6inputsEv>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fc ff38 	bl	8009718 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	bf34      	ite	cc
 800c8b0:	2301      	movcc	r3, #1
 800c8b2:	2300      	movcs	r3, #0
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d022      	beq.n	800c900 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x24c>
      const int tensor_index = op->inputs()->Get(n);
 800c8ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c8bc:	f7ff fdd1 	bl	800c462 <_ZNK6tflite8Operator6inputsEv>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fc ff35 	bl	8009734 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800c8ca:	62b8      	str	r0, [r7, #40]	; 0x28
      AllocationInfo* current = &info_[tensor_index];
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	6819      	ldr	r1, [r3, #0]
 800c8d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8d2:	4613      	mov	r3, r2
 800c8d4:	005b      	lsls	r3, r3, #1
 800c8d6:	4413      	add	r3, r2
 800c8d8:	00db      	lsls	r3, r3, #3
 800c8da:	440b      	add	r3, r1
 800c8dc:	627b      	str	r3, [r7, #36]	; 0x24
      if (((current->last_used == -1) || (current->last_used < i))) {
 800c8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8e6:	d004      	beq.n	800c8f2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23e>
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	dd02      	ble.n	800c8f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x244>
        current->last_used = i;
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8f6:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800c8f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	647b      	str	r3, [r7, #68]	; 0x44
 800c8fe:	e7cc      	b.n	800c89a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1e6>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800c900:	2300      	movs	r3, #0
 800c902:	643b      	str	r3, [r7, #64]	; 0x40
 800c904:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c906:	f7ff fdba 	bl	800c47e <_ZNK6tflite8Operator7outputsEv>
 800c90a:	4603      	mov	r3, r0
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fc ff03 	bl	8009718 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800c912:	4602      	mov	r2, r0
 800c914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c916:	4293      	cmp	r3, r2
 800c918:	bf34      	ite	cc
 800c91a:	2301      	movcc	r3, #1
 800c91c:	2300      	movcs	r3, #0
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	2b00      	cmp	r3, #0
 800c922:	d022      	beq.n	800c96a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2b6>
      const int tensor_index = op->outputs()->Get(n);
 800c924:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c926:	f7ff fdaa 	bl	800c47e <_ZNK6tflite8Operator7outputsEv>
 800c92a:	4603      	mov	r3, r0
 800c92c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fc ff00 	bl	8009734 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800c934:	6338      	str	r0, [r7, #48]	; 0x30
      AllocationInfo* current = &info_[tensor_index];
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6819      	ldr	r1, [r3, #0]
 800c93a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c93c:	4613      	mov	r3, r2
 800c93e:	005b      	lsls	r3, r3, #1
 800c940:	4413      	add	r3, r2
 800c942:	00db      	lsls	r3, r3, #3
 800c944:	440b      	add	r3, r1
 800c946:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((current->first_created == -1) || (current->first_created > i)) {
 800c948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c950:	d004      	beq.n	800c95c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a8>
 800c952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c958:	429a      	cmp	r2, r3
 800c95a:	da02      	bge.n	800c962 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ae>
        current->first_created = i;
 800c95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c960:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800c962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c964:	3301      	adds	r3, #1
 800c966:	643b      	str	r3, [r7, #64]	; 0x40
 800c968:	e7cc      	b.n	800c904 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x250>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 800c96a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c96c:	3b01      	subs	r3, #1
 800c96e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c970:	e784      	b.n	800c87c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c8>
      }
    }
  }
  return kTfLiteOk;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	3758      	adds	r7, #88	; 0x58
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b08c      	sub	sp, #48	; 0x30
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 800c988:	68b8      	ldr	r0, [r7, #8]
 800c98a:	f7ff fe05 	bl	800c598 <_ZNK6tflite5Model8metadataEv>
 800c98e:	4603      	mov	r3, r0
 800c990:	2b00      	cmp	r3, #0
 800c992:	bf14      	ite	ne
 800c994:	2301      	movne	r3, #1
 800c996:	2300      	moveq	r3, #0
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d060      	beq.n	800ca60 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800c99e:	2300      	movs	r3, #0
 800c9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9a2:	68b8      	ldr	r0, [r7, #8]
 800c9a4:	f7ff fdf8 	bl	800c598 <_ZNK6tflite5Model8metadataEv>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f001 fb98 	bl	800e0e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	bf34      	ite	cc
 800c9b8:	2301      	movcc	r3, #1
 800c9ba:	2300      	movcs	r3, #0
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d04e      	beq.n	800ca60 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 800c9c2:	68b8      	ldr	r0, [r7, #8]
 800c9c4:	f7ff fde8 	bl	800c598 <_ZNK6tflite5Model8metadataEv>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f001 fb95 	bl	800e0fc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 800c9d2:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800c9d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9d6:	f7ff fda6 	bl	800c526 <_ZNK6tflite8Metadata4nameEv>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7fe f91f 	bl	800ac20 <_ZNK11flatbuffers6String5c_strEv>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2217      	movs	r2, #23
 800c9e6:	4921      	ldr	r1, [pc, #132]	; (800ca6c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f019 f8ff 	bl	8025bec <strncmp>
 800c9ee:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	bf0c      	ite	eq
 800c9f4:	2301      	moveq	r3, #1
 800c9f6:	2300      	movne	r3, #0
 800c9f8:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d02c      	beq.n	800ca58 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 800c9fe:	68b8      	ldr	r0, [r7, #8]
 800ca00:	f7ff fdbc 	bl	800c57c <_ZNK6tflite5Model7buffersEv>
 800ca04:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 800ca06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca08:	f7ff fd9b 	bl	800c542 <_ZNK6tflite8Metadata6bufferEv>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	4619      	mov	r1, r3
 800ca10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca12:	f001 fba7 	bl	800e164 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800ca16:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 800ca18:	6a38      	ldr	r0, [r7, #32]
 800ca1a:	f7ff fd76 	bl	800c50a <_ZNK6tflite6Buffer4dataEv>
 800ca1e:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 800ca20:	69f8      	ldr	r0, [r7, #28]
 800ca22:	f001 fbad 	bl	800e180 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800ca26:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 800ca28:	69bb      	ldr	r3, [r7, #24]
 800ca2a:	3308      	adds	r3, #8
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	697a      	ldr	r2, [r7, #20]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d009      	beq.n	800ca58 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	68d8      	ldr	r0, [r3, #12]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	4908      	ldr	r1, [pc, #32]	; (800ca70 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 800ca50:	f7fb ff20 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 800ca54:	2301      	movs	r3, #1
 800ca56:	e004      	b.n	800ca62 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800ca58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca5e:	e7a0      	b.n	800c9a2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3730      	adds	r7, #48	; 0x30
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	0802c478 	.word	0x0802c478
 800ca70:	08027740 	.word	0x08027740

0800ca74 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 800ca74:	b480      	push	{r7}
 800ca76:	b089      	sub	sp, #36	; 0x24
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	60f8      	str	r0, [r7, #12]
 800ca7c:	60b9      	str	r1, [r7, #8]
 800ca7e:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	61fb      	str	r3, [r7, #28]
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	685a      	ldr	r2, [r3, #4]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	4413      	add	r3, r2
 800ca90:	69fa      	ldr	r2, [r7, #28]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d232      	bcs.n	800cafc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	69fa      	ldr	r2, [r7, #28]
 800ca9c:	1ad3      	subs	r3, r2, r3
 800ca9e:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 800caa0:	68ba      	ldr	r2, [r7, #8]
 800caa2:	4413      	add	r3, r2
 800caa4:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	69fa      	ldr	r2, [r7, #28]
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	4413      	add	r3, r2
 800cab4:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6819      	ldr	r1, [r3, #0]
 800caba:	69fa      	ldr	r2, [r7, #28]
 800cabc:	4613      	mov	r3, r2
 800cabe:	005b      	lsls	r3, r3, #1
 800cac0:	4413      	add	r3, r2
 800cac2:	00db      	lsls	r3, r3, #3
 800cac4:	440b      	add	r3, r1
 800cac6:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 800cac8:	697a      	ldr	r2, [r7, #20]
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	685a      	ldr	r2, [r3, #4]
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	685a      	ldr	r2, [r3, #4]
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800caec:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	2201      	movs	r2, #1
 800caf2:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800caf4:	69fb      	ldr	r3, [r7, #28]
 800caf6:	3301      	adds	r3, #1
 800caf8:	61fb      	str	r3, [r7, #28]
 800cafa:	e7c4      	b.n	800ca86 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3724      	adds	r7, #36	; 0x24
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr

0800cb0a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800cb0a:	b590      	push	{r4, r7, lr}
 800cb0c:	b08b      	sub	sp, #44	; 0x2c
 800cb0e:	af02      	add	r7, sp, #8
 800cb10:	60f8      	str	r0, [r7, #12]
 800cb12:	60b9      	str	r1, [r7, #8]
 800cb14:	607a      	str	r2, [r7, #4]
 800cb16:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800cb18:	2300      	movs	r3, #0
 800cb1a:	61fb      	str	r3, [r7, #28]
 800cb1c:	69fa      	ldr	r2, [r7, #28]
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d247      	bcs.n	800cbb4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 800cb24:	69fa      	ldr	r2, [r7, #28]
 800cb26:	4613      	mov	r3, r2
 800cb28:	005b      	lsls	r3, r3, #1
 800cb2a:	4413      	add	r3, r2
 800cb2c:	00db      	lsls	r3, r3, #3
 800cb2e:	461a      	mov	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	4413      	add	r3, r2
 800cb34:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	7d1b      	ldrb	r3, [r3, #20]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d036      	beq.n	800cbac <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2110      	movs	r1, #16
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7ff faff 	bl	800c148 <_ZN6tflite11AlignSizeUpEjj>
 800cb4a:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	691b      	ldr	r3, [r3, #16]
 800cb50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb54:	d114      	bne.n	800cb80 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	3308      	adds	r3, #8
 800cb5c:	681c      	ldr	r4, [r3, #0]
 800cb5e:	697a      	ldr	r2, [r7, #20]
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	6899      	ldr	r1, [r3, #8]
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	68f9      	ldr	r1, [r7, #12]
 800cb6e:	68b8      	ldr	r0, [r7, #8]
 800cb70:	47a0      	blx	r4
 800cb72:	4603      	mov	r3, r0
 800cb74:	74bb      	strb	r3, [r7, #18]
 800cb76:	7cbb      	ldrb	r3, [r7, #18]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d017      	beq.n	800cbac <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 800cb7c:	7cbb      	ldrb	r3, [r7, #18]
 800cb7e:	e01a      	b.n	800cbb6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 800cb80:	6979      	ldr	r1, [r7, #20]
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	6898      	ldr	r0, [r3, #8]
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	69ba      	ldr	r2, [r7, #24]
 800cb8c:	6912      	ldr	r2, [r2, #16]
 800cb8e:	9201      	str	r2, [sp, #4]
 800cb90:	9300      	str	r3, [sp, #0]
 800cb92:	4603      	mov	r3, r0
 800cb94:	460a      	mov	r2, r1
 800cb96:	68f9      	ldr	r1, [r7, #12]
 800cb98:	68b8      	ldr	r0, [r7, #8]
 800cb9a:	f00b fc8d 	bl	80184b8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	74fb      	strb	r3, [r7, #19]
 800cba2:	7cfb      	ldrb	r3, [r7, #19]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d001      	beq.n	800cbac <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 800cba8:	7cfb      	ldrb	r3, [r7, #19]
 800cbaa:	e004      	b.n	800cbb6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	61fb      	str	r3, [r7, #28]
 800cbb2:	e7b3      	b.n	800cb1c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3724      	adds	r7, #36	; 0x24
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd90      	pop	{r4, r7, pc}

0800cbbe <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800cbbe:	b590      	push	{r4, r7, lr}
 800cbc0:	b08b      	sub	sp, #44	; 0x2c
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	60f8      	str	r0, [r7, #12]
 800cbc6:	60b9      	str	r1, [r7, #8]
 800cbc8:	607a      	str	r2, [r7, #4]
 800cbca:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	623b      	str	r3, [r7, #32]
 800cbd4:	6a3a      	ldr	r2, [r7, #32]
 800cbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d22e      	bcs.n	800cc3a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 800cbdc:	6a3a      	ldr	r2, [r7, #32]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	005b      	lsls	r3, r3, #1
 800cbe2:	4413      	add	r3, r2
 800cbe4:	00db      	lsls	r3, r3, #3
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	4413      	add	r3, r2
 800cbec:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	7d1b      	ldrb	r3, [r3, #20]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d01d      	beq.n	800cc32 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 800cbf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbfa:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	3314      	adds	r3, #20
 800cc02:	681c      	ldr	r4, [r3, #0]
 800cc04:	f107 0314 	add.w	r3, r7, #20
 800cc08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc0a:	68f9      	ldr	r1, [r7, #12]
 800cc0c:	68b8      	ldr	r0, [r7, #8]
 800cc0e:	47a0      	blx	r4
 800cc10:	4603      	mov	r3, r0
 800cc12:	76fb      	strb	r3, [r7, #27]
 800cc14:	7efb      	ldrb	r3, [r7, #27]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d001      	beq.n	800cc1e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 800cc1a:	7efb      	ldrb	r3, [r7, #27]
 800cc1c:	e00e      	b.n	800cc3c <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	4619      	mov	r1, r3
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	440a      	add	r2, r1
 800cc2a:	601a      	str	r2, [r3, #0]
      ++planner_index;
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2e:	3301      	adds	r3, #1
 800cc30:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	3301      	adds	r3, #1
 800cc36:	623b      	str	r3, [r7, #32]
 800cc38:	e7cc      	b.n	800cbd4 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 800cc3a:	2300      	movs	r3, #0
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	372c      	adds	r7, #44	; 0x2c
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd90      	pop	{r4, r7, pc}

0800cc44 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7ff fbd4 	bl	800c400 <_ZNK6tflite6Tensor6bufferEv>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6838      	ldr	r0, [r7, #0]
 800cc5e:	f001 fa81 	bl	800e164 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800cc62:	6138      	str	r0, [r7, #16]
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d015      	beq.n	800cc96 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 800cc6a:	6938      	ldr	r0, [r7, #16]
 800cc6c:	f7ff fc4d 	bl	800c50a <_ZNK6tflite6Buffer4dataEv>
 800cc70:	60f8      	str	r0, [r7, #12]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00e      	beq.n	800cc96 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 800cc78:	68f8      	ldr	r0, [r7, #12]
 800cc7a:	f001 f8e6 	bl	800de4a <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	bf14      	ite	ne
 800cc84:	2301      	movne	r3, #1
 800cc86:	2300      	moveq	r3, #0
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d003      	beq.n	800cc96 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f001 fa76 	bl	800e180 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800cc94:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 800cc96:	697b      	ldr	r3, [r7, #20]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3718      	adds	r7, #24
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 800cca0:	b590      	push	{r4, r7, lr}
 800cca2:	b08d      	sub	sp, #52	; 0x34
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	607a      	str	r2, [r7, #4]
 800ccaa:	603b      	str	r3, [r7, #0]
 800ccac:	460b      	mov	r3, r1
 800ccae:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 800ccb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d101      	bne.n	800ccba <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 800ccb6:	f018 fada 	bl	802526e <abort>

  *result = {};
 800ccba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	2340      	movs	r3, #64	; 0x40
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	f018 fb76 	bl	80253b4 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f7ff f945 	bl	800bf58 <_ZNK6tflite6Tensor4typeEv>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	f7fc f8e2 	bl	8008ea0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cce2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d002      	beq.n	800ccf0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 800ccea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ccee:	e127      	b.n	800cf40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f7ff fba2 	bl	800c43a <_ZNK6tflite6Tensor11is_variableEv>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccfc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 800cd00:	6839      	ldr	r1, [r7, #0]
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f7ff ff9e 	bl	800cc44 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd0c:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 800cd0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d103      	bne.n	800cd1e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 800cd16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd18:	2202      	movs	r2, #2
 800cd1a:	751a      	strb	r2, [r3, #20]
 800cd1c:	e002      	b.n	800cd24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 800cd1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd20:	2201      	movs	r2, #1
 800cd22:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 800cd24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd26:	f103 0118 	add.w	r1, r3, #24
 800cd2a:	f107 0210 	add.w	r2, r7, #16
 800cd2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f7ff fa8d 	bl	800c250 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 800cd36:	4603      	mov	r3, r0
 800cd38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cd3c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d002      	beq.n	800cd4a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 800cd44:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800cd48:	e0fa      	b.n	800cf40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7ff f8f6 	bl	800bf3c <_ZNK6tflite6Tensor5shapeEv>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	bf0c      	ite	eq
 800cd56:	2301      	moveq	r3, #1
 800cd58:	2300      	movne	r3, #0
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d003      	beq.n	800cd68 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800cd60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd62:	4a79      	ldr	r2, [pc, #484]	; (800cf48 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a8>)
 800cd64:	609a      	str	r2, [r3, #8]
 800cd66:	e013      	b.n	800cd90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f7ff f8e7 	bl	800bf3c <_ZNK6tflite6Tensor5shapeEv>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd72:	3308      	adds	r3, #8
 800cd74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	f001 fa0e 	bl	800e198 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800cd82:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d002      	beq.n	800cd90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 800cd8a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cd8e:	e0d7      	b.n	800cf40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f7ff fb44 	bl	800c41e <_ZNK6tflite6Tensor12quantizationEv>
 800cd96:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 800cd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d021      	beq.n	800cde2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 800cd9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cda0:	f7ff fb03 	bl	800c3aa <_ZNK6tflite22QuantizationParameters5scaleEv>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d01b      	beq.n	800cde2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 800cdaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdac:	f7ff fafd 	bl	800c3aa <_ZNK6tflite22QuantizationParameters5scaleEv>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f001 f857 	bl	800de66 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800cdb8:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d011      	beq.n	800cde2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 800cdbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdc0:	f7ff fb01 	bl	800c3c6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800cdc4:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00b      	beq.n	800cde2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 800cdca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdcc:	f7ff fafb 	bl	800c3c6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f001 f87e 	bl	800ded4 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800cdd8:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d001      	beq.n	800cde2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 800cdde:	2301      	movs	r3, #1
 800cde0:	e000      	b.n	800cde4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 800cde2:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f000 80aa 	beq.w	800cf3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 800cdea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdec:	f7ff fadd 	bl	800c3aa <_ZNK6tflite22QuantizationParameters5scaleEv>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f001 f845 	bl	800de84 <_ZNK11flatbuffers6VectorIfE3GetEm>
 800cdfa:	eef0 7a40 	vmov.f32	s15, s0
 800cdfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce00:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 800ce04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce06:	f7ff fade 	bl	800c3c6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	2100      	movs	r1, #0
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f001 f86e 	bl	800def0 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800ce14:	4602      	mov	r2, r0
 800ce16:	460b      	mov	r3, r1
    result->params.zero_point =
 800ce18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce1a:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 800ce1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce1e:	f7ff fac4 	bl	800c3aa <_ZNK6tflite22QuantizationParameters5scaleEv>
 800ce22:	4603      	mov	r3, r0
 800ce24:	4618      	mov	r0, r3
 800ce26:	f001 f81e 	bl	800de66 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 800ce2e:	7afb      	ldrb	r3, [r7, #11]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d009      	beq.n	800ce48 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a8>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	3310      	adds	r3, #16
 800ce3a:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 800ce3c:	2204      	movs	r2, #4
 800ce3e:	210c      	movs	r1, #12
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	4798      	blx	r3
 800ce44:	4603      	mov	r3, r0
 800ce46:	e008      	b.n	800ce5a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ba>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	330c      	adds	r3, #12
 800ce4e:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateFromTail(
 800ce50:	2204      	movs	r2, #4
 800ce52:	210c      	movs	r1, #12
 800ce54:	68f8      	ldr	r0, [r7, #12]
 800ce56:	4798      	blx	r3
 800ce58:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 800ce5a:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d105      	bne.n	800ce6e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ce>
      TF_LITE_REPORT_ERROR(error_reporter,
 800ce62:	493a      	ldr	r1, [pc, #232]	; (800cf4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 800ce64:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ce66:	f7fb fd15 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e068      	b.n	800cf40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800ce6e:	7afb      	ldrb	r3, [r7, #11]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00d      	beq.n	800ce90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f0>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	3310      	adds	r3, #16
 800ce7a:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 800ce7c:	6a38      	ldr	r0, [r7, #32]
 800ce7e:	f7fb fc7f 	bl	8008780 <TfLiteIntArrayGetSizeInBytes>
 800ce82:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800ce84:	2204      	movs	r2, #4
 800ce86:	4619      	mov	r1, r3
 800ce88:	68f8      	ldr	r0, [r7, #12]
 800ce8a:	47a0      	blx	r4
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	e00c      	b.n	800ceaa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20a>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	330c      	adds	r3, #12
 800ce96:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 800ce98:	6a38      	ldr	r0, [r7, #32]
 800ce9a:	f7fb fc71 	bl	8008780 <TfLiteIntArrayGetSizeInBytes>
 800ce9e:	4603      	mov	r3, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 800cea0:	2204      	movs	r2, #4
 800cea2:	4619      	mov	r1, r3
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	47a0      	blx	r4
 800cea8:	4603      	mov	r3, r0
    quantization->zero_point =
 800ceaa:	69fa      	ldr	r2, [r7, #28]
 800ceac:	6053      	str	r3, [r2, #4]
    if (quantization->zero_point == nullptr) {
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d105      	bne.n	800cec2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x222>
      TF_LITE_REPORT_ERROR(error_reporter,
 800ceb6:	4926      	ldr	r1, [pc, #152]	; (800cf50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 800ceb8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ceba:	f7fb fceb 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 800cebe:	2301      	movs	r3, #1
 800cec0:	e03e      	b.n	800cf40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800cec2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cec4:	f7ff fa71 	bl	800c3aa <_ZNK6tflite22QuantizationParameters5scaleEv>
 800cec8:	4602      	mov	r2, r0
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f001 f97b 	bl	800e1ca <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800ced4:	4603      	mov	r3, r0
 800ced6:	76fb      	strb	r3, [r7, #27]
 800ced8:	7efb      	ldrb	r3, [r7, #27]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d001      	beq.n	800cee2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x242>
 800cede:	7efb      	ldrb	r3, [r7, #27]
 800cee0:	e02e      	b.n	800cf40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	6a3a      	ldr	r2, [r7, #32]
 800cee8:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	3304      	adds	r3, #4
 800cef0:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 800cef2:	2300      	movs	r3, #0
 800cef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cef8:	6a3b      	ldr	r3, [r7, #32]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	da12      	bge.n	800cf24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x284>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 800cefe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf00:	f7ff fa61 	bl	800c3c6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800cf04:	4602      	mov	r2, r0
 800cf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf08:	4619      	mov	r1, r3
 800cf0a:	4610      	mov	r0, r2
 800cf0c:	f000 fff0 	bl	800def0 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800cf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	697a      	ldr	r2, [r7, #20]
 800cf16:	4413      	add	r3, r2
 800cf18:	4602      	mov	r2, r0
 800cf1a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 800cf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1e:	3301      	adds	r3, #1
 800cf20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf22:	e7e8      	b.n	800cef6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x256>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 800cf24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf26:	f7ff fa5c 	bl	800c3e2 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 800cf30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf32:	2201      	movs	r2, #1
 800cf34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800cf38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf3a:	69fa      	ldr	r2, [r7, #28]
 800cf3c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3734      	adds	r7, #52	; 0x34
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd90      	pop	{r4, r7, pc}
 800cf48:	0802c490 	.word	0x0802c490
 800cf4c:	0802778c 	.word	0x0802778c
 800cf50:	080277bc 	.word	0x080277bc

0800cf54 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b086      	sub	sp, #24
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
 800cf60:	603b      	str	r3, [r7, #0]
  *result = {};
 800cf62:	6a3b      	ldr	r3, [r7, #32]
 800cf64:	461a      	mov	r2, r3
 800cf66:	2300      	movs	r3, #0
 800cf68:	6013      	str	r3, [r2, #0]
 800cf6a:	6053      	str	r3, [r2, #4]
 800cf6c:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800cf6e:	68b8      	ldr	r0, [r7, #8]
 800cf70:	f7fe fff2 	bl	800bf58 <_ZNK6tflite6Tensor4typeEv>
 800cf74:	4603      	mov	r3, r0
 800cf76:	4618      	mov	r0, r3
 800cf78:	6a3b      	ldr	r3, [r7, #32]
 800cf7a:	3308      	adds	r3, #8
 800cf7c:	683a      	ldr	r2, [r7, #0]
 800cf7e:	4619      	mov	r1, r3
 800cf80:	f7fb ff8e 	bl	8008ea0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800cf84:	4603      	mov	r3, r0
 800cf86:	75fb      	strb	r3, [r7, #23]
 800cf88:	7dfb      	ldrb	r3, [r7, #23]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d001      	beq.n	800cf92 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 800cf8e:	7dfb      	ldrb	r3, [r7, #23]
 800cf90:	e027      	b.n	800cfe2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 800cf92:	6879      	ldr	r1, [r7, #4]
 800cf94:	68b8      	ldr	r0, [r7, #8]
 800cf96:	f7ff fe55 	bl	800cc44 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	6a3b      	ldr	r3, [r7, #32]
 800cf9e:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 800cfa0:	68b8      	ldr	r0, [r7, #8]
 800cfa2:	f7fe ffcb 	bl	800bf3c <_ZNK6tflite6Tensor5shapeEv>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	bf0c      	ite	eq
 800cfac:	2301      	moveq	r3, #1
 800cfae:	2300      	movne	r3, #0
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d003      	beq.n	800cfbe <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800cfb6:	6a3b      	ldr	r3, [r7, #32]
 800cfb8:	4a0c      	ldr	r2, [pc, #48]	; (800cfec <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 800cfba:	605a      	str	r2, [r3, #4]
 800cfbc:	e010      	b.n	800cfe0 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800cfbe:	68b8      	ldr	r0, [r7, #8]
 800cfc0:	f7fe ffbc 	bl	800bf3c <_ZNK6tflite6Tensor5shapeEv>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	6a3b      	ldr	r3, [r7, #32]
 800cfc8:	3304      	adds	r3, #4
 800cfca:	6839      	ldr	r1, [r7, #0]
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f001 f8e3 	bl	800e198 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	75bb      	strb	r3, [r7, #22]
 800cfd6:	7dbb      	ldrb	r3, [r7, #22]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d001      	beq.n	800cfe0 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 800cfdc:	7dbb      	ldrb	r3, [r7, #22]
 800cfde:	e000      	b.n	800cfe2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3718      	adds	r7, #24
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	0802c490 	.word	0x0802c490

0800cff0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 800cff0:	b480      	push	{r7}
 800cff2:	b085      	sub	sp, #20
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 800cffc:	4a0c      	ldr	r2, [pc, #48]	; (800d030 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	601a      	str	r2, [r3, #0]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	68ba      	ldr	r2, [r7, #8]
 800d006:	605a      	str	r2, [r3, #4]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	60da      	str	r2, [r3, #12]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2200      	movs	r2, #0
 800d012:	741a      	strb	r2, [r3, #16]
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2200      	movs	r2, #0
 800d018:	615a      	str	r2, [r3, #20]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2200      	movs	r2, #0
 800d01e:	619a      	str	r2, [r3, #24]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	4618      	mov	r0, r3
 800d024:	3714      	adds	r7, #20
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop
 800d030:	0802c4b4 	.word	0x0802c4b4

0800d034 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	4a04      	ldr	r2, [pc, #16]	; (800d050 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	601a      	str	r2, [r3, #0]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4618      	mov	r0, r3
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr
 800d050:	0802c4b4 	.word	0x0802c4b4

0800d054 <_ZN6tflite14MicroAllocatorD0Ev>:
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f7ff ffe9 	bl	800d034 <_ZN6tflite14MicroAllocatorD1Ev>
 800d062:	211c      	movs	r1, #28
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f017 fe7c 	bl	8024d62 <_ZdlPvj>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 800d074:	b580      	push	{r7, lr}
 800d076:	b086      	sub	sp, #24
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 800d080:	2110      	movs	r1, #16
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f7ff f831 	bl	800c0ea <_ZN6tflite14AlignPointerUpEPhj>
 800d088:	6178      	str	r0, [r7, #20]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 800d08a:	68fa      	ldr	r2, [r7, #12]
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	441a      	add	r2, r3
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 800d096:	693a      	ldr	r2, [r7, #16]
 800d098:	6979      	ldr	r1, [r7, #20]
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f003 f96e 	bl	801037c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	6879      	ldr	r1, [r7, #4]
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f000 f805 	bl	800d0b4 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 800d0aa:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3718      	adds	r7, #24
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 800d0b4:	b590      	push	{r4, r7, lr}
 800d0b6:	b085      	sub	sp, #20
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d101      	bne.n	800d0c8 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 800d0c4:	f018 f8d3 	bl	802526e <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d101      	bne.n	800d0d2 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 800d0ce:	f018 f8ce 	bl	802526e <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	330c      	adds	r3, #12
 800d0d8:	681b      	ldr	r3, [r3, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 800d0da:	2204      	movs	r2, #4
 800d0dc:	211c      	movs	r1, #28
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	4798      	blx	r3
 800d0e2:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	201c      	movs	r0, #28
 800d0ea:	f7fb fc06 	bl	80088fa <_ZnwjPv>
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	683a      	ldr	r2, [r7, #0]
 800d0f2:	6879      	ldr	r1, [r7, #4]
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	f7ff ff7b 	bl	800cff0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 800d0fa:	60bc      	str	r4, [r7, #8]
  return allocator;
 800d0fc:	68bb      	ldr	r3, [r7, #8]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3714      	adds	r7, #20
 800d102:	46bd      	mov	sp, r7
 800d104:	bd90      	pop	{r4, r7, pc}
	...

0800d108 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:

SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 800d108:	b5b0      	push	{r4, r5, r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d101      	bne.n	800d11c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x14>
 800d118:	f018 f8a9 	bl	802526e <abort>

  if (model_is_allocating_) {
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	7c1b      	ldrb	r3, [r3, #16]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d007      	beq.n	800d134 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	4936      	ldr	r1, [pc, #216]	; (800d204 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xfc>)
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7fb fbb2 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return nullptr;
 800d130:	2300      	movs	r3, #0
 800d132:	e063      	b.n	800d1fc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  model_is_allocating_ = true;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2201      	movs	r2, #1
 800d138:	741a      	strb	r2, [r3, #16]

  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6858      	ldr	r0, [r3, #4]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	685b      	ldr	r3, [r3, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	330c      	adds	r3, #12
 800d146:	681b      	ldr	r3, [r3, #0]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 800d148:	2204      	movs	r2, #4
 800d14a:	2108      	movs	r1, #8
 800d14c:	4798      	blx	r3
 800d14e:	60f8      	str	r0, [r7, #12]
  builtin_data_allocator_ =
 800d150:	68fb      	ldr	r3, [r7, #12]
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
 800d152:	4619      	mov	r1, r3
 800d154:	2008      	movs	r0, #8
 800d156:	f7fb fbd0 	bl	80088fa <_ZnwjPv>
 800d15a:	4604      	mov	r4, r0
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	4619      	mov	r1, r3
 800d162:	4620      	mov	r0, r4
 800d164:	f7ff fa56 	bl	800c614 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  builtin_data_allocator_ =
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	609c      	str	r4, [r3, #8]

  if (InitScratchBufferData() != kTfLiteOk) {
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 fd6f 	bl	800dc50 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 800d172:	4603      	mov	r3, r0
 800d174:	2b00      	cmp	r3, #0
 800d176:	bf14      	ite	ne
 800d178:	2301      	movne	r3, #1
 800d17a:	2300      	moveq	r3, #0
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d001      	beq.n	800d186 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x7e>
    return nullptr;
 800d182:	2300      	movs	r3, #0
 800d184:	e03a      	b.n	800d1fc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  // Allocate struct to store eval tensors, nodes and registrations.
  SubgraphAllocations* output = reinterpret_cast<SubgraphAllocations*>(
      memory_allocator_->AllocateFromTail(
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	685d      	ldr	r5, [r3, #4]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	685b      	ldr	r3, [r3, #4]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
          alignof(SubgraphAllocations)));
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	330c      	adds	r3, #12
 800d192:	681c      	ldr	r4, [r3, #0]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 800d194:	6838      	ldr	r0, [r7, #0]
 800d196:	f7ff f9e3 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800d19a:	4603      	mov	r3, r0
 800d19c:	4618      	mov	r0, r3
 800d19e:	f000 ff37 	bl	800e010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 800d1a6:	2204      	movs	r2, #4
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	47a0      	blx	r4
 800d1ae:	60b8      	str	r0, [r7, #8]
  if (output == nullptr) {
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d104      	bne.n	800d1c0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
    MicroPrintf("Failed to allocate memory for model metadata.");
 800d1b6:	4814      	ldr	r0, [pc, #80]	; (800d208 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x100>)
 800d1b8:	f001 fac2 	bl	800e740 <_Z11MicroPrintfPKcz>
    return nullptr;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	e01d      	b.n	800d1fc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	331c      	adds	r3, #28
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	68ba      	ldr	r2, [r7, #8]
 800d1ca:	6839      	ldr	r1, [r7, #0]
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	4798      	blx	r3
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d10a      	bne.n	800d1ec <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe4>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	3318      	adds	r3, #24
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	68ba      	ldr	r2, [r7, #8]
 800d1e0:	6839      	ldr	r1, [r7, #0]
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	4798      	blx	r3
 800d1e6:	4603      	mov	r3, r0
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d001      	beq.n	800d1f0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe8>
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	e000      	b.n	800d1f2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xea>
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d001      	beq.n	800d1fa <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf2>
    return nullptr;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	e000      	b.n	800d1fc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }
  return output;
 800d1fa:	68bb      	ldr	r3, [r7, #8]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bdb0      	pop	{r4, r5, r7, pc}
 800d204:	080277ec 	.word	0x080277ec
 800d208:	08027844 	.word	0x08027844

0800d20c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, SubgraphAllocations* subgraph_allocations,
    ScratchBufferHandle** scratch_buffer_handles) {
 800d20c:	b590      	push	{r4, r7, lr}
 800d20e:	b08b      	sub	sp, #44	; 0x2c
 800d210:	af02      	add	r7, sp, #8
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	607a      	str	r2, [r7, #4]
 800d218:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	7c1b      	ldrb	r3, [r3, #16]
 800d21e:	f083 0301 	eor.w	r3, r3, #1
 800d222:	b2db      	uxtb	r3, r3
 800d224:	2b00      	cmp	r3, #0
 800d226:	d007      	beq.n	800d238 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	4936      	ldr	r1, [pc, #216]	; (800d308 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xfc>)
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fb fb30 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 800d234:	2301      	movs	r3, #1
 800d236:	e062      	b.n	800d2fe <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  }

  // TODO(b/187993197): Track scratch buffers for each subgraph.
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d238:	2300      	movs	r3, #0
 800d23a:	61fb      	str	r3, [r7, #28]
 800d23c:	68b8      	ldr	r0, [r7, #8]
 800d23e:	f7ff f98f 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800d242:	4603      	mov	r3, r0
 800d244:	4618      	mov	r0, r3
 800d246:	f000 fee3 	bl	800e010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800d24a:	4602      	mov	r2, r0
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	4293      	cmp	r3, r2
 800d250:	bf34      	ite	cc
 800d252:	2301      	movcc	r3, #1
 800d254:	2300      	movcs	r3, #0
 800d256:	b2db      	uxtb	r3, r3
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d04c      	beq.n	800d2f6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xea>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800d25c:	68b8      	ldr	r0, [r7, #8]
 800d25e:	f7ff f97f 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800d262:	4603      	mov	r3, r0
 800d264:	69f9      	ldr	r1, [r7, #28]
 800d266:	4618      	mov	r0, r3
 800d268:	f000 fee0 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d26c:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d101      	bne.n	800d278 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x6c>
 800d274:	f017 fffb 	bl	802526e <abort>

    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3330      	adds	r3, #48	; 0x30
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	68fa      	ldr	r2, [r7, #12]
 800d282:	6952      	ldr	r2, [r2, #20]
 800d284:	6839      	ldr	r1, [r7, #0]
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	4798      	blx	r3
 800d28a:	4603      	mov	r3, r0
 800d28c:	75fb      	strb	r3, [r7, #23]
 800d28e:	7dfb      	ldrb	r3, [r7, #23]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d001      	beq.n	800d298 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x8c>
 800d294:	7dfb      	ldrb	r3, [r7, #23]
 800d296:	e032      	b.n	800d2fe <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        scratch_buffer_handles, scratch_buffer_request_count_));
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	332c      	adds	r3, #44	; 0x2c
 800d29e:	681c      	ldr	r4, [r3, #0]
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	00db      	lsls	r3, r3, #3
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	685a      	ldr	r2, [r3, #4]
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	6819      	ldr	r1, [r3, #0]
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	9300      	str	r3, [sp, #0]
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	68b9      	ldr	r1, [r7, #8]
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	47a0      	blx	r4
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	75bb      	strb	r3, [r7, #22]
 800d2be:	7dbb      	ldrb	r3, [r7, #22]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d001      	beq.n	800d2c8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xbc>
 800d2c4:	7dbb      	ldrb	r3, [r7, #22]
 800d2c6:	e01a      	b.n	800d2fe <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        model, subgraph_allocations[subgraph_idx].tensors,
        *scratch_buffer_handles, subgraph_idx));
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	3320      	adds	r3, #32
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	69fa      	ldr	r2, [r7, #28]
 800d2d2:	00d2      	lsls	r2, r2, #3
 800d2d4:	6879      	ldr	r1, [r7, #4]
 800d2d6:	440a      	add	r2, r1
 800d2d8:	6852      	ldr	r2, [r2, #4]
 800d2da:	69b9      	ldr	r1, [r7, #24]
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	4798      	blx	r3
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	757b      	strb	r3, [r7, #21]
 800d2e4:	7d7b      	ldrb	r3, [r7, #21]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d001      	beq.n	800d2ee <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe2>
 800d2ea:	7d7b      	ldrb	r3, [r7, #21]
 800d2ec:	e007      	b.n	800d2fe <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d2ee:	69fb      	ldr	r3, [r7, #28]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	61fb      	str	r3, [r7, #28]
 800d2f4:	e7a2      	b.n	800d23c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x30>
        subgraph, subgraph_allocations[subgraph_idx].tensors));
  }
  model_is_allocating_ = false;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	741a      	strb	r2, [r3, #16]
  return kTfLiteOk;
 800d2fc:	2300      	movs	r3, #0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3724      	adds	r7, #36	; 0x24
 800d302:	46bd      	mov	sp, r7
 800d304:	bd90      	pop	{r4, r7, pc}
 800d306:	bf00      	nop
 800d308:	08027874 	.word	0x08027874

0800d30c <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6858      	ldr	r0, [r3, #4]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	330c      	adds	r3, #12
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2210      	movs	r2, #16
 800d326:	6839      	ldr	r1, [r7, #0]
 800d328:	4798      	blx	r3
 800d32a:	4603      	mov	r3, r0
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3708      	adds	r7, #8
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 800d334:	b580      	push	{r7, lr}
 800d336:	b088      	sub	sp, #32
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	607a      	str	r2, [r7, #4]
 800d340:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	f000 fca1 	bl	800dc8a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800d348:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800d34e:	2300      	movs	r3, #0
 800d350:	61bb      	str	r3, [r7, #24]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	695b      	ldr	r3, [r3, #20]
 800d356:	69ba      	ldr	r2, [r7, #24]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d20e      	bcs.n	800d37a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x46>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	00db      	lsls	r3, r3, #3
 800d360:	697a      	ldr	r2, [r7, #20]
 800d362:	4413      	add	r3, r2
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d36a:	d102      	bne.n	800d372 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 800d36c:	69fb      	ldr	r3, [r7, #28]
 800d36e:	3301      	adds	r3, #1
 800d370:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	3301      	adds	r3, #1
 800d376:	61bb      	str	r3, [r7, #24]
 800d378:	e7eb      	b.n	800d352 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x1e>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	2b0b      	cmp	r3, #11
 800d37e:	d908      	bls.n	800d392 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x5e>
    TF_LITE_REPORT_ERROR(
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	68db      	ldr	r3, [r3, #12]
 800d384:	220c      	movs	r2, #12
 800d386:	4913      	ldr	r1, [pc, #76]	; (800d3d4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xa0>)
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fb fa83 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 800d38e:	2301      	movs	r3, #1
 800d390:	e01c      	b.n	800d3cc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x98>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	695b      	ldr	r3, [r3, #20]
 800d396:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 800d398:	697a      	ldr	r2, [r7, #20]
 800d39a:	4413      	add	r3, r2
 800d39c:	613b      	str	r3, [r7, #16]
  *current_request = {};
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	6013      	str	r3, [r2, #0]
 800d3a6:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	68ba      	ldr	r2, [r7, #8]
 800d3ac:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3b4:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	695b      	ldr	r3, [r3, #20]
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	695b      	ldr	r3, [r3, #20]
 800d3c4:	1c5a      	adds	r2, r3, #1
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 800d3ca:	2300      	movs	r3, #0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3720      	adds	r7, #32
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	080278c0 	.word	0x080278c0

0800d3d8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b086      	sub	sp, #24
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	3308      	adds	r3, #8
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 fc4b 	bl	800dc8a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800d3f4:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	617b      	str	r3, [r7, #20]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	695b      	ldr	r3, [r3, #20]
 800d3fe:	697a      	ldr	r2, [r7, #20]
 800d400:	429a      	cmp	r2, r3
 800d402:	d211      	bcs.n	800d428 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	00db      	lsls	r3, r3, #3
 800d408:	693a      	ldr	r2, [r7, #16]
 800d40a:	4413      	add	r3, r2
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d412:	d105      	bne.n	800d420 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	00db      	lsls	r3, r3, #3
 800d418:	693a      	ldr	r2, [r7, #16]
 800d41a:	4413      	add	r3, r2
 800d41c:	683a      	ldr	r2, [r7, #0]
 800d41e:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	3301      	adds	r3, #1
 800d424:	617b      	str	r3, [r7, #20]
 800d426:	e7e8      	b.n	800d3fa <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6858      	ldr	r0, [r3, #4]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	3308      	adds	r3, #8
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	6952      	ldr	r2, [r2, #20]
 800d43a:	320c      	adds	r2, #12
 800d43c:	00d1      	lsls	r1, r2, #3
 800d43e:	2204      	movs	r2, #4
 800d440:	4798      	blx	r3
 800d442:	4603      	mov	r3, r0
 800d444:	73fb      	strb	r3, [r7, #15]
 800d446:	7bfb      	ldrb	r3, [r7, #15]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d001      	beq.n	800d450 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 800d44c:	7bfb      	ldrb	r3, [r7, #15]
 800d44e:	e000      	b.n	800d452 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	3718      	adds	r7, #24
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
	...

0800d45c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 800d45c:	b5b0      	push	{r4, r5, r7, lr}
 800d45e:	b088      	sub	sp, #32
 800d460:	af00      	add	r7, sp, #0
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	60b9      	str	r1, [r7, #8]
 800d466:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d101      	bne.n	800d472 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 800d46e:	f017 fefe 	bl	802526e <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d472:	2300      	movs	r3, #0
 800d474:	61fb      	str	r3, [r7, #28]
 800d476:	68b8      	ldr	r0, [r7, #8]
 800d478:	f7ff f872 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800d47c:	4603      	mov	r3, r0
 800d47e:	4618      	mov	r0, r3
 800d480:	f000 fdc6 	bl	800e010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800d484:	4602      	mov	r2, r0
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	4293      	cmp	r3, r2
 800d48a:	bf34      	ite	cc
 800d48c:	2301      	movcc	r3, #1
 800d48e:	2300      	movcs	r3, #0
 800d490:	b2db      	uxtb	r3, r3
 800d492:	2b00      	cmp	r3, #0
 800d494:	d039      	beq.n	800d50a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xae>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800d496:	68b8      	ldr	r0, [r7, #8]
 800d498:	f7ff f862 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800d49c:	4603      	mov	r3, r0
 800d49e:	69f9      	ldr	r1, [r7, #28]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f000 fdc3 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d4a6:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d101      	bne.n	800d4b2 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 800d4ae:	f017 fede 	bl	802526e <abort>

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	685d      	ldr	r5, [r3, #4]
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	685b      	ldr	r3, [r3, #4]
            sizeof(NodeAndRegistration) * subgraph->operators()->size(),
            alignof(NodeAndRegistration)));
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	330c      	adds	r3, #12
 800d4be:	681c      	ldr	r4, [r3, #0]
            sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 800d4c0:	69b8      	ldr	r0, [r7, #24]
 800d4c2:	f7ff f814 	bl	800c4ee <_ZNK6tflite8SubGraph9operatorsEv>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f000 fd6d 	bl	800dfa8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	222c      	movs	r2, #44	; 0x2c
 800d4d2:	fb02 f303 	mul.w	r3, r2, r3
        memory_allocator_->AllocateFromTail(
 800d4d6:	2204      	movs	r2, #4
 800d4d8:	4619      	mov	r1, r3
 800d4da:	4628      	mov	r0, r5
 800d4dc:	47a0      	blx	r4
 800d4de:	6178      	str	r0, [r7, #20]
    if (output == nullptr) {
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d107      	bne.n	800d4f6 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x9a>
      TF_LITE_REPORT_ERROR(
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	490a      	ldr	r1, [pc, #40]	; (800d514 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb8>)
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fb f9d1 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e00a      	b.n	800d50c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	00db      	lsls	r3, r3, #3
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	697a      	ldr	r2, [r7, #20]
 800d500:	601a      	str	r2, [r3, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	3301      	adds	r3, #1
 800d506:	61fb      	str	r3, [r7, #28]
 800d508:	e7b5      	b.n	800d476 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 800d50a:	2300      	movs	r3, #0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3720      	adds	r7, #32
 800d510:	46bd      	mov	sp, r7
 800d512:	bdb0      	pop	{r4, r5, r7, pc}
 800d514:	080278f8 	.word	0x080278f8

0800d518 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 800d518:	b590      	push	{r4, r7, lr}
 800d51a:	b089      	sub	sp, #36	; 0x24
 800d51c:	af02      	add	r7, sp, #8
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]
 800d524:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 800d526:	68b8      	ldr	r0, [r7, #8]
 800d528:	f7ff f81a 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800d52c:	4602      	mov	r2, r0
 800d52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d530:	4619      	mov	r1, r3
 800d532:	4610      	mov	r0, r2
 800d534:	f000 fd7a 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d538:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d101      	bne.n	800d544 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 800d540:	f017 fe95 	bl	802526e <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	3324      	adds	r3, #36	; 0x24
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	68f8      	ldr	r0, [r7, #12]
 800d54e:	4798      	blx	r3
 800d550:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	3328      	adds	r3, #40	; 0x28
 800d558:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(
 800d55a:	2300      	movs	r3, #0
 800d55c:	9301      	str	r3, [sp, #4]
 800d55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	693a      	ldr	r2, [r7, #16]
 800d566:	68b9      	ldr	r1, [r7, #8]
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	47a0      	blx	r4
 800d56c:	4603      	mov	r3, r0
          /*allocate_temp=*/false) != kTfLiteOk) {
 800d56e:	2b00      	cmp	r3, #0
 800d570:	bf14      	ite	ne
 800d572:	2301      	movne	r3, #1
 800d574:	2300      	moveq	r3, #0
 800d576:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d007      	beq.n	800d58c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x74>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	4914      	ldr	r1, [pc, #80]	; (800d5d4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>)
 800d582:	4618      	mov	r0, r3
 800d584:	f7fb f986 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 800d588:	2300      	movs	r3, #0
 800d58a:	e01f      	b.n	800d5cc <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb4>
  }

  if (subgraph_allocations != nullptr) {
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d01b      	beq.n	800d5ca <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb2>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 800d592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d594:	00db      	lsls	r3, r3, #3
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	4413      	add	r3, r2
 800d59a:	6859      	ldr	r1, [r3, #4]
 800d59c:	683a      	ldr	r2, [r7, #0]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	005b      	lsls	r3, r3, #1
 800d5a2:	4413      	add	r3, r2
 800d5a4:	009b      	lsls	r3, r3, #2
 800d5a6:	440b      	add	r3, r1
 800d5a8:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 800d5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b0:	00db      	lsls	r3, r3, #3
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	6859      	ldr	r1, [r3, #4]
 800d5b8:	683a      	ldr	r2, [r7, #0]
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	005b      	lsls	r3, r3, #1
 800d5be:	4413      	add	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	440b      	add	r3, r1
 800d5c4:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 800d5ca:	693b      	ldr	r3, [r7, #16]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	371c      	adds	r7, #28
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd90      	pop	{r4, r7, pc}
 800d5d4:	08027930 	.word	0x08027930

0800d5d8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 800d5d8:	b590      	push	{r4, r7, lr}
 800d5da:	b089      	sub	sp, #36	; 0x24
 800d5dc:	af02      	add	r7, sp, #8
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	607a      	str	r2, [r7, #4]
 800d5e4:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 800d5e6:	68b8      	ldr	r0, [r7, #8]
 800d5e8:	f7fe ffba 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	4610      	mov	r0, r2
 800d5f4:	f000 fd1a 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d5f8:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d101      	bne.n	800d604 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 800d600:	f017 fe35 	bl	802526e <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6858      	ldr	r0, [r3, #4]
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	3310      	adds	r3, #16
 800d610:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800d612:	2204      	movs	r2, #4
 800d614:	2140      	movs	r1, #64	; 0x40
 800d616:	4798      	blx	r3
 800d618:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	3328      	adds	r3, #40	; 0x28
 800d620:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 800d622:	2301      	movs	r3, #1
 800d624:	9301      	str	r3, [sp, #4]
 800d626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d628:	9300      	str	r3, [sp, #0]
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	693a      	ldr	r2, [r7, #16]
 800d62e:	68b9      	ldr	r1, [r7, #8]
 800d630:	68f8      	ldr	r0, [r7, #12]
 800d632:	47a0      	blx	r4
 800d634:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800d636:	2b00      	cmp	r3, #0
 800d638:	bf14      	ite	ne
 800d63a:	2301      	movne	r3, #1
 800d63c:	2300      	moveq	r3, #0
 800d63e:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 800d640:	2b00      	cmp	r3, #0
 800d642:	d007      	beq.n	800d654 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7c>
    TF_LITE_REPORT_ERROR(
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	4914      	ldr	r1, [pc, #80]	; (800d69c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc4>)
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7fb f922 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 800d650:	2300      	movs	r3, #0
 800d652:	e01f      	b.n	800d694 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
  }

  if (subgraph_allocations != nullptr) {
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d01b      	beq.n	800d692 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xba>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 800d65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65c:	00db      	lsls	r3, r3, #3
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	4413      	add	r3, r2
 800d662:	6859      	ldr	r1, [r3, #4]
 800d664:	683a      	ldr	r2, [r7, #0]
 800d666:	4613      	mov	r3, r2
 800d668:	005b      	lsls	r3, r3, #1
 800d66a:	4413      	add	r3, r2
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	440b      	add	r3, r1
 800d670:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 800d676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d678:	00db      	lsls	r3, r3, #3
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	4413      	add	r3, r2
 800d67e:	6859      	ldr	r1, [r3, #4]
 800d680:	683a      	ldr	r2, [r7, #0]
 800d682:	4613      	mov	r3, r2
 800d684:	005b      	lsls	r3, r3, #1
 800d686:	4413      	add	r3, r2
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	440b      	add	r3, r1
 800d68c:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 800d692:	693b      	ldr	r3, [r7, #16]
}
 800d694:	4618      	mov	r0, r3
 800d696:	371c      	adds	r7, #28
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd90      	pop	{r4, r7, pc}
 800d69c:	0802797c 	.word	0x0802797c

0800d6a0 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	685a      	ldr	r2, [r3, #4]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	3314      	adds	r3, #20
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4610      	mov	r0, r2
 800d6b8:	4798      	blx	r3
}
 800d6ba:	bf00      	nop
 800d6bc:	3708      	adds	r7, #8
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
	...

0800d6c4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 800d6c4:	b5b0      	push	{r4, r5, r7, lr}
 800d6c6:	b08c      	sub	sp, #48	; 0x30
 800d6c8:	af02      	add	r7, sp, #8
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	60b9      	str	r1, [r7, #8]
 800d6ce:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d101      	bne.n	800d6da <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 800d6d6:	f017 fdca 	bl	802526e <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d6da:	2300      	movs	r3, #0
 800d6dc:	627b      	str	r3, [r7, #36]	; 0x24
 800d6de:	68b8      	ldr	r0, [r7, #8]
 800d6e0:	f7fe ff3e 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f000 fc92 	bl	800e010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	bf34      	ite	cc
 800d6f4:	2301      	movcc	r3, #1
 800d6f6:	2300      	movcs	r3, #0
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d076      	beq.n	800d7ec <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x128>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800d6fe:	68b8      	ldr	r0, [r7, #8]
 800d700:	f7fe ff2e 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800d704:	4603      	mov	r3, r0
 800d706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d708:	4618      	mov	r0, r3
 800d70a:	f000 fc8f 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d70e:	61f8      	str	r0, [r7, #28]
    TFLITE_DCHECK(subgraph != nullptr);
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d101      	bne.n	800d71a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 800d716:	f017 fdaa 	bl	802526e <abort>

    size_t alloc_count = subgraph->tensors()->size();
 800d71a:	69f8      	ldr	r0, [r7, #28]
 800d71c:	f7fe febd 	bl	800c49a <_ZNK6tflite8SubGraph7tensorsEv>
 800d720:	4603      	mov	r3, r0
 800d722:	4618      	mov	r0, r3
 800d724:	f000 fc0c 	bl	800df40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800d728:	61b8      	str	r0, [r7, #24]
    TfLiteEvalTensor* tensors =
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6858      	ldr	r0, [r3, #4]
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	685b      	ldr	r3, [r3, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	330c      	adds	r3, #12
 800d736:	681c      	ldr	r4, [r3, #0]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800d738:	69ba      	ldr	r2, [r7, #24]
 800d73a:	4613      	mov	r3, r2
 800d73c:	005b      	lsls	r3, r3, #1
 800d73e:	4413      	add	r3, r2
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	2204      	movs	r2, #4
 800d744:	4619      	mov	r1, r3
 800d746:	47a0      	blx	r4
 800d748:	6178      	str	r0, [r7, #20]
    if (tensors == nullptr) {
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d10c      	bne.n	800d76a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
      TF_LITE_REPORT_ERROR(
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	68d8      	ldr	r0, [r3, #12]
 800d754:	69ba      	ldr	r2, [r7, #24]
 800d756:	4613      	mov	r3, r2
 800d758:	005b      	lsls	r3, r3, #1
 800d75a:	4413      	add	r3, r2
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	461a      	mov	r2, r3
 800d760:	4925      	ldr	r1, [pc, #148]	; (800d7f8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x134>)
 800d762:	f7fb f897 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for context->eval_tensors, "
          "%d bytes required",
          sizeof(TfLiteEvalTensor) * alloc_count);
      return kTfLiteError;
 800d766:	2301      	movs	r3, #1
 800d768:	e041      	b.n	800d7ee <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    }

    for (size_t i = 0; i < alloc_count; ++i) {
 800d76a:	2300      	movs	r3, #0
 800d76c:	623b      	str	r3, [r7, #32]
 800d76e:	6a3a      	ldr	r2, [r7, #32]
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	429a      	cmp	r2, r3
 800d774:	d230      	bcs.n	800d7d8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	685c      	ldr	r4, [r3, #4]
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 800d77a:	69f8      	ldr	r0, [r7, #28]
 800d77c:	f7fe fe8d 	bl	800c49a <_ZNK6tflite8SubGraph7tensorsEv>
 800d780:	4603      	mov	r3, r0
 800d782:	6a39      	ldr	r1, [r7, #32]
 800d784:	4618      	mov	r0, r3
 800d786:	f000 fbe9 	bl	800df5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800d78a:	4605      	mov	r5, r0
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800d78c:	68b8      	ldr	r0, [r7, #8]
 800d78e:	f7fe fef5 	bl	800c57c <_ZNK6tflite5Model7buffersEv>
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	68d9      	ldr	r1, [r3, #12]
          error_reporter_, &tensors[i]);
 800d796:	6a3a      	ldr	r2, [r7, #32]
 800d798:	4613      	mov	r3, r2
 800d79a:	005b      	lsls	r3, r3, #1
 800d79c:	4413      	add	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	461a      	mov	r2, r3
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	9300      	str	r3, [sp, #0]
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	4629      	mov	r1, r5
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	f7ff fbd0 	bl	800cf54 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	74fb      	strb	r3, [r7, #19]
      if (status != kTfLiteOk) {
 800d7b8:	7cfb      	ldrb	r3, [r7, #19]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d008      	beq.n	800d7d0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10c>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	6a3a      	ldr	r2, [r7, #32]
 800d7c4:	490d      	ldr	r1, [pc, #52]	; (800d7fc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x138>)
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fb f864 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             i);
        return kTfLiteError;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	e00e      	b.n	800d7ee <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    for (size_t i = 0; i < alloc_count; ++i) {
 800d7d0:	6a3b      	ldr	r3, [r7, #32]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	623b      	str	r3, [r7, #32]
 800d7d6:	e7ca      	b.n	800d76e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xaa>
      }
    }
    subgraph_allocations[subgraph_idx].tensors = tensors;
 800d7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7da:	00db      	lsls	r3, r3, #3
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	4413      	add	r3, r2
 800d7e0:	697a      	ldr	r2, [r7, #20]
 800d7e2:	605a      	str	r2, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	627b      	str	r3, [r7, #36]	; 0x24
 800d7ea:	e778      	b.n	800d6de <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3728      	adds	r7, #40	; 0x28
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bdb0      	pop	{r4, r5, r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	080279c0 	.word	0x080279c0
 800d7fc:	08027a08 	.word	0x08027a08

0800d800 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 800d800:	b5b0      	push	{r4, r5, r7, lr}
 800d802:	b088      	sub	sp, #32
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800d80c:	2300      	movs	r3, #0
 800d80e:	61fb      	str	r3, [r7, #28]
 800d810:	68b8      	ldr	r0, [r7, #8]
 800d812:	f7fe fe42 	bl	800c49a <_ZNK6tflite8SubGraph7tensorsEv>
 800d816:	4603      	mov	r3, r0
 800d818:	4618      	mov	r0, r3
 800d81a:	f000 fb91 	bl	800df40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800d81e:	4602      	mov	r2, r0
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	4293      	cmp	r3, r2
 800d824:	bf34      	ite	cc
 800d826:	2301      	movcc	r3, #1
 800d828:	2300      	movcs	r3, #0
 800d82a:	b2db      	uxtb	r3, r3
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d04f      	beq.n	800d8d0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 800d830:	68b8      	ldr	r0, [r7, #8]
 800d832:	f7fe fe32 	bl	800c49a <_ZNK6tflite8SubGraph7tensorsEv>
 800d836:	4603      	mov	r3, r0
 800d838:	69f9      	ldr	r1, [r7, #28]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f000 fb8e 	bl	800df5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800d840:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 800d842:	69b8      	ldr	r0, [r7, #24]
 800d844:	f7fe fdf9 	bl	800c43a <_ZNK6tflite6Tensor11is_variableEv>
 800d848:	4603      	mov	r3, r0
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d03c      	beq.n	800d8c8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 800d84e:	69fa      	ldr	r2, [r7, #28]
 800d850:	4613      	mov	r3, r2
 800d852:	005b      	lsls	r3, r3, #1
 800d854:	4413      	add	r3, r2
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	461a      	mov	r2, r3
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4413      	add	r3, r2
 800d85e:	f107 0210 	add.w	r2, r7, #16
 800d862:	4611      	mov	r1, r2
 800d864:	4618      	mov	r0, r3
 800d866:	f7fe fd54 	bl	800c312 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800d86a:	4603      	mov	r3, r0
 800d86c:	75fb      	strb	r3, [r7, #23]
 800d86e:	7dfb      	ldrb	r3, [r7, #23]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d001      	beq.n	800d878 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 800d874:	7dfb      	ldrb	r3, [r7, #23]
 800d876:	e02c      	b.n	800d8d2 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6858      	ldr	r0, [r3, #4]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	330c      	adds	r3, #12
 800d884:	681d      	ldr	r5, [r3, #0]
 800d886:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 800d888:	69fa      	ldr	r2, [r7, #28]
 800d88a:	4613      	mov	r3, r2
 800d88c:	005b      	lsls	r3, r3, #1
 800d88e:	4413      	add	r3, r2
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	461a      	mov	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 800d898:	2210      	movs	r2, #16
 800d89a:	47a8      	blx	r5
 800d89c:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 800d89e:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 800d8a0:	69fa      	ldr	r2, [r7, #28]
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	005b      	lsls	r3, r3, #1
 800d8a6:	4413      	add	r3, r2
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	4413      	add	r3, r2
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d108      	bne.n	800d8c8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	693a      	ldr	r2, [r7, #16]
 800d8bc:	4907      	ldr	r1, [pc, #28]	; (800d8dc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fa ffe8 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e004      	b.n	800d8d2 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	61fb      	str	r3, [r7, #28]
 800d8ce:	e79f      	b.n	800d810 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 800d8d0:	2300      	movs	r3, #0
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3720      	adds	r7, #32
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bdb0      	pop	{r4, r5, r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	08027a28 	.word	0x08027a28

0800d8e0 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6858      	ldr	r0, [r3, #4]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	330c      	adds	r3, #12
 800d8f4:	681b      	ldr	r3, [r3, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 800d8f6:	2204      	movs	r2, #4
 800d8f8:	2140      	movs	r1, #64	; 0x40
 800d8fa:	4798      	blx	r3
 800d8fc:	4603      	mov	r3, r0
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3708      	adds	r7, #8
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
 800d906:	b5b0      	push	{r4, r5, r7, lr}
 800d908:	b086      	sub	sp, #24
 800d90a:	af02      	add	r7, sp, #8
 800d90c:	60f8      	str	r0, [r7, #12]
 800d90e:	60b9      	str	r1, [r7, #8]
 800d910:	607a      	str	r2, [r7, #4]
 800d912:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 800d918:	68b8      	ldr	r0, [r7, #8]
 800d91a:	f7fe fe21 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800d91e:	4602      	mov	r2, r0
 800d920:	6a3b      	ldr	r3, [r7, #32]
 800d922:	4619      	mov	r1, r3
 800d924:	4610      	mov	r0, r2
 800d926:	f000 fb81 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d92a:	4603      	mov	r3, r0
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fe fdb4 	bl	800c49a <_ZNK6tflite8SubGraph7tensorsEv>
 800d932:	4602      	mov	r2, r0
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	4619      	mov	r1, r3
 800d938:	4610      	mov	r0, r2
 800d93a:	f000 fb0f 	bl	800df5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800d93e:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800d940:	68b8      	ldr	r0, [r7, #8]
 800d942:	f7fe fe1b 	bl	800c57c <_ZNK6tflite5Model7buffersEv>
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	68db      	ldr	r3, [r3, #12]
 800d94a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	9201      	str	r2, [sp, #4]
 800d952:	9300      	str	r3, [sp, #0]
 800d954:	4603      	mov	r3, r0
 800d956:	462a      	mov	r2, r5
 800d958:	4620      	mov	r0, r4
 800d95a:	f7ff f9a1 	bl	800cca0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 800d95e:	4603      	mov	r3, r0
      model->buffers(), error_reporter_, tensor);
}
 800d960:	4618      	mov	r0, r3
 800d962:	3710      	adds	r7, #16
 800d964:	46bd      	mov	sp, r7
 800d966:	bdb0      	pop	{r4, r5, r7, pc}

0800d968 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
 800d968:	b590      	push	{r4, r7, lr}
 800d96a:	b0a5      	sub	sp, #148	; 0x94
 800d96c:	af02      	add	r7, sp, #8
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
 800d974:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 800d976:	2300      	movs	r3, #0
 800d978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  //
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800d97c:	68b8      	ldr	r0, [r7, #8]
 800d97e:	f7fe fdef 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800d982:	4602      	mov	r2, r0
 800d984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d988:	4619      	mov	r1, r3
 800d98a:	4610      	mov	r0, r2
 800d98c:	f000 fb4e 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d990:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 800d994:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d998:	f7fe fd7f 	bl	800c49a <_ZNK6tflite8SubGraph7tensorsEv>
 800d99c:	4603      	mov	r3, r0
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f000 face 	bl	800df40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	695b      	ldr	r3, [r3, #20]
 800d9aa:	4413      	add	r3, r2
 800d9ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 800d9ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d9b0:	4613      	mov	r3, r2
 800d9b2:	005b      	lsls	r3, r3, #1
 800d9b4:	4413      	add	r3, r2
 800d9b6:	00db      	lsls	r3, r3, #3
 800d9b8:	67bb      	str	r3, [r7, #120]	; 0x78

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6858      	ldr	r0, [r3, #4]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	3310      	adds	r3, #16
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	2204      	movs	r2, #4
 800d9ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d9cc:	4798      	blx	r3
 800d9ce:	6778      	str	r0, [r7, #116]	; 0x74
  if (allocation_info == nullptr) {
 800d9d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d108      	bne.n	800d9e8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x80>
    TF_LITE_REPORT_ERROR(
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	68db      	ldr	r3, [r3, #12]
 800d9da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d9dc:	4985      	ldr	r1, [pc, #532]	; (800dbf4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x28c>)
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7fa ff58 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 800d9e4:	2401      	movs	r4, #1
 800d9e6:	e0ff      	b.n	800dbe8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 800d9e8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d9ec:	f7fe fd55 	bl	800c49a <_ZNK6tflite8SubGraph7tensorsEv>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f000 faa4 	bl	800df40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800d9f8:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	695a      	ldr	r2, [r3, #20]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	4613      	mov	r3, r2
 800da0a:	460a      	mov	r2, r1
 800da0c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800da0e:	f7fe fe37 	bl	800c680 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 800da12:	2300      	movs	r3, #0
 800da14:	643b      	str	r3, [r7, #64]	; 0x40
  TF_LITE_ENSURE_STATUS(
 800da16:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800da1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800da1e:	68b9      	ldr	r1, [r7, #8]
 800da20:	4618      	mov	r0, r3
 800da22:	f7fe ffab 	bl	800c97c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 800da26:	4603      	mov	r3, r0
 800da28:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800da2c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800da30:	2b00      	cmp	r3, #0
 800da32:	d002      	beq.n	800da3a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd2>
 800da34:	f897 4073 	ldrb.w	r4, [r7, #115]	; 0x73
 800da38:	e0d6      	b.n	800dbe8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 800da3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da3c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800da46:	f7fe fe35 	bl	800c6b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 800da4a:	4603      	mov	r3, r0
 800da4c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 800da50:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800da54:	2b00      	cmp	r3, #0
 800da56:	d002      	beq.n	800da5e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf6>
 800da58:	f897 4072 	ldrb.w	r4, [r7, #114]	; 0x72
 800da5c:	e0c4      	b.n	800dbe8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f000 f913 	bl	800dc8a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800da64:	66f8      	str	r0, [r7, #108]	; 0x6c

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 800da66:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800da6a:	683a      	ldr	r2, [r7, #0]
 800da6c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800da6e:	4618      	mov	r0, r3
 800da70:	f7ff f800 	bl	800ca74 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 800da74:	4603      	mov	r3, r0
 800da76:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800da7a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d002      	beq.n	800da88 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x120>
 800da82:	f897 406b 	ldrb.w	r4, [r7, #107]	; 0x6b
 800da86:	e0af      	b.n	800dbe8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	2110      	movs	r1, #16
 800da8e:	4618      	mov	r0, r3
 800da90:	f002 fd8a 	bl	80105a8 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 800da94:	6678      	str	r0, [r7, #100]	; 0x64
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	6858      	ldr	r0, [r3, #4]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	3310      	adds	r3, #16
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	2210      	movs	r2, #16
 800daa6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800daa8:	4798      	blx	r3
 800daaa:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 800daac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d10e      	bne.n	800dad0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x168>
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	68d8      	ldr	r0, [r3, #12]
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	68d9      	ldr	r1, [r3, #12]
 800daba:	4b4f      	ldr	r3, [pc, #316]	; (800dbf8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x290>)
 800dabc:	9301      	str	r3, [sp, #4]
 800dabe:	f240 33ce 	movw	r3, #974	; 0x3ce
 800dac2:	9300      	str	r3, [sp, #0]
 800dac4:	4b4d      	ldr	r3, [pc, #308]	; (800dbfc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x294>)
 800dac6:	4a4e      	ldr	r2, [pc, #312]	; (800dc00 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x298>)
 800dac8:	f7fa fefd 	bl	80088c6 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800dacc:	2401      	movs	r4, #1
 800dace:	e08b      	b.n	800dbe8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 800dad0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dad2:	f107 0314 	add.w	r3, r7, #20
 800dad6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dad8:	4618      	mov	r0, r3
 800dada:	f00a fc3f 	bl	801835c <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	68d8      	ldr	r0, [r3, #12]
 800dae2:	f107 0114 	add.w	r1, r7, #20
 800dae6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dae8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800daea:	f7ff f80e 	bl	800cb0a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 800daee:	4603      	mov	r3, r0
 800daf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800daf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d002      	beq.n	800db02 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x19a>
 800dafc:	f897 405f 	ldrb.w	r4, [r7, #95]	; 0x5f
 800db00:	e06d      	b.n	800dbde <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	685a      	ldr	r2, [r3, #4]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	3314      	adds	r3, #20
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4610      	mov	r0, r2
 800db12:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	2110      	movs	r1, #16
 800db1a:	4618      	mov	r0, r3
 800db1c:	f002 fd44 	bl	80105a8 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 800db20:	65b8      	str	r0, [r7, #88]	; 0x58

  // Make sure we have enough arena size.
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 800db22:	f107 0314 	add.w	r3, r7, #20
 800db26:	4618      	mov	r0, r3
 800db28:	f00a fed1 	bl	80188ce <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800db2c:	4602      	mov	r2, r0
 800db2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db30:	4293      	cmp	r3, r2
 800db32:	bf34      	ite	cc
 800db34:	2301      	movcc	r3, #1
 800db36:	2300      	movcs	r3, #0
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00e      	beq.n	800db5c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
    TF_LITE_REPORT_ERROR(
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	68dc      	ldr	r4, [r3, #12]
 800db42:	f107 0314 	add.w	r3, r7, #20
 800db46:	4618      	mov	r0, r3
 800db48:	f00a fec1 	bl	80188ce <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800db4c:	4602      	mov	r2, r0
 800db4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db50:	492c      	ldr	r1, [pc, #176]	; (800dc04 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x29c>)
 800db52:	4620      	mov	r0, r4
 800db54:	f7fa fe9e 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        planner.GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 800db58:	2401      	movs	r4, #1
 800db5a:	e040      	b.n	800dbde <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	68dc      	ldr	r4, [r3, #12]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	4618      	mov	r0, r3
 800db66:	f002 fd13 	bl	8010590 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 800db6a:	4602      	mov	r2, r0
 800db6c:	f107 0114 	add.w	r1, r7, #20
 800db70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db72:	9300      	str	r3, [sp, #0]
 800db74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db76:	4620      	mov	r0, r4
 800db78:	f7ff f821 	bl	800cbbe <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 800db7c:	4603      	mov	r3, r0
 800db7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800db82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db86:	2b00      	cmp	r3, #0
 800db88:	d002      	beq.n	800db90 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>
 800db8a:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 800db8e:	e026      	b.n	800dbde <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
#ifdef TF_LITE_SHOW_MEMORY_USE
  planner.PrintMemoryPlan();
#endif
  head_usage = planner.GetMaximumMemorySize();
 800db90:	f107 0314 	add.w	r3, r7, #20
 800db94:	4618      	mov	r0, r3
 800db96:	f00a fe9a 	bl	80188ce <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800db9a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	699b      	ldr	r3, [r3, #24]
 800dba2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d903      	bls.n	800dbb2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x24a>
    max_head_buffer_usage_ = head_usage;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800dbb0:	619a      	str	r2, [r3, #24]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	6858      	ldr	r0, [r3, #4]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	3308      	adds	r3, #8
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	68fa      	ldr	r2, [r7, #12]
 800dbc2:	6991      	ldr	r1, [r2, #24]
 800dbc4:	2210      	movs	r2, #16
 800dbc6:	4798      	blx	r3
 800dbc8:	4603      	mov	r3, r0
 800dbca:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800dbce:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d002      	beq.n	800dbdc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x274>
 800dbd6:	f897 4056 	ldrb.w	r4, [r7, #86]	; 0x56
 800dbda:	e000      	b.n	800dbde <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 800dbdc:	2400      	movs	r4, #0
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 800dbde:	f107 0314 	add.w	r3, r7, #20
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f00a fc0c 	bl	8018400 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800dbe8:	4623      	mov	r3, r4
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	378c      	adds	r7, #140	; 0x8c
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd90      	pop	{r4, r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	08027a58 	.word	0x08027a58
 800dbf8:	08027af0 	.word	0x08027af0
 800dbfc:	08027a9c 	.word	0x08027a9c
 800dc00:	08027ad8 	.word	0x08027ad8
 800dc04:	08027b0c 	.word	0x08027b0c

0800dc08 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d101      	bne.n	800dc1e <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 800dc1a:	f017 fb28 	bl	802526e <abort>

  if (scratch_buffer_request_count_ == 0) {
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	695b      	ldr	r3, [r3, #20]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d101      	bne.n	800dc2a <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 800dc26:	2300      	movs	r3, #0
 800dc28:	e00e      	b.n	800dc48 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	6858      	ldr	r0, [r3, #4]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	330c      	adds	r3, #12
 800dc36:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	0091      	lsls	r1, r2, #2
 800dc3c:	2204      	movs	r2, #4
 800dc3e:	4798      	blx	r3
 800dc40:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 800dc46:	2300      	movs	r3, #0
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	615a      	str	r2, [r3, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6858      	ldr	r0, [r3, #4]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	3308      	adds	r3, #8
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2204      	movs	r2, #4
 800dc6e:	2160      	movs	r1, #96	; 0x60
 800dc70:	4798      	blx	r3
 800dc72:	4603      	mov	r3, r0
 800dc74:	73fb      	strb	r3, [r7, #15]
 800dc76:	7bfb      	ldrb	r3, [r7, #15]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d001      	beq.n	800dc80 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 800dc7c:	7bfb      	ldrb	r3, [r7, #15]
 800dc7e:	e000      	b.n	800dc82 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 800dc80:	2300      	movs	r3, #0
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b082      	sub	sp, #8
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f002 fc7a 	bl	8010590 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2104      	movs	r1, #4
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7fe fa22 	bl	800c0ea <_ZN6tflite14AlignPointerUpEPhj>
 800dca6:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3708      	adds	r7, #8
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>:

TfLiteStatus MicroAllocator::FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array,
    TfLiteIntArray** result) {
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	60f8      	str	r0, [r7, #12]
 800dcb8:	60b9      	str	r1, [r7, #8]
 800dcba:	607a      	str	r2, [r7, #4]
  return internal::FlatBufferVectorToTfLiteTypeArray(
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6858      	ldr	r0, [r3, #4]
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	68d9      	ldr	r1, [r3, #12]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	68ba      	ldr	r2, [r7, #8]
 800dcc8:	f000 fa66 	bl	800e198 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800dccc:	4603      	mov	r3, r0
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
 800dcd6:	b480      	push	{r7}
 800dcd8:	b083      	sub	sp, #12
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
  return builtin_data_allocator_;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	689b      	ldr	r3, [r3, #8]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	370c      	adds	r7, #12
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr

0800dcee <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b082      	sub	sp, #8
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800dcfa:	887b      	ldrh	r3, [r7, #2]
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 fa7c 	bl	800e1fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800dd04:	4603      	mov	r3, r0
  }
 800dd06:	4618      	mov	r0, r3
 800dd08:	3708      	adds	r7, #8
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b082      	sub	sp, #8
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	460b      	mov	r3, r1
 800dd18:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800dd1a:	887b      	ldrh	r3, [r7, #2]
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 fa8c 	bl	800e23c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800dd24:	4603      	mov	r3, r0
  }
 800dd26:	4618      	mov	r0, r3
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	b082      	sub	sp, #8
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
 800dd36:	460b      	mov	r3, r1
 800dd38:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800dd3a:	887b      	ldrh	r3, [r7, #2]
 800dd3c:	4619      	mov	r1, r3
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f000 fa9c 	bl	800e27c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800dd44:	4603      	mov	r3, r0
  }
 800dd46:	4618      	mov	r0, r3
 800dd48:	3708      	adds	r7, #8
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b086      	sub	sp, #24
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	60f8      	str	r0, [r7, #12]
 800dd56:	460b      	mov	r3, r1
 800dd58:	607a      	str	r2, [r7, #4]
 800dd5a:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 800dd5c:	897b      	ldrh	r3, [r7, #10]
 800dd5e:	4619      	mov	r1, r3
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f7fa fde6 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800dd66:	4603      	mov	r3, r0
 800dd68:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800dd6a:	8afb      	ldrh	r3, [r7, #22]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d007      	beq.n	800dd80 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 800dd70:	68fa      	ldr	r2, [r7, #12]
 800dd72:	8afb      	ldrh	r3, [r7, #22]
 800dd74:	4413      	add	r3, r2
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7fb fc05 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	e000      	b.n	800dd82 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 800dd80:	687b      	ldr	r3, [r7, #4]
  }
 800dd82:	4618      	mov	r0, r3
 800dd84:	3718      	adds	r7, #24
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b082      	sub	sp, #8
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
 800dd92:	460b      	mov	r3, r1
 800dd94:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800dd96:	887b      	ldrh	r3, [r7, #2]
 800dd98:	4619      	mov	r1, r3
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 fa8e 	bl	800e2bc <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800dda0:	4603      	mov	r3, r0
  }
 800dda2:	4618      	mov	r0, r3
 800dda4:	3708      	adds	r7, #8
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}

0800ddaa <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800ddaa:	b580      	push	{r7, lr}
 800ddac:	b082      	sub	sp, #8
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800ddb6:	887b      	ldrh	r3, [r7, #2]
 800ddb8:	4619      	mov	r1, r3
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 fa9e 	bl	800e2fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800ddc0:	4603      	mov	r3, r0
  }
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3708      	adds	r7, #8
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b082      	sub	sp, #8
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800ddd6:	887b      	ldrh	r3, [r7, #2]
 800ddd8:	4619      	mov	r1, r3
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 faae 	bl	800e33c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800dde0:	4603      	mov	r3, r0
  }
 800dde2:	4618      	mov	r0, r3
 800dde4:	3708      	adds	r7, #8
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b082      	sub	sp, #8
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800ddf6:	887b      	ldrh	r3, [r7, #2]
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 fabe 	bl	800e37c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800de00:	4603      	mov	r3, r0
  }
 800de02:	4618      	mov	r0, r3
 800de04:	3708      	adds	r7, #8
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}

0800de0a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800de0a:	b580      	push	{r7, lr}
 800de0c:	b082      	sub	sp, #8
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
 800de12:	460b      	mov	r3, r1
 800de14:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800de16:	887b      	ldrh	r3, [r7, #2]
 800de18:	4619      	mov	r1, r3
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 face 	bl	800e3bc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800de20:	4603      	mov	r3, r0
  }
 800de22:	4618      	mov	r0, r3
 800de24:	3708      	adds	r7, #8
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b082      	sub	sp, #8
 800de2e:	af00      	add	r7, sp, #0
 800de30:	6078      	str	r0, [r7, #4]
 800de32:	460b      	mov	r3, r1
 800de34:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800de36:	887b      	ldrh	r3, [r7, #2]
 800de38:	4619      	mov	r1, r3
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 fade 	bl	800e3fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800de40:	4603      	mov	r3, r0
  }
 800de42:	4618      	mov	r0, r3
 800de44:	3708      	adds	r7, #8
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b082      	sub	sp, #8
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4618      	mov	r0, r3
 800de58:	f7fb fb7c 	bl	8009554 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800de5c:	4603      	mov	r3, r0
 800de5e:	4618      	mov	r0, r3
 800de60:	3708      	adds	r7, #8
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 800de66:	b580      	push	{r7, lr}
 800de68:	b082      	sub	sp, #8
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	4618      	mov	r0, r3
 800de74:	f7fb fb6e 	bl	8009554 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800de78:	4603      	mov	r3, r0
 800de7a:	4618      	mov	r0, r3
 800de7c:	3708      	adds	r7, #8
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
	...

0800de84 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f7ff ffe9 	bl	800de66 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800de94:	4602      	mov	r2, r0
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	4293      	cmp	r3, r2
 800de9a:	d306      	bcc.n	800deaa <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 800de9c:	4b0a      	ldr	r3, [pc, #40]	; (800dec8 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 800de9e:	4a0b      	ldr	r2, [pc, #44]	; (800decc <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 800dea0:	f44f 7183 	mov.w	r1, #262	; 0x106
 800dea4:	480a      	ldr	r0, [pc, #40]	; (800ded0 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 800dea6:	f017 f9e9 	bl	802527c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 fae8 	bl	800e480 <_ZNK11flatbuffers6VectorIfE4DataEv>
 800deb0:	4603      	mov	r3, r0
 800deb2:	6839      	ldr	r1, [r7, #0]
 800deb4:	4618      	mov	r0, r3
 800deb6:	f000 facd 	bl	800e454 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 800deba:	eef0 7a40 	vmov.f32	s15, s0
  }
 800debe:	eeb0 0a67 	vmov.f32	s0, s15
 800dec2:	3708      	adds	r7, #8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	08027b5c 	.word	0x08027b5c
 800decc:	08027b68 	.word	0x08027b68
 800ded0:	08027c30 	.word	0x08027c30

0800ded4 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7fb fb37 	bl	8009554 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800dee6:	4603      	mov	r3, r0
 800dee8:	4618      	mov	r0, r3
 800deea:	3708      	adds	r7, #8
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f7ff ffea 	bl	800ded4 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800df00:	4602      	mov	r2, r0
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	4293      	cmp	r3, r2
 800df06:	d306      	bcc.n	800df16 <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 800df08:	4b0a      	ldr	r3, [pc, #40]	; (800df34 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 800df0a:	4a0b      	ldr	r2, [pc, #44]	; (800df38 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 800df0c:	f44f 7183 	mov.w	r1, #262	; 0x106
 800df10:	480a      	ldr	r0, [pc, #40]	; (800df3c <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 800df12:	f017 f9b3 	bl	802527c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 fad4 	bl	800e4c4 <_ZNK11flatbuffers6VectorIxE4DataEv>
 800df1c:	4603      	mov	r3, r0
 800df1e:	6839      	ldr	r1, [r7, #0]
 800df20:	4618      	mov	r0, r3
 800df22:	f000 fab9 	bl	800e498 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 800df26:	4602      	mov	r2, r0
 800df28:	460b      	mov	r3, r1
  }
 800df2a:	4610      	mov	r0, r2
 800df2c:	4619      	mov	r1, r3
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	08027b5c 	.word	0x08027b5c
 800df38:	08027cb4 	.word	0x08027cb4
 800df3c:	08027c30 	.word	0x08027c30

0800df40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fb fb01 	bl	8009554 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800df52:	4603      	mov	r3, r0
 800df54:	4618      	mov	r0, r3
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f7ff ffea 	bl	800df40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800df6c:	4602      	mov	r2, r0
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	4293      	cmp	r3, r2
 800df72:	d306      	bcc.n	800df82 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 800df74:	4b09      	ldr	r3, [pc, #36]	; (800df9c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 800df76:	4a0a      	ldr	r2, [pc, #40]	; (800dfa0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 800df78:	f44f 7183 	mov.w	r1, #262	; 0x106
 800df7c:	4809      	ldr	r0, [pc, #36]	; (800dfa4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 800df7e:	f017 f97d 	bl	802527c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 fabe 	bl	800e504 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 800df88:	4603      	mov	r3, r0
 800df8a:	6839      	ldr	r1, [r7, #0]
 800df8c:	4618      	mov	r0, r3
 800df8e:	f000 faa5 	bl	800e4dc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 800df92:	4603      	mov	r3, r0
  }
 800df94:	4618      	mov	r0, r3
 800df96:	3708      	adds	r7, #8
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	08027b5c 	.word	0x08027b5c
 800dfa0:	08027e5c 	.word	0x08027e5c
 800dfa4:	08027c30 	.word	0x08027c30

0800dfa8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fb facd 	bl	8009554 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3708      	adds	r7, #8
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7ff ffea 	bl	800dfa8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d306      	bcc.n	800dfea <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 800dfdc:	4b09      	ldr	r3, [pc, #36]	; (800e004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 800dfde:	4a0a      	ldr	r2, [pc, #40]	; (800e008 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 800dfe0:	f44f 7183 	mov.w	r1, #262	; 0x106
 800dfe4:	4809      	ldr	r0, [pc, #36]	; (800e00c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 800dfe6:	f017 f949 	bl	802527c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f000 faaa 	bl	800e544 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 800dff0:	4603      	mov	r3, r0
 800dff2:	6839      	ldr	r1, [r7, #0]
 800dff4:	4618      	mov	r0, r3
 800dff6:	f000 fa91 	bl	800e51c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 800dffa:	4603      	mov	r3, r0
  }
 800dffc:	4618      	mov	r0, r3
 800dffe:	3708      	adds	r7, #8
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	08027b5c 	.word	0x08027b5c
 800e008:	08027f54 	.word	0x08027f54
 800e00c:	08027c30 	.word	0x08027c30

0800e010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4618      	mov	r0, r3
 800e01e:	f7fb fa99 	bl	8009554 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800e022:	4603      	mov	r3, r0
 800e024:	4618      	mov	r0, r3
 800e026:	3708      	adds	r7, #8
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f7ff ffea 	bl	800e010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800e03c:	4602      	mov	r2, r0
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	4293      	cmp	r3, r2
 800e042:	d306      	bcc.n	800e052 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 800e044:	4b09      	ldr	r3, [pc, #36]	; (800e06c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 800e046:	4a0a      	ldr	r2, [pc, #40]	; (800e070 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 800e048:	f44f 7183 	mov.w	r1, #262	; 0x106
 800e04c:	4809      	ldr	r0, [pc, #36]	; (800e074 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 800e04e:	f017 f915 	bl	802527c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 fa96 	bl	800e584 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 800e058:	4603      	mov	r3, r0
 800e05a:	6839      	ldr	r1, [r7, #0]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f000 fa7d 	bl	800e55c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 800e062:	4603      	mov	r3, r0
  }
 800e064:	4618      	mov	r0, r3
 800e066:	3708      	adds	r7, #8
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	08027b5c 	.word	0x08027b5c
 800e070:	08028050 	.word	0x08028050
 800e074:	08027c30 	.word	0x08027c30

0800e078 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4618      	mov	r0, r3
 800e086:	f7fb fa65 	bl	8009554 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800e08a:	4603      	mov	r3, r0
 800e08c:	4618      	mov	r0, r3
 800e08e:	3708      	adds	r7, #8
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f7ff ffea 	bl	800e078 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d306      	bcc.n	800e0ba <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 800e0ac:	4b09      	ldr	r3, [pc, #36]	; (800e0d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 800e0ae:	4a0a      	ldr	r2, [pc, #40]	; (800e0d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 800e0b0:	f44f 7183 	mov.w	r1, #262	; 0x106
 800e0b4:	4809      	ldr	r0, [pc, #36]	; (800e0dc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 800e0b6:	f017 f8e1 	bl	802527c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 fa82 	bl	800e5c4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	6839      	ldr	r1, [r7, #0]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f000 fa69 	bl	800e59c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 800e0ca:	4603      	mov	r3, r0
  }
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3708      	adds	r7, #8
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	08027b5c 	.word	0x08027b5c
 800e0d8:	0802814c 	.word	0x0802814c
 800e0dc:	08027c30 	.word	0x08027c30

0800e0e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7fb fa31 	bl	8009554 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f7ff ffea 	bl	800e0e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800e10c:	4602      	mov	r2, r0
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	4293      	cmp	r3, r2
 800e112:	d306      	bcc.n	800e122 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 800e114:	4b09      	ldr	r3, [pc, #36]	; (800e13c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 800e116:	4a0a      	ldr	r2, [pc, #40]	; (800e140 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 800e118:	f44f 7183 	mov.w	r1, #262	; 0x106
 800e11c:	4809      	ldr	r0, [pc, #36]	; (800e144 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 800e11e:	f017 f8ad 	bl	802527c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 fa6e 	bl	800e604 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 800e128:	4603      	mov	r3, r0
 800e12a:	6839      	ldr	r1, [r7, #0]
 800e12c:	4618      	mov	r0, r3
 800e12e:	f000 fa55 	bl	800e5dc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 800e132:	4603      	mov	r3, r0
  }
 800e134:	4618      	mov	r0, r3
 800e136:	3708      	adds	r7, #8
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	08027b5c 	.word	0x08027b5c
 800e140:	08028244 	.word	0x08028244
 800e144:	08027c30 	.word	0x08027c30

0800e148 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
 800e152:	6839      	ldr	r1, [r7, #0]
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f7ff ff69 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800e15a:	4603      	mov	r3, r0
 800e15c:	4618      	mov	r0, r3
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
 800e16e:	6839      	ldr	r1, [r7, #0]
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f7ff ff8f 	bl	800e094 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 800e176:	4603      	mov	r3, r0
 800e178:	4618      	mov	r0, r3
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 f957 	bl	800e43c <_ZNK11flatbuffers6VectorIhE4DataEv>
 800e18e:	4603      	mov	r3, r0
 800e190:	4618      	mov	r0, r3
 800e192:	3708      	adds	r7, #8
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	607a      	str	r2, [r7, #4]
 800e1a4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d101      	bne.n	800e1b0 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800e1ac:	f017 f85f 	bl	802526e <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d101      	bne.n	800e1ba <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800e1b6:	f017 f85a 	bl	802526e <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800e1c0:	2300      	movs	r3, #0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3710      	adds	r7, #16
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800e1ca:	b580      	push	{r7, lr}
 800e1cc:	b084      	sub	sp, #16
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	60f8      	str	r0, [r7, #12]
 800e1d2:	60b9      	str	r1, [r7, #8]
 800e1d4:	607a      	str	r2, [r7, #4]
 800e1d6:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d101      	bne.n	800e1e2 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800e1de:	f017 f846 	bl	802526e <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d101      	bne.n	800e1ec <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800e1e8:	f017 f841 	bl	802526e <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800e1f2:	2300      	movs	r3, #0
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3710      	adds	r7, #16
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b084      	sub	sp, #16
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	460b      	mov	r3, r1
 800e206:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e208:	887b      	ldrh	r3, [r7, #2]
 800e20a:	4619      	mov	r1, r3
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7fa fb90 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e212:	4603      	mov	r3, r0
 800e214:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e216:	687a      	ldr	r2, [r7, #4]
 800e218:	89fb      	ldrh	r3, [r7, #14]
 800e21a:	4413      	add	r3, r2
 800e21c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e21e:	89fb      	ldrh	r3, [r7, #14]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d006      	beq.n	800e232 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 800e224:	68b8      	ldr	r0, [r7, #8]
 800e226:	f7fb f9ae 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e22a:	4602      	mov	r2, r0
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	4413      	add	r3, r2
                        : nullptr;
 800e230:	e000      	b.n	800e234 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e232:	2300      	movs	r3, #0
  }
 800e234:	4618      	mov	r0, r3
 800e236:	3710      	adds	r7, #16
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	460b      	mov	r3, r1
 800e246:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e248:	887b      	ldrh	r3, [r7, #2]
 800e24a:	4619      	mov	r1, r3
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f7fa fb70 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e252:	4603      	mov	r3, r0
 800e254:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	89fb      	ldrh	r3, [r7, #14]
 800e25a:	4413      	add	r3, r2
 800e25c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e25e:	89fb      	ldrh	r3, [r7, #14]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d006      	beq.n	800e272 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 800e264:	68b8      	ldr	r0, [r7, #8]
 800e266:	f7fb f98e 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e26a:	4602      	mov	r2, r0
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	4413      	add	r3, r2
                        : nullptr;
 800e270:	e000      	b.n	800e274 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e272:	2300      	movs	r3, #0
  }
 800e274:	4618      	mov	r0, r3
 800e276:	3710      	adds	r7, #16
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	460b      	mov	r3, r1
 800e286:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e288:	887b      	ldrh	r3, [r7, #2]
 800e28a:	4619      	mov	r1, r3
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f7fa fb50 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e292:	4603      	mov	r3, r0
 800e294:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	89fb      	ldrh	r3, [r7, #14]
 800e29a:	4413      	add	r3, r2
 800e29c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e29e:	89fb      	ldrh	r3, [r7, #14]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d006      	beq.n	800e2b2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 800e2a4:	68b8      	ldr	r0, [r7, #8]
 800e2a6:	f7fb f96e 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	4413      	add	r3, r2
                        : nullptr;
 800e2b0:	e000      	b.n	800e2b4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e2b2:	2300      	movs	r3, #0
  }
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3710      	adds	r7, #16
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e2c8:	887b      	ldrh	r3, [r7, #2]
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7fa fb30 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	89fb      	ldrh	r3, [r7, #14]
 800e2da:	4413      	add	r3, r2
 800e2dc:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e2de:	89fb      	ldrh	r3, [r7, #14]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d006      	beq.n	800e2f2 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 800e2e4:	68b8      	ldr	r0, [r7, #8]
 800e2e6:	f7fb f94e 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	4413      	add	r3, r2
                        : nullptr;
 800e2f0:	e000      	b.n	800e2f4 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e2f2:	2300      	movs	r3, #0
  }
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	460b      	mov	r3, r1
 800e306:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e308:	887b      	ldrh	r3, [r7, #2]
 800e30a:	4619      	mov	r1, r3
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f7fa fb10 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e312:	4603      	mov	r3, r0
 800e314:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e316:	687a      	ldr	r2, [r7, #4]
 800e318:	89fb      	ldrh	r3, [r7, #14]
 800e31a:	4413      	add	r3, r2
 800e31c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e31e:	89fb      	ldrh	r3, [r7, #14]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d006      	beq.n	800e332 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 800e324:	68b8      	ldr	r0, [r7, #8]
 800e326:	f7fb f92e 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e32a:	4602      	mov	r2, r0
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	4413      	add	r3, r2
                        : nullptr;
 800e330:	e000      	b.n	800e334 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e332:	2300      	movs	r3, #0
  }
 800e334:	4618      	mov	r0, r3
 800e336:	3710      	adds	r7, #16
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	460b      	mov	r3, r1
 800e346:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e348:	887b      	ldrh	r3, [r7, #2]
 800e34a:	4619      	mov	r1, r3
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f7fa faf0 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e352:	4603      	mov	r3, r0
 800e354:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	89fb      	ldrh	r3, [r7, #14]
 800e35a:	4413      	add	r3, r2
 800e35c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e35e:	89fb      	ldrh	r3, [r7, #14]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d006      	beq.n	800e372 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 800e364:	68b8      	ldr	r0, [r7, #8]
 800e366:	f7fb f90e 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e36a:	4602      	mov	r2, r0
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	4413      	add	r3, r2
                        : nullptr;
 800e370:	e000      	b.n	800e374 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e372:	2300      	movs	r3, #0
  }
 800e374:	4618      	mov	r0, r3
 800e376:	3710      	adds	r7, #16
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	460b      	mov	r3, r1
 800e386:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e388:	887b      	ldrh	r3, [r7, #2]
 800e38a:	4619      	mov	r1, r3
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f7fa fad0 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e392:	4603      	mov	r3, r0
 800e394:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	89fb      	ldrh	r3, [r7, #14]
 800e39a:	4413      	add	r3, r2
 800e39c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e39e:	89fb      	ldrh	r3, [r7, #14]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d006      	beq.n	800e3b2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 800e3a4:	68b8      	ldr	r0, [r7, #8]
 800e3a6:	f7fb f8ee 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	4413      	add	r3, r2
                        : nullptr;
 800e3b0:	e000      	b.n	800e3b4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e3b2:	2300      	movs	r3, #0
  }
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3710      	adds	r7, #16
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b084      	sub	sp, #16
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e3c8:	887b      	ldrh	r3, [r7, #2]
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f7fa fab0 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	89fb      	ldrh	r3, [r7, #14]
 800e3da:	4413      	add	r3, r2
 800e3dc:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e3de:	89fb      	ldrh	r3, [r7, #14]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d006      	beq.n	800e3f2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 800e3e4:	68b8      	ldr	r0, [r7, #8]
 800e3e6:	f7fb f8ce 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	4413      	add	r3, r2
                        : nullptr;
 800e3f0:	e000      	b.n	800e3f4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e3f2:	2300      	movs	r3, #0
  }
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3710      	adds	r7, #16
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	460b      	mov	r3, r1
 800e406:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e408:	887b      	ldrh	r3, [r7, #2]
 800e40a:	4619      	mov	r1, r3
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f7fa fa90 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e412:	4603      	mov	r3, r0
 800e414:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	89fb      	ldrh	r3, [r7, #14]
 800e41a:	4413      	add	r3, r2
 800e41c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e41e:	89fb      	ldrh	r3, [r7, #14]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d006      	beq.n	800e432 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 800e424:	68b8      	ldr	r0, [r7, #8]
 800e426:	f7fb f8ae 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e42a:	4602      	mov	r2, r0
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	4413      	add	r3, r2
                        : nullptr;
 800e430:	e000      	b.n	800e434 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e432:	2300      	movs	r3, #0
  }
 800e434:	4618      	mov	r0, r3
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 800e43c:	b480      	push	{r7}
 800e43e:	b083      	sub	sp, #12
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	3304      	adds	r3, #4
  }
 800e448:	4618      	mov	r0, r3
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	4413      	add	r3, r2
 800e466:	edd3 7a00 	vldr	s15, [r3]
 800e46a:	eeb0 0a67 	vmov.f32	s0, s15
 800e46e:	f7fb ff1a 	bl	800a2a6 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800e472:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e476:	eeb0 0a67 	vmov.f32	s0, s15
 800e47a:	3708      	adds	r7, #8
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 800e480:	b480      	push	{r7}
 800e482:	b083      	sub	sp, #12
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	3304      	adds	r3, #4
  }
 800e48c:	4618      	mov	r0, r3
 800e48e:	370c      	adds	r7, #12
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr

0800e498 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	00db      	lsls	r3, r3, #3
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ae:	4610      	mov	r0, r2
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	f000 f8b3 	bl	800e61c <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	460b      	mov	r3, r1
  }
 800e4ba:	4610      	mov	r0, r2
 800e4bc:	4619      	mov	r1, r3
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 800e4c4:	b480      	push	{r7}
 800e4c6:	b083      	sub	sp, #12
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	3304      	adds	r3, #4
  }
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	370c      	adds	r7, #12
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr

0800e4dc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	009b      	lsls	r3, r3, #2
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	4413      	add	r3, r2
 800e4ee:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f7fb f848 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	4413      	add	r3, r2
  }
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	3304      	adds	r3, #4
  }
 800e510:	4618      	mov	r0, r3
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	4413      	add	r3, r2
 800e52e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f7fb f828 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e536:	4602      	mov	r2, r0
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	4413      	add	r3, r2
  }
 800e53c:	4618      	mov	r0, r3
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 800e544:	b480      	push	{r7}
 800e546:	b083      	sub	sp, #12
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	3304      	adds	r3, #4
  }
 800e550:	4618      	mov	r0, r3
 800e552:	370c      	adds	r7, #12
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr

0800e55c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b082      	sub	sp, #8
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	009b      	lsls	r3, r3, #2
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	4413      	add	r3, r2
 800e56e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f7fb f808 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e576:	4602      	mov	r2, r0
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	4413      	add	r3, r2
  }
 800e57c:	4618      	mov	r0, r3
 800e57e:	3708      	adds	r7, #8
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 800e584:	b480      	push	{r7}
 800e586:	b083      	sub	sp, #12
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	3304      	adds	r3, #4
  }
 800e590:	4618      	mov	r0, r3
 800e592:	370c      	adds	r7, #12
 800e594:	46bd      	mov	sp, r7
 800e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59a:	4770      	bx	lr

0800e59c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f7fa ffe8 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	4413      	add	r3, r2
  }
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3708      	adds	r7, #8
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	3304      	adds	r3, #4
  }
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	370c      	adds	r7, #12
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr

0800e5dc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f7fa ffc8 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e5f6:	4602      	mov	r2, r0
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	4413      	add	r3, r2
  }
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3708      	adds	r7, #8
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 800e604:	b480      	push	{r7}
 800e606:	b083      	sub	sp, #12
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	3304      	adds	r3, #4
  }
 800e610:	4618      	mov	r0, r3
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 800e626:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800e62a:	4610      	mov	r0, r2
 800e62c:	4619      	mov	r1, r3
 800e62e:	370c      	adds	r7, #12
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr

0800e638 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	4a05      	ldr	r2, [pc, #20]	; (800e658 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	601a      	str	r2, [r3, #0]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fd ffb3 	bl	800c5b4 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4618      	mov	r0, r3
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	0802c49c 	.word	0x0802c49c

0800e65c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f7ff ffe7 	bl	800e638 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 800e66a:	2108      	movs	r1, #8
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f016 fb78 	bl	8024d62 <_ZdlPvj>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	4618      	mov	r0, r3
 800e676:	3708      	adds	r7, #8
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	4a04      	ldr	r2, [pc, #16]	; (800e698 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	601a      	str	r2, [r3, #0]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	4618      	mov	r0, r3
 800e68e:	370c      	adds	r7, #12
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr
 800e698:	0802c51c 	.word	0x0802c51c

0800e69c <_ZN6tflite13ErrorReporterD0Ev>:
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7ff ffe9 	bl	800e67c <_ZN6tflite13ErrorReporterD1Ev>
 800e6aa:	2104      	movs	r1, #4
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f016 fb58 	bl	8024d62 <_ZdlPvj>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3708      	adds	r7, #8
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	4a05      	ldr	r2, [pc, #20]	; (800e6dc <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	601a      	str	r2, [r3, #0]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7ff ffd5 	bl	800e67c <_ZN6tflite13ErrorReporterD1Ev>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3708      	adds	r7, #8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	0802c508 	.word	0x0802c508

0800e6e0 <_ZN6tflite18MicroErrorReporterD0Ev>:
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f7ff ffe7 	bl	800e6bc <_ZN6tflite18MicroErrorReporterD1Ev>
 800e6ee:	2104      	movs	r1, #4
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f016 fb36 	bl	8024d62 <_ZdlPvj>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
 800e700:	b580      	push	{r7, lr}
 800e702:	b0c2      	sub	sp, #264	; 0x108
 800e704:	af00      	add	r7, sp, #0
 800e706:	1d3b      	adds	r3, r7, #4
 800e708:	6018      	str	r0, [r3, #0]
 800e70a:	463b      	mov	r3, r7
 800e70c:	6019      	str	r1, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 800e70e:	463b      	mov	r3, r7
 800e710:	1d3a      	adds	r2, r7, #4
 800e712:	f107 0008 	add.w	r0, r7, #8
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	6812      	ldr	r2, [r2, #0]
 800e71a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e71e:	f001 fc35 	bl	800ff8c <MicroVsnprintf>
  DebugLog(log_buffer);
 800e722:	f107 0308 	add.w	r3, r7, #8
 800e726:	4618      	mov	r0, r3
 800e728:	f7fd fbfd 	bl	800bf26 <DebugLog>
  DebugLog("\r\n");
 800e72c:	4803      	ldr	r0, [pc, #12]	; (800e73c <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x3c>)
 800e72e:	f7fd fbfa 	bl	800bf26 <DebugLog>
#endif
}
 800e732:	bf00      	nop
 800e734:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	08028340 	.word	0x08028340

0800e740 <_Z11MicroPrintfPKcz>:

}  // namespace

#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
void MicroPrintf(const char* format, ...) {
 800e740:	b40f      	push	{r0, r1, r2, r3}
 800e742:	b580      	push	{r7, lr}
 800e744:	b082      	sub	sp, #8
 800e746:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 800e748:	f107 0314 	add.w	r3, r7, #20
 800e74c:	607b      	str	r3, [r7, #4]
  Log(format, args);
 800e74e:	6879      	ldr	r1, [r7, #4]
 800e750:	6938      	ldr	r0, [r7, #16]
 800e752:	f7ff ffd5 	bl	800e700 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  va_end(args);
}
 800e756:	bf00      	nop
 800e758:	3708      	adds	r7, #8
 800e75a:	46bd      	mov	sp, r7
 800e75c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e760:	b004      	add	sp, #16
 800e762:	4770      	bx	lr

0800e764 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	60b9      	str	r1, [r7, #8]
 800e76e:	607a      	str	r2, [r7, #4]
  Log(format, args);
 800e770:	6879      	ldr	r1, [r7, #4]
 800e772:	68b8      	ldr	r0, [r7, #8]
 800e774:	f7ff ffc4 	bl	800e700 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
 800e778:	2300      	movs	r3, #0
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}

0800e782 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>:
//   ScopedMicroProfiler scoped_profiler("custom_tag", profiler);
//   work_to_profile();
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag, MicroProfiler* profiler)
 800e782:	b580      	push	{r7, lr}
 800e784:	b084      	sub	sp, #16
 800e786:	af00      	add	r7, sp, #0
 800e788:	60f8      	str	r0, [r7, #12]
 800e78a:	60b9      	str	r1, [r7, #8]
 800e78c:	607a      	str	r2, [r7, #4]
      : profiler_(profiler) {
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2200      	movs	r2, #0
 800e792:	601a      	str	r2, [r3, #0]
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	605a      	str	r2, [r3, #4]
    if (profiler_ != nullptr) {
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d00c      	beq.n	800e7bc <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE+0x3a>
      event_handle_ = profiler_->BeginEvent(tag);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	685a      	ldr	r2, [r3, #4]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	3308      	adds	r3, #8
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	68b9      	ldr	r1, [r7, #8]
 800e7b2:	4610      	mov	r0, r2
 800e7b4:	4798      	blx	r3
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	601a      	str	r2, [r3, #0]
    }
  }
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3710      	adds	r7, #16
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <_ZN6tflite19ScopedMicroProfilerD1Ev>:

  ~ScopedMicroProfiler() {
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b082      	sub	sp, #8
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
    if (profiler_ != nullptr) {
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d00a      	beq.n	800e7ec <_ZN6tflite19ScopedMicroProfilerD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6858      	ldr	r0, [r3, #4]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	330c      	adds	r3, #12
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	6812      	ldr	r2, [r2, #0]
 800e7e8:	4611      	mov	r1, r2
 800e7ea:	4798      	blx	r3
    }
  }
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3708      	adds	r7, #8
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}

0800e7f6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 800e7f6:	b580      	push	{r7, lr}
 800e7f8:	b082      	sub	sp, #8
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	695b      	ldr	r3, [r3, #20]
 800e802:	2b20      	cmp	r3, #32
 800e804:	d102      	bne.n	800e80c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	699b      	ldr	r3, [r3, #24]
 800e80a:	e007      	b.n	800e81c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	695b      	ldr	r3, [r3, #20]
 800e810:	b2db      	uxtb	r3, r3
 800e812:	4618      	mov	r0, r3
 800e814:	f7fc fa1c 	bl	800ac50 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800e818:	4603      	mov	r3, r0
 800e81a:	bf00      	nop
  }
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	3708      	adds	r7, #8
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
#endif  // !defined(TF_LITE_STRIP_ERROR_STRINGS)

}  // namespace

MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	607a      	str	r2, [r7, #4]
 800e830:	603b      	str	r3, [r7, #0]
                       MicroAllocator* allocator)
    : context_(context),
      model_(model),
      allocator_(allocator),
      current_subgraph_index_(0) {
 800e832:	4a10      	ldr	r2, [pc, #64]	; (800e874 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x50>)
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	601a      	str	r2, [r3, #0]
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	68ba      	ldr	r2, [r7, #8]
 800e83c:	605a      	str	r2, [r3, #4]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	609a      	str	r2, [r3, #8]
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	683a      	ldr	r2, [r7, #0]
 800e848:	60da      	str	r2, [r3, #12]
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2200      	movs	r2, #0
 800e84e:	611a      	str	r2, [r3, #16]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2200      	movs	r2, #0
 800e854:	615a      	str	r2, [r3, #20]
  if (model != nullptr) {
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d005      	beq.n	800e868 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    subgraphs_ = model->subgraphs();
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f7fd fe7f 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800e862:	4602      	mov	r2, r0
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	619a      	str	r2, [r3, #24]
  }
}
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	4618      	mov	r0, r3
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	0802c530 	.word	0x0802c530

0800e878 <_ZN6tflite10MicroGraphD1Ev>:

MicroGraph::~MicroGraph() {}
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	4a04      	ldr	r2, [pc, #16]	; (800e894 <_ZN6tflite10MicroGraphD1Ev+0x1c>)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	601a      	str	r2, [r3, #0]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	4618      	mov	r0, r3
 800e88a:	370c      	adds	r7, #12
 800e88c:	46bd      	mov	sp, r7
 800e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e892:	4770      	bx	lr
 800e894:	0802c530 	.word	0x0802c530

0800e898 <_ZN6tflite10MicroGraphD0Ev>:
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f7ff ffe9 	bl	800e878 <_ZN6tflite10MicroGraphD1Ev>
 800e8a6:	211c      	movs	r1, #28
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f016 fa5a 	bl	8024d62 <_ZdlPvj>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:

TfLiteStatus MicroGraph::InitSubgraphs() {
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b08a      	sub	sp, #40	; 0x28
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	695b      	ldr	r3, [r3, #20]
 800e8c4:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	699b      	ldr	r3, [r3, #24]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7ff fb9e 	bl	800e010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	bf34      	ite	cc
 800e8dc:	2301      	movcc	r3, #1
 800e8de:	2300      	movcs	r3, #0
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d05a      	beq.n	800e99c <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xe4>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800e8e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	615a      	str	r2, [r3, #20]

    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	699b      	ldr	r3, [r3, #24]
 800e8f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7ff fc28 	bl	800e148 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800e8f8:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	623b      	str	r3, [r7, #32]
 800e8fe:	6938      	ldr	r0, [r7, #16]
 800e900:	f7fd fdf5 	bl	800c4ee <_ZNK6tflite8SubGraph9operatorsEv>
 800e904:	4603      	mov	r3, r0
 800e906:	4618      	mov	r0, r3
 800e908:	f7ff fb4e 	bl	800dfa8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800e90c:	4602      	mov	r2, r0
 800e90e:	6a3b      	ldr	r3, [r7, #32]
 800e910:	4293      	cmp	r3, r2
 800e912:	bf34      	ite	cc
 800e914:	2301      	movcc	r3, #1
 800e916:	2300      	movcs	r3, #0
 800e918:	b2db      	uxtb	r3, r3
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d03a      	beq.n	800e994 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xdc>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	691a      	ldr	r2, [r3, #16]
 800e922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e924:	00db      	lsls	r3, r3, #3
 800e926:	4413      	add	r3, r2
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	6a3b      	ldr	r3, [r7, #32]
 800e92c:	212c      	movs	r1, #44	; 0x2c
 800e92e:	fb01 f303 	mul.w	r3, r1, r3
 800e932:	4413      	add	r3, r2
      TfLiteNode* node =
 800e934:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	691a      	ldr	r2, [r3, #16]
 800e93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93c:	00db      	lsls	r3, r3, #3
 800e93e:	4413      	add	r3, r2
              .node_and_registrations[i]
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	6a3b      	ldr	r3, [r7, #32]
 800e944:	212c      	movs	r1, #44	; 0x2c
 800e946:	fb01 f303 	mul.w	r3, r1, r3
 800e94a:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 800e94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e94e:	60bb      	str	r3, [r7, #8]
              .registration;
      size_t init_data_size;
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	695b      	ldr	r3, [r3, #20]
 800e954:	2b20      	cmp	r3, #32
 800e956:	d106      	bne.n	800e966 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xae>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	699b      	ldr	r3, [r3, #24]
 800e95c:	61bb      	str	r3, [r7, #24]
        init_data_size = node->custom_initial_data_size;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	69db      	ldr	r3, [r3, #28]
 800e962:	61fb      	str	r3, [r7, #28]
 800e964:	e004      	b.n	800e970 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xb8>
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	695b      	ldr	r3, [r3, #20]
 800e96a:	61bb      	str	r3, [r7, #24]
        init_data_size = 0;
 800e96c:	2300      	movs	r3, #0
 800e96e:	61fb      	str	r3, [r7, #28]
      }
      if (registration->init) {
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d009      	beq.n	800e98c <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xd4>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	687a      	ldr	r2, [r7, #4]
 800e97e:	6850      	ldr	r0, [r2, #4]
 800e980:	69fa      	ldr	r2, [r7, #28]
 800e982:	69b9      	ldr	r1, [r7, #24]
 800e984:	4798      	blx	r3
 800e986:	4602      	mov	r2, r0
        node->user_data =
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e98c:	6a3b      	ldr	r3, [r7, #32]
 800e98e:	3301      	adds	r3, #1
 800e990:	623b      	str	r3, [r7, #32]
 800e992:	e7b4      	b.n	800e8fe <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x46>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e996:	3301      	adds	r3, #1
 800e998:	627b      	str	r3, [r7, #36]	; 0x24
 800e99a:	e796      	b.n	800e8ca <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	697a      	ldr	r2, [r7, #20]
 800e9a0:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800e9a2:	2300      	movs	r3, #0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3728      	adds	r7, #40	; 0x28
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:

TfLiteStatus MicroGraph::PrepareSubgraphs() {
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b08a      	sub	sp, #40	; 0x28
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	695b      	ldr	r3, [r3, #20]
 800e9b8:	61fb      	str	r3, [r7, #28]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	627b      	str	r3, [r7, #36]	; 0x24
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	699b      	ldr	r3, [r3, #24]
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7ff fb24 	bl	800e010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	bf34      	ite	cc
 800e9d0:	2301      	movcc	r3, #1
 800e9d2:	2300      	movcs	r3, #0
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d05e      	beq.n	800ea98 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xec>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800e9da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	615a      	str	r2, [r3, #20]

    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	699b      	ldr	r3, [r3, #24]
 800e9e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7ff fbae 	bl	800e148 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800e9ec:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	623b      	str	r3, [r7, #32]
 800e9f2:	69b8      	ldr	r0, [r7, #24]
 800e9f4:	f7fd fd7b 	bl	800c4ee <_ZNK6tflite8SubGraph9operatorsEv>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7ff fad4 	bl	800dfa8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800ea00:	4602      	mov	r2, r0
 800ea02:	6a3b      	ldr	r3, [r7, #32]
 800ea04:	4293      	cmp	r3, r2
 800ea06:	bf34      	ite	cc
 800ea08:	2301      	movcc	r3, #1
 800ea0a:	2300      	movcs	r3, #0
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d03e      	beq.n	800ea90 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe4>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	691a      	ldr	r2, [r3, #16]
 800ea16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea18:	00db      	lsls	r3, r3, #3
 800ea1a:	4413      	add	r3, r2
 800ea1c:	681a      	ldr	r2, [r3, #0]
 800ea1e:	6a3b      	ldr	r3, [r7, #32]
 800ea20:	212c      	movs	r1, #44	; 0x2c
 800ea22:	fb01 f303 	mul.w	r3, r1, r3
 800ea26:	4413      	add	r3, r2
      TfLiteNode* node =
 800ea28:	617b      	str	r3, [r7, #20]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	691a      	ldr	r2, [r3, #16]
 800ea2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea30:	00db      	lsls	r3, r3, #3
 800ea32:	4413      	add	r3, r2
              .node_and_registrations[i]
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	6a3b      	ldr	r3, [r7, #32]
 800ea38:	212c      	movs	r1, #44	; 0x2c
 800ea3a:	fb01 f303 	mul.w	r3, r1, r3
 800ea3e:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 800ea40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea42:	613b      	str	r3, [r7, #16]
              .registration;
      if (registration->prepare != nullptr) {
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	689b      	ldr	r3, [r3, #8]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d016      	beq.n	800ea7a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xce>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	689b      	ldr	r3, [r3, #8]
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	6852      	ldr	r2, [r2, #4]
 800ea54:	6979      	ldr	r1, [r7, #20]
 800ea56:	4610      	mov	r0, r2
 800ea58:	4798      	blx	r3
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	73fb      	strb	r3, [r7, #15]
        if (prepare_status != kTfLiteOk) {
 800ea5e:	7bfb      	ldrb	r3, [r7, #15]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d00a      	beq.n	800ea7a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xce>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
 800ea64:	6938      	ldr	r0, [r7, #16]
 800ea66:	f7ff fec6 	bl	800e7f6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800ea6a:	4601      	mov	r1, r0
 800ea6c:	7bfb      	ldrb	r3, [r7, #15]
 800ea6e:	6a3a      	ldr	r2, [r7, #32]
 800ea70:	480d      	ldr	r0, [pc, #52]	; (800eaa8 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xfc>)
 800ea72:	f7ff fe65 	bl	800e740 <_Z11MicroPrintfPKcz>
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
 800ea76:	2301      	movs	r3, #1
 800ea78:	e012      	b.n	800eaa0 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xf4>
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	68db      	ldr	r3, [r3, #12]
 800ea7e:	6a3a      	ldr	r2, [r7, #32]
 800ea80:	4611      	mov	r1, r2
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7fe fca8 	bl	800d3d8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800ea88:	6a3b      	ldr	r3, [r7, #32]
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	623b      	str	r3, [r7, #32]
 800ea8e:	e7b0      	b.n	800e9f2 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x46>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800ea90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea92:	3301      	adds	r3, #1
 800ea94:	627b      	str	r3, [r7, #36]	; 0x24
 800ea96:	e792      	b.n	800e9be <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x12>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	69fa      	ldr	r2, [r7, #28]
 800ea9c:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800ea9e:	2300      	movs	r3, #0
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3728      	adds	r7, #40	; 0x28
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	080289f0 	.word	0x080289f0

0800eaac <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:

TfLiteStatus MicroGraph::FreeSubgraphs() {
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b088      	sub	sp, #32
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	695b      	ldr	r3, [r3, #20]
 800eab8:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800eaba:	2300      	movs	r3, #0
 800eabc:	61fb      	str	r3, [r7, #28]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	699b      	ldr	r3, [r3, #24]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7ff faa4 	bl	800e010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800eac8:	4602      	mov	r2, r0
 800eaca:	69fb      	ldr	r3, [r7, #28]
 800eacc:	4293      	cmp	r3, r2
 800eace:	bf34      	ite	cc
 800ead0:	2301      	movcc	r3, #1
 800ead2:	2300      	movcs	r3, #0
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d04b      	beq.n	800eb72 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xc6>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800eada:	69fa      	ldr	r2, [r7, #28]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	615a      	str	r2, [r3, #20]
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	699b      	ldr	r3, [r3, #24]
 800eae4:	69f9      	ldr	r1, [r7, #28]
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7ff fb2e 	bl	800e148 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800eaec:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800eaee:	2300      	movs	r3, #0
 800eaf0:	61bb      	str	r3, [r7, #24]
 800eaf2:	6938      	ldr	r0, [r7, #16]
 800eaf4:	f7fd fcfb 	bl	800c4ee <_ZNK6tflite8SubGraph9operatorsEv>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7ff fa54 	bl	800dfa8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800eb00:	4602      	mov	r2, r0
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	4293      	cmp	r3, r2
 800eb06:	bf34      	ite	cc
 800eb08:	2301      	movcc	r3, #1
 800eb0a:	2300      	movcs	r3, #0
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d02b      	beq.n	800eb6a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xbe>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	691a      	ldr	r2, [r3, #16]
 800eb16:	69fb      	ldr	r3, [r7, #28]
 800eb18:	00db      	lsls	r3, r3, #3
 800eb1a:	4413      	add	r3, r2
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	69bb      	ldr	r3, [r7, #24]
 800eb20:	212c      	movs	r1, #44	; 0x2c
 800eb22:	fb01 f303 	mul.w	r3, r1, r3
 800eb26:	4413      	add	r3, r2
      TfLiteNode* node =
 800eb28:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	691a      	ldr	r2, [r3, #16]
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	00db      	lsls	r3, r3, #3
 800eb32:	4413      	add	r3, r2
              .node_and_registrations[i]
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	69bb      	ldr	r3, [r7, #24]
 800eb38:	212c      	movs	r1, #44	; 0x2c
 800eb3a:	fb01 f303 	mul.w	r3, r1, r3
 800eb3e:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 800eb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb42:	60bb      	str	r3, [r7, #8]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d00b      	beq.n	800eb62 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xb6>
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d007      	beq.n	800eb62 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xb6>
        registration->free(context_, node->user_data);
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	6850      	ldr	r0, [r2, #4]
 800eb5a:	68fa      	ldr	r2, [r7, #12]
 800eb5c:	6912      	ldr	r2, [r2, #16]
 800eb5e:	4611      	mov	r1, r2
 800eb60:	4798      	blx	r3
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800eb62:	69bb      	ldr	r3, [r7, #24]
 800eb64:	3301      	adds	r3, #1
 800eb66:	61bb      	str	r3, [r7, #24]
 800eb68:	e7c3      	b.n	800eaf2 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x46>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	61fb      	str	r3, [r7, #28]
 800eb70:	e7a5      	b.n	800eabe <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	697a      	ldr	r2, [r7, #20]
 800eb76:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800eb78:	2300      	movs	r3, #0
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3720      	adds	r7, #32
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
	...

0800eb84 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 800eb84:	b5b0      	push	{r4, r5, r7, lr}
 800eb86:	b08a      	sub	sp, #40	; 0x28
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
 800eb8e:	2400      	movs	r4, #0
  int previous_subgraph_idx = current_subgraph_index_;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	695b      	ldr	r3, [r3, #20]
 800eb94:	623b      	str	r3, [r7, #32]
  current_subgraph_index_ = subgraph_idx;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	683a      	ldr	r2, [r7, #0]
 800eb9a:	615a      	str	r2, [r3, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	699b      	ldr	r3, [r3, #24]
 800eba0:	4618      	mov	r0, r3
 800eba2:	f7ff fa35 	bl	800e010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800eba6:	4602      	mov	r2, r0
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	bf94      	ite	ls
 800ebae:	2301      	movls	r3, #1
 800ebb0:	2300      	movhi	r3, #0
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d00c      	beq.n	800ebd2 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x4e>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	699b      	ldr	r3, [r3, #24]
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7ff fa27 	bl	800e010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	6839      	ldr	r1, [r7, #0]
 800ebc8:	4842      	ldr	r0, [pc, #264]	; (800ecd4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x150>)
 800ebca:	f7ff fdb9 	bl	800e740 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800ebce:	2401      	movs	r4, #1
 800ebd0:	e07b      	b.n	800ecca <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x146>
  }
  const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	699b      	ldr	r3, [r3, #24]
 800ebd6:	683a      	ldr	r2, [r7, #0]
 800ebd8:	4611      	mov	r1, r2
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7ff fab4 	bl	800e148 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800ebe0:	61f8      	str	r0, [r7, #28]

  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	627b      	str	r3, [r7, #36]	; 0x24
 800ebe6:	69f8      	ldr	r0, [r7, #28]
 800ebe8:	f7fd fc81 	bl	800c4ee <_ZNK6tflite8SubGraph9operatorsEv>
 800ebec:	4603      	mov	r3, r0
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7ff f9da 	bl	800dfa8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800ebf4:	4602      	mov	r2, r0
 800ebf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	bf34      	ite	cc
 800ebfc:	2301      	movcc	r3, #1
 800ebfe:	2300      	movcs	r3, #0
 800ec00:	b2db      	uxtb	r3, r3
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d05d      	beq.n	800ecc2 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x13e>
    TfLiteNode* node =
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	691a      	ldr	r2, [r3, #16]
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	00db      	lsls	r3, r3, #3
 800ec0e:	4413      	add	r3, r2
 800ec10:	681a      	ldr	r2, [r3, #0]
 800ec12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec14:	212c      	movs	r1, #44	; 0x2c
 800ec16:	fb01 f303 	mul.w	r3, r1, r3
 800ec1a:	4413      	add	r3, r2
    TfLiteNode* node =
 800ec1c:	61bb      	str	r3, [r7, #24]
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	691a      	ldr	r2, [r3, #16]
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	00db      	lsls	r3, r3, #3
 800ec26:	4413      	add	r3, r2
                                                 .node_and_registrations[i]
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2c:	212c      	movs	r1, #44	; 0x2c
 800ec2e:	fb01 f303 	mul.w	r3, r1, r3
 800ec32:	4413      	add	r3, r2
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 800ec34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec36:	617b      	str	r3, [r7, #20]
// -DTF_LITE_STRIP_ERROR_STRINGS) because the function OpNameFromRegistration is
// only defined for builds with the error strings.
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
    ScopedMicroProfiler scoped_profiler(
        OpNameFromRegistration(registration),
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 800ec38:	6978      	ldr	r0, [r7, #20]
 800ec3a:	f7ff fddc 	bl	800e7f6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800ec3e:	4601      	mov	r1, r0
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec46:	f107 0308 	add.w	r3, r7, #8
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7ff fd99 	bl	800e782 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>
#endif

    TFLITE_DCHECK(registration->invoke);
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	68db      	ldr	r3, [r3, #12]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d101      	bne.n	800ec5c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd8>
 800ec58:	f016 fb09 	bl	802526e <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	6852      	ldr	r2, [r2, #4]
 800ec64:	69b9      	ldr	r1, [r7, #24]
 800ec66:	4610      	mov	r0, r2
 800ec68:	4798      	blx	r3
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	74fb      	strb	r3, [r7, #19]

    // All TfLiteTensor structs used in the kernel are allocated from temp
    // memory in the allocator. This creates a chain of allocations in the
    // temp section. The call below resets the chain of allocations to
    // prepare for the next call.
    allocator_->ResetTempAllocations();
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	68da      	ldr	r2, [r3, #12]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	68db      	ldr	r3, [r3, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	3308      	adds	r3, #8
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	4610      	mov	r0, r2
 800ec7e:	4798      	blx	r3

    if (invoke_status == kTfLiteError) {
 800ec80:	7cfb      	ldrb	r3, [r7, #19]
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d10b      	bne.n	800ec9e <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x11a>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 800ec86:	6978      	ldr	r0, [r7, #20]
 800ec88:	f7ff fdb5 	bl	800e7f6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800ec8c:	4601      	mov	r1, r0
 800ec8e:	7cfb      	ldrb	r3, [r7, #19]
 800ec90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec92:	4811      	ldr	r0, [pc, #68]	; (800ecd8 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x154>)
 800ec94:	f7ff fd54 	bl	800e740 <_Z11MicroPrintfPKcz>
                  OpNameFromRegistration(registration), i, invoke_status);
      return kTfLiteError;
 800ec98:	2401      	movs	r4, #1
 800ec9a:	2500      	movs	r5, #0
 800ec9c:	e006      	b.n	800ecac <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x128>
    } else if (invoke_status != kTfLiteOk) {
 800ec9e:	7cfb      	ldrb	r3, [r7, #19]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d002      	beq.n	800ecaa <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x126>
      return invoke_status;
 800eca4:	7cfc      	ldrb	r4, [r7, #19]
 800eca6:	2500      	movs	r5, #0
 800eca8:	e000      	b.n	800ecac <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x128>
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 800ecaa:	2501      	movs	r5, #1
 800ecac:	f107 0308 	add.w	r3, r7, #8
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7ff fd88 	bl	800e7c6 <_ZN6tflite19ScopedMicroProfilerD1Ev>
 800ecb6:	2d01      	cmp	r5, #1
 800ecb8:	d107      	bne.n	800ecca <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x146>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800ecba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	627b      	str	r3, [r7, #36]	; 0x24
 800ecc0:	e791      	b.n	800ebe6 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x62>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6a3a      	ldr	r2, [r7, #32]
 800ecc6:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 800ecc8:	2400      	movs	r4, #0
 800ecca:	4623      	mov	r3, r4
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3728      	adds	r7, #40	; 0x28
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bdb0      	pop	{r4, r5, r7, pc}
 800ecd4:	08028a28 	.word	0x08028a28
 800ecd8:	08028a5c 	.word	0x08028a5c

0800ecdc <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:

TfLiteStatus MicroGraph::ResetVariableTensors() {
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b08a      	sub	sp, #40	; 0x28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800ece4:	2300      	movs	r3, #0
 800ece6:	627b      	str	r3, [r7, #36]	; 0x24
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	699b      	ldr	r3, [r3, #24]
 800ecec:	4618      	mov	r0, r3
 800ecee:	f7ff f98f 	bl	800e010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	bf34      	ite	cc
 800ecfa:	2301      	movcc	r3, #1
 800ecfc:	2300      	movcs	r3, #0
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d077      	beq.n	800edf4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x118>
       subgraph_idx++) {
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	699b      	ldr	r3, [r3, #24]
 800ed08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7ff fa1c 	bl	800e148 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800ed10:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800ed12:	2300      	movs	r3, #0
 800ed14:	623b      	str	r3, [r7, #32]
 800ed16:	69b8      	ldr	r0, [r7, #24]
 800ed18:	f7fd fbbf 	bl	800c49a <_ZNK6tflite8SubGraph7tensorsEv>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7ff f90e 	bl	800df40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800ed24:	4602      	mov	r2, r0
 800ed26:	6a3b      	ldr	r3, [r7, #32]
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	bf34      	ite	cc
 800ed2c:	2301      	movcc	r3, #1
 800ed2e:	2300      	movcs	r3, #0
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d05a      	beq.n	800edec <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x110>
      auto* tensor = subgraph->tensors()->Get(i);
 800ed36:	69b8      	ldr	r0, [r7, #24]
 800ed38:	f7fd fbaf 	bl	800c49a <_ZNK6tflite8SubGraph7tensorsEv>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	6a39      	ldr	r1, [r7, #32]
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7ff f90b 	bl	800df5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800ed46:	6178      	str	r0, [r7, #20]
      if (tensor->is_variable()) {
 800ed48:	6978      	ldr	r0, [r7, #20]
 800ed4a:	f7fd fb76 	bl	800c43a <_ZNK6tflite6Tensor11is_variableEv>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d047      	beq.n	800ede4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x108>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	691a      	ldr	r2, [r3, #16]
 800ed58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5a:	00db      	lsls	r3, r3, #3
 800ed5c:	4413      	add	r3, r2
 800ed5e:	6859      	ldr	r1, [r3, #4]
 800ed60:	6a3a      	ldr	r2, [r7, #32]
 800ed62:	4613      	mov	r3, r2
 800ed64:	005b      	lsls	r3, r3, #1
 800ed66:	4413      	add	r3, r2
 800ed68:	009b      	lsls	r3, r3, #2
 800ed6a:	440b      	add	r3, r1
 800ed6c:	f107 020c 	add.w	r2, r7, #12
 800ed70:	4611      	mov	r1, r2
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7fd facd 	bl	800c312 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	74fb      	strb	r3, [r7, #19]
 800ed7c:	7cfb      	ldrb	r3, [r7, #19]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d001      	beq.n	800ed86 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
 800ed82:	7cfb      	ldrb	r3, [r7, #19]
 800ed84:	e037      	b.n	800edf6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x11a>
            &subgraph_allocations_[subgraph_idx].tensors[i], &buffer_size));

        int value = 0;
 800ed86:	2300      	movs	r3, #0
 800ed88:	61fb      	str	r3, [r7, #28]
        if (tensor->type() == tflite::TensorType_INT8) {
 800ed8a:	6978      	ldr	r0, [r7, #20]
 800ed8c:	f7fd f8e4 	bl	800bf58 <_ZNK6tflite6Tensor4typeEv>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b09      	cmp	r3, #9
 800ed94:	bf0c      	ite	eq
 800ed96:	2301      	moveq	r3, #1
 800ed98:	2300      	movne	r3, #0
 800ed9a:	b2db      	uxtb	r3, r3
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d00f      	beq.n	800edc0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe4>
          value = tensor->quantization()->zero_point()->Get(0);
 800eda0:	6978      	ldr	r0, [r7, #20]
 800eda2:	f7fd fb3c 	bl	800c41e <_ZNK6tflite6Tensor12quantizationEv>
 800eda6:	4603      	mov	r3, r0
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7fd fb0c 	bl	800c3c6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800edae:	4603      	mov	r3, r0
 800edb0:	2100      	movs	r1, #0
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7ff f89c 	bl	800def0 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800edb8:	4602      	mov	r2, r0
 800edba:	460b      	mov	r3, r1
 800edbc:	4613      	mov	r3, r2
 800edbe:	61fb      	str	r3, [r7, #28]
        }
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	691a      	ldr	r2, [r3, #16]
 800edc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc6:	00db      	lsls	r3, r3, #3
 800edc8:	4413      	add	r3, r2
 800edca:	6859      	ldr	r1, [r3, #4]
 800edcc:	6a3a      	ldr	r2, [r7, #32]
 800edce:	4613      	mov	r3, r2
 800edd0:	005b      	lsls	r3, r3, #1
 800edd2:	4413      	add	r3, r2
 800edd4:	009b      	lsls	r3, r3, #2
 800edd6:	440b      	add	r3, r1
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	68fa      	ldr	r2, [r7, #12]
 800eddc:	69f9      	ldr	r1, [r7, #28]
 800edde:	4618      	mov	r0, r3
 800ede0:	f016 fae8 	bl	80253b4 <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800ede4:	6a3b      	ldr	r3, [r7, #32]
 800ede6:	3301      	adds	r3, #1
 800ede8:	623b      	str	r3, [r7, #32]
 800edea:	e794      	b.n	800ed16 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800edec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edee:	3301      	adds	r3, #1
 800edf0:	627b      	str	r3, [r7, #36]	; 0x24
 800edf2:	e779      	b.n	800ece8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
               buffer_size);
      }
    }
  }

  return kTfLiteOk;
 800edf4:	2300      	movs	r3, #0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3728      	adds	r7, #40	; 0x28
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <_ZN6tflite10MicroGraph12NumSubgraphsEv>:

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b082      	sub	sp, #8
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	689b      	ldr	r3, [r3, #8]
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7fd fba8 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800ee10:	4603      	mov	r3, r0
 800ee12:	4618      	mov	r0, r3
 800ee14:	f7ff f8fc 	bl	800e010 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3708      	adds	r7, #8
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}

0800ee22 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
 800ee22:	b480      	push	{r7}
 800ee24:	b083      	sub	sp, #12
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
 800ee2a:	6039      	str	r1, [r7, #0]
  subgraph_allocations_ = subgraph_allocations;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	683a      	ldr	r2, [r7, #0]
 800ee30:	611a      	str	r2, [r3, #16]
}
 800ee32:	bf00      	nop
 800ee34:	370c      	adds	r7, #12
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:

size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b082      	sub	sp, #8
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	689b      	ldr	r3, [r3, #8]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7fd fb87 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800ee52:	4602      	mov	r2, r0
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	4619      	mov	r1, r3
 800ee58:	4610      	mov	r0, r2
 800ee5a:	f7ff f8e7 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7fd fb28 	bl	800c4b6 <_ZNK6tflite8SubGraph6inputsEv>
 800ee66:	4603      	mov	r3, r0
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7fa fc55 	bl	8009718 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800ee6e:	4603      	mov	r3, r0
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	3708      	adds	r7, #8
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}

0800ee78 <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b086      	sub	sp, #24
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7fd fb69 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800ee8e:	4602      	mov	r2, r0
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	4619      	mov	r1, r3
 800ee94:	4610      	mov	r0, r2
 800ee96:	f7ff f8c9 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7fd fb0a 	bl	800c4b6 <_ZNK6tflite8SubGraph6inputsEv>
 800eea2:	4602      	mov	r2, r0
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	4619      	mov	r1, r3
 800eea8:	4610      	mov	r0, r2
 800eeaa:	f7fa fc43 	bl	8009734 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800eeae:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	691a      	ldr	r2, [r3, #16]
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	00db      	lsls	r3, r3, #3
 800eeb8:	4413      	add	r3, r2
 800eeba:	6859      	ldr	r1, [r3, #4]
 800eebc:	697a      	ldr	r2, [r7, #20]
 800eebe:	4613      	mov	r3, r2
 800eec0:	005b      	lsls	r3, r3, #1
 800eec2:	4413      	add	r3, r2
 800eec4:	009b      	lsls	r3, r3, #2
 800eec6:	440b      	add	r3, r1
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3718      	adds	r7, #24
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	4618      	mov	r0, r3
 800eee0:	f7fd fb3e 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800eee4:	4602      	mov	r2, r0
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	4619      	mov	r1, r3
 800eeea:	4610      	mov	r0, r2
 800eeec:	f7ff f89e 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800eef0:	4603      	mov	r3, r0
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7fd faed 	bl	800c4d2 <_ZNK6tflite8SubGraph7outputsEv>
 800eef8:	4603      	mov	r3, r0
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7fa fc0c 	bl	8009718 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800ef00:	4603      	mov	r3, r0
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3708      	adds	r7, #8
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}

0800ef0a <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
 800ef0a:	b580      	push	{r7, lr}
 800ef0c:	b086      	sub	sp, #24
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	60f8      	str	r0, [r7, #12]
 800ef12:	60b9      	str	r1, [r7, #8]
 800ef14:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	689b      	ldr	r3, [r3, #8]
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7fd fb20 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800ef20:	4602      	mov	r2, r0
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	4619      	mov	r1, r3
 800ef26:	4610      	mov	r0, r2
 800ef28:	f7ff f880 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fd facf 	bl	800c4d2 <_ZNK6tflite8SubGraph7outputsEv>
 800ef34:	4602      	mov	r2, r0
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	4619      	mov	r1, r3
 800ef3a:	4610      	mov	r0, r2
 800ef3c:	f7fa fbfa 	bl	8009734 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800ef40:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	691a      	ldr	r2, [r3, #16]
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	00db      	lsls	r3, r3, #3
 800ef4a:	4413      	add	r3, r2
 800ef4c:	6859      	ldr	r1, [r3, #4]
 800ef4e:	697a      	ldr	r2, [r7, #20]
 800ef50:	4613      	mov	r3, r2
 800ef52:	005b      	lsls	r3, r3, #1
 800ef54:	4413      	add	r3, r2
 800ef56:	009b      	lsls	r3, r3, #2
 800ef58:	440b      	add	r3, r1
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3718      	adds	r7, #24
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b082      	sub	sp, #8
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	2104      	movs	r1, #4
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7fe feec 	bl	800dd4e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800ef76:	4603      	mov	r3, r0
  }
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3708      	adds	r7, #8
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b082      	sub	sp, #8
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	210e      	movs	r1, #14
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7fe feae 	bl	800dcee <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800ef92:	4603      	mov	r3, r0
  }
 800ef94:	4618      	mov	r0, r3
 800ef96:	3708      	adds	r7, #8
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2106      	movs	r1, #6
 800efa8:	4618      	mov	r0, r3
 800efaa:	f000 fd58 	bl	800fa5e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800efae:	4603      	mov	r3, r0
  }
 800efb0:	4618      	mov	r0, r3
 800efb2:	3708      	adds	r7, #8
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	695b      	ldr	r3, [r3, #20]
 800efc4:	4618      	mov	r0, r3
 800efc6:	370c      	adds	r7, #12
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr

0800efd0 <_ZN6tflite10MicroGraph14GetAllocationsEv>:

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	691b      	ldr	r3, [r3, #16]
 800efdc:	4618      	mov	r0, r3
 800efde:	370c      	adds	r7, #12
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
  // values other than kTfLiteOk and kTfLiteError.
  // TODO(b/149795762): Add this to the TfLiteStatus enum.
  TfLiteStatus Invoke();

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->inputs()->size();
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7fd fab3 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800effa:	4603      	mov	r3, r0
 800effc:	2100      	movs	r1, #0
 800effe:	4618      	mov	r0, r3
 800f000:	f7ff f814 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800f004:	4603      	mov	r3, r0
 800f006:	4618      	mov	r0, r3
 800f008:	f7fd fa55 	bl	800c4b6 <_ZNK6tflite8SubGraph6inputsEv>
 800f00c:	4603      	mov	r3, r0
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fa fb82 	bl	8009718 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800f014:	4603      	mov	r3, r0
  }
 800f016:	4618      	mov	r0, r3
 800f018:	3708      	adds	r7, #8
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 800f01e:	b580      	push	{r7, lr}
 800f020:	b082      	sub	sp, #8
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->inputs();
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fd fa98 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800f030:	4603      	mov	r3, r0
 800f032:	2100      	movs	r1, #0
 800f034:	4618      	mov	r0, r3
 800f036:	f7fe fff9 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800f03a:	4603      	mov	r3, r0
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7fd fa3a 	bl	800c4b6 <_ZNK6tflite8SubGraph6inputsEv>
 800f042:	4603      	mov	r3, r0
  }
 800f044:	4618      	mov	r0, r3
 800f046:	3708      	adds	r7, #8
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}

0800f04c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->outputs()->size();
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	4618      	mov	r0, r3
 800f05a:	f7fd fa81 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800f05e:	4603      	mov	r3, r0
 800f060:	2100      	movs	r1, #0
 800f062:	4618      	mov	r0, r3
 800f064:	f7fe ffe2 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800f068:	4603      	mov	r3, r0
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7fd fa31 	bl	800c4d2 <_ZNK6tflite8SubGraph7outputsEv>
 800f070:	4603      	mov	r3, r0
 800f072:	4618      	mov	r0, r3
 800f074:	f7fa fb50 	bl	8009718 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800f078:	4603      	mov	r3, r0
  }
 800f07a:	4618      	mov	r0, r3
 800f07c:	3708      	adds	r7, #8
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}

0800f082 <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 800f082:	b580      	push	{r7, lr}
 800f084:	b082      	sub	sp, #8
 800f086:	af00      	add	r7, sp, #0
 800f088:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->outputs();
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	4618      	mov	r0, r3
 800f090:	f7fd fa66 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800f094:	4603      	mov	r3, r0
 800f096:	2100      	movs	r1, #0
 800f098:	4618      	mov	r0, r3
 800f09a:	f7fe ffc7 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7fd fa16 	bl	800c4d2 <_ZNK6tflite8SubGraph7outputsEv>
 800f0a6:	4603      	mov	r3, r0
  }
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3708      	adds	r7, #8
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>:
  // TODO(b/158263161): Consider switching to Create() function to enable better
  // error reporting during initialization.
  void Init(MicroProfiler* profiler);

  // Gets the current subgraph index used from within context methods.
  int get_subgraph_index() { return graph_.GetCurrentSubgraphIndex(); }
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b082      	sub	sp, #8
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	3368      	adds	r3, #104	; 0x68
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7ff ff7b 	bl	800efb8 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3708      	adds	r7, #8
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/schema/schema_utils.h"

namespace tflite {

MicroInterpreter::MicroInterpreter(const Model* model,
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b084      	sub	sp, #16
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	607a      	str	r2, [r7, #4]
 800f0d8:	603b      	str	r3, [r7, #0]

      graph_(&context_, model, &allocator_),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	68ba      	ldr	r2, [r7, #8]
 800f0de:	601a      	str	r2, [r3, #0]
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	687a      	ldr	r2, [r7, #4]
 800f0e4:	605a      	str	r2, [r3, #4]
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	69fa      	ldr	r2, [r7, #28]
 800f0ea:	609a      	str	r2, [r3, #8]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	330c      	adds	r3, #12
 800f0f0:	2258      	movs	r2, #88	; 0x58
 800f0f2:	2100      	movs	r1, #0
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f016 f95d 	bl	80253b4 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800f0fa:	69fa      	ldr	r2, [r7, #28]
 800f0fc:	69b9      	ldr	r1, [r7, #24]
 800f0fe:	6838      	ldr	r0, [r7, #0]
 800f100:	f7fd ffb8 	bl	800d074 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 800f104:	4602      	mov	r2, r0
      output_tensors_(nullptr) {
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	665a      	str	r2, [r3, #100]	; 0x64
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f103 010c 	add.w	r1, r3, #12
      graph_(&context_, model, &allocator_),
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      output_tensors_(nullptr) {
 800f11a:	68ba      	ldr	r2, [r7, #8]
 800f11c:	f7ff fb82 	bl	800e824 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2200      	movs	r2, #0
 800f124:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2201      	movs	r2, #1
 800f12c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2200      	movs	r2, #0
 800f134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	2200      	movs	r2, #0
 800f13c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2200      	movs	r2, #0
 800f144:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  Init(profiler);
 800f148:	6a39      	ldr	r1, [r7, #32]
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f000 f826 	bl	800f19c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	4618      	mov	r0, r3
 800f154:	3710      	adds	r7, #16
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}

0800f15a <_ZN6tflite16MicroInterpreterD1Ev>:
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 800f15a:	b580      	push	{r7, lr}
 800f15c:	b082      	sub	sp, #8
 800f15e:	af00      	add	r7, sp, #0
 800f160:	6078      	str	r0, [r7, #4]
  if (graph_.GetAllocations() != nullptr) {
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	3368      	adds	r3, #104	; 0x68
 800f166:	4618      	mov	r0, r3
 800f168:	f7ff ff32 	bl	800efd0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f16c:	4603      	mov	r3, r0
 800f16e:	2b00      	cmp	r3, #0
 800f170:	bf14      	ite	ne
 800f172:	2301      	movne	r3, #1
 800f174:	2300      	moveq	r3, #0
 800f176:	b2db      	uxtb	r3, r3
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d004      	beq.n	800f186 <_ZN6tflite16MicroInterpreterD1Ev+0x2c>
    graph_.FreeSubgraphs();
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	3368      	adds	r3, #104	; 0x68
 800f180:	4618      	mov	r0, r3
 800f182:	f7ff fc93 	bl	800eaac <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	3368      	adds	r3, #104	; 0x68
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7ff fb74 	bl	800e878 <_ZN6tflite10MicroGraphD1Ev>
  }
}
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	4618      	mov	r0, r3
 800f194:	3708      	adds	r7, #8
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
	...

0800f19c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:

void MicroInterpreter::Init(MicroProfiler* profiler) {
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
  context_.impl_ = static_cast<void*>(this);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	619a      	str	r2, [r3, #24]
  context_.ReportError = ReportOpError;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	4a0d      	ldr	r2, [pc, #52]	; (800f1e4 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 800f1b0:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	4a0c      	ldr	r2, [pc, #48]	; (800f1e8 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 800f1b6:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.ReportError = ReportOpError;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	4a0a      	ldr	r2, [pc, #40]	; (800f1e4 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 800f1bc:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4a09      	ldr	r2, [pc, #36]	; (800f1e8 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 800f1c2:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.GetEvalTensor = GetEvalTensor;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	4a09      	ldr	r2, [pc, #36]	; (800f1ec <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x50>)
 800f1c8:	661a      	str	r2, [r3, #96]	; 0x60
  context_.profiler = profiler;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	683a      	ldr	r2, [r7, #0]
 800f1ce:	641a      	str	r2, [r3, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
}
 800f1d8:	bf00      	nop
 800f1da:	370c      	adds	r7, #12
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr
 800f1e4:	0800f971 	.word	0x0800f971
 800f1e8:	0800f9a9 	.word	0x0800f9a9
 800f1ec:	0800f9f9 	.word	0x0800f9f9

0800f1f0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:

TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 800f1f0:	b5b0      	push	{r4, r5, r7, lr}
 800f1f2:	b096      	sub	sp, #88	; 0x58
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	657b      	str	r3, [r7, #84]	; 0x54
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	3368      	adds	r3, #104	; 0x68
 800f200:	4618      	mov	r0, r3
 800f202:	f7ff fdfc 	bl	800edfe <_ZN6tflite10MicroGraph12NumSubgraphsEv>
 800f206:	4602      	mov	r2, r0
 800f208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f20a:	4293      	cmp	r3, r2
 800f20c:	bfb4      	ite	lt
 800f20e:	2301      	movlt	r3, #1
 800f210:	2300      	movge	r3, #0
 800f212:	b2db      	uxtb	r3, r3
 800f214:	2b00      	cmp	r3, #0
 800f216:	f000 815d 	beq.w	800f4d4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e4>
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	4618      	mov	r0, r3
 800f220:	f7fd f99e 	bl	800c560 <_ZNK6tflite5Model9subgraphsEv>
 800f224:	4602      	mov	r2, r0
 800f226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f228:	4619      	mov	r1, r3
 800f22a:	4610      	mov	r0, r2
 800f22c:	f7fe fefe 	bl	800e02c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800f230:	6478      	str	r0, [r7, #68]	; 0x44
    TFLITE_DCHECK(subgraph != nullptr);
 800f232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f234:	2b00      	cmp	r3, #0
 800f236:	d101      	bne.n	800f23c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x4c>
 800f238:	f016 f819 	bl	802526e <abort>

    auto* opcodes = model_->operator_codes();
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4618      	mov	r0, r3
 800f242:	f7ff feab 	bl	800ef9c <_ZNK6tflite5Model14operator_codesEv>
 800f246:	6438      	str	r0, [r7, #64]	; 0x40
    BuiltinDataAllocator* builtin_data_allocator =
        allocator_.GetBuiltinDataAllocator();
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7fe fd42 	bl	800dcd6 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 800f252:	63f8      	str	r0, [r7, #60]	; 0x3c
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800f254:	2300      	movs	r3, #0
 800f256:	653b      	str	r3, [r7, #80]	; 0x50
 800f258:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f25a:	f7fd f948 	bl	800c4ee <_ZNK6tflite8SubGraph9operatorsEv>
 800f25e:	4603      	mov	r3, r0
 800f260:	4618      	mov	r0, r3
 800f262:	f7fe fea1 	bl	800dfa8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800f266:	4602      	mov	r2, r0
 800f268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f26a:	4293      	cmp	r3, r2
 800f26c:	bf34      	ite	cc
 800f26e:	2301      	movcc	r3, #1
 800f270:	2300      	movcs	r3, #0
 800f272:	b2db      	uxtb	r3, r3
 800f274:	2b00      	cmp	r3, #0
 800f276:	f000 8129 	beq.w	800f4cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2dc>
      const auto* op = subgraph->operators()->Get(i);
 800f27a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f27c:	f7fd f937 	bl	800c4ee <_ZNK6tflite8SubGraph9operatorsEv>
 800f280:	4603      	mov	r3, r0
 800f282:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f284:	4618      	mov	r0, r3
 800f286:	f7fe fe9d 	bl	800dfc4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800f28a:	63b8      	str	r0, [r7, #56]	; 0x38
      const size_t index = op->opcode_index();
 800f28c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f28e:	f7ff fe68 	bl	800ef62 <_ZNK6tflite8Operator12opcode_indexEv>
 800f292:	6378      	str	r0, [r7, #52]	; 0x34
      if (index >= opcodes->size()) {
 800f294:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f296:	f000 fbf2 	bl	800fa7e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800f29a:	4602      	mov	r2, r0
 800f29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	bf2c      	ite	cs
 800f2a2:	2301      	movcs	r3, #1
 800f2a4:	2300      	movcc	r3, #0
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d005      	beq.n	800f2b8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 800f2ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f2ae:	488c      	ldr	r0, [pc, #560]	; (800f4e0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f0>)
 800f2b0:	f7ff fa46 	bl	800e740 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	e10e      	b.n	800f4d6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
      }
      const auto* opcode = opcodes->Get(index);
 800f2b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f2ba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f2bc:	f000 fbee 	bl	800fa9c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 800f2c0:	6338      	str	r0, [r7, #48]	; 0x30
      TfLiteStatus status =
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	461d      	mov	r5, r3
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	689c      	ldr	r4, [r3, #8]
                                    &(graph_.GetAllocations()[subgraph_idx]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	3368      	adds	r3, #104	; 0x68
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7ff fe7d 	bl	800efd0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2da:	00db      	lsls	r3, r3, #3
 800f2dc:	4413      	add	r3, r2
                                          .node_and_registrations[i]
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2e2:	212c      	movs	r1, #44	; 0x2c
 800f2e4:	fb01 f303 	mul.w	r3, r1, r3
 800f2e8:	4413      	add	r3, r2
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 800f2ea:	3328      	adds	r3, #40	; 0x28
 800f2ec:	4622      	mov	r2, r4
 800f2ee:	4629      	mov	r1, r5
 800f2f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2f2:	f7fb fcf1 	bl	800acd8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                          .registration));
      if (status != kTfLiteOk) {
 800f2fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f300:	2b00      	cmp	r3, #0
 800f302:	d00e      	beq.n	800f322 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x132>
        MicroPrintf("Failed to get registration from op code %s\n ",
 800f304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f306:	f015 fcf4 	bl	8024cf2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800f30a:	4603      	mov	r3, r0
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7fb fc9f 	bl	800ac50 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800f312:	4603      	mov	r3, r0
 800f314:	4619      	mov	r1, r3
 800f316:	4873      	ldr	r0, [pc, #460]	; (800f4e4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f4>)
 800f318:	f7ff fa12 	bl	800e740 <_Z11MicroPrintfPKcz>
                    EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
        return status;
 800f31c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f320:	e0d9      	b.n	800f4d6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
      }
      const auto* registration = graph_.GetAllocations()[subgraph_idx]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	3368      	adds	r3, #104	; 0x68
 800f326:	4618      	mov	r0, r3
 800f328:	f7ff fe52 	bl	800efd0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f32c:	4602      	mov	r2, r0
 800f32e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f330:	00db      	lsls	r3, r3, #3
 800f332:	4413      	add	r3, r2
                                     .node_and_registrations[i]
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f338:	212c      	movs	r1, #44	; 0x2c
 800f33a:	fb01 f303 	mul.w	r3, r1, r3
 800f33e:	4413      	add	r3, r2
                                     .registration;
 800f340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f342:	62bb      	str	r3, [r7, #40]	; 0x28
      if (registration == nullptr) {
 800f344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f346:	2b00      	cmp	r3, #0
 800f348:	d105      	bne.n	800f356 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x166>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 800f34a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f34c:	4866      	ldr	r0, [pc, #408]	; (800f4e8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f8>)
 800f34e:	f7ff f9f7 	bl	800e740 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 800f352:	2301      	movs	r3, #1
 800f354:	e0bf      	b.n	800f4d6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
      }
      BuiltinOperator op_type =
          static_cast<BuiltinOperator>(registration->builtin_code);
 800f356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f358:	695b      	ldr	r3, [r3, #20]
      BuiltinOperator op_type =
 800f35a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      const char* custom_data = nullptr;
 800f35e:	2300      	movs	r3, #0
 800f360:	64fb      	str	r3, [r7, #76]	; 0x4c
      size_t custom_data_size = 0;
 800f362:	2300      	movs	r3, #0
 800f364:	64bb      	str	r3, [r7, #72]	; 0x48
      unsigned char* builtin_data = nullptr;
 800f366:	2300      	movs	r3, #0
 800f368:	617b      	str	r3, [r7, #20]

      if (op_type == BuiltinOperator_CUSTOM) {
 800f36a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f36e:	2b20      	cmp	r3, #32
 800f370:	d11b      	bne.n	800f3aa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ba>
        // Custom Ops may or may not have a non-null custom_options field.
        if (op->custom_options() != nullptr) {
 800f372:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f374:	f7ff fe04 	bl	800ef80 <_ZNK6tflite8Operator14custom_optionsEv>
 800f378:	4603      	mov	r3, r0
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	bf14      	ite	ne
 800f37e:	2301      	movne	r3, #1
 800f380:	2300      	moveq	r3, #0
 800f382:	b2db      	uxtb	r3, r3
 800f384:	2b00      	cmp	r3, #0
 800f386:	d051      	beq.n	800f42c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x23c>
          custom_data =
              reinterpret_cast<const char*>(op->custom_options()->data());
 800f388:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f38a:	f7ff fdf9 	bl	800ef80 <_ZNK6tflite8Operator14custom_optionsEv>
 800f38e:	4603      	mov	r3, r0
 800f390:	4618      	mov	r0, r3
 800f392:	f7fe fef5 	bl	800e180 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800f396:	64f8      	str	r0, [r7, #76]	; 0x4c
          custom_data_size = op->custom_options()->size();
 800f398:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f39a:	f7ff fdf1 	bl	800ef80 <_ZNK6tflite8Operator14custom_optionsEv>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7fe fd52 	bl	800de4a <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800f3a6:	64b8      	str	r0, [r7, #72]	; 0x48
 800f3a8:	e040      	b.n	800f42c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x23c>
        }
      } else {
        if (op->custom_options() != nullptr) {
 800f3aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f3ac:	f7ff fde8 	bl	800ef80 <_ZNK6tflite8Operator14custom_optionsEv>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	bf14      	ite	ne
 800f3b6:	2301      	movne	r3, #1
 800f3b8:	2300      	moveq	r3, #0
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d00b      	beq.n	800f3d8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e8>
          MicroPrintf(
 800f3c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7fb fc43 	bl	800ac50 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	4847      	ldr	r0, [pc, #284]	; (800f4ec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2fc>)
 800f3d0:	f7ff f9b6 	bl	800e740 <_Z11MicroPrintfPKcz>
              "Unsupported behavior: found builtin operator %s with custom "
              "options.\n",
              EnumNameBuiltinOperator(op_type));
          return kTfLiteError;
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	e07e      	b.n	800f4d6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
        }

        MicroOpResolver::BuiltinParseFunction parser =
            op_resolver_.GetOpDataParser(op_type);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	685a      	ldr	r2, [r3, #4]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	3320      	adds	r3, #32
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800f3ea:	4610      	mov	r0, r2
 800f3ec:	4798      	blx	r3
 800f3ee:	6238      	str	r0, [r7, #32]
        if (parser == nullptr) {
 800f3f0:	6a3b      	ldr	r3, [r7, #32]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d10b      	bne.n	800f40e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x21e>
          MicroPrintf("Did not find a parser for %s",
 800f3f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7fb fc28 	bl	800ac50 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800f400:	4603      	mov	r3, r0
 800f402:	4619      	mov	r1, r3
 800f404:	483a      	ldr	r0, [pc, #232]	; (800f4f0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x300>)
 800f406:	f7ff f99b 	bl	800e740 <_Z11MicroPrintfPKcz>
                      EnumNameBuiltinOperator(op_type));

          return kTfLiteError;
 800f40a:	2301      	movs	r3, #1
 800f40c:	e063      	b.n	800f4d6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
        }
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6899      	ldr	r1, [r3, #8]
 800f412:	f107 0314 	add.w	r3, r7, #20
 800f416:	6a3c      	ldr	r4, [r7, #32]
 800f418:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f41a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f41c:	47a0      	blx	r4
 800f41e:	4603      	mov	r3, r0
 800f420:	77fb      	strb	r3, [r7, #31]
 800f422:	7ffb      	ldrb	r3, [r7, #31]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d001      	beq.n	800f42c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x23c>
 800f428:	7ffb      	ldrb	r3, [r7, #31]
 800f42a:	e054      	b.n	800f4d6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
                                     builtin_data_allocator,
                                     (void**)(&builtin_data)));
      }

      TfLiteIntArray* inputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800f430:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f432:	f7fd f816 	bl	800c462 <_ZNK6tflite8Operator6inputsEv>
 800f436:	4601      	mov	r1, r0
 800f438:	f107 0310 	add.w	r3, r7, #16
 800f43c:	461a      	mov	r2, r3
 800f43e:	4620      	mov	r0, r4
 800f440:	f7fe fc36 	bl	800dcb0 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 800f444:	4603      	mov	r3, r0
 800f446:	77bb      	strb	r3, [r7, #30]
 800f448:	7fbb      	ldrb	r3, [r7, #30]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d001      	beq.n	800f452 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x262>
 800f44e:	7fbb      	ldrb	r3, [r7, #30]
 800f450:	e041      	b.n	800f4d6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
          op->inputs(), &inputs_array));

      TfLiteIntArray* outputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800f456:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f458:	f7fd f811 	bl	800c47e <_ZNK6tflite8Operator7outputsEv>
 800f45c:	4601      	mov	r1, r0
 800f45e:	f107 030c 	add.w	r3, r7, #12
 800f462:	461a      	mov	r2, r3
 800f464:	4620      	mov	r0, r4
 800f466:	f7fe fc23 	bl	800dcb0 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 800f46a:	4603      	mov	r3, r0
 800f46c:	777b      	strb	r3, [r7, #29]
 800f46e:	7f7b      	ldrb	r3, [r7, #29]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d001      	beq.n	800f478 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x288>
 800f474:	7f7b      	ldrb	r3, [r7, #29]
 800f476:	e02e      	b.n	800f4d6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
          op->outputs(), &outputs_array));

      TfLiteNode* node = &(
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	3368      	adds	r3, #104	; 0x68
 800f47c:	4618      	mov	r0, r3
 800f47e:	f7ff fda7 	bl	800efd0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f482:	4602      	mov	r2, r0
 800f484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f486:	00db      	lsls	r3, r3, #3
 800f488:	4413      	add	r3, r2
 800f48a:	681a      	ldr	r2, [r3, #0]
 800f48c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f48e:	212c      	movs	r1, #44	; 0x2c
 800f490:	fb01 f303 	mul.w	r3, r1, r3
 800f494:	4413      	add	r3, r2
 800f496:	61bb      	str	r3, [r7, #24]
      *node = {};
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	4618      	mov	r0, r3
 800f49c:	2328      	movs	r3, #40	; 0x28
 800f49e:	461a      	mov	r2, r3
 800f4a0:	2100      	movs	r1, #0
 800f4a2:	f015 ff87 	bl	80253b4 <memset>
      node->inputs = inputs_array;
 800f4a6:	693a      	ldr	r2, [r7, #16]
 800f4a8:	69bb      	ldr	r3, [r7, #24]
 800f4aa:	601a      	str	r2, [r3, #0]
      node->outputs = outputs_array;
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	605a      	str	r2, [r3, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 800f4b2:	697a      	ldr	r2, [r7, #20]
 800f4b4:	69bb      	ldr	r3, [r7, #24]
 800f4b6:	615a      	str	r2, [r3, #20]
      node->custom_initial_data = custom_data;
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f4bc:	619a      	str	r2, [r3, #24]
      node->custom_initial_data_size = custom_data_size;
 800f4be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4c0:	69bb      	ldr	r3, [r7, #24]
 800f4c2:	61da      	str	r2, [r3, #28]
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800f4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	653b      	str	r3, [r7, #80]	; 0x50
 800f4ca:	e6c5      	b.n	800f258 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x68>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 800f4cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	657b      	str	r3, [r7, #84]	; 0x54
 800f4d2:	e693      	b.n	800f1fc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
    }
  }
  return kTfLiteOk;
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3758      	adds	r7, #88	; 0x58
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bdb0      	pop	{r4, r5, r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	08029568 	.word	0x08029568
 800f4e4:	08029594 	.word	0x08029594
 800f4e8:	080295c4 	.word	0x080295c4
 800f4ec:	080295e8 	.word	0x080295e8
 800f4f0:	08029630 	.word	0x08029630

0800f4f4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:

TfLiteStatus MicroInterpreter::AllocateTensors() {
 800f4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4f8:	b088      	sub	sp, #32
 800f4fa:	af02      	add	r7, sp, #8
 800f4fc:	6078      	str	r0, [r7, #4]
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	4619      	mov	r1, r3
 800f508:	4610      	mov	r0, r2
 800f50a:	f7fd fdfd 	bl	800d108 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
 800f50e:	60f8      	str	r0, [r7, #12]

  if (allocations == nullptr) {
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d10b      	bne.n	800f52e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	689b      	ldr	r3, [r3, #8]
 800f51a:	49a4      	ldr	r1, [pc, #656]	; (800f7ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b8>)
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7f9 f9b9 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2201      	movs	r2, #1
 800f526:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    return kTfLiteError;
 800f52a:	2301      	movs	r3, #1
 800f52c:	e139      	b.n	800f7a2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  graph_.SetSubgraphAllocations(allocations);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	3368      	adds	r3, #104	; 0x68
 800f532:	68f9      	ldr	r1, [r7, #12]
 800f534:	4618      	mov	r0, r3
 800f536:	f7ff fc74 	bl	800ee22 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>

  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f7ff fe58 	bl	800f1f0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 800f540:	4603      	mov	r3, r0
 800f542:	72fb      	strb	r3, [r7, #11]
 800f544:	7afb      	ldrb	r3, [r7, #11]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d001      	beq.n	800f54e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5a>
 800f54a:	7afb      	ldrb	r3, [r7, #11]
 800f54c:	e129      	b.n	800f7a2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4a97      	ldr	r2, [pc, #604]	; (800f7b0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2bc>)
 800f552:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2200      	movs	r2, #0
 800f558:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2200      	movs	r2, #0
 800f55e:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4a94      	ldr	r2, [pc, #592]	; (800f7b4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>)
 800f564:	611a      	str	r2, [r3, #16]
  graph_.InitSubgraphs();
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	3368      	adds	r3, #104	; 0x68
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7ff f9a4 	bl	800e8b8 <_ZN6tflite10MicroGraph13InitSubgraphsEv>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a91      	ldr	r2, [pc, #580]	; (800f7b8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c4>)
 800f574:	64da      	str	r2, [r3, #76]	; 0x4c
  graph_.PrepareSubgraphs();
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	3368      	adds	r3, #104	; 0x68
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7ff fa16 	bl	800e9ac <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2200      	movs	r2, #0
 800f584:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2200      	movs	r2, #0
 800f58a:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	4a8b      	ldr	r2, [pc, #556]	; (800f7bc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c8>)
 800f590:	651a      	str	r2, [r3, #80]	; 0x50

  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681d      	ldr	r5, [r3, #0]
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	3368      	adds	r3, #104	; 0x68
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7ff fd16 	bl	800efd0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f5a4:	4602      	mov	r2, r0
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	3388      	adds	r3, #136	; 0x88
 800f5aa:	4629      	mov	r1, r5
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	f7fd fe2d 	bl	800d20c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	72bb      	strb	r3, [r7, #10]
 800f5b6:	7abb      	ldrb	r3, [r7, #10]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d001      	beq.n	800f5c0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xcc>
 800f5bc:	7abb      	ldrb	r3, [r7, #10]
 800f5be:	e0f0      	b.n	800f7a2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
                                   &scratch_buffer_handles_));

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  input_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
          sizeof(TfLiteTensor*) * inputs_size()));
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	330c      	adds	r3, #12
 800f5cc:	681c      	ldr	r4, [r3, #0]
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f7ff fd0a 	bl	800efe8 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800f5d4:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	4619      	mov	r1, r3
 800f5da:	4628      	mov	r0, r5
 800f5dc:	47a0      	blx	r4
 800f5de:	4602      	mov	r2, r0
  input_tensors_ =
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  if (input_tensors_ == nullptr) {
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d10d      	bne.n	800f60c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x118>
    TF_LITE_REPORT_ERROR(
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	689c      	ldr	r4, [r3, #8]
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7ff fcf7 	bl	800efe8 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	461a      	mov	r2, r3
 800f600:	496f      	ldr	r1, [pc, #444]	; (800f7c0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2cc>)
 800f602:	4620      	mov	r0, r4
 800f604:	f7f9 f946 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->input_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * inputs_size());
    return kTfLiteError;
 800f608:	2301      	movs	r3, #1
 800f60a:	e0ca      	b.n	800f7a2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < inputs_size(); ++i) {
 800f60c:	2300      	movs	r3, #0
 800f60e:	617b      	str	r3, [r7, #20]
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f7ff fce9 	bl	800efe8 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800f616:	4602      	mov	r2, r0
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	4293      	cmp	r3, r2
 800f61c:	bf34      	ite	cc
 800f61e:	2301      	movcc	r3, #1
 800f620:	2300      	movcs	r3, #0
 800f622:	b2db      	uxtb	r3, r3
 800f624:	2b00      	cmp	r3, #0
 800f626:	d03c      	beq.n	800f6a2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ae>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	681d      	ldr	r5, [r3, #0]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	3368      	adds	r3, #104	; 0x68
 800f63e:	4618      	mov	r0, r3
 800f640:	f7ff fcc6 	bl	800efd0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f644:	4680      	mov	r8, r0
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f7ff fce9 	bl	800f01e <_ZNK6tflite16MicroInterpreter6inputsEv>
 800f64c:	4603      	mov	r3, r0
 800f64e:	6979      	ldr	r1, [r7, #20]
 800f650:	4618      	mov	r0, r3
 800f652:	f7fa f86f 	bl	8009734 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f656:	4601      	mov	r1, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	009b      	lsls	r3, r3, #2
 800f662:	18d4      	adds	r4, r2, r3
 800f664:	2300      	movs	r3, #0
 800f666:	9300      	str	r3, [sp, #0]
 800f668:	460b      	mov	r3, r1
 800f66a:	4642      	mov	r2, r8
 800f66c:	6839      	ldr	r1, [r7, #0]
 800f66e:	4630      	mov	r0, r6
 800f670:	47a8      	blx	r5
 800f672:	4603      	mov	r3, r0
 800f674:	6023      	str	r3, [r4, #0]
    if (input_tensors_[i] == nullptr) {
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	009b      	lsls	r3, r3, #2
 800f680:	4413      	add	r3, r2
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d108      	bne.n	800f69a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a6>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	689b      	ldr	r3, [r3, #8]
 800f68c:	697a      	ldr	r2, [r7, #20]
 800f68e:	494d      	ldr	r1, [pc, #308]	; (800f7c4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d0>)
 800f690:	4618      	mov	r0, r3
 800f692:	f7f9 f8ff 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize input tensor %d", i);
      return kTfLiteError;
 800f696:	2301      	movs	r3, #1
 800f698:	e083      	b.n	800f7a2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < inputs_size(); ++i) {
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	3301      	adds	r3, #1
 800f69e:	617b      	str	r3, [r7, #20]
 800f6a0:	e7b6      	b.n	800f610 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11c>
  }

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  output_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
          sizeof(TfLiteTensor*) * outputs_size()));
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	330c      	adds	r3, #12
 800f6ae:	681c      	ldr	r4, [r3, #0]
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f7ff fccb 	bl	800f04c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800f6b6:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	4628      	mov	r0, r5
 800f6be:	47a0      	blx	r4
 800f6c0:	4602      	mov	r2, r0
  output_tensors_ =
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  if (output_tensors_ == nullptr) {
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d10d      	bne.n	800f6ee <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fa>
    TF_LITE_REPORT_ERROR(
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	689c      	ldr	r4, [r3, #8]
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f7ff fcb8 	bl	800f04c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	009b      	lsls	r3, r3, #2
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	4939      	ldr	r1, [pc, #228]	; (800f7c8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d4>)
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f7f9 f8d5 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->output_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * outputs_size());
    return kTfLiteError;
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	e059      	b.n	800f7a2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < outputs_size(); ++i) {
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	613b      	str	r3, [r7, #16]
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f7ff fcaa 	bl	800f04c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800f6f8:	4602      	mov	r2, r0
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	bf34      	ite	cc
 800f700:	2301      	movcc	r3, #1
 800f702:	2300      	movcs	r3, #0
 800f704:	b2db      	uxtb	r3, r3
 800f706:	2b00      	cmp	r3, #0
 800f708:	d03c      	beq.n	800f784 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x290>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	681d      	ldr	r5, [r3, #0]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	3368      	adds	r3, #104	; 0x68
 800f720:	4618      	mov	r0, r3
 800f722:	f7ff fc55 	bl	800efd0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f726:	4680      	mov	r8, r0
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f7ff fcaa 	bl	800f082 <_ZNK6tflite16MicroInterpreter7outputsEv>
 800f72e:	4603      	mov	r3, r0
 800f730:	6939      	ldr	r1, [r7, #16]
 800f732:	4618      	mov	r0, r3
 800f734:	f7f9 fffe 	bl	8009734 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f738:	4601      	mov	r1, r0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	009b      	lsls	r3, r3, #2
 800f744:	18d4      	adds	r4, r2, r3
 800f746:	2300      	movs	r3, #0
 800f748:	9300      	str	r3, [sp, #0]
 800f74a:	460b      	mov	r3, r1
 800f74c:	4642      	mov	r2, r8
 800f74e:	6839      	ldr	r1, [r7, #0]
 800f750:	4630      	mov	r0, r6
 800f752:	47a8      	blx	r5
 800f754:	4603      	mov	r3, r0
 800f756:	6023      	str	r3, [r4, #0]
    if (output_tensors_[i] == nullptr) {
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	009b      	lsls	r3, r3, #2
 800f762:	4413      	add	r3, r2
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d108      	bne.n	800f77c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x288>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	689b      	ldr	r3, [r3, #8]
 800f76e:	693a      	ldr	r2, [r7, #16]
 800f770:	4916      	ldr	r1, [pc, #88]	; (800f7cc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d8>)
 800f772:	4618      	mov	r0, r3
 800f774:	f7f9 f88e 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize output tensor %d", i);
      return kTfLiteError;
 800f778:	2301      	movs	r3, #1
 800f77a:	e012      	b.n	800f7a2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < outputs_size(); ++i) {
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	3301      	adds	r3, #1
 800f780:	613b      	str	r3, [r7, #16]
 800f782:	e7b6      	b.n	800f6f2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fe>
    }
  }

  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f000 f89d 	bl	800f8c4 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 800f78a:	4603      	mov	r3, r0
 800f78c:	727b      	strb	r3, [r7, #9]
 800f78e:	7a7b      	ldrb	r3, [r7, #9]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d001      	beq.n	800f798 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a4>
 800f794:	7a7b      	ldrb	r3, [r7, #9]
 800f796:	e004      	b.n	800f7a2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  tensors_allocated_ = true;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2201      	movs	r2, #1
 800f79c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  return kTfLiteOk;
 800f7a0:	2300      	movs	r3, #0
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3718      	adds	r7, #24
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7ac:	08029650 	.word	0x08029650
 800f7b0:	0800f8e1 	.word	0x0800f8e1
 800f7b4:	0800fa37 	.word	0x0800fa37
 800f7b8:	0800f90d 	.word	0x0800f90d
 800f7bc:	0800f943 	.word	0x0800f943
 800f7c0:	08029674 	.word	0x08029674
 800f7c4:	080296c0 	.word	0x080296c0
 800f7c8:	080296e8 	.word	0x080296e8
 800f7cc:	08029734 	.word	0x08029734

0800f7d0 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d007      	beq.n	800f7f2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	689b      	ldr	r3, [r3, #8]
 800f7e6:	4912      	ldr	r1, [pc, #72]	; (800f830 <_ZN6tflite16MicroInterpreter6InvokeEv+0x60>)
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7f9 f853 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	e019      	b.n	800f826 <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f7f8:	f083 0301 	eor.w	r3, r3, #1
 800f7fc:	b2db      	uxtb	r3, r3
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d009      	beq.n	800f816 <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f7ff fe76 	bl	800f4f4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800f808:	4603      	mov	r3, r0
 800f80a:	73fb      	strb	r3, [r7, #15]
 800f80c:	7bfb      	ldrb	r3, [r7, #15]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d001      	beq.n	800f816 <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 800f812:	7bfb      	ldrb	r3, [r7, #15]
 800f814:	e007      	b.n	800f826 <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }
  return graph_.InvokeSubgraph(0);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	3368      	adds	r3, #104	; 0x68
 800f81a:	2100      	movs	r1, #0
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7ff f9b1 	bl	800eb84 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
 800f822:	4603      	mov	r3, r0
 800f824:	bf00      	nop
}
 800f826:	4618      	mov	r0, r3
 800f828:	3710      	adds	r7, #16
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	bf00      	nop
 800f830:	0802975c 	.word	0x0802975c

0800f834 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 800f834:	b580      	push	{r7, lr}
 800f836:	b084      	sub	sp, #16
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f7ff fbd2 	bl	800efe8 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800f844:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800f846:	683a      	ldr	r2, [r7, #0]
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d308      	bcc.n	800f860 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6898      	ldr	r0, [r3, #8]
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	683a      	ldr	r2, [r7, #0]
 800f856:	4908      	ldr	r1, [pc, #32]	; (800f878 <_ZN6tflite16MicroInterpreter5inputEj+0x44>)
 800f858:	f7f9 f81c 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800f85c:	2300      	movs	r3, #0
 800f85e:	e006      	b.n	800f86e <_ZN6tflite16MicroInterpreter5inputEj+0x3a>
  }
  return input_tensors_[index];
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	009b      	lsls	r3, r3, #2
 800f86a:	4413      	add	r3, r2
 800f86c:	681b      	ldr	r3, [r3, #0]
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3710      	adds	r7, #16
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}
 800f876:	bf00      	nop
 800f878:	0802978c 	.word	0x0802978c

0800f87c <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f7ff fbe0 	bl	800f04c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800f88c:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800f88e:	683a      	ldr	r2, [r7, #0]
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	429a      	cmp	r2, r3
 800f894:	d308      	bcc.n	800f8a8 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6898      	ldr	r0, [r3, #8]
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	683a      	ldr	r2, [r7, #0]
 800f89e:	4908      	ldr	r1, [pc, #32]	; (800f8c0 <_ZN6tflite16MicroInterpreter6outputEj+0x44>)
 800f8a0:	f7f8 fff8 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	e006      	b.n	800f8b6 <_ZN6tflite16MicroInterpreter6outputEj+0x3a>
  }
  return output_tensors_[index];
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	009b      	lsls	r3, r3, #2
 800f8b2:	4413      	add	r3, r2
 800f8b4:	681b      	ldr	r3, [r3, #0]
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3710      	adds	r7, #16
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	080297b8 	.word	0x080297b8

0800f8c4 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  return graph_.ResetVariableTensors();
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	3368      	adds	r3, #104	; 0x68
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7ff fa03 	bl	800ecdc <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
 800f8d6:	4603      	mov	r3, r0
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3708      	adds	r7, #8
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 800f8ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 800f8f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	330c      	adds	r3, #12
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	6839      	ldr	r1, [r7, #0]
 800f8fe:	4610      	mov	r0, r2
 800f900:	4798      	blx	r3
 800f902:	4603      	mov	r3, r0
}
 800f904:	4618      	mov	r0, r3
 800f906:	3708      	adds	r7, #8
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus MicroInterpreter::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                           size_t bytes,
                                                           int* buffer_idx) {
 800f90c:	b590      	push	{r4, r7, lr}
 800f90e:	b087      	sub	sp, #28
 800f910:	af00      	add	r7, sp, #0
 800f912:	60f8      	str	r0, [r7, #12]
 800f914:	60b9      	str	r1, [r7, #8]
 800f916:	607a      	str	r2, [r7, #4]
  MicroInterpreter* interpreter =
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	68db      	ldr	r3, [r3, #12]
 800f91c:	617b      	str	r3, [r7, #20]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  return interpreter->allocator_.RequestScratchBufferInArena(
 800f91e:	697b      	ldr	r3, [r7, #20]
 800f920:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	3368      	adds	r3, #104	; 0x68
 800f926:	4618      	mov	r0, r3
 800f928:	f7ff fb46 	bl	800efb8 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 800f92c:	4602      	mov	r2, r0
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	68b9      	ldr	r1, [r7, #8]
 800f932:	4620      	mov	r0, r4
 800f934:	f7fd fcfe 	bl	800d334 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 800f938:	4603      	mov	r3, r0
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	371c      	adds	r7, #28
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd90      	pop	{r4, r7, pc}

0800f942 <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 800f942:	b480      	push	{r7}
 800f944:	b085      	sub	sp, #20
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
 800f94a:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	68db      	ldr	r3, [r3, #12]
 800f950:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	009b      	lsls	r3, r3, #2
  ScratchBufferHandle* handle =
 800f95c:	4413      	add	r3, r2
 800f95e:	60bb      	str	r3, [r7, #8]
  return handle->data;
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	681b      	ldr	r3, [r3, #0]
}
 800f964:	4618      	mov	r0, r3
 800f966:	3714      	adds	r7, #20
 800f968:	46bd      	mov	sp, r7
 800f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96e:	4770      	bx	lr

0800f970 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:

void MicroInterpreter::ReportOpError(struct TfLiteContext* context,
                                     const char* format, ...) {
 800f970:	b40e      	push	{r1, r2, r3}
 800f972:	b580      	push	{r7, lr}
 800f974:	b085      	sub	sp, #20
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  MicroInterpreter* interpreter =
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  va_list args;
  va_start(args, format);
 800f980:	f107 0320 	add.w	r3, r7, #32
 800f984:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	6898      	ldr	r0, [r3, #8]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	689b      	ldr	r3, [r3, #8]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	3308      	adds	r3, #8
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	68ba      	ldr	r2, [r7, #8]
 800f996:	69f9      	ldr	r1, [r7, #28]
 800f998:	4798      	blx	r3
  va_end(args);
#endif
}
 800f99a:	bf00      	nop
 800f99c:	3714      	adds	r7, #20
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f9a4:	b003      	add	sp, #12
 800f9a6:	4770      	bx	lr

0800f9a8 <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
 800f9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ac:	b086      	sub	sp, #24
 800f9ae:	af02      	add	r7, sp, #8
 800f9b0:	6078      	str	r0, [r7, #4]
 800f9b2:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	3304      	adds	r3, #4
 800f9c6:	681c      	ldr	r4, [r3, #0]
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681e      	ldr	r6, [r3, #0]
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	3368      	adds	r3, #104	; 0x68
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7ff fafd 	bl	800efd0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f9d6:	4680      	mov	r8, r0
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800f9d8:	68f8      	ldr	r0, [r7, #12]
 800f9da:	f7ff fb69 	bl	800f0b0 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	9300      	str	r3, [sp, #0]
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	4642      	mov	r2, r8
 800f9e6:	4631      	mov	r1, r6
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	47a0      	blx	r4
 800f9ec:	4603      	mov	r3, r0
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3710      	adds	r7, #16
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f9f8 <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 800f9f8:	b590      	push	{r4, r7, lr}
 800f9fa:	b085      	sub	sp, #20
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	68db      	ldr	r3, [r3, #12]
 800fa06:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	3368      	adds	r3, #104	; 0x68
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7ff fadf 	bl	800efd0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800fa12:	4604      	mov	r4, r0
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	f7ff fb4b 	bl	800f0b0 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	00db      	lsls	r3, r3, #3
 800fa1e:	4423      	add	r3, r4
              .tensors[tensor_idx];
 800fa20:	6859      	ldr	r1, [r3, #4]
 800fa22:	683a      	ldr	r2, [r7, #0]
 800fa24:	4613      	mov	r3, r2
 800fa26:	005b      	lsls	r3, r3, #1
 800fa28:	4413      	add	r3, r2
 800fa2a:	009b      	lsls	r3, r3, #2
 800fa2c:	440b      	add	r3, r1
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3714      	adds	r7, #20
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd90      	pop	{r4, r7, pc}

0800fa36 <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
 800fa36:	b480      	push	{r7}
 800fa38:	b085      	sub	sp, #20
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	6078      	str	r0, [r7, #4]
 800fa3e:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	68db      	ldr	r3, [r3, #12]
 800fa44:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800fa50:	2300      	movs	r3, #0
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3714      	adds	r7, #20
 800fa56:	46bd      	mov	sp, r7
 800fa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5c:	4770      	bx	lr

0800fa5e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b082      	sub	sp, #8
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
 800fa66:	460b      	mov	r3, r1
 800fa68:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800fa6a:	887b      	ldrh	r3, [r7, #2]
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f000 f83a 	bl	800fae8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800fa74:	4603      	mov	r3, r0
  }
 800fa76:	4618      	mov	r0, r3
 800fa78:	3708      	adds	r7, #8
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}

0800fa7e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800fa7e:	b580      	push	{r7, lr}
 800fa80:	b082      	sub	sp, #8
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	6078      	str	r0, [r7, #4]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7f9 fd62 	bl	8009554 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800fa90:	4603      	mov	r3, r0
 800fa92:	4618      	mov	r0, r3
 800fa94:	3708      	adds	r7, #8
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
	...

0800fa9c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f7ff ffe9 	bl	800fa7e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800faac:	4602      	mov	r2, r0
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d306      	bcc.n	800fac2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 800fab4:	4b09      	ldr	r3, [pc, #36]	; (800fadc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 800fab6:	4a0a      	ldr	r2, [pc, #40]	; (800fae0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 800fab8:	f44f 7183 	mov.w	r1, #262	; 0x106
 800fabc:	4809      	ldr	r0, [pc, #36]	; (800fae4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 800fabe:	f015 fbdd 	bl	802527c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f000 f844 	bl	800fb50 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 800fac8:	4603      	mov	r3, r0
 800faca:	6839      	ldr	r1, [r7, #0]
 800facc:	4618      	mov	r0, r3
 800face:	f000 f82b 	bl	800fb28 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 800fad2:	4603      	mov	r3, r0
  }
 800fad4:	4618      	mov	r0, r3
 800fad6:	3708      	adds	r7, #8
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}
 800fadc:	080297e4 	.word	0x080297e4
 800fae0:	08029a40 	.word	0x08029a40
 800fae4:	080298c0 	.word	0x080298c0

0800fae8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	460b      	mov	r3, r1
 800faf2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800faf4:	887b      	ldrh	r3, [r7, #2]
 800faf6:	4619      	mov	r1, r3
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f7f8 ff1a 	bl	8008932 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800fafe:	4603      	mov	r3, r0
 800fb00:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800fb02:	687a      	ldr	r2, [r7, #4]
 800fb04:	89fb      	ldrh	r3, [r7, #14]
 800fb06:	4413      	add	r3, r2
 800fb08:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800fb0a:	89fb      	ldrh	r3, [r7, #14]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d006      	beq.n	800fb1e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 800fb10:	68b8      	ldr	r0, [r7, #8]
 800fb12:	f7f9 fd38 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800fb16:	4602      	mov	r2, r0
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	4413      	add	r3, r2
                        : nullptr;
 800fb1c:	e000      	b.n	800fb20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800fb1e:	2300      	movs	r3, #0
  }
 800fb20:	4618      	mov	r0, r3
 800fb22:	3710      	adds	r7, #16
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	009b      	lsls	r3, r3, #2
 800fb36:	687a      	ldr	r2, [r7, #4]
 800fb38:	4413      	add	r3, r2
 800fb3a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7f9 fd22 	bl	8009586 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800fb42:	4602      	mov	r2, r0
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	4413      	add	r3, r2
  }
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 800fb50:	b480      	push	{r7}
 800fb52:	b083      	sub	sp, #12
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	3304      	adds	r3, #4
  }
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	370c      	adds	r7, #12
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr

0800fb68 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 800fb68:	b480      	push	{r7}
 800fb6a:	b087      	sub	sp, #28
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	3b01      	subs	r3, #1
 800fb7a:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 800fb7c:	697a      	ldr	r2, [r7, #20]
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d20e      	bcs.n	800fba2 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	1c5a      	adds	r2, r3, #1
 800fb8e:	617a      	str	r2, [r7, #20]
 800fb90:	693a      	ldr	r2, [r7, #16]
 800fb92:	7812      	ldrb	r2, [r2, #0]
 800fb94:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	1e5a      	subs	r2, r3, #1
 800fb9a:	613a      	str	r2, [r7, #16]
 800fb9c:	7bfa      	ldrb	r2, [r7, #15]
 800fb9e:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 800fba0:	e7ec      	b.n	800fb7c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 800fba2:	687b      	ldr	r3, [r7, #4]
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	371c      	adds	r7, #28
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbae:	4770      	bx	lr

0800fbb0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 800fbb0:	b480      	push	{r7}
 800fbb2:	b087      	sub	sp, #28
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	60b9      	str	r1, [r7, #8]
 800fbba:	607a      	str	r2, [r7, #4]
  char* current = main;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d003      	beq.n	800fbd0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	3301      	adds	r3, #1
 800fbcc:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800fbce:	e7f7      	b.n	800fbc0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	3b01      	subs	r3, #1
 800fbd4:	68fa      	ldr	r2, [r7, #12]
 800fbd6:	4413      	add	r3, r2
 800fbd8:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d00e      	beq.n	800fc00 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 800fbe2:	697a      	ldr	r2, [r7, #20]
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	d20a      	bcs.n	800fc00 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	781a      	ldrb	r2, [r3, #0]
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	701a      	strb	r2, [r3, #0]
    ++current;
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	617b      	str	r3, [r7, #20]
    ++to_append;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 800fbfe:	e7ec      	b.n	800fbda <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	2200      	movs	r2, #0
 800fc04:	701a      	strb	r2, [r3, #0]
  return current;
 800fc06:	697b      	ldr	r3, [r7, #20]
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	371c      	adds	r7, #28
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b088      	sub	sp, #32
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 800fc24:	687a      	ldr	r2, [r7, #4]
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc2c:	fb02 f201 	mul.w	r2, r2, r1
 800fc30:	1a9b      	subs	r3, r3, r2
 800fc32:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	2b09      	cmp	r3, #9
 800fc38:	dc04      	bgt.n	800fc44 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	b2db      	uxtb	r3, r3
 800fc3e:	3330      	adds	r3, #48	; 0x30
 800fc40:	77fb      	strb	r3, [r7, #31]
 800fc42:	e003      	b.n	800fc4c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	3357      	adds	r3, #87	; 0x57
 800fc4a:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	1c5a      	adds	r2, r3, #1
 800fc50:	60ba      	str	r2, [r7, #8]
 800fc52:	7ffa      	ldrb	r2, [r7, #31]
 800fc54:	701a      	strb	r2, [r3, #0]
    i /= base;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	68fa      	ldr	r2, [r7, #12]
 800fc5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc5e:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d000      	beq.n	800fc68 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 800fc66:	e7dd      	b.n	800fc24 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 800fc6e:	68b9      	ldr	r1, [r7, #8]
 800fc70:	69b8      	ldr	r0, [r7, #24]
 800fc72:	f7ff ff79 	bl	800fb68 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 800fc76:	68bb      	ldr	r3, [r7, #8]
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3720      	adds	r7, #32
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b084      	sub	sp, #16
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	da07      	bge.n	800fca4 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	1c5a      	adds	r2, r3, #1
 800fc98:	603a      	str	r2, [r7, #0]
 800fc9a:	222d      	movs	r2, #45	; 0x2d
 800fc9c:	701a      	strb	r2, [r3, #0]
    u = -u;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	425b      	negs	r3, r3
 800fca2:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 800fca4:	220a      	movs	r2, #10
 800fca6:	6839      	ldr	r1, [r7, #0]
 800fca8:	68f8      	ldr	r0, [r7, #12]
 800fcaa:	f7ff ffb3 	bl	800fc14 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800fcae:	4603      	mov	r3, r0
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3710      	adds	r7, #16
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b090      	sub	sp, #64	; 0x40
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	60f8      	str	r0, [r7, #12]
 800fcc0:	60b9      	str	r1, [r7, #8]
 800fcc2:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 800fcc4:	f107 0310 	add.w	r3, r7, #16
 800fcc8:	4619      	mov	r1, r3
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f7ff ffd8 	bl	800fc80 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 800fcd0:	f107 0310 	add.w	r3, r7, #16
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	68b9      	ldr	r1, [r7, #8]
 800fcd8:	68f8      	ldr	r0, [r7, #12]
 800fcda:	f7ff ff69 	bl	800fbb0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800fcde:	4603      	mov	r3, r0
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3740      	adds	r7, #64	; 0x40
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b090      	sub	sp, #64	; 0x40
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	607a      	str	r2, [r7, #4]
 800fcf4:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 800fcf6:	f107 0310 	add.w	r3, r7, #16
 800fcfa:	683a      	ldr	r2, [r7, #0]
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f7ff ff88 	bl	800fc14 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 800fd04:	f107 0310 	add.w	r3, r7, #16
 800fd08:	461a      	mov	r2, r3
 800fd0a:	68b9      	ldr	r1, [r7, #8]
 800fd0c:	68f8      	ldr	r0, [r7, #12]
 800fd0e:	f7ff ff4f 	bl	800fbb0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800fd12:	4603      	mov	r3, r0
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3740      	adds	r7, #64	; 0x40
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}

0800fd1c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 800fd1c:	b590      	push	{r4, r7, lr}
 800fd1e:	b09b      	sub	sp, #108	; 0x6c
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	ed87 0a01 	vstr	s0, [r7, #4]
 800fd26:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	332f      	adds	r3, #47	; 0x2f
 800fd30:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 800fd32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fd36:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 800fd38:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800fd3c:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 800fd3e:	2317      	movs	r3, #23
 800fd40:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 800fd42:	237f      	movs	r3, #127	; 0x7f
 800fd44:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 800fd46:	4b6a      	ldr	r3, [pc, #424]	; (800fef0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 800fd48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd4a:	687b      	ldr	r3, [r7, #4]
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 800fd4c:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 800fd4e:	69fb      	ldr	r3, [r7, #28]
 800fd50:	0ddb      	lsrs	r3, r3, #23
 800fd52:	b2db      	uxtb	r3, r3
 800fd54:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 800fd56:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 800fd58:	69fb      	ldr	r3, [r7, #28]
 800fd5a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fd5e:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 800fd60:	69fb      	ldr	r3, [r7, #28]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	da05      	bge.n	800fd72 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 800fd66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd68:	222d      	movs	r2, #45	; 0x2d
 800fd6a:	701a      	strb	r2, [r3, #0]
    current += 1;
 800fd6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd6e:	3301      	adds	r3, #1
 800fd70:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 800fd72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd74:	2200      	movs	r2, #0
 800fd76:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 800fd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7a:	2b80      	cmp	r3, #128	; 0x80
 800fd7c:	d118      	bne.n	800fdb0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 800fd7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d10a      	bne.n	800fd9a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 800fd84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fd86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd88:	1ad3      	subs	r3, r2, r3
 800fd8a:	4a5a      	ldr	r2, [pc, #360]	; (800fef4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 800fd8c:	4619      	mov	r1, r3
 800fd8e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fd90:	f7ff ff0e 	bl	800fbb0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800fd94:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800fd96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd98:	e0a5      	b.n	800fee6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 800fd9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fd9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd9e:	1ad3      	subs	r3, r2, r3
 800fda0:	4a55      	ldr	r2, [pc, #340]	; (800fef8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 800fda2:	4619      	mov	r1, r3
 800fda4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fda6:	f7ff ff03 	bl	800fbb0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800fdaa:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800fdac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdae:	e09a      	b.n	800fee6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 800fdb0:	230d      	movs	r3, #13
 800fdb2:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 800fdb4:	4b51      	ldr	r3, [pc, #324]	; (800fefc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 800fdb6:	f107 040c 	add.w	r4, r7, #12
 800fdba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdbc:	c407      	stmia	r4!, {r0, r1, r2}
 800fdbe:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 800fdc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdc2:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fdc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdca:	2b0c      	cmp	r3, #12
 800fdcc:	dc0f      	bgt.n	800fdee <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 800fdce:	f107 020c 	add.w	r2, r7, #12
 800fdd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdd4:	4413      	add	r3, r2
 800fdd6:	f993 3000 	ldrsb.w	r3, [r3]
 800fdda:	461a      	mov	r2, r3
 800fddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdde:	40d3      	lsrs	r3, r2
 800fde0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fde2:	4413      	add	r3, r2
 800fde4:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800fde6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fde8:	3301      	adds	r3, #1
 800fdea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fdec:	e7ec      	b.n	800fdc8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 800fdee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdf0:	2231      	movs	r2, #49	; 0x31
 800fdf2:	701a      	strb	r2, [r3, #0]
  current += 1;
 800fdf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 800fdfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdfc:	222e      	movs	r2, #46	; 0x2e
 800fdfe:	701a      	strb	r2, [r3, #0]
  current += 1;
 800fe00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe02:	3301      	adds	r3, #1
 800fe04:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 800fe06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe08:	2200      	movs	r2, #0
 800fe0a:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 800fe0c:	2307      	movs	r3, #7
 800fe0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 800fe10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe14:	1ad3      	subs	r3, r2, r3
 800fe16:	2b07      	cmp	r3, #7
 800fe18:	dc01      	bgt.n	800fe1e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 800fe1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe1c:	e063      	b.n	800fee6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800fe1e:	2301      	movs	r3, #1
 800fe20:	65bb      	str	r3, [r7, #88]	; 0x58
 800fe22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe24:	2b06      	cmp	r3, #6
 800fe26:	dc08      	bgt.n	800fe3a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 800fe28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fe2c:	4413      	add	r3, r2
 800fe2e:	2230      	movs	r2, #48	; 0x30
 800fe30:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800fe32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe34:	3301      	adds	r3, #1
 800fe36:	65bb      	str	r3, [r7, #88]	; 0x58
 800fe38:	e7f3      	b.n	800fe22 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 800fe3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe3c:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 800fe3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe42:	1ad1      	subs	r1, r2, r3
 800fe44:	230a      	movs	r3, #10
 800fe46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fe48:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fe4a:	f7ff ff4d 	bl	800fce8 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 800fe4e:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 800fe50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fe52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe54:	1ad3      	subs	r3, r2, r3
 800fe56:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 800fe58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5a:	f1c3 0307 	rsb	r3, r3, #7
 800fe5e:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 800fe60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe62:	2230      	movs	r2, #48	; 0x30
 800fe64:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 800fe66:	6a3b      	ldr	r3, [r7, #32]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d018      	beq.n	800fe9e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	657b      	str	r3, [r7, #84]	; 0x54
 800fe70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fe72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe74:	429a      	cmp	r2, r3
 800fe76:	da0f      	bge.n	800fe98 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 800fe78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe7a:	3b01      	subs	r3, #1
 800fe7c:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 800fe7e:	6a3b      	ldr	r3, [r7, #32]
 800fe80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fe82:	4413      	add	r3, r2
 800fe84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fe86:	7812      	ldrb	r2, [r2, #0]
 800fe88:	701a      	strb	r2, [r3, #0]
      *current = '0';
 800fe8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe8c:	2230      	movs	r2, #48	; 0x30
 800fe8e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 800fe90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe92:	3301      	adds	r3, #1
 800fe94:	657b      	str	r3, [r7, #84]	; 0x54
 800fe96:	e7eb      	b.n	800fe70 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 800fe98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe9a:	3307      	adds	r3, #7
 800fe9c:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800fe9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fea0:	3b01      	subs	r3, #1
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	2b30      	cmp	r3, #48	; 0x30
 800fea6:	d108      	bne.n	800feba <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 800fea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800feaa:	3b01      	subs	r3, #1
 800feac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800feae:	429a      	cmp	r2, r3
 800feb0:	d203      	bcs.n	800feba <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 800feb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800feb4:	3b01      	subs	r3, #1
 800feb6:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800feb8:	e7f1      	b.n	800fe9e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 800feba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800febc:	2200      	movs	r2, #0
 800febe:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 800fec0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fec4:	1ad3      	subs	r3, r2, r3
 800fec6:	4a0e      	ldr	r2, [pc, #56]	; (800ff00 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 800fec8:	4619      	mov	r1, r3
 800feca:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fecc:	f7ff fe70 	bl	800fbb0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800fed0:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 800fed2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fed6:	1ad3      	subs	r3, r2, r3
 800fed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800feda:	4619      	mov	r1, r3
 800fedc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fede:	f7ff feeb 	bl	800fcb8 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 800fee2:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 800fee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	376c      	adds	r7, #108	; 0x6c
 800feea:	46bd      	mov	sp, r7
 800feec:	bd90      	pop	{r4, r7, pc}
 800feee:	bf00      	nop
 800fef0:	007fffff 	.word	0x007fffff
 800fef4:	08029c40 	.word	0x08029c40
 800fef8:	08029c44 	.word	0x08029c44
 800fefc:	08029c4c 	.word	0x08029c4c
 800ff00:	08029c48 	.word	0x08029c48

0800ff04 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 800ff0e:	6879      	ldr	r1, [r7, #4]
 800ff10:	6838      	ldr	r0, [r7, #0]
 800ff12:	f7ff feb5 	bl	800fc80 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 800ff16:	4602      	mov	r2, r0
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	1ad3      	subs	r3, r2, r3
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3708      	adds	r7, #8
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800ff2e:	220a      	movs	r2, #10
 800ff30:	6879      	ldr	r1, [r7, #4]
 800ff32:	6838      	ldr	r0, [r7, #0]
 800ff34:	f7ff fe6e 	bl	800fc14 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800ff38:	4602      	mov	r2, r0
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	1ad3      	subs	r3, r2, r3
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3708      	adds	r7, #8
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}

0800ff46 <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 800ff46:	b580      	push	{r7, lr}
 800ff48:	b082      	sub	sp, #8
 800ff4a:	af00      	add	r7, sp, #0
 800ff4c:	6078      	str	r0, [r7, #4]
 800ff4e:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 800ff50:	2210      	movs	r2, #16
 800ff52:	6879      	ldr	r1, [r7, #4]
 800ff54:	6838      	ldr	r0, [r7, #0]
 800ff56:	f7ff fe5d 	bl	800fc14 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	1ad3      	subs	r3, r2, r3
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	3708      	adds	r7, #8
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}

0800ff68 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	ed97 0a00 	vldr	s0, [r7]
 800ff7a:	f7ff fecf 	bl	800fd1c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 800ff7e:	4602      	mov	r2, r0
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	1ad3      	subs	r3, r2, r3
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3708      	adds	r7, #8
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 800ff8c:	b590      	push	{r4, r7, lr}
 800ff8e:	b08b      	sub	sp, #44	; 0x2c
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	60b9      	str	r1, [r7, #8]
 800ff96:	607a      	str	r2, [r7, #4]
 800ff98:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	3b01      	subs	r3, #1
 800ffa6:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 800ffa8:	6a3b      	ldr	r3, [r7, #32]
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	f000 8151 	beq.w	8010254 <MicroVsnprintf+0x2c8>
 800ffb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffb4:	69bb      	ldr	r3, [r7, #24]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	f280 814c 	bge.w	8010254 <MicroVsnprintf+0x2c8>
    if (*current == '%') {
 800ffbc:	6a3b      	ldr	r3, [r7, #32]
 800ffbe:	781b      	ldrb	r3, [r3, #0]
 800ffc0:	2b25      	cmp	r3, #37	; 0x25
 800ffc2:	f040 813b 	bne.w	801023c <MicroVsnprintf+0x2b0>
      current++;
 800ffc6:	6a3b      	ldr	r3, [r7, #32]
 800ffc8:	3301      	adds	r3, #1
 800ffca:	623b      	str	r3, [r7, #32]
      switch (*current) {
 800ffcc:	6a3b      	ldr	r3, [r7, #32]
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	2b25      	cmp	r3, #37	; 0x25
 800ffd2:	f000 80e2 	beq.w	801019a <MicroVsnprintf+0x20e>
 800ffd6:	2b25      	cmp	r3, #37	; 0x25
 800ffd8:	dbe6      	blt.n	800ffa8 <MicroVsnprintf+0x1c>
 800ffda:	2b78      	cmp	r3, #120	; 0x78
 800ffdc:	dce4      	bgt.n	800ffa8 <MicroVsnprintf+0x1c>
 800ffde:	2b63      	cmp	r3, #99	; 0x63
 800ffe0:	dbe2      	blt.n	800ffa8 <MicroVsnprintf+0x1c>
 800ffe2:	3b63      	subs	r3, #99	; 0x63
 800ffe4:	2b15      	cmp	r3, #21
 800ffe6:	d8df      	bhi.n	800ffa8 <MicroVsnprintf+0x1c>
 800ffe8:	a201      	add	r2, pc, #4	; (adr r2, 800fff0 <MicroVsnprintf+0x64>)
 800ffea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffee:	bf00      	nop
 800fff0:	080101b3 	.word	0x080101b3
 800fff4:	08010049 	.word	0x08010049
 800fff8:	0800ffa9 	.word	0x0800ffa9
 800fffc:	0801012f 	.word	0x0801012f
 8010000:	0800ffa9 	.word	0x0800ffa9
 8010004:	0800ffa9 	.word	0x0800ffa9
 8010008:	0800ffa9 	.word	0x0800ffa9
 801000c:	0800ffa9 	.word	0x0800ffa9
 8010010:	0800ffa9 	.word	0x0800ffa9
 8010014:	0800ffa9 	.word	0x0800ffa9
 8010018:	0800ffa9 	.word	0x0800ffa9
 801001c:	0800ffa9 	.word	0x0800ffa9
 8010020:	0800ffa9 	.word	0x0800ffa9
 8010024:	0800ffa9 	.word	0x0800ffa9
 8010028:	0800ffa9 	.word	0x0800ffa9
 801002c:	0800ffa9 	.word	0x0800ffa9
 8010030:	080101f1 	.word	0x080101f1
 8010034:	0800ffa9 	.word	0x0800ffa9
 8010038:	0801008b 	.word	0x0801008b
 801003c:	0800ffa9 	.word	0x0800ffa9
 8010040:	0800ffa9 	.word	0x0800ffa9
 8010044:	080100cd 	.word	0x080100cd
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 8010048:	69ba      	ldr	r2, [r7, #24]
 801004a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004c:	1ad3      	subs	r3, r2, r3
 801004e:	2b0a      	cmp	r3, #10
 8010050:	dc09      	bgt.n	8010066 <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
 8010052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010054:	1c5a      	adds	r2, r3, #1
 8010056:	627a      	str	r2, [r7, #36]	; 0x24
 8010058:	461a      	mov	r2, r3
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	4413      	add	r3, r2
 801005e:	2200      	movs	r2, #0
 8010060:	701a      	strb	r2, [r3, #0]
            return output_index;
 8010062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010064:	e0ff      	b.n	8010266 <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 8010066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010068:	68fa      	ldr	r2, [r7, #12]
 801006a:	18d0      	adds	r0, r2, r3
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	1d1a      	adds	r2, r3, #4
 8010070:	603a      	str	r2, [r7, #0]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	4619      	mov	r1, r3
 8010076:	f7ff ff45 	bl	800ff04 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 801007a:	4602      	mov	r2, r0
          output_index +=
 801007c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007e:	4413      	add	r3, r2
 8010080:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8010082:	6a3b      	ldr	r3, [r7, #32]
 8010084:	3301      	adds	r3, #1
 8010086:	623b      	str	r3, [r7, #32]
          break;
 8010088:	e0e3      	b.n	8010252 <MicroVsnprintf+0x2c6>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 801008a:	69ba      	ldr	r2, [r7, #24]
 801008c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801008e:	1ad3      	subs	r3, r2, r3
 8010090:	2b0a      	cmp	r3, #10
 8010092:	dc09      	bgt.n	80100a8 <MicroVsnprintf+0x11c>
            output[output_index++] = '\0';
 8010094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010096:	1c5a      	adds	r2, r3, #1
 8010098:	627a      	str	r2, [r7, #36]	; 0x24
 801009a:	461a      	mov	r2, r3
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	4413      	add	r3, r2
 80100a0:	2200      	movs	r2, #0
 80100a2:	701a      	strb	r2, [r3, #0]
            return output_index;
 80100a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a6:	e0de      	b.n	8010266 <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 80100a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100aa:	68fa      	ldr	r2, [r7, #12]
 80100ac:	18d0      	adds	r0, r2, r3
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	1d1a      	adds	r2, r3, #4
 80100b2:	603a      	str	r2, [r7, #0]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	4619      	mov	r1, r3
 80100b8:	f7ff ff34 	bl	800ff24 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 80100bc:	4602      	mov	r2, r0
          output_index +=
 80100be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c0:	4413      	add	r3, r2
 80100c2:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80100c4:	6a3b      	ldr	r3, [r7, #32]
 80100c6:	3301      	adds	r3, #1
 80100c8:	623b      	str	r3, [r7, #32]
          break;
 80100ca:	e0c2      	b.n	8010252 <MicroVsnprintf+0x2c6>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 80100cc:	69ba      	ldr	r2, [r7, #24]
 80100ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d0:	1ad3      	subs	r3, r2, r3
 80100d2:	2b09      	cmp	r3, #9
 80100d4:	dc09      	bgt.n	80100ea <MicroVsnprintf+0x15e>
            output[output_index++] = '\0';
 80100d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d8:	1c5a      	adds	r2, r3, #1
 80100da:	627a      	str	r2, [r7, #36]	; 0x24
 80100dc:	461a      	mov	r2, r3
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	4413      	add	r3, r2
 80100e2:	2200      	movs	r2, #0
 80100e4:	701a      	strb	r2, [r3, #0]
            return output_index;
 80100e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e8:	e0bd      	b.n	8010266 <MicroVsnprintf+0x2da>
          }
          output[output_index++] = '0';
 80100ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ec:	1c5a      	adds	r2, r3, #1
 80100ee:	627a      	str	r2, [r7, #36]	; 0x24
 80100f0:	461a      	mov	r2, r3
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	4413      	add	r3, r2
 80100f6:	2230      	movs	r2, #48	; 0x30
 80100f8:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 80100fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fc:	1c5a      	adds	r2, r3, #1
 80100fe:	627a      	str	r2, [r7, #36]	; 0x24
 8010100:	461a      	mov	r2, r3
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	4413      	add	r3, r2
 8010106:	2278      	movs	r2, #120	; 0x78
 8010108:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 801010a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010c:	68fa      	ldr	r2, [r7, #12]
 801010e:	18d0      	adds	r0, r2, r3
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	1d1a      	adds	r2, r3, #4
 8010114:	603a      	str	r2, [r7, #0]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	4619      	mov	r1, r3
 801011a:	f7ff ff14 	bl	800ff46 <_ZN12_GLOBAL__N_19FormatHexEPcm>
 801011e:	4602      	mov	r2, r0
          output_index +=
 8010120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010122:	4413      	add	r3, r2
 8010124:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8010126:	6a3b      	ldr	r3, [r7, #32]
 8010128:	3301      	adds	r3, #1
 801012a:	623b      	str	r3, [r7, #32]
          break;
 801012c:	e091      	b.n	8010252 <MicroVsnprintf+0x2c6>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 801012e:	69ba      	ldr	r2, [r7, #24]
 8010130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010132:	1ad3      	subs	r3, r2, r3
 8010134:	ee07 3a90 	vmov	s15, r3
 8010138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801013c:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8010140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010148:	d509      	bpl.n	801015e <MicroVsnprintf+0x1d2>
            output[output_index++] = '\0';
 801014a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014c:	1c5a      	adds	r2, r3, #1
 801014e:	627a      	str	r2, [r7, #36]	; 0x24
 8010150:	461a      	mov	r2, r3
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	4413      	add	r3, r2
 8010156:	2200      	movs	r2, #0
 8010158:	701a      	strb	r2, [r3, #0]
            return output_index;
 801015a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015c:	e083      	b.n	8010266 <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 801015e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010160:	68fa      	ldr	r2, [r7, #12]
 8010162:	18d4      	adds	r4, r2, r3
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	3307      	adds	r3, #7
 8010168:	f023 0307 	bic.w	r3, r3, #7
 801016c:	f103 0208 	add.w	r2, r3, #8
 8010170:	603a      	str	r2, [r7, #0]
 8010172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010176:	4610      	mov	r0, r2
 8010178:	4619      	mov	r1, r3
 801017a:	f7f0 fd31 	bl	8000be0 <__aeabi_d2f>
 801017e:	4603      	mov	r3, r0
 8010180:	ee00 3a10 	vmov	s0, r3
 8010184:	4620      	mov	r0, r4
 8010186:	f7ff feef 	bl	800ff68 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 801018a:	4602      	mov	r2, r0
          output_index +=
 801018c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801018e:	4413      	add	r3, r2
 8010190:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8010192:	6a3b      	ldr	r3, [r7, #32]
 8010194:	3301      	adds	r3, #1
 8010196:	623b      	str	r3, [r7, #32]
          break;
 8010198:	e05b      	b.n	8010252 <MicroVsnprintf+0x2c6>
        case '%':
          output[output_index++] = *current++;
 801019a:	6a3b      	ldr	r3, [r7, #32]
 801019c:	1c5a      	adds	r2, r3, #1
 801019e:	623a      	str	r2, [r7, #32]
 80101a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101a2:	1c51      	adds	r1, r2, #1
 80101a4:	6279      	str	r1, [r7, #36]	; 0x24
 80101a6:	4611      	mov	r1, r2
 80101a8:	68fa      	ldr	r2, [r7, #12]
 80101aa:	440a      	add	r2, r1
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	7013      	strb	r3, [r2, #0]
          break;
 80101b0:	e04f      	b.n	8010252 <MicroVsnprintf+0x2c6>
        case 'c':
          if (usable_length - output_index < 1) {
 80101b2:	69ba      	ldr	r2, [r7, #24]
 80101b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b6:	1ad3      	subs	r3, r2, r3
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	dc09      	bgt.n	80101d0 <MicroVsnprintf+0x244>
            output[output_index++] = '\0';
 80101bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101be:	1c5a      	adds	r2, r3, #1
 80101c0:	627a      	str	r2, [r7, #36]	; 0x24
 80101c2:	461a      	mov	r2, r3
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	4413      	add	r3, r2
 80101c8:	2200      	movs	r2, #0
 80101ca:	701a      	strb	r2, [r3, #0]
            return output_index;
 80101cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ce:	e04a      	b.n	8010266 <MicroVsnprintf+0x2da>
          }
          output[output_index++] = va_arg(args, int32_t);
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	1d1a      	adds	r2, r3, #4
 80101d4:	603a      	str	r2, [r7, #0]
 80101d6:	6819      	ldr	r1, [r3, #0]
 80101d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101da:	1c5a      	adds	r2, r3, #1
 80101dc:	627a      	str	r2, [r7, #36]	; 0x24
 80101de:	461a      	mov	r2, r3
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	4413      	add	r3, r2
 80101e4:	b2ca      	uxtb	r2, r1
 80101e6:	701a      	strb	r2, [r3, #0]
          current++;
 80101e8:	6a3b      	ldr	r3, [r7, #32]
 80101ea:	3301      	adds	r3, #1
 80101ec:	623b      	str	r3, [r7, #32]
          break;
 80101ee:	e030      	b.n	8010252 <MicroVsnprintf+0x2c6>
        case 's':
          char* string = va_arg(args, char*);
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	1d1a      	adds	r2, r3, #4
 80101f4:	603a      	str	r2, [r7, #0]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 80101fa:	2300      	movs	r3, #0
 80101fc:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 80101fe:	69fa      	ldr	r2, [r7, #28]
 8010200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010202:	4413      	add	r3, r2
 8010204:	69ba      	ldr	r2, [r7, #24]
 8010206:	429a      	cmp	r2, r3
 8010208:	dd14      	ble.n	8010234 <MicroVsnprintf+0x2a8>
                 string[string_idx] != '\0') {
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	697a      	ldr	r2, [r7, #20]
 801020e:	4413      	add	r3, r2
 8010210:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 8010212:	2b00      	cmp	r3, #0
 8010214:	d00e      	beq.n	8010234 <MicroVsnprintf+0x2a8>
            output[output_index++] = string[string_idx++];
 8010216:	69fb      	ldr	r3, [r7, #28]
 8010218:	1c5a      	adds	r2, r3, #1
 801021a:	61fa      	str	r2, [r7, #28]
 801021c:	461a      	mov	r2, r3
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	441a      	add	r2, r3
 8010222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010224:	1c59      	adds	r1, r3, #1
 8010226:	6279      	str	r1, [r7, #36]	; 0x24
 8010228:	4619      	mov	r1, r3
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	440b      	add	r3, r1
 801022e:	7812      	ldrb	r2, [r2, #0]
 8010230:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 8010232:	e7e4      	b.n	80101fe <MicroVsnprintf+0x272>
          }
          current++;
 8010234:	6a3b      	ldr	r3, [r7, #32]
 8010236:	3301      	adds	r3, #1
 8010238:	623b      	str	r3, [r7, #32]
 801023a:	e6b5      	b.n	800ffa8 <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 801023c:	6a3b      	ldr	r3, [r7, #32]
 801023e:	1c5a      	adds	r2, r3, #1
 8010240:	623a      	str	r2, [r7, #32]
 8010242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010244:	1c51      	adds	r1, r2, #1
 8010246:	6279      	str	r1, [r7, #36]	; 0x24
 8010248:	4611      	mov	r1, r2
 801024a:	68fa      	ldr	r2, [r7, #12]
 801024c:	440a      	add	r2, r1
 801024e:	781b      	ldrb	r3, [r3, #0]
 8010250:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 8010252:	e6a9      	b.n	800ffa8 <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 8010254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010256:	1c5a      	adds	r2, r3, #1
 8010258:	627a      	str	r2, [r7, #36]	; 0x24
 801025a:	461a      	mov	r2, r3
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	4413      	add	r3, r2
 8010260:	2200      	movs	r2, #0
 8010262:	701a      	strb	r2, [r3, #0]
  return output_index;
 8010264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010266:	4618      	mov	r0, r3
 8010268:	372c      	adds	r7, #44	; 0x2c
 801026a:	46bd      	mov	sp, r7
 801026c:	bd90      	pop	{r4, r7, pc}
 801026e:	bf00      	nop

08010270 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/kernels/op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 8010270:	b480      	push	{r7}
 8010272:	b085      	sub	sp, #20
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
  int result = 1;
 8010278:	2301      	movs	r3, #1
 801027a:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 801027c:	2300      	movs	r3, #0
 801027e:	60bb      	str	r3, [r7, #8]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	68ba      	ldr	r2, [r7, #8]
 8010286:	429a      	cmp	r2, r3
 8010288:	da0c      	bge.n	80102a4 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 801028a:	687a      	ldr	r2, [r7, #4]
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	009b      	lsls	r3, r3, #2
 8010290:	4413      	add	r3, r2
 8010292:	685a      	ldr	r2, [r3, #4]
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	fb02 f303 	mul.w	r3, r2, r3
 801029a:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	3301      	adds	r3, #1
 80102a0:	60bb      	str	r3, [r7, #8]
 80102a2:	e7ed      	b.n	8010280 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 80102a4:	68fb      	ldr	r3, [r7, #12]
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	3714      	adds	r7, #20
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr
	...

080102b4 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 80102b4:	b480      	push	{r7}
 80102b6:	b083      	sub	sp, #12
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	6039      	str	r1, [r7, #0]
 80102be:	4a11      	ldr	r2, [pc, #68]	; (8010304 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	601a      	str	r2, [r3, #0]
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	685a      	ldr	r2, [r3, #4]
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	605a      	str	r2, [r3, #4]
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	689a      	ldr	r2, [r3, #8]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	609a      	str	r2, [r3, #8]
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	68da      	ldr	r2, [r3, #12]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	60da      	str	r2, [r3, #12]
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	691a      	ldr	r2, [r3, #16]
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	611a      	str	r2, [r3, #16]
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	695a      	ldr	r2, [r3, #20]
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	615a      	str	r2, [r3, #20]
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	699a      	ldr	r2, [r3, #24]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	619a      	str	r2, [r3, #24]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	4618      	mov	r0, r3
 80102f8:	370c      	adds	r7, #12
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr
 8010302:	bf00      	nop
 8010304:	0802c568 	.word	0x0802c568

08010308 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8010308:	b480      	push	{r7}
 801030a:	b085      	sub	sp, #20
 801030c:	af00      	add	r7, sp, #0
 801030e:	60f8      	str	r0, [r7, #12]
 8010310:	60b9      	str	r1, [r7, #8]
 8010312:	607a      	str	r2, [r7, #4]
 8010314:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 8010316:	4a0e      	ldr	r2, [pc, #56]	; (8010350 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	601a      	str	r2, [r3, #0]
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	605a      	str	r2, [r3, #4]
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	609a      	str	r2, [r3, #8]
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	683a      	ldr	r2, [r7, #0]
 801032c:	60da      	str	r2, [r3, #12]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	687a      	ldr	r2, [r7, #4]
 8010332:	611a      	str	r2, [r3, #16]
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	683a      	ldr	r2, [r7, #0]
 8010338:	615a      	str	r2, [r3, #20]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	689a      	ldr	r2, [r3, #8]
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	619a      	str	r2, [r3, #24]
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	4618      	mov	r0, r3
 8010346:	3714      	adds	r7, #20
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr
 8010350:	0802c568 	.word	0x0802c568

08010354 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8010354:	b580      	push	{r7, lr}
 8010356:	b084      	sub	sp, #16
 8010358:	af00      	add	r7, sp, #0
 801035a:	60f8      	str	r0, [r7, #12]
 801035c:	60b9      	str	r1, [r7, #8]
 801035e:	607a      	str	r2, [r7, #4]
 8010360:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 8010362:	687a      	ldr	r2, [r7, #4]
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	4413      	add	r3, r2
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	68b9      	ldr	r1, [r7, #8]
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f7ff ffcb 	bl	8010308 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	4618      	mov	r0, r3
 8010376:	3710      	adds	r7, #16
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 801037c:	b590      	push	{r4, r7, lr}
 801037e:	b08d      	sub	sp, #52	; 0x34
 8010380:	af00      	add	r7, sp, #0
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	60b9      	str	r1, [r7, #8]
 8010386:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d101      	bne.n	8010392 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 801038e:	f014 ff6e 	bl	802526e <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d101      	bne.n	801039c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 8010398:	f014 ff69 	bl	802526e <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 801039c:	f107 0010 	add.w	r0, r7, #16
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	68ba      	ldr	r2, [r7, #8]
 80103a4:	68f9      	ldr	r1, [r7, #12]
 80103a6:	f7ff ffd5 	bl	8010354 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 80103aa:	f107 0310 	add.w	r3, r7, #16
 80103ae:	2204      	movs	r2, #4
 80103b0:	211c      	movs	r1, #28
 80103b2:	4618      	mov	r0, r3
 80103b4:	f000 f87c 	bl	80104b0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 80103b8:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 80103ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103bc:	4619      	mov	r1, r3
 80103be:	201c      	movs	r0, #28
 80103c0:	f7f8 fa9b 	bl	80088fa <_ZnwjPv>
 80103c4:	4604      	mov	r4, r0
 80103c6:	f107 0310 	add.w	r3, r7, #16
 80103ca:	4619      	mov	r1, r3
 80103cc:	4620      	mov	r0, r4
 80103ce:	f7ff ff71 	bl	80102b4 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 80103d2:	f107 0310 	add.w	r3, r7, #16
 80103d6:	4618      	mov	r0, r3
 80103d8:	f000 f806 	bl	80103e8 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 80103dc:	4623      	mov	r3, r4
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3734      	adds	r7, #52	; 0x34
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd90      	pop	{r4, r7, pc}
	...

080103e8 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 80103e8:	b480      	push	{r7}
 80103ea:	b083      	sub	sp, #12
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	4a04      	ldr	r2, [pc, #16]	; (8010404 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	601a      	str	r2, [r3, #0]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	4618      	mov	r0, r3
 80103fa:	370c      	adds	r7, #12
 80103fc:	46bd      	mov	sp, r7
 80103fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010402:	4770      	bx	lr
 8010404:	0802c568 	.word	0x0802c568

08010408 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 8010408:	b580      	push	{r7, lr}
 801040a:	b082      	sub	sp, #8
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f7ff ffe9 	bl	80103e8 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 8010416:	211c      	movs	r1, #28
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f014 fca2 	bl	8024d62 <_ZdlPvj>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	4618      	mov	r0, r3
 8010422:	3708      	adds	r7, #8
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 8010428:	b580      	push	{r7, lr}
 801042a:	b088      	sub	sp, #32
 801042c:	af02      	add	r7, sp, #8
 801042e:	60f8      	str	r0, [r7, #12]
 8010430:	60b9      	str	r1, [r7, #8]
 8010432:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	691a      	ldr	r2, [r3, #16]
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	699b      	ldr	r3, [r3, #24]
 801043c:	429a      	cmp	r2, r3
 801043e:	d007      	beq.n	8010450 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	4918      	ldr	r1, [pc, #96]	; (80104a8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 8010446:	4618      	mov	r0, r3
 8010448:	f7f8 fa24 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 801044c:	2301      	movs	r3, #1
 801044e:	e026      	b.n	801049e <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	689b      	ldr	r3, [r3, #8]
 8010454:	6879      	ldr	r1, [r7, #4]
 8010456:	4618      	mov	r0, r3
 8010458:	f7fb fe47 	bl	800c0ea <_ZN6tflite14AlignPointerUpEPhj>
 801045c:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	695a      	ldr	r2, [r3, #20]
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	1ad3      	subs	r3, r2, r3
 8010466:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 8010468:	693a      	ldr	r2, [r7, #16]
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	429a      	cmp	r2, r3
 801046e:	d20c      	bcs.n	801048a <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x62>
    TF_LITE_REPORT_ERROR(
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	6858      	ldr	r0, [r3, #4]
 8010474:	68ba      	ldr	r2, [r7, #8]
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	1ad3      	subs	r3, r2, r3
 801047a:	9300      	str	r3, [sp, #0]
 801047c:	693b      	ldr	r3, [r7, #16]
 801047e:	68ba      	ldr	r2, [r7, #8]
 8010480:	490a      	ldr	r1, [pc, #40]	; (80104ac <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 8010482:	f7f8 fa07 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 8010486:	2301      	movs	r3, #1
 8010488:	e009      	b.n	801049e <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }
  head_ = aligned_result + size;
 801048a:	697a      	ldr	r2, [r7, #20]
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	441a      	add	r2, r3
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	691a      	ldr	r2, [r3, #16]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 801049c:	2300      	movs	r3, #0
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3718      	adds	r7, #24
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	08029c70 	.word	0x08029c70
 80104ac:	08029cc8 	.word	0x08029cc8

080104b0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b088      	sub	sp, #32
 80104b4:	af02      	add	r7, sp, #8
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	60b9      	str	r1, [r7, #8]
 80104ba:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	695a      	ldr	r2, [r3, #20]
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	425b      	negs	r3, r3
 80104c4:	4413      	add	r3, r2
 80104c6:	6879      	ldr	r1, [r7, #4]
 80104c8:	4618      	mov	r0, r3
 80104ca:	f7fb fe27 	bl	800c11c <_ZN6tflite16AlignPointerDownEPhj>
 80104ce:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	691b      	ldr	r3, [r3, #16]
 80104d4:	697a      	ldr	r2, [r7, #20]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d212      	bcs.n	8010500 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	691a      	ldr	r2, [r3, #16]
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	1ad3      	subs	r3, r2, r3
 80104e2:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	6858      	ldr	r0, [r3, #4]
 80104e8:	68ba      	ldr	r2, [r7, #8]
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	1ad2      	subs	r2, r2, r3
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	9300      	str	r3, [sp, #0]
 80104f2:	4613      	mov	r3, r2
 80104f4:	68ba      	ldr	r2, [r7, #8]
 80104f6:	4906      	ldr	r1, [pc, #24]	; (8010510 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 80104f8:	f7f8 f9cc 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 80104fc:	2300      	movs	r3, #0
 80104fe:	e003      	b.n	8010508 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	697a      	ldr	r2, [r7, #20]
 8010504:	615a      	str	r2, [r3, #20]
  return aligned_result;
 8010506:	697b      	ldr	r3, [r7, #20]
}
 8010508:	4618      	mov	r0, r3
 801050a:	3718      	adds	r7, #24
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}
 8010510:	08029d0c 	.word	0x08029d0c

08010514 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 8010514:	b580      	push	{r7, lr}
 8010516:	b088      	sub	sp, #32
 8010518:	af02      	add	r7, sp, #8
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	60b9      	str	r1, [r7, #8]
 801051e:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	699b      	ldr	r3, [r3, #24]
 8010524:	6879      	ldr	r1, [r7, #4]
 8010526:	4618      	mov	r0, r3
 8010528:	f7fb fddf 	bl	800c0ea <_ZN6tflite14AlignPointerUpEPhj>
 801052c:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	695a      	ldr	r2, [r3, #20]
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	1ad3      	subs	r3, r2, r3
 8010536:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 8010538:	693a      	ldr	r2, [r7, #16]
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	429a      	cmp	r2, r3
 801053e:	d20c      	bcs.n	801055a <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x46>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	6858      	ldr	r0, [r3, #4]
 8010544:	68ba      	ldr	r2, [r7, #8]
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	1ad3      	subs	r3, r2, r3
 801054a:	9300      	str	r3, [sp, #0]
 801054c:	693b      	ldr	r3, [r7, #16]
 801054e:	68ba      	ldr	r2, [r7, #8]
 8010550:	4907      	ldr	r1, [pc, #28]	; (8010570 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 8010552:	f7f8 f99f 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 8010556:	2300      	movs	r3, #0
 8010558:	e005      	b.n	8010566 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x52>
  }
  temp_ = aligned_result + size;
 801055a:	697a      	ldr	r2, [r7, #20]
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	441a      	add	r2, r3
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	619a      	str	r2, [r3, #24]
  return aligned_result;
 8010564:	697b      	ldr	r3, [r7, #20]
}
 8010566:	4618      	mov	r0, r3
 8010568:	3718      	adds	r7, #24
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}
 801056e:	bf00      	nop
 8010570:	08029d58 	.word	0x08029d58

08010574 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 8010574:	b480      	push	{r7}
 8010576:	b083      	sub	sp, #12
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	691a      	ldr	r2, [r3, #16]
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	619a      	str	r2, [r3, #24]
 8010584:	bf00      	nop
 8010586:	370c      	adds	r7, #12
 8010588:	46bd      	mov	sp, r7
 801058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058e:	4770      	bx	lr

08010590 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 8010590:	b480      	push	{r7}
 8010592:	b083      	sub	sp, #12
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	689b      	ldr	r3, [r3, #8]
 801059c:	4618      	mov	r0, r3
 801059e:	370c      	adds	r7, #12
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr

080105a8 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b084      	sub	sp, #16
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	699b      	ldr	r3, [r3, #24]
 80105b6:	6839      	ldr	r1, [r7, #0]
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7fb fd96 	bl	800c0ea <_ZN6tflite14AlignPointerUpEPhj>
 80105be:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	695b      	ldr	r3, [r3, #20]
 80105c4:	6839      	ldr	r1, [r7, #0]
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7fb fda8 	bl	800c11c <_ZN6tflite16AlignPointerDownEPhj>
 80105cc:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 80105ce:	68ba      	ldr	r2, [r7, #8]
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	1ad3      	subs	r3, r2, r3
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3710      	adds	r7, #16
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <_ZN6tflite16InitializeTargetEv>:
namespace tflite {

// To add an equivalent function for your own platform, create your own
// implementation file, and place it in a subfolder named after the target. See
// tensorflow/lite/micro/debug_log.cc for a similar example.
void InitializeTarget() {}
 80105dc:	b480      	push	{r7}
 80105de:	af00      	add	r7, sp, #0
 80105e0:	bf00      	nop
 80105e2:	46bd      	mov	sp, r7
 80105e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e8:	4770      	bx	lr
	...

080105ec <_ZN11flatbuffers11EndianCheckEv>:
inline void EndianCheck() {
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
  int endiantest = 1;
 80105f2:	2301      	movs	r3, #1
 80105f4:	607b      	str	r3, [r7, #4]
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 80105f6:	1d3b      	adds	r3, r7, #4
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d005      	beq.n	801060a <_ZN11flatbuffers11EndianCheckEv+0x1e>
 80105fe:	4b05      	ldr	r3, [pc, #20]	; (8010614 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8010600:	4a05      	ldr	r2, [pc, #20]	; (8010618 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 8010602:	214e      	movs	r1, #78	; 0x4e
 8010604:	4805      	ldr	r0, [pc, #20]	; (801061c <_ZN11flatbuffers11EndianCheckEv+0x30>)
 8010606:	f014 fe39 	bl	802527c <__assert_func>
}
 801060a:	bf00      	nop
 801060c:	3708      	adds	r7, #8
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}
 8010612:	bf00      	nop
 8010614:	08029da4 	.word	0x08029da4
 8010618:	08029de8 	.word	0x08029de8
 801061c:	08029e08 	.word	0x08029e08

08010620 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f000 f805 	bl	8010638 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 801062e:	4603      	mov	r3, r0
}
 8010630:	4618      	mov	r0, r3
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}

08010638 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
  EndianCheck();
 8010640:	f7ff ffd4 	bl	80105ec <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	4618      	mov	r0, r3
 801064a:	f7f8 ff83 	bl	8009554 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 801064e:	4602      	mov	r2, r0
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	4413      	add	r3, r2
}
 8010654:	4618      	mov	r0, r3
 8010656:	3708      	adds	r7, #8
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <_Z18RespondToDetectionPN6tflite13ErrorReporterEaa>:

// This dummy implementation writes person and no person scores to the error
// console. Real applications will want to take some custom action instead, and
// should implement their own versions of this function.
void RespondToDetection(tflite::ErrorReporter* error_reporter,
                        int8_t person_score, int8_t no_person_score) {
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	460b      	mov	r3, r1
 8010666:	70fb      	strb	r3, [r7, #3]
 8010668:	4613      	mov	r3, r2
 801066a:	70bb      	strb	r3, [r7, #2]
  TF_LITE_REPORT_ERROR(error_reporter, "person score:%d no person score %d",
 801066c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8010670:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010674:	4903      	ldr	r1, [pc, #12]	; (8010684 <_Z18RespondToDetectionPN6tflite13ErrorReporterEaa+0x28>)
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f7f8 f90c 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                       person_score, no_person_score);
}
 801067c:	bf00      	nop
 801067e:	3708      	adds	r7, #8
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}
 8010684:	0802a7b4 	.word	0x0802a7b4

08010688 <_Z8GetImagePN6tflite13ErrorReporterEiiiPa>:
#include "tensorflow/lite/micro/examples/person_detection/model_settings.h"

#include "app_main.h"

TfLiteStatus GetImage(tflite::ErrorReporter* error_reporter, int image_width,
                      int image_height, int channels, int8_t* image_data) {
 8010688:	b480      	push	{r7}
 801068a:	b087      	sub	sp, #28
 801068c:	af00      	add	r7, sp, #0
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	607a      	str	r2, [r7, #4]
 8010694:	603b      	str	r3, [r7, #0]
  for (int i = 0; i < image_width * image_height * channels; ++i) {
 8010696:	2300      	movs	r3, #0
 8010698:	617b      	str	r3, [r7, #20]
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	687a      	ldr	r2, [r7, #4]
 801069e:	fb02 f303 	mul.w	r3, r2, r3
 80106a2:	683a      	ldr	r2, [r7, #0]
 80106a4:	fb02 f303 	mul.w	r3, r2, r3
 80106a8:	697a      	ldr	r2, [r7, #20]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	da0c      	bge.n	80106c8 <_Z8GetImagePN6tflite13ErrorReporterEiiiPa+0x40>
    image_data[i] = g_cam_gray_frame[i];
 80106ae:	4a0a      	ldr	r2, [pc, #40]	; (80106d8 <_Z8GetImagePN6tflite13ErrorReporterEiiiPa+0x50>)
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	4413      	add	r3, r2
 80106b4:	7819      	ldrb	r1, [r3, #0]
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	6a3a      	ldr	r2, [r7, #32]
 80106ba:	4413      	add	r3, r2
 80106bc:	b24a      	sxtb	r2, r1
 80106be:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < image_width * image_height * channels; ++i) {
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	3301      	adds	r3, #1
 80106c4:	617b      	str	r3, [r7, #20]
 80106c6:	e7e8      	b.n	801069a <_Z8GetImagePN6tflite13ErrorReporterEiiiPa+0x12>
  }
  return kTfLiteOk;
 80106c8:	2300      	movs	r3, #0
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	371c      	adds	r7, #28
 80106ce:	46bd      	mov	sp, r7
 80106d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d4:	4770      	bx	lr
 80106d6:	bf00      	nop
 80106d8:	20025b38 	.word	0x20025b38

080106dc <_ZNK6tflite5Model7versionEv>:
  uint32_t version() const {
 80106dc:	b580      	push	{r7, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2200      	movs	r2, #0
 80106e8:	2104      	movs	r1, #4
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7fd fb2f 	bl	800dd4e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80106f0:	4603      	mov	r3, r0
  }
 80106f2:	4618      	mov	r0, r3
 80106f4:	3708      	adds	r7, #8
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}

080106fa <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 80106fa:	b580      	push	{r7, lr}
 80106fc:	b082      	sub	sp, #8
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f7ff ff8c 	bl	8010620 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8010708:	4603      	mov	r3, r0
}
 801070a:	4618      	mov	r0, r3
 801070c:	3708      	adds	r7, #8
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}
	...

08010714 <__tcf_0>:
  tflite::InitializeTarget();

  // Set up logging. Google style is to avoid globals or statics because of
  // lifetime uncertainty, but since this has a trivial destructor it's okay.
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroErrorReporter micro_error_reporter;
 8010714:	b580      	push	{r7, lr}
 8010716:	af00      	add	r7, sp, #0
 8010718:	4801      	ldr	r0, [pc, #4]	; (8010720 <__tcf_0+0xc>)
 801071a:	f7fd ffcf 	bl	800e6bc <_ZN6tflite18MicroErrorReporterD1Ev>
 801071e:	bd80      	pop	{r7, pc}
 8010720:	20000010 	.word	0x20000010

08010724 <__tcf_1>:
  // incur some penalty in code space for op implementations that are not
  // needed by this graph.
  //
  // tflite::AllOpsResolver resolver;
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;
 8010724:	b580      	push	{r7, lr}
 8010726:	af00      	add	r7, sp, #0
 8010728:	4801      	ldr	r0, [pc, #4]	; (8010730 <__tcf_1+0xc>)
 801072a:	f000 faa5 	bl	8010c78 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>
 801072e:	bd80      	pop	{r7, pc}
 8010730:	2004a064 	.word	0x2004a064

08010734 <__tcf_2>:
  micro_op_resolver.AddSoftmax();

  // Build an interpreter to run the model with.
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroInterpreter static_interpreter(
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8010734:	b580      	push	{r7, lr}
 8010736:	af00      	add	r7, sp, #0
 8010738:	4801      	ldr	r0, [pc, #4]	; (8010740 <__tcf_2+0xc>)
 801073a:	f7fe fd0e 	bl	800f15a <_ZN6tflite16MicroInterpreterD1Ev>
 801073e:	bd80      	pop	{r7, pc}
 8010740:	2004a134 	.word	0x2004a134

08010744 <setup>:
void setup() {
 8010744:	b590      	push	{r4, r7, lr}
 8010746:	b08f      	sub	sp, #60	; 0x3c
 8010748:	af04      	add	r7, sp, #16
  tflite::InitializeTarget();
 801074a:	f7ff ff47 	bl	80105dc <_ZN6tflite16InitializeTargetEv>
  static tflite::MicroErrorReporter micro_error_reporter;
 801074e:	4b65      	ldr	r3, [pc, #404]	; (80108e4 <setup+0x1a0>)
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	f3bf 8f5b 	dmb	ish
 8010756:	b2db      	uxtb	r3, r3
 8010758:	f003 0301 	and.w	r3, r3, #1
 801075c:	2b00      	cmp	r3, #0
 801075e:	bf0c      	ite	eq
 8010760:	2301      	moveq	r3, #1
 8010762:	2300      	movne	r3, #0
 8010764:	b2db      	uxtb	r3, r3
 8010766:	2b00      	cmp	r3, #0
 8010768:	d010      	beq.n	801078c <setup+0x48>
 801076a:	485e      	ldr	r0, [pc, #376]	; (80108e4 <setup+0x1a0>)
 801076c:	f014 fafd 	bl	8024d6a <__cxa_guard_acquire>
 8010770:	4603      	mov	r3, r0
 8010772:	2b00      	cmp	r3, #0
 8010774:	bf14      	ite	ne
 8010776:	2301      	movne	r3, #1
 8010778:	2300      	moveq	r3, #0
 801077a:	b2db      	uxtb	r3, r3
 801077c:	2b00      	cmp	r3, #0
 801077e:	d005      	beq.n	801078c <setup+0x48>
 8010780:	4858      	ldr	r0, [pc, #352]	; (80108e4 <setup+0x1a0>)
 8010782:	f014 fafe 	bl	8024d82 <__cxa_guard_release>
 8010786:	4858      	ldr	r0, [pc, #352]	; (80108e8 <setup+0x1a4>)
 8010788:	f014 fd96 	bl	80252b8 <atexit>
  error_reporter = &micro_error_reporter;
 801078c:	4b57      	ldr	r3, [pc, #348]	; (80108ec <setup+0x1a8>)
 801078e:	4a58      	ldr	r2, [pc, #352]	; (80108f0 <setup+0x1ac>)
 8010790:	601a      	str	r2, [r3, #0]
  model = tflite::GetModel(g_person_detect_model_data);
 8010792:	4858      	ldr	r0, [pc, #352]	; (80108f4 <setup+0x1b0>)
 8010794:	f7ff ffb1 	bl	80106fa <_ZN6tflite8GetModelEPKv>
 8010798:	4603      	mov	r3, r0
 801079a:	4a57      	ldr	r2, [pc, #348]	; (80108f8 <setup+0x1b4>)
 801079c:	6013      	str	r3, [r2, #0]
  if (model->version() != TFLITE_SCHEMA_VERSION) {
 801079e:	4b56      	ldr	r3, [pc, #344]	; (80108f8 <setup+0x1b4>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7ff ff9a 	bl	80106dc <_ZNK6tflite5Model7versionEv>
 80107a8:	4603      	mov	r3, r0
 80107aa:	2b03      	cmp	r3, #3
 80107ac:	bf14      	ite	ne
 80107ae:	2301      	movne	r3, #1
 80107b0:	2300      	moveq	r3, #0
 80107b2:	b2db      	uxtb	r3, r3
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d00d      	beq.n	80107d4 <setup+0x90>
    TF_LITE_REPORT_ERROR(error_reporter,
 80107b8:	4b4c      	ldr	r3, [pc, #304]	; (80108ec <setup+0x1a8>)
 80107ba:	681c      	ldr	r4, [r3, #0]
 80107bc:	4b4e      	ldr	r3, [pc, #312]	; (80108f8 <setup+0x1b4>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7ff ff8b 	bl	80106dc <_ZNK6tflite5Model7versionEv>
 80107c6:	4602      	mov	r2, r0
 80107c8:	2303      	movs	r3, #3
 80107ca:	494c      	ldr	r1, [pc, #304]	; (80108fc <setup+0x1b8>)
 80107cc:	4620      	mov	r0, r4
 80107ce:	f7f8 f861 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
 80107d2:	e084      	b.n	80108de <setup+0x19a>
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;
 80107d4:	4b4a      	ldr	r3, [pc, #296]	; (8010900 <setup+0x1bc>)
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	f3bf 8f5b 	dmb	ish
 80107dc:	b2db      	uxtb	r3, r3
 80107de:	f003 0301 	and.w	r3, r3, #1
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	bf0c      	ite	eq
 80107e6:	2301      	moveq	r3, #1
 80107e8:	2300      	movne	r3, #0
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d014      	beq.n	801081a <setup+0xd6>
 80107f0:	4843      	ldr	r0, [pc, #268]	; (8010900 <setup+0x1bc>)
 80107f2:	f014 faba 	bl	8024d6a <__cxa_guard_acquire>
 80107f6:	4603      	mov	r3, r0
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	bf14      	ite	ne
 80107fc:	2301      	movne	r3, #1
 80107fe:	2300      	moveq	r3, #0
 8010800:	b2db      	uxtb	r3, r3
 8010802:	2b00      	cmp	r3, #0
 8010804:	d009      	beq.n	801081a <setup+0xd6>
 8010806:	2100      	movs	r1, #0
 8010808:	483e      	ldr	r0, [pc, #248]	; (8010904 <setup+0x1c0>)
 801080a:	f000 f8e9 	bl	80109e0 <_ZN6tflite22MicroMutableOpResolverILj5EEC1EPNS_13ErrorReporterE>
 801080e:	483c      	ldr	r0, [pc, #240]	; (8010900 <setup+0x1bc>)
 8010810:	f014 fab7 	bl	8024d82 <__cxa_guard_release>
 8010814:	483c      	ldr	r0, [pc, #240]	; (8010908 <setup+0x1c4>)
 8010816:	f014 fd4f 	bl	80252b8 <atexit>
  micro_op_resolver.AddAveragePool2D();
 801081a:	483a      	ldr	r0, [pc, #232]	; (8010904 <setup+0x1c0>)
 801081c:	f000 f900 	bl	8010a20 <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DEv>
  micro_op_resolver.AddConv2D();
 8010820:	4838      	ldr	r0, [pc, #224]	; (8010904 <setup+0x1c0>)
 8010822:	f000 f915 	bl	8010a50 <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DEv>
  micro_op_resolver.AddDepthwiseConv2D();
 8010826:	4837      	ldr	r0, [pc, #220]	; (8010904 <setup+0x1c0>)
 8010828:	f000 f92a 	bl	8010a80 <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DEv>
  micro_op_resolver.AddReshape();
 801082c:	4835      	ldr	r0, [pc, #212]	; (8010904 <setup+0x1c0>)
 801082e:	f000 f93f 	bl	8010ab0 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv>
  micro_op_resolver.AddSoftmax();
 8010832:	1d3b      	adds	r3, r7, #4
 8010834:	4618      	mov	r0, r3
 8010836:	f007 fb9f 	bl	8017f78 <_ZN6tflite16Register_SOFTMAXEv>
 801083a:	1d3b      	adds	r3, r7, #4
 801083c:	4619      	mov	r1, r3
 801083e:	4831      	ldr	r0, [pc, #196]	; (8010904 <setup+0x1c0>)
 8010840:	f000 f94e 	bl	8010ae0 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK18TfLiteRegistration>
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8010844:	4b31      	ldr	r3, [pc, #196]	; (801090c <setup+0x1c8>)
 8010846:	781b      	ldrb	r3, [r3, #0]
 8010848:	f3bf 8f5b 	dmb	ish
 801084c:	b2db      	uxtb	r3, r3
 801084e:	f003 0301 	and.w	r3, r3, #1
 8010852:	2b00      	cmp	r3, #0
 8010854:	bf0c      	ite	eq
 8010856:	2301      	moveq	r3, #1
 8010858:	2300      	movne	r3, #0
 801085a:	b2db      	uxtb	r3, r3
 801085c:	2b00      	cmp	r3, #0
 801085e:	d01f      	beq.n	80108a0 <setup+0x15c>
 8010860:	482a      	ldr	r0, [pc, #168]	; (801090c <setup+0x1c8>)
 8010862:	f014 fa82 	bl	8024d6a <__cxa_guard_acquire>
 8010866:	4603      	mov	r3, r0
 8010868:	2b00      	cmp	r3, #0
 801086a:	bf14      	ite	ne
 801086c:	2301      	movne	r3, #1
 801086e:	2300      	moveq	r3, #0
 8010870:	b2db      	uxtb	r3, r3
 8010872:	2b00      	cmp	r3, #0
 8010874:	d014      	beq.n	80108a0 <setup+0x15c>
 8010876:	4b20      	ldr	r3, [pc, #128]	; (80108f8 <setup+0x1b4>)
 8010878:	6819      	ldr	r1, [r3, #0]
 801087a:	4b1c      	ldr	r3, [pc, #112]	; (80108ec <setup+0x1a8>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	2200      	movs	r2, #0
 8010880:	9202      	str	r2, [sp, #8]
 8010882:	9301      	str	r3, [sp, #4]
 8010884:	f44f 3308 	mov.w	r3, #139264	; 0x22000
 8010888:	9300      	str	r3, [sp, #0]
 801088a:	4b21      	ldr	r3, [pc, #132]	; (8010910 <setup+0x1cc>)
 801088c:	4a1d      	ldr	r2, [pc, #116]	; (8010904 <setup+0x1c0>)
 801088e:	4821      	ldr	r0, [pc, #132]	; (8010914 <setup+0x1d0>)
 8010890:	f7fe fc1c 	bl	800f0cc <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
 8010894:	481d      	ldr	r0, [pc, #116]	; (801090c <setup+0x1c8>)
 8010896:	f014 fa74 	bl	8024d82 <__cxa_guard_release>
 801089a:	481f      	ldr	r0, [pc, #124]	; (8010918 <setup+0x1d4>)
 801089c:	f014 fd0c 	bl	80252b8 <atexit>
  interpreter = &static_interpreter;
 80108a0:	4b1e      	ldr	r3, [pc, #120]	; (801091c <setup+0x1d8>)
 80108a2:	4a1c      	ldr	r2, [pc, #112]	; (8010914 <setup+0x1d0>)
 80108a4:	601a      	str	r2, [r3, #0]

  // Allocate memory from the tensor_arena for the model's tensors.
  TfLiteStatus allocate_status = interpreter->AllocateTensors();
 80108a6:	4b1d      	ldr	r3, [pc, #116]	; (801091c <setup+0x1d8>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7fe fe22 	bl	800f4f4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 80108b0:	4603      	mov	r3, r0
 80108b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (allocate_status != kTfLiteOk) {
 80108b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d006      	beq.n	80108cc <setup+0x188>
    TF_LITE_REPORT_ERROR(error_reporter, "AllocateTensors() failed");
 80108be:	4b0b      	ldr	r3, [pc, #44]	; (80108ec <setup+0x1a8>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	4917      	ldr	r1, [pc, #92]	; (8010920 <setup+0x1dc>)
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7f7 ffe5 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
 80108ca:	e008      	b.n	80108de <setup+0x19a>
  }

  // Get information about the memory area to use for the model's input.
  input = interpreter->input(0);
 80108cc:	4b13      	ldr	r3, [pc, #76]	; (801091c <setup+0x1d8>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	2100      	movs	r1, #0
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7fe ffae 	bl	800f834 <_ZN6tflite16MicroInterpreter5inputEj>
 80108d8:	4603      	mov	r3, r0
 80108da:	4a12      	ldr	r2, [pc, #72]	; (8010924 <setup+0x1e0>)
 80108dc:	6013      	str	r3, [r2, #0]
}
 80108de:	372c      	adds	r7, #44	; 0x2c
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd90      	pop	{r4, r7, pc}
 80108e4:	2004a060 	.word	0x2004a060
 80108e8:	08010715 	.word	0x08010715
 80108ec:	20028050 	.word	0x20028050
 80108f0:	20000010 	.word	0x20000010
 80108f4:	0802c618 	.word	0x0802c618
 80108f8:	20028054 	.word	0x20028054
 80108fc:	0802a8d4 	.word	0x0802a8d4
 8010900:	2004a130 	.word	0x2004a130
 8010904:	2004a064 	.word	0x2004a064
 8010908:	08010725 	.word	0x08010725
 801090c:	2004a1c8 	.word	0x2004a1c8
 8010910:	20028060 	.word	0x20028060
 8010914:	2004a134 	.word	0x2004a134
 8010918:	08010735 	.word	0x08010735
 801091c:	20028058 	.word	0x20028058
 8010920:	0802a91c 	.word	0x0802a91c
 8010924:	2002805c 	.word	0x2002805c

08010928 <loop>:


// The name of this function is important for Arduino compatibility.
void loop() {
 8010928:	b580      	push	{r7, lr}
 801092a:	b084      	sub	sp, #16
 801092c:	af02      	add	r7, sp, #8
  // Get image from provider.
  if (kTfLiteOk != GetImage(error_reporter, kNumCols, kNumRows, kNumChannels,
 801092e:	4b26      	ldr	r3, [pc, #152]	; (80109c8 <loop+0xa0>)
 8010930:	6818      	ldr	r0, [r3, #0]
 8010932:	4b26      	ldr	r3, [pc, #152]	; (80109cc <loop+0xa4>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	9300      	str	r3, [sp, #0]
 801093a:	2301      	movs	r3, #1
 801093c:	2260      	movs	r2, #96	; 0x60
 801093e:	2160      	movs	r1, #96	; 0x60
 8010940:	f7ff fea2 	bl	8010688 <_Z8GetImagePN6tflite13ErrorReporterEiiiPa>
 8010944:	4603      	mov	r3, r0
 8010946:	2b00      	cmp	r3, #0
 8010948:	bf14      	ite	ne
 801094a:	2301      	movne	r3, #1
 801094c:	2300      	moveq	r3, #0
 801094e:	b2db      	uxtb	r3, r3
 8010950:	2b00      	cmp	r3, #0
 8010952:	d005      	beq.n	8010960 <loop+0x38>
                            input->data.int8)) {
    TF_LITE_REPORT_ERROR(error_reporter, "Image capture failed.");
 8010954:	4b1c      	ldr	r3, [pc, #112]	; (80109c8 <loop+0xa0>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	491d      	ldr	r1, [pc, #116]	; (80109d0 <loop+0xa8>)
 801095a:	4618      	mov	r0, r3
 801095c:	f7f7 ff9a 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  }

  // Run the model on this input and make sure it succeeds.
  if (kTfLiteOk != interpreter->Invoke()) {
 8010960:	4b1c      	ldr	r3, [pc, #112]	; (80109d4 <loop+0xac>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	4618      	mov	r0, r3
 8010966:	f7fe ff33 	bl	800f7d0 <_ZN6tflite16MicroInterpreter6InvokeEv>
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	bf14      	ite	ne
 8010970:	2301      	movne	r3, #1
 8010972:	2300      	moveq	r3, #0
 8010974:	b2db      	uxtb	r3, r3
 8010976:	2b00      	cmp	r3, #0
 8010978:	d005      	beq.n	8010986 <loop+0x5e>
    TF_LITE_REPORT_ERROR(error_reporter, "Invoke failed.");
 801097a:	4b13      	ldr	r3, [pc, #76]	; (80109c8 <loop+0xa0>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	4916      	ldr	r1, [pc, #88]	; (80109d8 <loop+0xb0>)
 8010980:	4618      	mov	r0, r3
 8010982:	f7f7 ff87 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  }

  TfLiteTensor* output = interpreter->output(0);
 8010986:	4b13      	ldr	r3, [pc, #76]	; (80109d4 <loop+0xac>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	2100      	movs	r1, #0
 801098c:	4618      	mov	r0, r3
 801098e:	f7fe ff75 	bl	800f87c <_ZN6tflite16MicroInterpreter6outputEj>
 8010992:	6078      	str	r0, [r7, #4]

  // Process the inference results.
  int8_t person_score = output->data.uint8[kPersonIndex];
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	685b      	ldr	r3, [r3, #4]
 8010998:	3301      	adds	r3, #1
 801099a:	781b      	ldrb	r3, [r3, #0]
 801099c:	70fb      	strb	r3, [r7, #3]
  int8_t no_person_score = output->data.uint8[kNotAPersonIndex];
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	685b      	ldr	r3, [r3, #4]
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	70bb      	strb	r3, [r7, #2]
  RespondToDetection(error_reporter, person_score, no_person_score);
 80109a6:	4b08      	ldr	r3, [pc, #32]	; (80109c8 <loop+0xa0>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	f997 2002 	ldrsb.w	r2, [r7, #2]
 80109ae:	f997 1003 	ldrsb.w	r1, [r7, #3]
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7ff fe52 	bl	801065c <_Z18RespondToDetectionPN6tflite13ErrorReporterEaa>
  g_person_score = person_score;
 80109b8:	4a08      	ldr	r2, [pc, #32]	; (80109dc <loop+0xb4>)
 80109ba:	78fb      	ldrb	r3, [r7, #3]
 80109bc:	7013      	strb	r3, [r2, #0]
}
 80109be:	bf00      	nop
 80109c0:	3708      	adds	r7, #8
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	20028050 	.word	0x20028050
 80109cc:	2002805c 	.word	0x2002805c
 80109d0:	0802a938 	.word	0x0802a938
 80109d4:	20028058 	.word	0x20028058
 80109d8:	0802a950 	.word	0x0802a950
 80109dc:	200000a0 	.word	0x200000a0

080109e0 <_ZN6tflite22MicroMutableOpResolverILj5EEC1EPNS_13ErrorReporterE>:
template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7fb fa5d 	bl	800beac <_ZN6tflite15MicroOpResolverC1Ev>
 80109f2:	4a0a      	ldr	r2, [pc, #40]	; (8010a1c <_ZN6tflite22MicroMutableOpResolverILj5EEC1EPNS_13ErrorReporterE+0x3c>)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	601a      	str	r2, [r3, #0]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2200      	movs	r2, #0
 80109fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2200      	movs	r2, #0
 8010a04:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	683a      	ldr	r2, [r7, #0]
 8010a0c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	4618      	mov	r0, r3
 8010a14:	3708      	adds	r7, #8
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	0802c588 	.word	0x0802c588

08010a20 <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DEv>:
  TfLiteStatus AddArgMin() {
    return AddBuiltin(BuiltinOperator_ARG_MIN,
                      tflite::ops::micro::Register_ARG_MIN(), ParseArgMin);
  }

  TfLiteStatus AddAveragePool2D() {
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b08a      	sub	sp, #40	; 0x28
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_AVERAGE_POOL_2D,
                      tflite::ops::micro::Register_AVERAGE_POOL_2D(),
 8010a28:	f107 0308 	add.w	r3, r7, #8
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f006 fea9 	bl	8017784 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>
                      ParsePool);
 8010a32:	f107 0208 	add.w	r2, r7, #8
 8010a36:	4b05      	ldr	r3, [pc, #20]	; (8010a4c <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DEv+0x2c>)
 8010a38:	2101      	movs	r1, #1
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 f862 	bl	8010b04 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8010a40:	4603      	mov	r3, r0
  }
 8010a42:	4618      	mov	r0, r3
 8010a44:	3728      	adds	r7, #40	; 0x28
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	08009255 	.word	0x08009255

08010a50 <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DEv>:
    return AddBuiltin(BuiltinOperator_CONCATENATION,
                      tflite::ops::micro::Register_CONCATENATION(),
                      ParseConcatenation);
  }

  TfLiteStatus AddConv2D() {
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b08a      	sub	sp, #40	; 0x28
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_CONV_2D, Register_CONV_2D(), ParseConv2D);
 8010a58:	f107 0308 	add.w	r3, r7, #8
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f004 ff15 	bl	801588c <_ZN6tflite16Register_CONV_2DEv>
 8010a62:	f107 0208 	add.w	r2, r7, #8
 8010a66:	4b05      	ldr	r3, [pc, #20]	; (8010a7c <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DEv+0x2c>)
 8010a68:	2103      	movs	r1, #3
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	f000 f84a 	bl	8010b04 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8010a70:	4603      	mov	r3, r0
  }
 8010a72:	4618      	mov	r0, r3
 8010a74:	3728      	adds	r7, #40	; 0x28
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	08008fbd 	.word	0x08008fbd

08010a80 <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DEv>:
  TfLiteStatus AddDepthToSpace() {
    return AddBuiltin(BuiltinOperator_DEPTH_TO_SPACE,
                      tflite::Register_DEPTH_TO_SPACE(), ParseDepthToSpace);
  }

  TfLiteStatus AddDepthwiseConv2D() {
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b08a      	sub	sp, #40	; 0x28
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_DEPTHWISE_CONV_2D,
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
 8010a88:	f107 0308 	add.w	r3, r7, #8
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f005 ffbb 	bl	8016a08 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
 8010a92:	f107 0208 	add.w	r2, r7, #8
 8010a96:	4b05      	ldr	r3, [pc, #20]	; (8010aac <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DEv+0x2c>)
 8010a98:	2104      	movs	r1, #4
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 f832 	bl	8010b04 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8010aa0:	4603      	mov	r3, r0
  }
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3728      	adds	r7, #40	; 0x28
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
 8010aaa:	bf00      	nop
 8010aac:	080090fd 	.word	0x080090fd

08010ab0 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv>:
  TfLiteStatus AddRelu6() {
    return AddBuiltin(BuiltinOperator_RELU6,
                      tflite::ops::micro::Register_RELU6(), ParseRelu6);
  }

  TfLiteStatus AddReshape() {
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b08a      	sub	sp, #40	; 0x28
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_RESHAPE,
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 8010ab8:	f107 0308 	add.w	r3, r7, #8
 8010abc:	4618      	mov	r0, r3
 8010abe:	f003 f96d 	bl	8013d9c <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 8010ac2:	f107 0208 	add.w	r2, r7, #8
 8010ac6:	4b05      	ldr	r3, [pc, #20]	; (8010adc <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv+0x2c>)
 8010ac8:	2116      	movs	r1, #22
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f000 f81a 	bl	8010b04 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8010ad0:	4603      	mov	r3, r0
  }
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3728      	adds	r7, #40	; 0x28
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}
 8010ada:	bf00      	nop
 8010adc:	08009395 	.word	0x08009395

08010ae0 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK18TfLiteRegistration>:
  TfLiteStatus AddSin() {
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
                      ParseSin);
  }

  TfLiteStatus AddSoftmax(
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
 8010ae8:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_SOFTMAX()) {
    return AddBuiltin(BuiltinOperator_SOFTMAX, registration, ParseSoftmax);
 8010aea:	4b05      	ldr	r3, [pc, #20]	; (8010b00 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK18TfLiteRegistration+0x20>)
 8010aec:	683a      	ldr	r2, [r7, #0]
 8010aee:	2119      	movs	r1, #25
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f000 f807 	bl	8010b04 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8010af6:	4603      	mov	r3, r0
  }
 8010af8:	4618      	mov	r0, r3
 8010afa:	3708      	adds	r7, #8
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	08009491 	.word	0x08009491

08010b04 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8010b04:	b5b0      	push	{r4, r5, r7, lr}
 8010b06:	b084      	sub	sp, #16
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	60f8      	str	r0, [r7, #12]
 8010b0c:	607a      	str	r2, [r7, #4]
 8010b0e:	603b      	str	r3, [r7, #0]
 8010b10:	460b      	mov	r3, r1
 8010b12:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 8010b14:	7afb      	ldrb	r3, [r7, #11]
 8010b16:	2b20      	cmp	r3, #32
 8010b18:	d10d      	bne.n	8010b36 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x32>
      if (error_reporter_ != nullptr) {
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d006      	beq.n	8010b32 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010b2a:	493a      	ldr	r1, [pc, #232]	; (8010c14 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x110>)
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f7f7 feb1 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 8010b32:	2301      	movs	r3, #1
 8010b34:	e069      	b.n	8010c0a <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    if (FindOp(op) != nullptr) {
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	3318      	adds	r3, #24
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	7afa      	ldrb	r2, [r7, #11]
 8010b40:	4611      	mov	r1, r2
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	4798      	blx	r3
 8010b46:	4603      	mov	r3, r0
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	bf14      	ite	ne
 8010b4c:	2301      	movne	r3, #1
 8010b4e:	2300      	moveq	r3, #0
 8010b50:	b2db      	uxtb	r3, r3
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d00e      	beq.n	8010b74 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x70>
      if (error_reporter_ != nullptr) {
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d007      	beq.n	8010b70 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x6c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010b66:	7afa      	ldrb	r2, [r7, #11]
 8010b68:	492b      	ldr	r1, [pc, #172]	; (8010c18 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x114>)
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7f7 fe92 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 8010b70:	2301      	movs	r3, #1
 8010b72:	e04a      	b.n	8010c0a <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    if (registrations_len_ >= tOpCount) {
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010b7a:	2b04      	cmp	r3, #4
 8010b7c:	d90e      	bls.n	8010b9c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x98>
      if (error_reporter_) {
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d007      	beq.n	8010b98 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x94>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8010b8e:	7afa      	ldrb	r2, [r7, #11]
 8010b90:	2305      	movs	r3, #5
 8010b92:	4922      	ldr	r1, [pc, #136]	; (8010c1c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x118>)
 8010b94:	f7f7 fe7e 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 8010b98:	2301      	movs	r3, #1
 8010b9a:	e036      	b.n	8010c0a <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    registrations_[registrations_len_] = registration;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010ba2:	68fa      	ldr	r2, [r7, #12]
 8010ba4:	015b      	lsls	r3, r3, #5
 8010ba6:	4413      	add	r3, r2
 8010ba8:	687a      	ldr	r2, [r7, #4]
 8010baa:	1d1c      	adds	r4, r3, #4
 8010bac:	4615      	mov	r5, r2
 8010bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010bb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010bb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010bc0:	7afa      	ldrb	r2, [r7, #11]
 8010bc2:	68f9      	ldr	r1, [r7, #12]
 8010bc4:	015b      	lsls	r3, r3, #5
 8010bc6:	440b      	add	r3, r1
 8010bc8:	3318      	adds	r3, #24
 8010bca:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010bd2:	1c5a      	adds	r2, r3, #1
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    builtin_codes_[num_buitin_ops_] = op;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	4413      	add	r3, r2
 8010be4:	7afa      	ldrb	r2, [r7, #11]
 8010be6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    builtin_parsers_[num_buitin_ops_] = parser;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	322c      	adds	r2, #44	; 0x2c
 8010bf4:	6839      	ldr	r1, [r7, #0]
 8010bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    num_buitin_ops_++;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010c00:	1c5a      	adds	r2, r3, #1
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

    return kTfLiteOk;
 8010c08:	2300      	movs	r3, #0
  }
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	3710      	adds	r7, #16
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bdb0      	pop	{r4, r5, r7, pc}
 8010c12:	bf00      	nop
 8010c14:	0802a960 	.word	0x0802a960
 8010c18:	0802a9a8 	.word	0x0802a9a8
 8010c1c:	0802a9f8 	.word	0x0802a9f8

08010c20 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8010c20:	b480      	push	{r7}
 8010c22:	b085      	sub	sp, #20
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	460b      	mov	r3, r1
 8010c2a:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8010c2c:	78fb      	ldrb	r3, [r7, #3]
 8010c2e:	2b20      	cmp	r3, #32
 8010c30:	d101      	bne.n	8010c36 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x16>
 8010c32:	2300      	movs	r3, #0
 8010c34:	e019      	b.n	8010c6a <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8010c36:	2300      	movs	r3, #0
 8010c38:	60fb      	str	r3, [r7, #12]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010c40:	68fa      	ldr	r2, [r7, #12]
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d210      	bcs.n	8010c68 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x48>
      const TfLiteRegistration& registration = registrations_[i];
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	015b      	lsls	r3, r3, #5
 8010c4a:	687a      	ldr	r2, [r7, #4]
 8010c4c:	4413      	add	r3, r2
 8010c4e:	3304      	adds	r3, #4
 8010c50:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	695a      	ldr	r2, [r3, #20]
 8010c56:	78fb      	ldrb	r3, [r7, #3]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d101      	bne.n	8010c60 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x40>
        return &registration;
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	e004      	b.n	8010c6a <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	3301      	adds	r3, #1
 8010c64:	60fb      	str	r3, [r7, #12]
 8010c66:	e7e8      	b.n	8010c3a <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8010c68:	2300      	movs	r3, #0
  }
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3714      	adds	r7, #20
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c74:	4770      	bx	lr
	...

08010c78 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	4a05      	ldr	r2, [pc, #20]	; (8010c98 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev+0x20>)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	601a      	str	r2, [r3, #0]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7fb f8cd 	bl	800be28 <_ZN6tflite15MicroOpResolverD1Ev>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	4618      	mov	r0, r3
 8010c92:	3708      	adds	r7, #8
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	0802c588 	.word	0x0802c588

08010c9c <_ZN6tflite22MicroMutableOpResolverILj5EED0Ev>:
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f7ff ffe7 	bl	8010c78 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>
 8010caa:	21cc      	movs	r1, #204	; 0xcc
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f014 f858 	bl	8024d62 <_ZdlPvj>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3708      	adds	r7, #8
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}

08010cbc <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b084      	sub	sp, #16
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	60fb      	str	r3, [r7, #12]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010cd0:	68fa      	ldr	r2, [r7, #12]
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d218      	bcs.n	8010d08 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x4c>
      const TfLiteRegistration& registration = registrations_[i];
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	015b      	lsls	r3, r3, #5
 8010cda:	687a      	ldr	r2, [r7, #4]
 8010cdc:	4413      	add	r3, r2
 8010cde:	3304      	adds	r3, #4
 8010ce0:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	695b      	ldr	r3, [r3, #20]
 8010ce6:	2b20      	cmp	r3, #32
 8010ce8:	d10a      	bne.n	8010d00 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x44>
          (strcmp(registration.custom_name, op) == 0)) {
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	699b      	ldr	r3, [r3, #24]
 8010cee:	6839      	ldr	r1, [r7, #0]
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7ef fae5 	bl	80002c0 <strcmp>
 8010cf6:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d101      	bne.n	8010d00 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x44>
        return &registration;
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	e004      	b.n	8010d0a <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	3301      	adds	r3, #1
 8010d04:	60fb      	str	r3, [r7, #12]
 8010d06:	e7e0      	b.n	8010cca <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0xe>
    return nullptr;
 8010d08:	2300      	movs	r3, #0
  }
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	3710      	adds	r7, #16
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}

08010d12 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8010d12:	b580      	push	{r7, lr}
 8010d14:	b084      	sub	sp, #16
 8010d16:	af00      	add	r7, sp, #0
 8010d18:	6078      	str	r0, [r7, #4]
 8010d1a:	460b      	mov	r3, r1
 8010d1c:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010d24:	2b05      	cmp	r3, #5
 8010d26:	d901      	bls.n	8010d2c <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x1a>
 8010d28:	f014 faa1 	bl	802526e <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	60fb      	str	r3, [r7, #12]
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010d36:	68fa      	ldr	r2, [r7, #12]
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d211      	bcs.n	8010d60 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x4e>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8010d3c:	687a      	ldr	r2, [r7, #4]
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	4413      	add	r3, r2
 8010d42:	33a8      	adds	r3, #168	; 0xa8
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	78fa      	ldrb	r2, [r7, #3]
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d105      	bne.n	8010d58 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x46>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	68fa      	ldr	r2, [r7, #12]
 8010d50:	322c      	adds	r2, #44	; 0x2c
 8010d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d56:	e004      	b.n	8010d62 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x50>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	3301      	adds	r3, #1
 8010d5c:	60fb      	str	r3, [r7, #12]
 8010d5e:	e7e7      	b.n	8010d30 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x1e>
    return nullptr;
 8010d60:	2300      	movs	r3, #0
  }
 8010d62:	4618      	mov	r0, r3
 8010d64:	3710      	adds	r7, #16
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}

08010d6a <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 8010d6a:	b480      	push	{r7}
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8010d72:	ee07 3a90 	vmov	s15, r3
 8010d76:	eeb0 0a67 	vmov.f32	s0, s15
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr
	...

08010d84 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8010d84:	b5b0      	push	{r4, r5, r7, lr}
 8010d86:	b08c      	sub	sp, #48	; 0x30
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8010d8e:	687a      	ldr	r2, [r7, #4]
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d107      	bne.n	8010da6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 8010d96:	f7fa fa88 	bl	800b2aa <_ZNSt14numeric_limitsIlE3minEv>
 8010d9a:	4602      	mov	r2, r0
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d101      	bne.n	8010da6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 8010da2:	2301      	movs	r3, #1
 8010da4:	e000      	b.n	8010da8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8010da6:	2300      	movs	r3, #0
 8010da8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	461a      	mov	r2, r3
 8010db0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8010db4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	461a      	mov	r2, r3
 8010dbc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8010dc0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 8010dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc6:	69ba      	ldr	r2, [r7, #24]
 8010dc8:	fb02 f203 	mul.w	r2, r2, r3
 8010dcc:	69fb      	ldr	r3, [r7, #28]
 8010dce:	6a39      	ldr	r1, [r7, #32]
 8010dd0:	fb01 f303 	mul.w	r3, r1, r3
 8010dd4:	18d1      	adds	r1, r2, r3
 8010dd6:	6a3a      	ldr	r2, [r7, #32]
 8010dd8:	69bb      	ldr	r3, [r7, #24]
 8010dda:	fba2 2303 	umull	r2, r3, r2, r3
 8010dde:	4419      	add	r1, r3
 8010de0:	460b      	mov	r3, r1
 8010de2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8010de6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8010dea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010dee:	2a00      	cmp	r2, #0
 8010df0:	f173 0300 	sbcs.w	r3, r3, #0
 8010df4:	db02      	blt.n	8010dfc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 8010df6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010dfa:	e000      	b.n	8010dfe <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 8010dfc:	4b18      	ldr	r3, [pc, #96]	; (8010e60 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 8010dfe:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	4618      	mov	r0, r3
 8010e04:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8010e08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010e0c:	1884      	adds	r4, r0, r2
 8010e0e:	eb41 0503 	adc.w	r5, r1, r3
 8010e12:	4622      	mov	r2, r4
 8010e14:	462b      	mov	r3, r5
 8010e16:	2a00      	cmp	r2, #0
 8010e18:	f173 0100 	sbcs.w	r1, r3, #0
 8010e1c:	da06      	bge.n	8010e2c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 8010e1e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010e22:	f04f 0100 	mov.w	r1, #0
 8010e26:	1812      	adds	r2, r2, r0
 8010e28:	eb41 0303 	adc.w	r3, r1, r3
 8010e2c:	f04f 0000 	mov.w	r0, #0
 8010e30:	f04f 0100 	mov.w	r1, #0
 8010e34:	0fd0      	lsrs	r0, r2, #31
 8010e36:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010e3a:	17d9      	asrs	r1, r3, #31
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8010e40:	4613      	mov	r3, r2
 8010e42:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8010e44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d003      	beq.n	8010e54 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 8010e4c:	f7fa f821 	bl	800ae92 <_ZNSt14numeric_limitsIlE3maxEv>
 8010e50:	4603      	mov	r3, r0
 8010e52:	e000      	b.n	8010e56 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 8010e54:	68bb      	ldr	r3, [r7, #8]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3730      	adds	r7, #48	; 0x30
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	c0000001 	.word	0xc0000001

08010e64 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	da01      	bge.n	8010e78 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8010e74:	f014 f9fb 	bl	802526e <abort>
    TFLITE_DCHECK_LT(i, size_);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	683a      	ldr	r2, [r7, #0]
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	db01      	blt.n	8010e86 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8010e82:	f014 f9f4 	bl	802526e <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2b05      	cmp	r3, #5
 8010e8c:	dd06      	ble.n	8010e9c <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	685a      	ldr	r2, [r3, #4]
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	009b      	lsls	r3, r3, #2
 8010e96:	4413      	add	r3, r2
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	e004      	b.n	8010ea6 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8010e9c:	687a      	ldr	r2, [r7, #4]
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	009b      	lsls	r3, r3, #2
 8010ea2:	4413      	add	r3, r2
 8010ea4:	685b      	ldr	r3, [r3, #4]
  }
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3708      	adds	r7, #8
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}

08010eae <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 8010eae:	b480      	push	{r7}
 8010eb0:	b083      	sub	sp, #12
 8010eb2:	af00      	add	r7, sp, #0
 8010eb4:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	2b05      	cmp	r3, #5
 8010ebc:	dd02      	ble.n	8010ec4 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	e001      	b.n	8010ec8 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	3304      	adds	r3, #4
  }
 8010ec8:	4618      	mov	r0, r3
 8010eca:	370c      	adds	r7, #12
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed2:	4770      	bx	lr

08010ed4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b086      	sub	sp, #24
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8010edc:	2301      	movs	r3, #1
 8010ede:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f7ff ffe4 	bl	8010eae <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8010ee6:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8010ee8:	2300      	movs	r3, #0
 8010eea:	613b      	str	r3, [r7, #16]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	693a      	ldr	r2, [r7, #16]
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	da0c      	bge.n	8010f10 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	009b      	lsls	r3, r3, #2
 8010efa:	68fa      	ldr	r2, [r7, #12]
 8010efc:	4413      	add	r3, r2
 8010efe:	681a      	ldr	r2, [r3, #0]
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	fb02 f303 	mul.w	r3, r2, r3
 8010f06:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	3301      	adds	r3, #1
 8010f0c:	613b      	str	r3, [r7, #16]
 8010f0e:	e7ed      	b.n	8010eec <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8010f10:	697b      	ldr	r3, [r7, #20]
  }
 8010f12:	4618      	mov	r0, r3
 8010f14:	3718      	adds	r7, #24
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}

08010f1a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 8010f1a:	b590      	push	{r4, r7, lr}
 8010f1c:	b085      	sub	sp, #20
 8010f1e:	af00      	add	r7, sp, #0
 8010f20:	6078      	str	r0, [r7, #4]
 8010f22:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f7fb f85e 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	6838      	ldr	r0, [r7, #0]
 8010f2e:	f7fb f85a 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010f32:	4603      	mov	r3, r0
 8010f34:	429c      	cmp	r4, r3
 8010f36:	d001      	beq.n	8010f3c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 8010f38:	f014 f999 	bl	802526e <abort>
  const int dims_count = shape.DimensionsCount();
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f7fb f852 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010f42:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 8010f44:	2300      	movs	r3, #0
 8010f46:	60fb      	str	r3, [r7, #12]
 8010f48:	68fa      	ldr	r2, [r7, #12]
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	da11      	bge.n	8010f74 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8010f50:	68f9      	ldr	r1, [r7, #12]
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f7ff ff86 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010f58:	4604      	mov	r4, r0
 8010f5a:	68f9      	ldr	r1, [r7, #12]
 8010f5c:	6838      	ldr	r0, [r7, #0]
 8010f5e:	f7ff ff81 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010f62:	4603      	mov	r3, r0
 8010f64:	429c      	cmp	r4, r3
 8010f66:	d001      	beq.n	8010f6c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 8010f68:	f014 f981 	bl	802526e <abort>
  for (int i = 0; i < dims_count; ++i) {
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	3301      	adds	r3, #1
 8010f70:	60fb      	str	r3, [r7, #12]
 8010f72:	e7e9      	b.n	8010f48 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f7ff ffad 	bl	8010ed4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8010f7a:	4603      	mov	r3, r0
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3714      	adds	r7, #20
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd90      	pop	{r4, r7, pc}

08010f84 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b086      	sub	sp, #24
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	60b9      	str	r1, [r7, #8]
 8010f8e:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010f96:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	dc02      	bgt.n	8010fa4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	425b      	negs	r3, r3
 8010fa2:	e000      	b.n	8010fa6 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8010fa8:	68fa      	ldr	r2, [r7, #12]
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	fa02 f303 	lsl.w	r3, r2, r3
 8010fb0:	68b9      	ldr	r1, [r7, #8]
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7ff fee6 	bl	8010d84 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	6939      	ldr	r1, [r7, #16]
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f000 fb4b 	bl	8011658 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8010fc2:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3718      	adds	r7, #24
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b084      	sub	sp, #16
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	60f8      	str	r0, [r7, #12]
 8010fd4:	60b9      	str	r1, [r7, #8]
 8010fd6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d101      	bne.n	8010fe2 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8010fde:	f014 f946 	bl	802526e <abort>
  TFLITE_DCHECK(node != nullptr);
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d101      	bne.n	8010fec <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8010fe8:	f014 f941 	bl	802526e <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	6819      	ldr	r1, [r3, #0]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	009b      	lsls	r3, r3, #2
 8010ff8:	440b      	add	r3, r1
 8010ffa:	685b      	ldr	r3, [r3, #4]
 8010ffc:	4619      	mov	r1, r3
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	4790      	blx	r2
 8011002:	4603      	mov	r3, r0
}
 8011004:	4618      	mov	r0, r3
 8011006:	3710      	adds	r7, #16
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 801100c:	b580      	push	{r7, lr}
 801100e:	b084      	sub	sp, #16
 8011010:	af00      	add	r7, sp, #0
 8011012:	60f8      	str	r0, [r7, #12]
 8011014:	60b9      	str	r1, [r7, #8]
 8011016:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8011018:	687a      	ldr	r2, [r7, #4]
 801101a:	68b9      	ldr	r1, [r7, #8]
 801101c:	68f8      	ldr	r0, [r7, #12]
 801101e:	f7ff ffd5 	bl	8010fcc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8011022:	4603      	mov	r3, r0
}
 8011024:	4618      	mov	r0, r3
 8011026:	3710      	adds	r7, #16
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 801102c:	b580      	push	{r7, lr}
 801102e:	b084      	sub	sp, #16
 8011030:	af00      	add	r7, sp, #0
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d101      	bne.n	8011042 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801103e:	f014 f916 	bl	802526e <abort>
  TFLITE_DCHECK(node != nullptr);
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d101      	bne.n	801104c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8011048:	f014 f911 	bl	802526e <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	6859      	ldr	r1, [r3, #4]
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	009b      	lsls	r3, r3, #2
 8011058:	440b      	add	r3, r1
 801105a:	685b      	ldr	r3, [r3, #4]
 801105c:	4619      	mov	r1, r3
 801105e:	68f8      	ldr	r0, [r7, #12]
 8011060:	4790      	blx	r2
 8011062:	4603      	mov	r3, r0
}
 8011064:	4618      	mov	r0, r3
 8011066:	3710      	adds	r7, #16
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}

0801106c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 801106c:	b580      	push	{r7, lr}
 801106e:	b08a      	sub	sp, #40	; 0x28
 8011070:	af00      	add	r7, sp, #0
 8011072:	60f8      	str	r0, [r7, #12]
 8011074:	60b9      	str	r1, [r7, #8]
 8011076:	607a      	str	r2, [r7, #4]
 8011078:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801107a:	6879      	ldr	r1, [r7, #4]
 801107c:	68f8      	ldr	r0, [r7, #12]
 801107e:	f7ff ff4c 	bl	8010f1a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8011082:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8011084:	2300      	movs	r3, #0
 8011086:	627b      	str	r3, [r7, #36]	; 0x24
 8011088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801108a:	6a3b      	ldr	r3, [r7, #32]
 801108c:	429a      	cmp	r2, r3
 801108e:	da1d      	bge.n	80110cc <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 8011090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011092:	009b      	lsls	r3, r3, #2
 8011094:	68ba      	ldr	r2, [r7, #8]
 8011096:	4413      	add	r3, r2
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 801109c:	f04f 0300 	mov.w	r3, #0
 80110a0:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 80110a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80110a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80110aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ae:	d501      	bpl.n	80110b4 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 80110b0:	69bb      	ldr	r3, [r7, #24]
 80110b2:	e000      	b.n	80110b6 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 80110b4:	69fb      	ldr	r3, [r7, #28]
 80110b6:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 80110b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ba:	009b      	lsls	r3, r3, #2
 80110bc:	683a      	ldr	r2, [r7, #0]
 80110be:	4413      	add	r3, r2
 80110c0:	697a      	ldr	r2, [r7, #20]
 80110c2:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 80110c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c6:	3301      	adds	r3, #1
 80110c8:	627b      	str	r3, [r7, #36]	; 0x24
 80110ca:	e7dd      	b.n	8011088 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 80110cc:	bf00      	nop
 80110ce:	3728      	adds	r7, #40	; 0x28
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}

080110d4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b08a      	sub	sp, #40	; 0x28
 80110d8:	af00      	add	r7, sp, #0
 80110da:	60f8      	str	r0, [r7, #12]
 80110dc:	60b9      	str	r1, [r7, #8]
 80110de:	607a      	str	r2, [r7, #4]
 80110e0:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80110e2:	6879      	ldr	r1, [r7, #4]
 80110e4:	68f8      	ldr	r0, [r7, #12]
 80110e6:	f7ff ff18 	bl	8010f1a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80110ea:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 80110ec:	2300      	movs	r3, #0
 80110ee:	627b      	str	r3, [r7, #36]	; 0x24
 80110f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110f2:	6a3b      	ldr	r3, [r7, #32]
 80110f4:	429a      	cmp	r2, r3
 80110f6:	da2a      	bge.n	801114e <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 80110f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fa:	009b      	lsls	r3, r3, #2
 80110fc:	68ba      	ldr	r2, [r7, #8]
 80110fe:	4413      	add	r3, r2
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 8011104:	4b14      	ldr	r3, [pc, #80]	; (8011158 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 8011106:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 8011108:	f04f 0300 	mov.w	r3, #0
 801110c:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 801110e:	edd7 7a07 	vldr	s15, [r7, #28]
 8011112:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8011116:	eef4 7ac7 	vcmpe.f32	s15, s14
 801111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801111e:	dd01      	ble.n	8011124 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 8011120:	69bb      	ldr	r3, [r7, #24]
 8011122:	e009      	b.n	8011138 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8011124:	edd7 7a07 	vldr	s15, [r7, #28]
 8011128:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801112c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011130:	d501      	bpl.n	8011136 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	e000      	b.n	8011138 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8011136:	69fb      	ldr	r3, [r7, #28]
 8011138:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 801113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113c:	009b      	lsls	r3, r3, #2
 801113e:	683a      	ldr	r2, [r7, #0]
 8011140:	4413      	add	r3, r2
 8011142:	693a      	ldr	r2, [r7, #16]
 8011144:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8011146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011148:	3301      	adds	r3, #1
 801114a:	627b      	str	r3, [r7, #36]	; 0x24
 801114c:	e7d0      	b.n	80110f0 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801114e:	bf00      	nop
 8011150:	3728      	adds	r7, #40	; 0x28
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}
 8011156:	bf00      	nop
 8011158:	40c00000 	.word	0x40c00000

0801115c <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 801115c:	b580      	push	{r7, lr}
 801115e:	b084      	sub	sp, #16
 8011160:	af00      	add	r7, sp, #0
 8011162:	60f8      	str	r0, [r7, #12]
 8011164:	60b9      	str	r1, [r7, #8]
 8011166:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801116c:	2b00      	cmp	r3, #0
 801116e:	d101      	bne.n	8011174 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 8011170:	f014 f87d 	bl	802526e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011178:	211c      	movs	r1, #28
 801117a:	68f8      	ldr	r0, [r7, #12]
 801117c:	4798      	blx	r3
 801117e:	4603      	mov	r3, r0
}
 8011180:	4618      	mov	r0, r3
 8011182:	3710      	adds	r7, #16
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}

08011188 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 8011188:	b590      	push	{r4, r7, lr}
 801118a:	b089      	sub	sp, #36	; 0x24
 801118c:	af02      	add	r7, sp, #8
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	691b      	ldr	r3, [r3, #16]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d101      	bne.n	801119e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801119a:	f014 f868 	bl	802526e <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	691b      	ldr	r3, [r3, #16]
 80111a2:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80111a4:	2200      	movs	r2, #0
 80111a6:	6839      	ldr	r1, [r7, #0]
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f7fa f95b 	bl	800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80111ae:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d10a      	bne.n	80111cc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	695c      	ldr	r4, [r3, #20]
 80111ba:	4b1a      	ldr	r3, [pc, #104]	; (8011224 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 80111bc:	9300      	str	r3, [sp, #0]
 80111be:	238e      	movs	r3, #142	; 0x8e
 80111c0:	4a19      	ldr	r2, [pc, #100]	; (8011228 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 80111c2:	491a      	ldr	r1, [pc, #104]	; (801122c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	47a0      	blx	r4
 80111c8:	2301      	movs	r3, #1
 80111ca:	e027      	b.n	801121c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80111cc:	2200      	movs	r2, #0
 80111ce:	6839      	ldr	r1, [r7, #0]
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f7fa f957 	bl	800b484 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80111d6:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d10a      	bne.n	80111f4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	695c      	ldr	r4, [r3, #20]
 80111e2:	4b13      	ldr	r3, [pc, #76]	; (8011230 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 80111e4:	9300      	str	r3, [sp, #0]
 80111e6:	2390      	movs	r3, #144	; 0x90
 80111e8:	4a0f      	ldr	r2, [pc, #60]	; (8011228 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 80111ea:	4910      	ldr	r1, [pc, #64]	; (801122c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	47a0      	blx	r4
 80111f0:	2301      	movs	r3, #1
 80111f2:	e013      	b.n	801121c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 80111f4:	693b      	ldr	r3, [r7, #16]
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	2b09      	cmp	r3, #9
 80111fa:	d105      	bne.n	8011208 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 80111fc:	697a      	ldr	r2, [r7, #20]
 80111fe:	68f9      	ldr	r1, [r7, #12]
 8011200:	6938      	ldr	r0, [r7, #16]
 8011202:	f000 fa9d 	bl	8011740 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 8011206:	e008      	b.n	801121a <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	2b03      	cmp	r3, #3
 801120e:	d104      	bne.n	801121a <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 8011210:	697a      	ldr	r2, [r7, #20]
 8011212:	68f9      	ldr	r1, [r7, #12]
 8011214:	6938      	ldr	r0, [r7, #16]
 8011216:	f000 fb35 	bl	8011884 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 801121a:	2300      	movs	r3, #0
}
 801121c:	4618      	mov	r0, r3
 801121e:	371c      	adds	r7, #28
 8011220:	46bd      	mov	sp, r7
 8011222:	bd90      	pop	{r4, r7, pc}
 8011224:	0802aa94 	.word	0x0802aa94
 8011228:	0802aa3c 	.word	0x0802aa3c
 801122c:	0802aa7c 	.word	0x0802aa7c
 8011230:	0802aaa8 	.word	0x0802aaa8

08011234 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 8011234:	b590      	push	{r4, r7, lr}
 8011236:	b0ad      	sub	sp, #180	; 0xb4
 8011238:	af02      	add	r7, sp, #8
 801123a:	6078      	str	r0, [r7, #4]
 801123c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	691b      	ldr	r3, [r3, #16]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d101      	bne.n	801124a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8011246:	f014 f812 	bl	802526e <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	691b      	ldr	r3, [r3, #16]
 801124e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8011252:	2200      	movs	r2, #0
 8011254:	6839      	ldr	r1, [r7, #0]
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f7ff fed8 	bl	801100c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801125c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8011260:	2200      	movs	r2, #0
 8011262:	6839      	ldr	r1, [r7, #0]
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f7ff fee1 	bl	801102c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801126a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801126e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011272:	7a1b      	ldrb	r3, [r3, #8]
 8011274:	2b09      	cmp	r3, #9
 8011276:	d032      	beq.n	80112de <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8011278:	2b09      	cmp	r3, #9
 801127a:	f300 808c 	bgt.w	8011396 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 801127e:	2b01      	cmp	r3, #1
 8011280:	d002      	beq.n	8011288 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 8011282:	2b03      	cmp	r3, #3
 8011284:	d059      	beq.n	801133a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 8011286:	e086      	b.n	8011396 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 8011288:	f107 030c 	add.w	r3, r7, #12
 801128c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8011290:	4618      	mov	r0, r3
 8011292:	f001 fb66 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8011296:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801129a:	f000 fb95 	bl	80119c8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801129e:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 80112a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112a4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80112a8:	4618      	mov	r0, r3
 80112aa:	f001 fb5a 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 80112ae:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80112b2:	f000 fb98 	bl	80119e6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80112b6:	4603      	mov	r3, r0
 80112b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80112bc:	f107 000c 	add.w	r0, r7, #12
 80112c0:	4621      	mov	r1, r4
 80112c2:	f7ff fed3 	bl	801106c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 80112c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7fa fe75 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 80112d0:	f107 030c 	add.w	r3, r7, #12
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7fa fe70 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 80112da:	2300      	movs	r3, #0
 80112dc:	e069      	b.n	80113b2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 80112de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80112e2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80112e6:	4618      	mov	r0, r3
 80112e8:	f001 fb3b 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 80112ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80112f0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80112f4:	4618      	mov	r0, r3
 80112f6:	f001 fb34 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 80112fa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80112fe:	f000 fb83 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8011302:	4604      	mov	r4, r0
 8011304:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8011308:	f000 fb8d 	bl	8011a26 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801130c:	4603      	mov	r3, r0
 801130e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8011312:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8011316:	9300      	str	r3, [sp, #0]
 8011318:	4623      	mov	r3, r4
 801131a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801131e:	f000 fb93 	bl	8011a48 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 8011322:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011326:	4618      	mov	r0, r3
 8011328:	f7fa fe47 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801132c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011330:	4618      	mov	r0, r3
 8011332:	f7fa fe42 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8011336:	2300      	movs	r3, #0
 8011338:	e03b      	b.n	80113b2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801133a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801133e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8011342:	4618      	mov	r0, r3
 8011344:	f001 fb0d 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 8011348:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801134c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011350:	4618      	mov	r0, r3
 8011352:	f001 fb06 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8011356:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801135a:	f000 fbc1 	bl	8011ae0 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801135e:	4604      	mov	r4, r0
 8011360:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8011364:	f000 fbcb 	bl	8011afe <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8011368:	4603      	mov	r3, r0
 801136a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801136e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8011372:	9300      	str	r3, [sp, #0]
 8011374:	4623      	mov	r3, r4
 8011376:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801137a:	f000 fbd1 	bl	8011b20 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 801137e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011382:	4618      	mov	r0, r3
 8011384:	f7fa fe19 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8011388:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801138c:	4618      	mov	r0, r3
 801138e:	f7fa fe14 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 8011392:	2300      	movs	r3, #0
 8011394:	e00d      	b.n	80113b2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	695c      	ldr	r4, [r3, #20]
 801139a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801139e:	7a1b      	ldrb	r3, [r3, #8]
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7f7 f9fb 	bl	800879c <TfLiteTypeGetName>
 80113a6:	4603      	mov	r3, r0
 80113a8:	461a      	mov	r2, r3
 80113aa:	4904      	ldr	r1, [pc, #16]	; (80113bc <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 80113b0:	2301      	movs	r3, #1
    }
  }
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	37ac      	adds	r7, #172	; 0xac
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd90      	pop	{r4, r7, pc}
 80113ba:	bf00      	nop
 80113bc:	0802aabc 	.word	0x0802aabc

080113c0 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d101      	bne.n	80113d8 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 80113d4:	f013 ff4b 	bl	802526e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113dc:	2104      	movs	r1, #4
 80113de:	68f8      	ldr	r0, [r7, #12]
 80113e0:	4798      	blx	r3
 80113e2:	4603      	mov	r3, r0
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3710      	adds	r7, #16
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}

080113ec <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 80113ec:	b590      	push	{r4, r7, lr}
 80113ee:	b087      	sub	sp, #28
 80113f0:	af02      	add	r7, sp, #8
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	691b      	ldr	r3, [r3, #16]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d101      	bne.n	8011402 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80113fe:	f013 ff36 	bl	802526e <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	691b      	ldr	r3, [r3, #16]
 8011406:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8011408:	2200      	movs	r2, #0
 801140a:	6839      	ldr	r1, [r7, #0]
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f7fa f829 	bl	800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8011412:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d10a      	bne.n	8011430 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	695c      	ldr	r4, [r3, #20]
 801141e:	4b20      	ldr	r3, [pc, #128]	; (80114a0 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 8011420:	9300      	str	r3, [sp, #0]
 8011422:	23cd      	movs	r3, #205	; 0xcd
 8011424:	4a1f      	ldr	r2, [pc, #124]	; (80114a4 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 8011426:	4920      	ldr	r1, [pc, #128]	; (80114a8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	47a0      	blx	r4
 801142c:	2301      	movs	r3, #1
 801142e:	e033      	b.n	8011498 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	2b09      	cmp	r3, #9
 8011436:	d115      	bne.n	8011464 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8011442:	4618      	mov	r0, r3
 8011444:	eef0 0a67 	vmov.f32	s1, s15
 8011448:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801144c:	f000 fbb3 	bl	8011bb6 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 8011450:	4603      	mov	r3, r0
 8011452:	461a      	mov	r2, r3
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	691b      	ldr	r3, [r3, #16]
 801145c:	b25a      	sxtb	r2, r3
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	705a      	strb	r2, [r3, #1]
 8011462:	e018      	b.n	8011496 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	2b03      	cmp	r3, #3
 801146a:	d114      	bne.n	8011496 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 8011476:	4618      	mov	r0, r3
 8011478:	eef0 0a67 	vmov.f32	s1, s15
 801147c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8011480:	f000 fbe8 	bl	8011c54 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 8011484:	4603      	mov	r3, r0
 8011486:	461a      	mov	r2, r3
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	691b      	ldr	r3, [r3, #16]
 8011490:	b2da      	uxtb	r2, r3
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 8011496:	2300      	movs	r3, #0
}
 8011498:	4618      	mov	r0, r3
 801149a:	3714      	adds	r7, #20
 801149c:	46bd      	mov	sp, r7
 801149e:	bd90      	pop	{r4, r7, pc}
 80114a0:	0802aa94 	.word	0x0802aa94
 80114a4:	0802aa3c 	.word	0x0802aa3c
 80114a8:	0802aa7c 	.word	0x0802aa7c

080114ac <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 80114ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114ae:	b0ad      	sub	sp, #180	; 0xb4
 80114b0:	af02      	add	r7, sp, #8
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	691b      	ldr	r3, [r3, #16]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d101      	bne.n	80114c2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 80114be:	f013 fed6 	bl	802526e <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	691b      	ldr	r3, [r3, #16]
 80114c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 80114ca:	2200      	movs	r2, #0
 80114cc:	6839      	ldr	r1, [r7, #0]
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f7ff fd9c 	bl	801100c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80114d4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 80114d8:	2200      	movs	r2, #0
 80114da:	6839      	ldr	r1, [r7, #0]
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f7ff fda5 	bl	801102c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80114e2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 80114e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80114ea:	7a1b      	ldrb	r3, [r3, #8]
 80114ec:	2b09      	cmp	r3, #9
 80114ee:	d032      	beq.n	8011556 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 80114f0:	2b09      	cmp	r3, #9
 80114f2:	f300 809c 	bgt.w	801162e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 80114f6:	2b01      	cmp	r3, #1
 80114f8:	d002      	beq.n	8011500 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 80114fa:	2b03      	cmp	r3, #3
 80114fc:	d062      	beq.n	80115c4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 80114fe:	e096      	b.n	801162e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 8011500:	f107 030c 	add.w	r3, r7, #12
 8011504:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8011508:	4618      	mov	r0, r3
 801150a:	f001 fa2a 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801150e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8011512:	f000 fa59 	bl	80119c8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8011516:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 8011518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801151c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011520:	4618      	mov	r0, r3
 8011522:	f001 fa1e 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 8011526:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801152a:	f000 fa5c 	bl	80119e6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801152e:	4603      	mov	r3, r0
 8011530:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011534:	f107 000c 	add.w	r0, r7, #12
 8011538:	4621      	mov	r1, r4
 801153a:	f7ff fdcb 	bl	80110d4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 801153e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011542:	4618      	mov	r0, r3
 8011544:	f7fa fd39 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 8011548:	f107 030c 	add.w	r3, r7, #12
 801154c:	4618      	mov	r0, r3
 801154e:	f7fa fd34 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 8011552:	2300      	movs	r3, #0
 8011554:	e079      	b.n	801164a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8011556:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801155a:	f993 4001 	ldrsb.w	r4, [r3, #1]
 801155e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011562:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 8011566:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801156a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801156e:	4618      	mov	r0, r3
 8011570:	f001 f9f7 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8011574:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8011578:	f000 fa46 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801157c:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 801157e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011582:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011586:	4618      	mov	r0, r3
 8011588:	f001 f9eb 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801158c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8011590:	f000 fa49 	bl	8011a26 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8011594:	4603      	mov	r3, r0
 8011596:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801159a:	9301      	str	r3, [sp, #4]
 801159c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80115a0:	9300      	str	r3, [sp, #0]
 80115a2:	4633      	mov	r3, r6
 80115a4:	4629      	mov	r1, r5
 80115a6:	4620      	mov	r0, r4
 80115a8:	f000 fba3 	bl	8011cf2 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 80115ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7fa fd02 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 80115b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7fa fcfd 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 80115c0:	2300      	movs	r3, #0
 80115c2:	e042      	b.n	801164a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80115c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80115c8:	78dc      	ldrb	r4, [r3, #3]
 80115ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80115ce:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 80115d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80115d4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80115d8:	4618      	mov	r0, r3
 80115da:	f001 f9c2 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80115de:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80115e2:	f000 fa7d 	bl	8011ae0 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80115e6:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 80115e8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80115ec:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80115f0:	4618      	mov	r0, r3
 80115f2:	f001 f9b6 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80115f6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80115fa:	f000 fa80 	bl	8011afe <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 80115fe:	4603      	mov	r3, r0
 8011600:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8011604:	9301      	str	r3, [sp, #4]
 8011606:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801160a:	9300      	str	r3, [sp, #0]
 801160c:	4633      	mov	r3, r6
 801160e:	4629      	mov	r1, r5
 8011610:	4620      	mov	r0, r4
 8011612:	f000 fbad 	bl	8011d70 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 8011616:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801161a:	4618      	mov	r0, r3
 801161c:	f7fa fccd 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 8011620:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011624:	4618      	mov	r0, r3
 8011626:	f7fa fcc8 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801162a:	2300      	movs	r3, #0
 801162c:	e00d      	b.n	801164a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	695c      	ldr	r4, [r3, #20]
 8011632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011636:	7a1b      	ldrb	r3, [r3, #8]
 8011638:	4618      	mov	r0, r3
 801163a:	f7f7 f8af 	bl	800879c <TfLiteTypeGetName>
 801163e:	4603      	mov	r3, r0
 8011640:	461a      	mov	r2, r3
 8011642:	4904      	ldr	r1, [pc, #16]	; (8011654 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8011648:	2301      	movs	r3, #1
    }
  }
}
 801164a:	4618      	mov	r0, r3
 801164c:	37ac      	adds	r7, #172	; 0xac
 801164e:	46bd      	mov	sp, r7
 8011650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011652:	bf00      	nop
 8011654:	0802aabc 	.word	0x0802aabc

08011658 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8011658:	b5f0      	push	{r4, r5, r6, r7, lr}
 801165a:	b089      	sub	sp, #36	; 0x24
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8011662:	6839      	ldr	r1, [r7, #0]
 8011664:	2900      	cmp	r1, #0
 8011666:	da06      	bge.n	8011676 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8011668:	4b31      	ldr	r3, [pc, #196]	; (8011730 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 801166a:	4a32      	ldr	r2, [pc, #200]	; (8011734 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 801166c:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8011670:	4831      	ldr	r0, [pc, #196]	; (8011738 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8011672:	f013 fe03 	bl	802527c <__assert_func>
  assert(exponent <= 31);
 8011676:	6839      	ldr	r1, [r7, #0]
 8011678:	291f      	cmp	r1, #31
 801167a:	dd06      	ble.n	801168a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 801167c:	4b2f      	ldr	r3, [pc, #188]	; (801173c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 801167e:	4a2d      	ldr	r2, [pc, #180]	; (8011734 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8011680:	f240 1167 	movw	r1, #359	; 0x167
 8011684:	482c      	ldr	r0, [pc, #176]	; (8011738 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8011686:	f013 fdf9 	bl	802527c <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 801168a:	f04f 0001 	mov.w	r0, #1
 801168e:	f04f 0100 	mov.w	r1, #0
 8011692:	683c      	ldr	r4, [r7, #0]
 8011694:	f1a4 0620 	sub.w	r6, r4, #32
 8011698:	f1c4 0520 	rsb	r5, r4, #32
 801169c:	fa01 f304 	lsl.w	r3, r1, r4
 80116a0:	fa00 f606 	lsl.w	r6, r0, r6
 80116a4:	4333      	orrs	r3, r6
 80116a6:	fa20 f505 	lsr.w	r5, r0, r5
 80116aa:	432b      	orrs	r3, r5
 80116ac:	fa00 f204 	lsl.w	r2, r0, r4
 80116b0:	4613      	mov	r3, r2
 80116b2:	3b01      	subs	r3, #1
 80116b4:	4618      	mov	r0, r3
 80116b6:	f000 fb93 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80116ba:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 80116bc:	2000      	movs	r0, #0
 80116be:	f000 fb8f 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80116c2:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 80116c4:	2001      	movs	r0, #1
 80116c6:	f000 fb8b 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80116ca:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 80116cc:	69f9      	ldr	r1, [r7, #28]
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f000 fb91 	bl	8011df6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80116d4:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 80116d6:	2101      	movs	r1, #1
 80116d8:	69f8      	ldr	r0, [r7, #28]
 80116da:	f000 fb9a 	bl	8011e12 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 80116de:	4604      	mov	r4, r0
 80116e0:	69b9      	ldr	r1, [r7, #24]
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f000 fba4 	bl	8011e30 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80116e8:	4603      	mov	r3, r0
 80116ea:	6979      	ldr	r1, [r7, #20]
 80116ec:	4618      	mov	r0, r3
 80116ee:	f000 fb82 	bl	8011df6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80116f2:	4603      	mov	r3, r0
 80116f4:	4619      	mov	r1, r3
 80116f6:	4620      	mov	r0, r4
 80116f8:	f000 fbae 	bl	8011e58 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80116fc:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 80116fe:	6839      	ldr	r1, [r7, #0]
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f000 fb86 	bl	8011e12 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8011706:	4604      	mov	r4, r0
 8011708:	68f9      	ldr	r1, [r7, #12]
 801170a:	6938      	ldr	r0, [r7, #16]
 801170c:	f000 fbb2 	bl	8011e74 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8011710:	4603      	mov	r3, r0
 8011712:	6979      	ldr	r1, [r7, #20]
 8011714:	4618      	mov	r0, r3
 8011716:	f000 fb6e 	bl	8011df6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801171a:	4603      	mov	r3, r0
 801171c:	4619      	mov	r1, r3
 801171e:	4620      	mov	r0, r4
 8011720:	f000 fb9a 	bl	8011e58 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8011724:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 8011726:	4618      	mov	r0, r3
 8011728:	3724      	adds	r7, #36	; 0x24
 801172a:	46bd      	mov	sp, r7
 801172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801172e:	bf00      	nop
 8011730:	0802ab28 	.word	0x0802ab28
 8011734:	0802ab38 	.word	0x0802ab38
 8011738:	0802ab94 	.word	0x0802ab94
 801173c:	0802ac08 	.word	0x0802ac08

08011740 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8011740:	b590      	push	{r4, r7, lr}
 8011742:	b099      	sub	sp, #100	; 0x64
 8011744:	af00      	add	r7, sp, #0
 8011746:	60f8      	str	r0, [r7, #12]
 8011748:	60b9      	str	r1, [r7, #8]
 801174a:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 801174c:	f04f 0300 	mov.w	r3, #0
 8011750:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 8011752:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8011756:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	ed93 7a03 	vldr	s14, [r3, #12]
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	edd3 7a03 	vldr	s15, [r3, #12]
 8011764:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 8011768:	ee16 0a90 	vmov	r0, s13
 801176c:	f7ee ff1e 	bl	80005ac <__aeabi_f2d>
 8011770:	4602      	mov	r2, r0
 8011772:	460b      	mov	r3, r1
 8011774:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 8011778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801177c:	68f9      	ldr	r1, [r7, #12]
 801177e:	4618      	mov	r0, r3
 8011780:	f7fa fc95 	bl	800c0ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8011784:	f107 0310 	add.w	r3, r7, #16
 8011788:	68b9      	ldr	r1, [r7, #8]
 801178a:	4618      	mov	r0, r3
 801178c:	f7fa fc8f 	bl	800c0ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f103 0214 	add.w	r2, r3, #20
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	3318      	adds	r3, #24
 801179a:	4619      	mov	r1, r3
 801179c:	4610      	mov	r0, r2
 801179e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80117a2:	f7f9 fb7f 	bl	800aea4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 80117a6:	f7f9 fd4c 	bl	800b242 <_ZNSt14numeric_limitsIaE3minEv>
 80117aa:	4603      	mov	r3, r0
 80117ac:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80117b8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80117bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80117c0:	eeb0 0a66 	vmov.f32	s0, s13
 80117c4:	f013 fc0e 	bl	8024fe4 <roundf>
 80117c8:	eef0 7a40 	vmov.f32	s15, s0
      output->params.zero_point +
 80117cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80117d0:	ee17 3a90 	vmov	r3, s15
 80117d4:	4423      	add	r3, r4
 80117d6:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80117d8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80117dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80117e0:	4611      	mov	r1, r2
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7fa fa8a 	bl	800bcfc <_ZSt3maxIlERKT_S2_S2_>
 80117e8:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 80117ea:	681a      	ldr	r2, [r3, #0]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 80117f0:	f7ff fabb 	bl	8010d6a <_ZNSt14numeric_limitsIfE8infinityEv>
 80117f4:	eeb0 7a40 	vmov.f32	s14, s0
  data->params.quantized_activation_max =
 80117f8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80117fc:	eef4 7a47 	vcmp.f32	s15, s14
 8011800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011804:	d103      	bne.n	801180e <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8011806:	f7f9 fd25 	bl	800b254 <_ZNSt14numeric_limitsIaE3maxEv>
 801180a:	4603      	mov	r3, r0
 801180c:	e022      	b.n	8011854 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801180e:	f7f9 fd21 	bl	800b254 <_ZNSt14numeric_limitsIaE3maxEv>
 8011812:	4603      	mov	r3, r0
 8011814:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 8011816:	68bb      	ldr	r3, [r7, #8]
 8011818:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	edd3 7a03 	vldr	s15, [r3, #12]
 8011820:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8011824:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011828:	eeb0 0a66 	vmov.f32	s0, s13
 801182c:	f013 fbda 	bl	8024fe4 <roundf>
 8011830:	eef0 7a40 	vmov.f32	s15, s0
                     output->params.zero_point +
 8011834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011838:	ee17 3a90 	vmov	r3, s15
 801183c:	4423      	add	r3, r4
 801183e:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8011840:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8011844:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011848:	4611      	mov	r1, r2
 801184a:	4618      	mov	r0, r3
 801184c:	f7fa fa42 	bl	800bcd4 <_ZSt3minIlERKT_S2_S2_>
 8011850:	4603      	mov	r3, r0
  data->params.quantized_activation_max =
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	687a      	ldr	r2, [r7, #4]
 8011856:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	691a      	ldr	r2, [r3, #16]
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	691a      	ldr	r2, [r3, #16]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 8011868:	f107 0310 	add.w	r3, r7, #16
 801186c:	4618      	mov	r0, r3
 801186e:	f7fa fba4 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 8011872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011876:	4618      	mov	r0, r3
 8011878:	f7fa fb9f 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
}
 801187c:	bf00      	nop
 801187e:	3764      	adds	r7, #100	; 0x64
 8011880:	46bd      	mov	sp, r7
 8011882:	bd90      	pop	{r4, r7, pc}

08011884 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8011884:	b590      	push	{r4, r7, lr}
 8011886:	b099      	sub	sp, #100	; 0x64
 8011888:	af00      	add	r7, sp, #0
 801188a:	60f8      	str	r0, [r7, #12]
 801188c:	60b9      	str	r1, [r7, #8]
 801188e:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 8011890:	f04f 0300 	mov.w	r3, #0
 8011894:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 8011896:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801189a:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	ed93 7a03 	vldr	s14, [r3, #12]
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80118a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 80118ac:	ee16 0a90 	vmov	r0, s13
 80118b0:	f7ee fe7c 	bl	80005ac <__aeabi_f2d>
 80118b4:	4602      	mov	r2, r0
 80118b6:	460b      	mov	r3, r1
 80118b8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 80118bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80118c0:	68f9      	ldr	r1, [r7, #12]
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7fa fbf3 	bl	800c0ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 80118c8:	f107 0310 	add.w	r3, r7, #16
 80118cc:	68b9      	ldr	r1, [r7, #8]
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7fa fbed 	bl	800c0ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f103 0214 	add.w	r2, r3, #20
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	3318      	adds	r3, #24
 80118de:	4619      	mov	r1, r3
 80118e0:	4610      	mov	r0, r2
 80118e2:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80118e6:	f7f9 fadd 	bl	800aea4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 80118ea:	f7f9 fcbb 	bl	800b264 <_ZNSt14numeric_limitsIhE3minEv>
 80118ee:	4603      	mov	r3, r0
 80118f0:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80118fc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8011900:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011904:	eeb0 0a66 	vmov.f32	s0, s13
 8011908:	f013 fb6c 	bl	8024fe4 <roundf>
 801190c:	eef0 7a40 	vmov.f32	s15, s0
      output->params.zero_point +
 8011910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011914:	ee17 3a90 	vmov	r3, s15
 8011918:	4423      	add	r3, r4
 801191a:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801191c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011920:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011924:	4611      	mov	r1, r2
 8011926:	4618      	mov	r0, r3
 8011928:	f7fa f9e8 	bl	800bcfc <_ZSt3maxIlERKT_S2_S2_>
 801192c:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801192e:	681a      	ldr	r2, [r3, #0]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 8011934:	f7ff fa19 	bl	8010d6a <_ZNSt14numeric_limitsIfE8infinityEv>
 8011938:	eeb0 7a40 	vmov.f32	s14, s0
  data->params.quantized_activation_max =
 801193c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8011940:	eef4 7a47 	vcmp.f32	s15, s14
 8011944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011948:	d103      	bne.n	8011952 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801194a:	f7f9 fc93 	bl	800b274 <_ZNSt14numeric_limitsIhE3maxEv>
 801194e:	4603      	mov	r3, r0
 8011950:	e022      	b.n	8011998 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 8011952:	f7f9 fc8f 	bl	800b274 <_ZNSt14numeric_limitsIhE3maxEv>
 8011956:	4603      	mov	r3, r0
 8011958:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	edd3 7a03 	vldr	s15, [r3, #12]
 8011964:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8011968:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801196c:	eeb0 0a66 	vmov.f32	s0, s13
 8011970:	f013 fb38 	bl	8024fe4 <roundf>
 8011974:	eef0 7a40 	vmov.f32	s15, s0
                     output->params.zero_point +
 8011978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801197c:	ee17 3a90 	vmov	r3, s15
 8011980:	4423      	add	r3, r4
 8011982:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8011984:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8011988:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801198c:	4611      	mov	r1, r2
 801198e:	4618      	mov	r0, r3
 8011990:	f7fa f9a0 	bl	800bcd4 <_ZSt3minIlERKT_S2_S2_>
 8011994:	4603      	mov	r3, r0
  data->params.quantized_activation_max =
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	687a      	ldr	r2, [r7, #4]
 801199a:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	691a      	ldr	r2, [r3, #16]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	691a      	ldr	r2, [r3, #16]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 80119ac:	f107 0310 	add.w	r3, r7, #16
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7fa fb02 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 80119b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7fa fafd 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
}
 80119c0:	bf00      	nop
 80119c2:	3764      	adds	r7, #100	; 0x64
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd90      	pop	{r4, r7, pc}

080119c8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b082      	sub	sp, #8
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d101      	bne.n	80119da <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 80119d6:	f013 fc4a 	bl	802526e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
}
 80119de:	4618      	mov	r0, r3
 80119e0:	3708      	adds	r7, #8
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}

080119e6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80119e6:	b480      	push	{r7}
 80119e8:	b083      	sub	sp, #12
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d002      	beq.n	80119fa <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	e000      	b.n	80119fc <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 80119fa:	2300      	movs	r3, #0
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	370c      	adds	r7, #12
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d101      	bne.n	8011a1a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8011a16:	f013 fc2a 	bl	802526e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3708      	adds	r7, #8
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}

08011a26 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8011a26:	b480      	push	{r7}
 8011a28:	b083      	sub	sp, #12
 8011a2a:	af00      	add	r7, sp, #0
 8011a2c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d002      	beq.n	8011a3a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	e000      	b.n	8011a3c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 8011a3a:	2300      	movs	r3, #0
}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	370c      	adds	r7, #12
 8011a40:	46bd      	mov	sp, r7
 8011a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a46:	4770      	bx	lr

08011a48 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8011a48:	b590      	push	{r4, r7, lr}
 8011a4a:	b089      	sub	sp, #36	; 0x24
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	60f8      	str	r0, [r7, #12]
 8011a50:	60b9      	str	r1, [r7, #8]
 8011a52:	607a      	str	r2, [r7, #4]
 8011a54:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8011a56:	6879      	ldr	r1, [r7, #4]
 8011a58:	68b8      	ldr	r0, [r7, #8]
 8011a5a:	f7ff fa5e 	bl	8010f1a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8011a5e:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8011a60:	2300      	movs	r3, #0
 8011a62:	61fb      	str	r3, [r7, #28]
 8011a64:	69fa      	ldr	r2, [r7, #28]
 8011a66:	69bb      	ldr	r3, [r7, #24]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	da35      	bge.n	8011ad8 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8011a6c:	69fb      	ldr	r3, [r7, #28]
 8011a6e:	683a      	ldr	r2, [r7, #0]
 8011a70:	4413      	add	r3, r2
 8011a72:	f993 3000 	ldrsb.w	r3, [r3]
 8011a76:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	68db      	ldr	r3, [r3, #12]
 8011a80:	697a      	ldr	r2, [r7, #20]
 8011a82:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	f7ff fa79 	bl	8010f84 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8011a92:	4603      	mov	r3, r0
        data.params.output_offset +
 8011a94:	4423      	add	r3, r4
    int32_t clamped =
 8011a96:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	3304      	adds	r3, #4
 8011a9c:	f107 0210 	add.w	r2, r7, #16
 8011aa0:	4611      	mov	r1, r2
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7fa f92a 	bl	800bcfc <_ZSt3maxIlERKT_S2_S2_>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	3308      	adds	r3, #8
 8011ab2:	f107 0210 	add.w	r2, r7, #16
 8011ab6:	4611      	mov	r1, r2
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fa f90b 	bl	800bcd4 <_ZSt3minIlERKT_S2_S2_>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8011ac4:	6939      	ldr	r1, [r7, #16]
 8011ac6:	69fb      	ldr	r3, [r7, #28]
 8011ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011aca:	4413      	add	r3, r2
 8011acc:	b24a      	sxtb	r2, r1
 8011ace:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8011ad0:	69fb      	ldr	r3, [r7, #28]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	61fb      	str	r3, [r7, #28]
 8011ad6:	e7c5      	b.n	8011a64 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8011ad8:	bf00      	nop
 8011ada:	3724      	adds	r7, #36	; 0x24
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd90      	pop	{r4, r7, pc}

08011ae0 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b082      	sub	sp, #8
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d101      	bne.n	8011af2 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 8011aee:	f013 fbbe 	bl	802526e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3708      	adds	r7, #8
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}

08011afe <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8011afe:	b480      	push	{r7}
 8011b00:	b083      	sub	sp, #12
 8011b02:	af00      	add	r7, sp, #0
 8011b04:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d002      	beq.n	8011b12 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	e000      	b.n	8011b14 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 8011b12:	2300      	movs	r3, #0
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	370c      	adds	r7, #12
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr

08011b20 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8011b20:	b590      	push	{r4, r7, lr}
 8011b22:	b089      	sub	sp, #36	; 0x24
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	60f8      	str	r0, [r7, #12]
 8011b28:	60b9      	str	r1, [r7, #8]
 8011b2a:	607a      	str	r2, [r7, #4]
 8011b2c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8011b2e:	6879      	ldr	r1, [r7, #4]
 8011b30:	68b8      	ldr	r0, [r7, #8]
 8011b32:	f7ff f9f2 	bl	8010f1a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8011b36:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8011b38:	2300      	movs	r3, #0
 8011b3a:	61fb      	str	r3, [r7, #28]
 8011b3c:	69fa      	ldr	r2, [r7, #28]
 8011b3e:	69bb      	ldr	r3, [r7, #24]
 8011b40:	429a      	cmp	r2, r3
 8011b42:	da34      	bge.n	8011bae <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8011b44:	69fb      	ldr	r3, [r7, #28]
 8011b46:	683a      	ldr	r2, [r7, #0]
 8011b48:	4413      	add	r3, r2
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	68db      	ldr	r3, [r3, #12]
 8011b56:	697a      	ldr	r2, [r7, #20]
 8011b58:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8011b62:	461a      	mov	r2, r3
 8011b64:	f7ff fa0e 	bl	8010f84 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8011b68:	4603      	mov	r3, r0
        data.params.output_offset +
 8011b6a:	4423      	add	r3, r4
    int32_t clamped =
 8011b6c:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	3304      	adds	r3, #4
 8011b72:	f107 0210 	add.w	r2, r7, #16
 8011b76:	4611      	mov	r1, r2
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f7fa f8bf 	bl	800bcfc <_ZSt3maxIlERKT_S2_S2_>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	3308      	adds	r3, #8
 8011b88:	f107 0210 	add.w	r2, r7, #16
 8011b8c:	4611      	mov	r1, r2
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f7fa f8a0 	bl	800bcd4 <_ZSt3minIlERKT_S2_S2_>
 8011b94:	4603      	mov	r3, r0
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8011b9a:	6939      	ldr	r1, [r7, #16]
 8011b9c:	69fb      	ldr	r3, [r7, #28]
 8011b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ba0:	4413      	add	r3, r2
 8011ba2:	b2ca      	uxtb	r2, r1
 8011ba4:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8011ba6:	69fb      	ldr	r3, [r7, #28]
 8011ba8:	3301      	adds	r3, #1
 8011baa:	61fb      	str	r3, [r7, #28]
 8011bac:	e7c6      	b.n	8011b3c <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8011bae:	bf00      	nop
 8011bb0:	3724      	adds	r7, #36	; 0x24
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd90      	pop	{r4, r7, pc}

08011bb6 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8011bb6:	b5b0      	push	{r4, r5, r7, lr}
 8011bb8:	b088      	sub	sp, #32
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	ed87 0a03 	vstr	s0, [r7, #12]
 8011bc0:	edc7 0a02 	vstr	s1, [r7, #8]
 8011bc4:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8011bc6:	ed97 7a03 	vldr	s14, [r7, #12]
 8011bca:	edd7 7a02 	vldr	s15, [r7, #8]
 8011bce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011bd2:	ee16 0a90 	vmov	r0, s13
 8011bd6:	f7ee fce9 	bl	80005ac <__aeabi_f2d>
 8011bda:	4602      	mov	r2, r0
 8011bdc:	460b      	mov	r3, r1
 8011bde:	ec43 2b10 	vmov	d0, r2, r3
 8011be2:	f013 f9b9 	bl	8024f58 <round>
 8011be6:	ec55 4b10 	vmov	r4, r5, d0
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f7ee fccc 	bl	8000588 <__aeabi_i2d>
 8011bf0:	4602      	mov	r2, r0
 8011bf2:	460b      	mov	r3, r1
 8011bf4:	4620      	mov	r0, r4
 8011bf6:	4629      	mov	r1, r5
 8011bf8:	f7ee fb7a 	bl	80002f0 <__adddf3>
 8011bfc:	4602      	mov	r2, r0
 8011bfe:	460b      	mov	r3, r1
 8011c00:	4610      	mov	r0, r2
 8011c02:	4619      	mov	r1, r3
 8011c04:	f7ee ffc4 	bl	8000b90 <__aeabi_d2iz>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8011c0c:	f7f9 fb19 	bl	800b242 <_ZNSt14numeric_limitsIaE3minEv>
 8011c10:	4603      	mov	r3, r0
 8011c12:	61bb      	str	r3, [r7, #24]
 8011c14:	f107 0214 	add.w	r2, r7, #20
 8011c18:	f107 0318 	add.w	r3, r7, #24
 8011c1c:	4611      	mov	r1, r2
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fa f86c 	bl	800bcfc <_ZSt3maxIlERKT_S2_S2_>
 8011c24:	4603      	mov	r3, r0
  result =
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8011c2a:	f7f9 fb13 	bl	800b254 <_ZNSt14numeric_limitsIaE3maxEv>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	61fb      	str	r3, [r7, #28]
 8011c32:	f107 0214 	add.w	r2, r7, #20
 8011c36:	f107 031c 	add.w	r3, r7, #28
 8011c3a:	4611      	mov	r1, r2
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7fa f849 	bl	800bcd4 <_ZSt3minIlERKT_S2_S2_>
 8011c42:	4603      	mov	r3, r0
  result =
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	617b      	str	r3, [r7, #20]
  return result;
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	b25b      	sxtb	r3, r3
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3720      	adds	r7, #32
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bdb0      	pop	{r4, r5, r7, pc}

08011c54 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8011c54:	b5b0      	push	{r4, r5, r7, lr}
 8011c56:	b088      	sub	sp, #32
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	ed87 0a03 	vstr	s0, [r7, #12]
 8011c5e:	edc7 0a02 	vstr	s1, [r7, #8]
 8011c62:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8011c64:	ed97 7a03 	vldr	s14, [r7, #12]
 8011c68:	edd7 7a02 	vldr	s15, [r7, #8]
 8011c6c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011c70:	ee16 0a90 	vmov	r0, s13
 8011c74:	f7ee fc9a 	bl	80005ac <__aeabi_f2d>
 8011c78:	4602      	mov	r2, r0
 8011c7a:	460b      	mov	r3, r1
 8011c7c:	ec43 2b10 	vmov	d0, r2, r3
 8011c80:	f013 f96a 	bl	8024f58 <round>
 8011c84:	ec55 4b10 	vmov	r4, r5, d0
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f7ee fc7d 	bl	8000588 <__aeabi_i2d>
 8011c8e:	4602      	mov	r2, r0
 8011c90:	460b      	mov	r3, r1
 8011c92:	4620      	mov	r0, r4
 8011c94:	4629      	mov	r1, r5
 8011c96:	f7ee fb2b 	bl	80002f0 <__adddf3>
 8011c9a:	4602      	mov	r2, r0
 8011c9c:	460b      	mov	r3, r1
 8011c9e:	4610      	mov	r0, r2
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	f7ee ff75 	bl	8000b90 <__aeabi_d2iz>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8011caa:	f7f9 fadb 	bl	800b264 <_ZNSt14numeric_limitsIhE3minEv>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	61bb      	str	r3, [r7, #24]
 8011cb2:	f107 0214 	add.w	r2, r7, #20
 8011cb6:	f107 0318 	add.w	r3, r7, #24
 8011cba:	4611      	mov	r1, r2
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7fa f81d 	bl	800bcfc <_ZSt3maxIlERKT_S2_S2_>
 8011cc2:	4603      	mov	r3, r0
  result =
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8011cc8:	f7f9 fad4 	bl	800b274 <_ZNSt14numeric_limitsIhE3maxEv>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	61fb      	str	r3, [r7, #28]
 8011cd0:	f107 0214 	add.w	r2, r7, #20
 8011cd4:	f107 031c 	add.w	r3, r7, #28
 8011cd8:	4611      	mov	r1, r2
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7f9 fffa 	bl	800bcd4 <_ZSt3minIlERKT_S2_S2_>
 8011ce0:	4603      	mov	r3, r0
  result =
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	617b      	str	r3, [r7, #20]
  return result;
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	b2db      	uxtb	r3, r3
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3720      	adds	r7, #32
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bdb0      	pop	{r4, r5, r7, pc}

08011cf2 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8011cf2:	b580      	push	{r7, lr}
 8011cf4:	b088      	sub	sp, #32
 8011cf6:	af00      	add	r7, sp, #0
 8011cf8:	60ba      	str	r2, [r7, #8]
 8011cfa:	607b      	str	r3, [r7, #4]
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	73fb      	strb	r3, [r7, #15]
 8011d00:	460b      	mov	r3, r1
 8011d02:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8011d04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d06:	68b8      	ldr	r0, [r7, #8]
 8011d08:	f7ff f907 	bl	8010f1a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8011d0c:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8011d0e:	2300      	movs	r3, #0
 8011d10:	61fb      	str	r3, [r7, #28]
 8011d12:	69fa      	ldr	r2, [r7, #28]
 8011d14:	69bb      	ldr	r3, [r7, #24]
 8011d16:	429a      	cmp	r2, r3
 8011d18:	da26      	bge.n	8011d68 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 8011d1a:	69fb      	ldr	r3, [r7, #28]
 8011d1c:	687a      	ldr	r2, [r7, #4]
 8011d1e:	4413      	add	r3, r2
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8011d24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d28:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	dd04      	ble.n	8011d3a <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 8011d30:	f107 030e 	add.w	r3, r7, #14
 8011d34:	f993 3000 	ldrsb.w	r3, [r3]
 8011d38:	e00c      	b.n	8011d54 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8011d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d3e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011d42:	429a      	cmp	r2, r3
 8011d44:	da04      	bge.n	8011d50 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 8011d46:	f107 030f 	add.w	r3, r7, #15
 8011d4a:	f993 3000 	ldrsb.w	r3, [r3]
 8011d4e:	e001      	b.n	8011d54 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8011d50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d54:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8011d56:	69fb      	ldr	r3, [r7, #28]
 8011d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d5a:	4413      	add	r3, r2
 8011d5c:	7dba      	ldrb	r2, [r7, #22]
 8011d5e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8011d60:	69fb      	ldr	r3, [r7, #28]
 8011d62:	3301      	adds	r3, #1
 8011d64:	61fb      	str	r3, [r7, #28]
 8011d66:	e7d4      	b.n	8011d12 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8011d68:	bf00      	nop
 8011d6a:	3720      	adds	r7, #32
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b088      	sub	sp, #32
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	60ba      	str	r2, [r7, #8]
 8011d78:	607b      	str	r3, [r7, #4]
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	73fb      	strb	r3, [r7, #15]
 8011d7e:	460b      	mov	r3, r1
 8011d80:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8011d82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d84:	68b8      	ldr	r0, [r7, #8]
 8011d86:	f7ff f8c8 	bl	8010f1a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8011d8a:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	61fb      	str	r3, [r7, #28]
 8011d90:	69fa      	ldr	r2, [r7, #28]
 8011d92:	69bb      	ldr	r3, [r7, #24]
 8011d94:	429a      	cmp	r2, r3
 8011d96:	da1f      	bge.n	8011dd8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 8011d98:	69fb      	ldr	r3, [r7, #28]
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	4413      	add	r3, r2
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8011da2:	7bbb      	ldrb	r3, [r7, #14]
 8011da4:	7dfa      	ldrb	r2, [r7, #23]
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d903      	bls.n	8011db2 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 8011daa:	f107 030e 	add.w	r3, r7, #14
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	e008      	b.n	8011dc4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8011db2:	7bfb      	ldrb	r3, [r7, #15]
 8011db4:	7dfa      	ldrb	r2, [r7, #23]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d203      	bcs.n	8011dc2 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 8011dba:	f107 030f 	add.w	r3, r7, #15
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	e000      	b.n	8011dc4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8011dc2:	7dfb      	ldrb	r3, [r7, #23]
 8011dc4:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8011dc6:	69fb      	ldr	r3, [r7, #28]
 8011dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011dca:	4413      	add	r3, r2
 8011dcc:	7dba      	ldrb	r2, [r7, #22]
 8011dce:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8011dd0:	69fb      	ldr	r3, [r7, #28]
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	61fb      	str	r3, [r7, #28]
 8011dd6:	e7db      	b.n	8011d90 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8011dd8:	bf00      	nop
 8011dda:	3720      	adds	r7, #32
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}

08011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8011de0:	b480      	push	{r7}
 8011de2:	b083      	sub	sp, #12
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
  return x;
 8011de8:	687b      	ldr	r3, [r7, #4]
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	370c      	adds	r7, #12
 8011dee:	46bd      	mov	sp, r7
 8011df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df4:	4770      	bx	lr

08011df6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8011df6:	b480      	push	{r7}
 8011df8:	b083      	sub	sp, #12
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6078      	str	r0, [r7, #4]
 8011dfe:	6039      	str	r1, [r7, #0]
  return a & b;
 8011e00:	687a      	ldr	r2, [r7, #4]
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	4013      	ands	r3, r2
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	370c      	adds	r7, #12
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e10:	4770      	bx	lr

08011e12 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8011e12:	b480      	push	{r7}
 8011e14:	b083      	sub	sp, #12
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
 8011e1a:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8011e1c:	687a      	ldr	r2, [r7, #4]
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	fa42 f303 	asr.w	r3, r2, r3
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	370c      	adds	r7, #12
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr

08011e30 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8011e3a:	687a      	ldr	r2, [r7, #4]
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	bfb4      	ite	lt
 8011e42:	2301      	movlt	r3, #1
 8011e44:	2300      	movge	r3, #0
 8011e46:	b2db      	uxtb	r3, r3
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f000 f827 	bl	8011e9c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011e4e:	4603      	mov	r3, r0
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3708      	adds	r7, #8
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}

08011e58 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8011e58:	b480      	push	{r7}
 8011e5a:	b083      	sub	sp, #12
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
 8011e60:	6039      	str	r1, [r7, #0]
  return a + b;
 8011e62:	687a      	ldr	r2, [r7, #4]
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	4413      	add	r3, r2
}
 8011e68:	4618      	mov	r0, r3
 8011e6a:	370c      	adds	r7, #12
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e72:	4770      	bx	lr

08011e74 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b082      	sub	sp, #8
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8011e7e:	687a      	ldr	r2, [r7, #4]
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	429a      	cmp	r2, r3
 8011e84:	bfcc      	ite	gt
 8011e86:	2301      	movgt	r3, #1
 8011e88:	2300      	movle	r3, #0
 8011e8a:	b2db      	uxtb	r3, r3
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f000 f805 	bl	8011e9c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011e92:	4603      	mov	r3, r0
}
 8011e94:	4618      	mov	r0, r3
 8011e96:	3708      	adds	r7, #8
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}

08011e9c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d004      	beq.n	8011eb4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8011eaa:	2000      	movs	r0, #0
 8011eac:	f000 f807 	bl	8011ebe <_ZN8gemmlowp6BitNotIlEET_S1_>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	e000      	b.n	8011eb6 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8011eb4:	2300      	movs	r3, #0
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3708      	adds	r7, #8
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}

08011ebe <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8011ebe:	b480      	push	{r7}
 8011ec0:	b083      	sub	sp, #12
 8011ec2:	af00      	add	r7, sp, #0
 8011ec4:	6078      	str	r0, [r7, #4]
  return ~a;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	43db      	mvns	r3, r3
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	370c      	adds	r7, #12
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed4:	4770      	bx	lr

08011ed6 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8011ed6:	b480      	push	{r7}
 8011ed8:	b083      	sub	sp, #12
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	6078      	str	r0, [r7, #4]
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	370c      	adds	r7, #12
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eee:	4770      	bx	lr

08011ef0 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8011ef0:	b480      	push	{r7}
 8011ef2:	b083      	sub	sp, #12
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	685b      	ldr	r3, [r3, #4]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	4618      	mov	r0, r3
 8011f00:	370c      	adds	r7, #12
 8011f02:	46bd      	mov	sp, r7
 8011f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f08:	4770      	bx	lr

08011f0a <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8011f0a:	b580      	push	{r7, lr}
 8011f0c:	b082      	sub	sp, #8
 8011f0e:	af00      	add	r7, sp, #0
 8011f10:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d101      	bne.n	8011f1c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8011f18:	f013 f9a9 	bl	802526e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	3708      	adds	r7, #8
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}

08011f28 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }
 8011f28:	b480      	push	{r7}
 8011f2a:	b083      	sub	sp, #12
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	3304      	adds	r3, #4
 8011f34:	4618      	mov	r0, r3
 8011f36:	370c      	adds	r7, #12
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3e:	4770      	bx	lr

08011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b086      	sub	sp, #24
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	60f8      	str	r0, [r7, #12]
 8011f48:	60b9      	str	r1, [r7, #8]
 8011f4a:	607a      	str	r2, [r7, #4]
 8011f4c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8011f4e:	68f8      	ldr	r0, [r7, #12]
 8011f50:	f7fa f849 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011f54:	4603      	mov	r3, r0
 8011f56:	2b04      	cmp	r3, #4
 8011f58:	d001      	beq.n	8011f5e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 8011f5a:	f013 f988 	bl	802526e <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 8011f5e:	68f8      	ldr	r0, [r7, #12]
 8011f60:	f7ff ffe2 	bl	8011f28 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 8011f64:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	db04      	blt.n	8011f76 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 8011f6c:	697b      	ldr	r3, [r7, #20]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	68ba      	ldr	r2, [r7, #8]
 8011f72:	429a      	cmp	r2, r3
 8011f74:	db01      	blt.n	8011f7a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 8011f76:	f013 f97a 	bl	802526e <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	db05      	blt.n	8011f8c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	3304      	adds	r3, #4
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	687a      	ldr	r2, [r7, #4]
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	db01      	blt.n	8011f90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 8011f8c:	f013 f96f 	bl	802526e <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	db05      	blt.n	8011fa2 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	3308      	adds	r3, #8
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	683a      	ldr	r2, [r7, #0]
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	db01      	blt.n	8011fa6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 8011fa2:	f013 f964 	bl	802526e <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8011fa6:	6a3b      	ldr	r3, [r7, #32]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	db05      	blt.n	8011fb8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 8011fac:	697b      	ldr	r3, [r7, #20]
 8011fae:	330c      	adds	r3, #12
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	6a3a      	ldr	r2, [r7, #32]
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	db01      	blt.n	8011fbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 8011fb8:	f013 f959 	bl	802526e <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 8011fbc:	697b      	ldr	r3, [r7, #20]
 8011fbe:	3304      	adds	r3, #4
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	68ba      	ldr	r2, [r7, #8]
 8011fc4:	fb02 f203 	mul.w	r2, r2, r3
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	4413      	add	r3, r2
 8011fcc:	697a      	ldr	r2, [r7, #20]
 8011fce:	3208      	adds	r2, #8
 8011fd0:	6812      	ldr	r2, [r2, #0]
 8011fd2:	fb02 f203 	mul.w	r2, r2, r3
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	4413      	add	r3, r2
 8011fda:	697a      	ldr	r2, [r7, #20]
 8011fdc:	320c      	adds	r2, #12
 8011fde:	6812      	ldr	r2, [r2, #0]
 8011fe0:	fb02 f203 	mul.w	r2, r2, r3
 8011fe4:	6a3b      	ldr	r3, [r7, #32]
 8011fe6:	4413      	add	r3, r2
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3718      	adds	r7, #24
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}

08011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 8011ff0:	b590      	push	{r4, r7, lr}
 8011ff2:	b087      	sub	sp, #28
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	60f8      	str	r0, [r7, #12]
 8011ff8:	60b9      	str	r1, [r7, #8]
 8011ffa:	607a      	str	r2, [r7, #4]
 8011ffc:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8011ffe:	68b9      	ldr	r1, [r7, #8]
 8012000:	68f8      	ldr	r0, [r7, #12]
 8012002:	f7fe ff2f 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012006:	4604      	mov	r4, r0
 8012008:	6839      	ldr	r1, [r7, #0]
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f7fe ff2a 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012010:	4603      	mov	r3, r0
 8012012:	429c      	cmp	r4, r3
 8012014:	d001      	beq.n	801201a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8012016:	f013 f92a 	bl	802526e <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 801201a:	68b9      	ldr	r1, [r7, #8]
 801201c:	68f8      	ldr	r0, [r7, #12]
 801201e:	f7fe ff21 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012022:	4603      	mov	r3, r0
 8012024:	613b      	str	r3, [r7, #16]
 8012026:	6839      	ldr	r1, [r7, #0]
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f7fe ff1b 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 801202e:	4603      	mov	r3, r0
 8012030:	617b      	str	r3, [r7, #20]
 8012032:	f107 0214 	add.w	r2, r7, #20
 8012036:	f107 0310 	add.w	r3, r7, #16
 801203a:	4611      	mov	r1, r2
 801203c:	4618      	mov	r0, r3
 801203e:	f7f9 fe49 	bl	800bcd4 <_ZSt3minIlERKT_S2_S2_>
 8012042:	4603      	mov	r3, r0
 8012044:	681b      	ldr	r3, [r3, #0]
}
 8012046:	4618      	mov	r0, r3
 8012048:	371c      	adds	r7, #28
 801204a:	46bd      	mov	sp, r7
 801204c:	bd90      	pop	{r4, r7, pc}
	...

08012050 <_ZNSt14numeric_limitsIfE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8012050:	b480      	push	{r7}
 8012052:	af00      	add	r7, sp, #0
 8012054:	4b04      	ldr	r3, [pc, #16]	; (8012068 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8012056:	ee07 3a90 	vmov	s15, r3
 801205a:	eeb0 0a67 	vmov.f32	s0, s15
 801205e:	46bd      	mov	sp, r7
 8012060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012064:	4770      	bx	lr
 8012066:	bf00      	nop
 8012068:	7f7fffff 	.word	0x7f7fffff

0801206c <_ZNSt14numeric_limitsIfE6lowestEv>:
      lowest() noexcept { return -__FLT_MAX__; }
 801206c:	b480      	push	{r7}
 801206e:	af00      	add	r7, sp, #0
 8012070:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8012074:	ee07 3a90 	vmov	s15, r3
 8012078:	eeb0 0a67 	vmov.f32	s0, s15
 801207c:	46bd      	mov	sp, r7
 801207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012082:	4770      	bx	lr

08012084 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 8012084:	b480      	push	{r7}
 8012086:	b087      	sub	sp, #28
 8012088:	af00      	add	r7, sp, #0
 801208a:	60f8      	str	r0, [r7, #12]
 801208c:	60b9      	str	r1, [r7, #8]
 801208e:	607a      	str	r2, [r7, #4]
 8012090:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	3b01      	subs	r3, #1
 8012096:	68ba      	ldr	r2, [r7, #8]
 8012098:	fb02 f303 	mul.w	r3, r2, r3
 801209c:	3301      	adds	r3, #1
 801209e:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 80120a0:	6a3b      	ldr	r3, [r7, #32]
 80120a2:	3b01      	subs	r3, #1
 80120a4:	68fa      	ldr	r2, [r7, #12]
 80120a6:	fb02 f203 	mul.w	r2, r2, r3
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	441a      	add	r2, r3
  int total_padding =
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	1ad3      	subs	r3, r2, r3
 80120b2:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80120ba:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 80120bc:	693b      	ldr	r3, [r7, #16]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	f003 0301 	and.w	r3, r3, #1
 80120c4:	bfb8      	it	lt
 80120c6:	425b      	neglt	r3, r3
 80120c8:	461a      	mov	r2, r3
 80120ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120cc:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	0fda      	lsrs	r2, r3, #31
 80120d2:	4413      	add	r3, r2
 80120d4:	105b      	asrs	r3, r3, #1
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	371c      	adds	r7, #28
 80120da:	46bd      	mov	sp, r7
 80120dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e0:	4770      	bx	lr

080120e2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 80120e2:	b480      	push	{r7}
 80120e4:	b087      	sub	sp, #28
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	60b9      	str	r1, [r7, #8]
 80120ea:	607a      	str	r2, [r7, #4]
 80120ec:	603b      	str	r3, [r7, #0]
 80120ee:	4603      	mov	r3, r0
 80120f0:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	3b01      	subs	r3, #1
 80120f6:	6a3a      	ldr	r2, [r7, #32]
 80120f8:	fb02 f303 	mul.w	r3, r2, r3
 80120fc:	3301      	adds	r3, #1
 80120fe:	617b      	str	r3, [r7, #20]

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 8012100:	683b      	ldr	r3, [r7, #0]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d101      	bne.n	801210a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x28>
 8012106:	2300      	movs	r3, #0
 8012108:	e017      	b.n	801213a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>

  switch (padding) {
 801210a:	7bfb      	ldrb	r3, [r7, #15]
 801210c:	2b01      	cmp	r3, #1
 801210e:	d002      	beq.n	8012116 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x34>
 8012110:	2b02      	cmp	r3, #2
 8012112:	d008      	beq.n	8012126 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x44>
 8012114:	e010      	b.n	8012138 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x56>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 8012116:	68ba      	ldr	r2, [r7, #8]
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	4413      	add	r3, r2
 801211c:	1e5a      	subs	r2, r3, #1
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	fb92 f3f3 	sdiv	r3, r2, r3
 8012124:	e009      	b.n	801213a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 8012126:	68ba      	ldr	r2, [r7, #8]
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	441a      	add	r2, r3
 801212c:	697b      	ldr	r3, [r7, #20]
 801212e:	1ad2      	subs	r2, r2, r3
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	fb92 f3f3 	sdiv	r3, r2, r3
 8012136:	e000      	b.n	801213a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    default:
      return 0;
 8012138:	2300      	movs	r3, #0
  }
}
 801213a:	4618      	mov	r0, r3
 801213c:	371c      	adds	r7, #28
 801213e:	46bd      	mov	sp, r7
 8012140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012144:	4770      	bx	lr

08012146 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 8012146:	b580      	push	{r7, lr}
 8012148:	b088      	sub	sp, #32
 801214a:	af02      	add	r7, sp, #8
 801214c:	60f8      	str	r0, [r7, #12]
 801214e:	60b9      	str	r1, [r7, #8]
 8012150:	607a      	str	r2, [r7, #4]
 8012152:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 8012154:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8012158:	6a3b      	ldr	r3, [r7, #32]
 801215a:	9300      	str	r3, [sp, #0]
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012162:	f7ff ffbe 	bl	80120e2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8012166:	4602      	mov	r2, r0
 8012168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801216a:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 801216c:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	9300      	str	r3, [sp, #0]
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801217a:	f7ff ffb2 	bl	80120e2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 801217e:	4602      	mov	r2, r0
 8012180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012182:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 8012184:	2300      	movs	r3, #0
 8012186:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 8012188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	f107 0214 	add.w	r2, r7, #20
 8012190:	9201      	str	r2, [sp, #4]
 8012192:	9300      	str	r3, [sp, #0]
 8012194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012198:	6839      	ldr	r1, [r7, #0]
 801219a:	68b8      	ldr	r0, [r7, #8]
 801219c:	f7ff ff72 	bl	8012084 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 80121a0:	4602      	mov	r2, r0
  padding_values.height =
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 80121a6:	697a      	ldr	r2, [r7, #20]
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 80121ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	f107 0214 	add.w	r2, r7, #20
 80121b4:	9201      	str	r2, [sp, #4]
 80121b6:	9300      	str	r3, [sp, #0]
 80121b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121bc:	6a39      	ldr	r1, [r7, #32]
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f7ff ff60 	bl	8012084 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 80121c4:	4602      	mov	r2, r0
  padding_values.width =
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 80121ca:	697a      	ldr	r2, [r7, #20]
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	609a      	str	r2, [r3, #8]
  return padding_values;
 80121d0:	bf00      	nop
}
 80121d2:	68f8      	ldr	r0, [r7, #12]
 80121d4:	3718      	adds	r7, #24
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}

080121da <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
const int kConvQuantizedDimension = 0;

// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
 80121da:	b580      	push	{r7, lr}
 80121dc:	b084      	sub	sp, #16
 80121de:	af00      	add	r7, sp, #0
 80121e0:	60f8      	str	r0, [r7, #12]
 80121e2:	60b9      	str	r1, [r7, #8]
 80121e4:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	7b18      	ldrb	r0, [r3, #12]
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	3330      	adds	r3, #48	; 0x30
 80121f4:	4619      	mov	r1, r3
 80121f6:	f000 f97f 	bl	80124f8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	781b      	ldrb	r3, [r3, #0]
 80121fe:	4618      	mov	r0, r3
 8012200:	f000 fbd1 	bl	80129a6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8012204:	4603      	mov	r3, r0
 8012206:	461a      	mov	r2, r3
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	b21a      	sxth	r2, r3
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	685b      	ldr	r3, [r3, #4]
 801221a:	b21a      	sxth	r2, r3
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	685b      	ldr	r3, [r3, #4]
 8012224:	b21a      	sxth	r2, r3
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	689b      	ldr	r3, [r3, #8]
 801222e:	b21a      	sxth	r2, r3
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	691b      	ldr	r3, [r3, #16]
 8012238:	b21a      	sxth	r2, r3
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	695b      	ldr	r3, [r3, #20]
 8012242:	b21a      	sxth	r2, r3
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	821a      	strh	r2, [r3, #16]
  return op_params;
 8012248:	bf00      	nop
}
 801224a:	68f8      	ldr	r0, [r7, #12]
 801224c:	3710      	adds	r7, #16
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}

08012252 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 8012252:	b580      	push	{r7, lr}
 8012254:	b084      	sub	sp, #16
 8012256:	af00      	add	r7, sp, #0
 8012258:	60f8      	str	r0, [r7, #12]
 801225a:	60b9      	str	r1, [r7, #8]
 801225c:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	691b      	ldr	r3, [r3, #16]
 8012262:	425a      	negs	r2, r3
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	695b      	ldr	r3, [r3, #20]
 801226c:	425a      	negs	r2, r3
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	699a      	ldr	r2, [r3, #24]
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	69da      	ldr	r2, [r3, #28]
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6a1b      	ldr	r3, [r3, #32]
 8012286:	425a      	negs	r2, r3
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 801228c:	68bb      	ldr	r3, [r7, #8]
 801228e:	781b      	ldrb	r3, [r3, #0]
 8012290:	4618      	mov	r0, r3
 8012292:	f000 fb88 	bl	80129a6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8012296:	4603      	mov	r3, r0
 8012298:	461a      	mov	r2, r3
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	b21a      	sxth	r2, r3
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	b21a      	sxth	r2, r3
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	689b      	ldr	r3, [r3, #8]
 80122b6:	b21a      	sxth	r2, r3
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	b21a      	sxth	r2, r3
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	695b      	ldr	r3, [r3, #20]
 80122ca:	b21a      	sxth	r2, r3
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	691b      	ldr	r3, [r3, #16]
 80122d4:	b21a      	sxth	r2, r3
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	81da      	strh	r2, [r3, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 80122ea:	bf00      	nop
}
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	3710      	adds	r7, #16
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 80122f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122f6:	b09d      	sub	sp, #116	; 0x74
 80122f8:	af0a      	add	r7, sp, #40	; 0x28
 80122fa:	6278      	str	r0, [r7, #36]	; 0x24
 80122fc:	6239      	str	r1, [r7, #32]
 80122fe:	61fa      	str	r2, [r7, #28]
 8012300:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 8012302:	6a3b      	ldr	r3, [r7, #32]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	2b03      	cmp	r3, #3
 801230a:	bf0c      	ite	eq
 801230c:	2301      	moveq	r3, #1
 801230e:	2300      	movne	r3, #0
 8012310:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8012314:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012318:	f083 0301 	eor.w	r3, r3, #1
 801231c:	b2db      	uxtb	r3, r3
 801231e:	2b00      	cmp	r3, #0
 8012320:	d00f      	beq.n	8012342 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8012322:	6a3b      	ldr	r3, [r7, #32]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	2b02      	cmp	r3, #2
 801232a:	d00a      	beq.n	8012342 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 801232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232e:	695c      	ldr	r4, [r3, #20]
 8012330:	4b68      	ldr	r3, [pc, #416]	; (80124d4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e0>)
 8012332:	9300      	str	r3, [sp, #0]
 8012334:	2356      	movs	r3, #86	; 0x56
 8012336:	4a68      	ldr	r2, [pc, #416]	; (80124d8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8012338:	4968      	ldr	r1, [pc, #416]	; (80124dc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 801233a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801233c:	47a0      	blx	r4
 801233e:	2301      	movs	r3, #1
 8012340:	e0c4      	b.n	80124cc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 8012342:	6a3b      	ldr	r3, [r7, #32]
 8012344:	685b      	ldr	r3, [r3, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	2b01      	cmp	r3, #1
 801234a:	d012      	beq.n	8012372 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 801234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234e:	695c      	ldr	r4, [r3, #20]
 8012350:	6a3b      	ldr	r3, [r7, #32]
 8012352:	685b      	ldr	r3, [r3, #4]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	2201      	movs	r2, #1
 8012358:	9203      	str	r2, [sp, #12]
 801235a:	9302      	str	r3, [sp, #8]
 801235c:	4b60      	ldr	r3, [pc, #384]	; (80124e0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ec>)
 801235e:	9301      	str	r3, [sp, #4]
 8012360:	4b60      	ldr	r3, [pc, #384]	; (80124e4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 8012362:	9300      	str	r3, [sp, #0]
 8012364:	2357      	movs	r3, #87	; 0x57
 8012366:	4a5c      	ldr	r2, [pc, #368]	; (80124d8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8012368:	495f      	ldr	r1, [pc, #380]	; (80124e8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 801236a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801236c:	47a0      	blx	r4
 801236e:	2301      	movs	r3, #1
 8012370:	e0ac      	b.n	80124cc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 8012372:	69fb      	ldr	r3, [r7, #28]
 8012374:	781b      	ldrb	r3, [r3, #0]
 8012376:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 801237a:	69fb      	ldr	r3, [r7, #28]
 801237c:	6899      	ldr	r1, [r3, #8]
 801237e:	69fb      	ldr	r3, [r7, #28]
 8012380:	685c      	ldr	r4, [r3, #4]
 8012382:	69fb      	ldr	r3, [r7, #28]
 8012384:	695d      	ldr	r5, [r3, #20]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	691b      	ldr	r3, [r3, #16]
      padding, &out_height, &out_width);
 801238a:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 801238c:	f107 0008 	add.w	r0, r7, #8
 8012390:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8012394:	9207      	str	r2, [sp, #28]
 8012396:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801239a:	9206      	str	r2, [sp, #24]
 801239c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80123a0:	9205      	str	r2, [sp, #20]
 80123a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80123a4:	9204      	str	r2, [sp, #16]
 80123a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80123a8:	9203      	str	r2, [sp, #12]
 80123aa:	69ba      	ldr	r2, [r7, #24]
 80123ac:	9202      	str	r2, [sp, #8]
 80123ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80123b0:	9201      	str	r2, [sp, #4]
 80123b2:	9300      	str	r3, [sp, #0]
 80123b4:	462b      	mov	r3, r5
 80123b6:	4622      	mov	r2, r4
 80123b8:	f7ff fec5 	bl	8012146 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 80123bc:	4634      	mov	r4, r6
 80123be:	f107 0308 	add.w	r3, r7, #8
 80123c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80123c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 80123c8:	2200      	movs	r2, #0
 80123ca:	6a39      	ldr	r1, [r7, #32]
 80123cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123ce:	f7f9 f849 	bl	800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80123d2:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 80123d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d10a      	bne.n	80123f0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xfc>
 80123da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123dc:	695c      	ldr	r4, [r3, #20]
 80123de:	4b43      	ldr	r3, [pc, #268]	; (80124ec <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 80123e0:	9300      	str	r3, [sp, #0]
 80123e2:	2361      	movs	r3, #97	; 0x61
 80123e4:	4a3c      	ldr	r2, [pc, #240]	; (80124d8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 80123e6:	493d      	ldr	r1, [pc, #244]	; (80124dc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 80123e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123ea:	47a0      	blx	r4
 80123ec:	2301      	movs	r3, #1
 80123ee:	e06d      	b.n	80124cc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 80123f0:	2201      	movs	r2, #1
 80123f2:	6a39      	ldr	r1, [r7, #32]
 80123f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123f6:	f7f9 f835 	bl	800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80123fa:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 80123fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d10a      	bne.n	8012418 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x124>
 8012402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012404:	695c      	ldr	r4, [r3, #20]
 8012406:	4b3a      	ldr	r3, [pc, #232]	; (80124f0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 8012408:	9300      	str	r3, [sp, #0]
 801240a:	2363      	movs	r3, #99	; 0x63
 801240c:	4a32      	ldr	r2, [pc, #200]	; (80124d8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 801240e:	4933      	ldr	r1, [pc, #204]	; (80124dc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8012410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012412:	47a0      	blx	r4
 8012414:	2301      	movs	r3, #1
 8012416:	e059      	b.n	80124cc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 8012418:	2202      	movs	r2, #2
 801241a:	6a39      	ldr	r1, [r7, #32]
 801241c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801241e:	f7f9 f851 	bl	800b4c4 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8012422:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 8012424:	2200      	movs	r2, #0
 8012426:	6a39      	ldr	r1, [r7, #32]
 8012428:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801242a:	f7f9 f82b 	bl	800b484 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801242e:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 8012430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012432:	2b00      	cmp	r3, #0
 8012434:	d10a      	bne.n	801244c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x158>
 8012436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012438:	695c      	ldr	r4, [r3, #20]
 801243a:	4b2e      	ldr	r3, [pc, #184]	; (80124f4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 801243c:	9300      	str	r3, [sp, #0]
 801243e:	2367      	movs	r3, #103	; 0x67
 8012440:	4a25      	ldr	r2, [pc, #148]	; (80124d8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8012442:	4926      	ldr	r1, [pc, #152]	; (80124dc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8012444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012446:	47a0      	blx	r4
 8012448:	2301      	movs	r3, #1
 801244a:	e03f      	b.n	80124cc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 801244c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8012450:	2b01      	cmp	r3, #1
 8012452:	d02e      	beq.n	80124b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 8012454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012456:	689b      	ldr	r3, [r3, #8]
 8012458:	685b      	ldr	r3, [r3, #4]
 801245a:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 801245c:	69fb      	ldr	r3, [r7, #28]
 801245e:	330c      	adds	r3, #12
 8012460:	607b      	str	r3, [r7, #4]
 8012462:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012464:	321c      	adds	r2, #28
 8012466:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012468:	3120      	adds	r1, #32
 801246a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 801246c:	302c      	adds	r0, #44	; 0x2c
 801246e:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8012470:	3430      	adds	r4, #48	; 0x30
 8012472:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 8012474:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8012476:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8012478:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 801247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247c:	9308      	str	r3, [sp, #32]
 801247e:	9607      	str	r6, [sp, #28]
 8012480:	9506      	str	r5, [sp, #24]
 8012482:	9405      	str	r4, [sp, #20]
 8012484:	9004      	str	r0, [sp, #16]
 8012486:	9103      	str	r1, [sp, #12]
 8012488:	9202      	str	r2, [sp, #8]
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	9301      	str	r3, [sp, #4]
 801248e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012490:	9300      	str	r3, [sp, #0]
 8012492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012494:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012496:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801249a:	f7f9 f823 	bl	800b4e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 801249e:	4603      	mov	r3, r0
 80124a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80124a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d002      	beq.n	80124b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
 80124ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124b0:	e00c      	b.n	80124cc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 80124b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124b4:	691a      	ldr	r2, [r3, #16]
 80124b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80124b8:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 80124ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124bc:	691a      	ldr	r2, [r3, #16]
 80124be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80124c0:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 80124c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124c4:	691a      	ldr	r2, [r3, #16]
 80124c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80124c8:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 80124ca:	2300      	movs	r3, #0
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	374c      	adds	r7, #76	; 0x4c
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124d4:	0802ac70 	.word	0x0802ac70
 80124d8:	0802ac18 	.word	0x0802ac18
 80124dc:	0802ac58 	.word	0x0802ac58
 80124e0:	0802acb0 	.word	0x0802acb0
 80124e4:	0802acb4 	.word	0x0802acb4
 80124e8:	0802ac94 	.word	0x0802ac94
 80124ec:	0802acc8 	.word	0x0802acc8
 80124f0:	0802acdc 	.word	0x0802acdc
 80124f4:	0802acf0 	.word	0x0802acf0

080124f8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	4603      	mov	r3, r0
 8012500:	60b9      	str	r1, [r7, #8]
 8012502:	607a      	str	r2, [r7, #4]
 8012504:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8012506:	7bfb      	ldrb	r3, [r7, #15]
 8012508:	2b01      	cmp	r3, #1
 801250a:	d10b      	bne.n	8012524 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 801250c:	68bb      	ldr	r3, [r7, #8]
 801250e:	f04f 0200 	mov.w	r2, #0
 8012512:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8012514:	f7ff fd9c 	bl	8012050 <_ZNSt14numeric_limitsIfE3maxEv>
 8012518:	eef0 7a40 	vmov.f32	s15, s0
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8012522:	e023      	b.n	801256c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8012524:	7bfb      	ldrb	r3, [r7, #15]
 8012526:	2b03      	cmp	r3, #3
 8012528:	d107      	bne.n	801253a <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	f04f 0200 	mov.w	r2, #0
 8012530:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	4a0f      	ldr	r2, [pc, #60]	; (8012574 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8012536:	601a      	str	r2, [r3, #0]
}
 8012538:	e018      	b.n	801256c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 801253a:	7bfb      	ldrb	r3, [r7, #15]
 801253c:	2b02      	cmp	r3, #2
 801253e:	d107      	bne.n	8012550 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	4a0d      	ldr	r2, [pc, #52]	; (8012578 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8012544:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801254c:	601a      	str	r2, [r3, #0]
}
 801254e:	e00d      	b.n	801256c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8012550:	f7ff fd8c 	bl	801206c <_ZNSt14numeric_limitsIfE6lowestEv>
 8012554:	eef0 7a40 	vmov.f32	s15, s0
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 801255e:	f7ff fd77 	bl	8012050 <_ZNSt14numeric_limitsIfE3maxEv>
 8012562:	eef0 7a40 	vmov.f32	s15, s0
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	edc3 7a00 	vstr	s15, [r3]
}
 801256c:	bf00      	nop
 801256e:	3710      	adds	r7, #16
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}
 8012574:	40c00000 	.word	0x40c00000
 8012578:	bf800000 	.word	0xbf800000

0801257c <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
const int kDepthwiseConvQuantizedDimension = 3;

// Returns a DepthwiseParams struct with all the parameters needed for a
// float computation.
DepthwiseParams DepthwiseConvParamsFloat(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 801257c:	b580      	push	{r7, lr}
 801257e:	b084      	sub	sp, #16
 8012580:	af00      	add	r7, sp, #0
 8012582:	60f8      	str	r0, [r7, #12]
 8012584:	60b9      	str	r1, [r7, #8]
 8012586:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	7c18      	ldrb	r0, [r3, #16]
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	3330      	adds	r3, #48	; 0x30
 8012596:	4619      	mov	r1, r3
 8012598:	f7ff ffae 	bl	80124f8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 801259c:	68bb      	ldr	r3, [r7, #8]
 801259e:	781b      	ldrb	r3, [r3, #0]
 80125a0:	4618      	mov	r0, r3
 80125a2:	f000 fa00 	bl	80129a6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 80125a6:	4603      	mov	r3, r0
 80125a8:	461a      	mov	r2, r3
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	b21a      	sxth	r2, r3
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	b21a      	sxth	r2, r3
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 80125c2:	68bb      	ldr	r3, [r7, #8]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	b21a      	sxth	r2, r3
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	689b      	ldr	r3, [r3, #8]
 80125d0:	b21a      	sxth	r2, r3
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	695b      	ldr	r3, [r3, #20]
 80125da:	b21a      	sxth	r2, r3
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	699b      	ldr	r3, [r3, #24]
 80125e4:	b21a      	sxth	r2, r3
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	821a      	strh	r2, [r3, #16]
  op_params.depth_multiplier = params.depth_multiplier;
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	68db      	ldr	r3, [r3, #12]
 80125ee:	b21a      	sxth	r2, r3
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	825a      	strh	r2, [r3, #18]
  return op_params;
 80125f4:	bf00      	nop
}
 80125f6:	68f8      	ldr	r0, [r7, #12]
 80125f8:	3710      	adds	r7, #16
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}

080125fe <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:

// Returns a DepthwiseParams struct with all the parameters needed for a
// quantized computation.
DepthwiseParams DepthwiseConvParamsQuantized(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 80125fe:	b580      	push	{r7, lr}
 8012600:	b084      	sub	sp, #16
 8012602:	af00      	add	r7, sp, #0
 8012604:	60f8      	str	r0, [r7, #12]
 8012606:	60b9      	str	r1, [r7, #8]
 8012608:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  op_params.input_offset = -data.input_zero_point;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	691b      	ldr	r3, [r3, #16]
 801260e:	425a      	negs	r2, r3
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	695b      	ldr	r3, [r3, #20]
 8012618:	425a      	negs	r2, r3
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	699a      	ldr	r2, [r3, #24]
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	69da      	ldr	r2, [r3, #28]
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	6a1b      	ldr	r3, [r3, #32]
 8012632:	425a      	negs	r2, r3
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	4618      	mov	r0, r3
 801263e:	f000 f9b2 	bl	80129a6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8012642:	4603      	mov	r3, r0
 8012644:	461a      	mov	r2, r3
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	685b      	ldr	r3, [r3, #4]
 801264e:	b21a      	sxth	r2, r3
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	b21a      	sxth	r2, r3
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	689b      	ldr	r3, [r3, #8]
 8012662:	b21a      	sxth	r2, r3
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	685b      	ldr	r3, [r3, #4]
 801266c:	b21a      	sxth	r2, r3
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	699b      	ldr	r3, [r3, #24]
 8012676:	b21a      	sxth	r2, r3
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	695b      	ldr	r3, [r3, #20]
 8012680:	b21a      	sxth	r2, r3
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	81da      	strh	r2, [r3, #14]
  op_params.depth_multiplier = params.depth_multiplier;
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	68db      	ldr	r3, [r3, #12]
 801268a:	b21a      	sxth	r2, r3
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	825a      	strh	r2, [r3, #18]
  op_params.quantized_activation_min = data.output_activation_min;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 80126a0:	bf00      	nop
}
 80126a2:	68f8      	ldr	r0, [r7, #12]
 80126a4:	3710      	adds	r7, #16
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bd80      	pop	{r7, pc}
	...

080126ac <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
 80126ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126ae:	b09d      	sub	sp, #116	; 0x74
 80126b0:	af0a      	add	r7, sp, #40	; 0x28
 80126b2:	6278      	str	r0, [r7, #36]	; 0x24
 80126b4:	6239      	str	r1, [r7, #32]
 80126b6:	61fa      	str	r2, [r7, #28]
 80126b8:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 80126ba:	6a3b      	ldr	r3, [r7, #32]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	2b03      	cmp	r3, #3
 80126c2:	bf0c      	ite	eq
 80126c4:	2301      	moveq	r3, #1
 80126c6:	2300      	movne	r3, #0
 80126c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 80126cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80126d0:	f083 0301 	eor.w	r3, r3, #1
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d00f      	beq.n	80126fa <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 80126da:	6a3b      	ldr	r3, [r7, #32]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	2b02      	cmp	r3, #2
 80126e2:	d00a      	beq.n	80126fa <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 80126e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e6:	695c      	ldr	r4, [r3, #20]
 80126e8:	4b6c      	ldr	r3, [pc, #432]	; (801289c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 80126ea:	9300      	str	r3, [sp, #0]
 80126ec:	2357      	movs	r3, #87	; 0x57
 80126ee:	4a6c      	ldr	r2, [pc, #432]	; (80128a0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 80126f0:	496c      	ldr	r1, [pc, #432]	; (80128a4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 80126f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126f4:	47a0      	blx	r4
 80126f6:	2301      	movs	r3, #1
 80126f8:	e0cc      	b.n	8012894 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 80126fa:	6a3b      	ldr	r3, [r7, #32]
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	2b01      	cmp	r3, #1
 8012702:	d012      	beq.n	801272a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 8012704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012706:	695c      	ldr	r4, [r3, #20]
 8012708:	6a3b      	ldr	r3, [r7, #32]
 801270a:	685b      	ldr	r3, [r3, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	2201      	movs	r2, #1
 8012710:	9203      	str	r2, [sp, #12]
 8012712:	9302      	str	r3, [sp, #8]
 8012714:	4b64      	ldr	r3, [pc, #400]	; (80128a8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 8012716:	9301      	str	r3, [sp, #4]
 8012718:	4b64      	ldr	r3, [pc, #400]	; (80128ac <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 801271a:	9300      	str	r3, [sp, #0]
 801271c:	2358      	movs	r3, #88	; 0x58
 801271e:	4a60      	ldr	r2, [pc, #384]	; (80128a0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 8012720:	4963      	ldr	r1, [pc, #396]	; (80128b0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
 8012722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012724:	47a0      	blx	r4
 8012726:	2301      	movs	r3, #1
 8012728:	e0b4      	b.n	8012894 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 801272a:	69fb      	ldr	r3, [r7, #28]
 801272c:	781b      	ldrb	r3, [r3, #0]
 801272e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 8012732:	69fb      	ldr	r3, [r7, #28]
 8012734:	6899      	ldr	r1, [r3, #8]
 8012736:	69fb      	ldr	r3, [r7, #28]
 8012738:	685c      	ldr	r4, [r3, #4]
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	699d      	ldr	r5, [r3, #24]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 801273e:	69fb      	ldr	r3, [r7, #28]
 8012740:	695b      	ldr	r3, [r3, #20]
      padding, &out_height, &out_width);
 8012742:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8012744:	f107 0008 	add.w	r0, r7, #8
 8012748:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801274c:	9207      	str	r2, [sp, #28]
 801274e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8012752:	9206      	str	r2, [sp, #24]
 8012754:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8012758:	9205      	str	r2, [sp, #20]
 801275a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801275c:	9204      	str	r2, [sp, #16]
 801275e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012760:	9203      	str	r2, [sp, #12]
 8012762:	69ba      	ldr	r2, [r7, #24]
 8012764:	9202      	str	r2, [sp, #8]
 8012766:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012768:	9201      	str	r2, [sp, #4]
 801276a:	9300      	str	r3, [sp, #0]
 801276c:	462b      	mov	r3, r5
 801276e:	4622      	mov	r2, r4
 8012770:	f7ff fce9 	bl	8012146 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8012774:	4634      	mov	r4, r6
 8012776:	f107 0308 	add.w	r3, r7, #8
 801277a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801277c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 8012780:	4b4c      	ldr	r3, [pc, #304]	; (80128b4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	461a      	mov	r2, r3
 8012786:	6a39      	ldr	r1, [r7, #32]
 8012788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801278a:	f7f8 fe6b 	bl	800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801278e:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 8012790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012792:	2b00      	cmp	r3, #0
 8012794:	d10a      	bne.n	80127ac <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x100>
 8012796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012798:	695c      	ldr	r4, [r3, #20]
 801279a:	4b47      	ldr	r3, [pc, #284]	; (80128b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
 801279c:	9300      	str	r3, [sp, #0]
 801279e:	2362      	movs	r3, #98	; 0x62
 80127a0:	4a3f      	ldr	r2, [pc, #252]	; (80128a0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 80127a2:	4940      	ldr	r1, [pc, #256]	; (80128a4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 80127a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127a6:	47a0      	blx	r4
 80127a8:	2301      	movs	r3, #1
 80127aa:	e073      	b.n	8012894 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 80127ac:	4b43      	ldr	r3, [pc, #268]	; (80128bc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	461a      	mov	r2, r3
 80127b2:	6a39      	ldr	r1, [r7, #32]
 80127b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127b6:	f7f8 fe55 	bl	800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80127ba:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 80127bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d10a      	bne.n	80127d8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x12c>
 80127c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c4:	695c      	ldr	r4, [r3, #20]
 80127c6:	4b3e      	ldr	r3, [pc, #248]	; (80128c0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
 80127c8:	9300      	str	r3, [sp, #0]
 80127ca:	2364      	movs	r3, #100	; 0x64
 80127cc:	4a34      	ldr	r2, [pc, #208]	; (80128a0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 80127ce:	4935      	ldr	r1, [pc, #212]	; (80128a4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 80127d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127d2:	47a0      	blx	r4
 80127d4:	2301      	movs	r3, #1
 80127d6:	e05d      	b.n	8012894 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 80127d8:	4b3a      	ldr	r3, [pc, #232]	; (80128c4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	461a      	mov	r2, r3
 80127de:	6a39      	ldr	r1, [r7, #32]
 80127e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127e2:	f7f8 fe6f 	bl	800b4c4 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 80127e6:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 80127e8:	4b37      	ldr	r3, [pc, #220]	; (80128c8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21c>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	461a      	mov	r2, r3
 80127ee:	6a39      	ldr	r1, [r7, #32]
 80127f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127f2:	f7f8 fe47 	bl	800b484 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80127f6:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 80127f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d10a      	bne.n	8012814 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x168>
 80127fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012800:	695c      	ldr	r4, [r3, #20]
 8012802:	4b32      	ldr	r3, [pc, #200]	; (80128cc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x220>)
 8012804:	9300      	str	r3, [sp, #0]
 8012806:	2368      	movs	r3, #104	; 0x68
 8012808:	4a25      	ldr	r2, [pc, #148]	; (80128a0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 801280a:	4926      	ldr	r1, [pc, #152]	; (80128a4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 801280c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801280e:	47a0      	blx	r4
 8012810:	2301      	movs	r3, #1
 8012812:	e03f      	b.n	8012894 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 8012814:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8012818:	2b01      	cmp	r3, #1
 801281a:	d02e      	beq.n	801287a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 801281c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801281e:	689b      	ldr	r3, [r3, #8]
 8012820:	691b      	ldr	r3, [r3, #16]
 8012822:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	3310      	adds	r3, #16
 8012828:	607b      	str	r3, [r7, #4]
 801282a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801282c:	321c      	adds	r2, #28
 801282e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012830:	3120      	adds	r1, #32
 8012832:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8012834:	302c      	adds	r0, #44	; 0x2c
 8012836:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8012838:	3430      	adds	r4, #48	; 0x30
 801283a:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 801283c:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 801283e:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8012840:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8012842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012844:	9308      	str	r3, [sp, #32]
 8012846:	9607      	str	r6, [sp, #28]
 8012848:	9506      	str	r5, [sp, #24]
 801284a:	9405      	str	r4, [sp, #20]
 801284c:	9004      	str	r0, [sp, #16]
 801284e:	9103      	str	r1, [sp, #12]
 8012850:	9202      	str	r2, [sp, #8]
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	9301      	str	r3, [sp, #4]
 8012856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012858:	9300      	str	r3, [sp, #0]
 801285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801285c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801285e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012862:	f7f8 fe3f 	bl	800b4e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 8012866:	4603      	mov	r3, r0
 8012868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801286c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012870:	2b00      	cmp	r3, #0
 8012872:	d002      	beq.n	801287a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
 8012874:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012878:	e00c      	b.n	8012894 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 801287a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801287c:	691a      	ldr	r2, [r3, #16]
 801287e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012880:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 8012882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012884:	691a      	ldr	r2, [r3, #16]
 8012886:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012888:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 801288a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801288c:	691a      	ldr	r2, [r3, #16]
 801288e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012890:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8012892:	2300      	movs	r3, #0
}
 8012894:	4618      	mov	r0, r3
 8012896:	374c      	adds	r7, #76	; 0x4c
 8012898:	46bd      	mov	sp, r7
 801289a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801289c:	0802ae68 	.word	0x0802ae68
 80128a0:	0802ae04 	.word	0x0802ae04
 80128a4:	0802ae50 	.word	0x0802ae50
 80128a8:	0802aea8 	.word	0x0802aea8
 80128ac:	0802aeac 	.word	0x0802aeac
 80128b0:	0802ae8c 	.word	0x0802ae8c
 80128b4:	0802c5ac 	.word	0x0802c5ac
 80128b8:	0802aec0 	.word	0x0802aec0
 80128bc:	0802c5b0 	.word	0x0802c5b0
 80128c0:	0802aed4 	.word	0x0802aed4
 80128c4:	0802c5b4 	.word	0x0802c5b4
 80128c8:	0802c5b8 	.word	0x0802c5b8
 80128cc:	0802aee8 	.word	0x0802aee8

080128d0 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d101      	bne.n	80128e2 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 80128de:	f012 fcc6 	bl	802526e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	681b      	ldr	r3, [r3, #0]
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3708      	adds	r7, #8
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}

080128ee <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80128ee:	b480      	push	{r7}
 80128f0:	b083      	sub	sp, #12
 80128f2:	af00      	add	r7, sp, #0
 80128f4:	6078      	str	r0, [r7, #4]
 80128f6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	681a      	ldr	r2, [r3, #0]
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	429a      	cmp	r2, r3
 8012902:	da01      	bge.n	8012908 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	e000      	b.n	801290a <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8012908:	687b      	ldr	r3, [r7, #4]
    }
 801290a:	4618      	mov	r0, r3
 801290c:	370c      	adds	r7, #12
 801290e:	46bd      	mov	sp, r7
 8012910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012914:	4770      	bx	lr

08012916 <_ZSt3expf>:
  { return __builtin_expf(__x); }
 8012916:	b580      	push	{r7, lr}
 8012918:	b082      	sub	sp, #8
 801291a:	af00      	add	r7, sp, #0
 801291c:	ed87 0a01 	vstr	s0, [r7, #4]
 8012920:	ed97 0a01 	vldr	s0, [r7, #4]
 8012924:	f012 fb84 	bl	8025030 <expf>
 8012928:	eef0 7a40 	vmov.f32	s15, s0
 801292c:	eeb0 0a67 	vmov.f32	s0, s15
 8012930:	3708      	adds	r7, #8
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}

08012936 <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8012936:	b480      	push	{r7}
 8012938:	b083      	sub	sp, #12
 801293a:	af00      	add	r7, sp, #0
 801293c:	6078      	str	r0, [r7, #4]
 801293e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	f9b3 3000 	ldrsh.w	r3, [r3]
 801294c:	429a      	cmp	r2, r3
 801294e:	da01      	bge.n	8012954 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	e000      	b.n	8012956 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 8012954:	687b      	ldr	r3, [r7, #4]
    }
 8012956:	4618      	mov	r0, r3
 8012958:	370c      	adds	r7, #12
 801295a:	46bd      	mov	sp, r7
 801295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012960:	4770      	bx	lr

08012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8012962:	b580      	push	{r7, lr}
 8012964:	b086      	sub	sp, #24
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
 801296a:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d003      	beq.n	801297a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	685b      	ldr	r3, [r3, #4]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d103      	bne.n	8012982 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f7f9 fafc 	bl	800bf78 <_ZN6tflite12RuntimeShapeC1Ev>
 8012980:	e00d      	b.n	801299e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	3304      	adds	r3, #4
 8012992:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8012994:	68fa      	ldr	r2, [r7, #12]
 8012996:	6939      	ldr	r1, [r7, #16]
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f7f9 fafb 	bl	800bf94 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	3718      	adds	r7, #24
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}

080129a6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
 80129a6:	b480      	push	{r7}
 80129a8:	b083      	sub	sp, #12
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	4603      	mov	r3, r0
 80129ae:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 80129b0:	79fb      	ldrb	r3, [r7, #7]
 80129b2:	2b01      	cmp	r3, #1
 80129b4:	d002      	beq.n	80129bc <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x16>
 80129b6:	2b02      	cmp	r3, #2
 80129b8:	d002      	beq.n	80129c0 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1a>
 80129ba:	e003      	b.n	80129c4 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 80129bc:	2301      	movs	r3, #1
 80129be:	e002      	b.n	80129c6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 80129c0:	2302      	movs	r3, #2
 80129c2:	e000      	b.n	80129c6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 80129c4:	2300      	movs	r3, #0
  }
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	370c      	adds	r7, #12
 80129ca:	46bd      	mov	sp, r7
 80129cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d0:	4770      	bx	lr

080129d2 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 80129d2:	b580      	push	{r7, lr}
 80129d4:	b084      	sub	sp, #16
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	ed87 0a03 	vstr	s0, [r7, #12]
 80129dc:	edc7 0a02 	vstr	s1, [r7, #8]
 80129e0:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 80129e4:	f107 0208 	add.w	r2, r7, #8
 80129e8:	f107 030c 	add.w	r3, r7, #12
 80129ec:	4611      	mov	r1, r2
 80129ee:	4618      	mov	r0, r3
 80129f0:	f7f8 fbea 	bl	800b1c8 <_ZSt3maxIfERKT_S2_S2_>
 80129f4:	4602      	mov	r2, r0
 80129f6:	1d3b      	adds	r3, r7, #4
 80129f8:	4619      	mov	r1, r3
 80129fa:	4610      	mov	r0, r2
 80129fc:	f7f8 fbcb 	bl	800b196 <_ZSt3minIfERKT_S2_S2_>
 8012a00:	4603      	mov	r3, r0
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	ee07 3a90 	vmov	s15, r3
}
 8012a08:	eeb0 0a67 	vmov.f32	s0, s15
 8012a0c:	3710      	adds	r7, #16
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}

08012a12 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8012a12:	b580      	push	{r7, lr}
 8012a14:	b086      	sub	sp, #24
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	6078      	str	r0, [r7, #4]
 8012a1a:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	f7f9 fae2 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012a22:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8012a24:	683b      	ldr	r3, [r7, #0]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	db03      	blt.n	8012a32 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8012a2a:	683a      	ldr	r2, [r7, #0]
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	db01      	blt.n	8012a36 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8012a32:	f012 fc1c 	bl	802526e <abort>
  const auto* dims_data = shape.DimsData();
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	f7fe fa39 	bl	8010eae <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8012a3c:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8012a3e:	2301      	movs	r3, #1
 8012a40:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8012a42:	2300      	movs	r3, #0
 8012a44:	613b      	str	r3, [r7, #16]
 8012a46:	693a      	ldr	r2, [r7, #16]
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	da12      	bge.n	8012a74 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8012a4e:	693a      	ldr	r2, [r7, #16]
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d005      	beq.n	8012a62 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	009b      	lsls	r3, r3, #2
 8012a5a:	68ba      	ldr	r2, [r7, #8]
 8012a5c:	4413      	add	r3, r2
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	e000      	b.n	8012a64 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 8012a62:	2301      	movs	r3, #1
 8012a64:	697a      	ldr	r2, [r7, #20]
 8012a66:	fb03 f302 	mul.w	r3, r3, r2
 8012a6a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	3301      	adds	r3, #1
 8012a70:	613b      	str	r3, [r7, #16]
 8012a72:	e7e8      	b.n	8012a46 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 8012a74:	697b      	ldr	r3, [r7, #20]
}
 8012a76:	4618      	mov	r0, r3
 8012a78:	3718      	adds	r7, #24
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}

08012a7e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8012a7e:	b590      	push	{r4, r7, lr}
 8012a80:	b087      	sub	sp, #28
 8012a82:	af00      	add	r7, sp, #0
 8012a84:	60f8      	str	r0, [r7, #12]
 8012a86:	60b9      	str	r1, [r7, #8]
 8012a88:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 8012a8a:	68f8      	ldr	r0, [r7, #12]
 8012a8c:	f7f9 faab 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012a90:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8012a92:	2300      	movs	r3, #0
 8012a94:	617b      	str	r3, [r7, #20]
 8012a96:	697a      	ldr	r2, [r7, #20]
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	da15      	bge.n	8012aca <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 8012a9e:	697a      	ldr	r2, [r7, #20]
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	d00d      	beq.n	8012ac2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8012aa6:	6979      	ldr	r1, [r7, #20]
 8012aa8:	68f8      	ldr	r0, [r7, #12]
 8012aaa:	f7fe f9db 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012aae:	4604      	mov	r4, r0
 8012ab0:	6979      	ldr	r1, [r7, #20]
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f7fe f9d6 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	429c      	cmp	r4, r3
 8012abc:	d001      	beq.n	8012ac2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 8012abe:	f012 fbd6 	bl	802526e <abort>
  for (int i = 0; i < dims_count; ++i) {
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	3301      	adds	r3, #1
 8012ac6:	617b      	str	r3, [r7, #20]
 8012ac8:	e7e5      	b.n	8012a96 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 8012aca:	68b9      	ldr	r1, [r7, #8]
 8012acc:	68f8      	ldr	r0, [r7, #12]
 8012ace:	f7ff ffa0 	bl	8012a12 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8012ad2:	4603      	mov	r3, r0
}
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	371c      	adds	r7, #28
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd90      	pop	{r4, r7, pc}

08012adc <_ZN6tflite17CountLeadingZerosImEEiT_>:
  return result;
}
#endif

template <typename T>
int CountLeadingZeros(T integer_input) {
 8012adc:	b480      	push	{r7}
 8012ade:	b083      	sub	sp, #12
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d003      	beq.n	8012af2 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 8012af0:	e000      	b.n	8012af4 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 8012af2:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 8012af4:	4618      	mov	r0, r3
 8012af6:	370c      	adds	r7, #12
 8012af8:	46bd      	mov	sp, r7
 8012afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afe:	4770      	bx	lr

08012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 8012b00:	b480      	push	{r7}
 8012b02:	b083      	sub	sp, #12
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	370c      	adds	r7, #12
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b14:	4770      	bx	lr

08012b16 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8012b16:	b590      	push	{r4, r7, lr}
 8012b18:	b085      	sub	sp, #20
 8012b1a:	af00      	add	r7, sp, #0
 8012b1c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8012b1e:	f107 030c 	add.w	r3, r7, #12
 8012b22:	4618      	mov	r0, r3
 8012b24:	f7ff ffec 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012b28:	4604      	mov	r4, r0
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f7ff f958 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012b30:	4603      	mov	r3, r0
 8012b32:	6023      	str	r3, [r4, #0]
    return retval;
 8012b34:	68fb      	ldr	r3, [r7, #12]
  }
 8012b36:	4618      	mov	r0, r3
 8012b38:	3714      	adds	r7, #20
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd90      	pop	{r4, r7, pc}

08012b3e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8012b3e:	b580      	push	{r7, lr}
 8012b40:	b082      	sub	sp, #8
 8012b42:	af00      	add	r7, sp, #0
 8012b44:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8012b46:	2100      	movs	r1, #0
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f7fe fd85 	bl	8011658 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8012b4e:	4603      	mov	r3, r0
}
 8012b50:	4618      	mov	r0, r3
 8012b52:	3708      	adds	r7, #8
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}

08012b58 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b082      	sub	sp, #8
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f000 f813 	bl	8012b8c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 8012b66:	4603      	mov	r3, r0
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3708      	adds	r7, #8
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}

08012b70 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 8012b70:	b480      	push	{r7}
 8012b72:	b083      	sub	sp, #12
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	6039      	str	r1, [r7, #0]
  return a - b;
 8012b7a:	687a      	ldr	r2, [r7, #4]
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	1ad3      	subs	r3, r2, r3
}
 8012b80:	4618      	mov	r0, r3
 8012b82:	370c      	adds	r7, #12
 8012b84:	46bd      	mov	sp, r7
 8012b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8a:	4770      	bx	lr

08012b8c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b082      	sub	sp, #8
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8012b94:	2101      	movs	r1, #1
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f7fe fd5e 	bl	8011658 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8012b9c:	4603      	mov	r3, r0
  }
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3708      	adds	r7, #8
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}

08012ba6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 8012ba6:	b480      	push	{r7}
 8012ba8:	b089      	sub	sp, #36	; 0x24
 8012baa:	af00      	add	r7, sp, #0
 8012bac:	6078      	str	r0, [r7, #4]
 8012bae:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8012bb8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8012bbc:	2201      	movs	r2, #1
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8012bc4:	461a      	mov	r2, r3
 8012bc6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8012bca:	69f9      	ldr	r1, [r7, #28]
 8012bcc:	fb02 f001 	mul.w	r0, r2, r1
 8012bd0:	69b9      	ldr	r1, [r7, #24]
 8012bd2:	fb03 f101 	mul.w	r1, r3, r1
 8012bd6:	4401      	add	r1, r0
 8012bd8:	69b8      	ldr	r0, [r7, #24]
 8012bda:	fba0 2302 	umull	r2, r3, r0, r2
 8012bde:	4419      	add	r1, r3
 8012be0:	460b      	mov	r3, r1
 8012be2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8012be6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 8012bea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012bee:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 8012bf0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012bf4:	60bb      	str	r3, [r7, #8]
             ? min
 8012bf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012bfa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8012bfe:	f173 33ff 	sbcs.w	r3, r3, #4294967295	; 0xffffffff
 8012c02:	db0e      	blt.n	8012c22 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 8012c04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012c08:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012c0c:	f04f 0100 	mov.w	r1, #0
 8012c10:	4290      	cmp	r0, r2
 8012c12:	eb71 0303 	sbcs.w	r3, r1, r3
 8012c16:	db01      	blt.n	8012c1c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x76>
 8012c18:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 8012c1a:	e004      	b.n	8012c26 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             : wide_shifted > max ? max
 8012c1c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 8012c20:	e001      	b.n	8012c26 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             ? min
 8012c22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	3724      	adds	r7, #36	; 0x24
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c30:	4770      	bx	lr

08012c32 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 8012c32:	b590      	push	{r4, r7, lr}
 8012c34:	b085      	sub	sp, #20
 8012c36:	af00      	add	r7, sp, #0
 8012c38:	60f8      	str	r0, [r7, #12]
 8012c3a:	60b9      	str	r1, [r7, #8]
 8012c3c:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 8012c3e:	68b9      	ldr	r1, [r7, #8]
 8012c40:	68f8      	ldr	r0, [r7, #12]
 8012c42:	f7ff f8d8 	bl	8011df6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012c46:	4604      	mov	r4, r0
 8012c48:	68f8      	ldr	r0, [r7, #12]
 8012c4a:	f7ff f938 	bl	8011ebe <_ZN8gemmlowp6BitNotIlEET_S1_>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	6879      	ldr	r1, [r7, #4]
 8012c52:	4618      	mov	r0, r3
 8012c54:	f7ff f8cf 	bl	8011df6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	4620      	mov	r0, r4
 8012c5e:	f000 f805 	bl	8012c6c <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 8012c62:	4603      	mov	r3, r0
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	3714      	adds	r7, #20
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd90      	pop	{r4, r7, pc}

08012c6c <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 8012c6c:	b480      	push	{r7}
 8012c6e:	b083      	sub	sp, #12
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	6039      	str	r1, [r7, #0]
  return a ^ b;
 8012c76:	687a      	ldr	r2, [r7, #4]
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	4053      	eors	r3, r2
}
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	370c      	adds	r7, #12
 8012c80:	46bd      	mov	sp, r7
 8012c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c86:	4770      	bx	lr

08012c88 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 8012c88:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012c8c:	b08b      	sub	sp, #44	; 0x2c
 8012c8e:	af00      	add	r7, sp, #0
 8012c90:	6078      	str	r0, [r7, #4]
 8012c92:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 8012c94:	6879      	ldr	r1, [r7, #4]
 8012c96:	4608      	mov	r0, r1
 8012c98:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8012c9c:	e9c7 0108 	strd	r0, r1, [r7, #32]
  std::int64_t b64 = b;
 8012ca0:	6839      	ldr	r1, [r7, #0]
 8012ca2:	4608      	mov	r0, r1
 8012ca4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8012ca8:	e9c7 0106 	strd	r0, r1, [r7, #24]
  std::int64_t sum = a64 + b64;
 8012cac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8012cb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012cb4:	eb18 0a00 	adds.w	sl, r8, r0
 8012cb8:	eb49 0b01 	adc.w	fp, r9, r1
 8012cbc:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8012cc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012cc4:	2800      	cmp	r0, #0
 8012cc6:	f171 0100 	sbcs.w	r1, r1, #0
 8012cca:	db04      	blt.n	8012cd6 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4e>
 8012ccc:	f04f 0001 	mov.w	r0, #1
 8012cd0:	f04f 0100 	mov.w	r1, #0
 8012cd4:	e003      	b.n	8012cde <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x56>
 8012cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012cda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012cde:	e9c7 0102 	strd	r0, r1, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8012ce2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8012ce6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012cea:	eb18 0400 	adds.w	r4, r8, r0
 8012cee:	eb49 0501 	adc.w	r5, r9, r1
 8012cf2:	0fe9      	lsrs	r1, r5, #31
 8012cf4:	4608      	mov	r0, r1
 8012cf6:	f04f 0100 	mov.w	r1, #0
 8012cfa:	1902      	adds	r2, r0, r4
 8012cfc:	eb41 0305 	adc.w	r3, r1, r5
 8012d00:	f04f 0000 	mov.w	r0, #0
 8012d04:	f04f 0100 	mov.w	r1, #0
 8012d08:	0850      	lsrs	r0, r2, #1
 8012d0a:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8012d0e:	1059      	asrs	r1, r3, #1
 8012d10:	4602      	mov	r2, r0
 8012d12:	460b      	mov	r3, r1
 8012d14:	4613      	mov	r3, r2
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	372c      	adds	r7, #44	; 0x2c
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012d20:	4770      	bx	lr

08012d22 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8012d22:	b580      	push	{r7, lr}
 8012d24:	b084      	sub	sp, #16
 8012d26:	af00      	add	r7, sp, #0
 8012d28:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8012d2a:	f107 030c 	add.w	r3, r7, #12
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f7ff fee6 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012d34:	4602      	mov	r2, r0
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6013      	str	r3, [r2, #0]
    return retval;
 8012d3a:	68fb      	ldr	r3, [r7, #12]
  }
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3710      	adds	r7, #16
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}

08012d44 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b08a      	sub	sp, #40	; 0x28
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 8012d4c:	f000 f9f7 	bl	801313e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8012d50:	4603      	mov	r3, r0
 8012d52:	4619      	mov	r1, r3
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f000 f9fd 	bl	8013154 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 8012d5e:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 8012d62:	f000 fa29 	bl	80131b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8012d66:	4603      	mov	r3, r0
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f000 fa11 	bl	8013190 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 8012d72:	4823      	ldr	r0, [pc, #140]	; (8012e00 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8012d74:	f000 fa20 	bl	80131b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f000 fa08 	bl	8013190 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8012d80:	4603      	mov	r3, r0
 8012d82:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8012d84:	69b9      	ldr	r1, [r7, #24]
 8012d86:	6a38      	ldr	r0, [r7, #32]
 8012d88:	f000 fa23 	bl	80131d2 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	4619      	mov	r1, r3
 8012d90:	69f8      	ldr	r0, [r7, #28]
 8012d92:	f000 fa40 	bl	8013216 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012d96:	4603      	mov	r3, r0
 8012d98:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8012d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da0:	2b02      	cmp	r3, #2
 8012da2:	dc21      	bgt.n	8012de8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8012da4:	6979      	ldr	r1, [r7, #20]
 8012da6:	6a38      	ldr	r0, [r7, #32]
 8012da8:	f000 fa13 	bl	80131d2 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012dac:	4603      	mov	r3, r0
 8012dae:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 8012db0:	f000 fa4f 	bl	8013252 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8012db4:	4603      	mov	r3, r0
 8012db6:	6939      	ldr	r1, [r7, #16]
 8012db8:	4618      	mov	r0, r3
 8012dba:	f000 fa53 	bl	8013264 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 8012dc2:	68f9      	ldr	r1, [r7, #12]
 8012dc4:	6978      	ldr	r0, [r7, #20]
 8012dc6:	f000 fa6b 	bl	80132a0 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f000 fa89 	bl	80132e4 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	4619      	mov	r1, r3
 8012dd6:	6978      	ldr	r0, [r7, #20]
 8012dd8:	f000 fa1d 	bl	8013216 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8012de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de2:	3301      	adds	r3, #1
 8012de4:	627b      	str	r3, [r7, #36]	; 0x24
 8012de6:	e7da      	b.n	8012d9e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 8012de8:	6978      	ldr	r0, [r7, #20]
 8012dea:	f000 fa95 	bl	8013318 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 8012dee:	4603      	mov	r3, r0
 8012df0:	4618      	mov	r0, r3
 8012df2:	f000 faa7 	bl	8013344 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8012df6:	4603      	mov	r3, r0
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	3728      	adds	r7, #40	; 0x28
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}
 8012e00:	c3c3c3c4 	.word	0xc3c3c3c4

08012e04 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b084      	sub	sp, #16
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8012e0c:	f107 030c 	add.w	r3, r7, #12
 8012e10:	4618      	mov	r0, r3
 8012e12:	f000 f989 	bl	8013128 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012e16:	4602      	mov	r2, r0
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6013      	str	r3, [r2, #0]
    return retval;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
  }
 8012e1e:	4618      	mov	r0, r3
 8012e20:	3710      	adds	r7, #16
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}
	...

08012e28 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8012e28:	b590      	push	{r4, r7, lr}
 8012e2a:	b091      	sub	sp, #68	; 0x44
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8012e30:	f000 faa2 	bl	8013378 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8012e34:	4603      	mov	r3, r0
 8012e36:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8012e38:	2001      	movs	r0, #1
 8012e3a:	f000 faa6 	bl	801338a <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	4619      	mov	r1, r3
 8012e42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012e44:	f000 fab5 	bl	80133b2 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8012e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012e4e:	6878      	ldr	r0, [r7, #4]
 8012e50:	f000 facd 	bl	80133ee <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012e54:	4603      	mov	r3, r0
 8012e56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f000 faaa 	bl	80133b2 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8012e62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e64:	f000 fae1 	bl	801342a <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f000 faf8 	bl	8013460 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8012e70:	4603      	mov	r3, r0
 8012e72:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8012e74:	6879      	ldr	r1, [r7, #4]
 8012e76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e78:	f000 fa9b 	bl	80133b2 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012e80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012e84:	4618      	mov	r0, r3
 8012e86:	f000 f94f 	bl	8013128 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8012e90:	4883      	ldr	r0, [pc, #524]	; (80130a0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8012e92:	f7ff fe54 	bl	8012b3e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012e96:	4603      	mov	r3, r0
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f7ff fe3c 	bl	8012b16 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8012ea2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8012ea6:	f7fe ff9b 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	4619      	mov	r1, r3
 8012eae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012eb0:	f7fe ffa1 	bl	8011df6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7fe fff0 	bl	8011e9c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012ebc:	4604      	mov	r4, r0
 8012ebe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ec2:	f000 fb2f 	bl	8013524 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012eca:	4619      	mov	r1, r3
 8012ecc:	4620      	mov	r0, r4
 8012ece:	f000 fb4b 	bl	8013568 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8012ed6:	4873      	ldr	r0, [pc, #460]	; (80130a4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8012ed8:	f7ff fe31 	bl	8012b3e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012edc:	4603      	mov	r3, r0
 8012ede:	4618      	mov	r0, r3
 8012ee0:	f7ff fe19 	bl	8012b16 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	623b      	str	r3, [r7, #32]
 8012ee8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8012eec:	f7fe ff78 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012ef6:	f7fe ff7e 	bl	8011df6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012efa:	4603      	mov	r3, r0
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7fe ffcd 	bl	8011e9c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012f02:	4604      	mov	r4, r0
 8012f04:	6a39      	ldr	r1, [r7, #32]
 8012f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f08:	f000 fb0c 	bl	8013524 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f10:	4619      	mov	r1, r3
 8012f12:	4620      	mov	r0, r4
 8012f14:	f000 fb28 	bl	8013568 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 8012f1c:	4862      	ldr	r0, [pc, #392]	; (80130a8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8012f1e:	f7ff fe0e 	bl	8012b3e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012f22:	4603      	mov	r3, r0
 8012f24:	4618      	mov	r0, r3
 8012f26:	f7ff fdf6 	bl	8012b16 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	61fb      	str	r3, [r7, #28]
 8012f2e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8012f32:	f7fe ff55 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012f36:	4603      	mov	r3, r0
 8012f38:	4619      	mov	r1, r3
 8012f3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012f3c:	f7fe ff5b 	bl	8011df6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012f40:	4603      	mov	r3, r0
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7fe ffaa 	bl	8011e9c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012f48:	4604      	mov	r4, r0
 8012f4a:	69f9      	ldr	r1, [r7, #28]
 8012f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f4e:	f000 fae9 	bl	8013524 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012f52:	4603      	mov	r3, r0
 8012f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f56:	4619      	mov	r1, r3
 8012f58:	4620      	mov	r0, r4
 8012f5a:	f000 fb05 	bl	8013568 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8012f62:	4852      	ldr	r0, [pc, #328]	; (80130ac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8012f64:	f7ff fdeb 	bl	8012b3e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7ff fdd3 	bl	8012b16 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012f70:	4603      	mov	r3, r0
 8012f72:	61bb      	str	r3, [r7, #24]
 8012f74:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8012f78:	f7fe ff32 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	4619      	mov	r1, r3
 8012f80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012f82:	f7fe ff38 	bl	8011df6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012f86:	4603      	mov	r3, r0
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7fe ff87 	bl	8011e9c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012f8e:	4604      	mov	r4, r0
 8012f90:	69b9      	ldr	r1, [r7, #24]
 8012f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f94:	f000 fac6 	bl	8013524 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f9c:	4619      	mov	r1, r3
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	f000 fae2 	bl	8013568 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8012fa8:	4841      	ldr	r0, [pc, #260]	; (80130b0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8012faa:	f7ff fdc8 	bl	8012b3e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f7ff fdb0 	bl	8012b16 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	617b      	str	r3, [r7, #20]
 8012fba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8012fbe:	f7fe ff0f 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	4619      	mov	r1, r3
 8012fc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012fc8:	f7fe ff15 	bl	8011df6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f7fe ff64 	bl	8011e9c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012fd4:	4604      	mov	r4, r0
 8012fd6:	6979      	ldr	r1, [r7, #20]
 8012fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012fda:	f000 faa3 	bl	8013524 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fe2:	4619      	mov	r1, r3
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	f000 fabf 	bl	8013568 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012fea:	4603      	mov	r3, r0
 8012fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 8012fee:	4831      	ldr	r0, [pc, #196]	; (80130b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8012ff0:	f7ff fda5 	bl	8012b3e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f7ff fd8d 	bl	8012b16 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	613b      	str	r3, [r7, #16]
 8013000:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8013004:	f7fe feec 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013008:	4603      	mov	r3, r0
 801300a:	4619      	mov	r1, r3
 801300c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801300e:	f7fe fef2 	bl	8011df6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8013012:	4603      	mov	r3, r0
 8013014:	4618      	mov	r0, r3
 8013016:	f7fe ff41 	bl	8011e9c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801301a:	4604      	mov	r4, r0
 801301c:	6939      	ldr	r1, [r7, #16]
 801301e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013020:	f000 fa80 	bl	8013524 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013024:	4603      	mov	r3, r0
 8013026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013028:	4619      	mov	r1, r3
 801302a:	4620      	mov	r0, r4
 801302c:	f000 fa9c 	bl	8013568 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8013030:	4603      	mov	r3, r0
 8013032:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 8013034:	20f2      	movs	r0, #242	; 0xf2
 8013036:	f7ff fd82 	bl	8012b3e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801303a:	4603      	mov	r3, r0
 801303c:	4618      	mov	r0, r3
 801303e:	f7ff fd6a 	bl	8012b16 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013042:	4603      	mov	r3, r0
 8013044:	60fb      	str	r3, [r7, #12]
 8013046:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801304a:	f7fe fec9 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801304e:	4603      	mov	r3, r0
 8013050:	4619      	mov	r1, r3
 8013052:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013054:	f7fe fecf 	bl	8011df6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8013058:	4603      	mov	r3, r0
 801305a:	4618      	mov	r0, r3
 801305c:	f7fe ff1e 	bl	8011e9c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8013060:	4604      	mov	r4, r0
 8013062:	68f9      	ldr	r1, [r7, #12]
 8013064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013066:	f000 fa5d 	bl	8013524 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801306a:	4603      	mov	r3, r0
 801306c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801306e:	4619      	mov	r1, r3
 8013070:	4620      	mov	r0, r4
 8013072:	f000 fa79 	bl	8013568 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8013076:	4603      	mov	r3, r0
 8013078:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f000 fa95 	bl	80135aa <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8013080:	4604      	mov	r4, r0
 8013082:	f000 f85c 	bl	801313e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8013086:	4603      	mov	r3, r0
 8013088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801308a:	4619      	mov	r1, r3
 801308c:	4620      	mov	r0, r4
 801308e:	f000 fa6b 	bl	8013568 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8013092:	4603      	mov	r3, r0
 8013094:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8013096:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8013098:	4618      	mov	r0, r3
 801309a:	3744      	adds	r7, #68	; 0x44
 801309c:	46bd      	mov	sp, r7
 801309e:	bd90      	pop	{r4, r7, pc}
 80130a0:	63afbe7b 	.word	0x63afbe7b
 80130a4:	4da2cbf2 	.word	0x4da2cbf2
 80130a8:	2f16ac6c 	.word	0x2f16ac6c
 80130ac:	1152aaa4 	.word	0x1152aaa4
 80130b0:	02582ab7 	.word	0x02582ab7
 80130b4:	000afe11 	.word	0x000afe11

080130b8 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80130b8:	b5b0      	push	{r4, r5, r7, lr}
 80130ba:	b084      	sub	sp, #16
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80130c0:	1d3b      	adds	r3, r7, #4
 80130c2:	4618      	mov	r0, r3
 80130c4:	f7ff fd1c 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80130c8:	4603      	mov	r3, r0
 80130ca:	681d      	ldr	r5, [r3, #0]
 80130cc:	f107 030c 	add.w	r3, r7, #12
 80130d0:	4618      	mov	r0, r3
 80130d2:	f000 fa7c 	bl	80135ce <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80130d6:	4604      	mov	r4, r0
 80130d8:	4628      	mov	r0, r5
 80130da:	f000 fa83 	bl	80135e4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 80130de:	4603      	mov	r3, r0
 80130e0:	6023      	str	r3, [r4, #0]
  return result;
 80130e2:	68fb      	ldr	r3, [r7, #12]
}
 80130e4:	4618      	mov	r0, r3
 80130e6:	3710      	adds	r7, #16
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bdb0      	pop	{r4, r5, r7, pc}

080130ec <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80130ec:	b590      	push	{r4, r7, lr}
 80130ee:	b083      	sub	sp, #12
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	6039      	str	r1, [r7, #0]
 80130f6:	1d3b      	adds	r3, r7, #4
 80130f8:	4618      	mov	r0, r3
 80130fa:	f000 fa68 	bl	80135ce <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80130fe:	4603      	mov	r3, r0
 8013100:	681c      	ldr	r4, [r3, #0]
 8013102:	463b      	mov	r3, r7
 8013104:	4618      	mov	r0, r3
 8013106:	f000 fa62 	bl	80135ce <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801310a:	4603      	mov	r3, r0
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	4619      	mov	r1, r3
 8013110:	4620      	mov	r0, r4
 8013112:	f7fe fea1 	bl	8011e58 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013116:	4603      	mov	r3, r0
 8013118:	4618      	mov	r0, r3
 801311a:	f000 fa6f 	bl	80135fc <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 801311e:	4603      	mov	r3, r0
 8013120:	4618      	mov	r0, r3
 8013122:	370c      	adds	r7, #12
 8013124:	46bd      	mov	sp, r7
 8013126:	bd90      	pop	{r4, r7, pc}

08013128 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 8013128:	b480      	push	{r7}
 801312a:	b083      	sub	sp, #12
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	4618      	mov	r0, r3
 8013134:	370c      	adds	r7, #12
 8013136:	46bd      	mov	sp, r7
 8013138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313c:	4770      	bx	lr

0801313e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 801313e:	b580      	push	{r7, lr}
 8013140:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8013142:	f000 fa82 	bl	801364a <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 8013146:	4603      	mov	r3, r0
 8013148:	4618      	mov	r0, r3
 801314a:	f7ff fce4 	bl	8012b16 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801314e:	4603      	mov	r3, r0
  }
 8013150:	4618      	mov	r0, r3
 8013152:	bd80      	pop	{r7, pc}

08013154 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 8013154:	b590      	push	{r4, r7, lr}
 8013156:	b083      	sub	sp, #12
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
 801315c:	6039      	str	r1, [r7, #0]
 801315e:	1d3b      	adds	r3, r7, #4
 8013160:	4618      	mov	r0, r3
 8013162:	f7ff fccd 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013166:	4603      	mov	r3, r0
 8013168:	681c      	ldr	r4, [r3, #0]
 801316a:	463b      	mov	r3, r7
 801316c:	4618      	mov	r0, r3
 801316e:	f7ff fcc7 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013172:	4603      	mov	r3, r0
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	4619      	mov	r1, r3
 8013178:	4620      	mov	r0, r4
 801317a:	f7ff fd85 	bl	8012c88 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 801317e:	4603      	mov	r3, r0
 8013180:	4618      	mov	r0, r3
 8013182:	f7ff fdce 	bl	8012d22 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013186:	4603      	mov	r3, r0
 8013188:	4618      	mov	r0, r3
 801318a:	370c      	adds	r7, #12
 801318c:	46bd      	mov	sp, r7
 801318e:	bd90      	pop	{r4, r7, pc}

08013190 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8013190:	b590      	push	{r4, r7, lr}
 8013192:	b085      	sub	sp, #20
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8013198:	f107 030c 	add.w	r3, r7, #12
 801319c:	4618      	mov	r0, r3
 801319e:	f000 fa5b 	bl	8013658 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80131a2:	4604      	mov	r4, r0
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f7fe fe1b 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80131aa:	4603      	mov	r3, r0
 80131ac:	6023      	str	r3, [r4, #0]
    return retval;
 80131ae:	68fb      	ldr	r3, [r7, #12]
  }
 80131b0:	4618      	mov	r0, r3
 80131b2:	3714      	adds	r7, #20
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd90      	pop	{r4, r7, pc}

080131b8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b082      	sub	sp, #8
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 80131c0:	2100      	movs	r1, #0
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f7fe fa48 	bl	8011658 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80131c8:	4603      	mov	r3, r0
}
 80131ca:	4618      	mov	r0, r3
 80131cc:	3708      	adds	r7, #8
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}

080131d2 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 80131d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131d4:	b085      	sub	sp, #20
 80131d6:	af00      	add	r7, sp, #0
 80131d8:	6078      	str	r0, [r7, #4]
 80131da:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 80131dc:	1d3b      	adds	r3, r7, #4
 80131de:	4618      	mov	r0, r3
 80131e0:	f7ff fc8e 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80131e4:	4603      	mov	r3, r0
 80131e6:	681d      	ldr	r5, [r3, #0]
 80131e8:	463b      	mov	r3, r7
 80131ea:	4618      	mov	r0, r3
 80131ec:	f000 fa34 	bl	8013658 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80131f0:	4603      	mov	r3, r0
 80131f2:	681e      	ldr	r6, [r3, #0]
 80131f4:	f107 030c 	add.w	r3, r7, #12
 80131f8:	4618      	mov	r0, r3
 80131fa:	f000 fa2d 	bl	8013658 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80131fe:	4604      	mov	r4, r0
 8013200:	4631      	mov	r1, r6
 8013202:	4628      	mov	r0, r5
 8013204:	f7fd fdbe 	bl	8010d84 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013208:	4603      	mov	r3, r0
 801320a:	6023      	str	r3, [r4, #0]
  return c;
 801320c:	68fb      	ldr	r3, [r7, #12]
}
 801320e:	4618      	mov	r0, r3
 8013210:	3714      	adds	r7, #20
 8013212:	46bd      	mov	sp, r7
 8013214:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013216 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8013216:	b590      	push	{r4, r7, lr}
 8013218:	b083      	sub	sp, #12
 801321a:	af00      	add	r7, sp, #0
 801321c:	6078      	str	r0, [r7, #4]
 801321e:	6039      	str	r1, [r7, #0]
 8013220:	1d3b      	adds	r3, r7, #4
 8013222:	4618      	mov	r0, r3
 8013224:	f000 fa18 	bl	8013658 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013228:	4603      	mov	r3, r0
 801322a:	681c      	ldr	r4, [r3, #0]
 801322c:	463b      	mov	r3, r7
 801322e:	4618      	mov	r0, r3
 8013230:	f000 fa12 	bl	8013658 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013234:	4603      	mov	r3, r0
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	4619      	mov	r1, r3
 801323a:	4620      	mov	r0, r4
 801323c:	f7fe fe0c 	bl	8011e58 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013240:	4603      	mov	r3, r0
 8013242:	4618      	mov	r0, r3
 8013244:	f000 fa13 	bl	801366e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8013248:	4603      	mov	r3, r0
 801324a:	4618      	mov	r0, r3
 801324c:	370c      	adds	r7, #12
 801324e:	46bd      	mov	sp, r7
 8013250:	bd90      	pop	{r4, r7, pc}

08013252 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 8013252:	b580      	push	{r7, lr}
 8013254:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8013256:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801325a:	f7ff ff99 	bl	8013190 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801325e:	4603      	mov	r3, r0
  }
 8013260:	4618      	mov	r0, r3
 8013262:	bd80      	pop	{r7, pc}

08013264 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8013264:	b590      	push	{r4, r7, lr}
 8013266:	b083      	sub	sp, #12
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	6039      	str	r1, [r7, #0]
 801326e:	1d3b      	adds	r3, r7, #4
 8013270:	4618      	mov	r0, r3
 8013272:	f000 f9f1 	bl	8013658 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013276:	4603      	mov	r3, r0
 8013278:	681c      	ldr	r4, [r3, #0]
 801327a:	463b      	mov	r3, r7
 801327c:	4618      	mov	r0, r3
 801327e:	f000 f9eb 	bl	8013658 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013282:	4603      	mov	r3, r0
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	4619      	mov	r1, r3
 8013288:	4620      	mov	r0, r4
 801328a:	f7ff fc71 	bl	8012b70 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801328e:	4603      	mov	r3, r0
 8013290:	4618      	mov	r0, r3
 8013292:	f000 f9ec 	bl	801366e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8013296:	4603      	mov	r3, r0
 8013298:	4618      	mov	r0, r3
 801329a:	370c      	adds	r7, #12
 801329c:	46bd      	mov	sp, r7
 801329e:	bd90      	pop	{r4, r7, pc}

080132a0 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 80132a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132a2:	b085      	sub	sp, #20
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 80132aa:	1d3b      	adds	r3, r7, #4
 80132ac:	4618      	mov	r0, r3
 80132ae:	f000 f9d3 	bl	8013658 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80132b2:	4603      	mov	r3, r0
 80132b4:	681d      	ldr	r5, [r3, #0]
 80132b6:	463b      	mov	r3, r7
 80132b8:	4618      	mov	r0, r3
 80132ba:	f000 f9cd 	bl	8013658 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80132be:	4603      	mov	r3, r0
 80132c0:	681e      	ldr	r6, [r3, #0]
 80132c2:	f107 030c 	add.w	r3, r7, #12
 80132c6:	4618      	mov	r0, r3
 80132c8:	f000 f9e2 	bl	8013690 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 80132cc:	4604      	mov	r4, r0
 80132ce:	4631      	mov	r1, r6
 80132d0:	4628      	mov	r0, r5
 80132d2:	f7fd fd57 	bl	8010d84 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80132d6:	4603      	mov	r3, r0
 80132d8:	6023      	str	r3, [r4, #0]
  return c;
 80132da:	68fb      	ldr	r3, [r7, #12]
}
 80132dc:	4618      	mov	r0, r3
 80132de:	3714      	adds	r7, #20
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080132e4 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80132e4:	b5b0      	push	{r4, r5, r7, lr}
 80132e6:	b084      	sub	sp, #16
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80132ec:	1d3b      	adds	r3, r7, #4
 80132ee:	4618      	mov	r0, r3
 80132f0:	f000 f9ce 	bl	8013690 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 80132f4:	4603      	mov	r3, r0
 80132f6:	681d      	ldr	r5, [r3, #0]
 80132f8:	f107 030c 	add.w	r3, r7, #12
 80132fc:	4618      	mov	r0, r3
 80132fe:	f000 f9ab 	bl	8013658 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013302:	4604      	mov	r4, r0
 8013304:	4628      	mov	r0, r5
 8013306:	f000 f9ce 	bl	80136a6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 801330a:	4603      	mov	r3, r0
 801330c:	6023      	str	r3, [r4, #0]
  return result;
 801330e:	68fb      	ldr	r3, [r7, #12]
}
 8013310:	4618      	mov	r0, r3
 8013312:	3710      	adds	r7, #16
 8013314:	46bd      	mov	sp, r7
 8013316:	bdb0      	pop	{r4, r5, r7, pc}

08013318 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 8013318:	b590      	push	{r4, r7, lr}
 801331a:	b085      	sub	sp, #20
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 8013320:	1d3b      	adds	r3, r7, #4
 8013322:	4618      	mov	r0, r3
 8013324:	f000 f998 	bl	8013658 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013328:	4604      	mov	r4, r0
 801332a:	f107 030c 	add.w	r3, r7, #12
 801332e:	4618      	mov	r0, r3
 8013330:	f000 f9c5 	bl	80136be <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8013334:	4602      	mov	r2, r0
 8013336:	6823      	ldr	r3, [r4, #0]
 8013338:	6013      	str	r3, [r2, #0]
  return c;
 801333a:	68fb      	ldr	r3, [r7, #12]
}
 801333c:	4618      	mov	r0, r3
 801333e:	3714      	adds	r7, #20
 8013340:	46bd      	mov	sp, r7
 8013342:	bd90      	pop	{r4, r7, pc}

08013344 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8013344:	b5b0      	push	{r4, r5, r7, lr}
 8013346:	b084      	sub	sp, #16
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801334c:	1d3b      	adds	r3, r7, #4
 801334e:	4618      	mov	r0, r3
 8013350:	f000 f9b5 	bl	80136be <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8013354:	4603      	mov	r3, r0
 8013356:	681d      	ldr	r5, [r3, #0]
 8013358:	f107 030c 	add.w	r3, r7, #12
 801335c:	4618      	mov	r0, r3
 801335e:	f7ff fbcf 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013362:	4604      	mov	r4, r0
 8013364:	4628      	mov	r0, r5
 8013366:	f000 f9b5 	bl	80136d4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 801336a:	4603      	mov	r3, r0
 801336c:	6023      	str	r3, [r4, #0]
  return result;
 801336e:	68fb      	ldr	r3, [r7, #12]
}
 8013370:	4618      	mov	r0, r3
 8013372:	3710      	adds	r7, #16
 8013374:	46bd      	mov	sp, r7
 8013376:	bdb0      	pop	{r4, r5, r7, pc}

08013378 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8013378:	b580      	push	{r7, lr}
 801337a:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801337c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8013380:	f000 f803 	bl	801338a <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8013384:	4603      	mov	r3, r0
  }
 8013386:	4618      	mov	r0, r3
 8013388:	bd80      	pop	{r7, pc}

0801338a <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801338a:	b590      	push	{r4, r7, lr}
 801338c:	b085      	sub	sp, #20
 801338e:	af00      	add	r7, sp, #0
 8013390:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8013392:	f107 030c 	add.w	r3, r7, #12
 8013396:	4618      	mov	r0, r3
 8013398:	f7ff fec6 	bl	8013128 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801339c:	4604      	mov	r4, r0
 801339e:	6878      	ldr	r0, [r7, #4]
 80133a0:	f7fe fd1e 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80133a4:	4603      	mov	r3, r0
 80133a6:	6023      	str	r3, [r4, #0]
    return retval;
 80133a8:	68fb      	ldr	r3, [r7, #12]
  }
 80133aa:	4618      	mov	r0, r3
 80133ac:	3714      	adds	r7, #20
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd90      	pop	{r4, r7, pc}

080133b2 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 80133b2:	b590      	push	{r4, r7, lr}
 80133b4:	b083      	sub	sp, #12
 80133b6:	af00      	add	r7, sp, #0
 80133b8:	6078      	str	r0, [r7, #4]
 80133ba:	6039      	str	r1, [r7, #0]
 80133bc:	1d3b      	adds	r3, r7, #4
 80133be:	4618      	mov	r0, r3
 80133c0:	f7ff feb2 	bl	8013128 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80133c4:	4603      	mov	r3, r0
 80133c6:	681c      	ldr	r4, [r3, #0]
 80133c8:	463b      	mov	r3, r7
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7ff feac 	bl	8013128 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80133d0:	4603      	mov	r3, r0
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	4619      	mov	r1, r3
 80133d6:	4620      	mov	r0, r4
 80133d8:	f7ff fbca 	bl	8012b70 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 80133dc:	4603      	mov	r3, r0
 80133de:	4618      	mov	r0, r3
 80133e0:	f7ff fd10 	bl	8012e04 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80133e4:	4603      	mov	r3, r0
 80133e6:	4618      	mov	r0, r3
 80133e8:	370c      	adds	r7, #12
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd90      	pop	{r4, r7, pc}

080133ee <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 80133ee:	b590      	push	{r4, r7, lr}
 80133f0:	b083      	sub	sp, #12
 80133f2:	af00      	add	r7, sp, #0
 80133f4:	6078      	str	r0, [r7, #4]
 80133f6:	6039      	str	r1, [r7, #0]
 80133f8:	1d3b      	adds	r3, r7, #4
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7ff fe94 	bl	8013128 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8013400:	4603      	mov	r3, r0
 8013402:	681c      	ldr	r4, [r3, #0]
 8013404:	463b      	mov	r3, r7
 8013406:	4618      	mov	r0, r3
 8013408:	f7ff fe8e 	bl	8013128 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801340c:	4603      	mov	r3, r0
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	4619      	mov	r1, r3
 8013412:	4620      	mov	r0, r4
 8013414:	f7fe fcef 	bl	8011df6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8013418:	4603      	mov	r3, r0
 801341a:	4618      	mov	r0, r3
 801341c:	f7ff fcf2 	bl	8012e04 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8013420:	4603      	mov	r3, r0
 8013422:	4618      	mov	r0, r3
 8013424:	370c      	adds	r7, #12
 8013426:	46bd      	mov	sp, r7
 8013428:	bd90      	pop	{r4, r7, pc}

0801342a <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801342a:	b5b0      	push	{r4, r5, r7, lr}
 801342c:	b084      	sub	sp, #16
 801342e:	af00      	add	r7, sp, #0
 8013430:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8013432:	1d3b      	adds	r3, r7, #4
 8013434:	4618      	mov	r0, r3
 8013436:	f7ff fe77 	bl	8013128 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801343a:	4603      	mov	r3, r0
 801343c:	681d      	ldr	r5, [r3, #0]
 801343e:	f107 030c 	add.w	r3, r7, #12
 8013442:	4618      	mov	r0, r3
 8013444:	f7ff fb5c 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013448:	4604      	mov	r4, r0
 801344a:	4628      	mov	r0, r5
 801344c:	f000 f94e 	bl	80136ec <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 8013450:	4603      	mov	r3, r0
 8013452:	6023      	str	r3, [r4, #0]
  return result;
 8013454:	68fb      	ldr	r3, [r7, #12]
}
 8013456:	4618      	mov	r0, r3
 8013458:	3710      	adds	r7, #16
 801345a:	46bd      	mov	sp, r7
 801345c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013460 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8013460:	b580      	push	{r7, lr}
 8013462:	b08a      	sub	sp, #40	; 0x28
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 8013468:	482c      	ldr	r0, [pc, #176]	; (801351c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801346a:	f7ff fb68 	bl	8012b3e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801346e:	4603      	mov	r3, r0
 8013470:	4618      	mov	r0, r3
 8013472:	f7ff fb50 	bl	8012b16 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013476:	4603      	mov	r3, r0
 8013478:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 801347a:	4829      	ldr	r0, [pc, #164]	; (8013520 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 801347c:	f7ff fb5f 	bl	8012b3e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8013480:	4603      	mov	r3, r0
 8013482:	4618      	mov	r0, r3
 8013484:	f7ff fb47 	bl	8012b16 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013488:	4603      	mov	r3, r0
 801348a:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 801348c:	f000 f93a 	bl	8013704 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 8013490:	4603      	mov	r3, r0
 8013492:	4619      	mov	r1, r3
 8013494:	6878      	ldr	r0, [r7, #4]
 8013496:	f000 f93e 	bl	8013716 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801349a:	4603      	mov	r3, r0
 801349c:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 801349e:	69f9      	ldr	r1, [r7, #28]
 80134a0:	69f8      	ldr	r0, [r7, #28]
 80134a2:	f000 f83f 	bl	8013524 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80134a6:	4603      	mov	r3, r0
 80134a8:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 80134aa:	69f9      	ldr	r1, [r7, #28]
 80134ac:	69b8      	ldr	r0, [r7, #24]
 80134ae:	f000 f839 	bl	8013524 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80134b2:	4603      	mov	r3, r0
 80134b4:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 80134b6:	69b9      	ldr	r1, [r7, #24]
 80134b8:	69b8      	ldr	r0, [r7, #24]
 80134ba:	f000 f833 	bl	8013524 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80134be:	4603      	mov	r3, r0
 80134c0:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 80134c2:	6938      	ldr	r0, [r7, #16]
 80134c4:	f000 f945 	bl	8013752 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 80134c8:	4603      	mov	r3, r0
 80134ca:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 80134cc:	6979      	ldr	r1, [r7, #20]
 80134ce:	68f8      	ldr	r0, [r7, #12]
 80134d0:	f000 f921 	bl	8013716 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80134d4:	4603      	mov	r3, r0
 80134d6:	6a39      	ldr	r1, [r7, #32]
 80134d8:	4618      	mov	r0, r3
 80134da:	f000 f823 	bl	8013524 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80134de:	4603      	mov	r3, r0
 80134e0:	69b9      	ldr	r1, [r7, #24]
 80134e2:	4618      	mov	r0, r3
 80134e4:	f000 f917 	bl	8013716 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80134e8:	4603      	mov	r3, r0
 80134ea:	4618      	mov	r0, r3
 80134ec:	f000 f947 	bl	801377e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 80134f0:	4603      	mov	r3, r0
 80134f2:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 80134f4:	68b9      	ldr	r1, [r7, #8]
 80134f6:	69f8      	ldr	r0, [r7, #28]
 80134f8:	f000 f90d 	bl	8013716 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80134fc:	4603      	mov	r3, r0
 80134fe:	4619      	mov	r1, r3
 8013500:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013502:	f000 f80f 	bl	8013524 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013506:	4603      	mov	r3, r0
 8013508:	4619      	mov	r1, r3
 801350a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801350c:	f000 f94d 	bl	80137aa <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013510:	4603      	mov	r3, r0
}
 8013512:	4618      	mov	r0, r3
 8013514:	3728      	adds	r7, #40	; 0x28
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}
 801351a:	bf00      	nop
 801351c:	70f5a894 	.word	0x70f5a894
 8013520:	2aaaaaab 	.word	0x2aaaaaab

08013524 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8013524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013526:	b085      	sub	sp, #20
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801352e:	1d3b      	adds	r3, r7, #4
 8013530:	4618      	mov	r0, r3
 8013532:	f7ff fae5 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013536:	4603      	mov	r3, r0
 8013538:	681d      	ldr	r5, [r3, #0]
 801353a:	463b      	mov	r3, r7
 801353c:	4618      	mov	r0, r3
 801353e:	f7ff fadf 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013542:	4603      	mov	r3, r0
 8013544:	681e      	ldr	r6, [r3, #0]
 8013546:	f107 030c 	add.w	r3, r7, #12
 801354a:	4618      	mov	r0, r3
 801354c:	f7ff fad8 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013550:	4604      	mov	r4, r0
 8013552:	4631      	mov	r1, r6
 8013554:	4628      	mov	r0, r5
 8013556:	f7fd fc15 	bl	8010d84 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801355a:	4603      	mov	r3, r0
 801355c:	6023      	str	r3, [r4, #0]
  return c;
 801355e:	68fb      	ldr	r3, [r7, #12]
}
 8013560:	4618      	mov	r0, r3
 8013562:	3714      	adds	r7, #20
 8013564:	46bd      	mov	sp, r7
 8013566:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013568 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8013568:	b590      	push	{r4, r7, lr}
 801356a:	b085      	sub	sp, #20
 801356c:	af00      	add	r7, sp, #0
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8013574:	f107 0308 	add.w	r3, r7, #8
 8013578:	4618      	mov	r0, r3
 801357a:	f7ff fac1 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801357e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013580:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8013582:	1d3b      	adds	r3, r7, #4
 8013584:	4618      	mov	r0, r3
 8013586:	f7ff fabb 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801358a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	461a      	mov	r2, r3
 8013590:	4621      	mov	r1, r4
 8013592:	68f8      	ldr	r0, [r7, #12]
 8013594:	f7ff fb4d 	bl	8012c32 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013598:	4603      	mov	r3, r0
 801359a:	4618      	mov	r0, r3
 801359c:	f7ff fbc1 	bl	8012d22 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80135a0:	4603      	mov	r3, r0
}
 80135a2:	4618      	mov	r0, r3
 80135a4:	3714      	adds	r7, #20
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd90      	pop	{r4, r7, pc}

080135aa <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 80135aa:	b580      	push	{r7, lr}
 80135ac:	b082      	sub	sp, #8
 80135ae:	af00      	add	r7, sp, #0
 80135b0:	6078      	str	r0, [r7, #4]
 80135b2:	1d3b      	adds	r3, r7, #4
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7ff fdb7 	bl	8013128 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80135ba:	4603      	mov	r3, r0
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	4618      	mov	r0, r3
 80135c0:	f000 f911 	bl	80137e6 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 80135c4:	4603      	mov	r3, r0
 80135c6:	4618      	mov	r0, r3
 80135c8:	3708      	adds	r7, #8
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}

080135ce <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 80135ce:	b480      	push	{r7}
 80135d0:	b083      	sub	sp, #12
 80135d2:	af00      	add	r7, sp, #0
 80135d4:	6078      	str	r0, [r7, #4]
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	4618      	mov	r0, r3
 80135da:	370c      	adds	r7, #12
 80135dc:	46bd      	mov	sp, r7
 80135de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e2:	4770      	bx	lr

080135e4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b082      	sub	sp, #8
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f000 f90c 	bl	801380a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 80135f2:	4603      	mov	r3, r0
}
 80135f4:	4618      	mov	r0, r3
 80135f6:	3708      	adds	r7, #8
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}

080135fc <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b084      	sub	sp, #16
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8013604:	f107 030c 	add.w	r3, r7, #12
 8013608:	4618      	mov	r0, r3
 801360a:	f7ff ffe0 	bl	80135ce <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801360e:	4602      	mov	r2, r0
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	6013      	str	r3, [r2, #0]
    return retval;
 8013614:	68fb      	ldr	r3, [r7, #12]
  }
 8013616:	4618      	mov	r0, r3
 8013618:	3710      	adds	r7, #16
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}

0801361e <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801361e:	b480      	push	{r7}
 8013620:	b083      	sub	sp, #12
 8013622:	af00      	add	r7, sp, #0
 8013624:	6078      	str	r0, [r7, #4]
 8013626:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	f993 2000 	ldrsb.w	r2, [r3]
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	f993 3000 	ldrsb.w	r3, [r3]
 8013634:	429a      	cmp	r2, r3
 8013636:	da01      	bge.n	801363c <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	e000      	b.n	801363e <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 801363c:	687b      	ldr	r3, [r7, #4]
    }
 801363e:	4618      	mov	r0, r3
 8013640:	370c      	adds	r7, #12
 8013642:	46bd      	mov	sp, r7
 8013644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013648:	4770      	bx	lr

0801364a <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 801364a:	b580      	push	{r7, lr}
 801364c:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 801364e:	f7f7 fc20 	bl	800ae92 <_ZNSt14numeric_limitsIlE3maxEv>
 8013652:	4603      	mov	r3, r0
  }
 8013654:	4618      	mov	r0, r3
 8013656:	bd80      	pop	{r7, pc}

08013658 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 8013658:	b480      	push	{r7}
 801365a:	b083      	sub	sp, #12
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	4618      	mov	r0, r3
 8013664:	370c      	adds	r7, #12
 8013666:	46bd      	mov	sp, r7
 8013668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366c:	4770      	bx	lr

0801366e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801366e:	b580      	push	{r7, lr}
 8013670:	b084      	sub	sp, #16
 8013672:	af00      	add	r7, sp, #0
 8013674:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8013676:	f107 030c 	add.w	r3, r7, #12
 801367a:	4618      	mov	r0, r3
 801367c:	f7ff ffec 	bl	8013658 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013680:	4602      	mov	r2, r0
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6013      	str	r3, [r2, #0]
    return retval;
 8013686:	68fb      	ldr	r3, [r7, #12]
  }
 8013688:	4618      	mov	r0, r3
 801368a:	3710      	adds	r7, #16
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}

08013690 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 8013690:	b480      	push	{r7}
 8013692:	b083      	sub	sp, #12
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	4618      	mov	r0, r3
 801369c:	370c      	adds	r7, #12
 801369e:	46bd      	mov	sp, r7
 80136a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a4:	4770      	bx	lr

080136a6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80136a6:	b580      	push	{r7, lr}
 80136a8:	b082      	sub	sp, #8
 80136aa:	af00      	add	r7, sp, #0
 80136ac:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80136ae:	6878      	ldr	r0, [r7, #4]
 80136b0:	f000 f8b8 	bl	8013824 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 80136b4:	4603      	mov	r3, r0
}
 80136b6:	4618      	mov	r0, r3
 80136b8:	3708      	adds	r7, #8
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd80      	pop	{r7, pc}

080136be <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 80136be:	b480      	push	{r7}
 80136c0:	b083      	sub	sp, #12
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	6078      	str	r0, [r7, #4]
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	4618      	mov	r0, r3
 80136ca:	370c      	adds	r7, #12
 80136cc:	46bd      	mov	sp, r7
 80136ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d2:	4770      	bx	lr

080136d4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b082      	sub	sp, #8
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f000 f8e3 	bl	80138a8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 80136e2:	4603      	mov	r3, r0
}
 80136e4:	4618      	mov	r0, r3
 80136e6:	3708      	adds	r7, #8
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bd80      	pop	{r7, pc}

080136ec <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b082      	sub	sp, #8
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f000 f919 	bl	801392c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 80136fa:	4603      	mov	r3, r0
}
 80136fc:	4618      	mov	r0, r3
 80136fe:	3708      	adds	r7, #8
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}

08013704 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 8013704:	b580      	push	{r7, lr}
 8013706:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8013708:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801370c:	f7ff fa03 	bl	8012b16 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013710:	4603      	mov	r3, r0
  }
 8013712:	4618      	mov	r0, r3
 8013714:	bd80      	pop	{r7, pc}

08013716 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8013716:	b590      	push	{r4, r7, lr}
 8013718:	b083      	sub	sp, #12
 801371a:	af00      	add	r7, sp, #0
 801371c:	6078      	str	r0, [r7, #4]
 801371e:	6039      	str	r1, [r7, #0]
 8013720:	1d3b      	adds	r3, r7, #4
 8013722:	4618      	mov	r0, r3
 8013724:	f7ff f9ec 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013728:	4603      	mov	r3, r0
 801372a:	681c      	ldr	r4, [r3, #0]
 801372c:	463b      	mov	r3, r7
 801372e:	4618      	mov	r0, r3
 8013730:	f7ff f9e6 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013734:	4603      	mov	r3, r0
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	4619      	mov	r1, r3
 801373a:	4620      	mov	r0, r4
 801373c:	f7fe fb8c 	bl	8011e58 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013740:	4603      	mov	r3, r0
 8013742:	4618      	mov	r0, r3
 8013744:	f7ff faed 	bl	8012d22 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013748:	4603      	mov	r3, r0
 801374a:	4618      	mov	r0, r3
 801374c:	370c      	adds	r7, #12
 801374e:	46bd      	mov	sp, r7
 8013750:	bd90      	pop	{r4, r7, pc}

08013752 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8013752:	b580      	push	{r7, lr}
 8013754:	b082      	sub	sp, #8
 8013756:	af00      	add	r7, sp, #0
 8013758:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801375a:	1d3b      	adds	r3, r7, #4
 801375c:	4618      	mov	r0, r3
 801375e:	f7ff f9cf 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013762:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	4618      	mov	r0, r3
 8013768:	f000 f922 	bl	80139b0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 801376c:	4603      	mov	r3, r0
 801376e:	4618      	mov	r0, r3
 8013770:	f7ff fad7 	bl	8012d22 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013774:	4603      	mov	r3, r0
}
 8013776:	4618      	mov	r0, r3
 8013778:	3708      	adds	r7, #8
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}

0801377e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801377e:	b580      	push	{r7, lr}
 8013780:	b082      	sub	sp, #8
 8013782:	af00      	add	r7, sp, #0
 8013784:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8013786:	1d3b      	adds	r3, r7, #4
 8013788:	4618      	mov	r0, r3
 801378a:	f7ff f9b9 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801378e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	4618      	mov	r0, r3
 8013794:	f7ff f9e0 	bl	8012b58 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 8013798:	4603      	mov	r3, r0
 801379a:	4618      	mov	r0, r3
 801379c:	f7ff fac1 	bl	8012d22 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80137a0:	4603      	mov	r3, r0
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	3708      	adds	r7, #8
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}

080137aa <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 80137aa:	b590      	push	{r4, r7, lr}
 80137ac:	b083      	sub	sp, #12
 80137ae:	af00      	add	r7, sp, #0
 80137b0:	6078      	str	r0, [r7, #4]
 80137b2:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 80137b4:	1d3b      	adds	r3, r7, #4
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7ff f9a2 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80137bc:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80137be:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 80137c0:	463b      	mov	r3, r7
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7ff f99c 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80137c8:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	4619      	mov	r1, r3
 80137ce:	4620      	mov	r0, r4
 80137d0:	f000 f8fa 	bl	80139c8 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 80137d4:	4603      	mov	r3, r0
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7ff faa3 	bl	8012d22 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80137dc:	4603      	mov	r3, r0
}
 80137de:	4618      	mov	r0, r3
 80137e0:	370c      	adds	r7, #12
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd90      	pop	{r4, r7, pc}

080137e6 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 80137e6:	b580      	push	{r7, lr}
 80137e8:	b082      	sub	sp, #8
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	bf0c      	ite	eq
 80137f4:	2301      	moveq	r3, #1
 80137f6:	2300      	movne	r3, #0
 80137f8:	b2db      	uxtb	r3, r3
 80137fa:	4618      	mov	r0, r3
 80137fc:	f7fe fb4e 	bl	8011e9c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8013800:	4603      	mov	r3, r0
}
 8013802:	4618      	mov	r0, r3
 8013804:	3708      	adds	r7, #8
 8013806:	46bd      	mov	sp, r7
 8013808:	bd80      	pop	{r7, pc}

0801380a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801380a:	b580      	push	{r7, lr}
 801380c:	b082      	sub	sp, #8
 801380e:	af00      	add	r7, sp, #0
 8013810:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8013812:	210c      	movs	r1, #12
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f7fd ff1f 	bl	8011658 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801381a:	4603      	mov	r3, r0
  }
 801381c:	4618      	mov	r0, r3
 801381e:	3708      	adds	r7, #8
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}

08013824 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013824:	b580      	push	{r7, lr}
 8013826:	b08a      	sub	sp, #40	; 0x28
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801382c:	f7f7 fd3d 	bl	800b2aa <_ZNSt14numeric_limitsIlE3minEv>
 8013830:	4603      	mov	r3, r0
 8013832:	4618      	mov	r0, r3
 8013834:	f7fe fad4 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013838:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801383a:	f7f7 fb2a 	bl	800ae92 <_ZNSt14numeric_limitsIlE3maxEv>
 801383e:	4603      	mov	r3, r0
 8013840:	4618      	mov	r0, r3
 8013842:	f7fe facd 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013846:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8013848:	2320      	movs	r3, #32
 801384a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801384c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013850:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8013852:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 8013856:	f7fe fac3 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801385a:	4603      	mov	r3, r0
 801385c:	4619      	mov	r1, r3
 801385e:	6878      	ldr	r0, [r7, #4]
 8013860:	f7fe fb08 	bl	8011e74 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8013864:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8013866:	480f      	ldr	r0, [pc, #60]	; (80138a4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 8013868:	f7fe faba 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801386c:	4603      	mov	r3, r0
 801386e:	4619      	mov	r1, r3
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f7fe fadd 	bl	8011e30 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8013876:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8013878:	2102      	movs	r1, #2
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f7ff f993 	bl	8012ba6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8013880:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8013882:	68fa      	ldr	r2, [r7, #12]
 8013884:	6a39      	ldr	r1, [r7, #32]
 8013886:	6978      	ldr	r0, [r7, #20]
 8013888:	f7ff f9d3 	bl	8012c32 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801388c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801388e:	68fa      	ldr	r2, [r7, #12]
 8013890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013892:	6938      	ldr	r0, [r7, #16]
 8013894:	f7ff f9cd 	bl	8012c32 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013898:	60f8      	str	r0, [r7, #12]
    return result;
 801389a:	68fb      	ldr	r3, [r7, #12]
  }
 801389c:	4618      	mov	r0, r3
 801389e:	3728      	adds	r7, #40	; 0x28
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}
 80138a4:	e0000001 	.word	0xe0000001

080138a8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b08a      	sub	sp, #40	; 0x28
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 80138b0:	f7f7 fcfb 	bl	800b2aa <_ZNSt14numeric_limitsIlE3minEv>
 80138b4:	4603      	mov	r3, r0
 80138b6:	4618      	mov	r0, r3
 80138b8:	f7fe fa92 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80138bc:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 80138be:	f7f7 fae8 	bl	800ae92 <_ZNSt14numeric_limitsIlE3maxEv>
 80138c2:	4603      	mov	r3, r0
 80138c4:	4618      	mov	r0, r3
 80138c6:	f7fe fa8b 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80138ca:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80138cc:	2320      	movs	r3, #32
 80138ce:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80138d0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80138d4:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80138d6:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 80138da:	f7fe fa81 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80138de:	4603      	mov	r3, r0
 80138e0:	4619      	mov	r1, r3
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f7fe fac6 	bl	8011e74 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80138e8:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80138ea:	480f      	ldr	r0, [pc, #60]	; (8013928 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 80138ec:	f7fe fa78 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80138f0:	4603      	mov	r3, r0
 80138f2:	4619      	mov	r1, r3
 80138f4:	6878      	ldr	r0, [r7, #4]
 80138f6:	f7fe fa9b 	bl	8011e30 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80138fa:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80138fc:	2101      	movs	r1, #1
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	f7ff f951 	bl	8012ba6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8013904:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8013906:	68fa      	ldr	r2, [r7, #12]
 8013908:	6a39      	ldr	r1, [r7, #32]
 801390a:	6978      	ldr	r0, [r7, #20]
 801390c:	f7ff f991 	bl	8012c32 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013910:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8013912:	68fa      	ldr	r2, [r7, #12]
 8013914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013916:	6938      	ldr	r0, [r7, #16]
 8013918:	f7ff f98b 	bl	8012c32 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801391c:	60f8      	str	r0, [r7, #12]
    return result;
 801391e:	68fb      	ldr	r3, [r7, #12]
  }
 8013920:	4618      	mov	r0, r3
 8013922:	3728      	adds	r7, #40	; 0x28
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}
 8013928:	c0000001 	.word	0xc0000001

0801392c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801392c:	b580      	push	{r7, lr}
 801392e:	b08a      	sub	sp, #40	; 0x28
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8013934:	f7f7 fcb9 	bl	800b2aa <_ZNSt14numeric_limitsIlE3minEv>
 8013938:	4603      	mov	r3, r0
 801393a:	4618      	mov	r0, r3
 801393c:	f7fe fa50 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013940:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8013942:	f7f7 faa6 	bl	800ae92 <_ZNSt14numeric_limitsIlE3maxEv>
 8013946:	4603      	mov	r3, r0
 8013948:	4618      	mov	r0, r3
 801394a:	f7fe fa49 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801394e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8013950:	2320      	movs	r3, #32
 8013952:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8013954:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8013958:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801395a:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 801395e:	f7fe fa3f 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013962:	4603      	mov	r3, r0
 8013964:	4619      	mov	r1, r3
 8013966:	6878      	ldr	r0, [r7, #4]
 8013968:	f7fe fa84 	bl	8011e74 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801396c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801396e:	480f      	ldr	r0, [pc, #60]	; (80139ac <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 8013970:	f7fe fa36 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013974:	4603      	mov	r3, r0
 8013976:	4619      	mov	r1, r3
 8013978:	6878      	ldr	r0, [r7, #4]
 801397a:	f7fe fa59 	bl	8011e30 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801397e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8013980:	2105      	movs	r1, #5
 8013982:	6878      	ldr	r0, [r7, #4]
 8013984:	f7ff f90f 	bl	8012ba6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8013988:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801398a:	68fa      	ldr	r2, [r7, #12]
 801398c:	6a39      	ldr	r1, [r7, #32]
 801398e:	6978      	ldr	r0, [r7, #20]
 8013990:	f7ff f94f 	bl	8012c32 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013994:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8013996:	68fa      	ldr	r2, [r7, #12]
 8013998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801399a:	6938      	ldr	r0, [r7, #16]
 801399c:	f7ff f949 	bl	8012c32 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80139a0:	60f8      	str	r0, [r7, #12]
    return result;
 80139a2:	68fb      	ldr	r3, [r7, #12]
  }
 80139a4:	4618      	mov	r0, r3
 80139a6:	3728      	adds	r7, #40	; 0x28
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	fc000001 	.word	0xfc000001

080139b0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b082      	sub	sp, #8
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f000 f813 	bl	80139e4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 80139be:	4603      	mov	r3, r0
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	3708      	adds	r7, #8
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}

080139c8 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b082      	sub	sp, #8
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 80139d2:	6839      	ldr	r1, [r7, #0]
 80139d4:	6878      	ldr	r0, [r7, #4]
 80139d6:	f000 f812 	bl	80139fe <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 80139da:	4603      	mov	r3, r0
}
 80139dc:	4618      	mov	r0, r3
 80139de:	3708      	adds	r7, #8
 80139e0:	46bd      	mov	sp, r7
 80139e2:	bd80      	pop	{r7, pc}

080139e4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b082      	sub	sp, #8
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80139ec:	2102      	movs	r1, #2
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	f7fd fe32 	bl	8011658 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80139f4:	4603      	mov	r3, r0
  }
 80139f6:	4618      	mov	r0, r3
 80139f8:	3708      	adds	r7, #8
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}

080139fe <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 80139fe:	b580      	push	{r7, lr}
 8013a00:	b082      	sub	sp, #8
 8013a02:	af00      	add	r7, sp, #0
 8013a04:	6078      	str	r0, [r7, #4]
 8013a06:	6039      	str	r1, [r7, #0]
 8013a08:	6839      	ldr	r1, [r7, #0]
 8013a0a:	6878      	ldr	r0, [r7, #4]
 8013a0c:	f7fe fa24 	bl	8011e58 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013a10:	4603      	mov	r3, r0
 8013a12:	4618      	mov	r0, r3
 8013a14:	3708      	adds	r7, #8
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}

08013a1a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8013a1a:	b480      	push	{r7}
 8013a1c:	b083      	sub	sp, #12
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d002      	beq.n	8013a2e <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	e000      	b.n	8013a30 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 8013a2e:	2300      	movs	r3, #0
}
 8013a30:	4618      	mov	r0, r3
 8013a32:	370c      	adds	r7, #12
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr

08013a3c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 8013a3c:	b5b0      	push	{r4, r5, r7, lr}
 8013a3e:	b08e      	sub	sp, #56	; 0x38
 8013a40:	af04      	add	r7, sp, #16
 8013a42:	6078      	str	r0, [r7, #4]
 8013a44:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8013a46:	2200      	movs	r2, #0
 8013a48:	6839      	ldr	r1, [r7, #0]
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f7f7 fd0a 	bl	800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013a50:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 8013a52:	69bb      	ldr	r3, [r7, #24]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d10a      	bne.n	8013a6e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x32>
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	695c      	ldr	r4, [r3, #20]
 8013a5c:	4b62      	ldr	r3, [pc, #392]	; (8013be8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ac>)
 8013a5e:	9300      	str	r3, [sp, #0]
 8013a60:	2323      	movs	r3, #35	; 0x23
 8013a62:	4a62      	ldr	r2, [pc, #392]	; (8013bec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8013a64:	4962      	ldr	r1, [pc, #392]	; (8013bf0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	47a0      	blx	r4
 8013a6a:	2301      	movs	r3, #1
 8013a6c:	e0b8      	b.n	8013be0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8013a6e:	2200      	movs	r2, #0
 8013a70:	6839      	ldr	r1, [r7, #0]
 8013a72:	6878      	ldr	r0, [r7, #4]
 8013a74:	f7f7 fd06 	bl	800b484 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013a78:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 8013a7a:	697b      	ldr	r3, [r7, #20]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d10a      	bne.n	8013a96 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	695c      	ldr	r4, [r3, #20]
 8013a84:	4b5b      	ldr	r3, [pc, #364]	; (8013bf4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 8013a86:	9300      	str	r3, [sp, #0]
 8013a88:	2325      	movs	r3, #37	; 0x25
 8013a8a:	4a58      	ldr	r2, [pc, #352]	; (8013bec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8013a8c:	4958      	ldr	r1, [pc, #352]	; (8013bf0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	47a0      	blx	r4
 8013a92:	2301      	movs	r3, #1
 8013a94:	e0a4      	b.n	8013be0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 8013a96:	69b8      	ldr	r0, [r7, #24]
 8013a98:	f7f7 fc64 	bl	800b364 <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 8013a9c:	4602      	mov	r2, r0
 8013a9e:	460b      	mov	r3, r1
 8013aa0:	4613      	mov	r3, r2
 8013aa2:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 8013aa4:	697b      	ldr	r3, [r7, #20]
 8013aa6:	689b      	ldr	r3, [r3, #8]
 8013aa8:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8013aaa:	6838      	ldr	r0, [r7, #0]
 8013aac:	f7fe fa13 	bl	8011ed6 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013ab0:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 8013ab2:	2b01      	cmp	r3, #1
 8013ab4:	d109      	bne.n	8013aca <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8013aba:	2b01      	cmp	r3, #1
 8013abc:	d105      	bne.n	8013aca <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	685b      	ldr	r3, [r3, #4]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d101      	bne.n	8013aca <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	e000      	b.n	8013acc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 8013aca:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d002      	beq.n	8013ad6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 8013ad6:	2301      	movs	r3, #1
 8013ad8:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 8013ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ade:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	61fb      	str	r3, [r7, #28]
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	69fa      	ldr	r2, [r7, #28]
 8013aea:	429a      	cmp	r2, r3
 8013aec:	da2b      	bge.n	8013b46 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10a>
    int value = output_shape->data[i];
 8013aee:	68fa      	ldr	r2, [r7, #12]
 8013af0:	69fb      	ldr	r3, [r7, #28]
 8013af2:	009b      	lsls	r3, r3, #2
 8013af4:	4413      	add	r3, r2
 8013af6:	685b      	ldr	r3, [r3, #4]
 8013af8:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b00:	d118      	bne.n	8013b34 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 8013b02:	6a3b      	ldr	r3, [r7, #32]
 8013b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b08:	d011      	beq.n	8013b2e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	695c      	ldr	r4, [r3, #20]
 8013b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b12:	9303      	str	r3, [sp, #12]
 8013b14:	6a3b      	ldr	r3, [r7, #32]
 8013b16:	9302      	str	r3, [sp, #8]
 8013b18:	4b37      	ldr	r3, [pc, #220]	; (8013bf8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 8013b1a:	9301      	str	r3, [sp, #4]
 8013b1c:	4b37      	ldr	r3, [pc, #220]	; (8013bfc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 8013b1e:	9300      	str	r3, [sp, #0]
 8013b20:	233a      	movs	r3, #58	; 0x3a
 8013b22:	4a32      	ldr	r2, [pc, #200]	; (8013bec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8013b24:	4936      	ldr	r1, [pc, #216]	; (8013c00 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	47a0      	blx	r4
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	e058      	b.n	8013be0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
      stretch_dim = i;
 8013b2e:	69fb      	ldr	r3, [r7, #28]
 8013b30:	623b      	str	r3, [r7, #32]
 8013b32:	e004      	b.n	8013b3e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x102>
    } else {
      num_output_elements *= value;
 8013b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b36:	68ba      	ldr	r2, [r7, #8]
 8013b38:	fb02 f303 	mul.w	r3, r2, r3
 8013b3c:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 8013b3e:	69fb      	ldr	r3, [r7, #28]
 8013b40:	3301      	adds	r3, #1
 8013b42:	61fb      	str	r3, [r7, #28]
 8013b44:	e7ce      	b.n	8013ae4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
    }
  }
  if (stretch_dim != -1) {
 8013b46:	6a3b      	ldr	r3, [r7, #32]
 8013b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b4c:	d011      	beq.n	8013b72 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x136>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 8013b4e:	693a      	ldr	r2, [r7, #16]
 8013b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b52:	fb92 f2f3 	sdiv	r2, r2, r3
 8013b56:	68f9      	ldr	r1, [r7, #12]
 8013b58:	6a3b      	ldr	r3, [r7, #32]
 8013b5a:	009b      	lsls	r3, r3, #2
 8013b5c:	440b      	add	r3, r1
 8013b5e:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 8013b60:	68fa      	ldr	r2, [r7, #12]
 8013b62:	6a3b      	ldr	r3, [r7, #32]
 8013b64:	009b      	lsls	r3, r3, #2
 8013b66:	4413      	add	r3, r2
 8013b68:	685a      	ldr	r2, [r3, #4]
 8013b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b6c:	fb02 f303 	mul.w	r3, r2, r3
 8013b70:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8013b72:	69bb      	ldr	r3, [r7, #24]
 8013b74:	781a      	ldrb	r2, [r3, #0]
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	781b      	ldrb	r3, [r3, #0]
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d01a      	beq.n	8013bb4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	695c      	ldr	r4, [r3, #20]
 8013b82:	69bb      	ldr	r3, [r7, #24]
 8013b84:	781b      	ldrb	r3, [r3, #0]
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7f4 fe08 	bl	800879c <TfLiteTypeGetName>
 8013b8c:	4605      	mov	r5, r0
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	781b      	ldrb	r3, [r3, #0]
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7f4 fe02 	bl	800879c <TfLiteTypeGetName>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	9303      	str	r3, [sp, #12]
 8013b9c:	9502      	str	r5, [sp, #8]
 8013b9e:	4b19      	ldr	r3, [pc, #100]	; (8013c04 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 8013ba0:	9301      	str	r3, [sp, #4]
 8013ba2:	4b19      	ldr	r3, [pc, #100]	; (8013c08 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 8013ba4:	9300      	str	r3, [sp, #0]
 8013ba6:	2345      	movs	r3, #69	; 0x45
 8013ba8:	4a10      	ldr	r2, [pc, #64]	; (8013bec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8013baa:	4918      	ldr	r1, [pc, #96]	; (8013c0c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	47a0      	blx	r4
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	e015      	b.n	8013be0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 8013bb4:	693a      	ldr	r2, [r7, #16]
 8013bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d010      	beq.n	8013bde <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a2>
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	695c      	ldr	r4, [r3, #20]
 8013bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc2:	9303      	str	r3, [sp, #12]
 8013bc4:	693b      	ldr	r3, [r7, #16]
 8013bc6:	9302      	str	r3, [sp, #8]
 8013bc8:	4b11      	ldr	r3, [pc, #68]	; (8013c10 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 8013bca:	9301      	str	r3, [sp, #4]
 8013bcc:	4b11      	ldr	r3, [pc, #68]	; (8013c14 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 8013bce:	9300      	str	r3, [sp, #0]
 8013bd0:	2346      	movs	r3, #70	; 0x46
 8013bd2:	4a06      	ldr	r2, [pc, #24]	; (8013bec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8013bd4:	490a      	ldr	r1, [pc, #40]	; (8013c00 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 8013bd6:	6878      	ldr	r0, [r7, #4]
 8013bd8:	47a0      	blx	r4
 8013bda:	2301      	movs	r3, #1
 8013bdc:	e000      	b.n	8013be0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  return kTfLiteOk;
 8013bde:	2300      	movs	r3, #0
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	3728      	adds	r7, #40	; 0x28
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bdb0      	pop	{r4, r5, r7, pc}
 8013be8:	0802b06c 	.word	0x0802b06c
 8013bec:	0802b018 	.word	0x0802b018
 8013bf0:	0802b054 	.word	0x0802b054
 8013bf4:	0802b080 	.word	0x0802b080
 8013bf8:	0802b0b0 	.word	0x0802b0b0
 8013bfc:	0802b0b4 	.word	0x0802b0b4
 8013c00:	0802b094 	.word	0x0802b094
 8013c04:	0802b0dc 	.word	0x0802b0dc
 8013c08:	0802b0ec 	.word	0x0802b0ec
 8013c0c:	0802b0c0 	.word	0x0802b0c0
 8013c10:	0802b0f8 	.word	0x0802b0f8
 8013c14:	0802b10c 	.word	0x0802b10c

08013c18 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8013c18:	b590      	push	{r4, r7, lr}
 8013c1a:	b087      	sub	sp, #28
 8013c1c:	af04      	add	r7, sp, #16
 8013c1e:	6078      	str	r0, [r7, #4]
 8013c20:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 8013c22:	6838      	ldr	r0, [r7, #0]
 8013c24:	f7fe f957 	bl	8011ed6 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	2b01      	cmp	r3, #1
 8013c2c:	d007      	beq.n	8013c3e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8013c2e:	6838      	ldr	r0, [r7, #0]
 8013c30:	f7fe f951 	bl	8011ed6 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013c34:	4603      	mov	r3, r0
 8013c36:	2b02      	cmp	r3, #2
 8013c38:	d001      	beq.n	8013c3e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	e000      	b.n	8013c40 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 8013c3e:	2300      	movs	r3, #0
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d00a      	beq.n	8013c5a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	695c      	ldr	r4, [r3, #20]
 8013c48:	4b27      	ldr	r3, [pc, #156]	; (8013ce8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8013c4a:	9300      	str	r3, [sp, #0]
 8013c4c:	234b      	movs	r3, #75	; 0x4b
 8013c4e:	4a27      	ldr	r2, [pc, #156]	; (8013cec <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8013c50:	4927      	ldr	r1, [pc, #156]	; (8013cf0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	47a0      	blx	r4
 8013c56:	2301      	movs	r3, #1
 8013c58:	e041      	b.n	8013cde <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8013c5a:	6838      	ldr	r0, [r7, #0]
 8013c5c:	f7fe f948 	bl	8011ef0 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8013c60:	4603      	mov	r3, r0
 8013c62:	2b01      	cmp	r3, #1
 8013c64:	bf14      	ite	ne
 8013c66:	2301      	movne	r3, #1
 8013c68:	2300      	moveq	r3, #0
 8013c6a:	b2db      	uxtb	r3, r3
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d013      	beq.n	8013c98 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	695c      	ldr	r4, [r3, #20]
 8013c74:	6838      	ldr	r0, [r7, #0]
 8013c76:	f7fe f93b 	bl	8011ef0 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	2201      	movs	r2, #1
 8013c7e:	9203      	str	r2, [sp, #12]
 8013c80:	9302      	str	r3, [sp, #8]
 8013c82:	4b1c      	ldr	r3, [pc, #112]	; (8013cf4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 8013c84:	9301      	str	r3, [sp, #4]
 8013c86:	4b1c      	ldr	r3, [pc, #112]	; (8013cf8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 8013c88:	9300      	str	r3, [sp, #0]
 8013c8a:	234c      	movs	r3, #76	; 0x4c
 8013c8c:	4a17      	ldr	r2, [pc, #92]	; (8013cec <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8013c8e:	491b      	ldr	r1, [pc, #108]	; (8013cfc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	47a0      	blx	r4
 8013c94:	2301      	movs	r3, #1
 8013c96:	e022      	b.n	8013cde <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 8013c98:	6839      	ldr	r1, [r7, #0]
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f7ff fece 	bl	8013a3c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	bf14      	ite	ne
 8013ca6:	2301      	movne	r3, #1
 8013ca8:	2300      	moveq	r3, #0
 8013caa:	b2db      	uxtb	r3, r3
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d015      	beq.n	8013cdc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	695c      	ldr	r4, [r3, #20]
 8013cb4:	6839      	ldr	r1, [r7, #0]
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f7ff fec0 	bl	8013a3c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	461a      	mov	r2, r3
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	9303      	str	r3, [sp, #12]
 8013cc4:	9202      	str	r2, [sp, #8]
 8013cc6:	4b0e      	ldr	r3, [pc, #56]	; (8013d00 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 8013cc8:	9301      	str	r3, [sp, #4]
 8013cca:	4b0e      	ldr	r3, [pc, #56]	; (8013d04 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 8013ccc:	9300      	str	r3, [sp, #0]
 8013cce:	234d      	movs	r3, #77	; 0x4d
 8013cd0:	4a06      	ldr	r2, [pc, #24]	; (8013cec <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8013cd2:	490a      	ldr	r1, [pc, #40]	; (8013cfc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8013cd4:	6878      	ldr	r0, [r7, #4]
 8013cd6:	47a0      	blx	r4
 8013cd8:	2301      	movs	r3, #1
 8013cda:	e000      	b.n	8013cde <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 8013cdc:	2300      	movs	r3, #0
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	370c      	adds	r7, #12
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd90      	pop	{r4, r7, pc}
 8013ce6:	bf00      	nop
 8013ce8:	0802b120 	.word	0x0802b120
 8013cec:	0802b018 	.word	0x0802b018
 8013cf0:	0802b054 	.word	0x0802b054
 8013cf4:	0802b150 	.word	0x0802b150
 8013cf8:	0802b154 	.word	0x0802b154
 8013cfc:	0802b094 	.word	0x0802b094
 8013d00:	0802b168 	.word	0x0802b168
 8013d04:	0802b174 	.word	0x0802b174

08013d08 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b088      	sub	sp, #32
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
 8013d10:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8013d12:	2200      	movs	r2, #0
 8013d14:	6839      	ldr	r1, [r7, #0]
 8013d16:	6878      	ldr	r0, [r7, #4]
 8013d18:	f7fd f978 	bl	801100c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8013d1c:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8013d1e:	2200      	movs	r2, #0
 8013d20:	6839      	ldr	r1, [r7, #0]
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f7fd f982 	bl	801102c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8013d28:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 8013d2a:	69bb      	ldr	r3, [r7, #24]
 8013d2c:	7a1b      	ldrb	r3, [r3, #8]
 8013d2e:	f107 020c 	add.w	r2, r7, #12
 8013d32:	4611      	mov	r1, r2
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7f8 fa1f 	bl	800c178 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	74fb      	strb	r3, [r7, #19]
 8013d3e:	7cfb      	ldrb	r3, [r7, #19]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d001      	beq.n	8013d48 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 8013d44:	7cfb      	ldrb	r3, [r7, #19]
 8013d46:	e024      	b.n	8013d92 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 8013d48:	69bb      	ldr	r3, [r7, #24]
 8013d4a:	685b      	ldr	r3, [r3, #4]
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7fc fa8f 	bl	8010270 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 8013d52:	4602      	mov	r2, r0
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	fb02 f303 	mul.w	r3, r2, r3
 8013d5a:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 8013d5c:	69bb      	ldr	r3, [r7, #24]
 8013d5e:	681a      	ldr	r2, [r3, #0]
 8013d60:	697b      	ldr	r3, [r7, #20]
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d013      	beq.n	8013d90 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 8013d68:	2300      	movs	r3, #0
 8013d6a:	61fb      	str	r3, [r7, #28]
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	69fa      	ldr	r2, [r7, #28]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d20d      	bcs.n	8013d90 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 8013d74:	69bb      	ldr	r3, [r7, #24]
 8013d76:	681a      	ldr	r2, [r3, #0]
 8013d78:	69fb      	ldr	r3, [r7, #28]
 8013d7a:	441a      	add	r2, r3
 8013d7c:	697b      	ldr	r3, [r7, #20]
 8013d7e:	6819      	ldr	r1, [r3, #0]
 8013d80:	69fb      	ldr	r3, [r7, #28]
 8013d82:	440b      	add	r3, r1
 8013d84:	7812      	ldrb	r2, [r2, #0]
 8013d86:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 8013d88:	69fb      	ldr	r3, [r7, #28]
 8013d8a:	3301      	adds	r3, #1
 8013d8c:	61fb      	str	r3, [r7, #28]
 8013d8e:	e7ed      	b.n	8013d6c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 8013d90:	2300      	movs	r3, #0
}
 8013d92:	4618      	mov	r0, r3
 8013d94:	3720      	adds	r7, #32
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}
	...

08013d9c <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 8013d9c:	b4b0      	push	{r4, r5, r7}
 8013d9e:	b083      	sub	sp, #12
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	4a07      	ldr	r2, [pc, #28]	; (8013dc4 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 8013da8:	461c      	mov	r4, r3
 8013daa:	4615      	mov	r5, r2
 8013dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013db0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013db4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	370c      	adds	r7, #12
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bcb0      	pop	{r4, r5, r7}
 8013dc0:	4770      	bx	lr
 8013dc2:	bf00      	nop
 8013dc4:	0802b194 	.word	0x0802b194

08013dc8 <_ZN6tflite7gen_lutEPFffEffPsi>:
// func - the function to build the LUT for (e.g exp(x))
// min,max - table limits
// table - pointer to buffer
// num - number of elements in the LUT
inline void gen_lut(float (*func)(float), float min, float max, int16_t* table,
                    const int num) {
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	ed2d 8b02 	vpush	{d8}
 8013dce:	b094      	sub	sp, #80	; 0x50
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6178      	str	r0, [r7, #20]
 8013dd4:	ed87 0a04 	vstr	s0, [r7, #16]
 8013dd8:	edc7 0a03 	vstr	s1, [r7, #12]
 8013ddc:	60b9      	str	r1, [r7, #8]
 8013dde:	607a      	str	r2, [r7, #4]
  // size of table should equal to num + 1
  // last element only for slope calculation
  float step = (max - min) / (num - 1);
 8013de0:	ed97 7a03 	vldr	s14, [r7, #12]
 8013de4:	edd7 7a04 	vldr	s15, [r7, #16]
 8013de8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	3b01      	subs	r3, #1
 8013df0:	ee07 3a90 	vmov	s15, r3
 8013df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013dfc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 8013e00:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013e04:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013e08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013e0c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 8013e10:	2300      	movs	r3, #0
 8013e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	3b01      	subs	r3, #1
 8013e18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013e1a:	429a      	cmp	r2, r3
 8013e1c:	f280 80c0 	bge.w	8013fa0 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 8013e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e22:	ee07 3a90 	vmov	s15, r3
 8013e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013e2a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8013e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013e32:	edd7 7a04 	vldr	s15, [r7, #16]
 8013e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8013e40:	4798      	blx	r3
 8013e42:	eef0 7a40 	vmov.f32	s15, s0
 8013e46:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8014018 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8013e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8013e52:	f7f7 f9e6 	bl	800b222 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013e56:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
    float midpoint_interp_val =
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 8013e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e5c:	3301      	adds	r3, #1
 8013e5e:	ee07 3a90 	vmov	s15, r3
 8013e62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013e66:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8013e6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013e6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8013e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e76:	697b      	ldr	r3, [r7, #20]
 8013e78:	eeb0 0a67 	vmov.f32	s0, s15
 8013e7c:	4798      	blx	r3
 8013e7e:	eef0 7a40 	vmov.f32	s15, s0
 8013e82:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8014018 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8013e86:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 8013e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e8c:	ee07 3a90 	vmov	s15, r3
 8013e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013e94:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8013e98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013e9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8013ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ea4:	697b      	ldr	r3, [r7, #20]
 8013ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8013eaa:	4798      	blx	r3
 8013eac:	eef0 7a40 	vmov.f32	s15, s0
 8013eb0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8014018 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8013eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8013ebc:	f7f7 f9b1 	bl	800b222 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013ec0:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 8013ec4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8013ec8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013ecc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013ed0:	eeb0 0a47 	vmov.f32	s0, s14
 8013ed4:	f7f7 f9a5 	bl	800b222 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013ed8:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
                    2.0f);
    float midpoint_val =
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 8013edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ede:	ee07 3a90 	vmov	s15, r3
 8013ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ee6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8013eea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013eee:	edd7 7a04 	vldr	s15, [r7, #16]
 8013ef2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013ef6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	eeb0 0a67 	vmov.f32	s0, s15
 8013f04:	4798      	blx	r3
 8013f06:	eef0 7a40 	vmov.f32	s15, s0
 8013f0a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8014018 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8013f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013f12:	eeb0 0a67 	vmov.f32	s0, s15
 8013f16:	f7f7 f984 	bl	800b222 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013f1a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 8013f1e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8013f22:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f2a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 8013f2e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8013f32:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013f36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013f3a:	eeb0 0a47 	vmov.f32	s0, s14
 8013f3e:	f7f7 f970 	bl	800b222 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013f42:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8013f46:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013f4a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8013f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f52:	edc7 7a06 	vstr	s15, [r7, #24]
 8013f56:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8013f5a:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 8013f5c:	f107 021c 	add.w	r2, r7, #28
 8013f60:	f107 0318 	add.w	r3, r7, #24
 8013f64:	4611      	mov	r1, r2
 8013f66:	4618      	mov	r0, r3
 8013f68:	f7f7 f92e 	bl	800b1c8 <_ZSt3maxIfERKT_S2_S2_>
 8013f6c:	4602      	mov	r2, r0
 8013f6e:	4b2b      	ldr	r3, [pc, #172]	; (801401c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8013f70:	623b      	str	r3, [r7, #32]
 8013f72:	f107 0320 	add.w	r3, r7, #32
 8013f76:	4619      	mov	r1, r3
 8013f78:	4610      	mov	r0, r2
 8013f7a:	f7f7 f90c 	bl	800b196 <_ZSt3minIfERKT_S2_S2_>
 8013f7e:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8013f80:	edd3 7a00 	vldr	s15, [r3]
 8013f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f86:	005b      	lsls	r3, r3, #1
 8013f88:	68ba      	ldr	r2, [r7, #8]
 8013f8a:	4413      	add	r3, r2
 8013f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f90:	ee17 2a90 	vmov	r2, s15
 8013f94:	b212      	sxth	r2, r2
 8013f96:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 8013f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f9a:	3301      	adds	r3, #1
 8013f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013f9e:	e739      	b.n	8013e14 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
  }
  table[num - 1] = std::min<float>(
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 8013fa0:	697b      	ldr	r3, [r7, #20]
 8013fa2:	ed97 0a03 	vldr	s0, [r7, #12]
 8013fa6:	4798      	blx	r3
 8013fa8:	eef0 7a40 	vmov.f32	s15, s0
 8013fac:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8014018 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8013fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8013fb8:	f7f7 f933 	bl	800b222 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013fbc:	eef0 7a40 	vmov.f32	s15, s0
 8013fc0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8013fc4:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8013fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8013fca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013fd2:	4611      	mov	r1, r2
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7f7 f8f7 	bl	800b1c8 <_ZSt3maxIfERKT_S2_S2_>
 8013fda:	4602      	mov	r2, r0
 8013fdc:	4b0f      	ldr	r3, [pc, #60]	; (801401c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8013fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013fe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	4610      	mov	r0, r2
 8013fe8:	f7f7 f8d5 	bl	800b196 <_ZSt3minIfERKT_S2_S2_>
 8013fec:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 8013fee:	edd3 7a00 	vldr	s15, [r3]
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013ff8:	3b01      	subs	r3, #1
 8013ffa:	005b      	lsls	r3, r3, #1
 8013ffc:	68ba      	ldr	r2, [r7, #8]
 8013ffe:	4413      	add	r3, r2
 8014000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014004:	ee17 2a90 	vmov	r2, s15
 8014008:	b212      	sxth	r2, r2
 801400a:	801a      	strh	r2, [r3, #0]
}
 801400c:	bf00      	nop
 801400e:	3750      	adds	r7, #80	; 0x50
 8014010:	46bd      	mov	sp, r7
 8014012:	ecbd 8b02 	vpop	{d8}
 8014016:	bd80      	pop	{r7, pc}
 8014018:	47000000 	.word	0x47000000
 801401c:	46fffe00 	.word	0x46fffe00

08014020 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8014020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014024:	b090      	sub	sp, #64	; 0x40
 8014026:	af06      	add	r7, sp, #24
 8014028:	60f8      	str	r0, [r7, #12]
 801402a:	60b9      	str	r1, [r7, #8]
 801402c:	607a      	str	r2, [r7, #4]
 801402e:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	781b      	ldrb	r3, [r3, #0]
 8014034:	2b09      	cmp	r3, #9
 8014036:	d004      	beq.n	8014042 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 8014038:	68bb      	ldr	r3, [r7, #8]
 801403a:	781b      	ldrb	r3, [r3, #0]
 801403c:	2b07      	cmp	r3, #7
 801403e:	f040 81b6 	bne.w	80143ae <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 8014042:	68bb      	ldr	r3, [r7, #8]
 8014044:	781b      	ldrb	r3, [r3, #0]
 8014046:	2b07      	cmp	r3, #7
 8014048:	d156      	bne.n	80140f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	691b      	ldr	r3, [r3, #16]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d011      	beq.n	8014076 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	695c      	ldr	r4, [r3, #20]
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	691b      	ldr	r3, [r3, #16]
 801405a:	2200      	movs	r2, #0
 801405c:	9203      	str	r2, [sp, #12]
 801405e:	9302      	str	r3, [sp, #8]
 8014060:	4ba1      	ldr	r3, [pc, #644]	; (80142e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 8014062:	9301      	str	r3, [sp, #4]
 8014064:	4ba1      	ldr	r3, [pc, #644]	; (80142ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8014066:	9300      	str	r3, [sp, #0]
 8014068:	2325      	movs	r3, #37	; 0x25
 801406a:	4aa1      	ldr	r2, [pc, #644]	; (80142f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801406c:	49a1      	ldr	r1, [pc, #644]	; (80142f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801406e:	68f8      	ldr	r0, [r7, #12]
 8014070:	47a0      	blx	r4
 8014072:	2301      	movs	r3, #1
 8014074:	e1e0      	b.n	8014438 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	edd3 7a03 	vldr	s15, [r3, #12]
 801407c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80142f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8014080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014088:	dd07      	ble.n	801409a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	edd3 7a03 	vldr	s15, [r3, #12]
 8014090:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80142f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8014094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014098:	e006      	b.n	80140a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	edd3 7a03 	vldr	s15, [r3, #12]
 80140a0:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80142f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 80140a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140a8:	edc7 7a08 	vstr	s15, [r7, #32]
 80140ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80140b0:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80142fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 80140b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80140b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140bc:	f340 80dd 	ble.w	801427a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	695c      	ldr	r4, [r3, #20]
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	68db      	ldr	r3, [r3, #12]
 80140c8:	4618      	mov	r0, r3
 80140ca:	f7ec fa6f 	bl	80005ac <__aeabi_f2d>
 80140ce:	4602      	mov	r2, r0
 80140d0:	460b      	mov	r3, r1
 80140d2:	f04f 0000 	mov.w	r0, #0
 80140d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80140da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80140de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80140e2:	4b87      	ldr	r3, [pc, #540]	; (8014300 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 80140e4:	9301      	str	r3, [sp, #4]
 80140e6:	4b87      	ldr	r3, [pc, #540]	; (8014304 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 80140e8:	9300      	str	r3, [sp, #0]
 80140ea:	2326      	movs	r3, #38	; 0x26
 80140ec:	4a80      	ldr	r2, [pc, #512]	; (80142f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80140ee:	4986      	ldr	r1, [pc, #536]	; (8014308 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 80140f0:	68f8      	ldr	r0, [r7, #12]
 80140f2:	47a0      	blx	r4
 80140f4:	2301      	movs	r3, #1
 80140f6:	e19f      	b.n	8014438 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	2b09      	cmp	r3, #9
 80140fe:	d018      	beq.n	8014132 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	695c      	ldr	r4, [r3, #20]
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	4618      	mov	r0, r3
 801410a:	f7f4 fb47 	bl	800879c <TfLiteTypeGetName>
 801410e:	4605      	mov	r5, r0
 8014110:	2009      	movs	r0, #9
 8014112:	f7f4 fb43 	bl	800879c <TfLiteTypeGetName>
 8014116:	4603      	mov	r3, r0
 8014118:	9303      	str	r3, [sp, #12]
 801411a:	9502      	str	r5, [sp, #8]
 801411c:	4b7b      	ldr	r3, [pc, #492]	; (801430c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801411e:	9301      	str	r3, [sp, #4]
 8014120:	4b7b      	ldr	r3, [pc, #492]	; (8014310 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 8014122:	9300      	str	r3, [sp, #0]
 8014124:	2329      	movs	r3, #41	; 0x29
 8014126:	4a72      	ldr	r2, [pc, #456]	; (80142f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8014128:	497a      	ldr	r1, [pc, #488]	; (8014314 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801412a:	68f8      	ldr	r0, [r7, #12]
 801412c:	47a0      	blx	r4
 801412e:	2301      	movs	r3, #1
 8014130:	e182      	b.n	8014438 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	781b      	ldrb	r3, [r3, #0]
 8014136:	2b07      	cmp	r3, #7
 8014138:	d155      	bne.n	80141e6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	691b      	ldr	r3, [r3, #16]
 801413e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014142:	d011      	beq.n	8014168 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	695c      	ldr	r4, [r3, #20]
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	691b      	ldr	r3, [r3, #16]
 801414c:	4a72      	ldr	r2, [pc, #456]	; (8014318 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 801414e:	9203      	str	r2, [sp, #12]
 8014150:	9302      	str	r3, [sp, #8]
 8014152:	4b72      	ldr	r3, [pc, #456]	; (801431c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 8014154:	9301      	str	r3, [sp, #4]
 8014156:	4b65      	ldr	r3, [pc, #404]	; (80142ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8014158:	9300      	str	r3, [sp, #0]
 801415a:	232b      	movs	r3, #43	; 0x2b
 801415c:	4a64      	ldr	r2, [pc, #400]	; (80142f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801415e:	4965      	ldr	r1, [pc, #404]	; (80142f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8014160:	68f8      	ldr	r0, [r7, #12]
 8014162:	47a0      	blx	r4
 8014164:	2301      	movs	r3, #1
 8014166:	e167      	b.n	8014438 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	edd3 7a03 	vldr	s15, [r3, #12]
 801416e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8014320 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8014172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801417a:	dd07      	ble.n	801418c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	edd3 7a03 	vldr	s15, [r3, #12]
 8014182:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8014320 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8014186:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801418a:	e006      	b.n	801419a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	edd3 7a03 	vldr	s15, [r3, #12]
 8014192:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8014320 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8014196:	ee77 7a67 	vsub.f32	s15, s14, s15
 801419a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801419e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80141a2:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8014324 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 80141a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80141aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ae:	dd64      	ble.n	801427a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	695c      	ldr	r4, [r3, #20]
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	68db      	ldr	r3, [r3, #12]
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7ec f9f7 	bl	80005ac <__aeabi_f2d>
 80141be:	4602      	mov	r2, r0
 80141c0:	460b      	mov	r3, r1
 80141c2:	f04f 0000 	mov.w	r0, #0
 80141c6:	4958      	ldr	r1, [pc, #352]	; (8014328 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 80141c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80141cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80141d0:	4b56      	ldr	r3, [pc, #344]	; (801432c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 80141d2:	9301      	str	r3, [sp, #4]
 80141d4:	4b4b      	ldr	r3, [pc, #300]	; (8014304 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 80141d6:	9300      	str	r3, [sp, #0]
 80141d8:	232c      	movs	r3, #44	; 0x2c
 80141da:	4a45      	ldr	r2, [pc, #276]	; (80142f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80141dc:	494a      	ldr	r1, [pc, #296]	; (8014308 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 80141de:	68f8      	ldr	r0, [r7, #12]
 80141e0:	47a0      	blx	r4
 80141e2:	2301      	movs	r3, #1
 80141e4:	e128      	b.n	8014438 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	781b      	ldrb	r3, [r3, #0]
 80141ea:	2b09      	cmp	r3, #9
 80141ec:	d018      	beq.n	8014220 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	695c      	ldr	r4, [r3, #20]
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	781b      	ldrb	r3, [r3, #0]
 80141f6:	4618      	mov	r0, r3
 80141f8:	f7f4 fad0 	bl	800879c <TfLiteTypeGetName>
 80141fc:	4605      	mov	r5, r0
 80141fe:	2009      	movs	r0, #9
 8014200:	f7f4 facc 	bl	800879c <TfLiteTypeGetName>
 8014204:	4603      	mov	r3, r0
 8014206:	9303      	str	r3, [sp, #12]
 8014208:	9502      	str	r5, [sp, #8]
 801420a:	4b40      	ldr	r3, [pc, #256]	; (801430c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801420c:	9301      	str	r3, [sp, #4]
 801420e:	4b48      	ldr	r3, [pc, #288]	; (8014330 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 8014210:	9300      	str	r3, [sp, #0]
 8014212:	232f      	movs	r3, #47	; 0x2f
 8014214:	4a36      	ldr	r2, [pc, #216]	; (80142f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8014216:	493f      	ldr	r1, [pc, #252]	; (8014314 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8014218:	68f8      	ldr	r0, [r7, #12]
 801421a:	47a0      	blx	r4
 801421c:	2301      	movs	r3, #1
 801421e:	e10b      	b.n	8014438 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	691b      	ldr	r3, [r3, #16]
 8014224:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8014228:	d012      	beq.n	8014250 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	695c      	ldr	r4, [r3, #20]
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	691b      	ldr	r3, [r3, #16]
 8014232:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8014236:	9203      	str	r2, [sp, #12]
 8014238:	9302      	str	r3, [sp, #8]
 801423a:	4b3e      	ldr	r3, [pc, #248]	; (8014334 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 801423c:	9301      	str	r3, [sp, #4]
 801423e:	4b2b      	ldr	r3, [pc, #172]	; (80142ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8014240:	9300      	str	r3, [sp, #0]
 8014242:	2330      	movs	r3, #48	; 0x30
 8014244:	4a2a      	ldr	r2, [pc, #168]	; (80142f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8014246:	492b      	ldr	r1, [pc, #172]	; (80142f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8014248:	68f8      	ldr	r0, [r7, #12]
 801424a:	47a0      	blx	r4
 801424c:	2301      	movs	r3, #1
 801424e:	e0f3      	b.n	8014438 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	edd3 7a03 	vldr	s15, [r3, #12]
 8014256:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014338 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 801425a:	eef4 7a47 	vcmp.f32	s15, s14
 801425e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014262:	d00a      	beq.n	801427a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	695c      	ldr	r4, [r3, #20]
 8014268:	4b34      	ldr	r3, [pc, #208]	; (801433c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 801426a:	9300      	str	r3, [sp, #0]
 801426c:	2331      	movs	r3, #49	; 0x31
 801426e:	4a20      	ldr	r2, [pc, #128]	; (80142f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8014270:	4933      	ldr	r1, [pc, #204]	; (8014340 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 8014272:	68f8      	ldr	r0, [r7, #12]
 8014274:	47a0      	blx	r4
 8014276:	2301      	movs	r3, #1
 8014278:	e0de      	b.n	8014438 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	2b07      	cmp	r3, #7
 8014280:	d160      	bne.n	8014344 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 8014282:	68bb      	ldr	r3, [r7, #8]
 8014284:	68db      	ldr	r3, [r3, #12]
 8014286:	4618      	mov	r0, r3
 8014288:	f7ec f990 	bl	80005ac <__aeabi_f2d>
 801428c:	4604      	mov	r4, r0
 801428e:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 8014290:	683b      	ldr	r3, [r7, #0]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	4618      	mov	r0, r3
 8014296:	f7ec f989 	bl	80005ac <__aeabi_f2d>
 801429a:	4602      	mov	r2, r0
 801429c:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 801429e:	4620      	mov	r0, r4
 80142a0:	4629      	mov	r1, r5
 80142a2:	f7ec f9db 	bl	800065c <__aeabi_dmul>
 80142a6:	4602      	mov	r2, r0
 80142a8:	460b      	mov	r3, r1
 80142aa:	4610      	mov	r0, r2
 80142ac:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 80142ae:	a30c      	add	r3, pc, #48	; (adr r3, 80142e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 80142b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b4:	f7ec fafc 	bl	80008b0 <__aeabi_ddiv>
 80142b8:	4602      	mov	r2, r0
 80142ba:	460b      	mov	r3, r1
 80142bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 80142c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142c2:	3308      	adds	r3, #8
 80142c4:	f107 0214 	add.w	r2, r7, #20
 80142c8:	4611      	mov	r1, r2
 80142ca:	4618      	mov	r0, r3
 80142cc:	ed97 0b06 	vldr	d0, [r7, #24]
 80142d0:	f7f6 fde8 	bl	800aea4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 80142d4:	697a      	ldr	r2, [r7, #20]
 80142d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142d8:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 80142da:	e0ac      	b.n	8014436 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 80142dc:	f3af 8000 	nop.w
 80142e0:	00140014 	.word	0x00140014
 80142e4:	3f240014 	.word	0x3f240014
 80142e8:	0802b214 	.word	0x0802b214
 80142ec:	0802b218 	.word	0x0802b218
 80142f0:	0802b1b4 	.word	0x0802b1b4
 80142f4:	0802b1f8 	.word	0x0802b1f8
 80142f8:	38000000 	.word	0x38000000
 80142fc:	3303126f 	.word	0x3303126f
 8014300:	0802b254 	.word	0x0802b254
 8014304:	0802b260 	.word	0x0802b260
 8014308:	0802b234 	.word	0x0802b234
 801430c:	0802b294 	.word	0x0802b294
 8014310:	0802b2a0 	.word	0x0802b2a0
 8014314:	0802b278 	.word	0x0802b278
 8014318:	ffff8000 	.word	0xffff8000
 801431c:	0802b2ac 	.word	0x0802b2ac
 8014320:	37800000 	.word	0x37800000
 8014324:	3283126f 	.word	0x3283126f
 8014328:	3ef00000 	.word	0x3ef00000
 801432c:	0802b2b4 	.word	0x0802b2b4
 8014330:	0802b2c0 	.word	0x0802b2c0
 8014334:	0802b2d0 	.word	0x0802b2d0
 8014338:	3b800000 	.word	0x3b800000
 801433c:	0802b2f0 	.word	0x0802b2f0
 8014340:	0802b2d8 	.word	0x0802b2d8
          static_cast<double>(params->beta),
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 8014348:	4618      	mov	r0, r3
 801434a:	f7ec f92f 	bl	80005ac <__aeabi_f2d>
 801434e:	4680      	mov	r8, r0
 8014350:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 8014356:	4618      	mov	r0, r3
 8014358:	f7ec f928 	bl	80005ac <__aeabi_f2d>
 801435c:	4682      	mov	sl, r0
 801435e:	468b      	mov	fp, r1
 8014360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014362:	3308      	adds	r3, #8
 8014364:	f107 0210 	add.w	r2, r7, #16
 8014368:	4619      	mov	r1, r3
 801436a:	2005      	movs	r0, #5
 801436c:	ec4b ab11 	vmov	d1, sl, fp
 8014370:	ec49 8b10 	vmov	d0, r8, r9
 8014374:	f7f6 fe60 	bl	800b038 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 8014378:	693a      	ldr	r2, [r7, #16]
 801437a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801437c:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 801437e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014380:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8014382:	221f      	movs	r2, #31
 8014384:	4619      	mov	r1, r3
 8014386:	2005      	movs	r0, #5
 8014388:	f7f6 fe9e 	bl	800b0c8 <_ZN6tflite20CalculateInputRadiusEiii>
 801438c:	4603      	mov	r3, r0
 801438e:	4618      	mov	r0, r3
 8014390:	f7ec f8fa 	bl	8000588 <__aeabi_i2d>
 8014394:	4602      	mov	r2, r0
 8014396:	460b      	mov	r3, r1
 8014398:	4614      	mov	r4, r2
 801439a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 801439e:	4620      	mov	r0, r4
 80143a0:	4629      	mov	r1, r5
 80143a2:	f7ec fbf5 	bl	8000b90 <__aeabi_d2iz>
 80143a6:	4602      	mov	r2, r0
 80143a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143aa:	619a      	str	r2, [r3, #24]
    }
 80143ac:	e043      	b.n	8014436 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 80143ae:	68bb      	ldr	r3, [r7, #8]
 80143b0:	781b      	ldrb	r3, [r3, #0]
 80143b2:	2b01      	cmp	r3, #1
 80143b4:	d018      	beq.n	80143e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	695c      	ldr	r4, [r3, #20]
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	781b      	ldrb	r3, [r3, #0]
 80143be:	4618      	mov	r0, r3
 80143c0:	f7f4 f9ec 	bl	800879c <TfLiteTypeGetName>
 80143c4:	4605      	mov	r5, r0
 80143c6:	2001      	movs	r0, #1
 80143c8:	f7f4 f9e8 	bl	800879c <TfLiteTypeGetName>
 80143cc:	4603      	mov	r3, r0
 80143ce:	9303      	str	r3, [sp, #12]
 80143d0:	9502      	str	r5, [sp, #8]
 80143d2:	4b1c      	ldr	r3, [pc, #112]	; (8014444 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 80143d4:	9301      	str	r3, [sp, #4]
 80143d6:	4b1c      	ldr	r3, [pc, #112]	; (8014448 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 80143d8:	9300      	str	r3, [sp, #0]
 80143da:	234e      	movs	r3, #78	; 0x4e
 80143dc:	4a1b      	ldr	r2, [pc, #108]	; (801444c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 80143de:	491c      	ldr	r1, [pc, #112]	; (8014450 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 80143e0:	68f8      	ldr	r0, [r7, #12]
 80143e2:	47a0      	blx	r4
 80143e4:	2301      	movs	r3, #1
 80143e6:	e027      	b.n	8014438 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	781b      	ldrb	r3, [r3, #0]
 80143ec:	2b01      	cmp	r3, #1
 80143ee:	d018      	beq.n	8014422 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	695c      	ldr	r4, [r3, #20]
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	4618      	mov	r0, r3
 80143fa:	f7f4 f9cf 	bl	800879c <TfLiteTypeGetName>
 80143fe:	4605      	mov	r5, r0
 8014400:	2001      	movs	r0, #1
 8014402:	f7f4 f9cb 	bl	800879c <TfLiteTypeGetName>
 8014406:	4603      	mov	r3, r0
 8014408:	9303      	str	r3, [sp, #12]
 801440a:	9502      	str	r5, [sp, #8]
 801440c:	4b0d      	ldr	r3, [pc, #52]	; (8014444 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801440e:	9301      	str	r3, [sp, #4]
 8014410:	4b10      	ldr	r3, [pc, #64]	; (8014454 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 8014412:	9300      	str	r3, [sp, #0]
 8014414:	234f      	movs	r3, #79	; 0x4f
 8014416:	4a0d      	ldr	r2, [pc, #52]	; (801444c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8014418:	490d      	ldr	r1, [pc, #52]	; (8014450 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801441a:	68f8      	ldr	r0, [r7, #12]
 801441c:	47a0      	blx	r4
 801441e:	2301      	movs	r3, #1
 8014420:	e00a      	b.n	8014438 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	4618      	mov	r0, r3
 8014428:	f7ec f8c0 	bl	80005ac <__aeabi_f2d>
 801442c:	4602      	mov	r2, r0
 801442e:	460b      	mov	r3, r1
 8014430:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014432:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8014436:	2300      	movs	r3, #0
}
 8014438:	4618      	mov	r0, r3
 801443a:	3728      	adds	r7, #40	; 0x28
 801443c:	46bd      	mov	sp, r7
 801443e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014442:	bf00      	nop
 8014444:	0802b314 	.word	0x0802b314
 8014448:	0802b2a0 	.word	0x0802b2a0
 801444c:	0802b1b4 	.word	0x0802b1b4
 8014450:	0802b278 	.word	0x0802b278
 8014454:	0802b2c0 	.word	0x0802b2c0

08014458 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 8014458:	b580      	push	{r7, lr}
 801445a:	b084      	sub	sp, #16
 801445c:	af00      	add	r7, sp, #0
 801445e:	60f8      	str	r0, [r7, #12]
 8014460:	60b9      	str	r1, [r7, #8]
 8014462:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014468:	2b00      	cmp	r3, #0
 801446a:	d101      	bne.n	8014470 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 801446c:	f010 feff 	bl	802526e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014474:	2138      	movs	r1, #56	; 0x38
 8014476:	68f8      	ldr	r0, [r7, #12]
 8014478:	4798      	blx	r3
 801447a:	4603      	mov	r3, r0
}
 801447c:	4618      	mov	r0, r3
 801447e:	3710      	adds	r7, #16
 8014480:	46bd      	mov	sp, r7
 8014482:	bd80      	pop	{r7, pc}

08014484 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8014484:	b580      	push	{r7, lr}
 8014486:	b082      	sub	sp, #8
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
 801448c:	ed87 0a00 	vstr	s0, [r7]
 8014490:	ed97 0a00 	vldr	s0, [r7]
 8014494:	f7fe fa3f 	bl	8012916 <_ZSt3expf>
 8014498:	eef0 7a40 	vmov.f32	s15, s0
 801449c:	eeb0 0a67 	vmov.f32	s0, s15
 80144a0:	3708      	adds	r7, #8
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}

080144a6 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 80144a6:	b580      	push	{r7, lr}
 80144a8:	b082      	sub	sp, #8
 80144aa:	af00      	add	r7, sp, #0
 80144ac:	ed87 0a01 	vstr	s0, [r7, #4]
 80144b0:	ed97 0a01 	vldr	s0, [r7, #4]
 80144b4:	2000      	movs	r0, #0
 80144b6:	f7ff ffe5 	bl	8014484 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 80144ba:	eef0 7a40 	vmov.f32	s15, s0
 80144be:	eeb0 0a67 	vmov.f32	s0, s15
 80144c2:	3708      	adds	r7, #8
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}

080144c8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 80144c8:	b480      	push	{r7}
 80144ca:	b083      	sub	sp, #12
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
 80144d0:	4b03      	ldr	r3, [pc, #12]	; (80144e0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 80144d2:	4618      	mov	r0, r3
 80144d4:	370c      	adds	r7, #12
 80144d6:	46bd      	mov	sp, r7
 80144d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144dc:	4770      	bx	lr
 80144de:	bf00      	nop
 80144e0:	080144a7 	.word	0x080144a7

080144e4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 80144e4:	b480      	push	{r7}
 80144e6:	b083      	sub	sp, #12
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
 80144ec:	ed87 0a00 	vstr	s0, [r7]
 80144f0:	edd7 7a00 	vldr	s15, [r7]
 80144f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80144f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80144fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014500:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014504:	eef0 7a66 	vmov.f32	s15, s13
 8014508:	eeb0 0a67 	vmov.f32	s0, s15
 801450c:	370c      	adds	r7, #12
 801450e:	46bd      	mov	sp, r7
 8014510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014514:	4770      	bx	lr

08014516 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 8014516:	b580      	push	{r7, lr}
 8014518:	b082      	sub	sp, #8
 801451a:	af00      	add	r7, sp, #0
 801451c:	ed87 0a01 	vstr	s0, [r7, #4]
 8014520:	ed97 0a01 	vldr	s0, [r7, #4]
 8014524:	2000      	movs	r0, #0
 8014526:	f7ff ffdd 	bl	80144e4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 801452a:	eef0 7a40 	vmov.f32	s15, s0
 801452e:	eeb0 0a67 	vmov.f32	s0, s15
 8014532:	3708      	adds	r7, #8
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}

08014538 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 8014538:	b480      	push	{r7}
 801453a:	b083      	sub	sp, #12
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	4b03      	ldr	r3, [pc, #12]	; (8014550 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 8014542:	4618      	mov	r0, r3
 8014544:	370c      	adds	r7, #12
 8014546:	46bd      	mov	sp, r7
 8014548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454c:	4770      	bx	lr
 801454e:	bf00      	nop
 8014550:	08014517 	.word	0x08014517

08014554 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8014554:	b590      	push	{r4, r7, lr}
 8014556:	b08f      	sub	sp, #60	; 0x3c
 8014558:	af04      	add	r7, sp, #16
 801455a:	6078      	str	r0, [r7, #4]
 801455c:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801455e:	6838      	ldr	r0, [r7, #0]
 8014560:	f7fd fcb9 	bl	8011ed6 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8014564:	4603      	mov	r3, r0
 8014566:	2b01      	cmp	r3, #1
 8014568:	bf14      	ite	ne
 801456a:	2301      	movne	r3, #1
 801456c:	2300      	moveq	r3, #0
 801456e:	b2db      	uxtb	r3, r3
 8014570:	2b00      	cmp	r3, #0
 8014572:	d013      	beq.n	801459c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	695c      	ldr	r4, [r3, #20]
 8014578:	6838      	ldr	r0, [r7, #0]
 801457a:	f7fd fcac 	bl	8011ed6 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801457e:	4603      	mov	r3, r0
 8014580:	2201      	movs	r2, #1
 8014582:	9203      	str	r2, [sp, #12]
 8014584:	9302      	str	r3, [sp, #8]
 8014586:	4b7c      	ldr	r3, [pc, #496]	; (8014778 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8014588:	9301      	str	r3, [sp, #4]
 801458a:	4b7c      	ldr	r3, [pc, #496]	; (801477c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 801458c:	9300      	str	r3, [sp, #0]
 801458e:	235d      	movs	r3, #93	; 0x5d
 8014590:	4a7b      	ldr	r2, [pc, #492]	; (8014780 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014592:	497c      	ldr	r1, [pc, #496]	; (8014784 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8014594:	6878      	ldr	r0, [r7, #4]
 8014596:	47a0      	blx	r4
 8014598:	2301      	movs	r3, #1
 801459a:	e146      	b.n	801482a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801459c:	6838      	ldr	r0, [r7, #0]
 801459e:	f7fd fca7 	bl	8011ef0 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80145a2:	4603      	mov	r3, r0
 80145a4:	2b01      	cmp	r3, #1
 80145a6:	bf14      	ite	ne
 80145a8:	2301      	movne	r3, #1
 80145aa:	2300      	moveq	r3, #0
 80145ac:	b2db      	uxtb	r3, r3
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d013      	beq.n	80145da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	695c      	ldr	r4, [r3, #20]
 80145b6:	6838      	ldr	r0, [r7, #0]
 80145b8:	f7fd fc9a 	bl	8011ef0 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80145bc:	4603      	mov	r3, r0
 80145be:	2201      	movs	r2, #1
 80145c0:	9203      	str	r2, [sp, #12]
 80145c2:	9302      	str	r3, [sp, #8]
 80145c4:	4b6c      	ldr	r3, [pc, #432]	; (8014778 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 80145c6:	9301      	str	r3, [sp, #4]
 80145c8:	4b6f      	ldr	r3, [pc, #444]	; (8014788 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 80145ca:	9300      	str	r3, [sp, #0]
 80145cc:	235e      	movs	r3, #94	; 0x5e
 80145ce:	4a6c      	ldr	r2, [pc, #432]	; (8014780 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80145d0:	496c      	ldr	r1, [pc, #432]	; (8014784 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	47a0      	blx	r4
 80145d6:	2301      	movs	r3, #1
 80145d8:	e127      	b.n	801482a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 80145da:	2200      	movs	r2, #0
 80145dc:	6839      	ldr	r1, [r7, #0]
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f7f6 ff40 	bl	800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80145e4:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 80145e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d10a      	bne.n	8014602 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	695c      	ldr	r4, [r3, #20]
 80145f0:	4b66      	ldr	r3, [pc, #408]	; (801478c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 80145f2:	9300      	str	r3, [sp, #0]
 80145f4:	2360      	movs	r3, #96	; 0x60
 80145f6:	4a62      	ldr	r2, [pc, #392]	; (8014780 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80145f8:	4965      	ldr	r1, [pc, #404]	; (8014790 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	47a0      	blx	r4
 80145fe:	2301      	movs	r3, #1
 8014600:	e113      	b.n	801482a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 8014602:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014604:	f7f6 fe5a 	bl	800b2bc <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8014608:	4603      	mov	r3, r0
 801460a:	2b00      	cmp	r3, #0
 801460c:	bfd4      	ite	le
 801460e:	2301      	movle	r3, #1
 8014610:	2300      	movgt	r3, #0
 8014612:	b2db      	uxtb	r3, r3
 8014614:	2b00      	cmp	r3, #0
 8014616:	d00a      	beq.n	801462e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	695c      	ldr	r4, [r3, #20]
 801461c:	4b5d      	ldr	r3, [pc, #372]	; (8014794 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801461e:	9300      	str	r3, [sp, #0]
 8014620:	2361      	movs	r3, #97	; 0x61
 8014622:	4a57      	ldr	r2, [pc, #348]	; (8014780 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014624:	495a      	ldr	r1, [pc, #360]	; (8014790 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	47a0      	blx	r4
 801462a:	2301      	movs	r3, #1
 801462c:	e0fd      	b.n	801482a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 801462e:	2200      	movs	r2, #0
 8014630:	6839      	ldr	r1, [r7, #0]
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f7f6 ff26 	bl	800b484 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8014638:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 801463a:	6a3b      	ldr	r3, [r7, #32]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d10a      	bne.n	8014656 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	695c      	ldr	r4, [r3, #20]
 8014644:	4b54      	ldr	r3, [pc, #336]	; (8014798 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8014646:	9300      	str	r3, [sp, #0]
 8014648:	2363      	movs	r3, #99	; 0x63
 801464a:	4a4d      	ldr	r2, [pc, #308]	; (8014780 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801464c:	4950      	ldr	r1, [pc, #320]	; (8014790 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	47a0      	blx	r4
 8014652:	2301      	movs	r3, #1
 8014654:	e0e9      	b.n	801482a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	691b      	ldr	r3, [r3, #16]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d10a      	bne.n	8014674 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	695c      	ldr	r4, [r3, #20]
 8014662:	4b4e      	ldr	r3, [pc, #312]	; (801479c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 8014664:	9300      	str	r3, [sp, #0]
 8014666:	2365      	movs	r3, #101	; 0x65
 8014668:	4a45      	ldr	r2, [pc, #276]	; (8014780 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801466a:	4949      	ldr	r1, [pc, #292]	; (8014790 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	47a0      	blx	r4
 8014670:	2301      	movs	r3, #1
 8014672:	e0da      	b.n	801482a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	691b      	ldr	r3, [r3, #16]
 8014678:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 801467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801467c:	781b      	ldrb	r3, [r3, #0]
 801467e:	2b07      	cmp	r3, #7
 8014680:	d12f      	bne.n	80146e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014686:	f240 4102 	movw	r1, #1026	; 0x402
 801468a:	6878      	ldr	r0, [r7, #4]
 801468c:	4798      	blx	r3
 801468e:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 8014690:	69bb      	ldr	r3, [r7, #24]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d10a      	bne.n	80146ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	695c      	ldr	r4, [r3, #20]
 801469a:	4b41      	ldr	r3, [pc, #260]	; (80147a0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801469c:	9300      	str	r3, [sp, #0]
 801469e:	236b      	movs	r3, #107	; 0x6b
 80146a0:	4a37      	ldr	r2, [pc, #220]	; (8014780 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80146a2:	493b      	ldr	r1, [pc, #236]	; (8014790 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	47a0      	blx	r4
 80146a8:	2301      	movs	r3, #1
 80146aa:	e0be      	b.n	801482a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 80146ac:	69fb      	ldr	r3, [r7, #28]
 80146ae:	69ba      	ldr	r2, [r7, #24]
 80146b0:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146b6:	f240 4102 	movw	r1, #1026	; 0x402
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	4798      	blx	r3
 80146be:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d10a      	bne.n	80146dc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	695c      	ldr	r4, [r3, #20]
 80146ca:	4b36      	ldr	r3, [pc, #216]	; (80147a4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 80146cc:	9300      	str	r3, [sp, #0]
 80146ce:	236f      	movs	r3, #111	; 0x6f
 80146d0:	4a2b      	ldr	r2, [pc, #172]	; (8014780 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80146d2:	492f      	ldr	r1, [pc, #188]	; (8014790 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80146d4:	6878      	ldr	r0, [r7, #4]
 80146d6:	47a0      	blx	r4
 80146d8:	2301      	movs	r3, #1
 80146da:	e0a6      	b.n	801482a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 80146dc:	69fb      	ldr	r3, [r7, #28]
 80146de:	697a      	ldr	r2, [r7, #20]
 80146e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 80146e2:	6a3b      	ldr	r3, [r7, #32]
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	2b07      	cmp	r3, #7
 80146e8:	d112      	bne.n	8014710 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 80146ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ec:	781b      	ldrb	r3, [r3, #0]
 80146ee:	2b09      	cmp	r3, #9
 80146f0:	d028      	beq.n	8014744 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 80146f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f4:	781b      	ldrb	r3, [r3, #0]
 80146f6:	2b07      	cmp	r3, #7
 80146f8:	d024      	beq.n	8014744 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	695c      	ldr	r4, [r3, #20]
 80146fe:	4b2a      	ldr	r3, [pc, #168]	; (80147a8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8014700:	9300      	str	r3, [sp, #0]
 8014702:	2375      	movs	r3, #117	; 0x75
 8014704:	4a1e      	ldr	r2, [pc, #120]	; (8014780 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014706:	4922      	ldr	r1, [pc, #136]	; (8014790 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	47a0      	blx	r4
 801470c:	2301      	movs	r3, #1
 801470e:	e08c      	b.n	801482a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8014710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014712:	781a      	ldrb	r2, [r3, #0]
 8014714:	6a3b      	ldr	r3, [r7, #32]
 8014716:	781b      	ldrb	r3, [r3, #0]
 8014718:	429a      	cmp	r2, r3
 801471a:	d013      	beq.n	8014744 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	695c      	ldr	r4, [r3, #20]
 8014720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	461a      	mov	r2, r3
 8014726:	6a3b      	ldr	r3, [r7, #32]
 8014728:	781b      	ldrb	r3, [r3, #0]
 801472a:	9303      	str	r3, [sp, #12]
 801472c:	9202      	str	r2, [sp, #8]
 801472e:	4b1f      	ldr	r3, [pc, #124]	; (80147ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 8014730:	9301      	str	r3, [sp, #4]
 8014732:	4b1f      	ldr	r3, [pc, #124]	; (80147b0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 8014734:	9300      	str	r3, [sp, #0]
 8014736:	2378      	movs	r3, #120	; 0x78
 8014738:	4a11      	ldr	r2, [pc, #68]	; (8014780 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801473a:	4912      	ldr	r1, [pc, #72]	; (8014784 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	47a0      	blx	r4
 8014740:	2301      	movs	r3, #1
 8014742:	e072      	b.n	801482a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 8014744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014746:	781b      	ldrb	r3, [r3, #0]
 8014748:	2b07      	cmp	r3, #7
 801474a:	d161      	bne.n	8014810 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801474c:	6a3b      	ldr	r3, [r7, #32]
 801474e:	691b      	ldr	r3, [r3, #16]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d035      	beq.n	80147c0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	695c      	ldr	r4, [r3, #20]
 8014758:	6a3b      	ldr	r3, [r7, #32]
 801475a:	691b      	ldr	r3, [r3, #16]
 801475c:	2200      	movs	r2, #0
 801475e:	9203      	str	r2, [sp, #12]
 8014760:	9302      	str	r3, [sp, #8]
 8014762:	4b14      	ldr	r3, [pc, #80]	; (80147b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 8014764:	9301      	str	r3, [sp, #4]
 8014766:	4b14      	ldr	r3, [pc, #80]	; (80147b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8014768:	9300      	str	r3, [sp, #0]
 801476a:	237d      	movs	r3, #125	; 0x7d
 801476c:	4a04      	ldr	r2, [pc, #16]	; (8014780 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801476e:	4905      	ldr	r1, [pc, #20]	; (8014784 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	47a0      	blx	r4
 8014774:	2301      	movs	r3, #1
 8014776:	e058      	b.n	801482a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 8014778:	0802b324 	.word	0x0802b324
 801477c:	0802b328 	.word	0x0802b328
 8014780:	0802b1b4 	.word	0x0802b1b4
 8014784:	0802b1f8 	.word	0x0802b1f8
 8014788:	0802b338 	.word	0x0802b338
 801478c:	0802b34c 	.word	0x0802b34c
 8014790:	0802b2d8 	.word	0x0802b2d8
 8014794:	0802b360 	.word	0x0802b360
 8014798:	0802b37c 	.word	0x0802b37c
 801479c:	0802b390 	.word	0x0802b390
 80147a0:	0802b3ac 	.word	0x0802b3ac
 80147a4:	0802b3c4 	.word	0x0802b3c4
 80147a8:	0802b3e8 	.word	0x0802b3e8
 80147ac:	0802b2c0 	.word	0x0802b2c0
 80147b0:	0802b2a0 	.word	0x0802b2a0
 80147b4:	0802b214 	.word	0x0802b214
 80147b8:	0802b218 	.word	0x0802b218
 80147bc:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 80147c0:	f107 0308 	add.w	r3, r7, #8
 80147c4:	4618      	mov	r0, r3
 80147c6:	f7ff fe7f 	bl	80144c8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 80147ca:	69fb      	ldr	r3, [r7, #28]
 80147cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147ce:	f240 2201 	movw	r2, #513	; 0x201
 80147d2:	4619      	mov	r1, r3
 80147d4:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 80147bc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 80147d8:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80147dc:	f7ff faf4 	bl	8013dc8 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 80147e0:	f107 030c 	add.w	r3, r7, #12
 80147e4:	4618      	mov	r0, r3
 80147e6:	f7ff fea7 	bl	8014538 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 80147ea:	69fb      	ldr	r3, [r7, #28]
 80147ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147ee:	f240 2201 	movw	r2, #513	; 0x201
 80147f2:	4619      	mov	r1, r3
 80147f4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80147f8:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 80147bc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 80147fc:	f7ff fae4 	bl	8013dc8 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 8014800:	6a3b      	ldr	r3, [r7, #32]
 8014802:	691a      	ldr	r2, [r3, #16]
 8014804:	69fb      	ldr	r3, [r7, #28]
 8014806:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 8014808:	6a3b      	ldr	r3, [r7, #32]
 801480a:	68da      	ldr	r2, [r3, #12]
 801480c:	69fb      	ldr	r3, [r7, #28]
 801480e:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8014810:	683b      	ldr	r3, [r7, #0]
 8014812:	695b      	ldr	r3, [r3, #20]
 8014814:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 8014816:	69fb      	ldr	r3, [r7, #28]
 8014818:	9300      	str	r3, [sp, #0]
 801481a:	693b      	ldr	r3, [r7, #16]
 801481c:	6a3a      	ldr	r2, [r7, #32]
 801481e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f7ff fbfd 	bl	8014020 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8014826:	4603      	mov	r3, r0
 8014828:	bf00      	nop
}
 801482a:	4618      	mov	r0, r3
 801482c:	372c      	adds	r7, #44	; 0x2c
 801482e:	46bd      	mov	sp, r7
 8014830:	bd90      	pop	{r4, r7, pc}
 8014832:	bf00      	nop

08014834 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 8014834:	b580      	push	{r7, lr}
 8014836:	b084      	sub	sp, #16
 8014838:	af00      	add	r7, sp, #0
 801483a:	60f8      	str	r0, [r7, #12]
 801483c:	60b9      	str	r1, [r7, #8]
 801483e:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 8014840:	68fa      	ldr	r2, [r7, #12]
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	fa02 f303 	lsl.w	r3, r2, r3
 8014848:	68b9      	ldr	r1, [r7, #8]
 801484a:	4618      	mov	r0, r3
 801484c:	f7fc fa9a 	bl	8010d84 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8014850:	4603      	mov	r3, r0
}
 8014852:	4618      	mov	r0, r3
 8014854:	3710      	adds	r7, #16
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}

0801485a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 801485a:	b590      	push	{r4, r7, lr}
 801485c:	ed2d 8b02 	vpush	{d8}
 8014860:	b0a9      	sub	sp, #164	; 0xa4
 8014862:	af02      	add	r7, sp, #8
 8014864:	60f8      	str	r0, [r7, #12]
 8014866:	60b9      	str	r1, [r7, #8]
 8014868:	607a      	str	r2, [r7, #4]
 801486a:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8014872:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801487a:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014882:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801488a:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014892:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801489a:	65fb      	str	r3, [r7, #92]	; 0x5c
  const float output_activation_min = params.float_activation_min;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148a0:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_max = params.float_activation_max;
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148a6:	657b      	str	r3, [r7, #84]	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80148a8:	68b8      	ldr	r0, [r7, #8]
 80148aa:	f7f7 fb9c 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80148ae:	4603      	mov	r3, r0
 80148b0:	2b04      	cmp	r3, #4
 80148b2:	d001      	beq.n	80148b8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 80148b4:	f010 fcdb 	bl	802526e <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80148b8:	6838      	ldr	r0, [r7, #0]
 80148ba:	f7f7 fb94 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80148be:	4603      	mov	r3, r0
 80148c0:	2b04      	cmp	r3, #4
 80148c2:	d001      	beq.n	80148c8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 80148c4:	f010 fcd3 	bl	802526e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80148c8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80148cc:	f7f7 fb8b 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80148d0:	4603      	mov	r3, r0
 80148d2:	2b04      	cmp	r3, #4
 80148d4:	d001      	beq.n	80148da <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 80148d6:	f010 fcca 	bl	802526e <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80148da:	2300      	movs	r3, #0
 80148dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80148e0:	2100      	movs	r1, #0
 80148e2:	68b8      	ldr	r0, [r7, #8]
 80148e4:	f7fd fb84 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80148e8:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80148ea:	2303      	movs	r3, #3
 80148ec:	683a      	ldr	r2, [r7, #0]
 80148ee:	2103      	movs	r1, #3
 80148f0:	68b8      	ldr	r0, [r7, #8]
 80148f2:	f7fd fb7d 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80148f6:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80148f8:	2303      	movs	r3, #3
 80148fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80148fe:	2100      	movs	r1, #0
 8014900:	6838      	ldr	r0, [r7, #0]
 8014902:	f7fd fb75 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014906:	64b8      	str	r0, [r7, #72]	; 0x48
  if (bias_data) {
 8014908:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801490c:	2b00      	cmp	r3, #0
 801490e:	d009      	beq.n	8014924 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8014910:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8014914:	f7fc fade 	bl	8010ed4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8014918:	4602      	mov	r2, r0
 801491a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801491c:	4293      	cmp	r3, r2
 801491e:	d001      	beq.n	8014924 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
 8014920:	f010 fca5 	bl	802526e <abort>
  }
  const int input_height = input_shape.Dims(1);
 8014924:	2101      	movs	r1, #1
 8014926:	68b8      	ldr	r0, [r7, #8]
 8014928:	f7fc fa9c 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 801492c:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 801492e:	2102      	movs	r1, #2
 8014930:	68b8      	ldr	r0, [r7, #8]
 8014932:	f7fc fa97 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014936:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_height = filter_shape.Dims(1);
 8014938:	2101      	movs	r1, #1
 801493a:	6838      	ldr	r0, [r7, #0]
 801493c:	f7fc fa92 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014940:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_width = filter_shape.Dims(2);
 8014942:	2102      	movs	r1, #2
 8014944:	6838      	ldr	r0, [r7, #0]
 8014946:	f7fc fa8d 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 801494a:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
 801494c:	2101      	movs	r1, #1
 801494e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014952:	f7fc fa87 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014956:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
 8014958:	2102      	movs	r1, #2
 801495a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801495e:	f7fc fa81 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014962:	6338      	str	r0, [r7, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
 8014964:	2300      	movs	r3, #0
 8014966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801496a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801496e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014970:	429a      	cmp	r2, r3
 8014972:	f280 80f0 	bge.w	8014b56 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2fc>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014976:	2300      	movs	r3, #0
 8014978:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801497c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8014980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014982:	429a      	cmp	r2, r3
 8014984:	f280 80e1 	bge.w	8014b4a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f0>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 8014988:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801498c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801498e:	fb02 f203 	mul.w	r2, r2, r3
 8014992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014994:	1ad3      	subs	r3, r2, r3
 8014996:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014998:	2300      	movs	r3, #0
 801499a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801499e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80149a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149a4:	429a      	cmp	r2, r3
 80149a6:	f280 80ca 	bge.w	8014b3e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2e4>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 80149aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80149ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80149b0:	fb02 f203 	mul.w	r2, r2, r3
 80149b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80149b6:	1ad3      	subs	r3, r2, r3
 80149b8:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 80149ba:	2300      	movs	r3, #0
 80149bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80149c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80149c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80149c6:	429a      	cmp	r2, r3
 80149c8:	f280 80b3 	bge.w	8014b32 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d8>
          float total = 0.f;
 80149cc:	f04f 0300 	mov.w	r3, #0
 80149d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80149d4:	2300      	movs	r3, #0
 80149d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80149da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80149de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149e0:	429a      	cmp	r2, r3
 80149e2:	da6d      	bge.n	8014ac0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x266>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 80149e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80149e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80149ea:	fb02 f303 	mul.w	r3, r2, r3
 80149ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149f0:	4413      	add	r3, r2
 80149f2:	627b      	str	r3, [r7, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80149f4:	2300      	movs	r3, #0
 80149f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80149f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80149fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149fc:	429a      	cmp	r2, r3
 80149fe:	da59      	bge.n	8014ab4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x25a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8014a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014a02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014a04:	fb02 f303 	mul.w	r3, r2, r3
 8014a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a0a:	4413      	add	r3, r2
 8014a0c:	623b      	str	r3, [r7, #32]

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8014a0e:	6a3b      	ldr	r3, [r7, #32]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	db0c      	blt.n	8014a2e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8014a14:	6a3a      	ldr	r2, [r7, #32]
 8014a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	da08      	bge.n	8014a2e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8014a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	db05      	blt.n	8014a2e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8014a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a26:	429a      	cmp	r2, r3
 8014a28:	da01      	bge.n	8014a2e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8014a2a:	2301      	movs	r3, #1
 8014a2c:	e000      	b.n	8014a30 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d6>
 8014a2e:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 8014a30:	77fb      	strb	r3, [r7, #31]
                  (in_y < input_height);

              if (!is_point_inside_image) {
 8014a32:	7ffb      	ldrb	r3, [r7, #31]
 8014a34:	f083 0301 	eor.w	r3, r3, #1
 8014a38:	b2db      	uxtb	r3, r3
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d135      	bne.n	8014aaa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x250>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8014a3e:	2300      	movs	r3, #0
 8014a40:	67bb      	str	r3, [r7, #120]	; 0x78
 8014a42:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a46:	429a      	cmp	r2, r3
 8014a48:	da30      	bge.n	8014aac <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x252>
                float input_value = input_data[Offset(input_shape, batch, in_y,
 8014a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014a4c:	9300      	str	r3, [sp, #0]
 8014a4e:	6a3b      	ldr	r3, [r7, #32]
 8014a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a52:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8014a56:	68b8      	ldr	r0, [r7, #8]
 8014a58:	f7fd fa72 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014a5c:	4603      	mov	r3, r0
                                                      in_x, in_channel)];
 8014a5e:	009b      	lsls	r3, r3, #2
 8014a60:	687a      	ldr	r2, [r7, #4]
 8014a62:	4413      	add	r3, r2
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	61bb      	str	r3, [r7, #24]
                float filter_value = filter_data[Offset(
 8014a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014a6a:	9300      	str	r3, [sp, #0]
 8014a6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014a6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014a72:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8014a76:	6838      	ldr	r0, [r7, #0]
 8014a78:	f7fd fa62 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014a7c:	4603      	mov	r3, r0
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 8014a7e:	009b      	lsls	r3, r3, #2
 8014a80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014a84:	4413      	add	r3, r2
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	617b      	str	r3, [r7, #20]
                total += (input_value * filter_value);
 8014a8a:	ed97 7a06 	vldr	s14, [r7, #24]
 8014a8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8014a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a96:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8014a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a9e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8014aa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014aa4:	3301      	adds	r3, #1
 8014aa6:	67bb      	str	r3, [r7, #120]	; 0x78
 8014aa8:	e7cb      	b.n	8014a42 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
                continue;
 8014aaa:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8014aac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014aae:	3301      	adds	r3, #1
 8014ab0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014ab2:	e7a1      	b.n	80149f8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8014ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014ab8:	3301      	adds	r3, #1
 8014aba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014abe:	e78c      	b.n	80149da <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x180>
              }
            }
          }
          float bias_value = 0.0f;
 8014ac0:	f04f 0300 	mov.w	r3, #0
 8014ac4:	677b      	str	r3, [r7, #116]	; 0x74
          if (bias_data) {
 8014ac6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d007      	beq.n	8014ade <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
            bias_value = bias_data[out_channel];
 8014ace:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014ad2:	009b      	lsls	r3, r3, #2
 8014ad4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014ad8:	4413      	add	r3, r2
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	677b      	str	r3, [r7, #116]	; 0x74
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 8014ade:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8014ae2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8014ae6:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8014aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014aee:	9300      	str	r3, [sp, #0]
 8014af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014af4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8014af8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8014afc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014b00:	f7fd fa1e 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014b04:	4603      	mov	r3, r0
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8014b0c:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 8014b0e:	ed97 1a15 	vldr	s2, [r7, #84]	; 0x54
 8014b12:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 8014b16:	eeb0 0a48 	vmov.f32	s0, s16
 8014b1a:	f7fd ff5a 	bl	80129d2 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8014b1e:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8014b22:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8014b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014b2a:	3301      	adds	r3, #1
 8014b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014b30:	e746      	b.n	80149c0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014b36:	3301      	adds	r3, #1
 8014b38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014b3c:	e72f      	b.n	801499e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014b3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014b42:	3301      	adds	r3, #1
 8014b44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014b48:	e718      	b.n	801497c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
  for (int batch = 0; batch < batches; ++batch) {
 8014b4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014b4e:	3301      	adds	r3, #1
 8014b50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014b54:	e709      	b.n	801496a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x110>
                                           output_activation_max);
        }
      }
    }
  }
}
 8014b56:	bf00      	nop
 8014b58:	379c      	adds	r7, #156	; 0x9c
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	ecbd 8b02 	vpop	{d8}
 8014b60:	bd90      	pop	{r4, r7, pc}

08014b62 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8014b62:	b590      	push	{r4, r7, lr}
 8014b64:	b0a9      	sub	sp, #164	; 0xa4
 8014b66:	af02      	add	r7, sp, #8
 8014b68:	60f8      	str	r0, [r7, #12]
 8014b6a:	60b9      	str	r1, [r7, #8]
 8014b6c:	607a      	str	r2, [r7, #4]
 8014b6e:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	695b      	ldr	r3, [r3, #20]
 8014b74:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8014b7c:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014b84:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8014b94:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014b9c:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014ba4:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_offset = params.output_offset;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	69db      	ldr	r3, [r3, #28]
 8014baa:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bb0:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bb6:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8014bb8:	69ba      	ldr	r2, [r7, #24]
 8014bba:	697b      	ldr	r3, [r7, #20]
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	dd01      	ble.n	8014bc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 8014bc0:	f010 fb55 	bl	802526e <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8014bc4:	6838      	ldr	r0, [r7, #0]
 8014bc6:	f7f7 fa0e 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	2b04      	cmp	r3, #4
 8014bce:	d001      	beq.n	8014bd4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 8014bd0:	f010 fb4d 	bl	802526e <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8014bd4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014bd8:	f7f7 fa05 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014bdc:	4603      	mov	r3, r0
 8014bde:	2b04      	cmp	r3, #4
 8014be0:	d001      	beq.n	8014be6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 8014be2:	f010 fb44 	bl	802526e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8014be6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014bea:	f7f7 f9fc 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	2b04      	cmp	r3, #4
 8014bf2:	d001      	beq.n	8014bf8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 8014bf4:	f010 fb3b 	bl	802526e <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8014bfe:	2100      	movs	r1, #0
 8014c00:	6838      	ldr	r0, [r7, #0]
 8014c02:	f7fd f9f5 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014c06:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8014c08:	2303      	movs	r3, #3
 8014c0a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8014c0e:	2103      	movs	r1, #3
 8014c10:	6838      	ldr	r0, [r7, #0]
 8014c12:	f7fd f9ed 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014c16:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8014c18:	2303      	movs	r3, #3
 8014c1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8014c1e:	2100      	movs	r1, #0
 8014c20:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014c24:	f7fd f9e4 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014c28:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 8014c2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d009      	beq.n	8014c46 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8014c32:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8014c36:	f7fc f94d 	bl	8010ed4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8014c3a:	4602      	mov	r2, r0
 8014c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c3e:	4293      	cmp	r3, r2
 8014c40:	d001      	beq.n	8014c46 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 8014c42:	f010 fb14 	bl	802526e <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 8014c46:	2101      	movs	r1, #1
 8014c48:	6838      	ldr	r0, [r7, #0]
 8014c4a:	f7fc f90b 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014c4e:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 8014c50:	2102      	movs	r1, #2
 8014c52:	6838      	ldr	r0, [r7, #0]
 8014c54:	f7fc f906 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014c58:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 8014c5a:	2101      	movs	r1, #1
 8014c5c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014c60:	f7fc f900 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014c64:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 8014c66:	2102      	movs	r1, #2
 8014c68:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014c6c:	f7fc f8fa 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014c70:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 8014c72:	2101      	movs	r1, #1
 8014c74:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014c78:	f7fc f8f4 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014c7c:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 8014c7e:	2102      	movs	r1, #2
 8014c80:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014c84:	f7fc f8ee 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014c88:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014c90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014c94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c96:	429a      	cmp	r2, r3
 8014c98:	f280 8113 	bge.w	8014ec2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x360>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014ca2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8014ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ca8:	429a      	cmp	r2, r3
 8014caa:	f280 8104 	bge.w	8014eb6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x354>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 8014cae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014cb2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014cb4:	fb02 f203 	mul.w	r2, r2, r3
 8014cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014cba:	1ad3      	subs	r3, r2, r3
 8014cbc:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014cc4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	f280 80ed 	bge.w	8014eaa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x348>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 8014cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014cd4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014cd6:	fb02 f203 	mul.w	r2, r2, r3
 8014cda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014cdc:	1ad3      	subs	r3, r2, r3
 8014cde:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014ce6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cec:	429a      	cmp	r2, r3
 8014cee:	f280 80d6 	bge.w	8014e9e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33c>
          int32_t acc = 0;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014cfc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d02:	429a      	cmp	r2, r3
 8014d04:	da76      	bge.n	8014df4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 8014d06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014d08:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014d0c:	fb02 f303 	mul.w	r3, r2, r3
 8014d10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d12:	4413      	add	r3, r2
 8014d14:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8014d16:	2300      	movs	r3, #0
 8014d18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014d1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d22:	429a      	cmp	r2, r3
 8014d24:	da60      	bge.n	8014de8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x286>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8014d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014d2c:	fb02 f303 	mul.w	r3, r2, r3
 8014d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d32:	4413      	add	r3, r2
 8014d34:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8014d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	db0c      	blt.n	8014d56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8014d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d40:	429a      	cmp	r2, r3
 8014d42:	da08      	bge.n	8014d56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8014d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	db05      	blt.n	8014d56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8014d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d4e:	429a      	cmp	r2, r3
 8014d50:	da01      	bge.n	8014d56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8014d52:	2301      	movs	r3, #1
 8014d54:	e000      	b.n	8014d58 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f6>
 8014d56:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 8014d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 8014d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d60:	f083 0301 	eor.w	r3, r3, #1
 8014d64:	b2db      	uxtb	r3, r3
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d137      	bne.n	8014dda <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014d6e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014d72:	429a      	cmp	r2, r3
 8014d74:	da32      	bge.n	8014ddc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27a>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 8014d76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014d78:	9300      	str	r3, [sp, #0]
 8014d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d7e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8014d82:	6838      	ldr	r0, [r7, #0]
 8014d84:	f7fd f8dc 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014d88:	4603      	mov	r3, r0
 8014d8a:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 8014d8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014d90:	4413      	add	r3, r2
 8014d92:	f993 3000 	ldrsb.w	r3, [r3]
 8014d96:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 8014d98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014d9a:	9300      	str	r3, [sp, #0]
 8014d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014da0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014da4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8014da8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014dac:	f7fd f8c8 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014db0:	4603      	mov	r3, r0
 8014db2:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 8014db4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014db8:	4413      	add	r3, r2
 8014dba:	f993 3000 	ldrsb.w	r3, [r3]
 8014dbe:	61fb      	str	r3, [r7, #28]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 8014dc0:	6a3a      	ldr	r2, [r7, #32]
 8014dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014dc4:	4413      	add	r3, r2
 8014dc6:	69fa      	ldr	r2, [r7, #28]
 8014dc8:	fb02 f203 	mul.w	r2, r2, r3
 8014dcc:	693b      	ldr	r3, [r7, #16]
 8014dce:	4413      	add	r3, r2
 8014dd0:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8014dd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014dd4:	3301      	adds	r3, #1
 8014dd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014dd8:	e7c9      	b.n	8014d6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
                continue;
 8014dda:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8014ddc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014de0:	3301      	adds	r3, #1
 8014de2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014de6:	e799      	b.n	8014d1c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ba>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8014de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014dec:	3301      	adds	r3, #1
 8014dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014df2:	e783      	b.n	8014cfc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
              }
            }
          }

          if (bias_data) {
 8014df4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d009      	beq.n	8014e10 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ae>
            acc += bias_data[out_channel];
 8014dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014e00:	009b      	lsls	r3, r3, #2
 8014e02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014e06:	4413      	add	r3, r2
 8014e08:	681a      	ldr	r2, [r3, #0]
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	4413      	add	r3, r2
 8014e0e:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 8014e10:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8014e12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014e16:	009b      	lsls	r3, r3, #2
 8014e18:	68ba      	ldr	r2, [r7, #8]
 8014e1a:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8014e1c:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8014e1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014e22:	009b      	lsls	r3, r3, #2
 8014e24:	687a      	ldr	r2, [r7, #4]
 8014e26:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	461a      	mov	r2, r3
 8014e2c:	f7fc f8aa 	bl	8010f84 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8014e30:	4603      	mov	r3, r0
 8014e32:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 8014e34:	693a      	ldr	r2, [r7, #16]
 8014e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e38:	4413      	add	r3, r2
 8014e3a:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 8014e3c:	f107 0218 	add.w	r2, r7, #24
 8014e40:	f107 0310 	add.w	r3, r7, #16
 8014e44:	4611      	mov	r1, r2
 8014e46:	4618      	mov	r0, r3
 8014e48:	f7f6 ff58 	bl	800bcfc <_ZSt3maxIlERKT_S2_S2_>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 8014e52:	f107 0214 	add.w	r2, r7, #20
 8014e56:	f107 0310 	add.w	r3, r7, #16
 8014e5a:	4611      	mov	r1, r2
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f7f6 ff39 	bl	800bcd4 <_ZSt3minIlERKT_S2_S2_>
 8014e62:	4603      	mov	r3, r0
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8014e68:	693c      	ldr	r4, [r7, #16]
 8014e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014e6e:	9300      	str	r3, [sp, #0]
 8014e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014e74:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8014e78:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8014e7c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014e80:	f7fd f85e 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014e84:	4603      	mov	r3, r0
 8014e86:	461a      	mov	r2, r3
 8014e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014e8c:	4413      	add	r3, r2
 8014e8e:	b262      	sxtb	r2, r4
 8014e90:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8014e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014e96:	3301      	adds	r3, #1
 8014e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014e9c:	e723      	b.n	8014ce6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014ea8:	e70c      	b.n	8014cc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014eaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014eae:	3301      	adds	r3, #1
 8014eb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014eb4:	e6f5      	b.n	8014ca2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 8014eb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014eba:	3301      	adds	r3, #1
 8014ebc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014ec0:	e6e6      	b.n	8014c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 8014ec2:	bf00      	nop
 8014ec4:	379c      	adds	r7, #156	; 0x9c
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd90      	pop	{r4, r7, pc}

08014eca <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8014eca:	b580      	push	{r7, lr}
 8014ecc:	b084      	sub	sp, #16
 8014ece:	af00      	add	r7, sp, #0
 8014ed0:	60f8      	str	r0, [r7, #12]
 8014ed2:	60b9      	str	r1, [r7, #8]
 8014ed4:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d101      	bne.n	8014ee2 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8014ede:	f010 f9c6 	bl	802526e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ee6:	2138      	movs	r1, #56	; 0x38
 8014ee8:	68f8      	ldr	r0, [r7, #12]
 8014eea:	4798      	blx	r3
 8014eec:	4603      	mov	r3, r0
}
 8014eee:	4618      	mov	r0, r3
 8014ef0:	3710      	adds	r7, #16
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bd80      	pop	{r7, pc}
	...

08014ef8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8014ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014efa:	b0b7      	sub	sp, #220	; 0xdc
 8014efc:	af08      	add	r7, sp, #32
 8014efe:	60f8      	str	r0, [r7, #12]
 8014f00:	60b9      	str	r1, [r7, #8]
  TFLITE_DCHECK(node->user_data != nullptr);
 8014f02:	68bb      	ldr	r3, [r7, #8]
 8014f04:	691b      	ldr	r3, [r3, #16]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d101      	bne.n	8014f0e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8014f0a:	f010 f9b0 	bl	802526e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	695b      	ldr	r3, [r3, #20]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d101      	bne.n	8014f1a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8014f16:	f010 f9aa 	bl	802526e <abort>

  int32_t buf_size = 0;
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const auto& params =
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	695b      	ldr	r3, [r3, #20]
 8014f24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  OpData* data = static_cast<OpData*>(node->user_data);
 8014f28:	68bb      	ldr	r3, [r7, #8]
 8014f2a:	691b      	ldr	r3, [r3, #16]
 8014f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 8014f30:	4ba5      	ldr	r3, [pc, #660]	; (80151c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	461a      	mov	r2, r3
 8014f36:	68b9      	ldr	r1, [r7, #8]
 8014f38:	68f8      	ldr	r0, [r7, #12]
 8014f3a:	f7f6 fa93 	bl	800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014f3e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 8014f42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d10a      	bne.n	8014f60 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	695c      	ldr	r4, [r3, #20]
 8014f4e:	4b9f      	ldr	r3, [pc, #636]	; (80151cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 8014f50:	9300      	str	r3, [sp, #0]
 8014f52:	2338      	movs	r3, #56	; 0x38
 8014f54:	4a9e      	ldr	r2, [pc, #632]	; (80151d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 8014f56:	499f      	ldr	r1, [pc, #636]	; (80151d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 8014f58:	68f8      	ldr	r0, [r7, #12]
 8014f5a:	47a0      	blx	r4
 8014f5c:	2401      	movs	r4, #1
 8014f5e:	e12d      	b.n	80151bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 8014f60:	4b9d      	ldr	r3, [pc, #628]	; (80151d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	461a      	mov	r2, r3
 8014f66:	68b9      	ldr	r1, [r7, #8]
 8014f68:	68f8      	ldr	r0, [r7, #12]
 8014f6a:	f7f6 fa7b 	bl	800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014f6e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  TF_LITE_ENSURE(context, filter != nullptr);
 8014f72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d10a      	bne.n	8014f90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x98>
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	695c      	ldr	r4, [r3, #20]
 8014f7e:	4b97      	ldr	r3, [pc, #604]	; (80151dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 8014f80:	9300      	str	r3, [sp, #0]
 8014f82:	233a      	movs	r3, #58	; 0x3a
 8014f84:	4a92      	ldr	r2, [pc, #584]	; (80151d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 8014f86:	4993      	ldr	r1, [pc, #588]	; (80151d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 8014f88:	68f8      	ldr	r0, [r7, #12]
 8014f8a:	47a0      	blx	r4
 8014f8c:	2401      	movs	r4, #1
 8014f8e:	e115      	b.n	80151bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 8014f90:	4b93      	ldr	r3, [pc, #588]	; (80151e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	461a      	mov	r2, r3
 8014f96:	68b9      	ldr	r1, [r7, #8]
 8014f98:	68f8      	ldr	r0, [r7, #12]
 8014f9a:	f7f6 fa73 	bl	800b484 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8014f9e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TF_LITE_ENSURE(context, output != nullptr);
 8014fa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d10a      	bne.n	8014fc0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	695c      	ldr	r4, [r3, #20]
 8014fae:	4b8d      	ldr	r3, [pc, #564]	; (80151e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8014fb0:	9300      	str	r3, [sp, #0]
 8014fb2:	233c      	movs	r3, #60	; 0x3c
 8014fb4:	4a86      	ldr	r2, [pc, #536]	; (80151d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 8014fb6:	4987      	ldr	r1, [pc, #540]	; (80151d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 8014fb8:	68f8      	ldr	r0, [r7, #12]
 8014fba:	47a0      	blx	r4
 8014fbc:	2401      	movs	r4, #1
 8014fbe:	e0fd      	b.n	80151bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>

  RuntimeShape input_shape = GetTensorShape(input);
 8014fc0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014fc4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f7f7 f870 	bl	800c0ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 8014fce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014fd2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f7f7 f869 	bl	800c0ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 8014fdc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8014fe0:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	2100      	movs	r1, #0
 8014fe8:	f7fd f802 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014fec:	4603      	mov	r3, r0
 8014fee:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.h = input->dims->data[1];
 8014ff0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014ff4:	689b      	ldr	r3, [r3, #8]
 8014ff6:	689b      	ldr	r3, [r3, #8]
 8014ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.w = input->dims->data[2];
 8014ffa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014ffe:	689b      	ldr	r3, [r3, #8]
 8015000:	68db      	ldr	r3, [r3, #12]
 8015002:	663b      	str	r3, [r7, #96]	; 0x60
  input_dims.c = input_shape.Dims(3);
 8015004:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015008:	2103      	movs	r1, #3
 801500a:	4618      	mov	r0, r3
 801500c:	f7fb ff2a 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015010:	4603      	mov	r3, r0
 8015012:	667b      	str	r3, [r7, #100]	; 0x64

  // Initialize cmsis_nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
 8015014:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015018:	2103      	movs	r1, #3
 801501a:	4618      	mov	r0, r3
 801501c:	f7fb ff22 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015020:	4603      	mov	r3, r0
 8015022:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.h = filter->dims->data[1];
 8015024:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015028:	689b      	ldr	r3, [r3, #8]
 801502a:	689b      	ldr	r3, [r3, #8]
 801502c:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.w = filter->dims->data[2];
 801502e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015032:	689b      	ldr	r3, [r3, #8]
 8015034:	68db      	ldr	r3, [r3, #12]
 8015036:	653b      	str	r3, [r7, #80]	; 0x50
  filter_dims.c = input_dims.c;
 8015038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801503a:	657b      	str	r3, [r7, #84]	; 0x54

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
 801503c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801503e:	63bb      	str	r3, [r7, #56]	; 0x38
  output_dims.h = output->dims->data[1];
 8015040:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015044:	689b      	ldr	r3, [r3, #8]
 8015046:	689b      	ldr	r3, [r3, #8]
 8015048:	63fb      	str	r3, [r7, #60]	; 0x3c
  output_dims.w = output->dims->data[2];
 801504a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801504e:	689b      	ldr	r3, [r3, #8]
 8015050:	68db      	ldr	r3, [r3, #12]
 8015052:	643b      	str	r3, [r7, #64]	; 0x40
  output_dims.c = output_shape.Dims(3);
 8015054:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015058:	2103      	movs	r1, #3
 801505a:	4618      	mov	r0, r3
 801505c:	f7fb ff02 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015060:	4603      	mov	r3, r0
 8015062:	647b      	str	r3, [r7, #68]	; 0x44

  if (input->type == kTfLiteInt8) {
 8015064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015068:	781b      	ldrb	r3, [r3, #0]
 801506a:	2b09      	cmp	r3, #9
 801506c:	d121      	bne.n	80150b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ba>
    const int num_channels = filter->dims->data[kConvQuantizedDimension];
 801506e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015072:	689a      	ldr	r2, [r3, #8]
 8015074:	4b5c      	ldr	r3, [pc, #368]	; (80151e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	009b      	lsls	r3, r3, #2
 801507a:	4413      	add	r3, r2
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    data->reference_op_data.per_channel_output_multiplier =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 8015086:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 801508a:	0092      	lsls	r2, r2, #2
 801508c:	4611      	mov	r1, r2
 801508e:	68f8      	ldr	r0, [r7, #12]
 8015090:	4798      	blx	r3
 8015092:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_multiplier =
 8015094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015098:	625a      	str	r2, [r3, #36]	; 0x24
    data->reference_op_data.per_channel_output_shift =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 801509e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 80150a2:	0092      	lsls	r2, r2, #2
 80150a4:	4611      	mov	r1, r2
 80150a6:	68f8      	ldr	r0, [r7, #12]
 80150a8:	4798      	blx	r3
 80150aa:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_shift =
 80150ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80150b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 80150b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80150b4:	607b      	str	r3, [r7, #4]
 80150b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80150b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80150ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80150bc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80150be:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80150c0:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 80150c4:	782d      	ldrb	r5, [r5, #0]
 80150c6:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 80150ca:	9606      	str	r6, [sp, #24]
 80150cc:	9505      	str	r5, [sp, #20]
 80150ce:	9404      	str	r4, [sp, #16]
 80150d0:	9003      	str	r0, [sp, #12]
 80150d2:	9102      	str	r1, [sp, #8]
 80150d4:	9201      	str	r2, [sp, #4]
 80150d6:	9300      	str	r3, [sp, #0]
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80150de:	68b9      	ldr	r1, [r7, #8]
 80150e0:	68f8      	ldr	r0, [r7, #12]
 80150e2:	f7fd f907 	bl	80122f4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 80150e6:	4603      	mov	r3, r0
 80150e8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 80150ec:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d002      	beq.n	80150fa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x202>
 80150f4:	f897 409b 	ldrb.w	r4, [r7, #155]	; 0x9b
 80150f8:	e056      	b.n	80151a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 80150fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80150fe:	781b      	ldrb	r3, [r3, #0]
 8015100:	2b09      	cmp	r3, #9
 8015102:	d150      	bne.n	80151a6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ae>
    // Initialize cmsis_nn convolution parameters
    cmsis_nn_conv_params conv_params;
    conv_params.input_offset = -input->params.zero_point;
 8015104:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015108:	691b      	ldr	r3, [r3, #16]
 801510a:	425b      	negs	r3, r3
 801510c:	613b      	str	r3, [r7, #16]
    conv_params.output_offset = output->params.zero_point;
 801510e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015112:	691b      	ldr	r3, [r3, #16]
 8015114:	617b      	str	r3, [r7, #20]
    conv_params.stride.h = params.stride_height;
 8015116:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801511a:	689b      	ldr	r3, [r3, #8]
 801511c:	61fb      	str	r3, [r7, #28]
    conv_params.stride.w = params.stride_width;
 801511e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8015122:	685b      	ldr	r3, [r3, #4]
 8015124:	61bb      	str	r3, [r7, #24]
    conv_params.dilation.h = params.dilation_height_factor;
 8015126:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801512a:	695b      	ldr	r3, [r3, #20]
 801512c:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_params.dilation.w = params.dilation_width_factor;
 801512e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8015132:	691b      	ldr	r3, [r3, #16]
 8015134:	62bb      	str	r3, [r7, #40]	; 0x28
    conv_params.padding.h = data->reference_op_data.padding.height;
 8015136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801513a:	685b      	ldr	r3, [r3, #4]
 801513c:	627b      	str	r3, [r7, #36]	; 0x24
    conv_params.padding.w = data->reference_op_data.padding.width;
 801513e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	623b      	str	r3, [r7, #32]
    conv_params.activation.min = data->reference_op_data.output_activation_min;
 8015146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801514c:	633b      	str	r3, [r7, #48]	; 0x30
    conv_params.activation.max = data->reference_op_data.output_activation_max;
 801514e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015154:	637b      	str	r3, [r7, #52]	; 0x34

    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 8015156:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801515a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801515e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8015162:	f107 0010 	add.w	r0, r7, #16
 8015166:	f004 f92d 	bl	80193c4 <arm_convolve_wrapper_s8_get_buffer_size>
 801516a:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
        &conv_params, &input_dims, &filter_dims, &output_dims);
    if (buf_size > 0) {
 801516e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015172:	2b00      	cmp	r3, #0
 8015174:	dd12      	ble.n	801519c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801517a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801517e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8015182:	3234      	adds	r2, #52	; 0x34
 8015184:	68f8      	ldr	r0, [r7, #12]
 8015186:	4798      	blx	r3
 8015188:	4603      	mov	r3, r0
 801518a:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 801518e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8015192:	2b00      	cmp	r3, #0
 8015194:	d007      	beq.n	80151a6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ae>
 8015196:	f897 409a 	ldrb.w	r4, [r7, #154]	; 0x9a
 801519a:	e005      	b.n	80151a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 801519c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80151a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80151a4:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  return kTfLiteOk;
 80151a6:	2400      	movs	r4, #0
  RuntimeShape output_shape = GetTensorShape(output);
 80151a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80151ac:	4618      	mov	r0, r3
 80151ae:	f7f6 ff04 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
 80151b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80151b6:	4618      	mov	r0, r3
 80151b8:	f7f6 feff 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
 80151bc:	4623      	mov	r3, r4
}
 80151be:	4618      	mov	r0, r3
 80151c0:	37bc      	adds	r7, #188	; 0xbc
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151c6:	bf00      	nop
 80151c8:	0802c5ac 	.word	0x0802c5ac
 80151cc:	0802b480 	.word	0x0802b480
 80151d0:	0802b424 	.word	0x0802b424
 80151d4:	0802b468 	.word	0x0802b468
 80151d8:	0802c5b0 	.word	0x0802c5b0
 80151dc:	0802b494 	.word	0x0802b494
 80151e0:	0802c5b8 	.word	0x0802c5b8
 80151e4:	0802b4a8 	.word	0x0802b4a8
 80151e8:	0802c5bc 	.word	0x0802c5bc

080151ec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>:

TfLiteStatus EvalQuantizedPerChannel(
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
 80151ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151ee:	b0ef      	sub	sp, #444	; 0x1bc
 80151f0:	af08      	add	r7, sp, #32
 80151f2:	f107 0414 	add.w	r4, r7, #20
 80151f6:	6020      	str	r0, [r4, #0]
 80151f8:	f107 0010 	add.w	r0, r7, #16
 80151fc:	6001      	str	r1, [r0, #0]
 80151fe:	f107 010c 	add.w	r1, r7, #12
 8015202:	600a      	str	r2, [r1, #0]
 8015204:	f107 0208 	add.w	r2, r7, #8
 8015208:	6013      	str	r3, [r2, #0]
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
 801520a:	f107 030c 	add.w	r3, r7, #12
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	695b      	ldr	r3, [r3, #20]
 8015212:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  conv_params.dilation.w = params.dilation_width_factor;
 8015216:	f107 030c 	add.w	r3, r7, #12
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	691b      	ldr	r3, [r3, #16]
 801521e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 8015222:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015226:	2b01      	cmp	r3, #1
 8015228:	f040 818a 	bne.w	8015540 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x354>
 801522c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015230:	2b01      	cmp	r3, #1
 8015232:	f040 8185 	bne.w	8015540 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x354>
    // Initialize cmsis_nn convolution parameters
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 8015236:	f107 0308 	add.w	r3, r7, #8
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	691b      	ldr	r3, [r3, #16]
 801523e:	425b      	negs	r3, r3
 8015240:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 8015244:	f107 0308 	add.w	r3, r7, #8
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	699b      	ldr	r3, [r3, #24]
 801524c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    conv_params.stride.h = params.stride_height;
 8015250:	f107 030c 	add.w	r3, r7, #12
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	689b      	ldr	r3, [r3, #8]
 8015258:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    conv_params.stride.w = params.stride_width;
 801525c:	f107 030c 	add.w	r3, r7, #12
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	685b      	ldr	r3, [r3, #4]
 8015264:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    conv_params.padding.h = data.reference_op_data.padding.height;
 8015268:	f107 0308 	add.w	r3, r7, #8
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	685b      	ldr	r3, [r3, #4]
 8015270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    conv_params.padding.w = data.reference_op_data.padding.width;
 8015274:	f107 0308 	add.w	r3, r7, #8
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    conv_params.activation.min = data.reference_op_data.output_activation_min;
 8015280:	f107 0308 	add.w	r3, r7, #8
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015288:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 801528c:	f107 0308 	add.w	r3, r7, #8
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015294:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    // Initialize cmsis_nn per channel quantization parameters
    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier = const_cast<int32_t*>(
        data.reference_op_data.per_channel_output_multiplier);
 8015298:	f107 0308 	add.w	r3, r7, #8
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier = const_cast<int32_t*>(
 80152a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift =
        const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);
 80152a4:	f107 0308 	add.w	r3, r7, #8
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    quant_params.shift =
 80152ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80152b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80152b4:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 80152b8:	4618      	mov	r0, r3
 80152ba:	f7fd fb52 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80152be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80152c2:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 80152c6:	4618      	mov	r0, r3
 80152c8:	f7fd fb4b 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80152cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80152d0:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80152d4:	4618      	mov	r0, r3
 80152d6:	f7fd fb44 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 80152da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80152de:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 80152e2:	4618      	mov	r0, r3
 80152e4:	f7fd fb3d 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    // Consistency check.
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 80152e8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80152ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80152f0:	429a      	cmp	r2, r3
 80152f2:	dd01      	ble.n	80152f8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x10c>
 80152f4:	f00f ffbb 	bl	802526e <abort>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80152f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80152fc:	4618      	mov	r0, r3
 80152fe:	f7f6 fe72 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015302:	4603      	mov	r3, r0
 8015304:	2b04      	cmp	r3, #4
 8015306:	d001      	beq.n	801530c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x120>
 8015308:	f00f ffb1 	bl	802526e <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 801530c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015310:	4618      	mov	r0, r3
 8015312:	f7f6 fe68 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015316:	4603      	mov	r3, r0
 8015318:	2b04      	cmp	r3, #4
 801531a:	d001      	beq.n	8015320 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x134>
 801531c:	f00f ffa7 	bl	802526e <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8015320:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015324:	4618      	mov	r0, r3
 8015326:	f7f6 fe5e 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801532a:	4603      	mov	r3, r0
 801532c:	2b04      	cmp	r3, #4
 801532e:	d001      	beq.n	8015334 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x148>
 8015330:	f00f ff9d 	bl	802526e <abort>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 8015334:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8015338:	f107 0094 	add.w	r0, r7, #148	; 0x94
 801533c:	2300      	movs	r3, #0
 801533e:	2100      	movs	r1, #0
 8015340:	f7fc fe56 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015344:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8015348:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801534c:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8015350:	2303      	movs	r3, #3
 8015352:	2103      	movs	r1, #3
 8015354:	f7fc fe4c 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015358:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 801535c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8015360:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8015364:	2303      	movs	r3, #3
 8015366:	2100      	movs	r1, #0
 8015368:	f7fc fe42 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801536c:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 8015370:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8015374:	f7fc fb48 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8015378:	4603      	mov	r3, r0
 801537a:	2b00      	cmp	r3, #0
 801537c:	bf14      	ite	ne
 801537e:	2301      	movne	r3, #1
 8015380:	2300      	moveq	r3, #0
 8015382:	b2db      	uxtb	r3, r3
 8015384:	2b00      	cmp	r3, #0
 8015386:	d00b      	beq.n	80153a0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x1b4>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8015388:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801538c:	4618      	mov	r0, r3
 801538e:	f7fb fda1 	bl	8010ed4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8015392:	4602      	mov	r2, r0
 8015394:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015398:	4293      	cmp	r3, r2
 801539a:	d001      	beq.n	80153a0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x1b4>
 801539c:	f00f ff67 	bl	802526e <abort>
    }

    // Initialize cmsis_nn dimensions
    // Input
    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 80153a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80153a4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80153a8:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 80153aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80153ae:	2101      	movs	r1, #1
 80153b0:	4618      	mov	r0, r3
 80153b2:	f7fb fd57 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 80153b6:	4602      	mov	r2, r0
 80153b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80153bc:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 80153be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80153c2:	2102      	movs	r1, #2
 80153c4:	4618      	mov	r0, r3
 80153c6:	f7fb fd4d 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 80153ca:	4602      	mov	r2, r0
 80153cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80153d0:	609a      	str	r2, [r3, #8]
    input_dims.c = input_depth;
 80153d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80153d6:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80153da:	60da      	str	r2, [r3, #12]

    // Filter
    cmsis_nn_dims filter_dims;
    filter_dims.n = output_depth;
 80153dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80153e0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80153e4:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 80153e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80153ea:	2101      	movs	r1, #1
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7fb fd39 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 80153f2:	4602      	mov	r2, r0
 80153f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80153f8:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 80153fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80153fe:	2102      	movs	r1, #2
 8015400:	4618      	mov	r0, r3
 8015402:	f7fb fd2f 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015406:	4602      	mov	r2, r0
 8015408:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801540c:	609a      	str	r2, [r3, #8]
    filter_dims.c = input_depth;
 801540e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015412:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8015416:	60da      	str	r2, [r3, #12]

    // Bias
    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 8015418:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801541c:	2201      	movs	r2, #1
 801541e:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 8015420:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015424:	2201      	movs	r2, #1
 8015426:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 8015428:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801542c:	2201      	movs	r2, #1
 801542e:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 8015430:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015434:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8015438:	60da      	str	r2, [r3, #12]

    // Output
    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 801543a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801543e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8015442:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 8015444:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015448:	2101      	movs	r1, #1
 801544a:	4618      	mov	r0, r3
 801544c:	f7fb fd0a 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015450:	4602      	mov	r2, r0
 8015452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015456:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 8015458:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801545c:	2102      	movs	r1, #2
 801545e:	4618      	mov	r0, r3
 8015460:	f7fb fd00 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015464:	4602      	mov	r2, r0
 8015466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801546a:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 801546c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015470:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8015474:	60da      	str	r2, [r3, #12]

    // Initialize cmsis_nn context
    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 8015476:	f107 031c 	add.w	r3, r7, #28
 801547a:	2200      	movs	r2, #0
 801547c:	601a      	str	r2, [r3, #0]
    ctx.size = 0;
 801547e:	f107 031c 	add.w	r3, r7, #28
 8015482:	2200      	movs	r2, #0
 8015484:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 8015486:	f107 0308 	add.w	r3, r7, #8
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801548e:	2b00      	cmp	r3, #0
 8015490:	db0f      	blt.n	80154b2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x2c6>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8015492:	f107 0314 	add.w	r3, r7, #20
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801549a:	f107 0208 	add.w	r2, r7, #8
 801549e:	6812      	ldr	r2, [r2, #0]
 80154a0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80154a2:	f107 0214 	add.w	r2, r7, #20
 80154a6:	6810      	ldr	r0, [r2, #0]
 80154a8:	4798      	blx	r3
 80154aa:	4602      	mov	r2, r0
 80154ac:	f107 031c 	add.w	r3, r7, #28
 80154b0:	601a      	str	r2, [r3, #0]
      // arm_convolve_wrapper_s8_get_buffer_size
    }

    // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
    // the parameters passed
    TFLITE_DCHECK_EQ(
 80154b2:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 80154b6:	f7fc faa7 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80154ba:	4605      	mov	r5, r0
 80154bc:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 80154c0:	f7fc faa2 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80154c4:	4606      	mov	r6, r0
 80154c6:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80154ca:	f7fc fd1e 	bl	8011f0a <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80154ce:	6078      	str	r0, [r7, #4]
 80154d0:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80154d4:	f7fc faa7 	bl	8011a26 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80154d8:	4603      	mov	r3, r0
 80154da:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80154de:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80154e2:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80154e6:	f107 001c 	add.w	r0, r7, #28
 80154ea:	9306      	str	r3, [sp, #24]
 80154ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80154f0:	9305      	str	r3, [sp, #20]
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	9304      	str	r3, [sp, #16]
 80154f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80154fa:	9303      	str	r3, [sp, #12]
 80154fc:	9602      	str	r6, [sp, #8]
 80154fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015502:	9301      	str	r3, [sp, #4]
 8015504:	9500      	str	r5, [sp, #0]
 8015506:	4623      	mov	r3, r4
 8015508:	f003 fedc 	bl	80192c4 <arm_convolve_wrapper_s8>
 801550c:	4603      	mov	r3, r0
 801550e:	2b00      	cmp	r3, #0
 8015510:	d001      	beq.n	8015516 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x32a>
 8015512:	f00f feac 	bl	802526e <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 8015516:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801551a:	4618      	mov	r0, r3
 801551c:	f7f6 fd4d 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8015520:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015524:	4618      	mov	r0, r3
 8015526:	f7f6 fd48 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801552a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801552e:	4618      	mov	r0, r3
 8015530:	f7f6 fd43 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8015534:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015538:	4618      	mov	r0, r3
 801553a:	f7f6 fd3e 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 801553e:	e06d      	b.n	801561c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x430>
  } else {
    reference_integer_ops::ConvPerChannel(
        ConvParamsQuantized(params, data.reference_op_data),
 8015540:	f107 0308 	add.w	r3, r7, #8
 8015544:	681a      	ldr	r2, [r3, #0]
 8015546:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 801554a:	f107 030c 	add.w	r3, r7, #12
 801554e:	6819      	ldr	r1, [r3, #0]
 8015550:	f7fc fe7f 	bl	8012252 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 8015554:	f107 0308 	add.w	r3, r7, #8
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 801555c:	f107 0308 	add.w	r3, r7, #8
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 8015564:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8015568:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 801556c:	4618      	mov	r0, r3
 801556e:	f7fd f9f8 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 8015572:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8015576:	f7fc fa47 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801557a:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 801557c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8015580:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8015584:	4618      	mov	r0, r3
 8015586:	f7fd f9ec 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 801558a:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 801558e:	f7fc fa3b 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8015592:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 8015594:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8015598:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 801559c:	4618      	mov	r0, r3
 801559e:	f7fd f9e0 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 80155a2:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80155a6:	f7fc fcb0 	bl	8011f0a <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80155aa:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 80155ac:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80155b0:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80155b4:	4618      	mov	r0, r3
 80155b6:	f7fd f9d4 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 80155ba:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80155be:	f7fc fa32 	bl	8011a26 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80155c2:	4603      	mov	r3, r0
 80155c4:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 80155c8:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80155cc:	9306      	str	r3, [sp, #24]
 80155ce:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80155d2:	9305      	str	r3, [sp, #20]
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	9304      	str	r3, [sp, #16]
 80155d8:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80155dc:	9303      	str	r3, [sp, #12]
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	9302      	str	r3, [sp, #8]
 80155e2:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80155e6:	9301      	str	r3, [sp, #4]
 80155e8:	9600      	str	r6, [sp, #0]
 80155ea:	4613      	mov	r3, r2
 80155ec:	462a      	mov	r2, r5
 80155ee:	4621      	mov	r1, r4
 80155f0:	f7ff fab7 	bl	8014b62 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 80155f4:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80155f8:	4618      	mov	r0, r3
 80155fa:	f7f6 fcde 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 80155fe:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8015602:	4618      	mov	r0, r3
 8015604:	f7f6 fcd9 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 8015608:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801560c:	4618      	mov	r0, r3
 801560e:	f7f6 fcd4 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 8015612:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8015616:	4618      	mov	r0, r3
 8015618:	f7f6 fccf 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
 801561c:	2300      	movs	r3, #0
}
 801561e:	4618      	mov	r0, r3
 8015620:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8015624:	46bd      	mov	sp, r7
 8015626:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015628 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8015628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801562c:	b0bc      	sub	sp, #240	; 0xf0
 801562e:	af08      	add	r7, sp, #32
 8015630:	6078      	str	r0, [r7, #4]
 8015632:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 8015634:	4b8b      	ldr	r3, [pc, #556]	; (8015864 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>)
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	461a      	mov	r2, r3
 801563a:	6839      	ldr	r1, [r7, #0]
 801563c:	6878      	ldr	r0, [r7, #4]
 801563e:	f7fb fce5 	bl	801100c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015642:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 8015646:	4b88      	ldr	r3, [pc, #544]	; (8015868 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	461a      	mov	r2, r3
 801564c:	6839      	ldr	r1, [r7, #0]
 801564e:	6878      	ldr	r0, [r7, #4]
 8015650:	f7fb fcdc 	bl	801100c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015654:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 8015658:	6838      	ldr	r0, [r7, #0]
 801565a:	f7fc fc3c 	bl	8011ed6 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801565e:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 8015660:	2b03      	cmp	r3, #3
 8015662:	d108      	bne.n	8015676 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4e>
 8015664:	4b81      	ldr	r3, [pc, #516]	; (801586c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	461a      	mov	r2, r3
 801566a:	6839      	ldr	r1, [r7, #0]
 801566c:	6878      	ldr	r0, [r7, #4]
 801566e:	f7fb fccd 	bl	801100c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015672:	4603      	mov	r3, r0
 8015674:	e000      	b.n	8015678 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x50>
 8015676:	2300      	movs	r3, #0
          : nullptr;
 8015678:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 801567c:	4b7c      	ldr	r3, [pc, #496]	; (8015870 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x248>)
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	461a      	mov	r2, r3
 8015682:	6839      	ldr	r1, [r7, #0]
 8015684:	6878      	ldr	r0, [r7, #4]
 8015686:	f7fb fcd1 	bl	801102c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801568a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

  TFLITE_DCHECK(node->builtin_data != nullptr);
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	695b      	ldr	r3, [r3, #20]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d101      	bne.n	801569a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
 8015696:	f00f fdea 	bl	802526e <abort>
  const auto& params =
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	695b      	ldr	r3, [r3, #20]
 801569e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	691b      	ldr	r3, [r3, #16]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d101      	bne.n	80156ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
 80156aa:	f00f fde0 	bl	802526e <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 80156ae:	683b      	ldr	r3, [r7, #0]
 80156b0:	691b      	ldr	r3, [r3, #16]
 80156b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 80156b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80156ba:	7a1a      	ldrb	r2, [r3, #8]
 80156bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80156c0:	7a1b      	ldrb	r3, [r3, #8]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d016      	beq.n	80156f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	695c      	ldr	r4, [r3, #20]
 80156ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80156ce:	7a1b      	ldrb	r3, [r3, #8]
 80156d0:	461a      	mov	r2, r3
 80156d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80156d6:	7a1b      	ldrb	r3, [r3, #8]
 80156d8:	9303      	str	r3, [sp, #12]
 80156da:	9202      	str	r2, [sp, #8]
 80156dc:	4b65      	ldr	r3, [pc, #404]	; (8015874 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24c>)
 80156de:	9301      	str	r3, [sp, #4]
 80156e0:	4b65      	ldr	r3, [pc, #404]	; (8015878 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>)
 80156e2:	9300      	str	r3, [sp, #0]
 80156e4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80156e8:	4a64      	ldr	r2, [pc, #400]	; (801587c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>)
 80156ea:	4965      	ldr	r1, [pc, #404]	; (8015880 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>)
 80156ec:	6878      	ldr	r0, [r7, #4]
 80156ee:	47a0      	blx	r4
 80156f0:	2301      	movs	r3, #1
 80156f2:	e0b1      	b.n	8015858 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 80156f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80156f8:	7a1a      	ldrb	r2, [r3, #8]
 80156fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80156fe:	7a1b      	ldrb	r3, [r3, #8]
 8015700:	429a      	cmp	r2, r3
 8015702:	d006      	beq.n	8015712 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	695b      	ldr	r3, [r3, #20]
 8015708:	495e      	ldr	r1, [pc, #376]	; (8015884 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25c>)
 801570a:	6878      	ldr	r0, [r7, #4]
 801570c:	4798      	blx	r3
 801570e:	2301      	movs	r3, #1
 8015710:	e0a2      	b.n	8015858 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
                     "Hybrid models are not supported on TFLite Micro.");

  switch (input->type) {  // Already know in/out types are same.
 8015712:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015716:	7a1b      	ldrb	r3, [r3, #8]
 8015718:	2b01      	cmp	r3, #1
 801571a:	d002      	beq.n	8015722 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 801571c:	2b09      	cmp	r3, #9
 801571e:	d073      	beq.n	8015808 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>
 8015720:	e08a      	b.n	8015838 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x210>
    case kTfLiteFloat32: {
      tflite::reference_ops::Conv(
          ConvParamsFloat(params, data.reference_op_data),
 8015722:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8015726:	f107 0308 	add.w	r3, r7, #8
 801572a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 801572e:	4618      	mov	r0, r3
 8015730:	f7fc fd53 	bl	80121da <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
 8015734:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015738:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801573c:	4618      	mov	r0, r3
 801573e:	f7fd f910 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8015742:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8015746:	f7fc f93f 	bl	80119c8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801574a:	4680      	mov	r8, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 801574c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015750:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8015754:	4618      	mov	r0, r3
 8015756:	f7fd f904 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 801575a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801575e:	f7fc f933 	bl	80119c8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8015762:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 8015764:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015768:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 801576c:	4618      	mov	r0, r3
 801576e:	f7fd f8f8 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8015772:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8015776:	f7fc f927 	bl	80119c8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801577a:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 801577c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8015780:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8015784:	4618      	mov	r0, r3
 8015786:	f7fd f8ec 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 801578a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801578e:	f7fc f92a 	bl	80119e6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8015792:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(output),
          tflite::micro::GetTensorShape(nullptr), nullptr);
 8015794:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015798:	2100      	movs	r1, #0
 801579a:	4618      	mov	r0, r3
 801579c:	f7fd f8e1 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 80157a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80157a4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80157a8:	f107 0008 	add.w	r0, r7, #8
 80157ac:	2300      	movs	r3, #0
 80157ae:	9306      	str	r3, [sp, #24]
 80157b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80157b4:	9305      	str	r3, [sp, #20]
 80157b6:	9604      	str	r6, [sp, #16]
 80157b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80157bc:	9303      	str	r3, [sp, #12]
 80157be:	9502      	str	r5, [sp, #8]
 80157c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80157c4:	9301      	str	r3, [sp, #4]
 80157c6:	9400      	str	r4, [sp, #0]
 80157c8:	4613      	mov	r3, r2
 80157ca:	4642      	mov	r2, r8
 80157cc:	f7ff f845 	bl	801485a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
          tflite::micro::GetTensorShape(nullptr), nullptr);
 80157d0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80157d4:	4618      	mov	r0, r3
 80157d6:	f7f6 fbf0 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
 80157da:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80157de:	4618      	mov	r0, r3
 80157e0:	f7f6 fbeb 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 80157e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80157e8:	4618      	mov	r0, r3
 80157ea:	f7f6 fbe6 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 80157ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7f6 fbe1 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 80157f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80157fc:	4618      	mov	r0, r3
 80157fe:	f7f6 fbdc 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8015802:	bf00      	nop
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
 8015804:	2300      	movs	r3, #0
 8015806:	e027      	b.n	8015858 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
 8015808:	2300      	movs	r3, #0
 801580a:	9304      	str	r3, [sp, #16]
 801580c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015810:	9303      	str	r3, [sp, #12]
 8015812:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015816:	9302      	str	r3, [sp, #8]
 8015818:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801581c:	9301      	str	r3, [sp, #4]
 801581e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015822:	9300      	str	r3, [sp, #0]
 8015824:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015828:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801582c:	6839      	ldr	r1, [r7, #0]
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	f7ff fcdc 	bl	80151ec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>
 8015834:	4603      	mov	r3, r0
                                     bias, output, nullptr);
 8015836:	e00f      	b.n	8015858 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	695c      	ldr	r4, [r3, #20]
 801583c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015840:	7a1b      	ldrb	r3, [r3, #8]
 8015842:	4618      	mov	r0, r3
 8015844:	f7f2 ffaa 	bl	800879c <TfLiteTypeGetName>
 8015848:	4602      	mov	r2, r0
 801584a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801584e:	7a1b      	ldrb	r3, [r3, #8]
 8015850:	490d      	ldr	r1, [pc, #52]	; (8015888 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x260>)
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	47a0      	blx	r4
      return kTfLiteError;
 8015856:	2301      	movs	r3, #1
}
 8015858:	4618      	mov	r0, r3
 801585a:	37d0      	adds	r7, #208	; 0xd0
 801585c:	46bd      	mov	sp, r7
 801585e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015862:	bf00      	nop
 8015864:	0802c5ac 	.word	0x0802c5ac
 8015868:	0802c5b0 	.word	0x0802c5b0
 801586c:	0802c5b4 	.word	0x0802c5b4
 8015870:	0802c5b8 	.word	0x0802c5b8
 8015874:	0802b4d8 	.word	0x0802b4d8
 8015878:	0802b4e8 	.word	0x0802b4e8
 801587c:	0802b424 	.word	0x0802b424
 8015880:	0802b4bc 	.word	0x0802b4bc
 8015884:	0802b4f4 	.word	0x0802b4f4
 8015888:	0802b568 	.word	0x0802b568

0801588c <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 801588c:	b4b0      	push	{r4, r5, r7}
 801588e:	b083      	sub	sp, #12
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	4a07      	ldr	r2, [pc, #28]	; (80158b4 <_ZN6tflite16Register_CONV_2DEv+0x28>)
 8015898:	461c      	mov	r4, r3
 801589a:	4615      	mov	r5, r2
 801589c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801589e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80158a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80158a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	370c      	adds	r7, #12
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bcb0      	pop	{r4, r5, r7}
 80158b0:	4770      	bx	lr
 80158b2:	bf00      	nop
 80158b4:	0802b584 	.word	0x0802b584

080158b8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 80158b8:	b590      	push	{r4, r7, lr}
 80158ba:	ed2d 8b02 	vpush	{d8}
 80158be:	b0a9      	sub	sp, #164	; 0xa4
 80158c0:	af02      	add	r7, sp, #8
 80158c2:	60f8      	str	r0, [r7, #12]
 80158c4:	60b9      	str	r1, [r7, #8]
 80158c6:	607a      	str	r2, [r7, #4]
 80158c8:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80158d0:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80158d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80158e0:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80158e8:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80158f0:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80158f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int depth_multiplier = params.depth_multiplier;
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8015900:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_min = params.float_activation_min;
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015906:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_max = params.float_activation_max;
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801590c:	653b      	str	r3, [r7, #80]	; 0x50
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801590e:	68b8      	ldr	r0, [r7, #8]
 8015910:	f7f6 fb69 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015914:	4603      	mov	r3, r0
 8015916:	2b04      	cmp	r3, #4
 8015918:	d001      	beq.n	801591e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x66>
 801591a:	f00f fca8 	bl	802526e <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 801591e:	6838      	ldr	r0, [r7, #0]
 8015920:	f7f6 fb61 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015924:	4603      	mov	r3, r0
 8015926:	2b04      	cmp	r3, #4
 8015928:	d001      	beq.n	801592e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x76>
 801592a:	f00f fca0 	bl	802526e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801592e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015932:	f7f6 fb58 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015936:	4603      	mov	r3, r0
 8015938:	2b04      	cmp	r3, #4
 801593a:	d001      	beq.n	8015940 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x88>
 801593c:	f00f fc97 	bl	802526e <abort>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8015940:	2300      	movs	r3, #0
 8015942:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8015946:	2100      	movs	r1, #0
 8015948:	68b8      	ldr	r0, [r7, #8]
 801594a:	f7fc fb51 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801594e:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 8015950:	2303      	movs	r3, #3
 8015952:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8015956:	2103      	movs	r1, #3
 8015958:	6838      	ldr	r0, [r7, #0]
 801595a:	f7fc fb49 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801595e:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_height = input_shape.Dims(1);
 8015960:	2101      	movs	r1, #1
 8015962:	68b8      	ldr	r0, [r7, #8]
 8015964:	f7fb fa7e 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015968:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 801596a:	2102      	movs	r1, #2
 801596c:	68b8      	ldr	r0, [r7, #8]
 801596e:	f7fb fa79 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015972:	6438      	str	r0, [r7, #64]	; 0x40
  const int input_depth = input_shape.Dims(3);
 8015974:	2103      	movs	r1, #3
 8015976:	68b8      	ldr	r0, [r7, #8]
 8015978:	f7fb fa74 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 801597c:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_height = filter_shape.Dims(1);
 801597e:	2101      	movs	r1, #1
 8015980:	6838      	ldr	r0, [r7, #0]
 8015982:	f7fb fa6f 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015986:	63b8      	str	r0, [r7, #56]	; 0x38
  const int filter_width = filter_shape.Dims(2);
 8015988:	2102      	movs	r1, #2
 801598a:	6838      	ldr	r0, [r7, #0]
 801598c:	f7fb fa6a 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015990:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
 8015992:	2101      	movs	r1, #1
 8015994:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015998:	f7fb fa64 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 801599c:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
 801599e:	2102      	movs	r1, #2
 80159a0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80159a4:	f7fb fa5e 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 80159a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 80159aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80159ae:	fb02 f303 	mul.w	r3, r2, r3
 80159b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80159b4:	429a      	cmp	r2, r3
 80159b6:	d001      	beq.n	80159bc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x104>
 80159b8:	f00f fc59 	bl	802526e <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80159bc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80159c0:	f7fb fa88 	bl	8010ed4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80159c4:	4602      	mov	r2, r0
 80159c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80159c8:	4293      	cmp	r3, r2
 80159ca:	d001      	beq.n	80159d0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x118>
 80159cc:	f00f fc4f 	bl	802526e <abort>

  for (int b = 0; b < batches; ++b) {
 80159d0:	2300      	movs	r3, #0
 80159d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80159d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80159da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159dc:	429a      	cmp	r2, r3
 80159de:	f280 80eb 	bge.w	8015bb8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x300>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80159e2:	2300      	movs	r3, #0
 80159e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80159e8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80159ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ee:	429a      	cmp	r2, r3
 80159f0:	f280 80dc 	bge.w	8015bac <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2f4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80159f4:	2300      	movs	r3, #0
 80159f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80159fa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80159fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a00:	429a      	cmp	r2, r3
 8015a02:	f280 80cd 	bge.w	8015ba0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2e8>
        for (int ic = 0; ic < input_depth; ++ic) {
 8015a06:	2300      	movs	r3, #0
 8015a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015a0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015a12:	429a      	cmp	r2, r3
 8015a14:	f280 80be 	bge.w	8015b94 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2dc>
          for (int m = 0; m < depth_multiplier; m++) {
 8015a18:	2300      	movs	r3, #0
 8015a1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015a1e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015a24:	429a      	cmp	r2, r3
 8015a26:	f280 80af 	bge.w	8015b88 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2d0>
            const int oc = m + ic * depth_multiplier;
 8015a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015a2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015a30:	fb02 f303 	mul.w	r3, r2, r3
 8015a34:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015a38:	4413      	add	r3, r2
 8015a3a:	62bb      	str	r3, [r7, #40]	; 0x28
            const int in_x_origin = (out_x * stride_width) - pad_width;
 8015a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015a40:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015a42:	fb02 f203 	mul.w	r2, r2, r3
 8015a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015a48:	1ad3      	subs	r3, r2, r3
 8015a4a:	627b      	str	r3, [r7, #36]	; 0x24
            const int in_y_origin = (out_y * stride_height) - pad_height;
 8015a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015a50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015a52:	fb02 f203 	mul.w	r2, r2, r3
 8015a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a58:	1ad3      	subs	r3, r2, r3
 8015a5a:	623b      	str	r3, [r7, #32]
            float total = 0.f;
 8015a5c:	f04f 0300 	mov.w	r3, #0
 8015a60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8015a64:	2300      	movs	r3, #0
 8015a66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015a68:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	da54      	bge.n	8015b1a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x262>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8015a70:	2300      	movs	r3, #0
 8015a72:	67bb      	str	r3, [r7, #120]	; 0x78
 8015a74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a78:	429a      	cmp	r2, r3
 8015a7a:	da4a      	bge.n	8015b12 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25a>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8015a7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015a7e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015a80:	fb02 f303 	mul.w	r3, r2, r3
 8015a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a86:	4413      	add	r3, r2
 8015a88:	61fb      	str	r3, [r7, #28]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8015a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015a8c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015a8e:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8015a92:	6a3a      	ldr	r2, [r7, #32]
 8015a94:	4413      	add	r3, r2
 8015a96:	61bb      	str	r3, [r7, #24]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8015a98:	69fb      	ldr	r3, [r7, #28]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	db35      	blt.n	8015b0a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 8015a9e:	69fa      	ldr	r2, [r7, #28]
 8015aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015aa2:	429a      	cmp	r2, r3
 8015aa4:	da31      	bge.n	8015b0a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 8015aa6:	69bb      	ldr	r3, [r7, #24]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	db2e      	blt.n	8015b0a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 8015aac:	69ba      	ldr	r2, [r7, #24]
 8015aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ab0:	429a      	cmp	r2, r3
 8015ab2:	da2a      	bge.n	8015b0a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
 8015ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015ab8:	9300      	str	r3, [sp, #0]
 8015aba:	69fb      	ldr	r3, [r7, #28]
 8015abc:	69ba      	ldr	r2, [r7, #24]
 8015abe:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8015ac2:	68b8      	ldr	r0, [r7, #8]
 8015ac4:	f7fc fa3c 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	009b      	lsls	r3, r3, #2
 8015acc:	687a      	ldr	r2, [r7, #4]
 8015ace:	4413      	add	r3, r2
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	617b      	str	r3, [r7, #20]
                  float filter_value = filter_data[Offset(
 8015ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ad6:	9300      	str	r3, [sp, #0]
 8015ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015ada:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015adc:	2100      	movs	r1, #0
 8015ade:	6838      	ldr	r0, [r7, #0]
 8015ae0:	f7fc fa2e 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015ae4:	4603      	mov	r3, r0
                      filter_shape, 0, filter_y, filter_x, oc)];
 8015ae6:	009b      	lsls	r3, r3, #2
 8015ae8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015aec:	4413      	add	r3, r2
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	613b      	str	r3, [r7, #16]
                  total += (input_value * filter_value);
 8015af2:	ed97 7a05 	vldr	s14, [r7, #20]
 8015af6:	edd7 7a04 	vldr	s15, [r7, #16]
 8015afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015afe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8015b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b06:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8015b0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015b0c:	3301      	adds	r3, #1
 8015b0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8015b10:	e7b0      	b.n	8015a74 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1bc>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8015b12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015b14:	3301      	adds	r3, #1
 8015b16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015b18:	e7a6      	b.n	8015a68 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b0>
                }
              }
            }
            float bias_value = 0.0f;
 8015b1a:	f04f 0300 	mov.w	r3, #0
 8015b1e:	677b      	str	r3, [r7, #116]	; 0x74
            if (bias_data) {
 8015b20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d006      	beq.n	8015b36 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x27e>
              bias_value = bias_data[oc];
 8015b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b2a:	009b      	lsls	r3, r3, #2
 8015b2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8015b30:	4413      	add	r3, r2
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	677b      	str	r3, [r7, #116]	; 0x74
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
 8015b36:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8015b3a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8015b3e:	ee37 8a27 	vadd.f32	s16, s14, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8015b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b44:	9300      	str	r3, [sp, #0]
 8015b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015b4a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8015b4e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8015b52:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015b56:	f7fc f9f3 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015b5a:	4603      	mov	r3, r0
 8015b5c:	009b      	lsls	r3, r3, #2
 8015b5e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8015b62:	18d4      	adds	r4, r2, r3
                ActivationFunctionWithMinMax(total + bias_value,
 8015b64:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 8015b68:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 8015b6c:	eeb0 0a48 	vmov.f32	s0, s16
 8015b70:	f7fc ff2f 	bl	80129d2 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8015b74:	eef0 7a40 	vmov.f32	s15, s0
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8015b78:	edc4 7a00 	vstr	s15, [r4]
          for (int m = 0; m < depth_multiplier; m++) {
 8015b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015b80:	3301      	adds	r3, #1
 8015b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015b86:	e74a      	b.n	8015a1e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x166>
        for (int ic = 0; ic < input_depth; ++ic) {
 8015b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015b8c:	3301      	adds	r3, #1
 8015b8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015b92:	e73b      	b.n	8015a0c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x154>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8015b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015b98:	3301      	adds	r3, #1
 8015b9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015b9e:	e72c      	b.n	80159fa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x142>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8015ba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015ba4:	3301      	adds	r3, #1
 8015ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015baa:	e71d      	b.n	80159e8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x130>
  for (int b = 0; b < batches; ++b) {
 8015bac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015bb0:	3301      	adds	r3, #1
 8015bb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015bb6:	e70e      	b.n	80159d6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11e>
          }
        }
      }
    }
  }
}
 8015bb8:	bf00      	nop
 8015bba:	379c      	adds	r7, #156	; 0x9c
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	ecbd 8b02 	vpop	{d8}
 8015bc2:	bd90      	pop	{r4, r7, pc}

08015bc4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8015bc4:	b590      	push	{r4, r7, lr}
 8015bc6:	b0ab      	sub	sp, #172	; 0xac
 8015bc8:	af02      	add	r7, sp, #8
 8015bca:	60f8      	str	r0, [r7, #12]
 8015bcc:	60b9      	str	r1, [r7, #8]
 8015bce:	607a      	str	r2, [r7, #4]
 8015bd0:	603b      	str	r3, [r7, #0]
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015bd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8015be2:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015bea:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8015bf2:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015bfa:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015c02:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int depth_multiplier = params.depth_multiplier;
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8015c0a:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32_t input_offset = params.input_offset;
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	695b      	ldr	r3, [r3, #20]
 8015c10:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t output_offset = params.output_offset;
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	69db      	ldr	r3, [r3, #28]
 8015c16:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_activation_min = params.quantized_activation_min;
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c1c:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c22:	617b      	str	r3, [r7, #20]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8015c24:	6838      	ldr	r0, [r7, #0]
 8015c26:	f7f6 f9de 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	2b04      	cmp	r3, #4
 8015c2e:	d001      	beq.n	8015c34 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x70>
 8015c30:	f00f fb1d 	bl	802526e <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8015c34:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015c38:	f7f6 f9d5 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	2b04      	cmp	r3, #4
 8015c40:	d001      	beq.n	8015c46 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x82>
 8015c42:	f00f fb14 	bl	802526e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8015c46:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8015c4a:	f7f6 f9cc 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	2b04      	cmp	r3, #4
 8015c52:	d001      	beq.n	8015c58 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
 8015c54:	f00f fb0b 	bl	802526e <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8015c58:	69ba      	ldr	r2, [r7, #24]
 8015c5a:	697b      	ldr	r3, [r7, #20]
 8015c5c:	429a      	cmp	r2, r3
 8015c5e:	dd01      	ble.n	8015c64 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
 8015c60:	f00f fb05 	bl	802526e <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8015c64:	2300      	movs	r3, #0
 8015c66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8015c6a:	2100      	movs	r1, #0
 8015c6c:	6838      	ldr	r0, [r7, #0]
 8015c6e:	f7fc f9bf 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015c72:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 8015c74:	2303      	movs	r3, #3
 8015c76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8015c7a:	2103      	movs	r1, #3
 8015c7c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015c80:	f7fc f9b6 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015c84:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_height = input_shape.Dims(1);
 8015c86:	2101      	movs	r1, #1
 8015c88:	6838      	ldr	r0, [r7, #0]
 8015c8a:	f7fb f8eb 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015c8e:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_width = input_shape.Dims(2);
 8015c90:	2102      	movs	r1, #2
 8015c92:	6838      	ldr	r0, [r7, #0]
 8015c94:	f7fb f8e6 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015c98:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = input_shape.Dims(3);
 8015c9a:	2103      	movs	r1, #3
 8015c9c:	6838      	ldr	r0, [r7, #0]
 8015c9e:	f7fb f8e1 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015ca2:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int filter_height = filter_shape.Dims(1);
 8015ca4:	2101      	movs	r1, #1
 8015ca6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015caa:	f7fb f8db 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015cae:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_width = filter_shape.Dims(2);
 8015cb0:	2102      	movs	r1, #2
 8015cb2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015cb6:	f7fb f8d5 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015cba:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_height = output_shape.Dims(1);
 8015cbc:	2101      	movs	r1, #1
 8015cbe:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8015cc2:	f7fb f8cf 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015cc6:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_width = output_shape.Dims(2);
 8015cc8:	2102      	movs	r1, #2
 8015cca:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8015cce:	f7fb f8c9 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015cd2:	63f8      	str	r0, [r7, #60]	; 0x3c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 8015cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015cd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015cd8:	fb02 f303 	mul.w	r3, r2, r3
 8015cdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015cde:	429a      	cmp	r2, r3
 8015ce0:	d001      	beq.n	8015ce6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x122>
 8015ce2:	f00f fac4 	bl	802526e <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8015ce6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015cea:	f7fb f8f3 	bl	8010ed4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8015cee:	4602      	mov	r2, r0
 8015cf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015cf2:	4293      	cmp	r3, r2
 8015cf4:	d001      	beq.n	8015cfa <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x136>
 8015cf6:	f00f faba 	bl	802526e <abort>

  for (int batch = 0; batch < batches; ++batch) {
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015d00:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015d06:	429a      	cmp	r2, r3
 8015d08:	f280 811a 	bge.w	8015f40 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015d12:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d18:	429a      	cmp	r2, r3
 8015d1a:	f280 810b 	bge.w	8015f34 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8015d1e:	2300      	movs	r3, #0
 8015d20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015d24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d2a:	429a      	cmp	r2, r3
 8015d2c:	f280 80fc 	bge.w	8015f28 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x364>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8015d30:	2300      	movs	r3, #0
 8015d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015d36:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8015d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	f280 80ed 	bge.w	8015f1c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x358>
          for (int m = 0; m < depth_multiplier; ++m) {
 8015d42:	2300      	movs	r3, #0
 8015d44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015d48:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8015d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015d4e:	429a      	cmp	r2, r3
 8015d50:	f280 80de 	bge.w	8015f10 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34c>
            const int output_channel = m + in_channel * depth_multiplier;
 8015d54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015d58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015d5a:	fb02 f303 	mul.w	r3, r2, r3
 8015d5e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8015d62:	4413      	add	r3, r2
 8015d64:	63bb      	str	r3, [r7, #56]	; 0x38
            const int in_x_origin = (out_x * stride_width) - pad_width;
 8015d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015d6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015d6e:	fb02 f203 	mul.w	r2, r2, r3
 8015d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015d74:	1ad3      	subs	r3, r2, r3
 8015d76:	637b      	str	r3, [r7, #52]	; 0x34
            const int in_y_origin = (out_y * stride_height) - pad_height;
 8015d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015d7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015d7e:	fb02 f203 	mul.w	r2, r2, r3
 8015d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d84:	1ad3      	subs	r3, r2, r3
 8015d86:	633b      	str	r3, [r7, #48]	; 0x30
            int32_t acc = 0;
 8015d88:	2300      	movs	r3, #0
 8015d8a:	613b      	str	r3, [r7, #16]
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015d92:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d98:	429a      	cmp	r2, r3
 8015d9a:	da68      	bge.n	8015e6e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2aa>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015da2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015da8:	429a      	cmp	r2, r3
 8015daa:	da5a      	bge.n	8015e62 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29e>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8015dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015dae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015db2:	fb02 f303 	mul.w	r3, r2, r3
 8015db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015db8:	4413      	add	r3, r2
 8015dba:	62fb      	str	r3, [r7, #44]	; 0x2c
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8015dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015dbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015dc2:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8015dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015dc8:	4413      	add	r3, r2
 8015dca:	62bb      	str	r3, [r7, #40]	; 0x28
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8015dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	db0c      	blt.n	8015dec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8015dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015dd6:	429a      	cmp	r2, r3
 8015dd8:	da08      	bge.n	8015dec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8015dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	db05      	blt.n	8015dec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8015de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015de4:	429a      	cmp	r2, r3
 8015de6:	da01      	bge.n	8015dec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8015de8:	2301      	movs	r3, #1
 8015dea:	e000      	b.n	8015dee <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 8015dec:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 8015dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    (in_y < input_height);
                if (is_point_inside_image) {
 8015df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d02d      	beq.n	8015e56 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
                  int32_t input_val = input_data[Offset(
 8015dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015dfe:	9300      	str	r3, [sp, #0]
 8015e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e04:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8015e08:	6838      	ldr	r0, [r7, #0]
 8015e0a:	f7fc f899 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	461a      	mov	r2, r3
                      input_shape, batch, in_y, in_x, in_channel)];
 8015e12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8015e16:	4413      	add	r3, r2
 8015e18:	f993 3000 	ldrsb.w	r3, [r3]
 8015e1c:	623b      	str	r3, [r7, #32]
                  int32_t filter_val = filter_data[Offset(
 8015e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e20:	9300      	str	r3, [sp, #0]
 8015e22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015e26:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015e2a:	2100      	movs	r1, #0
 8015e2c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015e30:	f7fc f886 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015e34:	4603      	mov	r3, r0
 8015e36:	461a      	mov	r2, r3
                      filter_shape, 0, filter_y, filter_x, output_channel)];
 8015e38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015e3c:	4413      	add	r3, r2
 8015e3e:	f993 3000 	ldrsb.w	r3, [r3]
 8015e42:	61fb      	str	r3, [r7, #28]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 8015e44:	6a3a      	ldr	r2, [r7, #32]
 8015e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015e48:	4413      	add	r3, r2
 8015e4a:	69fa      	ldr	r2, [r7, #28]
 8015e4c:	fb02 f203 	mul.w	r2, r2, r3
 8015e50:	693b      	ldr	r3, [r7, #16]
 8015e52:	4413      	add	r3, r2
 8015e54:	613b      	str	r3, [r7, #16]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8015e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015e5a:	3301      	adds	r3, #1
 8015e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015e60:	e79f      	b.n	8015da2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1de>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8015e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015e66:	3301      	adds	r3, #1
 8015e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015e6c:	e791      	b.n	8015d92 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ce>
                }
              }
            }
            if (bias_data) {
 8015e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d008      	beq.n	8015e88 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>
              acc += bias_data[output_channel];
 8015e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e78:	009b      	lsls	r3, r3, #2
 8015e7a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8015e7e:	4413      	add	r3, r2
 8015e80:	681a      	ldr	r2, [r3, #0]
 8015e82:	693b      	ldr	r3, [r7, #16]
 8015e84:	4413      	add	r3, r2
 8015e86:	613b      	str	r3, [r7, #16]
            }
            acc = MultiplyByQuantizedMultiplier(
 8015e88:	6938      	ldr	r0, [r7, #16]
                acc, output_multiplier[output_channel],
 8015e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e8c:	009b      	lsls	r3, r3, #2
 8015e8e:	68ba      	ldr	r2, [r7, #8]
 8015e90:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 8015e92:	6819      	ldr	r1, [r3, #0]
                output_shift[output_channel]);
 8015e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e96:	009b      	lsls	r3, r3, #2
 8015e98:	687a      	ldr	r2, [r7, #4]
 8015e9a:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	461a      	mov	r2, r3
 8015ea0:	f7fb f870 	bl	8010f84 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8015ea4:	4603      	mov	r3, r0
 8015ea6:	613b      	str	r3, [r7, #16]
            acc += output_offset;
 8015ea8:	693a      	ldr	r2, [r7, #16]
 8015eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015eac:	4413      	add	r3, r2
 8015eae:	613b      	str	r3, [r7, #16]
            acc = std::max(acc, output_activation_min);
 8015eb0:	f107 0218 	add.w	r2, r7, #24
 8015eb4:	f107 0310 	add.w	r3, r7, #16
 8015eb8:	4611      	mov	r1, r2
 8015eba:	4618      	mov	r0, r3
 8015ebc:	f7f5 ff1e 	bl	800bcfc <_ZSt3maxIlERKT_S2_S2_>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	613b      	str	r3, [r7, #16]
            acc = std::min(acc, output_activation_max);
 8015ec6:	f107 0214 	add.w	r2, r7, #20
 8015eca:	f107 0310 	add.w	r3, r7, #16
 8015ece:	4611      	mov	r1, r2
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7f5 feff 	bl	800bcd4 <_ZSt3minIlERKT_S2_S2_>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	613b      	str	r3, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
 8015edc:	693c      	ldr	r4, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
 8015ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ee0:	9300      	str	r3, [sp, #0]
 8015ee2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015ee6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015eea:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8015eee:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8015ef2:	f7fc f825 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	461a      	mov	r2, r3
                               output_channel)] = static_cast<int8_t>(acc);
 8015efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015efe:	4413      	add	r3, r2
 8015f00:	b262      	sxtb	r2, r4
 8015f02:	701a      	strb	r2, [r3, #0]
          for (int m = 0; m < depth_multiplier; ++m) {
 8015f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015f08:	3301      	adds	r3, #1
 8015f0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015f0e:	e71b      	b.n	8015d48 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8015f10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015f14:	3301      	adds	r3, #1
 8015f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015f1a:	e70c      	b.n	8015d36 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x172>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8015f1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015f20:	3301      	adds	r3, #1
 8015f22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015f26:	e6fd      	b.n	8015d24 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x160>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8015f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015f2c:	3301      	adds	r3, #1
 8015f2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015f32:	e6ee      	b.n	8015d12 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14e>
  for (int batch = 0; batch < batches; ++batch) {
 8015f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f38:	3301      	adds	r3, #1
 8015f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015f3e:	e6df      	b.n	8015d00 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13c>
          }
        }
      }
    }
  }
}
 8015f40:	bf00      	nop
 8015f42:	37a4      	adds	r7, #164	; 0xa4
 8015f44:	46bd      	mov	sp, r7
 8015f46:	bd90      	pop	{r4, r7, pc}

08015f48 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b084      	sub	sp, #16
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	60f8      	str	r0, [r7, #12]
 8015f50:	60b9      	str	r1, [r7, #8]
 8015f52:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d101      	bne.n	8015f60 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8015f5c:	f00f f987 	bl	802526e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f64:	2138      	movs	r1, #56	; 0x38
 8015f66:	68f8      	ldr	r0, [r7, #12]
 8015f68:	4798      	blx	r3
 8015f6a:	4603      	mov	r3, r0
}
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	3710      	adds	r7, #16
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}

08015f74 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8015f74:	b5b0      	push	{r4, r5, r7, lr}
 8015f76:	b0c6      	sub	sp, #280	; 0x118
 8015f78:	af08      	add	r7, sp, #32
 8015f7a:	6078      	str	r0, [r7, #4]
 8015f7c:	6039      	str	r1, [r7, #0]
 8015f7e:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 8015f80:	683b      	ldr	r3, [r7, #0]
 8015f82:	691b      	ldr	r3, [r3, #16]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d101      	bne.n	8015f8c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8015f88:	f00f f971 	bl	802526e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8015f8c:	683b      	ldr	r3, [r7, #0]
 8015f8e:	695b      	ldr	r3, [r3, #20]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d101      	bne.n	8015f98 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 8015f94:	f00f f96b 	bl	802526e <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8015f98:	683b      	ldr	r3, [r7, #0]
 8015f9a:	691b      	ldr	r3, [r3, #16]
 8015f9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  const auto& params =
 8015fa0:	683b      	ldr	r3, [r7, #0]
 8015fa2:	695b      	ldr	r3, [r3, #20]
 8015fa4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));

  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
 8015fa8:	4baa      	ldr	r3, [pc, #680]	; (8016254 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	461a      	mov	r2, r3
 8015fae:	6839      	ldr	r1, [r7, #0]
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f7f5 fa57 	bl	800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8015fb6:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  TF_LITE_ENSURE(context, input != nullptr);
 8015fba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d10a      	bne.n	8015fd8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x64>
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	695c      	ldr	r4, [r3, #20]
 8015fc6:	4ba4      	ldr	r3, [pc, #656]	; (8016258 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 8015fc8:	9300      	str	r3, [sp, #0]
 8015fca:	2338      	movs	r3, #56	; 0x38
 8015fcc:	4aa3      	ldr	r2, [pc, #652]	; (801625c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015fce:	49a4      	ldr	r1, [pc, #656]	; (8016260 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015fd0:	6878      	ldr	r0, [r7, #4]
 8015fd2:	47a0      	blx	r4
 8015fd4:	2401      	movs	r4, #1
 8015fd6:	e22a      	b.n	801642e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
  const TfLiteTensor* filter =
      GetInput(context, node, kDepthwiseConvWeightsTensor);
 8015fd8:	4ba2      	ldr	r3, [pc, #648]	; (8016264 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	461a      	mov	r2, r3
 8015fde:	6839      	ldr	r1, [r7, #0]
 8015fe0:	6878      	ldr	r0, [r7, #4]
 8015fe2:	f7f5 fa3f 	bl	800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8015fe6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
  TF_LITE_ENSURE(context, filter != nullptr);
 8015fea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d10a      	bne.n	8016008 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x94>
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	695c      	ldr	r4, [r3, #20]
 8015ff6:	4b9c      	ldr	r3, [pc, #624]	; (8016268 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
 8015ff8:	9300      	str	r3, [sp, #0]
 8015ffa:	233b      	movs	r3, #59	; 0x3b
 8015ffc:	4a97      	ldr	r2, [pc, #604]	; (801625c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015ffe:	4998      	ldr	r1, [pc, #608]	; (8016260 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	47a0      	blx	r4
 8016004:	2401      	movs	r4, #1
 8016006:	e212      	b.n	801642e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
 8016008:	4b98      	ldr	r3, [pc, #608]	; (801626c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	461a      	mov	r2, r3
 801600e:	6839      	ldr	r1, [r7, #0]
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	f7f5 fa37 	bl	800b484 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8016016:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  TF_LITE_ENSURE(context, output != nullptr);
 801601a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801601e:	2b00      	cmp	r3, #0
 8016020:	d10a      	bne.n	8016038 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	695c      	ldr	r4, [r3, #20]
 8016026:	4b92      	ldr	r3, [pc, #584]	; (8016270 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
 8016028:	9300      	str	r3, [sp, #0]
 801602a:	233d      	movs	r3, #61	; 0x3d
 801602c:	4a8b      	ldr	r2, [pc, #556]	; (801625c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 801602e:	498c      	ldr	r1, [pc, #560]	; (8016260 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8016030:	6878      	ldr	r0, [r7, #4]
 8016032:	47a0      	blx	r4
 8016034:	2401      	movs	r4, #1
 8016036:	e1fa      	b.n	801642e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>

  const TfLiteType data_type = input->type;
 8016038:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801603c:	781b      	ldrb	r3, [r3, #0]
 801603e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  int input_width = SizeOfDimension(input, 2);
 8016042:	2102      	movs	r1, #2
 8016044:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8016048:	f7f5 f945 	bl	800b2d6 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 801604c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  int input_height = SizeOfDimension(input, 1);
 8016050:	2101      	movs	r1, #1
 8016052:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8016056:	f7f5 f93e 	bl	800b2d6 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 801605a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
  int filter_width = SizeOfDimension(filter, 2);
 801605e:	2102      	movs	r1, #2
 8016060:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8016064:	f7f5 f937 	bl	800b2d6 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8016068:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  int filter_height = SizeOfDimension(filter, 1);
 801606c:	2101      	movs	r1, #1
 801606e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8016072:	f7f5 f930 	bl	800b2d6 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8016076:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  int output_width = SizeOfDimension(output, 2);
 801607a:	2102      	movs	r1, #2
 801607c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8016080:	f7f5 f929 	bl	800b2d6 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8016084:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  int output_height = SizeOfDimension(output, 1);
 8016088:	2101      	movs	r1, #1
 801608a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 801608e:	f7f5 f922 	bl	800b2d6 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8016092:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if (input->type == kTfLiteInt8) {
 8016096:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801609a:	781b      	ldrb	r3, [r3, #0]
 801609c:	2b09      	cmp	r3, #9
 801609e:	f040 80b1 	bne.w	8016204 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x290>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 80160a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80160a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80160aa:	2b01      	cmp	r3, #1
 80160ac:	d014      	beq.n	80160d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	695c      	ldr	r4, [r3, #20]
 80160b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80160b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80160ba:	461a      	mov	r2, r3
 80160bc:	2301      	movs	r3, #1
 80160be:	9303      	str	r3, [sp, #12]
 80160c0:	9202      	str	r2, [sp, #8]
 80160c2:	4b6c      	ldr	r3, [pc, #432]	; (8016274 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
 80160c4:	9301      	str	r3, [sp, #4]
 80160c6:	4b6c      	ldr	r3, [pc, #432]	; (8016278 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
 80160c8:	9300      	str	r3, [sp, #0]
 80160ca:	2348      	movs	r3, #72	; 0x48
 80160cc:	4a63      	ldr	r2, [pc, #396]	; (801625c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 80160ce:	496b      	ldr	r1, [pc, #428]	; (801627c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	47a0      	blx	r4
 80160d4:	2401      	movs	r4, #1
 80160d6:	e1aa      	b.n	801642e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
                      kTfLiteAffineQuantization);

    // All per-channel quantized tensors need valid zero point and scale arrays.
    const auto* affine_quantization =
 80160d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80160dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80160de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
 80160e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d10a      	bne.n	8016100 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	695c      	ldr	r4, [r3, #20]
 80160ee:	4b64      	ldr	r3, [pc, #400]	; (8016280 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
 80160f0:	9300      	str	r3, [sp, #0]
 80160f2:	234f      	movs	r3, #79	; 0x4f
 80160f4:	4a59      	ldr	r2, [pc, #356]	; (801625c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 80160f6:	495a      	ldr	r1, [pc, #360]	; (8016260 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 80160f8:	6878      	ldr	r0, [r7, #4]
 80160fa:	47a0      	blx	r4
 80160fc:	2401      	movs	r4, #1
 80160fe:	e196      	b.n	801642e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 8016100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d10a      	bne.n	8016120 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	695c      	ldr	r4, [r3, #20]
 801610e:	4b5d      	ldr	r3, [pc, #372]	; (8016284 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
 8016110:	9300      	str	r3, [sp, #0]
 8016112:	2350      	movs	r3, #80	; 0x50
 8016114:	4a51      	ldr	r2, [pc, #324]	; (801625c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8016116:	4952      	ldr	r1, [pc, #328]	; (8016260 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8016118:	6878      	ldr	r0, [r7, #4]
 801611a:	47a0      	blx	r4
 801611c:	2401      	movs	r4, #1
 801611e:	e186      	b.n	801642e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
 8016120:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016124:	685b      	ldr	r3, [r3, #4]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d10a      	bne.n	8016140 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1cc>
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	695c      	ldr	r4, [r3, #20]
 801612e:	4b56      	ldr	r3, [pc, #344]	; (8016288 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>)
 8016130:	9300      	str	r3, [sp, #0]
 8016132:	2351      	movs	r3, #81	; 0x51
 8016134:	4a49      	ldr	r2, [pc, #292]	; (801625c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8016136:	494a      	ldr	r1, [pc, #296]	; (8016260 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	47a0      	blx	r4
 801613c:	2401      	movs	r4, #1
 801613e:	e176      	b.n	801642e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(
 8016140:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	2b01      	cmp	r3, #1
 801614a:	d018      	beq.n	801617e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20a>
 801614c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	681a      	ldr	r2, [r3, #0]
 8016154:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016158:	6899      	ldr	r1, [r3, #8]
 801615a:	4b4c      	ldr	r3, [pc, #304]	; (801628c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	009b      	lsls	r3, r3, #2
 8016160:	440b      	add	r3, r1
 8016162:	685b      	ldr	r3, [r3, #4]
 8016164:	429a      	cmp	r2, r3
 8016166:	d00a      	beq.n	801617e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20a>
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	695c      	ldr	r4, [r3, #20]
 801616c:	4b48      	ldr	r3, [pc, #288]	; (8016290 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x31c>)
 801616e:	9300      	str	r3, [sp, #0]
 8016170:	2352      	movs	r3, #82	; 0x52
 8016172:	4a3a      	ldr	r2, [pc, #232]	; (801625c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8016174:	493a      	ldr	r1, [pc, #232]	; (8016260 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8016176:	6878      	ldr	r0, [r7, #4]
 8016178:	47a0      	blx	r4
 801617a:	2401      	movs	r4, #1
 801617c:	e157      	b.n	801642e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
        context, affine_quantization->scale->size == 1 ||
                     affine_quantization->scale->size ==
                         filter->dims->data[kDepthwiseConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 801617e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	681a      	ldr	r2, [r3, #0]
 8016186:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801618a:	685b      	ldr	r3, [r3, #4]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	429a      	cmp	r2, r3
 8016190:	d016      	beq.n	80161c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	695c      	ldr	r4, [r3, #20]
 8016196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80161a2:	6852      	ldr	r2, [r2, #4]
 80161a4:	6812      	ldr	r2, [r2, #0]
 80161a6:	9203      	str	r2, [sp, #12]
 80161a8:	9302      	str	r3, [sp, #8]
 80161aa:	4b3a      	ldr	r3, [pc, #232]	; (8016294 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x320>)
 80161ac:	9301      	str	r3, [sp, #4]
 80161ae:	4b3a      	ldr	r3, [pc, #232]	; (8016298 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
 80161b0:	9300      	str	r3, [sp, #0]
 80161b2:	2356      	movs	r3, #86	; 0x56
 80161b4:	4a29      	ldr	r2, [pc, #164]	; (801625c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 80161b6:	4931      	ldr	r1, [pc, #196]	; (801627c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
 80161b8:	6878      	ldr	r0, [r7, #4]
 80161ba:	47a0      	blx	r4
 80161bc:	2401      	movs	r4, #1
 80161be:	e136      	b.n	801642e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
                      affine_quantization->zero_point->size);

    // Allocate memory for per-channel quantization parameters
    const int num_channels =
        filter->dims->data[kDepthwiseConvQuantizedDimension];
 80161c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80161c4:	689a      	ldr	r2, [r3, #8]
 80161c6:	4b31      	ldr	r3, [pc, #196]	; (801628c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
 80161c8:	681b      	ldr	r3, [r3, #0]
    const int num_channels =
 80161ca:	009b      	lsls	r3, r3, #2
 80161cc:	4413      	add	r3, r2
 80161ce:	685b      	ldr	r3, [r3, #4]
 80161d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    data->reference_op_data.per_channel_output_multiplier =
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 80161d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 80161dc:	0092      	lsls	r2, r2, #2
 80161de:	4611      	mov	r1, r2
 80161e0:	6878      	ldr	r0, [r7, #4]
 80161e2:	4798      	blx	r3
 80161e4:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_multiplier =
 80161e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80161ea:	625a      	str	r2, [r3, #36]	; 0x24
    data->reference_op_data.per_channel_output_shift =
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 80161f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 80161f4:	0092      	lsls	r2, r2, #2
 80161f6:	4611      	mov	r1, r2
 80161f8:	6878      	ldr	r0, [r7, #4]
 80161fa:	4798      	blx	r3
 80161fc:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_shift =
 80161fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016202:	629a      	str	r2, [r3, #40]	; 0x28
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
 8016204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016208:	9306      	str	r3, [sp, #24]
 801620a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 801620e:	9305      	str	r3, [sp, #20]
 8016210:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016214:	9304      	str	r3, [sp, #16]
 8016216:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801621a:	9303      	str	r3, [sp, #12]
 801621c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016220:	9302      	str	r3, [sp, #8]
 8016222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016226:	9301      	str	r3, [sp, #4]
 8016228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801622c:	9300      	str	r3, [sp, #0]
 801622e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016232:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8016236:	6839      	ldr	r1, [r7, #0]
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f7fc fa37 	bl	80126ac <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 801623e:	4603      	mov	r3, r0
 8016240:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8016244:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8016248:	2b00      	cmp	r3, #0
 801624a:	d027      	beq.n	801629c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>
 801624c:	f897 40bf 	ldrb.w	r4, [r7, #191]	; 0xbf
 8016250:	e0ed      	b.n	801642e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
 8016252:	bf00      	nop
 8016254:	0802c5c0 	.word	0x0802c5c0
 8016258:	0802b6f8 	.word	0x0802b6f8
 801625c:	0802b694 	.word	0x0802b694
 8016260:	0802b6e0 	.word	0x0802b6e0
 8016264:	0802c5c4 	.word	0x0802c5c4
 8016268:	0802b70c 	.word	0x0802b70c
 801626c:	0802c5cc 	.word	0x0802c5cc
 8016270:	0802b720 	.word	0x0802b720
 8016274:	0802b750 	.word	0x0802b750
 8016278:	0802b76c 	.word	0x0802b76c
 801627c:	0802b734 	.word	0x0802b734
 8016280:	0802b788 	.word	0x0802b788
 8016284:	0802b79c 	.word	0x0802b79c
 8016288:	0802b7b8 	.word	0x0802b7b8
 801628c:	0802c5d0 	.word	0x0802c5d0
 8016290:	0802b7d8 	.word	0x0802b7d8
 8016294:	0802b85c 	.word	0x0802b85c
 8016298:	0802b884 	.word	0x0802b884
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, data_type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 801629c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80162a0:	781b      	ldrb	r3, [r3, #0]
 80162a2:	2b09      	cmp	r3, #9
 80162a4:	f040 80c2 	bne.w	801642c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4b8>
    RuntimeShape input_shape = GetTensorShape(input);
 80162a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80162ac:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80162b0:	4618      	mov	r0, r3
 80162b2:	f7f5 fefc 	bl	800c0ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 80162b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80162ba:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80162be:	4618      	mov	r0, r3
 80162c0:	f7f5 fef5 	bl	800c0ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape filter_shape = GetTensorShape(filter);
 80162c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80162c8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80162cc:	4618      	mov	r0, r3
 80162ce:	f7f5 feee 	bl	800c0ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80162d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80162d6:	4618      	mov	r0, r3
 80162d8:	f7f5 fe85 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80162dc:	4603      	mov	r3, r0
 80162de:	2b04      	cmp	r3, #4
 80162e0:	d001      	beq.n	80162e6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x372>
 80162e2:	f00e ffc4 	bl	802526e <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80162e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80162ea:	4618      	mov	r0, r3
 80162ec:	f7f5 fe7b 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80162f0:	4603      	mov	r3, r0
 80162f2:	2b04      	cmp	r3, #4
 80162f4:	d001      	beq.n	80162fa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x386>
 80162f6:	f00e ffba 	bl	802526e <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80162fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80162fe:	4618      	mov	r0, r3
 8016300:	f7f5 fe71 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016304:	4603      	mov	r3, r0
 8016306:	2b04      	cmp	r3, #4
 8016308:	d001      	beq.n	801630e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x39a>
 801630a:	f00e ffb0 	bl	802526e <abort>

    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 801630e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8016312:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8016316:	2300      	movs	r3, #0
 8016318:	2100      	movs	r1, #0
 801631a:	f7fb fe69 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801631e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    const int output_depth = MatchingDim(output_shape, 3, filter_shape, 3);
 8016322:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8016326:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 801632a:	2303      	movs	r3, #3
 801632c:	2103      	movs	r1, #3
 801632e:	f7fb fe5f 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016332:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
    TFLITE_DCHECK_EQ(batch_size, 1); /* Only batch = 1 is supported */
 8016336:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801633a:	2b01      	cmp	r3, #1
 801633c:	d001      	beq.n	8016342 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3ce>
 801633e:	f00e ff96 	bl	802526e <abort>

    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 8016342:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016346:	657b      	str	r3, [r7, #84]	; 0x54
    input_dims.h = input_height;
 8016348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801634c:	65bb      	str	r3, [r7, #88]	; 0x58
    input_dims.w = input_width;
 801634e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016352:	65fb      	str	r3, [r7, #92]	; 0x5c
    input_dims.c = input_shape.Dims(3);
 8016354:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016358:	2103      	movs	r1, #3
 801635a:	4618      	mov	r0, r3
 801635c:	f7fa fd82 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016360:	4603      	mov	r3, r0
 8016362:	663b      	str	r3, [r7, #96]	; 0x60

    cmsis_nn_dims filter_dims;
    filter_dims.n = 1;
 8016364:	2301      	movs	r3, #1
 8016366:	647b      	str	r3, [r7, #68]	; 0x44
    filter_dims.h = filter_height;
 8016368:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801636c:	64bb      	str	r3, [r7, #72]	; 0x48
    filter_dims.w = filter_width;
 801636e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016372:	64fb      	str	r3, [r7, #76]	; 0x4c
    filter_dims.c = output_depth;
 8016374:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016378:	653b      	str	r3, [r7, #80]	; 0x50

    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 801637a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801637e:	637b      	str	r3, [r7, #52]	; 0x34
    output_dims.h = output_height;
 8016380:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016384:	63bb      	str	r3, [r7, #56]	; 0x38
    output_dims.w = output_width;
 8016386:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801638a:	63fb      	str	r3, [r7, #60]	; 0x3c
    output_dims.c = output_depth;
 801638c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016390:	643b      	str	r3, [r7, #64]	; 0x40

    cmsis_nn_dw_conv_params dw_conv_params;
    dw_conv_params.padding.h = data->reference_op_data.padding.height;
 8016392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016396:	685b      	ldr	r3, [r3, #4]
 8016398:	623b      	str	r3, [r7, #32]
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
 801639a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	61fb      	str	r3, [r7, #28]

    const int32_t buf_size = arm_depthwise_conv_wrapper_s8_get_buffer_size(
 80163a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80163a6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80163aa:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80163ae:	f107 0008 	add.w	r0, r7, #8
 80163b2:	f006 f9bd 	bl	801c730 <arm_depthwise_conv_wrapper_s8_get_buffer_size>
 80163b6:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        &dw_conv_params, &input_dims, &filter_dims, &output_dims);

    if (buf_size > 0) {
 80163ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80163be:	2b00      	cmp	r3, #0
 80163c0:	dd13      	ble.n	80163ea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x476>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80163c6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80163ca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80163ce:	3234      	adds	r2, #52	; 0x34
 80163d0:	6878      	ldr	r0, [r7, #4]
 80163d2:	4798      	blx	r3
 80163d4:	4603      	mov	r3, r0
 80163d6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80163da:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d008      	beq.n	80163f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x480>
 80163e2:	f897 40af 	ldrb.w	r4, [r7, #175]	; 0xaf
 80163e6:	2500      	movs	r5, #0
 80163e8:	e005      	b.n	80163f6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x482>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 80163ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80163ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80163f2:	635a      	str	r2, [r3, #52]	; 0x34
    RuntimeShape filter_shape = GetTensorShape(filter);
 80163f4:	2501      	movs	r5, #1
 80163f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80163fa:	4618      	mov	r0, r3
 80163fc:	f7f5 fddd 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
 8016400:	2d01      	cmp	r5, #1
 8016402:	d001      	beq.n	8016408 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x494>
 8016404:	2500      	movs	r5, #0
 8016406:	e000      	b.n	801640a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x496>
    RuntimeShape output_shape = GetTensorShape(output);
 8016408:	2501      	movs	r5, #1
 801640a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801640e:	4618      	mov	r0, r3
 8016410:	f7f5 fdd3 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
 8016414:	2d01      	cmp	r5, #1
 8016416:	d001      	beq.n	801641c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4a8>
 8016418:	2500      	movs	r5, #0
 801641a:	e000      	b.n	801641e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4aa>
    RuntimeShape input_shape = GetTensorShape(input);
 801641c:	2501      	movs	r5, #1
 801641e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016422:	4618      	mov	r0, r3
 8016424:	f7f5 fdc9 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
 8016428:	2d01      	cmp	r5, #1
 801642a:	d100      	bne.n	801642e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    }
  }
  return kTfLiteOk;
 801642c:	2400      	movs	r4, #0
 801642e:	4623      	mov	r3, r4
}
 8016430:	4618      	mov	r0, r3
 8016432:	37f8      	adds	r7, #248	; 0xf8
 8016434:	46bd      	mov	sp, r7
 8016436:	bdb0      	pop	{r4, r5, r7, pc}

08016438 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             const TfLiteDepthwiseConvParams& params,
                             const OpData& data, const TfLiteEvalTensor* input,
                             const TfLiteEvalTensor* filter,
                             const TfLiteEvalTensor* bias,
                             TfLiteEvalTensor* output) {
 8016438:	b5f0      	push	{r4, r5, r6, r7, lr}
 801643a:	b0f1      	sub	sp, #452	; 0x1c4
 801643c:	af08      	add	r7, sp, #32
 801643e:	f107 0414 	add.w	r4, r7, #20
 8016442:	6020      	str	r0, [r4, #0]
 8016444:	f107 0010 	add.w	r0, r7, #16
 8016448:	6001      	str	r1, [r0, #0]
 801644a:	f107 010c 	add.w	r1, r7, #12
 801644e:	600a      	str	r2, [r1, #0]
 8016450:	f107 0208 	add.w	r2, r7, #8
 8016454:	6013      	str	r3, [r2, #0]
  cmsis_nn_dw_conv_params dw_conv_params;
  dw_conv_params.dilation.h = params.dilation_height_factor;
 8016456:	f107 030c 	add.w	r3, r7, #12
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	699b      	ldr	r3, [r3, #24]
 801645e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  dw_conv_params.dilation.w = params.dilation_width_factor;
 8016462:	f107 030c 	add.w	r3, r7, #12
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	695b      	ldr	r3, [r3, #20]
 801646a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  // Call to reference implementation can be removed when dilation is supported
  // in the optimized implementations.
  if (1 == dw_conv_params.dilation.h && 1 == dw_conv_params.dilation.w) {
 801646e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016472:	2b01      	cmp	r3, #1
 8016474:	f040 8170 	bne.w	8016758 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x320>
 8016478:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801647c:	2b01      	cmp	r3, #1
 801647e:	f040 816b 	bne.w	8016758 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x320>
    dw_conv_params.input_offset = -data.reference_op_data.input_zero_point;
 8016482:	f107 0308 	add.w	r3, r7, #8
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	691b      	ldr	r3, [r3, #16]
 801648a:	425b      	negs	r3, r3
 801648c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    dw_conv_params.output_offset = data.reference_op_data.output_zero_point;
 8016490:	f107 0308 	add.w	r3, r7, #8
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	699b      	ldr	r3, [r3, #24]
 8016498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    dw_conv_params.stride.h = params.stride_height;
 801649c:	f107 030c 	add.w	r3, r7, #12
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	689b      	ldr	r3, [r3, #8]
 80164a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    dw_conv_params.stride.w = params.stride_width;
 80164a8:	f107 030c 	add.w	r3, r7, #12
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	685b      	ldr	r3, [r3, #4]
 80164b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    dw_conv_params.padding.h = data.reference_op_data.padding.height;
 80164b4:	f107 0308 	add.w	r3, r7, #8
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	685b      	ldr	r3, [r3, #4]
 80164bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    dw_conv_params.padding.w = data.reference_op_data.padding.width;
 80164c0:	f107 0308 	add.w	r3, r7, #8
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    // TODO(b/130439627): Use calculated value for clamping.
    dw_conv_params.activation.min = std::numeric_limits<int8_t>::min();
 80164cc:	f7f4 feb9 	bl	800b242 <_ZNSt14numeric_limitsIaE3minEv>
 80164d0:	4603      	mov	r3, r0
 80164d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    dw_conv_params.activation.max = std::numeric_limits<int8_t>::max();
 80164d6:	f7f4 febd 	bl	800b254 <_ZNSt14numeric_limitsIaE3maxEv>
 80164da:	4603      	mov	r3, r0
 80164dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    dw_conv_params.ch_mult = params.depth_multiplier;
 80164e0:	f107 030c 	add.w	r3, r7, #12
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	68db      	ldr	r3, [r3, #12]
 80164e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier =
        data.reference_op_data.per_channel_output_multiplier;
 80164ec:	f107 0308 	add.w	r3, r7, #8
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier =
 80164f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift = data.reference_op_data.per_channel_output_shift;
 80164f8:	f107 0308 	add.w	r3, r7, #8
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016500:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8016504:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016508:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 801650c:	4618      	mov	r0, r3
 801650e:	f7fc fa28 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8016512:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016516:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 801651a:	4618      	mov	r0, r3
 801651c:	f7fc fa21 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8016520:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016524:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8016528:	4618      	mov	r0, r3
 801652a:	f7fc fa1a 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 801652e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016532:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8016536:	4618      	mov	r0, r3
 8016538:	f7fc fa13 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    TFLITE_DCHECK_LE(dw_conv_params.activation.min,
 801653c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8016540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016544:	429a      	cmp	r2, r3
 8016546:	dd01      	ble.n	801654c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x114>
 8016548:	f00e fe91 	bl	802526e <abort>
                     dw_conv_params.activation.max);

    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 801654c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8016550:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8016554:	2300      	movs	r3, #0
 8016556:	2100      	movs	r1, #0
 8016558:	f7fb fd4a 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801655c:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 8016560:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8016564:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8016568:	2303      	movs	r3, #3
 801656a:	2103      	movs	r1, #3
 801656c:	f7fb fd40 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016570:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198

    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 8016574:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8016578:	f7fb fa46 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801657c:	4603      	mov	r3, r0
 801657e:	2b00      	cmp	r3, #0
 8016580:	bf14      	ite	ne
 8016582:	2301      	movne	r3, #1
 8016584:	2300      	moveq	r3, #0
 8016586:	b2db      	uxtb	r3, r3
 8016588:	2b00      	cmp	r3, #0
 801658a:	d00b      	beq.n	80165a4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x16c>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 801658c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016590:	4618      	mov	r0, r3
 8016592:	f7fa fc9f 	bl	8010ed4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8016596:	4602      	mov	r2, r0
 8016598:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801659c:	4293      	cmp	r3, r2
 801659e:	d001      	beq.n	80165a4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x16c>
 80165a0:	f00e fe65 	bl	802526e <abort>
    }

    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 80165a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80165a8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80165ac:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 80165ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80165b2:	2101      	movs	r1, #1
 80165b4:	4618      	mov	r0, r3
 80165b6:	f7fa fc55 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 80165ba:	4602      	mov	r2, r0
 80165bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80165c0:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 80165c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80165c6:	2102      	movs	r1, #2
 80165c8:	4618      	mov	r0, r3
 80165ca:	f7fa fc4b 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 80165ce:	4602      	mov	r2, r0
 80165d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80165d4:	609a      	str	r2, [r3, #8]
    input_dims.c = input_shape.Dims(3);
 80165d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80165da:	2103      	movs	r1, #3
 80165dc:	4618      	mov	r0, r3
 80165de:	f7fa fc41 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 80165e2:	4602      	mov	r2, r0
 80165e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80165e8:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(0);
 80165ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80165ee:	2100      	movs	r1, #0
 80165f0:	4618      	mov	r0, r3
 80165f2:	f7fa fc37 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 80165f6:	4602      	mov	r2, r0
 80165f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80165fc:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 80165fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016602:	2101      	movs	r1, #1
 8016604:	4618      	mov	r0, r3
 8016606:	f7fa fc2d 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 801660a:	4602      	mov	r2, r0
 801660c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016610:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 8016612:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016616:	2102      	movs	r1, #2
 8016618:	4618      	mov	r0, r3
 801661a:	f7fa fc23 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 801661e:	4602      	mov	r2, r0
 8016620:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016624:	609a      	str	r2, [r3, #8]
    filter_dims.c = output_depth;
 8016626:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801662a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 801662e:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 8016630:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016634:	2201      	movs	r2, #1
 8016636:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 8016638:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801663c:	2201      	movs	r2, #1
 801663e:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 8016640:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016644:	2201      	movs	r2, #1
 8016646:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 8016648:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801664c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8016650:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 8016652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016656:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801665a:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 801665c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016660:	2101      	movs	r1, #1
 8016662:	4618      	mov	r0, r3
 8016664:	f7fa fbfe 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016668:	4602      	mov	r2, r0
 801666a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801666e:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 8016670:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016674:	2102      	movs	r1, #2
 8016676:	4618      	mov	r0, r3
 8016678:	f7fa fbf4 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 801667c:	4602      	mov	r2, r0
 801667e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016682:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 8016684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016688:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 801668c:	60da      	str	r2, [r3, #12]

    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 801668e:	f107 031c 	add.w	r3, r7, #28
 8016692:	2200      	movs	r2, #0
 8016694:	601a      	str	r2, [r3, #0]
    /* 'size' is unused */
    ctx.size = 0;
 8016696:	f107 031c 	add.w	r3, r7, #28
 801669a:	2200      	movs	r2, #0
 801669c:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 801669e:	f107 0308 	add.w	r3, r7, #8
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	db0f      	blt.n	80166ca <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x292>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 80166aa:	f107 0314 	add.w	r3, r7, #20
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80166b2:	f107 0208 	add.w	r2, r7, #8
 80166b6:	6812      	ldr	r2, [r2, #0]
 80166b8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80166ba:	f107 0214 	add.w	r2, r7, #20
 80166be:	6810      	ldr	r0, [r2, #0]
 80166c0:	4798      	blx	r3
 80166c2:	4602      	mov	r2, r0
 80166c4:	f107 031c 	add.w	r3, r7, #28
 80166c8:	601a      	str	r2, [r3, #0]
    }

    TFLITE_DCHECK_EQ(
 80166ca:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80166ce:	f7fb f99b 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80166d2:	4605      	mov	r5, r0
 80166d4:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80166d8:	f7fb f996 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80166dc:	4606      	mov	r6, r0
 80166de:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 80166e2:	f7fb fc12 	bl	8011f0a <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80166e6:	6078      	str	r0, [r7, #4]
 80166e8:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80166ec:	f7fb f99b 	bl	8011a26 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80166f0:	4603      	mov	r3, r0
 80166f2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80166f6:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80166fa:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80166fe:	f107 001c 	add.w	r0, r7, #28
 8016702:	9306      	str	r3, [sp, #24]
 8016704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016708:	9305      	str	r3, [sp, #20]
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	9304      	str	r3, [sp, #16]
 801670e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016712:	9303      	str	r3, [sp, #12]
 8016714:	9602      	str	r6, [sp, #8]
 8016716:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801671a:	9301      	str	r3, [sp, #4]
 801671c:	9500      	str	r5, [sp, #0]
 801671e:	4623      	mov	r3, r4
 8016720:	f005 ffa3 	bl	801c66a <arm_depthwise_conv_wrapper_s8>
 8016724:	4603      	mov	r3, r0
 8016726:	2b00      	cmp	r3, #0
 8016728:	d001      	beq.n	801672e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x2f6>
 801672a:	f00e fda0 	bl	802526e <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 801672e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016732:	4618      	mov	r0, r3
 8016734:	f7f5 fc41 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8016738:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801673c:	4618      	mov	r0, r3
 801673e:	f7f5 fc3c 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8016742:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016746:	4618      	mov	r0, r3
 8016748:	f7f5 fc37 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801674c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016750:	4618      	mov	r0, r3
 8016752:	f7f5 fc32 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &dw_conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 8016756:	e06e      	b.n	8016836 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x3fe>
  } else {
    reference_integer_ops::DepthwiseConvPerChannel(
        DepthwiseConvParamsQuantized(params, data.reference_op_data),
 8016758:	f107 0308 	add.w	r3, r7, #8
 801675c:	681a      	ldr	r2, [r3, #0]
 801675e:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8016762:	f107 030c 	add.w	r3, r7, #12
 8016766:	6819      	ldr	r1, [r3, #0]
 8016768:	f7fb ff49 	bl	80125fe <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 801676c:	f107 0308 	add.w	r3, r7, #8
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 8016774:	f107 0308 	add.w	r3, r7, #8
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 801677c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016780:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8016784:	4618      	mov	r0, r3
 8016786:	f7fc f8ec 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 801678a:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 801678e:	f7fb f93b 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8016792:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 8016794:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016798:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 801679c:	4618      	mov	r0, r3
 801679e:	f7fc f8e0 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 80167a2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80167a6:	f7fb f92f 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80167aa:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 80167ac:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80167b0:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80167b4:	4618      	mov	r0, r3
 80167b6:	f7fc f8d4 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 80167ba:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 80167be:	f7fb fba4 	bl	8011f0a <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80167c2:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 80167c4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80167c8:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80167cc:	4618      	mov	r0, r3
 80167ce:	f7fc f8c8 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 80167d2:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80167d6:	f7fb f926 	bl	8011a26 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80167da:	4603      	mov	r3, r0
 80167dc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80167e0:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80167e4:	9306      	str	r3, [sp, #24]
 80167e6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80167ea:	9305      	str	r3, [sp, #20]
 80167ec:	683b      	ldr	r3, [r7, #0]
 80167ee:	9304      	str	r3, [sp, #16]
 80167f0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80167f4:	9303      	str	r3, [sp, #12]
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	9302      	str	r3, [sp, #8]
 80167fa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80167fe:	9301      	str	r3, [sp, #4]
 8016800:	9600      	str	r6, [sp, #0]
 8016802:	4613      	mov	r3, r2
 8016804:	462a      	mov	r2, r5
 8016806:	4621      	mov	r1, r4
 8016808:	f7ff f9dc 	bl	8015bc4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 801680c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016810:	4618      	mov	r0, r3
 8016812:	f7f5 fbd2 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 8016816:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801681a:	4618      	mov	r0, r3
 801681c:	f7f5 fbcd 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 8016820:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016824:	4618      	mov	r0, r3
 8016826:	f7f5 fbc8 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 801682a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801682e:	4618      	mov	r0, r3
 8016830:	f7f5 fbc3 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
}
 8016834:	bf00      	nop
 8016836:	bf00      	nop
 8016838:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 801683c:	46bd      	mov	sp, r7
 801683e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016840 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8016840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016842:	b0b7      	sub	sp, #220	; 0xdc
 8016844:	af06      	add	r7, sp, #24
 8016846:	6078      	str	r0, [r7, #4]
 8016848:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801684a:	683b      	ldr	r3, [r7, #0]
 801684c:	691b      	ldr	r3, [r3, #16]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d101      	bne.n	8016856 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8016852:	f00e fd0c 	bl	802526e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8016856:	683b      	ldr	r3, [r7, #0]
 8016858:	695b      	ldr	r3, [r3, #20]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d101      	bne.n	8016862 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22>
 801685e:	f00e fd06 	bl	802526e <abort>

  const auto& params =
 8016862:	683b      	ldr	r3, [r7, #0]
 8016864:	695b      	ldr	r3, [r3, #20]
 8016866:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));
  const OpData& data = *(static_cast<OpData*>(node->user_data));
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	691b      	ldr	r3, [r3, #16]
 801686e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
 8016872:	4b60      	ldr	r3, [pc, #384]	; (80169f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b4>)
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	461a      	mov	r2, r3
 8016878:	6839      	ldr	r1, [r7, #0]
 801687a:	6878      	ldr	r0, [r7, #4]
 801687c:	f7fa fbd6 	bl	801102c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8016880:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
 8016884:	4b5c      	ldr	r3, [pc, #368]	; (80169f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b8>)
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	461a      	mov	r2, r3
 801688a:	6839      	ldr	r1, [r7, #0]
 801688c:	6878      	ldr	r0, [r7, #4]
 801688e:	f7fa fbbd 	bl	801100c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8016892:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
 8016896:	4b59      	ldr	r3, [pc, #356]	; (80169fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1bc>)
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	461a      	mov	r2, r3
 801689c:	6839      	ldr	r1, [r7, #0]
 801689e:	6878      	ldr	r0, [r7, #4]
 80168a0:	f7fa fbb4 	bl	801100c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80168a4:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 80168a8:	6838      	ldr	r0, [r7, #0]
 80168aa:	f7fb fb14 	bl	8011ed6 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80168ae:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
 80168b0:	2b03      	cmp	r3, #3
 80168b2:	d108      	bne.n	80168c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
 80168b4:	4b52      	ldr	r3, [pc, #328]	; (8016a00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>)
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	461a      	mov	r2, r3
 80168ba:	6839      	ldr	r1, [r7, #0]
 80168bc:	6878      	ldr	r0, [r7, #4]
 80168be:	f7fa fba5 	bl	801100c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80168c2:	4603      	mov	r3, r0
 80168c4:	e000      	b.n	80168c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x88>
 80168c6:	2300      	movs	r3, #0
          : nullptr;
 80168c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  switch (input->type) {  // Already know in/out types are same.
 80168cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80168d0:	7a1b      	ldrb	r3, [r3, #8]
 80168d2:	2b01      	cmp	r3, #1
 80168d4:	d002      	beq.n	80168dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
 80168d6:	2b09      	cmp	r3, #9
 80168d8:	d061      	beq.n	801699e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
 80168da:	e075      	b.n	80169c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x188>
    case kTfLiteFloat32: {
      tflite::reference_ops::DepthwiseConv(
          DepthwiseConvParamsFloat(params, data.reference_op_data),
 80168dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80168e0:	f107 0308 	add.w	r3, r7, #8
 80168e4:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80168e8:	4618      	mov	r0, r3
 80168ea:	f7fb fe47 	bl	801257c <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
 80168ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80168f2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80168f6:	4618      	mov	r0, r3
 80168f8:	f7fc f833 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 80168fc:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8016900:	f7fb f862 	bl	80119c8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8016904:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8016906:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801690a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 801690e:	4618      	mov	r0, r3
 8016910:	f7fc f827 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 8016914:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016918:	f7fb f856 	bl	80119c8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801691c:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 801691e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016922:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8016926:	4618      	mov	r0, r3
 8016928:	f7fc f81b 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 801692c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8016930:	f7fb f84a 	bl	80119c8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8016934:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 8016936:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801693a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801693e:	4618      	mov	r0, r3
 8016940:	f7fc f80f 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 8016944:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8016948:	f7fb f84d 	bl	80119e6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801694c:	4603      	mov	r3, r0
 801694e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8016952:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8016956:	f107 0008 	add.w	r0, r7, #8
 801695a:	9304      	str	r3, [sp, #16]
 801695c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016960:	9303      	str	r3, [sp, #12]
 8016962:	9502      	str	r5, [sp, #8]
 8016964:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016968:	9301      	str	r3, [sp, #4]
 801696a:	9400      	str	r4, [sp, #0]
 801696c:	4613      	mov	r3, r2
 801696e:	4632      	mov	r2, r6
 8016970:	f7fe ffa2 	bl	80158b8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 8016974:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016978:	4618      	mov	r0, r3
 801697a:	f7f5 fb1e 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 801697e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016982:	4618      	mov	r0, r3
 8016984:	f7f5 fb19 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8016988:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801698c:	4618      	mov	r0, r3
 801698e:	f7f5 fb14 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8016992:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016996:	4618      	mov	r0, r3
 8016998:	f7f5 fb0f 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 801699c:	e025      	b.n	80169ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1aa>
    }
    case kTfLiteInt8:
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
 801699e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80169a2:	9303      	str	r3, [sp, #12]
 80169a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80169a8:	9302      	str	r3, [sp, #8]
 80169aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80169ae:	9301      	str	r3, [sp, #4]
 80169b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80169b4:	9300      	str	r3, [sp, #0]
 80169b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80169ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80169be:	6839      	ldr	r1, [r7, #0]
 80169c0:	6878      	ldr	r0, [r7, #4]
 80169c2:	f7ff fd39 	bl	8016438 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>
                              output);
      break;
 80169c6:	e010      	b.n	80169ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1aa>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	695c      	ldr	r4, [r3, #20]
 80169cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80169d0:	7a1b      	ldrb	r3, [r3, #8]
 80169d2:	4618      	mov	r0, r3
 80169d4:	f7f1 fee2 	bl	800879c <TfLiteTypeGetName>
 80169d8:	4602      	mov	r2, r0
 80169da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80169de:	7a1b      	ldrb	r3, [r3, #8]
 80169e0:	4908      	ldr	r1, [pc, #32]	; (8016a04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
 80169e2:	6878      	ldr	r0, [r7, #4]
 80169e4:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80169e6:	2301      	movs	r3, #1
 80169e8:	e000      	b.n	80169ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ac>
  }
  return kTfLiteOk;
 80169ea:	2300      	movs	r3, #0
}
 80169ec:	4618      	mov	r0, r3
 80169ee:	37c4      	adds	r7, #196	; 0xc4
 80169f0:	46bd      	mov	sp, r7
 80169f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169f4:	0802c5cc 	.word	0x0802c5cc
 80169f8:	0802c5c0 	.word	0x0802c5c0
 80169fc:	0802c5c4 	.word	0x0802c5c4
 8016a00:	0802c5c8 	.word	0x0802c5c8
 8016a04:	0802b8a8 	.word	0x0802b8a8

08016a08 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
 8016a08:	b4b0      	push	{r4, r5, r7}
 8016a0a:	b083      	sub	sp, #12
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	4a07      	ldr	r2, [pc, #28]	; (8016a30 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x28>)
 8016a14:	461c      	mov	r4, r3
 8016a16:	4615      	mov	r5, r2
 8016a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016a1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016a20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	370c      	adds	r7, #12
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	bcb0      	pop	{r4, r5, r7}
 8016a2c:	4770      	bx	lr
 8016a2e:	bf00      	nop
 8016a30:	0802b8c4 	.word	0x0802b8c4

08016a34 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
 8016a34:	b590      	push	{r4, r7, lr}
 8016a36:	ed2d 8b02 	vpush	{d8}
 8016a3a:	b0a7      	sub	sp, #156	; 0x9c
 8016a3c:	af02      	add	r7, sp, #8
 8016a3e:	60f8      	str	r0, [r7, #12]
 8016a40:	60b9      	str	r1, [r7, #8]
 8016a42:	607a      	str	r2, [r7, #4]
 8016a44:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8016a46:	68b8      	ldr	r0, [r7, #8]
 8016a48:	f7f5 facd 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	2b04      	cmp	r3, #4
 8016a50:	d001      	beq.n	8016a56 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 8016a52:	f00e fc0c 	bl	802526e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8016a56:	6838      	ldr	r0, [r7, #0]
 8016a58:	f7f5 fac5 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016a5c:	4603      	mov	r3, r0
 8016a5e:	2b04      	cmp	r3, #4
 8016a60:	d001      	beq.n	8016a66 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8016a62:	f00e fc04 	bl	802526e <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8016a66:	2300      	movs	r3, #0
 8016a68:	683a      	ldr	r2, [r7, #0]
 8016a6a:	2100      	movs	r1, #0
 8016a6c:	68b8      	ldr	r0, [r7, #8]
 8016a6e:	f7fb fabf 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016a72:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8016a74:	2303      	movs	r3, #3
 8016a76:	683a      	ldr	r2, [r7, #0]
 8016a78:	2103      	movs	r1, #3
 8016a7a:	68b8      	ldr	r0, [r7, #8]
 8016a7c:	f7fb fab8 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016a80:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8016a82:	2101      	movs	r1, #1
 8016a84:	68b8      	ldr	r0, [r7, #8]
 8016a86:	f7fa f9ed 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016a8a:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8016a8c:	2102      	movs	r1, #2
 8016a8e:	68b8      	ldr	r0, [r7, #8]
 8016a90:	f7fa f9e8 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016a94:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8016a96:	2101      	movs	r1, #1
 8016a98:	6838      	ldr	r0, [r7, #0]
 8016a9a:	f7fa f9e3 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016a9e:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8016aa0:	2102      	movs	r1, #2
 8016aa2:	6838      	ldr	r0, [r7, #0]
 8016aa4:	f7fa f9de 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016aa8:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	68db      	ldr	r3, [r3, #12]
 8016aae:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	691b      	ldr	r3, [r3, #16]
 8016ab4:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016abc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016ac2:	429a      	cmp	r2, r3
 8016ac4:	f280 80f0 	bge.w	8016ca8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x274>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016ac8:	2300      	movs	r3, #0
 8016aca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016ace:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ad4:	429a      	cmp	r2, r3
 8016ad6:	f280 80e1 	bge.w	8016c9c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x268>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016ada:	2300      	movs	r3, #0
 8016adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016ae0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016ae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	f280 80d2 	bge.w	8016c90 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x25c>
        for (int channel = 0; channel < depth; ++channel) {
 8016aec:	2300      	movs	r3, #0
 8016aee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016af2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016af6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016af8:	429a      	cmp	r2, r3
 8016afa:	f280 80c3 	bge.w	8016c84 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x250>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8016afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016b02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016b04:	fb02 f303 	mul.w	r3, r2, r3
 8016b08:	68fa      	ldr	r2, [r7, #12]
 8016b0a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8016b0e:	1a9b      	subs	r3, r3, r2
 8016b10:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8016b12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016b16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016b18:	fb02 f303 	mul.w	r3, r2, r3
 8016b1c:	68fa      	ldr	r2, [r7, #12]
 8016b1e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8016b22:	1a9b      	subs	r3, r3, r2
 8016b24:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8016b26:	2300      	movs	r3, #0
 8016b28:	617b      	str	r3, [r7, #20]
 8016b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b2c:	425b      	negs	r3, r3
 8016b2e:	61bb      	str	r3, [r7, #24]
 8016b30:	f107 0218 	add.w	r2, r7, #24
 8016b34:	f107 0314 	add.w	r3, r7, #20
 8016b38:	4611      	mov	r1, r2
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f7f5 f8b6 	bl	800bcac <_ZSt3maxIiERKT_S2_S2_>
 8016b40:	4603      	mov	r3, r0
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	f103 0018 	add.w	r0, r3, #24
 8016b4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b50:	1ad3      	subs	r3, r2, r3
 8016b52:	61fb      	str	r3, [r7, #28]
 8016b54:	f107 031c 	add.w	r3, r7, #28
 8016b58:	4619      	mov	r1, r3
 8016b5a:	f7fb fec8 	bl	80128ee <_ZSt3minIiERKT_S2_S2_>
 8016b5e:	4603      	mov	r3, r0
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8016b64:	2300      	movs	r3, #0
 8016b66:	623b      	str	r3, [r7, #32]
 8016b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b6a:	425b      	negs	r3, r3
 8016b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8016b6e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8016b72:	f107 0320 	add.w	r3, r7, #32
 8016b76:	4611      	mov	r1, r2
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7f5 f897 	bl	800bcac <_ZSt3maxIiERKT_S2_S2_>
 8016b7e:	4603      	mov	r3, r0
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	f103 0014 	add.w	r0, r3, #20
 8016b8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b8e:	1ad3      	subs	r3, r2, r3
 8016b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8016b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016b96:	4619      	mov	r1, r3
 8016b98:	f7fb fea9 	bl	80128ee <_ZSt3minIiERKT_S2_S2_>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	63bb      	str	r3, [r7, #56]	; 0x38
          float total = 0.f;
 8016ba2:	f04f 0300 	mov.w	r3, #0
 8016ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
          float filter_count = 0;
 8016ba8:	f04f 0300 	mov.w	r3, #0
 8016bac:	67bb      	str	r3, [r7, #120]	; 0x78
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8016bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bb0:	677b      	str	r3, [r7, #116]	; 0x74
 8016bb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bb6:	429a      	cmp	r2, r3
 8016bb8:	da33      	bge.n	8016c22 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ee>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8016bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016bbc:	673b      	str	r3, [r7, #112]	; 0x70
 8016bbe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bc2:	429a      	cmp	r2, r3
 8016bc4:	da29      	bge.n	8016c1a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1e6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8016bc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016bca:	4413      	add	r3, r2
 8016bcc:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8016bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016bd2:	4413      	add	r3, r2
 8016bd4:	633b      	str	r3, [r7, #48]	; 0x30
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8016bd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016bda:	9300      	str	r3, [sp, #0]
 8016bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016be0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8016be4:	68b8      	ldr	r0, [r7, #8]
 8016be6:	f7fb f9ab 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016bea:	4603      	mov	r3, r0
 8016bec:	009b      	lsls	r3, r3, #2
 8016bee:	687a      	ldr	r2, [r7, #4]
 8016bf0:	4413      	add	r3, r2
 8016bf2:	edd3 7a00 	vldr	s15, [r3]
              total +=
 8016bf6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8016bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016bfe:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              filter_count++;
 8016c02:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8016c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016c0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016c0e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8016c12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016c14:	3301      	adds	r3, #1
 8016c16:	673b      	str	r3, [r7, #112]	; 0x70
 8016c18:	e7d1      	b.n	8016bbe <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8016c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016c1c:	3301      	adds	r3, #1
 8016c1e:	677b      	str	r3, [r7, #116]	; 0x74
 8016c20:	e7c7      	b.n	8016bb2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17e>
            }
          }
          const float average = total / filter_count;
 8016c22:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8016c26:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8016c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016c2e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	edd3 8a0a 	vldr	s17, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8016c3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016c42:	9300      	str	r3, [sp, #0]
 8016c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016c48:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016c4c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8016c50:	6838      	ldr	r0, [r7, #0]
 8016c52:	f7fb f975 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016c56:	4603      	mov	r3, r0
 8016c58:	009b      	lsls	r3, r3, #2
 8016c5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016c5e:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 8016c60:	eeb0 1a68 	vmov.f32	s2, s17
 8016c64:	eef0 0a48 	vmov.f32	s1, s16
 8016c68:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8016c6c:	f7fb feb1 	bl	80129d2 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8016c70:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8016c74:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8016c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016c7c:	3301      	adds	r3, #1
 8016c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016c82:	e736      	b.n	8016af2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xbe>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016c84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016c88:	3301      	adds	r3, #1
 8016c8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016c8e:	e727      	b.n	8016ae0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xac>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016c90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016c94:	3301      	adds	r3, #1
 8016c96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016c9a:	e718      	b.n	8016ace <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 8016c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016ca0:	3301      	adds	r3, #1
 8016ca2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016ca6:	e709      	b.n	8016abc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 8016ca8:	bf00      	nop
 8016caa:	3794      	adds	r7, #148	; 0x94
 8016cac:	46bd      	mov	sp, r7
 8016cae:	ecbd 8b02 	vpop	{d8}
 8016cb2:	bd90      	pop	{r4, r7, pc}

08016cb4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
 8016cb4:	b590      	push	{r4, r7, lr}
 8016cb6:	ed2d 8b04 	vpush	{d8-d9}
 8016cba:	b0a5      	sub	sp, #148	; 0x94
 8016cbc:	af02      	add	r7, sp, #8
 8016cbe:	60f8      	str	r0, [r7, #12]
 8016cc0:	60b9      	str	r1, [r7, #8]
 8016cc2:	607a      	str	r2, [r7, #4]
 8016cc4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8016cc6:	68b8      	ldr	r0, [r7, #8]
 8016cc8:	f7f5 f98d 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	2b04      	cmp	r3, #4
 8016cd0:	d001      	beq.n	8016cd6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 8016cd2:	f00e facc 	bl	802526e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8016cd6:	6838      	ldr	r0, [r7, #0]
 8016cd8:	f7f5 f985 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	2b04      	cmp	r3, #4
 8016ce0:	d001      	beq.n	8016ce6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8016ce2:	f00e fac4 	bl	802526e <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	683a      	ldr	r2, [r7, #0]
 8016cea:	2100      	movs	r1, #0
 8016cec:	68b8      	ldr	r0, [r7, #8]
 8016cee:	f7fb f97f 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016cf2:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8016cf4:	2303      	movs	r3, #3
 8016cf6:	683a      	ldr	r2, [r7, #0]
 8016cf8:	2103      	movs	r1, #3
 8016cfa:	68b8      	ldr	r0, [r7, #8]
 8016cfc:	f7fb f978 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016d00:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8016d02:	2101      	movs	r1, #1
 8016d04:	68b8      	ldr	r0, [r7, #8]
 8016d06:	f7fa f8ad 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016d0a:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8016d0c:	2102      	movs	r1, #2
 8016d0e:	68b8      	ldr	r0, [r7, #8]
 8016d10:	f7fa f8a8 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016d14:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8016d16:	2101      	movs	r1, #1
 8016d18:	6838      	ldr	r0, [r7, #0]
 8016d1a:	f7fa f8a3 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016d1e:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8016d20:	2102      	movs	r1, #2
 8016d22:	6838      	ldr	r0, [r7, #0]
 8016d24:	f7fa f89e 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016d28:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	68db      	ldr	r3, [r3, #12]
 8016d2e:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	691b      	ldr	r3, [r3, #16]
 8016d34:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8016d36:	2300      	movs	r3, #0
 8016d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016d3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016d42:	429a      	cmp	r2, r3
 8016d44:	f280 80d4 	bge.w	8016ef0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x23c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016d48:	2300      	movs	r3, #0
 8016d4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016d4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d54:	429a      	cmp	r2, r3
 8016d56:	f280 80c5 	bge.w	8016ee4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x230>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016d5a:	2300      	movs	r3, #0
 8016d5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016d5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016d62:	429a      	cmp	r2, r3
 8016d64:	f280 80b8 	bge.w	8016ed8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x224>
        for (int channel = 0; channel < depth; ++channel) {
 8016d68:	2300      	movs	r3, #0
 8016d6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8016d6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016d6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016d70:	429a      	cmp	r2, r3
 8016d72:	f280 80ad 	bge.w	8016ed0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x21c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8016d76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016d78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016d7a:	fb02 f303 	mul.w	r3, r2, r3
 8016d7e:	68fa      	ldr	r2, [r7, #12]
 8016d80:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8016d84:	1a9b      	subs	r3, r3, r2
 8016d86:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8016d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016d8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016d8e:	fb02 f303 	mul.w	r3, r2, r3
 8016d92:	68fa      	ldr	r2, [r7, #12]
 8016d94:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8016d98:	1a9b      	subs	r3, r3, r2
 8016d9a:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	61bb      	str	r3, [r7, #24]
 8016da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016da2:	425b      	negs	r3, r3
 8016da4:	61fb      	str	r3, [r7, #28]
 8016da6:	f107 021c 	add.w	r2, r7, #28
 8016daa:	f107 0318 	add.w	r3, r7, #24
 8016dae:	4611      	mov	r1, r2
 8016db0:	4618      	mov	r0, r3
 8016db2:	f7f4 ff7b 	bl	800bcac <_ZSt3maxIiERKT_S2_S2_>
 8016db6:	4603      	mov	r3, r0
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	f103 0018 	add.w	r0, r3, #24
 8016dc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016dc6:	1ad3      	subs	r3, r2, r3
 8016dc8:	623b      	str	r3, [r7, #32]
 8016dca:	f107 0320 	add.w	r3, r7, #32
 8016dce:	4619      	mov	r1, r3
 8016dd0:	f7fb fd8d 	bl	80128ee <_ZSt3minIiERKT_S2_S2_>
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8016dda:	2300      	movs	r3, #0
 8016ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8016dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016de0:	425b      	negs	r3, r3
 8016de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8016de4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016dec:	4611      	mov	r1, r2
 8016dee:	4618      	mov	r0, r3
 8016df0:	f7f4 ff5c 	bl	800bcac <_ZSt3maxIiERKT_S2_S2_>
 8016df4:	4603      	mov	r3, r0
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	f103 0014 	add.w	r0, r3, #20
 8016e00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e04:	1ad3      	subs	r3, r2, r3
 8016e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016e0c:	4619      	mov	r1, r3
 8016e0e:	f7fb fd6e 	bl	80128ee <_ZSt3minIiERKT_S2_S2_>
 8016e12:	4603      	mov	r3, r0
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	63bb      	str	r3, [r7, #56]	; 0x38
          float max = std::numeric_limits<float>::lowest();
 8016e18:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8016e1c:	617b      	str	r3, [r7, #20]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8016e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e20:	677b      	str	r3, [r7, #116]	; 0x74
 8016e22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e26:	429a      	cmp	r2, r3
 8016e28:	da2b      	bge.n	8016e82 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ce>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8016e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e2c:	673b      	str	r3, [r7, #112]	; 0x70
 8016e2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e32:	429a      	cmp	r2, r3
 8016e34:	da21      	bge.n	8016e7a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8016e36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016e38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016e3a:	4413      	add	r3, r2
 8016e3c:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8016e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016e42:	4413      	add	r3, r2
 8016e44:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8016e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016e48:	9300      	str	r3, [sp, #0]
 8016e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e4e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8016e52:	68b8      	ldr	r0, [r7, #8]
 8016e54:	f7fb f874 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	009b      	lsls	r3, r3, #2
 8016e5c:	687a      	ldr	r2, [r7, #4]
 8016e5e:	441a      	add	r2, r3
 8016e60:	f107 0314 	add.w	r3, r7, #20
 8016e64:	4611      	mov	r1, r2
 8016e66:	4618      	mov	r0, r3
 8016e68:	f7f4 f9ae 	bl	800b1c8 <_ZSt3maxIfERKT_S2_S2_>
 8016e6c:	4603      	mov	r3, r0
              max = std::max(
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	617b      	str	r3, [r7, #20]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8016e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016e74:	3301      	adds	r3, #1
 8016e76:	673b      	str	r3, [r7, #112]	; 0x70
 8016e78:	e7d9      	b.n	8016e2e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8016e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016e7c:	3301      	adds	r3, #1
 8016e7e:	677b      	str	r3, [r7, #116]	; 0x74
 8016e80:	e7cf      	b.n	8016e22 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16e>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8016e82:	ed97 8a05 	vldr	s16, [r7, #20]
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8016e92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016e94:	9300      	str	r3, [sp, #0]
 8016e96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016e98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016e9c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8016ea0:	6838      	ldr	r0, [r7, #0]
 8016ea2:	f7fb f84d 	bl	8011f40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	009b      	lsls	r3, r3, #2
 8016eaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016eae:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8016eb0:	eeb0 1a49 	vmov.f32	s2, s18
 8016eb4:	eef0 0a68 	vmov.f32	s1, s17
 8016eb8:	eeb0 0a48 	vmov.f32	s0, s16
 8016ebc:	f7fb fd89 	bl	80129d2 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8016ec0:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8016ec4:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8016ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016eca:	3301      	adds	r3, #1
 8016ecc:	67bb      	str	r3, [r7, #120]	; 0x78
 8016ece:	e74d      	b.n	8016d6c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xb8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016ed0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016ed2:	3301      	adds	r3, #1
 8016ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016ed6:	e742      	b.n	8016d5e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xaa>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016edc:	3301      	adds	r3, #1
 8016ede:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016ee2:	e734      	b.n	8016d4e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 8016ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016ee8:	3301      	adds	r3, #1
 8016eea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016eee:	e725      	b.n	8016d3c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 8016ef0:	bf00      	nop
 8016ef2:	378c      	adds	r7, #140	; 0x8c
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	ecbd 8b04 	vpop	{d8-d9}
 8016efa:	bd90      	pop	{r4, r7, pc}

08016efc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input, TfLiteTensor* output,
                             OpData* data) {
 8016efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016efe:	b099      	sub	sp, #100	; 0x64
 8016f00:	af08      	add	r7, sp, #32
 8016f02:	6278      	str	r0, [r7, #36]	; 0x24
 8016f04:	6239      	str	r1, [r7, #32]
 8016f06:	61fa      	str	r2, [r7, #28]
 8016f08:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 8016f0a:	2101      	movs	r1, #1
 8016f0c:	69f8      	ldr	r0, [r7, #28]
 8016f0e:	f7f4 f9e2 	bl	800b2d6 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8016f12:	63f8      	str	r0, [r7, #60]	; 0x3c
  int width = SizeOfDimension(input, 2);
 8016f14:	2102      	movs	r1, #2
 8016f16:	69f8      	ldr	r0, [r7, #28]
 8016f18:	f7f4 f9dd 	bl	800b2d6 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8016f1c:	63b8      	str	r0, [r7, #56]	; 0x38

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 8016f1e:	6a3b      	ldr	r3, [r7, #32]
 8016f20:	689d      	ldr	r5, [r3, #8]
 8016f22:	6a3b      	ldr	r3, [r7, #32]
 8016f24:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 8016f26:	6a3b      	ldr	r3, [r7, #32]
 8016f28:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 8016f2a:	6a3a      	ldr	r2, [r7, #32]
 8016f2c:	68d2      	ldr	r2, [r2, #12]
 8016f2e:	6a39      	ldr	r1, [r7, #32]
 8016f30:	7809      	ldrb	r1, [r1, #0]
 8016f32:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8016f34:	6078      	str	r0, [r7, #4]
 8016f36:	f107 0408 	add.w	r4, r7, #8
 8016f3a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8016f3e:	9007      	str	r0, [sp, #28]
 8016f40:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8016f44:	9006      	str	r0, [sp, #24]
 8016f46:	9105      	str	r1, [sp, #20]
 8016f48:	9204      	str	r2, [sp, #16]
 8016f4a:	9303      	str	r3, [sp, #12]
 8016f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f4e:	9302      	str	r3, [sp, #8]
 8016f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f52:	9301      	str	r3, [sp, #4]
 8016f54:	2301      	movs	r3, #1
 8016f56:	9300      	str	r3, [sp, #0]
 8016f58:	2301      	movs	r3, #1
 8016f5a:	4632      	mov	r2, r6
 8016f5c:	4629      	mov	r1, r5
 8016f5e:	4620      	mov	r0, r4
 8016f60:	f7fb f8f1 	bl	8012146 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8016f64:	687c      	ldr	r4, [r7, #4]
 8016f66:	f107 0308 	add.w	r3, r7, #8
 8016f6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016f6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if (input->type == kTfLiteFloat32) {
 8016f70:	69fb      	ldr	r3, [r7, #28]
 8016f72:	781b      	ldrb	r3, [r3, #0]
 8016f74:	2b01      	cmp	r3, #1
 8016f76:	d10a      	bne.n	8016f8e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x92>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
 8016f78:	6a3b      	ldr	r3, [r7, #32]
 8016f7a:	7d18      	ldrb	r0, [r3, #20]
 8016f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f7e:	f103 011c 	add.w	r1, r3, #28
 8016f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f84:	3320      	adds	r3, #32
 8016f86:	461a      	mov	r2, r3
 8016f88:	f7fb fab6 	bl	80124f8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
 8016f8c:	e01e      	b.n	8016fcc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
                             &data->activation_max_f32);
  } else {
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8016f8e:	6a3b      	ldr	r3, [r7, #32]
 8016f90:	7d19      	ldrb	r1, [r3, #20]
 8016f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f94:	f103 0214 	add.w	r2, r3, #20
 8016f98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f9a:	3318      	adds	r3, #24
 8016f9c:	9300      	str	r3, [sp, #0]
 8016f9e:	4613      	mov	r3, r2
 8016fa0:	69ba      	ldr	r2, [r7, #24]
 8016fa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016fa4:	f7f4 fe2a 	bl	800bbfc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8016fa8:	4603      	mov	r3, r0
 8016faa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016fae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d002      	beq.n	8016fbc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xc0>
 8016fb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016fba:	e00c      	b.n	8016fd6 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xda>
        context, params->activation, output, &data->activation_min,
        &data->activation_max));
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 8016fbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016fbe:	695a      	ldr	r2, [r3, #20]
 8016fc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016fc2:	699b      	ldr	r3, [r3, #24]
 8016fc4:	429a      	cmp	r2, r3
 8016fc6:	dd01      	ble.n	8016fcc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
 8016fc8:	f00e f951 	bl	802526e <abort>
  }

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8016fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016fd2:	611a      	str	r2, [r3, #16]

  return kTfLiteOk;
 8016fd4:	2300      	movs	r3, #0
}
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	3744      	adds	r7, #68	; 0x44
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016fde <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116AverageEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSG_>:

void AverageEvalFloat(const TfLiteContext* context, const TfLiteNode* node,
                      const TfLitePoolParams* params, const OpData& data,
                      const TfLiteEvalTensor* input, TfLiteEvalTensor* output) {
 8016fde:	b590      	push	{r4, r7, lr}
 8016fe0:	b0a1      	sub	sp, #132	; 0x84
 8016fe2:	af02      	add	r7, sp, #8
 8016fe4:	60f8      	str	r0, [r7, #12]
 8016fe6:	60b9      	str	r1, [r7, #8]
 8016fe8:	607a      	str	r2, [r7, #4]
 8016fea:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	7d1b      	ldrb	r3, [r3, #20]
 8016ff0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016ff4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7fb fa7d 	bl	80124f8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);

  PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	689b      	ldr	r3, [r3, #8]
 8017002:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	685b      	ldr	r3, [r3, #4]
 8017008:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	691b      	ldr	r3, [r3, #16]
 801700e:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	68db      	ldr	r3, [r3, #12]
 8017014:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 8017016:	683b      	ldr	r3, [r7, #0]
 8017018:	685b      	ldr	r3, [r3, #4]
 801701a:	b21b      	sxth	r3, r3
 801701c:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	b21b      	sxth	r3, r3
 8017024:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = activation_min;
 8017026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017028:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = activation_max;
 801702a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801702c:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 801702e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017032:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8017036:	4618      	mov	r0, r3
 8017038:	f7fb fc93 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801703c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8017040:	f7fa fcc2 	bl	80119c8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8017044:	4604      	mov	r4, r0
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
 8017046:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801704a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801704e:	4618      	mov	r0, r3
 8017050:	f7fb fc87 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8017054:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8017058:	f7fa fcc5 	bl	80119e6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801705c:	4602      	mov	r2, r0
 801705e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8017062:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8017066:	f107 0014 	add.w	r0, r7, #20
 801706a:	9200      	str	r2, [sp, #0]
 801706c:	4622      	mov	r2, r4
 801706e:	f7ff fce1 	bl	8016a34 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                             tflite::micro::GetTensorShape(output),
 8017072:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8017076:	4618      	mov	r0, r3
 8017078:	f7f4 ff9f 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 801707c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017080:	4618      	mov	r0, r3
 8017082:	f7f4 ff9a 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<float>(output));
}
 8017086:	bf00      	nop
 8017088:	377c      	adds	r7, #124	; 0x7c
 801708a:	46bd      	mov	sp, r7
 801708c:	bd90      	pop	{r4, r7, pc}

0801708e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>:

void AverageEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
                          const TfLitePoolParams* params, const OpData& data,
                          const TfLiteEvalTensor* input,
                          TfLiteEvalTensor* output) {
 801708e:	b590      	push	{r4, r7, lr}
 8017090:	b0ab      	sub	sp, #172	; 0xac
 8017092:	af04      	add	r7, sp, #16
 8017094:	60f8      	str	r0, [r7, #12]
 8017096:	60b9      	str	r1, [r7, #8]
 8017098:	607a      	str	r2, [r7, #4]
 801709a:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteInt8);
 801709c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80170a0:	7a1b      	ldrb	r3, [r3, #8]
 80170a2:	2b09      	cmp	r3, #9
 80170a4:	d001      	beq.n	80170aa <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x1c>
 80170a6:	f00e f8e2 	bl	802526e <abort>

  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80170aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80170ae:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80170b2:	4618      	mov	r0, r3
 80170b4:	f7fb fc55 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80170b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80170bc:	4618      	mov	r0, r3
 80170be:	f7f4 ff92 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80170c2:	4603      	mov	r3, r0
 80170c4:	2b04      	cmp	r3, #4
 80170c6:	d001      	beq.n	80170cc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x3e>
 80170c8:	f00e f8d1 	bl	802526e <abort>

  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80170cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80170d0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80170d4:	4618      	mov	r0, r3
 80170d6:	f7fb fc44 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80170da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80170de:	4618      	mov	r0, r3
 80170e0:	f7f4 ff81 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80170e4:	4603      	mov	r3, r0
 80170e6:	2b04      	cmp	r3, #4
 80170e8:	d001      	beq.n	80170ee <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x60>
 80170ea:	f00e f8c0 	bl	802526e <abort>

  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80170ee:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80170f2:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80170f6:	2303      	movs	r3, #3
 80170f8:	2103      	movs	r1, #3
 80170fa:	f7fa ff79 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80170fe:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  cmsis_nn_dims input_dims;
  input_dims.n = 1;
 8017102:	2301      	movs	r3, #1
 8017104:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 8017106:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801710a:	2101      	movs	r1, #1
 801710c:	4618      	mov	r0, r3
 801710e:	f7f9 fea9 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017112:	4603      	mov	r3, r0
 8017114:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 8017116:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801711a:	2102      	movs	r1, #2
 801711c:	4618      	mov	r0, r3
 801711e:	f7f9 fea1 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017122:	4603      	mov	r3, r0
 8017124:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = depth;
 8017126:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801712a:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims output_dims;
  output_dims.n = 1;
 801712c:	2301      	movs	r3, #1
 801712e:	647b      	str	r3, [r7, #68]	; 0x44
  output_dims.h = output_shape.Dims(1);
 8017130:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017134:	2101      	movs	r1, #1
 8017136:	4618      	mov	r0, r3
 8017138:	f7f9 fe94 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 801713c:	4603      	mov	r3, r0
 801713e:	64bb      	str	r3, [r7, #72]	; 0x48
  output_dims.w = output_shape.Dims(2);
 8017140:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017144:	2102      	movs	r1, #2
 8017146:	4618      	mov	r0, r3
 8017148:	f7f9 fe8c 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 801714c:	4603      	mov	r3, r0
 801714e:	64fb      	str	r3, [r7, #76]	; 0x4c
  output_dims.c = depth;
 8017150:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017154:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_pool_params pool_params;
  pool_params.stride.h = params->stride_height;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	689b      	ldr	r3, [r3, #8]
 801715a:	633b      	str	r3, [r7, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	685b      	ldr	r3, [r3, #4]
 8017160:	62fb      	str	r3, [r7, #44]	; 0x2c
  pool_params.padding.h = data.padding.height;
 8017162:	683b      	ldr	r3, [r7, #0]
 8017164:	685b      	ldr	r3, [r3, #4]
 8017166:	63bb      	str	r3, [r7, #56]	; 0x38
  pool_params.padding.w = data.padding.width;
 8017168:	683b      	ldr	r3, [r7, #0]
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	637b      	str	r3, [r7, #52]	; 0x34
  pool_params.activation.min = data.activation_min;
 801716e:	683b      	ldr	r3, [r7, #0]
 8017170:	695b      	ldr	r3, [r3, #20]
 8017172:	63fb      	str	r3, [r7, #60]	; 0x3c
  pool_params.activation.max = data.activation_max;
 8017174:	683b      	ldr	r3, [r7, #0]
 8017176:	699b      	ldr	r3, [r3, #24]
 8017178:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims filter_dims;
  filter_dims.n = 1;
 801717a:	2301      	movs	r3, #1
 801717c:	61fb      	str	r3, [r7, #28]
  filter_dims.h = params->filter_height;
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	691b      	ldr	r3, [r3, #16]
 8017182:	623b      	str	r3, [r7, #32]
  filter_dims.w = params->filter_width;
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	68db      	ldr	r3, [r3, #12]
 8017188:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.c = 1;
 801718a:	2301      	movs	r3, #1
 801718c:	62bb      	str	r3, [r7, #40]	; 0x28

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 801718e:	2300      	movs	r3, #0
 8017190:	617b      	str	r3, [r7, #20]
  ctx.size = 0;
 8017192:	2300      	movs	r3, #0
 8017194:	61bb      	str	r3, [r7, #24]
  if (data.buffer_idx > -1) {
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	691b      	ldr	r3, [r3, #16]
 801719a:	2b00      	cmp	r3, #0
 801719c:	db08      	blt.n	80171b0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x122>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171a2:	683a      	ldr	r2, [r7, #0]
 80171a4:	6912      	ldr	r2, [r2, #16]
 80171a6:	4611      	mov	r1, r2
 80171a8:	68f8      	ldr	r0, [r7, #12]
 80171aa:	4798      	blx	r3
 80171ac:	4603      	mov	r3, r0
 80171ae:	617b      	str	r3, [r7, #20]
  }

  TFLITE_DCHECK_EQ(arm_avgpool_s8(&ctx, &pool_params, &input_dims,
 80171b0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80171b4:	f7fa fc28 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80171b8:	4604      	mov	r4, r0
 80171ba:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80171be:	f7fa fc32 	bl	8011a26 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80171c2:	4603      	mov	r3, r0
 80171c4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80171c8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80171cc:	f107 0014 	add.w	r0, r7, #20
 80171d0:	9302      	str	r3, [sp, #8]
 80171d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80171d6:	9301      	str	r3, [sp, #4]
 80171d8:	f107 031c 	add.w	r3, r7, #28
 80171dc:	9300      	str	r3, [sp, #0]
 80171de:	4623      	mov	r3, r4
 80171e0:	f00a f9e6 	bl	80215b0 <arm_avgpool_s8>
 80171e4:	4603      	mov	r3, r0
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d001      	beq.n	80171ee <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x160>
 80171ea:	f00e f840 	bl	802526e <abort>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80171ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80171f2:	4618      	mov	r0, r3
 80171f4:	f7f4 fee1 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80171f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80171fc:	4618      	mov	r0, r3
 80171fe:	f7f4 fedc 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
                                  tflite::micro::GetTensorData<int8_t>(input),
                                  &filter_dims, &output_dims,
                                  tflite::micro::GetTensorData<int8_t>(output)),
                   ARM_MATH_SUCCESS);
}
 8017202:	bf00      	nop
 8017204:	379c      	adds	r7, #156	; 0x9c
 8017206:	46bd      	mov	sp, r7
 8017208:	bd90      	pop	{r4, r7, pc}

0801720a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>:

void MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,
                  TfLitePoolParams* params, const OpData& data,
                  const TfLiteEvalTensor* input, TfLiteEvalTensor* output) {
 801720a:	b590      	push	{r4, r7, lr}
 801720c:	b0a1      	sub	sp, #132	; 0x84
 801720e:	af02      	add	r7, sp, #8
 8017210:	60f8      	str	r0, [r7, #12]
 8017212:	60b9      	str	r1, [r7, #8]
 8017214:	607a      	str	r2, [r7, #4]
 8017216:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	7d1b      	ldrb	r3, [r3, #20]
 801721c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017220:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8017224:	4618      	mov	r0, r3
 8017226:	f7fb f967 	bl	80124f8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	689b      	ldr	r3, [r3, #8]
 801722e:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	685b      	ldr	r3, [r3, #4]
 8017234:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	691b      	ldr	r3, [r3, #16]
 801723a:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	68db      	ldr	r3, [r3, #12]
 8017240:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	685b      	ldr	r3, [r3, #4]
 8017246:	b21b      	sxth	r3, r3
 8017248:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 801724a:	683b      	ldr	r3, [r7, #0]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	b21b      	sxth	r3, r3
 8017250:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = data.activation_min_f32;
 8017252:	683b      	ldr	r3, [r7, #0]
 8017254:	69db      	ldr	r3, [r3, #28]
 8017256:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = data.activation_max_f32;
 8017258:	683b      	ldr	r3, [r7, #0]
 801725a:	6a1b      	ldr	r3, [r3, #32]
 801725c:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 801725e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017262:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8017266:	4618      	mov	r0, r3
 8017268:	f7fb fb7b 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801726c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8017270:	f7fa fbaa 	bl	80119c8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8017274:	4604      	mov	r4, r0
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
 8017276:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801727a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801727e:	4618      	mov	r0, r3
 8017280:	f7fb fb6f 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8017284:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8017288:	f7fa fbad 	bl	80119e6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801728c:	4602      	mov	r2, r0
 801728e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8017292:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8017296:	f107 0014 	add.w	r0, r7, #20
 801729a:	9200      	str	r2, [sp, #0]
 801729c:	4622      	mov	r2, r4
 801729e:	f7ff fd09 	bl	8016cb4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         tflite::micro::GetTensorShape(output),
 80172a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80172a6:	4618      	mov	r0, r3
 80172a8:	f7f4 fe87 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 80172ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80172b0:	4618      	mov	r0, r3
 80172b2:	f7f4 fe82 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorData<float>(output));
}
 80172b6:	bf00      	nop
 80172b8:	377c      	adds	r7, #124	; 0x7c
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd90      	pop	{r4, r7, pc}

080172be <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>:

TfLiteStatus MaxEvalInt8(TfLiteContext* context, const TfLiteNode* node,
                         const TfLitePoolParams* params, const OpData& data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
 80172be:	b590      	push	{r4, r7, lr}
 80172c0:	b0ab      	sub	sp, #172	; 0xac
 80172c2:	af04      	add	r7, sp, #16
 80172c4:	60f8      	str	r0, [r7, #12]
 80172c6:	60b9      	str	r1, [r7, #8]
 80172c8:	607a      	str	r2, [r7, #4]
 80172ca:	603b      	str	r3, [r7, #0]
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80172cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80172d0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80172d4:	4618      	mov	r0, r3
 80172d6:	f7fb fb44 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80172da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80172de:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80172e2:	4618      	mov	r0, r3
 80172e4:	f7fb fb3d 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80172e8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80172ec:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80172f0:	2303      	movs	r3, #3
 80172f2:	2103      	movs	r1, #3
 80172f4:	f7fa fe7c 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80172f8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  cmsis_nn_dims input_dims;
  input_dims.n = 1;
 80172fc:	2301      	movs	r3, #1
 80172fe:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 8017300:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017304:	2101      	movs	r1, #1
 8017306:	4618      	mov	r0, r3
 8017308:	f7f9 fdac 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 801730c:	4603      	mov	r3, r0
 801730e:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 8017310:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017314:	2102      	movs	r1, #2
 8017316:	4618      	mov	r0, r3
 8017318:	f7f9 fda4 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 801731c:	4603      	mov	r3, r0
 801731e:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = depth;
 8017320:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017324:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims output_dims;
  output_dims.n = 1;
 8017326:	2301      	movs	r3, #1
 8017328:	647b      	str	r3, [r7, #68]	; 0x44
  output_dims.h = output_shape.Dims(1);
 801732a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801732e:	2101      	movs	r1, #1
 8017330:	4618      	mov	r0, r3
 8017332:	f7f9 fd97 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017336:	4603      	mov	r3, r0
 8017338:	64bb      	str	r3, [r7, #72]	; 0x48
  output_dims.w = output_shape.Dims(2);
 801733a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801733e:	2102      	movs	r1, #2
 8017340:	4618      	mov	r0, r3
 8017342:	f7f9 fd8f 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017346:	4603      	mov	r3, r0
 8017348:	64fb      	str	r3, [r7, #76]	; 0x4c
  output_dims.c = depth;
 801734a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801734e:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_pool_params pool_params;
  pool_params.stride.h = params->stride_height;
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	689b      	ldr	r3, [r3, #8]
 8017354:	633b      	str	r3, [r7, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	685b      	ldr	r3, [r3, #4]
 801735a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pool_params.padding.h = data.padding.height;
 801735c:	683b      	ldr	r3, [r7, #0]
 801735e:	685b      	ldr	r3, [r3, #4]
 8017360:	63bb      	str	r3, [r7, #56]	; 0x38
  pool_params.padding.w = data.padding.width;
 8017362:	683b      	ldr	r3, [r7, #0]
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	637b      	str	r3, [r7, #52]	; 0x34
  pool_params.activation.min = data.activation_min;
 8017368:	683b      	ldr	r3, [r7, #0]
 801736a:	695b      	ldr	r3, [r3, #20]
 801736c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pool_params.activation.max = data.activation_max;
 801736e:	683b      	ldr	r3, [r7, #0]
 8017370:	699b      	ldr	r3, [r3, #24]
 8017372:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims filter_dims;
  filter_dims.n = 1;
 8017374:	2301      	movs	r3, #1
 8017376:	61fb      	str	r3, [r7, #28]
  filter_dims.h = params->filter_height;
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	691b      	ldr	r3, [r3, #16]
 801737c:	623b      	str	r3, [r7, #32]
  filter_dims.w = params->filter_width;
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	68db      	ldr	r3, [r3, #12]
 8017382:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.c = 1;
 8017384:	2301      	movs	r3, #1
 8017386:	62bb      	str	r3, [r7, #40]	; 0x28

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 8017388:	2300      	movs	r3, #0
 801738a:	617b      	str	r3, [r7, #20]
  ctx.size = 0;
 801738c:	2300      	movs	r3, #0
 801738e:	61bb      	str	r3, [r7, #24]
  if (data.buffer_idx > -1) {
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	691b      	ldr	r3, [r3, #16]
 8017394:	2b00      	cmp	r3, #0
 8017396:	db08      	blt.n	80173aa <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xec>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801739c:	683a      	ldr	r2, [r7, #0]
 801739e:	6912      	ldr	r2, [r2, #16]
 80173a0:	4611      	mov	r1, r2
 80173a2:	68f8      	ldr	r0, [r7, #12]
 80173a4:	4798      	blx	r3
 80173a6:	4603      	mov	r3, r0
 80173a8:	617b      	str	r3, [r7, #20]
  }

  TFLITE_DCHECK_EQ(
 80173aa:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80173ae:	f7fa fb2b 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80173b2:	4604      	mov	r4, r0
 80173b4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80173b8:	f7fa fb35 	bl	8011a26 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80173bc:	4603      	mov	r3, r0
 80173be:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80173c2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80173c6:	f107 0014 	add.w	r0, r7, #20
 80173ca:	9302      	str	r3, [sp, #8]
 80173cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80173d0:	9301      	str	r3, [sp, #4]
 80173d2:	f107 031c 	add.w	r3, r7, #28
 80173d6:	9300      	str	r3, [sp, #0]
 80173d8:	4623      	mov	r3, r4
 80173da:	f00a fb26 	bl	8021a2a <arm_max_pool_s8>
 80173de:	4603      	mov	r3, r0
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d001      	beq.n	80173e8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x12a>
 80173e4:	f00d ff43 	bl	802526e <abort>
                      tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
                      &output_dims,
                      tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 80173e8:	2400      	movs	r4, #0
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80173ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80173ee:	4618      	mov	r0, r3
 80173f0:	f7f4 fde3 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80173f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80173f8:	4618      	mov	r0, r3
 80173fa:	f7f4 fdde 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 80173fe:	4623      	mov	r3, r4
}
 8017400:	4618      	mov	r0, r3
 8017402:	379c      	adds	r7, #156	; 0x9c
 8017404:	46bd      	mov	sp, r7
 8017406:	bd90      	pop	{r4, r7, pc}

08017408 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8017408:	b580      	push	{r7, lr}
 801740a:	b084      	sub	sp, #16
 801740c:	af00      	add	r7, sp, #0
 801740e:	60f8      	str	r0, [r7, #12]
 8017410:	60b9      	str	r1, [r7, #8]
 8017412:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017418:	2b00      	cmp	r3, #0
 801741a:	d101      	bne.n	8017420 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x18>
 801741c:	f00d ff27 	bl	802526e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017424:	2124      	movs	r1, #36	; 0x24
 8017426:	68f8      	ldr	r0, [r7, #12]
 8017428:	4798      	blx	r3
 801742a:	4603      	mov	r3, r0
}
 801742c:	4618      	mov	r0, r3
 801742e:	3710      	adds	r7, #16
 8017430:	46bd      	mov	sp, r7
 8017432:	bd80      	pop	{r7, pc}

08017434 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8017434:	b590      	push	{r4, r7, lr}
 8017436:	b08b      	sub	sp, #44	; 0x2c
 8017438:	af02      	add	r7, sp, #8
 801743a:	6078      	str	r0, [r7, #4]
 801743c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801743e:	683b      	ldr	r3, [r7, #0]
 8017440:	691b      	ldr	r3, [r3, #16]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d101      	bne.n	801744a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8017446:	f00d ff12 	bl	802526e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801744a:	683b      	ldr	r3, [r7, #0]
 801744c:	695b      	ldr	r3, [r3, #20]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d101      	bne.n	8017456 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8017452:	f00d ff0c 	bl	802526e <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8017456:	683b      	ldr	r3, [r7, #0]
 8017458:	691b      	ldr	r3, [r3, #16]
 801745a:	61fb      	str	r3, [r7, #28]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 801745c:	683b      	ldr	r3, [r7, #0]
 801745e:	695b      	ldr	r3, [r3, #20]
 8017460:	61bb      	str	r3, [r7, #24]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8017462:	2200      	movs	r2, #0
 8017464:	6839      	ldr	r1, [r7, #0]
 8017466:	6878      	ldr	r0, [r7, #4]
 8017468:	f7f3 fffc 	bl	800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801746c:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 801746e:	697b      	ldr	r3, [r7, #20]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d10a      	bne.n	801748a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x56>
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	695c      	ldr	r4, [r3, #20]
 8017478:	4b18      	ldr	r3, [pc, #96]	; (80174dc <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 801747a:	9300      	str	r3, [sp, #0]
 801747c:	23f2      	movs	r3, #242	; 0xf2
 801747e:	4a18      	ldr	r2, [pc, #96]	; (80174e0 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
 8017480:	4918      	ldr	r1, [pc, #96]	; (80174e4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 8017482:	6878      	ldr	r0, [r7, #4]
 8017484:	47a0      	blx	r4
 8017486:	2301      	movs	r3, #1
 8017488:	e023      	b.n	80174d2 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x9e>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801748a:	2200      	movs	r2, #0
 801748c:	6839      	ldr	r1, [r7, #0]
 801748e:	6878      	ldr	r0, [r7, #4]
 8017490:	f7f3 fff8 	bl	800b484 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8017494:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, output != nullptr);
 8017496:	693b      	ldr	r3, [r7, #16]
 8017498:	2b00      	cmp	r3, #0
 801749a:	d10a      	bne.n	80174b2 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	695c      	ldr	r4, [r3, #20]
 80174a0:	4b11      	ldr	r3, [pc, #68]	; (80174e8 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 80174a2:	9300      	str	r3, [sp, #0]
 80174a4:	23f4      	movs	r3, #244	; 0xf4
 80174a6:	4a0e      	ldr	r2, [pc, #56]	; (80174e0 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
 80174a8:	490e      	ldr	r1, [pc, #56]	; (80174e4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	47a0      	blx	r4
 80174ae:	2301      	movs	r3, #1
 80174b0:	e00f      	b.n	80174d2 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x9e>

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 80174b2:	69fb      	ldr	r3, [r7, #28]
 80174b4:	9300      	str	r3, [sp, #0]
 80174b6:	693b      	ldr	r3, [r7, #16]
 80174b8:	697a      	ldr	r2, [r7, #20]
 80174ba:	69b9      	ldr	r1, [r7, #24]
 80174bc:	6878      	ldr	r0, [r7, #4]
 80174be:	f7ff fd1d 	bl	8016efc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 80174c2:	4603      	mov	r3, r0
 80174c4:	73fb      	strb	r3, [r7, #15]
 80174c6:	7bfb      	ldrb	r3, [r7, #15]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d001      	beq.n	80174d0 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x9c>
 80174cc:	7bfb      	ldrb	r3, [r7, #15]
 80174ce:	e000      	b.n	80174d2 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x9e>

  return kTfLiteOk;
 80174d0:	2300      	movs	r3, #0
}
 80174d2:	4618      	mov	r0, r3
 80174d4:	3724      	adds	r7, #36	; 0x24
 80174d6:	46bd      	mov	sp, r7
 80174d8:	bd90      	pop	{r4, r7, pc}
 80174da:	bf00      	nop
 80174dc:	0802ba34 	.word	0x0802ba34
 80174e0:	0802b9d4 	.word	0x0802b9d4
 80174e4:	0802ba1c 	.word	0x0802ba1c
 80174e8:	0802ba48 	.word	0x0802ba48

080174ec <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 80174ec:	b5b0      	push	{r4, r5, r7, lr}
 80174ee:	b09a      	sub	sp, #104	; 0x68
 80174f0:	af02      	add	r7, sp, #8
 80174f2:	6078      	str	r0, [r7, #4]
 80174f4:	6039      	str	r1, [r7, #0]
 80174f6:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 80174f8:	683b      	ldr	r3, [r7, #0]
 80174fa:	691b      	ldr	r3, [r3, #16]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d101      	bne.n	8017504 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8017500:	f00d feb5 	bl	802526e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8017504:	683b      	ldr	r3, [r7, #0]
 8017506:	695b      	ldr	r3, [r3, #20]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d101      	bne.n	8017510 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x24>
 801750c:	f00d feaf 	bl	802526e <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8017510:	683b      	ldr	r3, [r7, #0]
 8017512:	691b      	ldr	r3, [r3, #16]
 8017514:	65fb      	str	r3, [r7, #92]	; 0x5c
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8017516:	683b      	ldr	r3, [r7, #0]
 8017518:	695b      	ldr	r3, [r3, #20]
 801751a:	65bb      	str	r3, [r7, #88]	; 0x58

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801751c:	2200      	movs	r2, #0
 801751e:	6839      	ldr	r1, [r7, #0]
 8017520:	6878      	ldr	r0, [r7, #4]
 8017522:	f7f3 ff9f 	bl	800b464 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8017526:	6578      	str	r0, [r7, #84]	; 0x54
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8017528:	2200      	movs	r2, #0
 801752a:	6839      	ldr	r1, [r7, #0]
 801752c:	6878      	ldr	r0, [r7, #4]
 801752e:	f7f3 ffa9 	bl	800b484 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8017532:	6538      	str	r0, [r7, #80]	; 0x50

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 8017534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017536:	9300      	str	r3, [sp, #0]
 8017538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801753a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801753c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801753e:	6878      	ldr	r0, [r7, #4]
 8017540:	f7ff fcdc 	bl	8016efc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 8017544:	4603      	mov	r3, r0
 8017546:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801754a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801754e:	2b00      	cmp	r3, #0
 8017550:	d002      	beq.n	8017558 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 8017552:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 8017556:	e064      	b.n	8017622 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>

  if (input->type == kTfLiteInt8) {
 8017558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801755a:	781b      	ldrb	r3, [r3, #0]
 801755c:	2b09      	cmp	r3, #9
 801755e:	d15f      	bne.n	8017620 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x134>
    RuntimeShape input_shape = GetTensorShape(input);
 8017560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017564:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017566:	4618      	mov	r0, r3
 8017568:	f7f4 fda1 	bl	800c0ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801756c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017570:	4618      	mov	r0, r3
 8017572:	f7f4 fd38 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017576:	4603      	mov	r3, r0
 8017578:	2b04      	cmp	r3, #4
 801757a:	d001      	beq.n	8017580 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x94>
 801757c:	f00d fe77 	bl	802526e <abort>

    RuntimeShape output_shape = GetTensorShape(output);
 8017580:	f107 030c 	add.w	r3, r7, #12
 8017584:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017586:	4618      	mov	r0, r3
 8017588:	f7f4 fd91 	bl	800c0ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801758c:	f107 030c 	add.w	r3, r7, #12
 8017590:	4618      	mov	r0, r3
 8017592:	f7f4 fd28 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017596:	4603      	mov	r3, r0
 8017598:	2b04      	cmp	r3, #4
 801759a:	d001      	beq.n	80175a0 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xb4>
 801759c:	f00d fe67 	bl	802526e <abort>

    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80175a0:	f107 020c 	add.w	r2, r7, #12
 80175a4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80175a8:	2303      	movs	r3, #3
 80175aa:	2103      	movs	r1, #3
 80175ac:	f7fa fd20 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80175b0:	64b8      	str	r0, [r7, #72]	; 0x48
    const int output_width = output_shape.Dims(2);
 80175b2:	f107 030c 	add.w	r3, r7, #12
 80175b6:	2102      	movs	r1, #2
 80175b8:	4618      	mov	r0, r3
 80175ba:	f7f9 fc53 	bl	8010e64 <_ZNK6tflite12RuntimeShape4DimsEi>
 80175be:	6478      	str	r0, [r7, #68]	; 0x44

    const int32_t buffer_size =
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 80175c0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80175c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80175c4:	f00a f904 	bl	80217d0 <arm_avgpool_s8_get_buffer_size>
 80175c8:	6438      	str	r0, [r7, #64]	; 0x40

    if (buffer_size > 0) {
 80175ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	dd11      	ble.n	80175f4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80175d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80175d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80175d8:	3210      	adds	r2, #16
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	4798      	blx	r3
 80175de:	4603      	mov	r3, r0
 80175e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80175e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d007      	beq.n	80175fc <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x110>
 80175ec:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 80175f0:	2500      	movs	r5, #0
 80175f2:	e004      	b.n	80175fe <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x112>
          context, buffer_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 80175f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80175f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80175fa:	611a      	str	r2, [r3, #16]
    RuntimeShape output_shape = GetTensorShape(output);
 80175fc:	2501      	movs	r5, #1
 80175fe:	f107 030c 	add.w	r3, r7, #12
 8017602:	4618      	mov	r0, r3
 8017604:	f7f4 fcd9 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
 8017608:	2d01      	cmp	r5, #1
 801760a:	d001      	beq.n	8017610 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x124>
 801760c:	2500      	movs	r5, #0
 801760e:	e000      	b.n	8017612 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x126>
    RuntimeShape input_shape = GetTensorShape(input);
 8017610:	2501      	movs	r5, #1
 8017612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017616:	4618      	mov	r0, r3
 8017618:	f7f4 fccf 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
 801761c:	2d01      	cmp	r5, #1
 801761e:	d100      	bne.n	8017622 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>
    }
  }
  return kTfLiteOk;
 8017620:	2400      	movs	r4, #0
 8017622:	4623      	mov	r3, r4
}
 8017624:	4618      	mov	r0, r3
 8017626:	3760      	adds	r7, #96	; 0x60
 8017628:	46bd      	mov	sp, r7
 801762a:	bdb0      	pop	{r4, r5, r7, pc}

0801762c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 801762c:	b590      	push	{r4, r7, lr}
 801762e:	b089      	sub	sp, #36	; 0x24
 8017630:	af02      	add	r7, sp, #8
 8017632:	6078      	str	r0, [r7, #4]
 8017634:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8017636:	683b      	ldr	r3, [r7, #0]
 8017638:	695b      	ldr	r3, [r3, #20]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d101      	bne.n	8017642 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801763e:	f00d fe16 	bl	802526e <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8017642:	683b      	ldr	r3, [r7, #0]
 8017644:	695b      	ldr	r3, [r3, #20]
 8017646:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 8017648:	683b      	ldr	r3, [r7, #0]
 801764a:	691b      	ldr	r3, [r3, #16]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d101      	bne.n	8017654 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x28>
 8017650:	f00d fe0d 	bl	802526e <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8017654:	683b      	ldr	r3, [r7, #0]
 8017656:	691b      	ldr	r3, [r3, #16]
 8017658:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801765a:	2200      	movs	r2, #0
 801765c:	6839      	ldr	r1, [r7, #0]
 801765e:	6878      	ldr	r0, [r7, #4]
 8017660:	f7f9 fcd4 	bl	801100c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8017664:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8017666:	2200      	movs	r2, #0
 8017668:	6839      	ldr	r1, [r7, #0]
 801766a:	6878      	ldr	r0, [r7, #4]
 801766c:	f7f9 fcde 	bl	801102c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8017670:	60b8      	str	r0, [r7, #8]

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	7a1b      	ldrb	r3, [r3, #8]
 8017676:	2b01      	cmp	r3, #1
 8017678:	d002      	beq.n	8017680 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x54>
 801767a:	2b09      	cmp	r3, #9
 801767c:	d00b      	beq.n	8017696 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6a>
 801767e:	e015      	b.n	80176ac <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x80>
    case kTfLiteFloat32:
      AverageEvalFloat(context, node, params, data, input, output);
 8017680:	68bb      	ldr	r3, [r7, #8]
 8017682:	9301      	str	r3, [sp, #4]
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	9300      	str	r3, [sp, #0]
 8017688:	693b      	ldr	r3, [r7, #16]
 801768a:	697a      	ldr	r2, [r7, #20]
 801768c:	6839      	ldr	r1, [r7, #0]
 801768e:	6878      	ldr	r0, [r7, #4]
 8017690:	f7ff fca5 	bl	8016fde <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116AverageEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSG_>
      break;
 8017694:	e018      	b.n	80176c8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x9c>
    case kTfLiteInt8:
      AverageEvalQuantized(context, node, params, data, input, output);
 8017696:	68bb      	ldr	r3, [r7, #8]
 8017698:	9301      	str	r3, [sp, #4]
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	9300      	str	r3, [sp, #0]
 801769e:	693b      	ldr	r3, [r7, #16]
 80176a0:	697a      	ldr	r2, [r7, #20]
 80176a2:	6839      	ldr	r1, [r7, #0]
 80176a4:	6878      	ldr	r0, [r7, #4]
 80176a6:	f7ff fcf2 	bl	801708e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>
      break;
 80176aa:	e00d      	b.n	80176c8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x9c>
    default:
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	695c      	ldr	r4, [r3, #20]
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	7a1b      	ldrb	r3, [r3, #8]
 80176b4:	4618      	mov	r0, r3
 80176b6:	f7f1 f871 	bl	800879c <TfLiteTypeGetName>
 80176ba:	4603      	mov	r3, r0
 80176bc:	461a      	mov	r2, r3
 80176be:	4905      	ldr	r1, [pc, #20]	; (80176d4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
 80176c0:	6878      	ldr	r0, [r7, #4]
 80176c2:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 80176c4:	2301      	movs	r3, #1
 80176c6:	e000      	b.n	80176ca <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x9e>
  }
  return kTfLiteOk;
 80176c8:	2300      	movs	r3, #0
}
 80176ca:	4618      	mov	r0, r3
 80176cc:	371c      	adds	r7, #28
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd90      	pop	{r4, r7, pc}
 80176d2:	bf00      	nop
 80176d4:	0802ba5c 	.word	0x0802ba5c

080176d8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 80176d8:	b590      	push	{r4, r7, lr}
 80176da:	b089      	sub	sp, #36	; 0x24
 80176dc:	af02      	add	r7, sp, #8
 80176de:	6078      	str	r0, [r7, #4]
 80176e0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80176e2:	683b      	ldr	r3, [r7, #0]
 80176e4:	695b      	ldr	r3, [r3, #20]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d101      	bne.n	80176ee <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x16>
 80176ea:	f00d fdc0 	bl	802526e <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 80176ee:	683b      	ldr	r3, [r7, #0]
 80176f0:	695b      	ldr	r3, [r3, #20]
 80176f2:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 80176f4:	683b      	ldr	r3, [r7, #0]
 80176f6:	691b      	ldr	r3, [r3, #16]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d101      	bne.n	8017700 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x28>
 80176fc:	f00d fdb7 	bl	802526e <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8017700:	683b      	ldr	r3, [r7, #0]
 8017702:	691b      	ldr	r3, [r3, #16]
 8017704:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8017706:	2200      	movs	r2, #0
 8017708:	6839      	ldr	r1, [r7, #0]
 801770a:	6878      	ldr	r0, [r7, #4]
 801770c:	f7f9 fc7e 	bl	801100c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8017710:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8017712:	2200      	movs	r2, #0
 8017714:	6839      	ldr	r1, [r7, #0]
 8017716:	6878      	ldr	r0, [r7, #4]
 8017718:	f7f9 fc88 	bl	801102c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801771c:	60b8      	str	r0, [r7, #8]

  switch (input->type) {
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	7a1b      	ldrb	r3, [r3, #8]
 8017722:	2b01      	cmp	r3, #1
 8017724:	d002      	beq.n	801772c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x54>
 8017726:	2b09      	cmp	r3, #9
 8017728:	d00b      	beq.n	8017742 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a>
 801772a:	e015      	b.n	8017758 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x80>
    case kTfLiteFloat32:
      MaxEvalFloat(context, node, params, data, input, output);
 801772c:	68bb      	ldr	r3, [r7, #8]
 801772e:	9301      	str	r3, [sp, #4]
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	9300      	str	r3, [sp, #0]
 8017734:	693b      	ldr	r3, [r7, #16]
 8017736:	697a      	ldr	r2, [r7, #20]
 8017738:	6839      	ldr	r1, [r7, #0]
 801773a:	6878      	ldr	r0, [r7, #4]
 801773c:	f7ff fd65 	bl	801720a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>
      break;
 8017740:	e018      	b.n	8017774 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9c>
    case kTfLiteInt8:
      MaxEvalInt8(context, node, params, data, input, output);
 8017742:	68bb      	ldr	r3, [r7, #8]
 8017744:	9301      	str	r3, [sp, #4]
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	9300      	str	r3, [sp, #0]
 801774a:	693b      	ldr	r3, [r7, #16]
 801774c:	697a      	ldr	r2, [r7, #20]
 801774e:	6839      	ldr	r1, [r7, #0]
 8017750:	6878      	ldr	r0, [r7, #4]
 8017752:	f7ff fdb4 	bl	80172be <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>
      break;
 8017756:	e00d      	b.n	8017774 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9c>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	695c      	ldr	r4, [r3, #20]
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	7a1b      	ldrb	r3, [r3, #8]
 8017760:	4618      	mov	r0, r3
 8017762:	f7f1 f81b 	bl	800879c <TfLiteTypeGetName>
 8017766:	4603      	mov	r3, r0
 8017768:	461a      	mov	r2, r3
 801776a:	4905      	ldr	r1, [pc, #20]	; (8017780 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
 801776c:	6878      	ldr	r0, [r7, #4]
 801776e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8017770:	2301      	movs	r3, #1
 8017772:	e000      	b.n	8017776 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
  }
  return kTfLiteOk;
 8017774:	2300      	movs	r3, #0
}
 8017776:	4618      	mov	r0, r3
 8017778:	371c      	adds	r7, #28
 801777a:	46bd      	mov	sp, r7
 801777c:	bd90      	pop	{r4, r7, pc}
 801777e:	bf00      	nop
 8017780:	0802ba88 	.word	0x0802ba88

08017784 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>:

}  // namespace pooling

TfLiteRegistration Register_AVERAGE_POOL_2D() {
 8017784:	b4b0      	push	{r4, r5, r7}
 8017786:	b083      	sub	sp, #12
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
          /*prepare=*/pooling::AveragePrepare,
          /*invoke=*/pooling::AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	4a07      	ldr	r2, [pc, #28]	; (80177ac <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv+0x28>)
 8017790:	461c      	mov	r4, r3
 8017792:	4615      	mov	r5, r2
 8017794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017798:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801779c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80177a0:	6878      	ldr	r0, [r7, #4]
 80177a2:	370c      	adds	r7, #12
 80177a4:	46bd      	mov	sp, r7
 80177a6:	bcb0      	pop	{r4, r5, r7}
 80177a8:	4770      	bx	lr
 80177aa:	bf00      	nop
 80177ac:	0802baac 	.word	0x0802baac

080177b0 <_ZN6tflite26generic_int16_table_lookupEsPKs>:

// int16_t func table lookup, e.g., lookup exp() and 1/(1+x) used in softmax
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b086      	sub	sp, #24
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	4603      	mov	r3, r0
 80177b8:	6039      	str	r1, [r7, #0]
 80177ba:	80fb      	strh	r3, [r7, #6]
  // 512 base value, lut[513] only for calculate slope
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 80177bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80177c0:	11db      	asrs	r3, r3, #7
 80177c2:	b29b      	uxth	r3, r3
 80177c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80177c8:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 80177ca:	8afb      	ldrh	r3, [r7, #22]
 80177cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80177d0:	d306      	bcc.n	80177e0 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x30>
 80177d2:	4b1b      	ldr	r3, [pc, #108]	; (8017840 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 80177d4:	4a1b      	ldr	r2, [pc, #108]	; (8017844 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 80177d6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80177da:	481b      	ldr	r0, [pc, #108]	; (8017848 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 80177dc:	f00d fd4e 	bl	802527c <__assert_func>
  int16_t offset = value & 0x7f;
 80177e0:	88fb      	ldrh	r3, [r7, #6]
 80177e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80177e6:	82bb      	strh	r3, [r7, #20]

  // base and slope are Q0.15
  int16_t base = lut[index];
 80177e8:	8afb      	ldrh	r3, [r7, #22]
 80177ea:	005b      	lsls	r3, r3, #1
 80177ec:	683a      	ldr	r2, [r7, #0]
 80177ee:	4413      	add	r3, r2
 80177f0:	881b      	ldrh	r3, [r3, #0]
 80177f2:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 80177f4:	8afb      	ldrh	r3, [r7, #22]
 80177f6:	3301      	adds	r3, #1
 80177f8:	005b      	lsls	r3, r3, #1
 80177fa:	683a      	ldr	r2, [r7, #0]
 80177fc:	4413      	add	r3, r2
 80177fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017802:	b29a      	uxth	r2, r3
 8017804:	8afb      	ldrh	r3, [r7, #22]
 8017806:	005b      	lsls	r3, r3, #1
 8017808:	6839      	ldr	r1, [r7, #0]
 801780a:	440b      	add	r3, r1
 801780c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017810:	b29b      	uxth	r3, r3
 8017812:	1ad3      	subs	r3, r2, r3
 8017814:	b29b      	uxth	r3, r3
 8017816:	823b      	strh	r3, [r7, #16]

  // Q0.15 * Q0.7 = Q0.22
  // Round and convert from Q0.22 to Q0.15
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 8017818:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801781c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017820:	fb02 f303 	mul.w	r3, r2, r3
 8017824:	3340      	adds	r3, #64	; 0x40
 8017826:	11db      	asrs	r3, r3, #7
 8017828:	60fb      	str	r3, [r7, #12]

  // Q0.15 + Q0.15
  return base + delta;
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	b29a      	uxth	r2, r3
 801782e:	8a7b      	ldrh	r3, [r7, #18]
 8017830:	4413      	add	r3, r2
 8017832:	b29b      	uxth	r3, r3
 8017834:	b21b      	sxth	r3, r3
}
 8017836:	4618      	mov	r0, r3
 8017838:	3718      	adds	r7, #24
 801783a:	46bd      	mov	sp, r7
 801783c:	bd80      	pop	{r7, pc}
 801783e:	bf00      	nop
 8017840:	0802baec 	.word	0x0802baec
 8017844:	0802bb18 	.word	0x0802bb18
 8017848:	0802bb5c 	.word	0x0802bb5c

0801784c <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 801784c:	b580      	push	{r7, lr}
 801784e:	b088      	sub	sp, #32
 8017850:	af00      	add	r7, sp, #0
 8017852:	60f8      	str	r0, [r7, #12]
 8017854:	60b9      	str	r1, [r7, #8]
 8017856:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	4618      	mov	r0, r3
 801785c:	f7fb f93e 	bl	8012adc <_ZN6tflite17CountLeadingZerosImEEiT_>
 8017860:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 8017862:	68ba      	ldr	r2, [r7, #8]
 8017864:	69fb      	ldr	r3, [r7, #28]
 8017866:	1ad2      	subs	r2, r2, r3
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 801786c:	68fa      	ldr	r2, [r7, #12]
 801786e:	69fb      	ldr	r3, [r7, #28]
 8017870:	fa02 f303 	lsl.w	r3, r2, r3
 8017874:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 8017878:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 801787a:	69b8      	ldr	r0, [r7, #24]
 801787c:	f7fb fa51 	bl	8012d22 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8017880:	4603      	mov	r3, r0
 8017882:	4618      	mov	r0, r3
 8017884:	f7fb fa5e 	bl	8012d44 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 8017888:	4603      	mov	r3, r0
 801788a:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 801788c:	f107 0314 	add.w	r3, r7, #20
 8017890:	4618      	mov	r0, r3
 8017892:	f7fb f935 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8017896:	4603      	mov	r3, r0
 8017898:	681b      	ldr	r3, [r3, #0]
}
 801789a:	4618      	mov	r0, r3
 801789c:	3720      	adds	r7, #32
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}

080178a2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 80178a2:	b580      	push	{r7, lr}
 80178a4:	ed2d 8b02 	vpush	{d8}
 80178a8:	b08e      	sub	sp, #56	; 0x38
 80178aa:	af00      	add	r7, sp, #0
 80178ac:	60f8      	str	r0, [r7, #12]
 80178ae:	60b9      	str	r1, [r7, #8]
 80178b0:	607a      	str	r2, [r7, #4]
 80178b2:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80178b4:	68b8      	ldr	r0, [r7, #8]
 80178b6:	f7f4 fb96 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80178ba:	4603      	mov	r3, r0
 80178bc:	3b01      	subs	r3, #1
 80178be:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80178c0:	683a      	ldr	r2, [r7, #0]
 80178c2:	6a39      	ldr	r1, [r7, #32]
 80178c4:	68b8      	ldr	r0, [r7, #8]
 80178c6:	f7fb f8da 	bl	8012a7e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80178ca:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80178cc:	6a3b      	ldr	r3, [r7, #32]
 80178ce:	683a      	ldr	r2, [r7, #0]
 80178d0:	6a39      	ldr	r1, [r7, #32]
 80178d2:	68b8      	ldr	r0, [r7, #8]
 80178d4:	f7fa fb8c 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80178d8:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 80178da:	2300      	movs	r3, #0
 80178dc:	637b      	str	r3, [r7, #52]	; 0x34
 80178de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80178e0:	69fb      	ldr	r3, [r7, #28]
 80178e2:	429a      	cmp	r2, r3
 80178e4:	f280 8087 	bge.w	80179f6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 80178e8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 80178ec:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 80178ee:	2300      	movs	r3, #0
 80178f0:	633b      	str	r3, [r7, #48]	; 0x30
 80178f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178f4:	69bb      	ldr	r3, [r7, #24]
 80178f6:	429a      	cmp	r2, r3
 80178f8:	da15      	bge.n	8017926 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 80178fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178fc:	69ba      	ldr	r2, [r7, #24]
 80178fe:	fb02 f203 	mul.w	r2, r2, r3
 8017902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017904:	4413      	add	r3, r2
 8017906:	009b      	lsls	r3, r3, #2
 8017908:	687a      	ldr	r2, [r7, #4]
 801790a:	441a      	add	r2, r3
 801790c:	f107 0310 	add.w	r3, r7, #16
 8017910:	4611      	mov	r1, r2
 8017912:	4618      	mov	r0, r3
 8017914:	f7f3 fc58 	bl	800b1c8 <_ZSt3maxIfERKT_S2_S2_>
 8017918:	4603      	mov	r3, r0
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 801791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017920:	3301      	adds	r3, #1
 8017922:	633b      	str	r3, [r7, #48]	; 0x30
 8017924:	e7e5      	b.n	80178f2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 8017926:	f04f 0300 	mov.w	r3, #0
 801792a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 801792c:	2300      	movs	r3, #0
 801792e:	62bb      	str	r3, [r7, #40]	; 0x28
 8017930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017932:	69bb      	ldr	r3, [r7, #24]
 8017934:	429a      	cmp	r2, r3
 8017936:	da36      	bge.n	80179a6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8017938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801793a:	69ba      	ldr	r2, [r7, #24]
 801793c:	fb02 f203 	mul.w	r2, r2, r3
 8017940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017942:	4413      	add	r3, r2
 8017944:	009b      	lsls	r3, r3, #2
 8017946:	687a      	ldr	r2, [r7, #4]
 8017948:	4413      	add	r3, r2
 801794a:	ed93 7a00 	vldr	s14, [r3]
 801794e:	edd7 7a04 	vldr	s15, [r7, #16]
 8017952:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801795c:	4610      	mov	r0, r2
 801795e:	4619      	mov	r1, r3
 8017960:	f7e9 f93e 	bl	8000be0 <__aeabi_d2f>
 8017964:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8017968:	ee68 7a27 	vmul.f32	s15, s16, s15
 801796c:	eeb0 0a67 	vmov.f32	s0, s15
 8017970:	f7fa ffd1 	bl	8012916 <_ZSt3expf>
 8017974:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 8017978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801797a:	69ba      	ldr	r2, [r7, #24]
 801797c:	fb02 f203 	mul.w	r2, r2, r3
 8017980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017982:	4413      	add	r3, r2
 8017984:	009b      	lsls	r3, r3, #2
 8017986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017988:	4413      	add	r3, r2
 801798a:	697a      	ldr	r2, [r7, #20]
 801798c:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 801798e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8017992:	edd7 7a05 	vldr	s15, [r7, #20]
 8017996:	ee77 7a27 	vadd.f32	s15, s14, s15
 801799a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 801799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179a0:	3301      	adds	r3, #1
 80179a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80179a4:	e7c4      	b.n	8017930 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 80179a6:	2300      	movs	r3, #0
 80179a8:	627b      	str	r3, [r7, #36]	; 0x24
 80179aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179ac:	69bb      	ldr	r3, [r7, #24]
 80179ae:	429a      	cmp	r2, r3
 80179b0:	da1d      	bge.n	80179ee <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 80179b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179b4:	69ba      	ldr	r2, [r7, #24]
 80179b6:	fb02 f203 	mul.w	r2, r2, r3
 80179ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179bc:	4413      	add	r3, r2
 80179be:	009b      	lsls	r3, r3, #2
 80179c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80179c2:	4413      	add	r3, r2
 80179c4:	edd3 6a00 	vldr	s13, [r3]
 80179c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179ca:	69ba      	ldr	r2, [r7, #24]
 80179cc:	fb02 f203 	mul.w	r2, r2, r3
 80179d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179d2:	4413      	add	r3, r2
 80179d4:	009b      	lsls	r3, r3, #2
 80179d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80179d8:	4413      	add	r3, r2
 80179da:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80179de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80179e2:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 80179e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179e8:	3301      	adds	r3, #1
 80179ea:	627b      	str	r3, [r7, #36]	; 0x24
 80179ec:	e7dd      	b.n	80179aa <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 80179ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179f0:	3301      	adds	r3, #1
 80179f2:	637b      	str	r3, [r7, #52]	; 0x34
 80179f4:	e773      	b.n	80178de <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 80179f6:	bf00      	nop
 80179f8:	3738      	adds	r7, #56	; 0x38
 80179fa:	46bd      	mov	sp, r7
 80179fc:	ecbd 8b02 	vpop	{d8}
 8017a00:	bd80      	pop	{r7, pc}
	...

08017a04 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b08a      	sub	sp, #40	; 0x28
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	60f8      	str	r0, [r7, #12]
 8017a0c:	60b9      	str	r1, [r7, #8]
 8017a0e:	607a      	str	r2, [r7, #4]
 8017a10:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 8017a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a14:	687a      	ldr	r2, [r7, #4]
 8017a16:	fb02 f203 	mul.w	r2, r2, r3
 8017a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a1c:	4413      	add	r3, r2
 8017a1e:	005b      	lsls	r3, r3, #1
 8017a20:	68ba      	ldr	r2, [r7, #8]
 8017a22:	4413      	add	r3, r2
 8017a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017a28:	461a      	mov	r2, r3
 8017a2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017a2e:	1ad3      	subs	r3, r2, r3
 8017a30:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	6899      	ldr	r1, [r3, #8]
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 8017a3a:	461a      	mov	r2, r3
 8017a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a3e:	f7f9 faa1 	bl	8010f84 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8017a42:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 8017a44:	6a3b      	ldr	r3, [r7, #32]
 8017a46:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8017a4a:	337f      	adds	r3, #127	; 0x7f
 8017a4c:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8017a4e:	4b12      	ldr	r3, [pc, #72]	; (8017a98 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 8017a50:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 8017a52:	f107 0214 	add.w	r2, r7, #20
 8017a56:	f107 0310 	add.w	r3, r7, #16
 8017a5a:	4611      	mov	r1, r2
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	f7f4 f94d 	bl	800bcfc <_ZSt3maxIlERKT_S2_S2_>
 8017a62:	4602      	mov	r2, r0
 8017a64:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017a68:	61bb      	str	r3, [r7, #24]
 8017a6a:	f107 0318 	add.w	r3, r7, #24
 8017a6e:	4619      	mov	r1, r3
 8017a70:	4610      	mov	r0, r2
 8017a72:	f7f4 f92f 	bl	800bcd4 <_ZSt3minIlERKT_S2_S2_>
 8017a76:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8017a78:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 8017a7a:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017a80:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017a84:	4611      	mov	r1, r2
 8017a86:	4618      	mov	r0, r3
 8017a88:	f7ff fe92 	bl	80177b0 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 8017a8c:	4603      	mov	r3, r0
}
 8017a8e:	4618      	mov	r0, r3
 8017a90:	3728      	adds	r7, #40	; 0x28
 8017a92:	46bd      	mov	sp, r7
 8017a94:	bd80      	pop	{r7, pc}
 8017a96:	bf00      	nop
 8017a98:	ffff8000 	.word	0xffff8000

08017a9c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 8017a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aa0:	b0a1      	sub	sp, #132	; 0x84
 8017aa2:	af02      	add	r7, sp, #8
 8017aa4:	6178      	str	r0, [r7, #20]
 8017aa6:	6139      	str	r1, [r7, #16]
 8017aa8:	60fa      	str	r2, [r7, #12]
 8017aaa:	60bb      	str	r3, [r7, #8]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8017aac:	6938      	ldr	r0, [r7, #16]
 8017aae:	f7f4 fa9a 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	3b01      	subs	r3, #1
 8017ab6:	663b      	str	r3, [r7, #96]	; 0x60
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8017ab8:	68ba      	ldr	r2, [r7, #8]
 8017aba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8017abc:	6938      	ldr	r0, [r7, #16]
 8017abe:	f7fa ffde 	bl	8012a7e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8017ac2:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8017ac4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017ac6:	68ba      	ldr	r2, [r7, #8]
 8017ac8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8017aca:	6938      	ldr	r0, [r7, #16]
 8017acc:	f7fa fa90 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017ad0:	65b8      	str	r0, [r7, #88]	; 0x58

  for (int i = 0; i < outer_size; ++i) {
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	677b      	str	r3, [r7, #116]	; 0x74
 8017ad6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017ada:	429a      	cmp	r2, r3
 8017adc:	f280 8119 	bge.w	8017d12 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x276>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 8017ae0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017ae4:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	673b      	str	r3, [r7, #112]	; 0x70
 8017aea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017aee:	429a      	cmp	r2, r3
 8017af0:	da16      	bge.n	8017b20 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x84>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8017af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017af4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017af6:	fb02 f203 	mul.w	r2, r2, r3
 8017afa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017afc:	4413      	add	r3, r2
 8017afe:	005b      	lsls	r3, r3, #1
 8017b00:	68fa      	ldr	r2, [r7, #12]
 8017b02:	441a      	add	r2, r3
 8017b04:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8017b08:	4611      	mov	r1, r2
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7fa ff13 	bl	8012936 <_ZSt3maxIsERKT_S2_S2_>
 8017b10:	4603      	mov	r3, r0
 8017b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017b16:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 8017b18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017b1a:	3301      	adds	r3, #1
 8017b1c:	673b      	str	r3, [r7, #112]	; 0x70
 8017b1e:	e7e4      	b.n	8017aea <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x4e>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 8017b20:	2300      	movs	r3, #0
 8017b22:	66fb      	str	r3, [r7, #108]	; 0x6c
    int16_t* exp_results_Q015 = output_data + i * depth;
 8017b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017b26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017b28:	fb02 f303 	mul.w	r3, r2, r3
 8017b2c:	005b      	lsls	r3, r3, #1
 8017b2e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8017b32:	4413      	add	r3, r2
 8017b34:	657b      	str	r3, [r7, #84]	; 0x54
    for (int c = 0; c < depth; ++c) {
 8017b36:	2300      	movs	r3, #0
 8017b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8017b3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017b3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017b3e:	429a      	cmp	r2, r3
 8017b40:	da1f      	bge.n	8017b82 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xe6>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8017b42:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
      exp_results_Q015[c] =
 8017b46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017b48:	005b      	lsls	r3, r3, #1
 8017b4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017b4c:	18d6      	adds	r6, r2, r3
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8017b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017b50:	9301      	str	r3, [sp, #4]
 8017b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017b54:	9300      	str	r3, [sp, #0]
 8017b56:	460b      	mov	r3, r1
 8017b58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017b5a:	68f9      	ldr	r1, [r7, #12]
 8017b5c:	6978      	ldr	r0, [r7, #20]
 8017b5e:	f7ff ff51 	bl	8017a04 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 8017b62:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 8017b64:	8033      	strh	r3, [r6, #0]
      sum_of_exps += exp_results_Q015[c];
 8017b66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017b68:	005b      	lsls	r3, r3, #1
 8017b6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017b6c:	4413      	add	r3, r2
 8017b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017b72:	461a      	mov	r2, r3
 8017b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017b76:	4413      	add	r3, r2
 8017b78:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (int c = 0; c < depth; ++c) {
 8017b7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017b7c:	3301      	adds	r3, #1
 8017b7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8017b80:	e7db      	b.n	8017b3a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9e>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 8017b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017b84:	4618      	mov	r0, r3
 8017b86:	f7fa ffa9 	bl	8012adc <_ZN6tflite17CountLeadingZerosImEEiT_>
 8017b8a:	4603      	mov	r3, r0
 8017b8c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 8017b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017b92:	461a      	mov	r2, r3
 8017b94:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8017b98:	f897 1053 	ldrb.w	r1, [r7, #83]	; 0x53
 8017b9c:	3901      	subs	r1, #1
 8017b9e:	f1a1 0620 	sub.w	r6, r1, #32
 8017ba2:	f1c1 0020 	rsb	r0, r1, #32
 8017ba6:	fa03 f501 	lsl.w	r5, r3, r1
 8017baa:	fa02 f606 	lsl.w	r6, r2, r6
 8017bae:	4335      	orrs	r5, r6
 8017bb0:	fa22 f000 	lsr.w	r0, r2, r0
 8017bb4:	4305      	orrs	r5, r0
 8017bb6:	fa02 f401 	lsl.w	r4, r2, r1
 8017bba:	f514 5300 	adds.w	r3, r4, #8192	; 0x2000
 8017bbe:	603b      	str	r3, [r7, #0]
 8017bc0:	f145 0300 	adc.w	r3, r5, #0
 8017bc4:	607b      	str	r3, [r7, #4]
         (1 << 13)) >>
 8017bc6:	f04f 0200 	mov.w	r2, #0
 8017bca:	f04f 0300 	mov.w	r3, #0
 8017bce:	6839      	ldr	r1, [r7, #0]
 8017bd0:	0b8a      	lsrs	r2, r1, #14
 8017bd2:	6879      	ldr	r1, [r7, #4]
 8017bd4:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8017bd8:	6879      	ldr	r1, [r7, #4]
 8017bda:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 8017bdc:	4613      	mov	r3, r2
 8017bde:	64fb      	str	r3, [r7, #76]	; 0x4c
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 8017be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017be2:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 8017be6:	623b      	str	r3, [r7, #32]
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8017be8:	4b4c      	ldr	r3, [pc, #304]	; (8017d1c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x280>)
 8017bea:	62bb      	str	r3, [r7, #40]	; 0x28
                 static_cast<int32_t>(32767)));
 8017bec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017bf0:	f107 0320 	add.w	r3, r7, #32
 8017bf4:	4611      	mov	r1, r2
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	f7f4 f880 	bl	800bcfc <_ZSt3maxIlERKT_S2_S2_>
 8017bfc:	4602      	mov	r2, r0
 8017bfe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017c08:	4619      	mov	r1, r3
 8017c0a:	4610      	mov	r0, r2
 8017c0c:	f7f4 f862 	bl	800bcd4 <_ZSt3minIlERKT_S2_S2_>
 8017c10:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8017c12:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 8017c14:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 8017c18:	697b      	ldr	r3, [r7, #20]
 8017c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 8017c1c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8017c20:	4611      	mov	r1, r2
 8017c22:	4618      	mov	r0, r3
 8017c24:	f7ff fdc4 	bl	80177b0 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 8017c28:	4603      	mov	r3, r0
 8017c2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 8017c2e:	2300      	movs	r3, #0
 8017c30:	667b      	str	r3, [r7, #100]	; 0x64
 8017c32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017c34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017c36:	429a      	cmp	r2, r3
 8017c38:	da67      	bge.n	8017d0a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x26e>
      uint8_t right_shift = 31 - headroom_plus_one;
 8017c3a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8017c3e:	f1c3 031f 	rsb	r3, r3, #31
 8017c42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      int64_t round = 1 << (right_shift - 1);
 8017c46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017c4a:	3b01      	subs	r3, #1
 8017c4c:	2201      	movs	r2, #1
 8017c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8017c52:	461a      	mov	r2, r3
 8017c54:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8017c58:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8017c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017c5e:	005b      	lsls	r3, r3, #1
 8017c60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017c62:	4413      	add	r3, r2
 8017c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c68:	b218      	sxth	r0, r3
 8017c6a:	ea4f 71e0 	mov.w	r1, r0, asr #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 8017c6e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8017c72:	ea4f 73e2 	mov.w	r3, r2, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8017c76:	fb02 fc01 	mul.w	ip, r2, r1
 8017c7a:	fb00 f603 	mul.w	r6, r0, r3
 8017c7e:	4466      	add	r6, ip
 8017c80:	fba0 2302 	umull	r2, r3, r0, r2
 8017c84:	18f1      	adds	r1, r6, r3
 8017c86:	460b      	mov	r3, r1
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 8017c88:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017c8c:	eb12 0a00 	adds.w	sl, r2, r0
 8017c90:	eb43 0b01 	adc.w	fp, r3, r1
                        round) >>
                       right_shift;
 8017c94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
                        round) >>
 8017c98:	f1c3 0120 	rsb	r1, r3, #32
 8017c9c:	f1b3 0220 	subs.w	r2, r3, #32
 8017ca0:	fa2a f803 	lsr.w	r8, sl, r3
 8017ca4:	fa0b f101 	lsl.w	r1, fp, r1
 8017ca8:	ea48 0801 	orr.w	r8, r8, r1
 8017cac:	d403      	bmi.n	8017cb6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x21a>
 8017cae:	fa4b f202 	asr.w	r2, fp, r2
 8017cb2:	ea48 0802 	orr.w	r8, r8, r2
 8017cb6:	fa4b f903 	asr.w	r9, fp, r3
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8017cba:	4643      	mov	r3, r8
 8017cbc:	61fb      	str	r3, [r7, #28]
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	633b      	str	r3, [r7, #48]	; 0x30
                   static_cast<int32_t>(32767)));
 8017cc2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017cc6:	f107 031c 	add.w	r3, r7, #28
 8017cca:	4611      	mov	r1, r2
 8017ccc:	4618      	mov	r0, r3
 8017cce:	f7f4 f815 	bl	800bcfc <_ZSt3maxIlERKT_S2_S2_>
 8017cd2:	4602      	mov	r2, r0
 8017cd4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8017cda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017cde:	4619      	mov	r1, r3
 8017ce0:	4610      	mov	r0, r2
 8017ce2:	f7f3 fff7 	bl	800bcd4 <_ZSt3minIlERKT_S2_S2_>
 8017ce6:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 8017ce8:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 8017cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017cec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017cee:	fb02 f203 	mul.w	r2, r2, r3
 8017cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017cf4:	4413      	add	r3, r2
 8017cf6:	005b      	lsls	r3, r3, #1
 8017cf8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8017cfc:	4413      	add	r3, r2
 8017cfe:	b20a      	sxth	r2, r1
 8017d00:	801a      	strh	r2, [r3, #0]
    for (int c = 0; c < depth; ++c) {
 8017d02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017d04:	3301      	adds	r3, #1
 8017d06:	667b      	str	r3, [r7, #100]	; 0x64
 8017d08:	e793      	b.n	8017c32 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x196>
  for (int i = 0; i < outer_size; ++i) {
 8017d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017d0c:	3301      	adds	r3, #1
 8017d0e:	677b      	str	r3, [r7, #116]	; 0x74
 8017d10:	e6e1      	b.n	8017ad6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x3a>
    }
  }
}
 8017d12:	bf00      	nop
 8017d14:	377c      	adds	r7, #124	; 0x7c
 8017d16:	46bd      	mov	sp, r7
 8017d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d1c:	ffff8000 	.word	0xffff8000

08017d20 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 8017d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d24:	b0b0      	sub	sp, #192	; 0xc0
 8017d26:	af04      	add	r7, sp, #16
 8017d28:	60f8      	str	r0, [r7, #12]
 8017d2a:	60b9      	str	r1, [r7, #8]
 8017d2c:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteInt8) {
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	7a1b      	ldrb	r3, [r3, #8]
 8017d32:	2b09      	cmp	r3, #9
 8017d34:	d17b      	bne.n	8017e2e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10e>
    if (output->type == kTfLiteInt16) {
 8017d36:	68bb      	ldr	r3, [r7, #8]
 8017d38:	7a1b      	ldrb	r3, [r3, #8]
 8017d3a:	2b07      	cmp	r3, #7
 8017d3c:	d127      	bne.n	8017d8e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x6e>
      tflite::reference_ops::Softmax(
          op_data, tflite::micro::GetTensorShape(input),
 8017d3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017d42:	68f9      	ldr	r1, [r7, #12]
 8017d44:	4618      	mov	r0, r3
 8017d46:	f7fa fe0c 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8017d4a:	68f8      	ldr	r0, [r7, #12]
 8017d4c:	f7f9 fe5c 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8017d50:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
 8017d52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8017d56:	68b9      	ldr	r1, [r7, #8]
 8017d58:	4618      	mov	r0, r3
 8017d5a:	f7fa fe02 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8017d5e:	68b8      	ldr	r0, [r7, #8]
 8017d60:	f7fb fe5b 	bl	8013a1a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8017d64:	4602      	mov	r2, r0
 8017d66:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8017d6a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8017d6e:	9200      	str	r2, [sp, #0]
 8017d70:	4622      	mov	r2, r4
 8017d72:	6878      	ldr	r0, [r7, #4]
 8017d74:	f000 f916 	bl	8017fa4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 8017d78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	f7f4 f91c 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 8017d82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017d86:	4618      	mov	r0, r3
 8017d88:	f7f4 f917 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 8017d8c:	e076      	b.n	8017e7c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x15c>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 8017d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017d92:	68f9      	ldr	r1, [r7, #12]
 8017d94:	4618      	mov	r0, r3
 8017d96:	f7fa fde4 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 8017d9a:	f107 0314 	add.w	r3, r7, #20
 8017d9e:	68b9      	ldr	r1, [r7, #8]
 8017da0:	4618      	mov	r0, r3
 8017da2:	f7fa fdde 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 8017da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017daa:	4618      	mov	r0, r3
 8017dac:	f7f4 f91b 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017db0:	4603      	mov	r3, r0
 8017db2:	3b01      	subs	r3, #1
 8017db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8017db8:	f107 0214 	add.w	r2, r7, #20
 8017dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017dc0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	f7fa fe5a 	bl	8012a7e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8017dca:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8017dce:	f107 0214 	add.w	r2, r7, #20
 8017dd2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017dda:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8017dde:	f7fa f907 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017de2:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 8017de6:	68f8      	ldr	r0, [r7, #12]
 8017de8:	f7f9 fe0e 	bl	8011a08 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8017dec:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	689e      	ldr	r6, [r3, #8]
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 8017dfa:	68b8      	ldr	r0, [r7, #8]
 8017dfc:	f7f9 fe13 	bl	8011a26 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8017e00:	4603      	mov	r3, r0
 8017e02:	9302      	str	r3, [sp, #8]
 8017e04:	9501      	str	r5, [sp, #4]
 8017e06:	9400      	str	r4, [sp, #0]
 8017e08:	4633      	mov	r3, r6
 8017e0a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8017e0e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8017e12:	4640      	mov	r0, r8
 8017e14:	f009 fed4 	bl	8021bc0 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 8017e18:	f107 0314 	add.w	r3, r7, #20
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	f7f4 f8cc 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 8017e22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017e26:	4618      	mov	r0, r3
 8017e28:	f7f4 f8c7 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
}
 8017e2c:	e026      	b.n	8017e7c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x15c>
        op_data, tflite::micro::GetTensorShape(input),
 8017e2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8017e32:	68f9      	ldr	r1, [r7, #12]
 8017e34:	4618      	mov	r0, r3
 8017e36:	f7fa fd94 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8017e3a:	68f8      	ldr	r0, [r7, #12]
 8017e3c:	f7fa fd48 	bl	80128d0 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 8017e40:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 8017e42:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017e46:	68b9      	ldr	r1, [r7, #8]
 8017e48:	4618      	mov	r0, r3
 8017e4a:	f7fa fd8a 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8017e4e:	68b8      	ldr	r0, [r7, #8]
 8017e50:	f7fb fde3 	bl	8013a1a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8017e54:	4602      	mov	r2, r0
 8017e56:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017e5a:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8017e5e:	9200      	str	r2, [sp, #0]
 8017e60:	4622      	mov	r2, r4
 8017e62:	6878      	ldr	r0, [r7, #4]
 8017e64:	f7ff fe1a 	bl	8017a9c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 8017e68:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	f7f4 f8a4 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 8017e72:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8017e76:	4618      	mov	r0, r3
 8017e78:	f7f4 f89f 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
}
 8017e7c:	bf00      	nop
 8017e7e:	37b0      	adds	r7, #176	; 0xb0
 8017e80:	46bd      	mov	sp, r7
 8017e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017e88 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8017e88:	b5b0      	push	{r4, r5, r7, lr}
 8017e8a:	b0a0      	sub	sp, #128	; 0x80
 8017e8c:	af02      	add	r7, sp, #8
 8017e8e:	6078      	str	r0, [r7, #4]
 8017e90:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8017e92:	2200      	movs	r2, #0
 8017e94:	6839      	ldr	r1, [r7, #0]
 8017e96:	6878      	ldr	r0, [r7, #4]
 8017e98:	f7f9 f8b8 	bl	801100c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8017e9c:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	6839      	ldr	r1, [r7, #0]
 8017ea2:	6878      	ldr	r0, [r7, #4]
 8017ea4:	f7f9 f8c2 	bl	801102c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8017ea8:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 8017eaa:	683b      	ldr	r3, [r7, #0]
 8017eac:	691b      	ldr	r3, [r3, #16]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d101      	bne.n	8017eb6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8017eb2:	f00d f9dc 	bl	802526e <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 8017eb6:	683b      	ldr	r3, [r7, #0]
 8017eb8:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 8017eba:	f107 0408 	add.w	r4, r7, #8
 8017ebe:	461d      	mov	r5, r3
 8017ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017ecc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017ed0:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 8017ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017ed6:	7a1b      	ldrb	r3, [r3, #8]
 8017ed8:	2b09      	cmp	r3, #9
 8017eda:	d030      	beq.n	8017f3e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 8017edc:	2b09      	cmp	r3, #9
 8017ede:	dc37      	bgt.n	8017f50 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
 8017ee0:	2b01      	cmp	r3, #1
 8017ee2:	d002      	beq.n	8017eea <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x62>
 8017ee4:	2b07      	cmp	r3, #7
 8017ee6:	d02a      	beq.n	8017f3e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 8017ee8:	e032      	b.n	8017f50 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
    case kTfLiteFloat32: {
      tflite::reference_ops::Softmax(
          data, tflite::micro::GetTensorShape(input),
 8017eea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017eee:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	f7fa fd36 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8017ef6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8017ef8:	f7f9 fd66 	bl	80119c8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8017efc:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 8017efe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8017f02:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8017f04:	4618      	mov	r0, r3
 8017f06:	f7fa fd2c 	bl	8012962 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8017f0a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8017f0c:	f7f9 fd6b 	bl	80119e6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8017f10:	4602      	mov	r2, r0
 8017f12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8017f16:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8017f1a:	f107 0008 	add.w	r0, r7, #8
 8017f1e:	9200      	str	r2, [sp, #0]
 8017f20:	4622      	mov	r2, r4
 8017f22:	f7ff fcbe 	bl	80178a2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 8017f26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	f7f4 f845 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
          data, tflite::micro::GetTensorShape(input),
 8017f30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017f34:	4618      	mov	r0, r3
 8017f36:	f7f4 f840 	bl	800bfba <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	e016      	b.n	8017f6c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    case kTfLiteInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, data);
 8017f3e:	f107 0308 	add.w	r3, r7, #8
 8017f42:	461a      	mov	r2, r3
 8017f44:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8017f46:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8017f48:	f7ff feea 	bl	8017d20 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	e00d      	b.n	8017f6c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	695c      	ldr	r4, [r3, #20]
 8017f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017f56:	7a1b      	ldrb	r3, [r3, #8]
 8017f58:	4618      	mov	r0, r3
 8017f5a:	f7f0 fc1f 	bl	800879c <TfLiteTypeGetName>
 8017f5e:	4602      	mov	r2, r0
 8017f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017f62:	7a1b      	ldrb	r3, [r3, #8]
 8017f64:	4903      	ldr	r1, [pc, #12]	; (8017f74 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>)
 8017f66:	6878      	ldr	r0, [r7, #4]
 8017f68:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8017f6a:	2301      	movs	r3, #1
  }
}
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	3778      	adds	r7, #120	; 0x78
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bdb0      	pop	{r4, r5, r7, pc}
 8017f74:	0802bbd0 	.word	0x0802bbd0

08017f78 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 8017f78:	b4b0      	push	{r4, r5, r7}
 8017f7a:	b083      	sub	sp, #12
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	4a07      	ldr	r2, [pc, #28]	; (8017fa0 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8017f84:	461c      	mov	r4, r3
 8017f86:	4615      	mov	r5, r2
 8017f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017f8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8017f90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8017f94:	6878      	ldr	r0, [r7, #4]
 8017f96:	370c      	adds	r7, #12
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	bcb0      	pop	{r4, r5, r7}
 8017f9c:	4770      	bx	lr
 8017f9e:	bf00      	nop
 8017fa0:	0802bbec 	.word	0x0802bbec

08017fa4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8017fa4:	b590      	push	{r4, r7, lr}
 8017fa6:	b09f      	sub	sp, #124	; 0x7c
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	60f8      	str	r0, [r7, #12]
 8017fac:	60b9      	str	r1, [r7, #8]
 8017fae:	607a      	str	r2, [r7, #4]
 8017fb0:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	689b      	ldr	r3, [r3, #8]
 8017fb6:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	68db      	ldr	r3, [r3, #12]
 8017fbc:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	699b      	ldr	r3, [r3, #24]
 8017fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8017fc4:	68b8      	ldr	r0, [r7, #8]
 8017fc6:	f7f4 f80e 	bl	800bfe6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017fca:	4603      	mov	r3, r0
 8017fcc:	3b01      	subs	r3, #1
 8017fce:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8017fd0:	683a      	ldr	r2, [r7, #0]
 8017fd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017fd4:	68b8      	ldr	r0, [r7, #8]
 8017fd6:	f7fa fd52 	bl	8012a7e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8017fda:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8017fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017fde:	683a      	ldr	r2, [r7, #0]
 8017fe0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017fe2:	68b8      	ldr	r0, [r7, #8]
 8017fe4:	f7fa f804 	bl	8011ff0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017fe8:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8017fea:	2300      	movs	r3, #0
 8017fec:	677b      	str	r3, [r7, #116]	; 0x74
 8017fee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ff2:	429a      	cmp	r2, r3
 8017ff4:	f280 80f0 	bge.w	80181d8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8017ff8:	2380      	movs	r3, #128	; 0x80
 8017ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8017ffe:	2300      	movs	r3, #0
 8018000:	673b      	str	r3, [r7, #112]	; 0x70
 8018002:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8018004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018006:	429a      	cmp	r2, r3
 8018008:	da17      	bge.n	801803a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801800a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801800c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801800e:	fb02 f203 	mul.w	r2, r2, r3
 8018012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018014:	4413      	add	r3, r2
 8018016:	461a      	mov	r2, r3
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	441a      	add	r2, r3
 801801c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8018020:	4611      	mov	r1, r2
 8018022:	4618      	mov	r0, r3
 8018024:	f7fb fafb 	bl	801361e <_ZSt3maxIaERKT_S2_S2_>
 8018028:	4603      	mov	r3, r0
 801802a:	f993 3000 	ldrsb.w	r3, [r3]
 801802e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8018032:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018034:	3301      	adds	r3, #1
 8018036:	673b      	str	r3, [r7, #112]	; 0x70
 8018038:	e7e3      	b.n	8018002 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801803a:	f000 f8d1 	bl	80181e0 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801803e:	4603      	mov	r3, r0
 8018040:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8018042:	2300      	movs	r3, #0
 8018044:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018046:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801804a:	429a      	cmp	r2, r3
 801804c:	da30      	bge.n	80180b0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801804e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018050:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018052:	fb02 f203 	mul.w	r2, r2, r3
 8018056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018058:	4413      	add	r3, r2
 801805a:	461a      	mov	r2, r3
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	4413      	add	r3, r2
 8018060:	f993 3000 	ldrsb.w	r3, [r3]
 8018064:	461a      	mov	r2, r3
 8018066:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801806a:	1ad3      	subs	r3, r2, r3
 801806c:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801806e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018072:	429a      	cmp	r2, r3
 8018074:	db18      	blt.n	80180a8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8018076:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018078:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801807a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801807c:	f7fc fbda 	bl	8014834 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8018080:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8018082:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8018084:	f7fa febe 	bl	8012e04 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8018088:	4603      	mov	r3, r0
 801808a:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801808c:	69f8      	ldr	r0, [r7, #28]
 801808e:	f7fa fecb 	bl	8012e28 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8018092:	4603      	mov	r3, r0
 8018094:	4618      	mov	r0, r3
 8018096:	f7fb f80f 	bl	80130b8 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801809a:	4603      	mov	r3, r0
 801809c:	4619      	mov	r1, r3
 801809e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180a0:	f7fb f824 	bl	80130ec <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80180a4:	4603      	mov	r3, r0
 80180a6:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80180a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80180aa:	3301      	adds	r3, #1
 80180ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80180ae:	e7ca      	b.n	8018046 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 80180b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80180b4:	4618      	mov	r0, r3
 80180b6:	f7fb fa8a 	bl	80135ce <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80180ba:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80180c2:	210c      	movs	r1, #12
 80180c4:	4618      	mov	r0, r3
 80180c6:	f7ff fbc1 	bl	801784c <_ZN6tflite13GetReciprocalEliPi>
 80180ca:	4603      	mov	r3, r0
 80180cc:	4618      	mov	r0, r3
 80180ce:	f7fa fe28 	bl	8012d22 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80180d2:	4603      	mov	r3, r0
 80180d4:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 80180d6:	2300      	movs	r3, #0
 80180d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80180da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80180dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80180de:	429a      	cmp	r2, r3
 80180e0:	da76      	bge.n	80181d0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 80180e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80180e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80180e6:	fb02 f203 	mul.w	r2, r2, r3
 80180ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80180ec:	4413      	add	r3, r2
 80180ee:	461a      	mov	r2, r3
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	4413      	add	r3, r2
 80180f4:	f993 3000 	ldrsb.w	r3, [r3]
 80180f8:	461a      	mov	r2, r3
 80180fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 80180fe:	1ad3      	subs	r3, r2, r3
 8018100:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8018102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018106:	429a      	cmp	r2, r3
 8018108:	db50      	blt.n	80181ac <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801810a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801810c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801810e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018110:	f7fc fb90 	bl	8014834 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8018114:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8018116:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8018118:	f7fa fe74 	bl	8012e04 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801811c:	4603      	mov	r3, r0
 801811e:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8018120:	69b8      	ldr	r0, [r7, #24]
 8018122:	f7fa fe81 	bl	8012e28 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8018126:	4603      	mov	r3, r0
 8018128:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 801812a:	6979      	ldr	r1, [r7, #20]
 801812c:	6a38      	ldr	r0, [r7, #32]
 801812e:	f7fb f9f9 	bl	8013524 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8018132:	4603      	mov	r3, r0
 8018134:	633b      	str	r3, [r7, #48]	; 0x30
 8018136:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801813a:	4618      	mov	r0, r3
 801813c:	f7fa fce0 	bl	8012b00 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8018140:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8018142:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8018144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018146:	320f      	adds	r2, #15
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8018148:	4611      	mov	r1, r2
 801814a:	4618      	mov	r0, r3
 801814c:	f7f9 fa84 	bl	8011658 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8018150:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8018152:	f7f3 f897 	bl	800b284 <_ZNSt14numeric_limitsIsE3minEv>
 8018156:	4603      	mov	r3, r0
 8018158:	461a      	mov	r2, r3
            unsat_output +
 801815a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801815c:	4413      	add	r3, r2
        const int32_t shifted_output =
 801815e:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8018160:	f7f3 f89a 	bl	800b298 <_ZNSt14numeric_limitsIsE3maxEv>
 8018164:	4603      	mov	r3, r0
 8018166:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8018168:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801816c:	f107 0310 	add.w	r3, r7, #16
 8018170:	4611      	mov	r1, r2
 8018172:	4618      	mov	r0, r3
 8018174:	f7f3 fdae 	bl	800bcd4 <_ZSt3minIlERKT_S2_S2_>
 8018178:	4604      	mov	r4, r0
 801817a:	f7f3 f883 	bl	800b284 <_ZNSt14numeric_limitsIsE3minEv>
 801817e:	4603      	mov	r3, r0
 8018180:	63bb      	str	r3, [r7, #56]	; 0x38
 8018182:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018186:	4619      	mov	r1, r3
 8018188:	4620      	mov	r0, r4
 801818a:	f7f3 fdb7 	bl	800bcfc <_ZSt3maxIlERKT_S2_S2_>
 801818e:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8018190:	6819      	ldr	r1, [r3, #0]
 8018192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018194:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018196:	fb02 f203 	mul.w	r2, r2, r3
 801819a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801819c:	4413      	add	r3, r2
 801819e:	005b      	lsls	r3, r3, #1
 80181a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80181a4:	4413      	add	r3, r2
 80181a6:	b20a      	sxth	r2, r1
 80181a8:	801a      	strh	r2, [r3, #0]
 80181aa:	e00d      	b.n	80181c8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 80181ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80181ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80181b0:	fb02 f203 	mul.w	r2, r2, r3
 80181b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80181b6:	4413      	add	r3, r2
 80181b8:	005b      	lsls	r3, r3, #1
 80181ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80181be:	18d4      	adds	r4, r2, r3
 80181c0:	f7f3 f860 	bl	800b284 <_ZNSt14numeric_limitsIsE3minEv>
 80181c4:	4603      	mov	r3, r0
 80181c6:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 80181c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80181ca:	3301      	adds	r3, #1
 80181cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80181ce:	e784      	b.n	80180da <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 80181d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80181d2:	3301      	adds	r3, #1
 80181d4:	677b      	str	r3, [r7, #116]	; 0x74
 80181d6:	e70a      	b.n	8017fee <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 80181d8:	bf00      	nop
 80181da:	377c      	adds	r7, #124	; 0x7c
 80181dc:	46bd      	mov	sp, r7
 80181de:	bd90      	pop	{r4, r7, pc}

080181e0 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 80181e0:	b580      	push	{r7, lr}
 80181e2:	af00      	add	r7, sp, #0
 80181e4:	2000      	movs	r0, #0
 80181e6:	f000 f803 	bl	80181f0 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 80181ea:	4603      	mov	r3, r0
 80181ec:	4618      	mov	r0, r3
 80181ee:	bd80      	pop	{r7, pc}

080181f0 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80181f0:	b590      	push	{r4, r7, lr}
 80181f2:	b085      	sub	sp, #20
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80181f8:	f107 030c 	add.w	r3, r7, #12
 80181fc:	4618      	mov	r0, r3
 80181fe:	f7fb f9e6 	bl	80135ce <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8018202:	4604      	mov	r4, r0
 8018204:	6878      	ldr	r0, [r7, #4]
 8018206:	f7f9 fdeb 	bl	8011de0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801820a:	4603      	mov	r3, r0
 801820c:	6023      	str	r3, [r4, #0]
    return retval;
 801820e:	68fb      	ldr	r3, [r7, #12]
  }
 8018210:	4618      	mov	r0, r3
 8018212:	3714      	adds	r7, #20
 8018214:	46bd      	mov	sp, r7
 8018216:	bd90      	pop	{r4, r7, pc}

08018218 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 8018218:	b480      	push	{r7}
 801821a:	b083      	sub	sp, #12
 801821c:	af00      	add	r7, sp, #0
 801821e:	6078      	str	r0, [r7, #4]
 8018220:	4a04      	ldr	r2, [pc, #16]	; (8018234 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	601a      	str	r2, [r3, #0]
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	4618      	mov	r0, r3
 801822a:	370c      	adds	r7, #12
 801822c:	46bd      	mov	sp, r7
 801822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018232:	4770      	bx	lr
 8018234:	0802c5fc 	.word	0x0802c5fc

08018238 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 8018238:	b480      	push	{r7}
 801823a:	b083      	sub	sp, #12
 801823c:	af00      	add	r7, sp, #0
 801823e:	6078      	str	r0, [r7, #4]
 8018240:	4a04      	ldr	r2, [pc, #16]	; (8018254 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	601a      	str	r2, [r3, #0]
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	4618      	mov	r0, r3
 801824a:	370c      	adds	r7, #12
 801824c:	46bd      	mov	sp, r7
 801824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018252:	4770      	bx	lr
 8018254:	0802c5fc 	.word	0x0802c5fc

08018258 <_ZN6tflite13MemoryPlannerD0Ev>:
 8018258:	b580      	push	{r7, lr}
 801825a:	b082      	sub	sp, #8
 801825c:	af00      	add	r7, sp, #0
 801825e:	6078      	str	r0, [r7, #4]
 8018260:	6878      	ldr	r0, [r7, #4]
 8018262:	f7ff ffe9 	bl	8018238 <_ZN6tflite13MemoryPlannerD1Ev>
 8018266:	2104      	movs	r1, #4
 8018268:	6878      	ldr	r0, [r7, #4]
 801826a:	f00c fd7a 	bl	8024d62 <_ZdlPvj>
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	4618      	mov	r0, r3
 8018272:	3708      	adds	r7, #8
 8018274:	46bd      	mov	sp, r7
 8018276:	bd80      	pop	{r7, pc}

08018278 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 8018278:	b480      	push	{r7}
 801827a:	b083      	sub	sp, #12
 801827c:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 801827e:	2328      	movs	r3, #40	; 0x28
 8018280:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 8018282:	2328      	movs	r3, #40	; 0x28
  }
 8018284:	4618      	mov	r0, r3
 8018286:	370c      	adds	r7, #12
 8018288:	46bd      	mov	sp, r7
 801828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801828e:	4770      	bx	lr

08018290 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
}  // namespace

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 8018290:	b480      	push	{r7}
 8018292:	b089      	sub	sp, #36	; 0x24
 8018294:	af00      	add	r7, sp, #0
 8018296:	60f8      	str	r0, [r7, #12]
 8018298:	60b9      	str	r1, [r7, #8]
 801829a:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 801829c:	2300      	movs	r3, #0
 801829e:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 80182a0:	2301      	movs	r3, #1
 80182a2:	61bb      	str	r3, [r7, #24]
 80182a4:	69ba      	ldr	r2, [r7, #24]
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	429a      	cmp	r2, r3
 80182aa:	da4c      	bge.n	8018346 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 80182ac:	69bb      	ldr	r3, [r7, #24]
 80182ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80182b2:	3b01      	subs	r3, #1
 80182b4:	009b      	lsls	r3, r3, #2
 80182b6:	68fa      	ldr	r2, [r7, #12]
 80182b8:	4413      	add	r3, r2
 80182ba:	681a      	ldr	r2, [r3, #0]
 80182bc:	69bb      	ldr	r3, [r7, #24]
 80182be:	009b      	lsls	r3, r3, #2
 80182c0:	68f9      	ldr	r1, [r7, #12]
 80182c2:	440b      	add	r3, r1
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	429a      	cmp	r2, r3
 80182c8:	da39      	bge.n	801833e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 80182ca:	69bb      	ldr	r3, [r7, #24]
 80182cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80182d0:	3b01      	subs	r3, #1
 80182d2:	009b      	lsls	r3, r3, #2
 80182d4:	68fa      	ldr	r2, [r7, #12]
 80182d6:	4413      	add	r3, r2
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 80182dc:	69bb      	ldr	r3, [r7, #24]
 80182de:	009b      	lsls	r3, r3, #2
 80182e0:	68fa      	ldr	r2, [r7, #12]
 80182e2:	441a      	add	r2, r3
 80182e4:	69bb      	ldr	r3, [r7, #24]
 80182e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80182ea:	3b01      	subs	r3, #1
 80182ec:	009b      	lsls	r3, r3, #2
 80182ee:	68f9      	ldr	r1, [r7, #12]
 80182f0:	440b      	add	r3, r1
 80182f2:	6812      	ldr	r2, [r2, #0]
 80182f4:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 80182f6:	69bb      	ldr	r3, [r7, #24]
 80182f8:	009b      	lsls	r3, r3, #2
 80182fa:	68fa      	ldr	r2, [r7, #12]
 80182fc:	4413      	add	r3, r2
 80182fe:	697a      	ldr	r2, [r7, #20]
 8018300:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 8018302:	69bb      	ldr	r3, [r7, #24]
 8018304:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018308:	3b01      	subs	r3, #1
 801830a:	009b      	lsls	r3, r3, #2
 801830c:	68ba      	ldr	r2, [r7, #8]
 801830e:	4413      	add	r3, r2
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 8018314:	69bb      	ldr	r3, [r7, #24]
 8018316:	009b      	lsls	r3, r3, #2
 8018318:	68ba      	ldr	r2, [r7, #8]
 801831a:	441a      	add	r2, r3
 801831c:	69bb      	ldr	r3, [r7, #24]
 801831e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018322:	3b01      	subs	r3, #1
 8018324:	009b      	lsls	r3, r3, #2
 8018326:	68b9      	ldr	r1, [r7, #8]
 8018328:	440b      	add	r3, r1
 801832a:	6812      	ldr	r2, [r2, #0]
 801832c:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 801832e:	69bb      	ldr	r3, [r7, #24]
 8018330:	009b      	lsls	r3, r3, #2
 8018332:	68ba      	ldr	r2, [r7, #8]
 8018334:	4413      	add	r3, r2
 8018336:	693a      	ldr	r2, [r7, #16]
 8018338:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 801833a:	2301      	movs	r3, #1
 801833c:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 801833e:	69bb      	ldr	r3, [r7, #24]
 8018340:	3301      	adds	r3, #1
 8018342:	61bb      	str	r3, [r7, #24]
 8018344:	e7ae      	b.n	80182a4 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 8018346:	7ffb      	ldrb	r3, [r7, #31]
 8018348:	2b00      	cmp	r3, #0
 801834a:	d000      	beq.n	801834e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 801834c:	e7a6      	b.n	801829c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 801834e:	bf00      	nop
 8018350:	3724      	adds	r7, #36	; 0x24
 8018352:	46bd      	mov	sp, r7
 8018354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018358:	4770      	bx	lr
	...

0801835c <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 801835c:	b590      	push	{r4, r7, lr}
 801835e:	b087      	sub	sp, #28
 8018360:	af00      	add	r7, sp, #0
 8018362:	60f8      	str	r0, [r7, #12]
 8018364:	60b9      	str	r1, [r7, #8]
 8018366:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	4618      	mov	r0, r3
 801836c:	f7ff ff54 	bl	8018218 <_ZN6tflite13MemoryPlannerC1Ev>
 8018370:	4a22      	ldr	r2, [pc, #136]	; (80183fc <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	601a      	str	r2, [r3, #0]
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	2200      	movs	r2, #0
 801837a:	609a      	str	r2, [r3, #8]
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	2201      	movs	r2, #1
 8018380:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 8018384:	687c      	ldr	r4, [r7, #4]
 8018386:	f7ff ff77 	bl	8018278 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 801838a:	4603      	mov	r3, r0
 801838c:	fbb4 f3f3 	udiv	r3, r4, r3
 8018390:	461a      	mov	r2, r3
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 8018396:	68bb      	ldr	r3, [r7, #8]
 8018398:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	697a      	ldr	r2, [r7, #20]
 801839e:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	685b      	ldr	r3, [r3, #4]
 80183a4:	011b      	lsls	r3, r3, #4
 80183a6:	697a      	ldr	r2, [r7, #20]
 80183a8:	4413      	add	r3, r2
 80183aa:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	697a      	ldr	r2, [r7, #20]
 80183b0:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	685b      	ldr	r3, [r3, #4]
 80183b6:	009b      	lsls	r3, r3, #2
 80183b8:	697a      	ldr	r2, [r7, #20]
 80183ba:	4413      	add	r3, r2
 80183bc:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	697a      	ldr	r2, [r7, #20]
 80183c2:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	685b      	ldr	r3, [r3, #4]
 80183c8:	009b      	lsls	r3, r3, #2
 80183ca:	697a      	ldr	r2, [r7, #20]
 80183cc:	4413      	add	r3, r2
 80183ce:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	697a      	ldr	r2, [r7, #20]
 80183d4:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	685b      	ldr	r3, [r3, #4]
 80183da:	461a      	mov	r2, r3
 80183dc:	4613      	mov	r3, r2
 80183de:	005b      	lsls	r3, r3, #1
 80183e0:	4413      	add	r3, r2
 80183e2:	009b      	lsls	r3, r3, #2
 80183e4:	461a      	mov	r2, r3
 80183e6:	697b      	ldr	r3, [r7, #20]
 80183e8:	4413      	add	r3, r2
 80183ea:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	697a      	ldr	r2, [r7, #20]
 80183f0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	4618      	mov	r0, r3
 80183f6:	371c      	adds	r7, #28
 80183f8:	46bd      	mov	sp, r7
 80183fa:	bd90      	pop	{r4, r7, pc}
 80183fc:	0802c5dc 	.word	0x0802c5dc

08018400 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8018400:	b580      	push	{r7, lr}
 8018402:	b082      	sub	sp, #8
 8018404:	af00      	add	r7, sp, #0
 8018406:	6078      	str	r0, [r7, #4]
 8018408:	4a05      	ldr	r2, [pc, #20]	; (8018420 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	601a      	str	r2, [r3, #0]
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	4618      	mov	r0, r3
 8018412:	f7ff ff11 	bl	8018238 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	4618      	mov	r0, r3
 801841a:	3708      	adds	r7, #8
 801841c:	46bd      	mov	sp, r7
 801841e:	bd80      	pop	{r7, pc}
 8018420:	0802c5dc 	.word	0x0802c5dc

08018424 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8018424:	b580      	push	{r7, lr}
 8018426:	b082      	sub	sp, #8
 8018428:	af00      	add	r7, sp, #0
 801842a:	6078      	str	r0, [r7, #4]
}
 801842c:	6878      	ldr	r0, [r7, #4]
 801842e:	f7ff ffe7 	bl	8018400 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8018432:	212c      	movs	r1, #44	; 0x2c
 8018434:	6878      	ldr	r0, [r7, #4]
 8018436:	f00c fc94 	bl	8024d62 <_ZdlPvj>
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	4618      	mov	r0, r3
 801843e:	3708      	adds	r7, #8
 8018440:	46bd      	mov	sp, r7
 8018442:	bd80      	pop	{r7, pc}

08018444 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 8018444:	b580      	push	{r7, lr}
 8018446:	b086      	sub	sp, #24
 8018448:	af00      	add	r7, sp, #0
 801844a:	60f8      	str	r0, [r7, #12]
 801844c:	60b9      	str	r1, [r7, #8]
 801844e:	607a      	str	r2, [r7, #4]
 8018450:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	689a      	ldr	r2, [r3, #8]
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	685b      	ldr	r3, [r3, #4]
 801845a:	429a      	cmp	r2, r3
 801845c:	db08      	blt.n	8018470 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	685b      	ldr	r3, [r3, #4]
 8018462:	461a      	mov	r2, r3
 8018464:	4913      	ldr	r1, [pc, #76]	; (80184b4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 8018466:	68b8      	ldr	r0, [r7, #8]
 8018468:	f7f0 fa14 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 801846c:	2301      	movs	r3, #1
 801846e:	e01d      	b.n	80184ac <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	68da      	ldr	r2, [r3, #12]
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	689b      	ldr	r3, [r3, #8]
 8018478:	011b      	lsls	r3, r3, #4
 801847a:	4413      	add	r3, r2
 801847c:	617b      	str	r3, [r7, #20]
  current->size = size;
 801847e:	697b      	ldr	r3, [r7, #20]
 8018480:	687a      	ldr	r2, [r7, #4]
 8018482:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 8018484:	697b      	ldr	r3, [r7, #20]
 8018486:	683a      	ldr	r2, [r7, #0]
 8018488:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 801848a:	697b      	ldr	r3, [r7, #20]
 801848c:	6a3a      	ldr	r2, [r7, #32]
 801848e:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 8018490:	697b      	ldr	r3, [r7, #20]
 8018492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018496:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	689b      	ldr	r3, [r3, #8]
 801849c:	1c5a      	adds	r2, r3, #1
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	2201      	movs	r2, #1
 80184a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 80184aa:	2300      	movs	r3, #0
}
 80184ac:	4618      	mov	r0, r3
 80184ae:	3718      	adds	r7, #24
 80184b0:	46bd      	mov	sp, r7
 80184b2:	bd80      	pop	{r7, pc}
 80184b4:	0802bcfc 	.word	0x0802bcfc

080184b8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 80184b8:	b590      	push	{r4, r7, lr}
 80184ba:	b089      	sub	sp, #36	; 0x24
 80184bc:	af02      	add	r7, sp, #8
 80184be:	60f8      	str	r0, [r7, #12]
 80184c0:	60b9      	str	r1, [r7, #8]
 80184c2:	607a      	str	r2, [r7, #4]
 80184c4:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	68da      	ldr	r2, [r3, #12]
 80184ca:	68fb      	ldr	r3, [r7, #12]
 80184cc:	689b      	ldr	r3, [r3, #8]
 80184ce:	011b      	lsls	r3, r3, #4
 80184d0:	4413      	add	r3, r2
 80184d2:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	3308      	adds	r3, #8
 80184da:	681c      	ldr	r4, [r3, #0]
 80184dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184de:	9300      	str	r3, [sp, #0]
 80184e0:	683b      	ldr	r3, [r7, #0]
 80184e2:	687a      	ldr	r2, [r7, #4]
 80184e4:	68b9      	ldr	r1, [r7, #8]
 80184e6:	68f8      	ldr	r0, [r7, #12]
 80184e8:	47a0      	blx	r4
 80184ea:	4603      	mov	r3, r0
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	bf14      	ite	ne
 80184f0:	2301      	movne	r3, #1
 80184f2:	2300      	moveq	r3, #0
 80184f4:	b2db      	uxtb	r3, r3
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d001      	beq.n	80184fe <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 80184fa:	2301      	movs	r3, #1
 80184fc:	e003      	b.n	8018506 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 80184fe:	697b      	ldr	r3, [r7, #20]
 8018500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018502:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 8018504:	2300      	movs	r3, #0
}
 8018506:	4618      	mov	r0, r3
 8018508:	371c      	adds	r7, #28
 801850a:	46bd      	mov	sp, r7
 801850c:	bd90      	pop	{r4, r7, pc}

0801850e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 801850e:	b480      	push	{r7}
 8018510:	b087      	sub	sp, #28
 8018512:	af00      	add	r7, sp, #0
 8018514:	60f8      	str	r0, [r7, #12]
 8018516:	60b9      	str	r1, [r7, #8]
 8018518:	607a      	str	r2, [r7, #4]
 801851a:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	68da      	ldr	r2, [r3, #12]
 8018520:	68bb      	ldr	r3, [r7, #8]
 8018522:	685b      	ldr	r3, [r3, #4]
 8018524:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 8018526:	4413      	add	r3, r2
 8018528:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 801852a:	697b      	ldr	r3, [r7, #20]
 801852c:	689b      	ldr	r3, [r3, #8]
 801852e:	683a      	ldr	r2, [r7, #0]
 8018530:	429a      	cmp	r2, r3
 8018532:	da01      	bge.n	8018538 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 8018534:	2300      	movs	r3, #0
 8018536:	e007      	b.n	8018548 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 8018538:	697b      	ldr	r3, [r7, #20]
 801853a:	68db      	ldr	r3, [r3, #12]
 801853c:	687a      	ldr	r2, [r7, #4]
 801853e:	429a      	cmp	r2, r3
 8018540:	dd01      	ble.n	8018546 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 8018542:	2300      	movs	r3, #0
 8018544:	e000      	b.n	8018548 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 8018546:	2301      	movs	r3, #1
}
 8018548:	4618      	mov	r0, r3
 801854a:	371c      	adds	r7, #28
 801854c:	46bd      	mov	sp, r7
 801854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018552:	4770      	bx	lr

08018554 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 8018554:	b580      	push	{r7, lr}
 8018556:	b086      	sub	sp, #24
 8018558:	af00      	add	r7, sp, #0
 801855a:	60f8      	str	r0, [r7, #12]
 801855c:	60b9      	str	r1, [r7, #8]
 801855e:	607a      	str	r2, [r7, #4]
 8018560:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 8018562:	2300      	movs	r3, #0
 8018564:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 8018566:	68bb      	ldr	r3, [r7, #8]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d10b      	bne.n	8018584 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	699a      	ldr	r2, [r3, #24]
 8018570:	68fb      	ldr	r3, [r7, #12]
 8018572:	6a1b      	ldr	r3, [r3, #32]
 8018574:	4619      	mov	r1, r3
 8018576:	460b      	mov	r3, r1
 8018578:	005b      	lsls	r3, r3, #1
 801857a:	440b      	add	r3, r1
 801857c:	009b      	lsls	r3, r3, #2
 801857e:	4413      	add	r3, r2
 8018580:	613b      	str	r3, [r7, #16]
 8018582:	e011      	b.n	80185a8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 8018584:	68bb      	ldr	r3, [r7, #8]
 8018586:	689b      	ldr	r3, [r3, #8]
 8018588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801858c:	d101      	bne.n	8018592 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 801858e:	2300      	movs	r3, #0
 8018590:	e029      	b.n	80185e6 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	699a      	ldr	r2, [r3, #24]
 8018596:	68bb      	ldr	r3, [r7, #8]
 8018598:	689b      	ldr	r3, [r3, #8]
 801859a:	4619      	mov	r1, r3
 801859c:	460b      	mov	r3, r1
 801859e:	005b      	lsls	r3, r3, #1
 80185a0:	440b      	add	r3, r1
 80185a2:	009b      	lsls	r3, r3, #2
 80185a4:	4413      	add	r3, r2
 80185a6:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 80185a8:	683b      	ldr	r3, [r7, #0]
 80185aa:	687a      	ldr	r2, [r7, #4]
 80185ac:	6939      	ldr	r1, [r7, #16]
 80185ae:	68f8      	ldr	r0, [r7, #12]
 80185b0:	f7ff ffad 	bl	801850e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 80185b4:	4603      	mov	r3, r0
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d002      	beq.n	80185c0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 80185ba:	693b      	ldr	r3, [r7, #16]
 80185bc:	617b      	str	r3, [r7, #20]
      break;
 80185be:	e011      	b.n	80185e4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 80185c0:	693b      	ldr	r3, [r7, #16]
 80185c2:	689b      	ldr	r3, [r3, #8]
 80185c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80185c8:	d00b      	beq.n	80185e2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	699a      	ldr	r2, [r3, #24]
 80185ce:	693b      	ldr	r3, [r7, #16]
 80185d0:	689b      	ldr	r3, [r3, #8]
 80185d2:	4619      	mov	r1, r3
 80185d4:	460b      	mov	r3, r1
 80185d6:	005b      	lsls	r3, r3, #1
 80185d8:	440b      	add	r3, r1
 80185da:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 80185dc:	4413      	add	r3, r2
 80185de:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 80185e0:	e7e2      	b.n	80185a8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 80185e2:	bf00      	nop
  } while (true);
  return result;
 80185e4:	697b      	ldr	r3, [r7, #20]
}
 80185e6:	4618      	mov	r0, r3
 80185e8:	3718      	adds	r7, #24
 80185ea:	46bd      	mov	sp, r7
 80185ec:	bd80      	pop	{r7, pc}

080185ee <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 80185ee:	b580      	push	{r7, lr}
 80185f0:	b098      	sub	sp, #96	; 0x60
 80185f2:	af00      	add	r7, sp, #0
 80185f4:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80185fc:	f083 0301 	eor.w	r3, r3, #1
 8018600:	b2db      	uxtb	r3, r3
 8018602:	2b00      	cmp	r3, #0
 8018604:	f040 815f 	bne.w	80188c6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	689b      	ldr	r3, [r3, #8]
 801860c:	2b00      	cmp	r3, #0
 801860e:	f000 815a 	beq.w	80188c6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	2200      	movs	r2, #0
 8018616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	689b      	ldr	r3, [r3, #8]
 801861e:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 8018620:	2300      	movs	r3, #0
 8018622:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8018624:	2300      	movs	r3, #0
 8018626:	657b      	str	r3, [r7, #84]	; 0x54
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	689b      	ldr	r3, [r3, #8]
 801862c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801862e:	429a      	cmp	r2, r3
 8018630:	da4d      	bge.n	80186ce <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	68da      	ldr	r2, [r3, #12]
 8018636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018638:	011b      	lsls	r3, r3, #4
 801863a:	4413      	add	r3, r2
 801863c:	685b      	ldr	r3, [r3, #4]
 801863e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018642:	d11e      	bne.n	8018682 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 8018644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018646:	3b01      	subs	r3, #1
 8018648:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	68da      	ldr	r2, [r3, #12]
 801864e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018650:	011b      	lsls	r3, r3, #4
 8018652:	441a      	add	r2, r3
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	6919      	ldr	r1, [r3, #16]
 8018658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801865a:	009b      	lsls	r3, r3, #2
 801865c:	440b      	add	r3, r1
 801865e:	6812      	ldr	r2, [r2, #0]
 8018660:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	695a      	ldr	r2, [r3, #20]
 8018666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018668:	009b      	lsls	r3, r3, #2
 801866a:	4413      	add	r3, r2
 801866c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801866e:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018676:	009b      	lsls	r3, r3, #2
 8018678:	4413      	add	r3, r2
 801867a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801867e:	601a      	str	r2, [r3, #0]
 8018680:	e021      	b.n	80186c6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	68da      	ldr	r2, [r3, #12]
 8018686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018688:	011b      	lsls	r3, r3, #4
 801868a:	441a      	add	r2, r3
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	6919      	ldr	r1, [r3, #16]
 8018690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018692:	009b      	lsls	r3, r3, #2
 8018694:	440b      	add	r3, r1
 8018696:	6812      	ldr	r2, [r2, #0]
 8018698:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	695a      	ldr	r2, [r3, #20]
 801869e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80186a0:	009b      	lsls	r3, r3, #2
 80186a2:	4413      	add	r3, r2
 80186a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80186a6:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	68da      	ldr	r2, [r3, #12]
 80186ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80186ae:	011b      	lsls	r3, r3, #4
 80186b0:	441a      	add	r2, r3
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80186b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80186b8:	009b      	lsls	r3, r3, #2
 80186ba:	440b      	add	r3, r1
 80186bc:	6852      	ldr	r2, [r2, #4]
 80186be:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 80186c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80186c2:	3301      	adds	r3, #1
 80186c4:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 80186c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80186c8:	3301      	adds	r3, #1
 80186ca:	657b      	str	r3, [r7, #84]	; 0x54
 80186cc:	e7ac      	b.n	8018628 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	691a      	ldr	r2, [r3, #16]
 80186d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80186d4:	009b      	lsls	r3, r3, #2
 80186d6:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	695a      	ldr	r2, [r3, #20]
 80186dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80186de:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 80186e0:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 80186e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80186e8:	1ad3      	subs	r3, r2, r3
 80186ea:	461a      	mov	r2, r3
 80186ec:	f7ff fdd0 	bl	8018290 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	2200      	movs	r2, #0
 80186f4:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	2201      	movs	r2, #1
 80186fa:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	699a      	ldr	r2, [r3, #24]
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	6a1b      	ldr	r3, [r3, #32]
 8018704:	4619      	mov	r1, r3
 8018706:	460b      	mov	r3, r1
 8018708:	005b      	lsls	r3, r3, #1
 801870a:	440b      	add	r3, r1
 801870c:	009b      	lsls	r3, r3, #2
 801870e:	4413      	add	r3, r2
 8018710:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 8018712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018718:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	695b      	ldr	r3, [r3, #20]
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 8018722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018726:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	68da      	ldr	r2, [r3, #12]
 801872c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801872e:	011b      	lsls	r3, r3, #4
 8018730:	4413      	add	r3, r2
 8018732:	685b      	ldr	r3, [r3, #4]
 8018734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018738:	d106      	bne.n	8018748 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801873e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018740:	009b      	lsls	r3, r3, #2
 8018742:	4413      	add	r3, r2
 8018744:	2200      	movs	r2, #0
 8018746:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801874c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801874e:	009b      	lsls	r3, r3, #2
 8018750:	4413      	add	r3, r2
 8018752:	681a      	ldr	r2, [r3, #0]
 8018754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018756:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 8018758:	2301      	movs	r3, #1
 801875a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	689b      	ldr	r3, [r3, #8]
 8018760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018762:	429a      	cmp	r2, r3
 8018764:	f280 80b0 	bge.w	80188c8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	695a      	ldr	r2, [r3, #20]
 801876c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801876e:	009b      	lsls	r3, r3, #2
 8018770:	4413      	add	r3, r2
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	68da      	ldr	r2, [r3, #12]
 801877a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801877c:	011b      	lsls	r3, r3, #4
 801877e:	4413      	add	r3, r2
 8018780:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 8018782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 8018788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801878a:	689b      	ldr	r3, [r3, #8]
 801878c:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 801878e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018790:	68db      	ldr	r3, [r3, #12]
 8018792:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 8018794:	2300      	movs	r3, #0
 8018796:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 8018798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801879a:	685b      	ldr	r3, [r3, #4]
 801879c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80187a0:	d12d      	bne.n	80187fe <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 80187a2:	2300      	movs	r3, #0
 80187a4:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 80187a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80187ac:	6878      	ldr	r0, [r7, #4]
 80187ae:	f7ff fed1 	bl	8018554 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 80187b2:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 80187b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d012      	beq.n	80187e0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	68da      	ldr	r2, [r3, #12]
 80187be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187c0:	685b      	ldr	r3, [r3, #4]
 80187c2:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 80187c4:	4413      	add	r3, r2
 80187c6:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 80187c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187ca:	681a      	ldr	r2, [r3, #0]
 80187cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ce:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 80187d0:	4413      	add	r3, r2
 80187d2:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 80187d4:	6a3a      	ldr	r2, [r7, #32]
 80187d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80187d8:	429a      	cmp	r2, r3
 80187da:	dd01      	ble.n	80187e0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 80187dc:	6a3b      	ldr	r3, [r7, #32]
 80187de:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 80187e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d00f      	beq.n	8018806 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 80187e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e8:	681a      	ldr	r2, [r3, #0]
 80187ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80187ec:	1ad3      	subs	r3, r2, r3
 80187ee:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 80187f0:	69fa      	ldr	r2, [r7, #28]
 80187f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187f4:	429a      	cmp	r2, r3
 80187f6:	da08      	bge.n	801880a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 80187f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187fa:	647b      	str	r3, [r7, #68]	; 0x44
      }
 80187fc:	e7d3      	b.n	80187a6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 80187fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018800:	685b      	ldr	r3, [r3, #4]
 8018802:	64bb      	str	r3, [r7, #72]	; 0x48
 8018804:	e002      	b.n	801880c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 8018806:	bf00      	nop
 8018808:	e000      	b.n	801880c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 801880a:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018812:	009b      	lsls	r3, r3, #2
 8018814:	4413      	add	r3, r2
 8018816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018818:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	699a      	ldr	r2, [r3, #24]
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	69db      	ldr	r3, [r3, #28]
 8018822:	4619      	mov	r1, r3
 8018824:	460b      	mov	r3, r1
 8018826:	005b      	lsls	r3, r3, #1
 8018828:	440b      	add	r3, r1
 801882a:	009b      	lsls	r3, r3, #2
 801882c:	4413      	add	r3, r2
 801882e:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 8018830:	69bb      	ldr	r3, [r7, #24]
 8018832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018834:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 8018836:	69bb      	ldr	r3, [r7, #24]
 8018838:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801883a:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	69db      	ldr	r3, [r3, #28]
 8018840:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	69db      	ldr	r3, [r3, #28]
 8018846:	1c5a      	adds	r2, r3, #1
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 801884c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018852:	429a      	cmp	r2, r3
 8018854:	da09      	bge.n	801886a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 8018856:	69bb      	ldr	r3, [r7, #24]
 8018858:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	6a1a      	ldr	r2, [r3, #32]
 801885e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018860:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	697a      	ldr	r2, [r7, #20]
 8018866:	621a      	str	r2, [r3, #32]
 8018868:	e029      	b.n	80188be <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 801886a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801886c:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 801886e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018870:	689b      	ldr	r3, [r3, #8]
 8018872:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 8018874:	693b      	ldr	r3, [r7, #16]
 8018876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801887a:	d107      	bne.n	801888c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 801887c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801887e:	697a      	ldr	r2, [r7, #20]
 8018880:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 8018882:	69bb      	ldr	r3, [r7, #24]
 8018884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018888:	609a      	str	r2, [r3, #8]
          break;
 801888a:	e018      	b.n	80188be <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	6999      	ldr	r1, [r3, #24]
 8018890:	693a      	ldr	r2, [r7, #16]
 8018892:	4613      	mov	r3, r2
 8018894:	005b      	lsls	r3, r3, #1
 8018896:	4413      	add	r3, r2
 8018898:	009b      	lsls	r3, r3, #2
 801889a:	440b      	add	r3, r1
 801889c:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80188a4:	429a      	cmp	r2, r3
 80188a6:	da07      	bge.n	80188b8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 80188a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80188aa:	689a      	ldr	r2, [r3, #8]
 80188ac:	69bb      	ldr	r3, [r7, #24]
 80188ae:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 80188b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80188b2:	697a      	ldr	r2, [r7, #20]
 80188b4:	609a      	str	r2, [r3, #8]
          break;
 80188b6:	e002      	b.n	80188be <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	643b      	str	r3, [r7, #64]	; 0x40
      }
 80188bc:	e7d7      	b.n	801886e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 80188be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188c0:	3301      	adds	r3, #1
 80188c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80188c4:	e74a      	b.n	801875c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 80188c6:	bf00      	nop
    }
  }
}
 80188c8:	3760      	adds	r7, #96	; 0x60
 80188ca:	46bd      	mov	sp, r7
 80188cc:	bd80      	pop	{r7, pc}

080188ce <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 80188ce:	b580      	push	{r7, lr}
 80188d0:	b086      	sub	sp, #24
 80188d2:	af00      	add	r7, sp, #0
 80188d4:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 80188d6:	6878      	ldr	r0, [r7, #4]
 80188d8:	f7ff fe89 	bl	80185ee <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	689b      	ldr	r3, [r3, #8]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d101      	bne.n	80188e8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 80188e4:	2300      	movs	r3, #0
 80188e6:	e035      	b.n	8018954 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	699a      	ldr	r2, [r3, #24]
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	6a1b      	ldr	r3, [r3, #32]
 80188f0:	4619      	mov	r1, r3
 80188f2:	460b      	mov	r3, r1
 80188f4:	005b      	lsls	r3, r3, #1
 80188f6:	440b      	add	r3, r1
 80188f8:	009b      	lsls	r3, r3, #2
 80188fa:	4413      	add	r3, r2
 80188fc:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 80188fe:	2300      	movs	r3, #0
 8018900:	613b      	str	r3, [r7, #16]
  while (entry) {
 8018902:	697b      	ldr	r3, [r7, #20]
 8018904:	2b00      	cmp	r3, #0
 8018906:	d024      	beq.n	8018952 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	68da      	ldr	r2, [r3, #12]
 801890c:	697b      	ldr	r3, [r7, #20]
 801890e:	685b      	ldr	r3, [r3, #4]
 8018910:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 8018912:	4413      	add	r3, r2
 8018914:	60fb      	str	r3, [r7, #12]
    const size_t current_size = entry->offset + requirements->size;
 8018916:	697b      	ldr	r3, [r7, #20]
 8018918:	681a      	ldr	r2, [r3, #0]
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	4413      	add	r3, r2
 8018920:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 8018922:	68ba      	ldr	r2, [r7, #8]
 8018924:	693b      	ldr	r3, [r7, #16]
 8018926:	429a      	cmp	r2, r3
 8018928:	d901      	bls.n	801892e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 801892a:	68bb      	ldr	r3, [r7, #8]
 801892c:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 801892e:	697b      	ldr	r3, [r7, #20]
 8018930:	689b      	ldr	r3, [r3, #8]
 8018932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018936:	d00b      	beq.n	8018950 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	699a      	ldr	r2, [r3, #24]
 801893c:	697b      	ldr	r3, [r7, #20]
 801893e:	689b      	ldr	r3, [r3, #8]
 8018940:	4619      	mov	r1, r3
 8018942:	460b      	mov	r3, r1
 8018944:	005b      	lsls	r3, r3, #1
 8018946:	440b      	add	r3, r1
 8018948:	009b      	lsls	r3, r3, #2
 801894a:	4413      	add	r3, r2
 801894c:	617b      	str	r3, [r7, #20]
  while (entry) {
 801894e:	e7d8      	b.n	8018902 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 8018950:	bf00      	nop
  }
  return max_size;
 8018952:	693b      	ldr	r3, [r7, #16]
}
 8018954:	4618      	mov	r0, r3
 8018956:	3718      	adds	r7, #24
 8018958:	46bd      	mov	sp, r7
 801895a:	bd80      	pop	{r7, pc}

0801895c <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 801895c:	b480      	push	{r7}
 801895e:	b083      	sub	sp, #12
 8018960:	af00      	add	r7, sp, #0
 8018962:	6078      	str	r0, [r7, #4]
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	689b      	ldr	r3, [r3, #8]
 8018968:	4618      	mov	r0, r3
 801896a:	370c      	adds	r7, #12
 801896c:	46bd      	mov	sp, r7
 801896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018972:	4770      	bx	lr

08018974 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 8018974:	b580      	push	{r7, lr}
 8018976:	b084      	sub	sp, #16
 8018978:	af00      	add	r7, sp, #0
 801897a:	60f8      	str	r0, [r7, #12]
 801897c:	60b9      	str	r1, [r7, #8]
 801897e:	607a      	str	r2, [r7, #4]
 8018980:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 8018982:	68f8      	ldr	r0, [r7, #12]
 8018984:	f7ff fe33 	bl	80185ee <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	2b00      	cmp	r3, #0
 801898c:	db04      	blt.n	8018998 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	689b      	ldr	r3, [r3, #8]
 8018992:	687a      	ldr	r2, [r7, #4]
 8018994:	429a      	cmp	r2, r3
 8018996:	db08      	blt.n	80189aa <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	689b      	ldr	r3, [r3, #8]
 801899c:	687a      	ldr	r2, [r7, #4]
 801899e:	4909      	ldr	r1, [pc, #36]	; (80189c4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 80189a0:	68b8      	ldr	r0, [r7, #8]
 80189a2:	f7ef ff77 	bl	8008894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 80189a6:	2301      	movs	r3, #1
 80189a8:	e008      	b.n	80189bc <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	009b      	lsls	r3, r3, #2
 80189b2:	4413      	add	r3, r2
 80189b4:	681a      	ldr	r2, [r3, #0]
 80189b6:	683b      	ldr	r3, [r7, #0]
 80189b8:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80189ba:	2300      	movs	r3, #0
}
 80189bc:	4618      	mov	r0, r3
 80189be:	3710      	adds	r7, #16
 80189c0:	46bd      	mov	sp, r7
 80189c2:	bd80      	pop	{r7, pc}
 80189c4:	0802bd70 	.word	0x0802bd70

080189c8 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b08e      	sub	sp, #56	; 0x38
 80189cc:	af08      	add	r7, sp, #32
 80189ce:	60f8      	str	r0, [r7, #12]
 80189d0:	60b9      	str	r1, [r7, #8]
 80189d2:	607a      	str	r2, [r7, #4]
 80189d4:	603b      	str	r3, [r7, #0]
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
 80189d6:	2300      	movs	r3, #0
 80189d8:	75fb      	strb	r3, [r7, #23]
    if (output_dims->w % 4 != 0)
 80189da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189dc:	689b      	ldr	r3, [r3, #8]
 80189de:	f003 0303 	and.w	r3, r3, #3
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d002      	beq.n	80189ec <arm_convolve_1_x_n_s8+0x24>
    {
        status = ARM_MATH_SIZE_MISMATCH;
 80189e6:	23fd      	movs	r3, #253	; 0xfd
 80189e8:	75fb      	strb	r3, [r7, #23]
        goto out;
 80189ea:	e015      	b.n	8018a18 <arm_convolve_1_x_n_s8+0x50>
        }
        output_data += (3 * output_ch);
    }

#else
    status = arm_convolve_s8(ctx,
 80189ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189ee:	9306      	str	r3, [sp, #24]
 80189f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189f2:	9305      	str	r3, [sp, #20]
 80189f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189f6:	9304      	str	r3, [sp, #16]
 80189f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189fa:	9303      	str	r3, [sp, #12]
 80189fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189fe:	9302      	str	r3, [sp, #8]
 8018a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a02:	9301      	str	r3, [sp, #4]
 8018a04:	6a3b      	ldr	r3, [r7, #32]
 8018a06:	9300      	str	r3, [sp, #0]
 8018a08:	683b      	ldr	r3, [r7, #0]
 8018a0a:	687a      	ldr	r2, [r7, #4]
 8018a0c:	68b9      	ldr	r1, [r7, #8]
 8018a0e:	68f8      	ldr	r0, [r7, #12]
 8018a10:	f000 f87d 	bl	8018b0e <arm_convolve_s8>
 8018a14:	4603      	mov	r3, r0
 8018a16:	75fb      	strb	r3, [r7, #23]
                             output_data);
#endif

out:
    /* Return to application */
    return status;
 8018a18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	3718      	adds	r7, #24
 8018a20:	46bd      	mov	sp, r7
 8018a22:	bd80      	pop	{r7, pc}

08018a24 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 8018a24:	b480      	push	{r7}
 8018a26:	b083      	sub	sp, #12
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	6078      	str	r0, [r7, #4]
 8018a2c:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	68db      	ldr	r3, [r3, #12]
 8018a32:	683a      	ldr	r2, [r7, #0]
 8018a34:	6892      	ldr	r2, [r2, #8]
 8018a36:	fb02 f303 	mul.w	r3, r2, r3
 8018a3a:	683a      	ldr	r2, [r7, #0]
 8018a3c:	6852      	ldr	r2, [r2, #4]
 8018a3e:	fb02 f303 	mul.w	r3, r2, r3
 8018a42:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 8018a44:	4618      	mov	r0, r3
 8018a46:	370c      	adds	r7, #12
 8018a48:	46bd      	mov	sp, r7
 8018a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a4e:	4770      	bx	lr

08018a50 <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
 8018a50:	b5b0      	push	{r4, r5, r7, lr}
 8018a52:	b092      	sub	sp, #72	; 0x48
 8018a54:	af0a      	add	r7, sp, #40	; 0x28
 8018a56:	60f8      	str	r0, [r7, #12]
 8018a58:	60b9      	str	r1, [r7, #8]
 8018a5a:	607a      	str	r2, [r7, #4]
 8018a5c:	603b      	str	r3, [r7, #0]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 8018a5e:	683b      	ldr	r3, [r7, #0]
 8018a60:	68db      	ldr	r3, [r3, #12]
 8018a62:	f003 0303 	and.w	r3, r3, #3
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d10f      	bne.n	8018a8a <arm_convolve_1x1_s8_fast+0x3a>
 8018a6a:	68bb      	ldr	r3, [r7, #8]
 8018a6c:	691b      	ldr	r3, [r3, #16]
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d10b      	bne.n	8018a8a <arm_convolve_1x1_s8_fast+0x3a>
 8018a72:	68bb      	ldr	r3, [r7, #8]
 8018a74:	695b      	ldr	r3, [r3, #20]
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d107      	bne.n	8018a8a <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 8018a7a:	68bb      	ldr	r3, [r7, #8]
 8018a7c:	689b      	ldr	r3, [r3, #8]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 8018a7e:	2b01      	cmp	r3, #1
 8018a80:	d103      	bne.n	8018a8a <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 8018a82:	68bb      	ldr	r3, [r7, #8]
 8018a84:	68db      	ldr	r3, [r3, #12]
 8018a86:	2b01      	cmp	r3, #1
 8018a88:	d002      	beq.n	8018a90 <arm_convolve_1x1_s8_fast+0x40>
    {
        return ARM_MATH_SIZE_MISMATCH;
 8018a8a:	f06f 0302 	mvn.w	r3, #2
 8018a8e:	e02f      	b.n	8018af0 <arm_convolve_1x1_s8_fast+0xa0>
    }

#else
    /* Run the following code as reference implementation for Cortex-M processors with or without DSP extension */

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 8018a90:	683b      	ldr	r3, [r7, #0]
 8018a92:	689b      	ldr	r3, [r3, #8]
 8018a94:	683a      	ldr	r2, [r7, #0]
 8018a96:	6852      	ldr	r2, [r2, #4]
 8018a98:	fb02 f303 	mul.w	r3, r2, r3
 8018a9c:	683a      	ldr	r2, [r7, #0]
 8018a9e:	6812      	ldr	r2, [r2, #0]
 8018aa0:	fb02 f303 	mul.w	r3, r2, r3
 8018aa4:	61fb      	str	r3, [r7, #28]
    const int32_t rhs_rows = output_dims->c;
 8018aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018aa8:	68db      	ldr	r3, [r3, #12]
 8018aaa:	61bb      	str	r3, [r7, #24]
    const int32_t rhs_cols = input_dims->c;
 8018aac:	683b      	ldr	r3, [r7, #0]
 8018aae:	68db      	ldr	r3, [r3, #12]
 8018ab0:	617b      	str	r3, [r7, #20]

    arm_nn_mat_mult_nt_t_s8(input_data,
                            filter_data,
                            bias_data,
                            output_data,
                            quant_params->multiplier,
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	681b      	ldr	r3, [r3, #0]
                            quant_params->shift,
 8018ab6:	687a      	ldr	r2, [r7, #4]
 8018ab8:	6852      	ldr	r2, [r2, #4]
    arm_nn_mat_mult_nt_t_s8(input_data,
 8018aba:	68b9      	ldr	r1, [r7, #8]
 8018abc:	6809      	ldr	r1, [r1, #0]
 8018abe:	68b8      	ldr	r0, [r7, #8]
 8018ac0:	6840      	ldr	r0, [r0, #4]
 8018ac2:	68bc      	ldr	r4, [r7, #8]
 8018ac4:	6a24      	ldr	r4, [r4, #32]
 8018ac6:	68bd      	ldr	r5, [r7, #8]
 8018ac8:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8018aca:	9508      	str	r5, [sp, #32]
 8018acc:	9407      	str	r4, [sp, #28]
 8018ace:	9006      	str	r0, [sp, #24]
 8018ad0:	9105      	str	r1, [sp, #20]
 8018ad2:	6979      	ldr	r1, [r7, #20]
 8018ad4:	9104      	str	r1, [sp, #16]
 8018ad6:	69b9      	ldr	r1, [r7, #24]
 8018ad8:	9103      	str	r1, [sp, #12]
 8018ada:	69f9      	ldr	r1, [r7, #28]
 8018adc:	9102      	str	r1, [sp, #8]
 8018ade:	9201      	str	r2, [sp, #4]
 8018ae0:	9300      	str	r3, [sp, #0]
 8018ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018ae4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018ae6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018aea:	f005 f95a 	bl	801dda2 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8018aee:	2300      	movs	r3, #0
}
 8018af0:	4618      	mov	r0, r3
 8018af2:	3720      	adds	r7, #32
 8018af4:	46bd      	mov	sp, r7
 8018af6:	bdb0      	pop	{r4, r5, r7, pc}

08018af8 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
 8018af8:	b480      	push	{r7}
 8018afa:	b083      	sub	sp, #12
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	6078      	str	r0, [r7, #4]
    (void)input_dims;
    return 0;
 8018b00:	2300      	movs	r3, #0
}
 8018b02:	4618      	mov	r0, r3
 8018b04:	370c      	adds	r7, #12
 8018b06:	46bd      	mov	sp, r7
 8018b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b0c:	4770      	bx	lr

08018b0e <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
 8018b0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018b12:	b0db      	sub	sp, #364	; 0x16c
 8018b14:	af08      	add	r7, sp, #32
 8018b16:	f107 040c 	add.w	r4, r7, #12
 8018b1a:	6020      	str	r0, [r4, #0]
 8018b1c:	f107 0008 	add.w	r0, r7, #8
 8018b20:	6001      	str	r1, [r0, #0]
 8018b22:	1d39      	adds	r1, r7, #4
 8018b24:	600a      	str	r2, [r1, #0]
 8018b26:	463a      	mov	r2, r7
 8018b28:	6013      	str	r3, [r2, #0]
    (void)bias_dims;
    q15_t *buffer_a = (q15_t *)ctx->buf;
 8018b2a:	f107 030c 	add.w	r3, r7, #12
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    const uint16_t input_batches = input_dims->n;
 8018b36:	463b      	mov	r3, r7
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
    const uint16_t input_x = input_dims->w;
 8018b40:	463b      	mov	r3, r7
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	689b      	ldr	r3, [r3, #8]
 8018b46:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
    const uint16_t input_y = input_dims->h;
 8018b4a:	463b      	mov	r3, r7
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	685b      	ldr	r3, [r3, #4]
 8018b50:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
    const uint16_t input_ch = input_dims->c;
 8018b54:	463b      	mov	r3, r7
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	68db      	ldr	r3, [r3, #12]
 8018b5a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
    const uint16_t kernel_x = filter_dims->w;
 8018b5e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018b62:	689b      	ldr	r3, [r3, #8]
 8018b64:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
    const uint16_t kernel_y = filter_dims->h;
 8018b68:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018b6c:	685b      	ldr	r3, [r3, #4]
 8018b6e:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
    const uint16_t output_x = output_dims->w;
 8018b72:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8018b76:	689b      	ldr	r3, [r3, #8]
 8018b78:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    const uint16_t output_y = output_dims->h;
 8018b7c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8018b80:	685b      	ldr	r3, [r3, #4]
 8018b82:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    const uint16_t output_ch = output_dims->c;
 8018b86:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8018b8a:	68db      	ldr	r3, [r3, #12]
 8018b8c:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    const uint16_t pad_x = conv_params->padding.w;
 8018b90:	f107 0308 	add.w	r3, r7, #8
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	691b      	ldr	r3, [r3, #16]
 8018b98:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    const uint16_t pad_y = conv_params->padding.h;
 8018b9c:	f107 0308 	add.w	r3, r7, #8
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	695b      	ldr	r3, [r3, #20]
 8018ba4:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
    const uint16_t stride_x = conv_params->stride.w;
 8018ba8:	f107 0308 	add.w	r3, r7, #8
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	689b      	ldr	r3, [r3, #8]
 8018bb0:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
    const uint16_t stride_y = conv_params->stride.h;
 8018bb4:	f107 0308 	add.w	r3, r7, #8
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	68db      	ldr	r3, [r3, #12]
 8018bbc:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    const int32_t input_offset = conv_params->input_offset;
 8018bc0:	f107 0308 	add.w	r3, r7, #8
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const int32_t out_offset = conv_params->output_offset;
 8018bcc:	f107 0308 	add.w	r3, r7, #8
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	685b      	ldr	r3, [r3, #4]
 8018bd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    const int32_t out_activation_min = conv_params->activation.min;
 8018bd8:	f107 0308 	add.w	r3, r7, #8
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	6a1b      	ldr	r3, [r3, #32]
 8018be0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    const int32_t out_activation_max = conv_params->activation.max;
 8018be4:	f107 0308 	add.w	r3, r7, #8
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int32_t *output_mult = quant_params->multiplier;
 8018bf0:	1d3b      	adds	r3, r7, #4
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    int32_t *output_shift = quant_params->shift;
 8018bfa:	1d3b      	adds	r3, r7, #4
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	685b      	ldr	r3, [r3, #4]
 8018c00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 8018c04:	2300      	movs	r3, #0
 8018c06:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8018c0a:	e337      	b.n	801927c <arm_convolve_s8+0x76e>

#elif defined(ARM_MATH_DSP)
        int32_t i_out_y, i_out_x, i_ker_y, i_ker_x;

        /* Generate two columns from the input tensor a GEMM computation */
        q15_t *two_column_buf = buffer_a;
 8018c0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018c10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        q7_t *out = output_data;
 8018c14:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018c18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        /* This part implements the im2col function */
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 8018c1c:	2300      	movs	r3, #0
 8018c1e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8018c22:	e0da      	b.n	8018dda <arm_convolve_s8+0x2cc>
        {
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 8018c24:	2300      	movs	r3, #0
 8018c26:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8018c2a:	e0ca      	b.n	8018dc2 <arm_convolve_s8+0x2b4>
            {
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 8018c2c:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8018c30:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8018c34:	fb02 f203 	mul.w	r2, r2, r3
 8018c38:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8018c3c:	1ad3      	subs	r3, r2, r3
 8018c3e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8018c42:	e065      	b.n	8018d10 <arm_convolve_s8+0x202>
                {
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 8018c44:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8018c48:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8018c4c:	fb02 f203 	mul.w	r2, r2, r3
 8018c50:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8018c54:	1ad3      	subs	r3, r2, r3
 8018c56:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8018c5a:	e044      	b.n	8018ce6 <arm_convolve_s8+0x1d8>
                         i_ker_x++)
                    {
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 8018c5c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	db0f      	blt.n	8018c84 <arm_convolve_s8+0x176>
 8018c64:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8018c68:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8018c6c:	429a      	cmp	r2, r3
 8018c6e:	da09      	bge.n	8018c84 <arm_convolve_s8+0x176>
 8018c70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	db05      	blt.n	8018c84 <arm_convolve_s8+0x176>
 8018c78:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8018c7c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8018c80:	429a      	cmp	r2, r3
 8018c82:	db09      	blt.n	8018c98 <arm_convolve_s8+0x18a>
                        {
                            /* Filling 0 for out-of-bound paddings */
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 8018c84:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8018c88:	005b      	lsls	r3, r3, #1
 8018c8a:	461a      	mov	r2, r3
 8018c8c:	2100      	movs	r1, #0
 8018c8e:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8018c92:	f00c fb8f 	bl	80253b4 <memset>
 8018c96:	e019      	b.n	8018ccc <arm_convolve_s8+0x1be>
                        }
                        else
                        {
                            /* Copying the pixel data to column */
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 8018c98:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8018c9c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8018ca0:	fb02 f203 	mul.w	r2, r2, r3
 8018ca4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8018ca8:	4413      	add	r3, r2
 8018caa:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8018cae:	fb02 f303 	mul.w	r3, r2, r3
 8018cb2:	461a      	mov	r2, r3
 8018cb4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8018cb8:	1898      	adds	r0, r3, r2
 8018cba:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8018cbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8018cc2:	b21b      	sxth	r3, r3
 8018cc4:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8018cc8:	f008 fb6f 	bl	80213aa <arm_q7_to_q15_with_offset>
                                                      two_column_buf,
                                                      input_ch,
                                                      input_offset);
                        }
                        two_column_buf += input_ch;
 8018ccc:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8018cd0:	005b      	lsls	r3, r3, #1
 8018cd2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8018cd6:	4413      	add	r3, r2
 8018cd8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                         i_ker_x++)
 8018cdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8018ce0:	3301      	adds	r3, #1
 8018ce2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 8018ce6:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8018cea:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8018cee:	fb02 f203 	mul.w	r2, r2, r3
 8018cf2:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8018cf6:	1ad2      	subs	r2, r2, r3
 8018cf8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8018cfc:	4413      	add	r3, r2
 8018cfe:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8018d02:	429a      	cmp	r2, r3
 8018d04:	dbaa      	blt.n	8018c5c <arm_convolve_s8+0x14e>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 8018d06:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8018d0a:	3301      	adds	r3, #1
 8018d0c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8018d10:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8018d14:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8018d18:	fb02 f203 	mul.w	r2, r2, r3
 8018d1c:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8018d20:	1ad2      	subs	r2, r2, r3
 8018d22:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8018d26:	4413      	add	r3, r2
 8018d28:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8018d2c:	429a      	cmp	r2, r3
 8018d2e:	db89      	blt.n	8018c44 <arm_convolve_s8+0x136>
                    }
                }

                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 8018d30:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8018d34:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8018d38:	fb02 f303 	mul.w	r3, r2, r3
 8018d3c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8018d40:	fb02 f303 	mul.w	r3, r2, r3
 8018d44:	009b      	lsls	r3, r3, #2
 8018d46:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8018d4a:	4413      	add	r3, r2
 8018d4c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8018d50:	429a      	cmp	r2, r3
 8018d52:	d131      	bne.n	8018db8 <arm_convolve_s8+0x2aa>
                {
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 8018d54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8018d58:	b21b      	sxth	r3, r3
 8018d5a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8018d5e:	b212      	sxth	r2, r2
 8018d60:	f8b7 0110 	ldrh.w	r0, [r7, #272]	; 0x110
 8018d64:	f8b7 110c 	ldrh.w	r1, [r7, #268]	; 0x10c
 8018d68:	fb10 f101 	smulbb	r1, r0, r1
 8018d6c:	b289      	uxth	r1, r1
 8018d6e:	f8b7 010e 	ldrh.w	r0, [r7, #270]	; 0x10e
 8018d72:	fb10 f101 	smulbb	r1, r0, r1
 8018d76:	b289      	uxth	r1, r1
 8018d78:	f8b7 4106 	ldrh.w	r4, [r7, #262]	; 0x106
 8018d7c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8018d80:	9006      	str	r0, [sp, #24]
 8018d82:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8018d86:	9005      	str	r0, [sp, #20]
 8018d88:	9104      	str	r1, [sp, #16]
 8018d8a:	9203      	str	r2, [sp, #12]
 8018d8c:	9302      	str	r3, [sp, #8]
 8018d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018d92:	9301      	str	r3, [sp, #4]
 8018d94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018d98:	9300      	str	r3, [sp, #0]
 8018d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018d9e:	4622      	mov	r2, r4
 8018da0:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8018da4:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8018da8:	f003 fcdb 	bl	801c762 <arm_nn_mat_mult_kernel_s8_s16>
 8018dac:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
                                                        input_ch * kernel_y * kernel_x,
                                                        bias_data,
                                                        out);

                    /* counter reset */
                    two_column_buf = buffer_a;
 8018db0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018db4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 8018db8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8018dbc:	3301      	adds	r3, #1
 8018dbe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8018dc2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8018dc6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8018dca:	429a      	cmp	r2, r3
 8018dcc:	f6ff af2e 	blt.w	8018c2c <arm_convolve_s8+0x11e>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 8018dd0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8018dd4:	3301      	adds	r3, #1
 8018dd6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8018dda:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8018dde:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8018de2:	429a      	cmp	r2, r3
 8018de4:	f6ff af1e 	blt.w	8018c24 <arm_convolve_s8+0x116>
                }
            }
        }

        /* left-over because odd number of output pixels */
        if (two_column_buf != buffer_a)
 8018de8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8018dec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018df0:	429a      	cmp	r2, r3
 8018df2:	f000 821e 	beq.w	8019232 <arm_convolve_s8+0x724>
        {
            const q7_t *ker_a = filter_data;
 8018df6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8018dfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            int i;

            for (i = 0; i < output_ch; i++)
 8018dfe:	2300      	movs	r3, #0
 8018e00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8018e04:	e20e      	b.n	8019224 <arm_convolve_s8+0x716>
            {
                /* Load the accumulator with bias first */
                q31_t sum = 0;
 8018e06:	2300      	movs	r3, #0
 8018e08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                if (bias_data)
 8018e0c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d008      	beq.n	8018e26 <arm_convolve_s8+0x318>
                {
                    sum = bias_data[i];
 8018e14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8018e18:	009b      	lsls	r3, r3, #2
 8018e1a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8018e1e:	4413      	add	r3, r2
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                }

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;
 8018e26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018e2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8018e2e:	601a      	str	r2, [r3, #0]

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 8018e30:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8018e34:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8018e38:	fb02 f303 	mul.w	r3, r2, r3
 8018e3c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8018e40:	fb02 f303 	mul.w	r3, r2, r3
 8018e44:	109b      	asrs	r3, r3, #2
 8018e46:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

                while (col_count)
 8018e4a:	e0ea      	b.n	8019022 <arm_convolve_s8+0x514>
 8018e4c:	f107 031c 	add.w	r3, r7, #28
 8018e50:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8018e54:	601a      	str	r2, [r3, #0]
 8018e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8018e5e:	f107 0320 	add.w	r3, r7, #32
 8018e62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8018e66:	f107 031c 	add.w	r3, r7, #28
 8018e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 8018e6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	461a      	mov	r2, r3
 8018e78:	f107 0318 	add.w	r3, r7, #24
 8018e7c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8018e7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	1d1a      	adds	r2, r3, #4
 8018e86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018e8a:	601a      	str	r2, [r3, #0]

    return (val);
 8018e8c:	f107 0318 	add.w	r3, r7, #24
 8018e90:	681b      	ldr	r3, [r3, #0]
 * @brief read and expand one q7 word into two q15 words
 */

__STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
{
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8018e92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8018e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018e9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018e9e:	2308      	movs	r3, #8
 8018ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 8018ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018ea8:	f003 031f 	and.w	r3, r3, #31
 8018eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (op2 == 0U)
 8018eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d102      	bne.n	8018ebe <arm_convolve_s8+0x3b0>
  {
    return op1;
 8018eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018ebc:	e005      	b.n	8018eca <arm_convolve_s8+0x3bc>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 8018ebe:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018ec2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018ec6:	fa62 f303 	ror.w	r3, r2, r3
 8018eca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8018ece:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018ed2:	fa2f f383 	sxtb16	r3, r3
 8018ed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return(result);
 8018eda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018ede:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    q31_t inAbuf2 = __SXTB16(inA);
 8018ee2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018ee6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8018eea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018eee:	fa2f f383 	sxtb16	r3, r3
 8018ef2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8018ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018efa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8018efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018f02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8018f04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018f08:	67bb      	str	r3, [r7, #120]	; 0x78
 8018f0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018f0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8018f0e:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8018f12:	677b      	str	r3, [r7, #116]	; 0x74
 8018f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018f16:	461a      	mov	r2, r3
 8018f18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018f1c:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8018f1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018f22:	673b      	str	r3, [r7, #112]	; 0x70
 8018f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018f28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018f2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018f2e:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8018f32:	66bb      	str	r3, [r7, #104]	; 0x68
 8018f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018f36:	461a      	mov	r2, r3
 8018f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018f3c:	601a      	str	r2, [r3, #0]
#else
    *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
    *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
#endif

    return source;
 8018f3e:	f107 031c 	add.w	r3, r7, #28
 8018f42:	681b      	ldr	r3, [r3, #0]
                {
                    q31_t ker_a1, ker_a2;
                    q31_t ip_b1, ip_b2;

                    ker_a = read_and_pad(ker_a, &ker_a1, &ker_a2);
 8018f44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8018f48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    memcpy(&val, *in_q15, 4);
 8018f50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	461a      	mov	r2, r3
 8018f5a:	f107 0314 	add.w	r3, r7, #20
 8018f5e:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8018f60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	1d1a      	adds	r2, r3, #4
 8018f68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018f6c:	601a      	str	r2, [r3, #0]
    return (val);
 8018f6e:	f107 0314 	add.w	r3, r7, #20
 8018f72:	681b      	ldr	r3, [r3, #0]

                    ip_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 8018f74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                    sum = __SMLAD(ker_a1, ip_b1, sum);
 8018f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	4619      	mov	r1, r3
 8018f80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8018f84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8018f88:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8018f8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8018f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018f94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018f98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018f9c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8018fa0:	fb23 1302 	smlad	r3, r3, r2, r1
 8018fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 8018fa8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018fac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8018fb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018fb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    memcpy(&val, *in_q15, 4);
 8018fb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	461a      	mov	r2, r3
 8018fc2:	f107 0310 	add.w	r3, r7, #16
 8018fc6:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8018fc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	1d1a      	adds	r2, r3, #4
 8018fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018fd4:	601a      	str	r2, [r3, #0]
    return (val);
 8018fd6:	f107 0310 	add.w	r3, r7, #16
 8018fda:	681b      	ldr	r3, [r3, #0]
                    ip_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 8018fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    sum = __SMLAD(ker_a2, ip_b2, sum);
 8018fe0:	f107 0320 	add.w	r3, r7, #32
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	4619      	mov	r1, r3
 8018fe8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8018fec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8018ff0:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8018ff4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8018ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018ffc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8019000:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8019004:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8019008:	fb23 1302 	smlad	r3, r3, r2, r1
 801900c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 8019010:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8019014:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                    col_count--;
 8019018:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 801901c:	3b01      	subs	r3, #1
 801901e:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (col_count)
 8019022:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8019026:	2b00      	cmp	r3, #0
 8019028:	f47f af10 	bne.w	8018e4c <arm_convolve_s8+0x33e>
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 801902c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8019030:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8019034:	fb12 f303 	smulbb	r3, r2, r3
 8019038:	b29b      	uxth	r3, r3
 801903a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 801903e:	fb12 f303 	smulbb	r3, r2, r3
 8019042:	b29b      	uxth	r3, r3
 8019044:	f003 0303 	and.w	r3, r3, #3
 8019048:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (col_count)
 801904c:	e021      	b.n	8019092 <arm_convolve_s8+0x584>
                {
                    q7_t ker_a1 = *ker_a++;
 801904e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8019052:	1c5a      	adds	r2, r3, #1
 8019054:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8019058:	781b      	ldrb	r3, [r3, #0]
 801905a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
                    q15_t ip_b1 = *ip_as_col++;
 801905e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	1c99      	adds	r1, r3, #2
 8019066:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801906a:	6011      	str	r1, [r2, #0]
 801906c:	881b      	ldrh	r3, [r3, #0]
 801906e:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
                    sum += ker_a1 * ip_b1;
 8019072:	f997 30e3 	ldrsb.w	r3, [r7, #227]	; 0xe3
 8019076:	f9b7 20e0 	ldrsh.w	r2, [r7, #224]	; 0xe0
 801907a:	fb02 f303 	mul.w	r3, r2, r3
 801907e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8019082:	4413      	add	r3, r2
 8019084:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    col_count--;
 8019088:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 801908c:	3b01      	subs	r3, #1
 801908e:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (col_count)
 8019092:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8019096:	2b00      	cmp	r3, #0
 8019098:	d1d9      	bne.n	801904e <arm_convolve_s8+0x540>
                }

                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 801909a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801909e:	009b      	lsls	r3, r3, #2
 80190a0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80190a4:	4413      	add	r3, r2
 80190a6:	681a      	ldr	r2, [r3, #0]
 80190a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80190ac:	009b      	lsls	r3, r3, #2
 80190ae:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80190b2:	440b      	add	r3, r1
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80190ba:	6679      	str	r1, [r7, #100]	; 0x64
 80190bc:	663a      	str	r2, [r7, #96]	; 0x60
 80190be:	65fb      	str	r3, [r7, #92]	; 0x5c
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80190c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80190c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80190c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80190c8:	fa02 f303 	lsl.w	r3, r2, r3
 80190cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80190ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80190d0:	657b      	str	r3, [r7, #84]	; 0x54
    q31_t result = 0;
 80190d2:	2300      	movs	r3, #0
 80190d4:	653b      	str	r3, [r7, #80]	; 0x50
    mult.word.low = 1 << 30;
 80190d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80190da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80190de:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 80190e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80190e4:	2200      	movs	r2, #0
 80190e6:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80190e8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80190ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80190ee:	4618      	mov	r0, r3
 80190f0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80190f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80190f6:	461a      	mov	r2, r3
 80190f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80190fc:	fb02 fc01 	mul.w	ip, r2, r1
 8019100:	fb00 f603 	mul.w	r6, r0, r3
 8019104:	4466      	add	r6, ip
 8019106:	fba0 2302 	umull	r2, r3, r0, r2
 801910a:	18f1      	adds	r1, r6, r3
 801910c:	460b      	mov	r3, r1
 801910e:	eb14 0802 	adds.w	r8, r4, r2
 8019112:	eb45 0903 	adc.w	r9, r5, r3
 8019116:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
    result = (int32_t)(mult.long_long >> 31);
 801911a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801911e:	f04f 0200 	mov.w	r2, #0
 8019122:	f04f 0300 	mov.w	r3, #0
 8019126:	0fc2      	lsrs	r2, r0, #31
 8019128:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801912c:	17cb      	asrs	r3, r1, #31
 801912e:	4613      	mov	r3, r2
 8019130:	653b      	str	r3, [r7, #80]	; 0x50
    return result;
 8019132:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019136:	2b00      	cmp	r3, #0
 8019138:	dc02      	bgt.n	8019140 <arm_convolve_s8+0x632>
 801913a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801913c:	425b      	negs	r3, r3
 801913e:	e000      	b.n	8019142 <arm_convolve_s8+0x634>
 8019140:	2300      	movs	r3, #0
 8019142:	64fa      	str	r2, [r7, #76]	; 0x4c
 8019144:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019148:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801914a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801914e:	2200      	movs	r2, #0
 8019150:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019152:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019156:	2201      	movs	r2, #1
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	409a      	lsls	r2, r3
 801915c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019160:	3a01      	subs	r2, #1
 8019162:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8019164:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019168:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801916c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801916e:	6812      	ldr	r2, [r2, #0]
 8019170:	400a      	ands	r2, r1
 8019172:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8019174:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019178:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801917c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801917e:	6812      	ldr	r2, [r2, #0]
 8019180:	fa41 f202 	asr.w	r2, r1, r2
 8019184:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8019186:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801918a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801918e:	6812      	ldr	r2, [r2, #0]
 8019190:	1052      	asrs	r2, r2, #1
 8019192:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8019194:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	2b00      	cmp	r3, #0
 801919c:	da06      	bge.n	80191ac <arm_convolve_s8+0x69e>
        threshold++;
 801919e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80191a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80191a6:	6812      	ldr	r2, [r2, #0]
 80191a8:	3201      	adds	r2, #1
 80191aa:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 80191ac:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80191b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80191b4:	6812      	ldr	r2, [r2, #0]
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	429a      	cmp	r2, r3
 80191ba:	dd06      	ble.n	80191ca <arm_convolve_s8+0x6bc>
        result++;
 80191bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80191c0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80191c4:	6812      	ldr	r2, [r2, #0]
 80191c6:	3201      	adds	r2, #1
 80191c8:	601a      	str	r2, [r3, #0]
    return result;
 80191ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80191ce:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80191d0:	bf00      	nop
 80191d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                sum += out_offset;
 80191d6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80191da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80191de:	4413      	add	r3, r2
 80191e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                sum = MAX(sum, out_activation_min);
 80191e4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80191e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80191ec:	4293      	cmp	r3, r2
 80191ee:	bfb8      	it	lt
 80191f0:	4613      	movlt	r3, r2
 80191f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                sum = MIN(sum, out_activation_max);
 80191f6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80191fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80191fe:	4293      	cmp	r3, r2
 8019200:	bfa8      	it	ge
 8019202:	4613      	movge	r3, r2
 8019204:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                *out++ = (q7_t)sum;
 8019208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801920c:	1c5a      	adds	r2, r3, #1
 801920e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8019212:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8019216:	b252      	sxtb	r2, r2
 8019218:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_ch; i++)
 801921a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801921e:	3301      	adds	r3, #1
 8019220:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8019224:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8019228:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801922c:	429a      	cmp	r2, r3
 801922e:	f6ff adea 	blt.w	8018e06 <arm_convolve_s8+0x2f8>
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 8019232:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8019236:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 801923a:	fb02 f303 	mul.w	r3, r2, r3
 801923e:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8019242:	fb02 f303 	mul.w	r3, r2, r3
 8019246:	461a      	mov	r2, r3
 8019248:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801924c:	4413      	add	r3, r2
 801924e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
        output_data += (output_x * output_y * output_ch);
 8019252:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8019256:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 801925a:	fb02 f303 	mul.w	r3, r2, r3
 801925e:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8019262:	fb02 f303 	mul.w	r3, r2, r3
 8019266:	461a      	mov	r2, r3
 8019268:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801926c:	4413      	add	r3, r2
 801926e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 8019272:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8019276:	3301      	adds	r3, #1
 8019278:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801927c:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8019280:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8019284:	429a      	cmp	r2, r3
 8019286:	f6ff acc1 	blt.w	8018c0c <arm_convolve_s8+0xfe>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801928a:	2300      	movs	r3, #0
}
 801928c:	4618      	mov	r0, r3
 801928e:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8019292:	46bd      	mov	sp, r7
 8019294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08019298 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 8019298:	b480      	push	{r7}
 801929a:	b083      	sub	sp, #12
 801929c:	af00      	add	r7, sp, #0
 801929e:	6078      	str	r0, [r7, #4]
 80192a0:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	68db      	ldr	r3, [r3, #12]
 80192a6:	683a      	ldr	r2, [r7, #0]
 80192a8:	6892      	ldr	r2, [r2, #8]
 80192aa:	fb02 f303 	mul.w	r3, r2, r3
 80192ae:	683a      	ldr	r2, [r7, #0]
 80192b0:	6852      	ldr	r2, [r2, #4]
 80192b2:	fb02 f303 	mul.w	r3, r2, r3
 80192b6:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 80192b8:	4618      	mov	r0, r3
 80192ba:	370c      	adds	r7, #12
 80192bc:	46bd      	mov	sp, r7
 80192be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c2:	4770      	bx	lr

080192c4 <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b08c      	sub	sp, #48	; 0x30
 80192c8:	af08      	add	r7, sp, #32
 80192ca:	60f8      	str	r0, [r7, #12]
 80192cc:	60b9      	str	r1, [r7, #8]
 80192ce:	607a      	str	r2, [r7, #4]
 80192d0:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 80192d2:	68bb      	ldr	r3, [r7, #8]
 80192d4:	691b      	ldr	r3, [r3, #16]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d12f      	bne.n	801933a <arm_convolve_wrapper_s8+0x76>
 80192da:	68bb      	ldr	r3, [r7, #8]
 80192dc:	695b      	ldr	r3, [r3, #20]
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d12b      	bne.n	801933a <arm_convolve_wrapper_s8+0x76>
 80192e2:	683b      	ldr	r3, [r7, #0]
 80192e4:	68db      	ldr	r3, [r3, #12]
 80192e6:	f003 0303 	and.w	r3, r3, #3
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d125      	bne.n	801933a <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 80192ee:	68bb      	ldr	r3, [r7, #8]
 80192f0:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 80192f2:	2b01      	cmp	r3, #1
 80192f4:	d121      	bne.n	801933a <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 80192f6:	68bb      	ldr	r3, [r7, #8]
 80192f8:	68db      	ldr	r3, [r3, #12]
 80192fa:	2b01      	cmp	r3, #1
 80192fc:	d11d      	bne.n	801933a <arm_convolve_wrapper_s8+0x76>
 80192fe:	69fb      	ldr	r3, [r7, #28]
 8019300:	689b      	ldr	r3, [r3, #8]
 8019302:	2b01      	cmp	r3, #1
 8019304:	d119      	bne.n	801933a <arm_convolve_wrapper_s8+0x76>
 8019306:	69fb      	ldr	r3, [r7, #28]
 8019308:	685b      	ldr	r3, [r3, #4]
 801930a:	2b01      	cmp	r3, #1
 801930c:	d115      	bne.n	801933a <arm_convolve_wrapper_s8+0x76>
    {
        return arm_convolve_1x1_s8_fast(ctx,
 801930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019310:	9306      	str	r3, [sp, #24]
 8019312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019314:	9305      	str	r3, [sp, #20]
 8019316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019318:	9304      	str	r3, [sp, #16]
 801931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801931c:	9303      	str	r3, [sp, #12]
 801931e:	6a3b      	ldr	r3, [r7, #32]
 8019320:	9302      	str	r3, [sp, #8]
 8019322:	69fb      	ldr	r3, [r7, #28]
 8019324:	9301      	str	r3, [sp, #4]
 8019326:	69bb      	ldr	r3, [r7, #24]
 8019328:	9300      	str	r3, [sp, #0]
 801932a:	683b      	ldr	r3, [r7, #0]
 801932c:	687a      	ldr	r2, [r7, #4]
 801932e:	68b9      	ldr	r1, [r7, #8]
 8019330:	68f8      	ldr	r0, [r7, #12]
 8019332:	f7ff fb8d 	bl	8018a50 <arm_convolve_1x1_s8_fast>
 8019336:	4603      	mov	r3, r0
 8019338:	e040      	b.n	80193bc <arm_convolve_wrapper_s8+0xf8>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 801933a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801933c:	685b      	ldr	r3, [r3, #4]
 801933e:	2b01      	cmp	r3, #1
 8019340:	d127      	bne.n	8019392 <arm_convolve_wrapper_s8+0xce>
 8019342:	683b      	ldr	r3, [r7, #0]
 8019344:	685b      	ldr	r3, [r3, #4]
 8019346:	2b01      	cmp	r3, #1
 8019348:	d123      	bne.n	8019392 <arm_convolve_wrapper_s8+0xce>
 801934a:	69fb      	ldr	r3, [r7, #28]
 801934c:	685b      	ldr	r3, [r3, #4]
 801934e:	2b01      	cmp	r3, #1
 8019350:	d11f      	bne.n	8019392 <arm_convolve_wrapper_s8+0xce>
 8019352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019354:	689b      	ldr	r3, [r3, #8]
 8019356:	f003 0303 	and.w	r3, r3, #3
 801935a:	2b00      	cmp	r3, #0
 801935c:	d119      	bne.n	8019392 <arm_convolve_wrapper_s8+0xce>
             (input_dims->n == 1))
 801935e:	683b      	ldr	r3, [r7, #0]
 8019360:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8019362:	2b01      	cmp	r3, #1
 8019364:	d115      	bne.n	8019392 <arm_convolve_wrapper_s8+0xce>
    {
        return arm_convolve_1_x_n_s8(ctx,
 8019366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019368:	9306      	str	r3, [sp, #24]
 801936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801936c:	9305      	str	r3, [sp, #20]
 801936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019370:	9304      	str	r3, [sp, #16]
 8019372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019374:	9303      	str	r3, [sp, #12]
 8019376:	6a3b      	ldr	r3, [r7, #32]
 8019378:	9302      	str	r3, [sp, #8]
 801937a:	69fb      	ldr	r3, [r7, #28]
 801937c:	9301      	str	r3, [sp, #4]
 801937e:	69bb      	ldr	r3, [r7, #24]
 8019380:	9300      	str	r3, [sp, #0]
 8019382:	683b      	ldr	r3, [r7, #0]
 8019384:	687a      	ldr	r2, [r7, #4]
 8019386:	68b9      	ldr	r1, [r7, #8]
 8019388:	68f8      	ldr	r0, [r7, #12]
 801938a:	f7ff fb1d 	bl	80189c8 <arm_convolve_1_x_n_s8>
 801938e:	4603      	mov	r3, r0
 8019390:	e014      	b.n	80193bc <arm_convolve_wrapper_s8+0xf8>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
 8019392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019394:	9306      	str	r3, [sp, #24]
 8019396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019398:	9305      	str	r3, [sp, #20]
 801939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801939c:	9304      	str	r3, [sp, #16]
 801939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193a0:	9303      	str	r3, [sp, #12]
 80193a2:	6a3b      	ldr	r3, [r7, #32]
 80193a4:	9302      	str	r3, [sp, #8]
 80193a6:	69fb      	ldr	r3, [r7, #28]
 80193a8:	9301      	str	r3, [sp, #4]
 80193aa:	69bb      	ldr	r3, [r7, #24]
 80193ac:	9300      	str	r3, [sp, #0]
 80193ae:	683b      	ldr	r3, [r7, #0]
 80193b0:	687a      	ldr	r2, [r7, #4]
 80193b2:	68b9      	ldr	r1, [r7, #8]
 80193b4:	68f8      	ldr	r0, [r7, #12]
 80193b6:	f7ff fbaa 	bl	8018b0e <arm_convolve_s8>
 80193ba:	4603      	mov	r3, r0
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 80193bc:	4618      	mov	r0, r3
 80193be:	3710      	adds	r7, #16
 80193c0:	46bd      	mov	sp, r7
 80193c2:	bd80      	pop	{r7, pc}

080193c4 <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b084      	sub	sp, #16
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	60f8      	str	r0, [r7, #12]
 80193cc:	60b9      	str	r1, [r7, #8]
 80193ce:	607a      	str	r2, [r7, #4]
 80193d0:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	691b      	ldr	r3, [r3, #16]
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d11e      	bne.n	8019418 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	695b      	ldr	r3, [r3, #20]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d11a      	bne.n	8019418 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 80193e2:	68bb      	ldr	r3, [r7, #8]
 80193e4:	68db      	ldr	r3, [r3, #12]
 80193e6:	f003 0303 	and.w	r3, r3, #3
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d114      	bne.n	8019418 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 80193f2:	2b01      	cmp	r3, #1
 80193f4:	d110      	bne.n	8019418 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	68db      	ldr	r3, [r3, #12]
 80193fa:	2b01      	cmp	r3, #1
 80193fc:	d10c      	bne.n	8019418 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	689b      	ldr	r3, [r3, #8]
 8019402:	2b01      	cmp	r3, #1
 8019404:	d108      	bne.n	8019418 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	685b      	ldr	r3, [r3, #4]
 801940a:	2b01      	cmp	r3, #1
 801940c:	d104      	bne.n	8019418 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 801940e:	68b8      	ldr	r0, [r7, #8]
 8019410:	f7ff fb72 	bl	8018af8 <arm_convolve_1x1_s8_fast_get_buffer_size>
 8019414:	4603      	mov	r3, r0
 8019416:	e020      	b.n	801945a <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8019418:	683b      	ldr	r3, [r7, #0]
 801941a:	685b      	ldr	r3, [r3, #4]
 801941c:	2b01      	cmp	r3, #1
 801941e:	d117      	bne.n	8019450 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8019420:	68bb      	ldr	r3, [r7, #8]
 8019422:	685b      	ldr	r3, [r3, #4]
 8019424:	2b01      	cmp	r3, #1
 8019426:	d113      	bne.n	8019450 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	685b      	ldr	r3, [r3, #4]
 801942c:	2b01      	cmp	r3, #1
 801942e:	d10f      	bne.n	8019450 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8019430:	683b      	ldr	r3, [r7, #0]
 8019432:	689b      	ldr	r3, [r3, #8]
 8019434:	f003 0303 	and.w	r3, r3, #3
 8019438:	2b00      	cmp	r3, #0
 801943a:	d109      	bne.n	8019450 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
             (input_dims->n == 1))
 801943c:	68bb      	ldr	r3, [r7, #8]
 801943e:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8019440:	2b01      	cmp	r3, #1
 8019442:	d105      	bne.n	8019450 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 8019444:	6879      	ldr	r1, [r7, #4]
 8019446:	68b8      	ldr	r0, [r7, #8]
 8019448:	f7ff faec 	bl	8018a24 <arm_convolve_1_x_n_s8_get_buffer_size>
 801944c:	4603      	mov	r3, r0
 801944e:	e004      	b.n	801945a <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 8019450:	6879      	ldr	r1, [r7, #4]
 8019452:	68b8      	ldr	r0, [r7, #8]
 8019454:	f7ff ff20 	bl	8019298 <arm_convolve_s8_get_buffer_size>
 8019458:	4603      	mov	r3, r0
    }
}
 801945a:	4618      	mov	r0, r3
 801945c:	3710      	adds	r7, #16
 801945e:	46bd      	mov	sp, r7
 8019460:	bd80      	pop	{r7, pc}

08019462 <arm_depthwise_conv_3x3_s8>:
                                     const q7_t *kernel,
                                     const cmsis_nn_dims *bias_dims,
                                     const int32_t *bias,
                                     const cmsis_nn_dims *output_dims,
                                     q7_t *output)
{
 8019462:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8019466:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 801946a:	af00      	add	r7, sp, #0
 801946c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8019470:	6020      	str	r0, [r4, #0]
 8019472:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8019476:	6001      	str	r1, [r0, #0]
 8019478:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801947c:	600a      	str	r2, [r1, #0]
 801947e:	f107 0220 	add.w	r2, r7, #32
 8019482:	6013      	str	r3, [r2, #0]
    (void)ctx;
    (void)bias_dims;

    const int32_t input_x = input_dims->w;
 8019484:	f107 0320 	add.w	r3, r7, #32
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	689b      	ldr	r3, [r3, #8]
 801948c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    const int32_t input_y = input_dims->h;
 8019490:	f107 0320 	add.w	r3, r7, #32
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	685b      	ldr	r3, [r3, #4]
 8019498:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    const int32_t input_ch = input_dims->c;
 801949c:	f107 0320 	add.w	r3, r7, #32
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	68db      	ldr	r3, [r3, #12]
 80194a4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    const int32_t output_ch = output_dims->c;
 80194a8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80194ac:	68db      	ldr	r3, [r3, #12]
 80194ae:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    const int32_t pad_x = dw_conv_params->padding.w;
 80194b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	695b      	ldr	r3, [r3, #20]
 80194ba:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    const int32_t pad_y = dw_conv_params->padding.h;
 80194be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	699b      	ldr	r3, [r3, #24]
 80194c6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    const int32_t stride_x = dw_conv_params->stride.w;
 80194ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	68db      	ldr	r3, [r3, #12]
 80194d2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    const int32_t stride_y = dw_conv_params->stride.h;
 80194d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	691b      	ldr	r3, [r3, #16]
 80194de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    const int32_t *output_shift = quant_params->shift;
 80194e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	685b      	ldr	r3, [r3, #4]
 80194ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    const int32_t *output_mult = quant_params->multiplier;
 80194ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    const int32_t output_x = output_dims->w;
 80194fa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80194fe:	689b      	ldr	r3, [r3, #8]
 8019500:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    const int32_t output_y = output_dims->h;
 8019504:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8019508:	685b      	ldr	r3, [r3, #4]
 801950a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    const int32_t output_offset = dw_conv_params->output_offset;
 801950e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	685b      	ldr	r3, [r3, #4]
 8019516:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    const int32_t input_offset = dw_conv_params->input_offset;
 801951a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    const int32_t output_activation_min = dw_conv_params->activation.min;
 8019526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801952e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    const int32_t output_activation_max = dw_conv_params->activation.max;
 8019532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801953a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
 801953e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019542:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8019546:	429a      	cmp	r2, r3
 8019548:	d003      	beq.n	8019552 <arm_depthwise_conv_3x3_s8+0xf0>
    {
        return ARM_MATH_SIZE_MISMATCH;
 801954a:	f06f 0302 	mvn.w	r3, #2
 801954e:	f000 bf70 	b.w	801a432 <arm_depthwise_conv_3x3_s8+0xfd0>
    }
    /* Check input constraints pad_x <= 1 */
    if (pad_x > 1 || filter_dims->w != 3 || filter_dims->h != 3)
 8019552:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019556:	2b01      	cmp	r3, #1
 8019558:	dc09      	bgt.n	801956e <arm_depthwise_conv_3x3_s8+0x10c>
 801955a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801955e:	689b      	ldr	r3, [r3, #8]
 8019560:	2b03      	cmp	r3, #3
 8019562:	d104      	bne.n	801956e <arm_depthwise_conv_3x3_s8+0x10c>
 8019564:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8019568:	685b      	ldr	r3, [r3, #4]
 801956a:	2b03      	cmp	r3, #3
 801956c:	d003      	beq.n	8019576 <arm_depthwise_conv_3x3_s8+0x114>
    {
        return ARM_MATH_ARGUMENT_ERROR;
 801956e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019572:	f000 bf5e 	b.w	801a432 <arm_depthwise_conv_3x3_s8+0xfd0>
    }

    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 8019576:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801957a:	425b      	negs	r3, r3
 801957c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8019580:	2300      	movs	r3, #0
 8019582:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8019586:	2300      	movs	r3, #0
 8019588:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 801958c:	f000 bf49 	b.w	801a422 <arm_depthwise_conv_3x3_s8+0xfc0>
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 8019590:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019594:	425b      	negs	r3, r3
 8019596:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 801959a:	2300      	movs	r3, #0
 801959c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80195a0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	dc03      	bgt.n	80195b0 <arm_depthwise_conv_3x3_s8+0x14e>
 80195a8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80195ac:	425b      	negs	r3, r3
 80195ae:	e000      	b.n	80195b2 <arm_depthwise_conv_3x3_s8+0x150>
 80195b0:	2300      	movs	r3, #0
 80195b2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80195b6:	f000 bf21 	b.w	801a3fc <arm_depthwise_conv_3x3_s8+0xf9a>
        {
            int32_t in_ch = 0;
 80195ba:	2300      	movs	r3, #0
 80195bc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
            int32_t ker_w_start = MAX(0, -in_w);
 80195c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	dc03      	bgt.n	80195d0 <arm_depthwise_conv_3x3_s8+0x16e>
 80195c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80195cc:	425b      	negs	r3, r3
 80195ce:	e000      	b.n	80195d2 <arm_depthwise_conv_3x3_s8+0x170>
 80195d0:	2300      	movs	r3, #0
 80195d2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

            for (; in_ch <= (input_ch - 4); in_ch += 4)
 80195d6:	f000 bd50 	b.w	801a07a <arm_depthwise_conv_3x3_s8+0xc18>
            {
                int32_t out_buff0 = bias[in_ch + 0];
 80195da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80195de:	009b      	lsls	r3, r3, #2
 80195e0:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80195e4:	4413      	add	r3, r2
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                int32_t out_buff1 = bias[in_ch + 1];
 80195ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80195f0:	3301      	adds	r3, #1
 80195f2:	009b      	lsls	r3, r3, #2
 80195f4:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80195f8:	4413      	add	r3, r2
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                int32_t out_buff2 = bias[in_ch + 2];
 8019600:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019604:	3302      	adds	r3, #2
 8019606:	009b      	lsls	r3, r3, #2
 8019608:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801960c:	4413      	add	r3, r2
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                int32_t out_buff3 = bias[in_ch + 3];
 8019614:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019618:	3303      	adds	r3, #3
 801961a:	009b      	lsls	r3, r3, #2
 801961c:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8019620:	4413      	add	r3, r2
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
 8019628:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801962c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8019630:	4413      	add	r3, r2
 8019632:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019636:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 801963a:	fb01 f202 	mul.w	r2, r1, r2
 801963e:	fb02 f303 	mul.w	r3, r2, r3
 8019642:	4619      	mov	r1, r3
 8019644:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8019648:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801964c:	fb02 f303 	mul.w	r3, r2, r3
 8019650:	18ca      	adds	r2, r1, r3
 8019652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019656:	4413      	add	r3, r2
 8019658:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801965c:	4413      	add	r3, r2
 801965e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 8019662:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019666:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 801966a:	fb02 f203 	mul.w	r2, r2, r3
 801966e:	4613      	mov	r3, r2
 8019670:	005b      	lsls	r3, r3, #1
 8019672:	4413      	add	r3, r2
 8019674:	461a      	mov	r2, r3
 8019676:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801967a:	4413      	add	r3, r2
 801967c:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8019680:	4413      	add	r3, r2
 8019682:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 8019686:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801968a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 801968e:	e17a      	b.n	8019986 <arm_depthwise_conv_3x3_s8+0x524>
                {
                    int32_t in_val = 0;
 8019690:	2300      	movs	r3, #0
 8019692:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                    int32_t ker_val = 0;
 8019696:	2300      	movs	r3, #0
 8019698:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                    if (ker_w_start == 0)
 801969c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d169      	bne.n	8019778 <arm_depthwise_conv_3x3_s8+0x316>
 80196a4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80196a8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80196ac:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80196b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80196b8:	601a      	str	r2, [r3, #0]
    return (val);
 80196ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80196be:	681b      	ldr	r3, [r3, #0]
                    {
                        in_val = arm_nn_read_q7x4(input_ptr);
 80196c0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80196c4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80196c8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80196cc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80196d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80196d8:	601a      	str	r2, [r3, #0]
    return (val);
 80196da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80196de:	681b      	ldr	r3, [r3, #0]
                        ker_val = arm_nn_read_q7x4(kernel_ptr);
 80196e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 80196e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80196e8:	b25b      	sxtb	r3, r3
 80196ea:	461a      	mov	r2, r3
 80196ec:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80196f0:	4413      	add	r3, r2
 80196f2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80196f6:	b252      	sxtb	r2, r2
 80196f8:	fb02 f303 	mul.w	r3, r2, r3
 80196fc:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019700:	4413      	add	r3, r2
 8019702:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 8019706:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801970a:	121b      	asrs	r3, r3, #8
 801970c:	b25b      	sxtb	r3, r3
 801970e:	461a      	mov	r2, r3
 8019710:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019714:	4413      	add	r3, r2
 8019716:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801971a:	1212      	asrs	r2, r2, #8
 801971c:	b252      	sxtb	r2, r2
 801971e:	fb02 f303 	mul.w	r3, r2, r3
 8019722:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8019726:	4413      	add	r3, r2
 8019728:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 801972c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019730:	141b      	asrs	r3, r3, #16
 8019732:	b25b      	sxtb	r3, r3
 8019734:	461a      	mov	r2, r3
 8019736:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801973a:	4413      	add	r3, r2
 801973c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019740:	1412      	asrs	r2, r2, #16
 8019742:	b252      	sxtb	r2, r2
 8019744:	fb02 f303 	mul.w	r3, r2, r3
 8019748:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801974c:	4413      	add	r3, r2
 801974e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 8019752:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019756:	161b      	asrs	r3, r3, #24
 8019758:	b25b      	sxtb	r3, r3
 801975a:	461a      	mov	r2, r3
 801975c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019760:	4413      	add	r3, r2
 8019762:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019766:	1612      	asrs	r2, r2, #24
 8019768:	b252      	sxtb	r2, r2
 801976a:	fb02 f303 	mul.w	r3, r2, r3
 801976e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8019772:	4413      	add	r3, r2
 8019774:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
                    }

                    in_val = arm_nn_read_q7x4(input_ptr + input_ch);
 8019778:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801977c:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8019780:	4413      	add	r3, r2
 8019782:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8019786:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801978e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019792:	601a      	str	r2, [r3, #0]
    return (val);
 8019794:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                    ker_val = arm_nn_read_q7x4(kernel_ptr + input_ch);
 801979e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80197a2:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80197a6:	4413      	add	r3, r2
 80197a8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80197ac:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80197b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80197b8:	601a      	str	r2, [r3, #0]
    return (val);
 80197ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                    out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 80197c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80197c8:	b25b      	sxtb	r3, r3
 80197ca:	461a      	mov	r2, r3
 80197cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80197d0:	4413      	add	r3, r2
 80197d2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80197d6:	b252      	sxtb	r2, r2
 80197d8:	fb02 f303 	mul.w	r3, r2, r3
 80197dc:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80197e0:	4413      	add	r3, r2
 80197e2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                    out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 80197e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80197ea:	121b      	asrs	r3, r3, #8
 80197ec:	b25b      	sxtb	r3, r3
 80197ee:	461a      	mov	r2, r3
 80197f0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80197f4:	4413      	add	r3, r2
 80197f6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80197fa:	1212      	asrs	r2, r2, #8
 80197fc:	b252      	sxtb	r2, r2
 80197fe:	fb02 f303 	mul.w	r3, r2, r3
 8019802:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8019806:	4413      	add	r3, r2
 8019808:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 801980c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019810:	141b      	asrs	r3, r3, #16
 8019812:	b25b      	sxtb	r3, r3
 8019814:	461a      	mov	r2, r3
 8019816:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801981a:	4413      	add	r3, r2
 801981c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019820:	1412      	asrs	r2, r2, #16
 8019822:	b252      	sxtb	r2, r2
 8019824:	fb02 f303 	mul.w	r3, r2, r3
 8019828:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801982c:	4413      	add	r3, r2
 801982e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                    out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 8019832:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019836:	161b      	asrs	r3, r3, #24
 8019838:	b25b      	sxtb	r3, r3
 801983a:	461a      	mov	r2, r3
 801983c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019840:	4413      	add	r3, r2
 8019842:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019846:	1612      	asrs	r2, r2, #24
 8019848:	b252      	sxtb	r2, r2
 801984a:	fb02 f303 	mul.w	r3, r2, r3
 801984e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8019852:	4413      	add	r3, r2
 8019854:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                    if ((input_x - in_w) >= 3)
 8019858:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801985c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8019860:	1ad3      	subs	r3, r2, r3
 8019862:	2b02      	cmp	r3, #2
 8019864:	dd73      	ble.n	801994e <arm_depthwise_conv_3x3_s8+0x4ec>
                    {
                        in_val = arm_nn_read_q7x4(input_ptr + (input_ch << 1));
 8019866:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801986a:	005b      	lsls	r3, r3, #1
 801986c:	461a      	mov	r2, r3
 801986e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8019872:	4413      	add	r3, r2
 8019874:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8019878:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8019880:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8019884:	601a      	str	r2, [r3, #0]
    return (val);
 8019886:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                        ker_val = arm_nn_read_q7x4(kernel_ptr + (input_ch << 1));
 8019890:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019894:	005b      	lsls	r3, r3, #1
 8019896:	461a      	mov	r2, r3
 8019898:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801989c:	4413      	add	r3, r2
 801989e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80198a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80198aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80198ae:	601a      	str	r2, [r3, #0]
    return (val);
 80198b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 80198ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80198be:	b25b      	sxtb	r3, r3
 80198c0:	461a      	mov	r2, r3
 80198c2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80198c6:	4413      	add	r3, r2
 80198c8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80198cc:	b252      	sxtb	r2, r2
 80198ce:	fb02 f303 	mul.w	r3, r2, r3
 80198d2:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80198d6:	4413      	add	r3, r2
 80198d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 80198dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80198e0:	121b      	asrs	r3, r3, #8
 80198e2:	b25b      	sxtb	r3, r3
 80198e4:	461a      	mov	r2, r3
 80198e6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80198ea:	4413      	add	r3, r2
 80198ec:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80198f0:	1212      	asrs	r2, r2, #8
 80198f2:	b252      	sxtb	r2, r2
 80198f4:	fb02 f303 	mul.w	r3, r2, r3
 80198f8:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80198fc:	4413      	add	r3, r2
 80198fe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 8019902:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019906:	141b      	asrs	r3, r3, #16
 8019908:	b25b      	sxtb	r3, r3
 801990a:	461a      	mov	r2, r3
 801990c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019910:	4413      	add	r3, r2
 8019912:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019916:	1412      	asrs	r2, r2, #16
 8019918:	b252      	sxtb	r2, r2
 801991a:	fb02 f303 	mul.w	r3, r2, r3
 801991e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8019922:	4413      	add	r3, r2
 8019924:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 8019928:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801992c:	161b      	asrs	r3, r3, #24
 801992e:	b25b      	sxtb	r3, r3
 8019930:	461a      	mov	r2, r3
 8019932:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019936:	4413      	add	r3, r2
 8019938:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801993c:	1612      	asrs	r2, r2, #24
 801993e:	b252      	sxtb	r2, r2
 8019940:	fb02 f303 	mul.w	r3, r2, r3
 8019944:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8019948:	4413      	add	r3, r2
 801994a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
                    }

                    input_ptr += (input_ch * input_x);
 801994e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019952:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8019956:	fb02 f303 	mul.w	r3, r2, r3
 801995a:	461a      	mov	r2, r3
 801995c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8019960:	4413      	add	r3, r2
 8019962:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
                    kernel_ptr += (input_ch * 3);
 8019966:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801996a:	4613      	mov	r3, r2
 801996c:	005b      	lsls	r3, r3, #1
 801996e:	4413      	add	r3, r2
 8019970:	461a      	mov	r2, r3
 8019972:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8019976:	4413      	add	r3, r2
 8019978:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 801997c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019980:	3301      	adds	r3, #1
 8019982:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8019986:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801998a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801998e:	1ad3      	subs	r3, r2, r3
 8019990:	2b03      	cmp	r3, #3
 8019992:	bfa8      	it	ge
 8019994:	2303      	movge	r3, #3
 8019996:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801999a:	429a      	cmp	r2, r3
 801999c:	f6ff ae78 	blt.w	8019690 <arm_depthwise_conv_3x3_s8+0x22e>
                }

                out_buff0 = arm_nn_requantize(out_buff0, output_mult[in_ch + 0], output_shift[in_ch + 0]);
 80199a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80199a4:	009b      	lsls	r3, r3, #2
 80199a6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80199aa:	4413      	add	r3, r2
 80199ac:	6819      	ldr	r1, [r3, #0]
 80199ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80199b2:	009b      	lsls	r3, r3, #2
 80199b4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80199b8:	4413      	add	r3, r2
 80199ba:	681a      	ldr	r2, [r3, #0]
 80199bc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80199c0:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 80199c4:	6018      	str	r0, [r3, #0]
 80199c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80199ca:	6019      	str	r1, [r3, #0]
 80199cc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80199d0:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80199d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80199d6:	681b      	ldr	r3, [r3, #0]
 80199d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80199dc:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80199e0:	6812      	ldr	r2, [r2, #0]
 80199e2:	409a      	lsls	r2, r3
 80199e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80199e8:	601a      	str	r2, [r3, #0]
 80199ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80199ee:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80199f2:	6812      	ldr	r2, [r2, #0]
 80199f4:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80199f6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80199fa:	2200      	movs	r2, #0
 80199fc:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 80199fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8019a02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019a06:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8019a08:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8019a0c:	2200      	movs	r2, #0
 8019a0e:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8019a10:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8019a14:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	4618      	mov	r0, r3
 8019a1c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8019a20:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	461a      	mov	r2, r3
 8019a28:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8019a2c:	fb02 f501 	mul.w	r5, r2, r1
 8019a30:	fb00 f403 	mul.w	r4, r0, r3
 8019a34:	442c      	add	r4, r5
 8019a36:	fba0 2302 	umull	r2, r3, r0, r2
 8019a3a:	18e1      	adds	r1, r4, r3
 8019a3c:	460b      	mov	r3, r1
 8019a3e:	eb18 0102 	adds.w	r1, r8, r2
 8019a42:	60b9      	str	r1, [r7, #8]
 8019a44:	eb49 0303 	adc.w	r3, r9, r3
 8019a48:	60fb      	str	r3, [r7, #12]
 8019a4a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8019a4e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    result = (int32_t)(mult.long_long >> 31);
 8019a52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8019a56:	f04f 0200 	mov.w	r2, #0
 8019a5a:	f04f 0300 	mov.w	r3, #0
 8019a5e:	0fc2      	lsrs	r2, r0, #31
 8019a60:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8019a64:	17cb      	asrs	r3, r1, #31
 8019a66:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8019a6a:	4613      	mov	r3, r2
 8019a6c:	600b      	str	r3, [r1, #0]
    return result;
 8019a6e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8019a72:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019a74:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	dc04      	bgt.n	8019a88 <arm_depthwise_conv_3x3_s8+0x626>
 8019a7e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	425b      	negs	r3, r3
 8019a86:	e000      	b.n	8019a8a <arm_depthwise_conv_3x3_s8+0x628>
 8019a88:	2300      	movs	r3, #0
 8019a8a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019a8e:	6011      	str	r1, [r2, #0]
 8019a90:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8019a94:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019a96:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8019a9a:	2200      	movs	r2, #0
 8019a9c:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019a9e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8019aa2:	2201      	movs	r2, #1
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	409a      	lsls	r2, r3
 8019aa8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8019aac:	3a01      	subs	r2, #1
 8019aae:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8019ab0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8019ab4:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8019ab8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8019abc:	6809      	ldr	r1, [r1, #0]
 8019abe:	6812      	ldr	r2, [r2, #0]
 8019ac0:	400a      	ands	r2, r1
 8019ac2:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8019ac4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8019ac8:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8019acc:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8019ad0:	6809      	ldr	r1, [r1, #0]
 8019ad2:	6812      	ldr	r2, [r2, #0]
 8019ad4:	fa41 f202 	asr.w	r2, r1, r2
 8019ad8:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8019ada:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8019ade:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8019ae2:	6812      	ldr	r2, [r2, #0]
 8019ae4:	1052      	asrs	r2, r2, #1
 8019ae6:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8019ae8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	da06      	bge.n	8019b00 <arm_depthwise_conv_3x3_s8+0x69e>
        threshold++;
 8019af2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8019af6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8019afa:	6812      	ldr	r2, [r2, #0]
 8019afc:	3201      	adds	r2, #1
 8019afe:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8019b00:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8019b04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8019b08:	6812      	ldr	r2, [r2, #0]
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	429a      	cmp	r2, r3
 8019b0e:	dd06      	ble.n	8019b1e <arm_depthwise_conv_3x3_s8+0x6bc>
        result++;
 8019b10:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8019b14:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8019b18:	6812      	ldr	r2, [r2, #0]
 8019b1a:	3201      	adds	r2, #1
 8019b1c:	601a      	str	r2, [r3, #0]
    return result;
 8019b1e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8019b22:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019b24:	bf00      	nop
 8019b26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 = arm_nn_requantize(out_buff1, output_mult[in_ch + 1], output_shift[in_ch + 1]);
 8019b2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019b2e:	3301      	adds	r3, #1
 8019b30:	009b      	lsls	r3, r3, #2
 8019b32:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8019b36:	4413      	add	r3, r2
 8019b38:	6819      	ldr	r1, [r3, #0]
 8019b3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019b3e:	3301      	adds	r3, #1
 8019b40:	009b      	lsls	r3, r3, #2
 8019b42:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8019b46:	4413      	add	r3, r2
 8019b48:	681a      	ldr	r2, [r3, #0]
 8019b4a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8019b4e:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 8019b52:	6018      	str	r0, [r3, #0]
 8019b54:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8019b58:	6019      	str	r1, [r3, #0]
 8019b5a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8019b5e:	601a      	str	r2, [r3, #0]
 8019b60:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019b6a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019b6e:	6812      	ldr	r2, [r2, #0]
 8019b70:	409a      	lsls	r2, r3
 8019b72:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8019b76:	601a      	str	r2, [r3, #0]
 8019b78:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8019b7c:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8019b80:	6812      	ldr	r2, [r2, #0]
 8019b82:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8019b84:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8019b88:	2200      	movs	r2, #0
 8019b8a:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8019b8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8019b90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019b94:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8019b96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8019b9a:	2200      	movs	r2, #0
 8019b9c:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8019b9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8019ba2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	4618      	mov	r0, r3
 8019baa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8019bae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	461a      	mov	r2, r3
 8019bb6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8019bba:	fb02 f501 	mul.w	r5, r2, r1
 8019bbe:	fb00 f403 	mul.w	r4, r0, r3
 8019bc2:	442c      	add	r4, r5
 8019bc4:	fba0 2302 	umull	r2, r3, r0, r2
 8019bc8:	18e1      	adds	r1, r4, r3
 8019bca:	460b      	mov	r3, r1
 8019bcc:	eb18 0102 	adds.w	r1, r8, r2
 8019bd0:	6139      	str	r1, [r7, #16]
 8019bd2:	eb49 0303 	adc.w	r3, r9, r3
 8019bd6:	617b      	str	r3, [r7, #20]
 8019bd8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8019bdc:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 8019be0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8019be4:	f04f 0200 	mov.w	r2, #0
 8019be8:	f04f 0300 	mov.w	r3, #0
 8019bec:	0fc2      	lsrs	r2, r0, #31
 8019bee:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8019bf2:	17cb      	asrs	r3, r1, #31
 8019bf4:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8019bf8:	4613      	mov	r3, r2
 8019bfa:	600b      	str	r3, [r1, #0]
    return result;
 8019bfc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8019c00:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019c02:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	dc04      	bgt.n	8019c16 <arm_depthwise_conv_3x3_s8+0x7b4>
 8019c0c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	425b      	negs	r3, r3
 8019c14:	e000      	b.n	8019c18 <arm_depthwise_conv_3x3_s8+0x7b6>
 8019c16:	2300      	movs	r3, #0
 8019c18:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8019c1c:	6011      	str	r1, [r2, #0]
 8019c1e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8019c22:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019c24:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8019c28:	2200      	movs	r2, #0
 8019c2a:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019c2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8019c30:	2201      	movs	r2, #1
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	409a      	lsls	r2, r3
 8019c36:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8019c3a:	3a01      	subs	r2, #1
 8019c3c:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8019c3e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8019c42:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8019c46:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8019c4a:	6809      	ldr	r1, [r1, #0]
 8019c4c:	6812      	ldr	r2, [r2, #0]
 8019c4e:	400a      	ands	r2, r1
 8019c50:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8019c52:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8019c56:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8019c5a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8019c5e:	6809      	ldr	r1, [r1, #0]
 8019c60:	6812      	ldr	r2, [r2, #0]
 8019c62:	fa41 f202 	asr.w	r2, r1, r2
 8019c66:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8019c68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8019c6c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8019c70:	6812      	ldr	r2, [r2, #0]
 8019c72:	1052      	asrs	r2, r2, #1
 8019c74:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8019c76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	da06      	bge.n	8019c8e <arm_depthwise_conv_3x3_s8+0x82c>
        threshold++;
 8019c80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8019c84:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8019c88:	6812      	ldr	r2, [r2, #0]
 8019c8a:	3201      	adds	r2, #1
 8019c8c:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8019c8e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8019c92:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8019c96:	6812      	ldr	r2, [r2, #0]
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	429a      	cmp	r2, r3
 8019c9c:	dd06      	ble.n	8019cac <arm_depthwise_conv_3x3_s8+0x84a>
        result++;
 8019c9e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8019ca2:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8019ca6:	6812      	ldr	r2, [r2, #0]
 8019ca8:	3201      	adds	r2, #1
 8019caa:	601a      	str	r2, [r3, #0]
    return result;
 8019cac:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8019cb0:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019cb2:	bf00      	nop
 8019cb4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 = arm_nn_requantize(out_buff2, output_mult[in_ch + 2], output_shift[in_ch + 2]);
 8019cb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019cbc:	3302      	adds	r3, #2
 8019cbe:	009b      	lsls	r3, r3, #2
 8019cc0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8019cc4:	4413      	add	r3, r2
 8019cc6:	681a      	ldr	r2, [r3, #0]
 8019cc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019ccc:	3302      	adds	r3, #2
 8019cce:	009b      	lsls	r3, r3, #2
 8019cd0:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8019cd4:	440b      	add	r3, r1
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 8019cdc:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8019ce0:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8019ce4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8019ce8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8019cec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019cf0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8019cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8019cf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8019cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019d00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    q31_t result = 0;
 8019d04:	2300      	movs	r3, #0
 8019d06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    mult.word.low = 1 << 30;
 8019d0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019d0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019d12:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8019d14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019d18:	2200      	movs	r2, #0
 8019d1a:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8019d1c:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8019d20:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8019d24:	4618      	mov	r0, r3
 8019d26:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8019d2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019d2e:	461a      	mov	r2, r3
 8019d30:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8019d34:	fb02 f501 	mul.w	r5, r2, r1
 8019d38:	fb00 f403 	mul.w	r4, r0, r3
 8019d3c:	442c      	add	r4, r5
 8019d3e:	fba0 2302 	umull	r2, r3, r0, r2
 8019d42:	18e1      	adds	r1, r4, r3
 8019d44:	460b      	mov	r3, r1
 8019d46:	eb18 0102 	adds.w	r1, r8, r2
 8019d4a:	61b9      	str	r1, [r7, #24]
 8019d4c:	eb49 0303 	adc.w	r3, r9, r3
 8019d50:	61fb      	str	r3, [r7, #28]
 8019d52:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8019d56:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 8019d5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8019d5e:	f04f 0200 	mov.w	r2, #0
 8019d62:	f04f 0300 	mov.w	r3, #0
 8019d66:	0fc2      	lsrs	r2, r0, #31
 8019d68:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8019d6c:	17cb      	asrs	r3, r1, #31
 8019d6e:	4613      	mov	r3, r2
 8019d70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    return result;
 8019d74:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019d78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	dc03      	bgt.n	8019d88 <arm_depthwise_conv_3x3_s8+0x926>
 8019d80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8019d84:	425b      	negs	r3, r3
 8019d86:	e000      	b.n	8019d8a <arm_depthwise_conv_3x3_s8+0x928>
 8019d88:	2300      	movs	r3, #0
 8019d8a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8019d8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    q31_t result = 0;
 8019d92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8019d96:	2200      	movs	r2, #0
 8019d98:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019d9a:	2201      	movs	r2, #1
 8019d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8019da0:	409a      	lsls	r2, r3
 8019da2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8019da6:	3a01      	subs	r2, #1
 8019da8:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8019daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8019dae:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8019db2:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8019db6:	6812      	ldr	r2, [r2, #0]
 8019db8:	400a      	ands	r2, r1
 8019dba:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8019dbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8019dc0:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8019dc4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8019dc8:	fa41 f202 	asr.w	r2, r1, r2
 8019dcc:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8019dce:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8019dd2:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8019dd6:	6812      	ldr	r2, [r2, #0]
 8019dd8:	1052      	asrs	r2, r2, #1
 8019dda:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8019ddc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	da06      	bge.n	8019df4 <arm_depthwise_conv_3x3_s8+0x992>
        threshold++;
 8019de6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8019dea:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8019dee:	6812      	ldr	r2, [r2, #0]
 8019df0:	3201      	adds	r2, #1
 8019df2:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8019df4:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8019df8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8019dfc:	6812      	ldr	r2, [r2, #0]
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	429a      	cmp	r2, r3
 8019e02:	dd06      	ble.n	8019e12 <arm_depthwise_conv_3x3_s8+0x9b0>
        result++;
 8019e04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8019e08:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8019e0c:	6812      	ldr	r2, [r2, #0]
 8019e0e:	3201      	adds	r2, #1
 8019e10:	601a      	str	r2, [r3, #0]
    return result;
 8019e12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8019e16:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019e18:	bf00      	nop
 8019e1a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 = arm_nn_requantize(out_buff3, output_mult[in_ch + 3], output_shift[in_ch + 3]);
 8019e1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019e22:	3303      	adds	r3, #3
 8019e24:	009b      	lsls	r3, r3, #2
 8019e26:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8019e2a:	4413      	add	r3, r2
 8019e2c:	681a      	ldr	r2, [r3, #0]
 8019e2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019e32:	3303      	adds	r3, #3
 8019e34:	009b      	lsls	r3, r3, #2
 8019e36:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8019e3a:	440b      	add	r3, r1
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 8019e42:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8019e46:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8019e4a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8019e4e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019e52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e56:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8019e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8019e5e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8019e62:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8019e66:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    q31_t result = 0;
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    mult.word.low = 1 << 30;
 8019e70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019e74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019e78:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8019e7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019e7e:	2200      	movs	r2, #0
 8019e80:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8019e82:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8019e86:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8019e8a:	4618      	mov	r0, r3
 8019e8c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8019e90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8019e94:	461a      	mov	r2, r3
 8019e96:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8019e9a:	fb02 f501 	mul.w	r5, r2, r1
 8019e9e:	fb00 f403 	mul.w	r4, r0, r3
 8019ea2:	442c      	add	r4, r5
 8019ea4:	fba0 2302 	umull	r2, r3, r0, r2
 8019ea8:	18e1      	adds	r1, r4, r3
 8019eaa:	460b      	mov	r3, r1
 8019eac:	eb18 0a02 	adds.w	sl, r8, r2
 8019eb0:	eb49 0b03 	adc.w	fp, r9, r3
 8019eb4:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
    result = (int32_t)(mult.long_long >> 31);
 8019eb8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8019ebc:	f04f 0200 	mov.w	r2, #0
 8019ec0:	f04f 0300 	mov.w	r3, #0
 8019ec4:	0fc2      	lsrs	r2, r0, #31
 8019ec6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8019eca:	17cb      	asrs	r3, r1, #31
 8019ecc:	4613      	mov	r3, r2
 8019ece:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    return result;
 8019ed2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019ed6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	dc03      	bgt.n	8019ee6 <arm_depthwise_conv_3x3_s8+0xa84>
 8019ede:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019ee2:	425b      	negs	r3, r3
 8019ee4:	e000      	b.n	8019ee8 <arm_depthwise_conv_3x3_s8+0xa86>
 8019ee6:	2300      	movs	r3, #0
 8019ee8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8019eec:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    q31_t result = 0;
 8019ef0:	2300      	movs	r3, #0
 8019ef2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019ef6:	2201      	movs	r2, #1
 8019ef8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8019efc:	fa02 f303 	lsl.w	r3, r2, r3
 8019f00:	3b01      	subs	r3, #1
 8019f02:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    int32_t remainder = remainder_mask & dividend;
 8019f06:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8019f0a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8019f0e:	4013      	ands	r3, r2
 8019f10:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    result = dividend >> exponent;
 8019f14:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8019f18:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8019f1c:	fa42 f303 	asr.w	r3, r2, r3
 8019f20:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    q31_t threshold = remainder_mask >> 1;
 8019f24:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8019f28:	105b      	asrs	r3, r3, #1
 8019f2a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    if (result < 0)
 8019f2e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	da04      	bge.n	8019f40 <arm_depthwise_conv_3x3_s8+0xade>
        threshold++;
 8019f36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8019f3a:	3301      	adds	r3, #1
 8019f3c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    if (remainder > threshold)
 8019f40:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8019f44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8019f48:	429a      	cmp	r2, r3
 8019f4a:	dd04      	ble.n	8019f56 <arm_depthwise_conv_3x3_s8+0xaf4>
        result++;
 8019f4c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8019f50:	3301      	adds	r3, #1
 8019f52:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    return result;
 8019f56:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019f5a:	bf00      	nop
 8019f5c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                out_buff0 += output_offset;
 8019f60:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019f64:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019f68:	4413      	add	r3, r2
 8019f6a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 += output_offset;
 8019f6e:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8019f72:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019f76:	4413      	add	r3, r2
 8019f78:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 += output_offset;
 8019f7c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8019f80:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019f84:	4413      	add	r3, r2
 8019f86:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 += output_offset;
 8019f8a:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8019f8e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019f92:	4413      	add	r3, r2
 8019f94:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                out_buff0 = MIN(MAX(out_buff0, output_activation_min), output_activation_max);
 8019f98:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8019f9c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8019fa0:	4293      	cmp	r3, r2
 8019fa2:	bfb8      	it	lt
 8019fa4:	4613      	movlt	r3, r2
 8019fa6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8019faa:	4293      	cmp	r3, r2
 8019fac:	bfa8      	it	ge
 8019fae:	4613      	movge	r3, r2
 8019fb0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 = MIN(MAX(out_buff1, output_activation_min), output_activation_max);
 8019fb4:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8019fb8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019fbc:	4293      	cmp	r3, r2
 8019fbe:	bfb8      	it	lt
 8019fc0:	4613      	movlt	r3, r2
 8019fc2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8019fc6:	4293      	cmp	r3, r2
 8019fc8:	bfa8      	it	ge
 8019fca:	4613      	movge	r3, r2
 8019fcc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
 8019fd0:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8019fd4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8019fd8:	4293      	cmp	r3, r2
 8019fda:	bfb8      	it	lt
 8019fdc:	4613      	movlt	r3, r2
 8019fde:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8019fe2:	4293      	cmp	r3, r2
 8019fe4:	bfa8      	it	ge
 8019fe6:	4613      	movge	r3, r2
 8019fe8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 = MIN(MAX(out_buff3, output_activation_min), output_activation_max);
 8019fec:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8019ff0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8019ff4:	4293      	cmp	r3, r2
 8019ff6:	bfb8      	it	lt
 8019ff8:	4613      	movlt	r3, r2
 8019ffa:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8019ffe:	4293      	cmp	r3, r2
 801a000:	bfa8      	it	ge
 801a002:	4613      	movge	r3, r2
 801a004:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                output[out_idx++] = (int8_t)out_buff0;
 801a008:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801a00c:	1c5a      	adds	r2, r3, #1
 801a00e:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801a012:	461a      	mov	r2, r3
 801a014:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801a018:	4413      	add	r3, r2
 801a01a:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801a01e:	b252      	sxtb	r2, r2
 801a020:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff1;
 801a022:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801a026:	1c5a      	adds	r2, r3, #1
 801a028:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801a02c:	461a      	mov	r2, r3
 801a02e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801a032:	4413      	add	r3, r2
 801a034:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801a038:	b252      	sxtb	r2, r2
 801a03a:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff2;
 801a03c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801a040:	1c5a      	adds	r2, r3, #1
 801a042:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801a046:	461a      	mov	r2, r3
 801a048:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801a04c:	4413      	add	r3, r2
 801a04e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801a052:	b252      	sxtb	r2, r2
 801a054:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff3;
 801a056:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801a05a:	1c5a      	adds	r2, r3, #1
 801a05c:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801a060:	461a      	mov	r2, r3
 801a062:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801a066:	4413      	add	r3, r2
 801a068:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801a06c:	b252      	sxtb	r2, r2
 801a06e:	701a      	strb	r2, [r3, #0]
            for (; in_ch <= (input_ch - 4); in_ch += 4)
 801a070:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a074:	3304      	adds	r3, #4
 801a076:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801a07a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a07e:	3b03      	subs	r3, #3
 801a080:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 801a084:	429a      	cmp	r2, r3
 801a086:	f6ff aaa8 	blt.w	80195da <arm_depthwise_conv_3x3_s8+0x178>
            }

            // Leftover
            for (; in_ch < input_ch; ++in_ch)
 801a08a:	e1a4      	b.n	801a3d6 <arm_depthwise_conv_3x3_s8+0xf74>
            {
                int32_t out_buff = bias[in_ch];
 801a08c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a090:	009b      	lsls	r3, r3, #2
 801a092:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801a096:	4413      	add	r3, r2
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
 801a09e:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801a0a2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801a0a6:	4413      	add	r3, r2
 801a0a8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801a0ac:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 801a0b0:	fb01 f202 	mul.w	r2, r1, r2
 801a0b4:	fb02 f303 	mul.w	r3, r2, r3
 801a0b8:	4619      	mov	r1, r3
 801a0ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801a0be:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801a0c2:	fb02 f303 	mul.w	r3, r2, r3
 801a0c6:	18ca      	adds	r2, r1, r3
 801a0c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a0cc:	4413      	add	r3, r2
 801a0ce:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801a0d2:	4413      	add	r3, r2
 801a0d4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 801a0d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a0dc:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 801a0e0:	fb02 f203 	mul.w	r2, r2, r3
 801a0e4:	4613      	mov	r3, r2
 801a0e6:	005b      	lsls	r3, r3, #1
 801a0e8:	4413      	add	r3, r2
 801a0ea:	461a      	mov	r2, r3
 801a0ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a0f0:	4413      	add	r3, r2
 801a0f2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801a0f6:	4413      	add	r3, r2
 801a0f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 801a0fc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801a100:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 801a104:	e06f      	b.n	801a1e6 <arm_depthwise_conv_3x3_s8+0xd84>
                {
                    if (ker_w_start == 0)
 801a106:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d112      	bne.n	801a134 <arm_depthwise_conv_3x3_s8+0xcd2>
                    {
                        out_buff += (*(input_ptr) + input_offset) * *(kernel_ptr);
 801a10e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a112:	f993 3000 	ldrsb.w	r3, [r3]
 801a116:	461a      	mov	r2, r3
 801a118:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801a11c:	4413      	add	r3, r2
 801a11e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801a122:	f992 2000 	ldrsb.w	r2, [r2]
 801a126:	fb02 f303 	mul.w	r3, r2, r3
 801a12a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a12e:	4413      	add	r3, r2
 801a130:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                    }

                    out_buff += (*(input_ptr + input_ch) + input_offset) * *(kernel_ptr + input_ch);
 801a134:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a138:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801a13c:	4413      	add	r3, r2
 801a13e:	f993 3000 	ldrsb.w	r3, [r3]
 801a142:	461a      	mov	r2, r3
 801a144:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801a148:	4413      	add	r3, r2
 801a14a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801a14e:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 801a152:	440a      	add	r2, r1
 801a154:	f992 2000 	ldrsb.w	r2, [r2]
 801a158:	fb02 f303 	mul.w	r3, r2, r3
 801a15c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a160:	4413      	add	r3, r2
 801a162:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

                    if ((input_x - in_w) >= 3)
 801a166:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801a16a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801a16e:	1ad3      	subs	r3, r2, r3
 801a170:	2b02      	cmp	r3, #2
 801a172:	dd1c      	ble.n	801a1ae <arm_depthwise_conv_3x3_s8+0xd4c>
                    {
                        out_buff += (*(input_ptr + (input_ch << 1)) + input_offset) * *(kernel_ptr + (input_ch << 1));
 801a174:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a178:	005b      	lsls	r3, r3, #1
 801a17a:	461a      	mov	r2, r3
 801a17c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a180:	4413      	add	r3, r2
 801a182:	f993 3000 	ldrsb.w	r3, [r3]
 801a186:	461a      	mov	r2, r3
 801a188:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801a18c:	4413      	add	r3, r2
 801a18e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801a192:	0052      	lsls	r2, r2, #1
 801a194:	4611      	mov	r1, r2
 801a196:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801a19a:	440a      	add	r2, r1
 801a19c:	f992 2000 	ldrsb.w	r2, [r2]
 801a1a0:	fb02 f303 	mul.w	r3, r2, r3
 801a1a4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a1a8:	4413      	add	r3, r2
 801a1aa:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                    }

                    input_ptr += (input_ch * input_x);
 801a1ae:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a1b2:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801a1b6:	fb02 f303 	mul.w	r3, r2, r3
 801a1ba:	461a      	mov	r2, r3
 801a1bc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a1c0:	4413      	add	r3, r2
 801a1c2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
                    kernel_ptr += (input_ch * 3);
 801a1c6:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801a1ca:	4613      	mov	r3, r2
 801a1cc:	005b      	lsls	r3, r3, #1
 801a1ce:	4413      	add	r3, r2
 801a1d0:	461a      	mov	r2, r3
 801a1d2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801a1d6:	4413      	add	r3, r2
 801a1d8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 801a1dc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 801a1e0:	3301      	adds	r3, #1
 801a1e2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 801a1e6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801a1ea:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a1ee:	1ad3      	subs	r3, r2, r3
 801a1f0:	2b03      	cmp	r3, #3
 801a1f2:	bfa8      	it	ge
 801a1f4:	2303      	movge	r3, #3
 801a1f6:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801a1fa:	429a      	cmp	r2, r3
 801a1fc:	db83      	blt.n	801a106 <arm_depthwise_conv_3x3_s8+0xca4>
                }

                out_buff = arm_nn_requantize(out_buff, output_mult[in_ch], output_shift[in_ch]);
 801a1fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a202:	009b      	lsls	r3, r3, #2
 801a204:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801a208:	4413      	add	r3, r2
 801a20a:	6819      	ldr	r1, [r3, #0]
 801a20c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a210:	009b      	lsls	r3, r3, #2
 801a212:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a216:	4413      	add	r3, r2
 801a218:	681a      	ldr	r2, [r3, #0]
 801a21a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801a21e:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 801a222:	6018      	str	r0, [r3, #0]
 801a224:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801a228:	6019      	str	r1, [r3, #0]
 801a22a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801a22e:	601a      	str	r2, [r3, #0]
 801a230:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a23a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801a23e:	6812      	ldr	r2, [r2, #0]
 801a240:	409a      	lsls	r2, r3
 801a242:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801a246:	601a      	str	r2, [r3, #0]
 801a248:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801a24c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801a250:	6812      	ldr	r2, [r2, #0]
 801a252:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801a254:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801a258:	2200      	movs	r2, #0
 801a25a:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801a25c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a264:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a26a:	2200      	movs	r2, #0
 801a26c:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a26e:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 801a272:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	4618      	mov	r0, r3
 801a27a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801a27e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	461a      	mov	r2, r3
 801a286:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801a28a:	fb02 f501 	mul.w	r5, r2, r1
 801a28e:	fb00 f403 	mul.w	r4, r0, r3
 801a292:	442c      	add	r4, r5
 801a294:	fba0 2302 	umull	r2, r3, r0, r2
 801a298:	18e1      	adds	r1, r4, r3
 801a29a:	460b      	mov	r3, r1
 801a29c:	eb18 0102 	adds.w	r1, r8, r2
 801a2a0:	6039      	str	r1, [r7, #0]
 801a2a2:	eb49 0303 	adc.w	r3, r9, r3
 801a2a6:	607b      	str	r3, [r7, #4]
 801a2a8:	e9d7 3400 	ldrd	r3, r4, [r7]
 801a2ac:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 801a2b0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801a2b4:	f04f 0200 	mov.w	r2, #0
 801a2b8:	f04f 0300 	mov.w	r3, #0
 801a2bc:	0fc2      	lsrs	r2, r0, #31
 801a2be:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a2c2:	17cb      	asrs	r3, r1, #31
 801a2c4:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801a2c8:	4613      	mov	r3, r2
 801a2ca:	600b      	str	r3, [r1, #0]
    return result;
 801a2cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801a2d0:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a2d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	dc04      	bgt.n	801a2e6 <arm_depthwise_conv_3x3_s8+0xe84>
 801a2dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	425b      	negs	r3, r3
 801a2e4:	e000      	b.n	801a2e8 <arm_depthwise_conv_3x3_s8+0xe86>
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801a2ec:	6011      	str	r1, [r2, #0]
 801a2ee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801a2f2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801a2f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a2f8:	2200      	movs	r2, #0
 801a2fa:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a2fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801a300:	2201      	movs	r2, #1
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	409a      	lsls	r2, r3
 801a306:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a30a:	3a01      	subs	r2, #1
 801a30c:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801a30e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801a312:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801a316:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801a31a:	6809      	ldr	r1, [r1, #0]
 801a31c:	6812      	ldr	r2, [r2, #0]
 801a31e:	400a      	ands	r2, r1
 801a320:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801a322:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a326:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801a32a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801a32e:	6809      	ldr	r1, [r1, #0]
 801a330:	6812      	ldr	r2, [r2, #0]
 801a332:	fa41 f202 	asr.w	r2, r1, r2
 801a336:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801a338:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801a33c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801a340:	6812      	ldr	r2, [r2, #0]
 801a342:	1052      	asrs	r2, r2, #1
 801a344:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801a346:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	da06      	bge.n	801a35e <arm_depthwise_conv_3x3_s8+0xefc>
        threshold++;
 801a350:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801a354:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801a358:	6812      	ldr	r2, [r2, #0]
 801a35a:	3201      	adds	r2, #1
 801a35c:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801a35e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801a362:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801a366:	6812      	ldr	r2, [r2, #0]
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	429a      	cmp	r2, r3
 801a36c:	dd06      	ble.n	801a37c <arm_depthwise_conv_3x3_s8+0xf1a>
        result++;
 801a36e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a372:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801a376:	6812      	ldr	r2, [r2, #0]
 801a378:	3201      	adds	r2, #1
 801a37a:	601a      	str	r2, [r3, #0]
    return result;
 801a37c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a380:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a382:	bf00      	nop
 801a384:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                out_buff += output_offset;
 801a388:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a38c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801a390:	4413      	add	r3, r2
 801a392:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                out_buff = MIN(MAX(out_buff, output_activation_min), output_activation_max);
 801a396:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801a39a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801a39e:	4293      	cmp	r3, r2
 801a3a0:	bfb8      	it	lt
 801a3a2:	4613      	movlt	r3, r2
 801a3a4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801a3a8:	4293      	cmp	r3, r2
 801a3aa:	bfa8      	it	ge
 801a3ac:	4613      	movge	r3, r2
 801a3ae:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                output[out_idx++] = (int8_t)out_buff;
 801a3b2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801a3b6:	1c5a      	adds	r2, r3, #1
 801a3b8:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801a3bc:	461a      	mov	r2, r3
 801a3be:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801a3c2:	4413      	add	r3, r2
 801a3c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a3c8:	b252      	sxtb	r2, r2
 801a3ca:	701a      	strb	r2, [r3, #0]
            for (; in_ch < input_ch; ++in_ch)
 801a3cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a3d0:	3301      	adds	r3, #1
 801a3d2:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801a3d6:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 801a3da:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a3de:	429a      	cmp	r2, r3
 801a3e0:	f6ff ae54 	blt.w	801a08c <arm_depthwise_conv_3x3_s8+0xc2a>
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801a3e4:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801a3e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801a3ec:	4413      	add	r3, r2
 801a3ee:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 801a3f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801a3f6:	3301      	adds	r3, #1
 801a3f8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801a3fc:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a400:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801a404:	429a      	cmp	r2, r3
 801a406:	f6ff a8d8 	blt.w	80195ba <arm_depthwise_conv_3x3_s8+0x158>
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801a40a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801a40e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801a412:	4413      	add	r3, r2
 801a414:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 801a418:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801a41c:	3301      	adds	r3, #1
 801a41e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 801a422:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801a426:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801a42a:	429a      	cmp	r2, r3
 801a42c:	f6ff a8b0 	blt.w	8019590 <arm_depthwise_conv_3x3_s8+0x12e>
            }
        }
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801a430:	2300      	movs	r3, #0
}
 801a432:	4618      	mov	r0, r3
 801a434:	f507 7705 	add.w	r7, r7, #532	; 0x214
 801a438:	46bd      	mov	sp, r7
 801a43a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801a43e:	4770      	bx	lr

0801a440 <depthwise_conv_s8_mult_4>:
                                     const int32_t output_y,
                                     const int32_t output_offset,
                                     const int32_t input_offset,
                                     const int32_t output_activation_min,
                                     const int32_t output_activation_max)
{
 801a440:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801a444:	b0d7      	sub	sp, #348	; 0x15c
 801a446:	af00      	add	r7, sp, #0
 801a448:	f107 0424 	add.w	r4, r7, #36	; 0x24
 801a44c:	6020      	str	r0, [r4, #0]
 801a44e:	f107 0020 	add.w	r0, r7, #32
 801a452:	6001      	str	r1, [r0, #0]
 801a454:	f107 011c 	add.w	r1, r7, #28
 801a458:	600a      	str	r2, [r1, #0]
 801a45a:	f107 0218 	add.w	r2, r7, #24
 801a45e:	6013      	str	r3, [r2, #0]
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801a460:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 801a464:	425b      	negs	r3, r3
 801a466:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801a46a:	2300      	movs	r3, #0
 801a46c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 801a470:	2300      	movs	r3, #0
 801a472:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801a476:	f000 bcb3 	b.w	801ade0 <depthwise_conv_s8_mult_4+0x9a0>
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801a47a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801a47e:	425b      	negs	r3, r3
 801a480:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801a484:	2300      	movs	r3, #0
 801a486:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801a48a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801a48e:	2b00      	cmp	r3, #0
 801a490:	dc03      	bgt.n	801a49a <depthwise_conv_s8_mult_4+0x5a>
 801a492:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801a496:	425b      	negs	r3, r3
 801a498:	e000      	b.n	801a49c <depthwise_conv_s8_mult_4+0x5c>
 801a49a:	2300      	movs	r3, #0
 801a49c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801a4a0:	f000 bc8b 	b.w	801adba <depthwise_conv_s8_mult_4+0x97a>
        {
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
 801a4a4:	2300      	movs	r3, #0
 801a4a6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801a4aa:	2300      	movs	r3, #0
 801a4ac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801a4b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	dc03      	bgt.n	801a4c0 <depthwise_conv_s8_mult_4+0x80>
 801a4b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a4bc:	425b      	negs	r3, r3
 801a4be:	e000      	b.n	801a4c2 <depthwise_conv_s8_mult_4+0x82>
 801a4c0:	2300      	movs	r3, #0
 801a4c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801a4c6:	f000 bc65 	b.w	801ad94 <depthwise_conv_s8_mult_4+0x954>
                 ++in_ch, out_ch += ch_mult)
            {
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
 801a4ca:	2300      	movs	r3, #0
 801a4cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801a4d0:	f000 bc4d 	b.w	801ad6e <depthwise_conv_s8_mult_4+0x92e>
                {
                    int32_t out_buff[4];

                    out_buff[0] = bias[out_ch + 0 + mult_tile];
 801a4d4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801a4d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a4dc:	4413      	add	r3, r2
 801a4de:	009b      	lsls	r3, r3, #2
 801a4e0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801a4e4:	4413      	add	r3, r2
 801a4e6:	681a      	ldr	r2, [r3, #0]
 801a4e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a4ec:	601a      	str	r2, [r3, #0]
                    out_buff[1] = bias[out_ch + 1 + mult_tile];
 801a4ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a4f2:	1c5a      	adds	r2, r3, #1
 801a4f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a4f8:	4413      	add	r3, r2
 801a4fa:	009b      	lsls	r3, r3, #2
 801a4fc:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801a500:	4413      	add	r3, r2
 801a502:	681a      	ldr	r2, [r3, #0]
 801a504:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a508:	605a      	str	r2, [r3, #4]
                    out_buff[2] = bias[out_ch + 2 + mult_tile];
 801a50a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a50e:	1c9a      	adds	r2, r3, #2
 801a510:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a514:	4413      	add	r3, r2
 801a516:	009b      	lsls	r3, r3, #2
 801a518:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801a51c:	4413      	add	r3, r2
 801a51e:	681a      	ldr	r2, [r3, #0]
 801a520:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a524:	609a      	str	r2, [r3, #8]
                    out_buff[3] = bias[out_ch + 3 + mult_tile];
 801a526:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a52a:	1cda      	adds	r2, r3, #3
 801a52c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a530:	4413      	add	r3, r2
 801a532:	009b      	lsls	r3, r3, #2
 801a534:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801a538:	4413      	add	r3, r2
 801a53a:	681a      	ldr	r2, [r3, #0]
 801a53c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a540:	60da      	str	r2, [r3, #12]

                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
 801a542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a546:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801a54a:	e0cd      	b.n	801a6e8 <depthwise_conv_s8_mult_4+0x2a8>
                    {
                        int32_t ker_idx = ker_h * (output_ch * kernel_x) + ker_w_start * output_ch + out_ch;
 801a54c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801a550:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 801a554:	fb02 f303 	mul.w	r3, r2, r3
 801a558:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801a55c:	fb02 f203 	mul.w	r2, r2, r3
 801a560:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801a564:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 801a568:	fb01 f303 	mul.w	r3, r1, r3
 801a56c:	4413      	add	r3, r2
 801a56e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801a572:	4413      	add	r3, r2
 801a574:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                        int32_t in_idx = (in_h + ker_h) * (input_ch * input_x) + in_w * input_ch + in_ch;
 801a578:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801a57c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801a580:	4413      	add	r3, r2
 801a582:	f107 0218 	add.w	r2, r7, #24
 801a586:	f107 0120 	add.w	r1, r7, #32
 801a58a:	6812      	ldr	r2, [r2, #0]
 801a58c:	6809      	ldr	r1, [r1, #0]
 801a58e:	fb01 f202 	mul.w	r2, r1, r2
 801a592:	fb02 f203 	mul.w	r2, r2, r3
 801a596:	f107 0118 	add.w	r1, r7, #24
 801a59a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a59e:	6809      	ldr	r1, [r1, #0]
 801a5a0:	fb01 f303 	mul.w	r3, r1, r3
 801a5a4:	4413      	add	r3, r2
 801a5a6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801a5aa:	4413      	add	r3, r2
 801a5ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
 801a5b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801a5b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801a5b8:	e081      	b.n	801a6be <depthwise_conv_s8_mult_4+0x27e>
                             ++ker_w, ker_idx += output_ch)
                        {
                            int32_t in_val = input[in_idx + ker_w * input_ch] + input_offset;
 801a5ba:	f107 0218 	add.w	r2, r7, #24
 801a5be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a5c2:	6812      	ldr	r2, [r2, #0]
 801a5c4:	fb02 f203 	mul.w	r2, r2, r3
 801a5c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a5cc:	4413      	add	r3, r2
 801a5ce:	461a      	mov	r2, r3
 801a5d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a5d4:	681b      	ldr	r3, [r3, #0]
 801a5d6:	4413      	add	r3, r2
 801a5d8:	f993 3000 	ldrsb.w	r3, [r3]
 801a5dc:	461a      	mov	r2, r3
 801a5de:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801a5e2:	4413      	add	r3, r2
 801a5e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                            out_buff[0] += in_val * kernel[ker_idx + 0 + mult_tile];
 801a5e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a5ec:	681a      	ldr	r2, [r3, #0]
 801a5ee:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 801a5f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a5f6:	440b      	add	r3, r1
 801a5f8:	4619      	mov	r1, r3
 801a5fa:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801a5fe:	440b      	add	r3, r1
 801a600:	f993 3000 	ldrsb.w	r3, [r3]
 801a604:	4619      	mov	r1, r3
 801a606:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a60a:	fb03 f301 	mul.w	r3, r3, r1
 801a60e:	441a      	add	r2, r3
 801a610:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a614:	601a      	str	r2, [r3, #0]
                            out_buff[1] += in_val * kernel[ker_idx + 1 + mult_tile];
 801a616:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a61a:	685a      	ldr	r2, [r3, #4]
 801a61c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801a620:	1c59      	adds	r1, r3, #1
 801a622:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a626:	440b      	add	r3, r1
 801a628:	4619      	mov	r1, r3
 801a62a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801a62e:	440b      	add	r3, r1
 801a630:	f993 3000 	ldrsb.w	r3, [r3]
 801a634:	4619      	mov	r1, r3
 801a636:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a63a:	fb03 f301 	mul.w	r3, r3, r1
 801a63e:	441a      	add	r2, r3
 801a640:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a644:	605a      	str	r2, [r3, #4]
                            out_buff[2] += in_val * kernel[ker_idx + 2 + mult_tile];
 801a646:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a64a:	689a      	ldr	r2, [r3, #8]
 801a64c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801a650:	1c99      	adds	r1, r3, #2
 801a652:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a656:	440b      	add	r3, r1
 801a658:	4619      	mov	r1, r3
 801a65a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801a65e:	440b      	add	r3, r1
 801a660:	f993 3000 	ldrsb.w	r3, [r3]
 801a664:	4619      	mov	r1, r3
 801a666:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a66a:	fb03 f301 	mul.w	r3, r3, r1
 801a66e:	441a      	add	r2, r3
 801a670:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a674:	609a      	str	r2, [r3, #8]
                            out_buff[3] += in_val * kernel[ker_idx + 3 + mult_tile];
 801a676:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a67a:	68da      	ldr	r2, [r3, #12]
 801a67c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801a680:	1cd9      	adds	r1, r3, #3
 801a682:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a686:	440b      	add	r3, r1
 801a688:	4619      	mov	r1, r3
 801a68a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801a68e:	440b      	add	r3, r1
 801a690:	f993 3000 	ldrsb.w	r3, [r3]
 801a694:	4619      	mov	r1, r3
 801a696:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a69a:	fb03 f301 	mul.w	r3, r3, r1
 801a69e:	441a      	add	r2, r3
 801a6a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a6a4:	60da      	str	r2, [r3, #12]
                             ++ker_w, ker_idx += output_ch)
 801a6a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a6aa:	3301      	adds	r3, #1
 801a6ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801a6b0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801a6b4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801a6b8:	4413      	add	r3, r2
 801a6ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
 801a6be:	f107 0320 	add.w	r3, r7, #32
 801a6c2:	681a      	ldr	r2, [r3, #0]
 801a6c4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a6c8:	1ad2      	subs	r2, r2, r3
 801a6ca:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a6ce:	4293      	cmp	r3, r2
 801a6d0:	bfa8      	it	ge
 801a6d2:	4613      	movge	r3, r2
 801a6d4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801a6d8:	429a      	cmp	r2, r3
 801a6da:	f6ff af6e 	blt.w	801a5ba <depthwise_conv_s8_mult_4+0x17a>
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
 801a6de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801a6e2:	3301      	adds	r3, #1
 801a6e4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801a6e8:	f107 031c 	add.w	r3, r7, #28
 801a6ec:	681a      	ldr	r2, [r3, #0]
 801a6ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801a6f2:	1ad2      	subs	r2, r2, r3
 801a6f4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801a6f8:	4293      	cmp	r3, r2
 801a6fa:	bfa8      	it	ge
 801a6fc:	4613      	movge	r3, r2
 801a6fe:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801a702:	429a      	cmp	r2, r3
 801a704:	f6ff af22 	blt.w	801a54c <depthwise_conv_s8_mult_4+0x10c>
                    res = vmaxq_s32(res, vdupq_n_s32(output_activation_min));
                    res = vminq_s32(res, vdupq_n_s32(output_activation_max));
                    vstrbq_s32(output, res);
                    output += 4;
#else
                    out_buff[0] = arm_nn_requantize(
 801a708:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a70c:	6819      	ldr	r1, [r3, #0]
                        out_buff[0], output_mult[out_ch + 0 + mult_tile], output_shift[out_ch + 0 + mult_tile]);
 801a70e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801a712:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a716:	4413      	add	r3, r2
 801a718:	009b      	lsls	r3, r3, #2
 801a71a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a71e:	4413      	add	r3, r2
                    out_buff[0] = arm_nn_requantize(
 801a720:	681a      	ldr	r2, [r3, #0]
                        out_buff[0], output_mult[out_ch + 0 + mult_tile], output_shift[out_ch + 0 + mult_tile]);
 801a722:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 801a726:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a72a:	4403      	add	r3, r0
 801a72c:	009b      	lsls	r3, r3, #2
 801a72e:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801a732:	4403      	add	r3, r0
                    out_buff[0] = arm_nn_requantize(
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801a73a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801a73e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801a742:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a746:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a74a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a74e:	fa02 f303 	lsl.w	r3, r2, r3
 801a752:	67fb      	str	r3, [r7, #124]	; 0x7c
 801a754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a758:	67bb      	str	r3, [r7, #120]	; 0x78
    q31_t result = 0;
 801a75a:	2300      	movs	r3, #0
 801a75c:	677b      	str	r3, [r7, #116]	; 0x74
    mult.word.low = 1 << 30;
 801a75e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a766:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a768:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a76c:	2200      	movs	r2, #0
 801a76e:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a770:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 801a774:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a776:	461a      	mov	r2, r3
 801a778:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801a77c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801a77e:	4608      	mov	r0, r1
 801a780:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801a784:	fb00 f503 	mul.w	r5, r0, r3
 801a788:	fb02 f401 	mul.w	r4, r2, r1
 801a78c:	442c      	add	r4, r5
 801a78e:	fba2 2300 	umull	r2, r3, r2, r0
 801a792:	18e1      	adds	r1, r4, r3
 801a794:	460b      	mov	r3, r1
 801a796:	eb18 0102 	adds.w	r1, r8, r2
 801a79a:	6039      	str	r1, [r7, #0]
 801a79c:	eb49 0303 	adc.w	r3, r9, r3
 801a7a0:	607b      	str	r3, [r7, #4]
 801a7a2:	e9d7 3400 	ldrd	r3, r4, [r7]
 801a7a6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    result = (int32_t)(mult.long_long >> 31);
 801a7aa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801a7ae:	f04f 0200 	mov.w	r2, #0
 801a7b2:	f04f 0300 	mov.w	r3, #0
 801a7b6:	0fc2      	lsrs	r2, r0, #31
 801a7b8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a7bc:	17cb      	asrs	r3, r1, #31
 801a7be:	4613      	mov	r3, r2
 801a7c0:	677b      	str	r3, [r7, #116]	; 0x74
    return result;
 801a7c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a7c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	dc03      	bgt.n	801a7d4 <depthwise_conv_s8_mult_4+0x394>
 801a7cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a7d0:	425b      	negs	r3, r3
 801a7d2:	e000      	b.n	801a7d6 <depthwise_conv_s8_mult_4+0x396>
 801a7d4:	2300      	movs	r3, #0
 801a7d6:	673a      	str	r2, [r7, #112]	; 0x70
 801a7d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    q31_t result = 0;
 801a7da:	2300      	movs	r3, #0
 801a7dc:	66bb      	str	r3, [r7, #104]	; 0x68
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a7de:	2201      	movs	r2, #1
 801a7e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a7e2:	fa02 f303 	lsl.w	r3, r2, r3
 801a7e6:	3b01      	subs	r3, #1
 801a7e8:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t remainder = remainder_mask & dividend;
 801a7ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801a7ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a7ee:	4013      	ands	r3, r2
 801a7f0:	663b      	str	r3, [r7, #96]	; 0x60
    result = dividend >> exponent;
 801a7f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801a7f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a7f6:	fa42 f303 	asr.w	r3, r2, r3
 801a7fa:	66bb      	str	r3, [r7, #104]	; 0x68
    q31_t threshold = remainder_mask >> 1;
 801a7fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a7fe:	105b      	asrs	r3, r3, #1
 801a800:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (result < 0)
 801a802:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a804:	2b00      	cmp	r3, #0
 801a806:	da02      	bge.n	801a80e <depthwise_conv_s8_mult_4+0x3ce>
        threshold++;
 801a808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a80a:	3301      	adds	r3, #1
 801a80c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (remainder > threshold)
 801a80e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a812:	429a      	cmp	r2, r3
 801a814:	dd02      	ble.n	801a81c <depthwise_conv_s8_mult_4+0x3dc>
        result++;
 801a816:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a818:	3301      	adds	r3, #1
 801a81a:	66bb      	str	r3, [r7, #104]	; 0x68
    return result;
 801a81c:	6eba      	ldr	r2, [r7, #104]	; 0x68
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a81e:	bf00      	nop
 801a820:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a824:	601a      	str	r2, [r3, #0]
                    out_buff[1] = arm_nn_requantize(
 801a826:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a82a:	6859      	ldr	r1, [r3, #4]
                        out_buff[1], output_mult[out_ch + 1 + mult_tile], output_shift[out_ch + 1 + mult_tile]);
 801a82c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a830:	1c5a      	adds	r2, r3, #1
 801a832:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a836:	4413      	add	r3, r2
 801a838:	009b      	lsls	r3, r3, #2
 801a83a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a83e:	4413      	add	r3, r2
                    out_buff[1] = arm_nn_requantize(
 801a840:	681a      	ldr	r2, [r3, #0]
                        out_buff[1], output_mult[out_ch + 1 + mult_tile], output_shift[out_ch + 1 + mult_tile]);
 801a842:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a846:	1c58      	adds	r0, r3, #1
 801a848:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a84c:	4403      	add	r3, r0
 801a84e:	009b      	lsls	r3, r3, #2
 801a850:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801a854:	4403      	add	r3, r0
                    out_buff[1] = arm_nn_requantize(
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 801a85c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801a860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801a864:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a868:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a86c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801a870:	fa02 f303 	lsl.w	r3, r2, r3
 801a874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801a878:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a87c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q31_t result = 0;
 801a880:	2300      	movs	r3, #0
 801a882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    mult.word.low = 1 << 30;
 801a886:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a88a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a88e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a890:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a894:	2200      	movs	r2, #0
 801a896:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a898:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 801a89c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a8a0:	461a      	mov	r2, r3
 801a8a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801a8a6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801a8aa:	4608      	mov	r0, r1
 801a8ac:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801a8b0:	fb00 f503 	mul.w	r5, r0, r3
 801a8b4:	fb02 f401 	mul.w	r4, r2, r1
 801a8b8:	442c      	add	r4, r5
 801a8ba:	fba2 2300 	umull	r2, r3, r2, r0
 801a8be:	18e1      	adds	r1, r4, r3
 801a8c0:	460b      	mov	r3, r1
 801a8c2:	eb18 0102 	adds.w	r1, r8, r2
 801a8c6:	60b9      	str	r1, [r7, #8]
 801a8c8:	eb49 0303 	adc.w	r3, r9, r3
 801a8cc:	60fb      	str	r3, [r7, #12]
 801a8ce:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801a8d2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    result = (int32_t)(mult.long_long >> 31);
 801a8d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801a8da:	f04f 0200 	mov.w	r2, #0
 801a8de:	f04f 0300 	mov.w	r3, #0
 801a8e2:	0fc2      	lsrs	r2, r0, #31
 801a8e4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a8e8:	17cb      	asrs	r3, r1, #31
 801a8ea:	4613      	mov	r3, r2
 801a8ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return result;
 801a8f0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a8f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	dc03      	bgt.n	801a904 <depthwise_conv_s8_mult_4+0x4c4>
 801a8fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a900:	425b      	negs	r3, r3
 801a902:	e000      	b.n	801a906 <depthwise_conv_s8_mult_4+0x4c6>
 801a904:	2300      	movs	r3, #0
 801a906:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801a90a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    q31_t result = 0;
 801a90e:	2300      	movs	r3, #0
 801a910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a914:	2201      	movs	r2, #1
 801a916:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a91a:	fa02 f303 	lsl.w	r3, r2, r3
 801a91e:	3b01      	subs	r3, #1
 801a920:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int32_t remainder = remainder_mask & dividend;
 801a924:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801a928:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a92c:	4013      	ands	r3, r2
 801a92e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    result = dividend >> exponent;
 801a932:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801a936:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a93a:	fa42 f303 	asr.w	r3, r2, r3
 801a93e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    q31_t threshold = remainder_mask >> 1;
 801a942:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a946:	105b      	asrs	r3, r3, #1
 801a948:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (result < 0)
 801a94c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a950:	2b00      	cmp	r3, #0
 801a952:	da04      	bge.n	801a95e <depthwise_conv_s8_mult_4+0x51e>
        threshold++;
 801a954:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a958:	3301      	adds	r3, #1
 801a95a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (remainder > threshold)
 801a95e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801a962:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a966:	429a      	cmp	r2, r3
 801a968:	dd04      	ble.n	801a974 <depthwise_conv_s8_mult_4+0x534>
        result++;
 801a96a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a96e:	3301      	adds	r3, #1
 801a970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return result;
 801a974:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a978:	bf00      	nop
 801a97a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a97e:	605a      	str	r2, [r3, #4]
                    out_buff[2] = arm_nn_requantize(
 801a980:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a984:	6899      	ldr	r1, [r3, #8]
                        out_buff[2], output_mult[out_ch + 2 + mult_tile], output_shift[out_ch + 2 + mult_tile]);
 801a986:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a98a:	1c9a      	adds	r2, r3, #2
 801a98c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a990:	4413      	add	r3, r2
 801a992:	009b      	lsls	r3, r3, #2
 801a994:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a998:	4413      	add	r3, r2
                    out_buff[2] = arm_nn_requantize(
 801a99a:	681a      	ldr	r2, [r3, #0]
                        out_buff[2], output_mult[out_ch + 2 + mult_tile], output_shift[out_ch + 2 + mult_tile]);
 801a99c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a9a0:	1c98      	adds	r0, r3, #2
 801a9a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a9a6:	4403      	add	r3, r0
 801a9a8:	009b      	lsls	r3, r3, #2
 801a9aa:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801a9ae:	4403      	add	r3, r0
                    out_buff[2] = arm_nn_requantize(
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 801a9b6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 801a9ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801a9be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a9c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a9c6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801a9ca:	fa02 f303 	lsl.w	r3, r2, r3
 801a9ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801a9d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a9d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    q31_t result = 0;
 801a9da:	2300      	movs	r3, #0
 801a9dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mult.word.low = 1 << 30;
 801a9e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a9e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a9e8:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a9ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a9ee:	2200      	movs	r2, #0
 801a9f0:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a9f2:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 801a9f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801a9fa:	461a      	mov	r2, r3
 801a9fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801aa00:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801aa04:	4608      	mov	r0, r1
 801aa06:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801aa0a:	fb00 f503 	mul.w	r5, r0, r3
 801aa0e:	fb02 f401 	mul.w	r4, r2, r1
 801aa12:	442c      	add	r4, r5
 801aa14:	fba2 2300 	umull	r2, r3, r2, r0
 801aa18:	18e1      	adds	r1, r4, r3
 801aa1a:	460b      	mov	r3, r1
 801aa1c:	eb18 0102 	adds.w	r1, r8, r2
 801aa20:	6139      	str	r1, [r7, #16]
 801aa22:	eb49 0303 	adc.w	r3, r9, r3
 801aa26:	617b      	str	r3, [r7, #20]
 801aa28:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801aa2c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 801aa30:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801aa34:	f04f 0200 	mov.w	r2, #0
 801aa38:	f04f 0300 	mov.w	r3, #0
 801aa3c:	0fc2      	lsrs	r2, r0, #31
 801aa3e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801aa42:	17cb      	asrs	r3, r1, #31
 801aa44:	4613      	mov	r3, r2
 801aa46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    return result;
 801aa4a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801aa4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	dc03      	bgt.n	801aa5e <depthwise_conv_s8_mult_4+0x61e>
 801aa56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801aa5a:	425b      	negs	r3, r3
 801aa5c:	e000      	b.n	801aa60 <depthwise_conv_s8_mult_4+0x620>
 801aa5e:	2300      	movs	r3, #0
 801aa60:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 801aa64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    q31_t result = 0;
 801aa68:	2300      	movs	r3, #0
 801aa6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    const q31_t remainder_mask = (1 << exponent) - 1;
 801aa6e:	2201      	movs	r2, #1
 801aa70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801aa74:	fa02 f303 	lsl.w	r3, r2, r3
 801aa78:	3b01      	subs	r3, #1
 801aa7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int32_t remainder = remainder_mask & dividend;
 801aa7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801aa82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801aa86:	4013      	ands	r3, r2
 801aa88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result = dividend >> exponent;
 801aa8c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801aa90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801aa94:	fa42 f303 	asr.w	r3, r2, r3
 801aa98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    q31_t threshold = remainder_mask >> 1;
 801aa9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801aaa0:	105b      	asrs	r3, r3, #1
 801aaa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (result < 0)
 801aaa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	da04      	bge.n	801aab8 <depthwise_conv_s8_mult_4+0x678>
        threshold++;
 801aaae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801aab2:	3301      	adds	r3, #1
 801aab4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (remainder > threshold)
 801aab8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801aabc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801aac0:	429a      	cmp	r2, r3
 801aac2:	dd04      	ble.n	801aace <depthwise_conv_s8_mult_4+0x68e>
        result++;
 801aac4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801aac8:	3301      	adds	r3, #1
 801aaca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    return result;
 801aace:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801aad2:	bf00      	nop
 801aad4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801aad8:	609a      	str	r2, [r3, #8]
                    out_buff[3] = arm_nn_requantize(
 801aada:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801aade:	68d9      	ldr	r1, [r3, #12]
                        out_buff[3], output_mult[out_ch + 3 + mult_tile], output_shift[out_ch + 3 + mult_tile]);
 801aae0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801aae4:	1cda      	adds	r2, r3, #3
 801aae6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801aaea:	4413      	add	r3, r2
 801aaec:	009b      	lsls	r3, r3, #2
 801aaee:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801aaf2:	4413      	add	r3, r2
                    out_buff[3] = arm_nn_requantize(
 801aaf4:	681a      	ldr	r2, [r3, #0]
                        out_buff[3], output_mult[out_ch + 3 + mult_tile], output_shift[out_ch + 3 + mult_tile]);
 801aaf6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801aafa:	1cd8      	adds	r0, r3, #3
 801aafc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801ab00:	4403      	add	r3, r0
 801ab02:	009b      	lsls	r3, r3, #2
 801ab04:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801ab08:	4403      	add	r3, r0
                    out_buff[3] = arm_nn_requantize(
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 801ab10:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 801ab14:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801ab18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ab1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab20:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801ab24:	fa02 f303 	lsl.w	r3, r2, r3
 801ab28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801ab2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ab30:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    q31_t result = 0;
 801ab34:	2300      	movs	r3, #0
 801ab36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    mult.word.low = 1 << 30;
 801ab3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ab3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801ab42:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801ab44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ab48:	2200      	movs	r2, #0
 801ab4a:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801ab4c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 801ab50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ab54:	461a      	mov	r2, r3
 801ab56:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801ab5a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 801ab5e:	4608      	mov	r0, r1
 801ab60:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801ab64:	fb00 f503 	mul.w	r5, r0, r3
 801ab68:	fb02 f401 	mul.w	r4, r2, r1
 801ab6c:	442c      	add	r4, r5
 801ab6e:	fba2 2300 	umull	r2, r3, r2, r0
 801ab72:	18e1      	adds	r1, r4, r3
 801ab74:	460b      	mov	r3, r1
 801ab76:	eb18 0a02 	adds.w	sl, r8, r2
 801ab7a:	eb49 0b03 	adc.w	fp, r9, r3
 801ab7e:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
    result = (int32_t)(mult.long_long >> 31);
 801ab82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801ab86:	f04f 0200 	mov.w	r2, #0
 801ab8a:	f04f 0300 	mov.w	r3, #0
 801ab8e:	0fc2      	lsrs	r2, r0, #31
 801ab90:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801ab94:	17cb      	asrs	r3, r1, #31
 801ab96:	4613      	mov	r3, r2
 801ab98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    return result;
 801ab9c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801aba0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	dc03      	bgt.n	801abb0 <depthwise_conv_s8_mult_4+0x770>
 801aba8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801abac:	425b      	negs	r3, r3
 801abae:	e000      	b.n	801abb2 <depthwise_conv_s8_mult_4+0x772>
 801abb0:	2300      	movs	r3, #0
 801abb2:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 801abb6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    q31_t result = 0;
 801abba:	2300      	movs	r3, #0
 801abbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const q31_t remainder_mask = (1 << exponent) - 1;
 801abc0:	2201      	movs	r2, #1
 801abc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801abc6:	fa02 f303 	lsl.w	r3, r2, r3
 801abca:	3b01      	subs	r3, #1
 801abcc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    int32_t remainder = remainder_mask & dividend;
 801abd0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801abd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801abd8:	4013      	ands	r3, r2
 801abda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    result = dividend >> exponent;
 801abde:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801abe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801abe6:	fa42 f303 	asr.w	r3, r2, r3
 801abea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    q31_t threshold = remainder_mask >> 1;
 801abee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801abf2:	105b      	asrs	r3, r3, #1
 801abf4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (result < 0)
 801abf8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	da04      	bge.n	801ac0a <depthwise_conv_s8_mult_4+0x7ca>
        threshold++;
 801ac00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801ac04:	3301      	adds	r3, #1
 801ac06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (remainder > threshold)
 801ac0a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801ac0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801ac12:	429a      	cmp	r2, r3
 801ac14:	dd04      	ble.n	801ac20 <depthwise_conv_s8_mult_4+0x7e0>
        result++;
 801ac16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801ac1a:	3301      	adds	r3, #1
 801ac1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    return result;
 801ac20:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ac24:	bf00      	nop
 801ac26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac2a:	60da      	str	r2, [r3, #12]

                    out_buff[0] += output_offset;
 801ac2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac30:	681a      	ldr	r2, [r3, #0]
 801ac32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801ac36:	441a      	add	r2, r3
 801ac38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac3c:	601a      	str	r2, [r3, #0]
                    out_buff[1] += output_offset;
 801ac3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac42:	685a      	ldr	r2, [r3, #4]
 801ac44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801ac48:	441a      	add	r2, r3
 801ac4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac4e:	605a      	str	r2, [r3, #4]
                    out_buff[2] += output_offset;
 801ac50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac54:	689a      	ldr	r2, [r3, #8]
 801ac56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801ac5a:	441a      	add	r2, r3
 801ac5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac60:	609a      	str	r2, [r3, #8]
                    out_buff[3] += output_offset;
 801ac62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac66:	68da      	ldr	r2, [r3, #12]
 801ac68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801ac6c:	441a      	add	r2, r3
 801ac6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac72:	60da      	str	r2, [r3, #12]

                    out_buff[0] = MIN(MAX(out_buff[0], output_activation_min), output_activation_max);
 801ac74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac78:	681a      	ldr	r2, [r3, #0]
 801ac7a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801ac7e:	429a      	cmp	r2, r3
 801ac80:	bfb8      	it	lt
 801ac82:	461a      	movlt	r2, r3
 801ac84:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801ac88:	429a      	cmp	r2, r3
 801ac8a:	bfa8      	it	ge
 801ac8c:	461a      	movge	r2, r3
 801ac8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac92:	601a      	str	r2, [r3, #0]
                    out_buff[1] = MIN(MAX(out_buff[1], output_activation_min), output_activation_max);
 801ac94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac98:	685a      	ldr	r2, [r3, #4]
 801ac9a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801ac9e:	429a      	cmp	r2, r3
 801aca0:	bfb8      	it	lt
 801aca2:	461a      	movlt	r2, r3
 801aca4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801aca8:	429a      	cmp	r2, r3
 801acaa:	bfa8      	it	ge
 801acac:	461a      	movge	r2, r3
 801acae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801acb2:	605a      	str	r2, [r3, #4]
                    out_buff[2] = MIN(MAX(out_buff[2], output_activation_min), output_activation_max);
 801acb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801acb8:	689a      	ldr	r2, [r3, #8]
 801acba:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801acbe:	429a      	cmp	r2, r3
 801acc0:	bfb8      	it	lt
 801acc2:	461a      	movlt	r2, r3
 801acc4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801acc8:	429a      	cmp	r2, r3
 801acca:	bfa8      	it	ge
 801accc:	461a      	movge	r2, r3
 801acce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801acd2:	609a      	str	r2, [r3, #8]
                    out_buff[3] = MIN(MAX(out_buff[3], output_activation_min), output_activation_max);
 801acd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801acd8:	68da      	ldr	r2, [r3, #12]
 801acda:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801acde:	429a      	cmp	r2, r3
 801ace0:	bfb8      	it	lt
 801ace2:	461a      	movlt	r2, r3
 801ace4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801ace8:	429a      	cmp	r2, r3
 801acea:	bfa8      	it	ge
 801acec:	461a      	movge	r2, r3
 801acee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801acf2:	60da      	str	r2, [r3, #12]

                    output[out_idx++] = (int8_t)out_buff[0];
 801acf4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801acf8:	6819      	ldr	r1, [r3, #0]
 801acfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801acfe:	1c5a      	adds	r2, r3, #1
 801ad00:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801ad04:	461a      	mov	r2, r3
 801ad06:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801ad0a:	4413      	add	r3, r2
 801ad0c:	b24a      	sxtb	r2, r1
 801ad0e:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[1];
 801ad10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ad14:	6859      	ldr	r1, [r3, #4]
 801ad16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ad1a:	1c5a      	adds	r2, r3, #1
 801ad1c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801ad20:	461a      	mov	r2, r3
 801ad22:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801ad26:	4413      	add	r3, r2
 801ad28:	b24a      	sxtb	r2, r1
 801ad2a:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[2];
 801ad2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ad30:	6899      	ldr	r1, [r3, #8]
 801ad32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ad36:	1c5a      	adds	r2, r3, #1
 801ad38:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801ad3c:	461a      	mov	r2, r3
 801ad3e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801ad42:	4413      	add	r3, r2
 801ad44:	b24a      	sxtb	r2, r1
 801ad46:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[3];
 801ad48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ad4c:	68d9      	ldr	r1, [r3, #12]
 801ad4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ad52:	1c5a      	adds	r2, r3, #1
 801ad54:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801ad58:	461a      	mov	r2, r3
 801ad5a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801ad5e:	4413      	add	r3, r2
 801ad60:	b24a      	sxtb	r2, r1
 801ad62:	701a      	strb	r2, [r3, #0]
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
 801ad64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801ad68:	3304      	adds	r3, #4
 801ad6a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801ad6e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801ad72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801ad76:	429a      	cmp	r2, r3
 801ad78:	f6ff abac 	blt.w	801a4d4 <depthwise_conv_s8_mult_4+0x94>
                 ++in_ch, out_ch += ch_mult)
 801ad7c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801ad80:	3301      	adds	r3, #1
 801ad82:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801ad86:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801ad8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801ad8e:	4413      	add	r3, r2
 801ad90:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
 801ad94:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801ad98:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801ad9c:	429a      	cmp	r2, r3
 801ad9e:	f6ff ab94 	blt.w	801a4ca <depthwise_conv_s8_mult_4+0x8a>
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801ada2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801ada6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801adaa:	4413      	add	r3, r2
 801adac:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801adb0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801adb4:	3301      	adds	r3, #1
 801adb6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801adba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801adbe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801adc2:	429a      	cmp	r2, r3
 801adc4:	f6ff ab6e 	blt.w	801a4a4 <depthwise_conv_s8_mult_4+0x64>
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801adc8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801adcc:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801add0:	4413      	add	r3, r2
 801add2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801add6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801adda:	3301      	adds	r3, #1
 801addc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 801ade0:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801ade4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801ade8:	429a      	cmp	r2, r3
 801adea:	f6ff ab46 	blt.w	801a47a <depthwise_conv_s8_mult_4+0x3a>
#endif
                }
            }
        }
    }
}
 801adee:	bf00      	nop
 801adf0:	bf00      	nop
 801adf2:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 801adf6:	46bd      	mov	sp, r7
 801adf8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801adfc:	4770      	bx	lr

0801adfe <depthwise_conv_s8_generic>:
                                      const uint16_t output_y,
                                      const int32_t output_offset,
                                      const int32_t input_offset,
                                      const int32_t output_activation_min,
                                      const int32_t output_activation_max)
{
 801adfe:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801ae02:	b0a4      	sub	sp, #144	; 0x90
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	60f8      	str	r0, [r7, #12]
 801ae08:	4608      	mov	r0, r1
 801ae0a:	4611      	mov	r1, r2
 801ae0c:	461a      	mov	r2, r3
 801ae0e:	4603      	mov	r3, r0
 801ae10:	817b      	strh	r3, [r7, #10]
 801ae12:	460b      	mov	r3, r1
 801ae14:	813b      	strh	r3, [r7, #8]
 801ae16:	4613      	mov	r3, r2
 801ae18:	80fb      	strh	r3, [r7, #6]
    (void)output_ch;
    int i_out = 0;
 801ae1a:	2300      	movs	r3, #0
 801ae1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801ae20:	2300      	movs	r3, #0
 801ae22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801ae26:	e165      	b.n	801b0f4 <depthwise_conv_s8_generic+0x2f6>
    {
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
 801ae28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ae2c:	b29b      	uxth	r3, r3
 801ae2e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 801ae32:	fb12 f303 	smulbb	r3, r2, r3
 801ae36:	b29a      	uxth	r2, r3
 801ae38:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 801ae3c:	1ad3      	subs	r3, r2, r3
 801ae3e:	b29b      	uxth	r3, r3
 801ae40:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801ae44:	2300      	movs	r3, #0
 801ae46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801ae4a:	e147      	b.n	801b0dc <depthwise_conv_s8_generic+0x2de>
        {
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
 801ae4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ae50:	b29b      	uxth	r3, r3
 801ae52:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 801ae56:	fb12 f303 	smulbb	r3, r2, r3
 801ae5a:	b29a      	uxth	r2, r3
 801ae5c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 801ae60:	1ad3      	subs	r3, r2, r3
 801ae62:	b29b      	uxth	r3, r3
 801ae64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
            for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 801ae68:	2300      	movs	r3, #0
 801ae6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801ae6e:	e12a      	b.n	801b0c6 <depthwise_conv_s8_generic+0x2c8>
            {
                for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
 801ae70:	2300      	movs	r3, #0
 801ae72:	67fb      	str	r3, [r7, #124]	; 0x7c
 801ae74:	e11c      	b.n	801b0b0 <depthwise_conv_s8_generic+0x2b2>
                {
                    const int idx_out_ch = i_ch_mult + i_input_ch * ch_mult;
 801ae76:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 801ae7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801ae7e:	fb02 f303 	mul.w	r3, r2, r3
 801ae82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801ae84:	4413      	add	r3, r2
 801ae86:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t acc_0;
                    /* Condition for kernel start dimension: (base_idx_<x,y> + ker_<x,y>_start) >= 0 */
                    const int ker_y_start = MAX(0, -base_idx_y);
 801ae88:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	dc03      	bgt.n	801ae98 <depthwise_conv_s8_generic+0x9a>
 801ae90:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801ae94:	425b      	negs	r3, r3
 801ae96:	e000      	b.n	801ae9a <depthwise_conv_s8_generic+0x9c>
 801ae98:	2300      	movs	r3, #0
 801ae9a:	667b      	str	r3, [r7, #100]	; 0x64
                    const int ker_x_start = MAX(0, -base_idx_x);
 801ae9c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	dc03      	bgt.n	801aeac <depthwise_conv_s8_generic+0xae>
 801aea4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801aea8:	425b      	negs	r3, r3
 801aeaa:	e000      	b.n	801aeae <depthwise_conv_s8_generic+0xb0>
 801aeac:	2300      	movs	r3, #0
 801aeae:	663b      	str	r3, [r7, #96]	; 0x60
                    /* Condition for kernel end dimension: (base_idx_<x,y> + ker_<x,y>_end) < input_<x,y> */
                    const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
 801aeb0:	893a      	ldrh	r2, [r7, #8]
 801aeb2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801aeb6:	1ad2      	subs	r2, r2, r3
 801aeb8:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 801aebc:	4293      	cmp	r3, r2
 801aebe:	bfa8      	it	ge
 801aec0:	4613      	movge	r3, r2
 801aec2:	65fb      	str	r3, [r7, #92]	; 0x5c
                    const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
 801aec4:	897a      	ldrh	r2, [r7, #10]
 801aec6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801aeca:	1ad2      	subs	r2, r2, r3
 801aecc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 801aed0:	4293      	cmp	r3, r2
 801aed2:	bfa8      	it	ge
 801aed4:	4613      	movge	r3, r2
 801aed6:	65bb      	str	r3, [r7, #88]	; 0x58
                    acc_0 = bias[idx_out_ch];
 801aed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801aeda:	009b      	lsls	r3, r3, #2
 801aedc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801aee0:	4413      	add	r3, r2
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	67bb      	str	r3, [r7, #120]	; 0x78

                    for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801aee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801aee8:	677b      	str	r3, [r7, #116]	; 0x74
 801aeea:	e048      	b.n	801af7e <depthwise_conv_s8_generic+0x180>
                    {
                        const int32_t idx_y = base_idx_y + i_ker_y;
 801aeec:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801aef0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801aef2:	4413      	add	r3, r2
 801aef4:	657b      	str	r3, [r7, #84]	; 0x54
                        for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 801aef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801aef8:	673b      	str	r3, [r7, #112]	; 0x70
 801aefa:	e039      	b.n	801af70 <depthwise_conv_s8_generic+0x172>
                        {
                            const int32_t idx_x = base_idx_x + i_ker_x;
 801aefc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801af00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801af02:	4413      	add	r3, r2
 801af04:	653b      	str	r3, [r7, #80]	; 0x50
                            int32_t idx_0 = (idx_y * input_x + idx_x) * input_ch + i_input_ch;
 801af06:	897b      	ldrh	r3, [r7, #10]
 801af08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801af0a:	fb02 f203 	mul.w	r2, r2, r3
 801af0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af10:	4413      	add	r3, r2
 801af12:	88fa      	ldrh	r2, [r7, #6]
 801af14:	fb02 f303 	mul.w	r3, r2, r3
 801af18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801af1c:	4413      	add	r3, r2
 801af1e:	64fb      	str	r3, [r7, #76]	; 0x4c
                            int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch_mult) + idx_out_ch;
 801af20:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 801af24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801af26:	fb02 f203 	mul.w	r2, r2, r3
 801af2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801af2c:	4413      	add	r3, r2
 801af2e:	88fa      	ldrh	r2, [r7, #6]
 801af30:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 801af34:	fb01 f202 	mul.w	r2, r1, r2
 801af38:	fb02 f303 	mul.w	r3, r2, r3
 801af3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801af3e:	4413      	add	r3, r2
 801af40:	64bb      	str	r3, [r7, #72]	; 0x48

                            acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
 801af42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801af44:	68fa      	ldr	r2, [r7, #12]
 801af46:	4413      	add	r3, r2
 801af48:	f993 3000 	ldrsb.w	r3, [r3]
 801af4c:	461a      	mov	r2, r3
 801af4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801af52:	4413      	add	r3, r2
 801af54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801af56:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801af5a:	440a      	add	r2, r1
 801af5c:	f992 2000 	ldrsb.w	r2, [r2]
 801af60:	fb02 f303 	mul.w	r3, r2, r3
 801af64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801af66:	4413      	add	r3, r2
 801af68:	67bb      	str	r3, [r7, #120]	; 0x78
                        for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 801af6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801af6c:	3301      	adds	r3, #1
 801af6e:	673b      	str	r3, [r7, #112]	; 0x70
 801af70:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801af72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801af74:	429a      	cmp	r2, r3
 801af76:	dbc1      	blt.n	801aefc <depthwise_conv_s8_generic+0xfe>
                    for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801af78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801af7a:	3301      	adds	r3, #1
 801af7c:	677b      	str	r3, [r7, #116]	; 0x74
 801af7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801af80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801af82:	429a      	cmp	r2, r3
 801af84:	dbb2      	blt.n	801aeec <depthwise_conv_s8_generic+0xee>
                        }
                    }

                    /* Requantize and clamp output to provided range */
                    acc_0 = arm_nn_requantize(acc_0, output_mult[idx_out_ch], output_shift[idx_out_ch]);
 801af86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801af88:	009b      	lsls	r3, r3, #2
 801af8a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801af8e:	4413      	add	r3, r2
 801af90:	681a      	ldr	r2, [r3, #0]
 801af92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801af94:	009b      	lsls	r3, r3, #2
 801af96:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801af9a:	440b      	add	r3, r1
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801afa0:	6479      	str	r1, [r7, #68]	; 0x44
 801afa2:	643a      	str	r2, [r7, #64]	; 0x40
 801afa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801afa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801afa8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801afac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801afae:	fa02 f303 	lsl.w	r3, r2, r3
 801afb2:	63bb      	str	r3, [r7, #56]	; 0x38
 801afb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801afb6:	637b      	str	r3, [r7, #52]	; 0x34
    q31_t result = 0;
 801afb8:	2300      	movs	r3, #0
 801afba:	633b      	str	r3, [r7, #48]	; 0x30
    mult.word.low = 1 << 30;
 801afbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801afc0:	613b      	str	r3, [r7, #16]
    mult.word.high = 0;
 801afc2:	2300      	movs	r3, #0
 801afc4:	617b      	str	r3, [r7, #20]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801afc6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801afca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afcc:	4618      	mov	r0, r3
 801afce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801afd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801afd4:	461a      	mov	r2, r3
 801afd6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801afda:	fb02 fc01 	mul.w	ip, r2, r1
 801afde:	fb00 f603 	mul.w	r6, r0, r3
 801afe2:	4466      	add	r6, ip
 801afe4:	fba0 2302 	umull	r2, r3, r0, r2
 801afe8:	18f1      	adds	r1, r6, r3
 801afea:	460b      	mov	r3, r1
 801afec:	eb14 0802 	adds.w	r8, r4, r2
 801aff0:	eb45 0903 	adc.w	r9, r5, r3
 801aff4:	e9c7 8904 	strd	r8, r9, [r7, #16]
    result = (int32_t)(mult.long_long >> 31);
 801aff8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801affc:	f04f 0200 	mov.w	r2, #0
 801b000:	f04f 0300 	mov.w	r3, #0
 801b004:	0fc2      	lsrs	r2, r0, #31
 801b006:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801b00a:	17cb      	asrs	r3, r1, #31
 801b00c:	4613      	mov	r3, r2
 801b00e:	633b      	str	r3, [r7, #48]	; 0x30
    return result;
 801b010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b014:	2b00      	cmp	r3, #0
 801b016:	dc02      	bgt.n	801b01e <depthwise_conv_s8_generic+0x220>
 801b018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b01a:	425b      	negs	r3, r3
 801b01c:	e000      	b.n	801b020 <depthwise_conv_s8_generic+0x222>
 801b01e:	2300      	movs	r3, #0
 801b020:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b022:	62bb      	str	r3, [r7, #40]	; 0x28
    q31_t result = 0;
 801b024:	2300      	movs	r3, #0
 801b026:	627b      	str	r3, [r7, #36]	; 0x24
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b028:	2201      	movs	r2, #1
 801b02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b02c:	fa02 f303 	lsl.w	r3, r2, r3
 801b030:	3b01      	subs	r3, #1
 801b032:	623b      	str	r3, [r7, #32]
    int32_t remainder = remainder_mask & dividend;
 801b034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b036:	6a3b      	ldr	r3, [r7, #32]
 801b038:	4013      	ands	r3, r2
 801b03a:	61fb      	str	r3, [r7, #28]
    result = dividend >> exponent;
 801b03c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b040:	fa42 f303 	asr.w	r3, r2, r3
 801b044:	627b      	str	r3, [r7, #36]	; 0x24
    q31_t threshold = remainder_mask >> 1;
 801b046:	6a3b      	ldr	r3, [r7, #32]
 801b048:	105b      	asrs	r3, r3, #1
 801b04a:	61bb      	str	r3, [r7, #24]
    if (result < 0)
 801b04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b04e:	2b00      	cmp	r3, #0
 801b050:	da02      	bge.n	801b058 <depthwise_conv_s8_generic+0x25a>
        threshold++;
 801b052:	69bb      	ldr	r3, [r7, #24]
 801b054:	3301      	adds	r3, #1
 801b056:	61bb      	str	r3, [r7, #24]
    if (remainder > threshold)
 801b058:	69fa      	ldr	r2, [r7, #28]
 801b05a:	69bb      	ldr	r3, [r7, #24]
 801b05c:	429a      	cmp	r2, r3
 801b05e:	dd02      	ble.n	801b066 <depthwise_conv_s8_generic+0x268>
        result++;
 801b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b062:	3301      	adds	r3, #1
 801b064:	627b      	str	r3, [r7, #36]	; 0x24
    return result;
 801b066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b068:	bf00      	nop
 801b06a:	67bb      	str	r3, [r7, #120]	; 0x78
                    acc_0 += output_offset;
 801b06c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b072:	4413      	add	r3, r2
 801b074:	67bb      	str	r3, [r7, #120]	; 0x78
                    acc_0 = MAX(acc_0, output_activation_min);
 801b076:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b078:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801b07c:	4293      	cmp	r3, r2
 801b07e:	bfb8      	it	lt
 801b080:	4613      	movlt	r3, r2
 801b082:	67bb      	str	r3, [r7, #120]	; 0x78
                    acc_0 = MIN(acc_0, output_activation_max);
 801b084:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b086:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801b08a:	4293      	cmp	r3, r2
 801b08c:	bfa8      	it	ge
 801b08e:	4613      	movge	r3, r2
 801b090:	67bb      	str	r3, [r7, #120]	; 0x78

                    output[i_out++] = acc_0;
 801b092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b096:	1c5a      	adds	r2, r3, #1
 801b098:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801b09c:	461a      	mov	r2, r3
 801b09e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801b0a2:	4413      	add	r3, r2
 801b0a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b0a6:	b252      	sxtb	r2, r2
 801b0a8:	701a      	strb	r2, [r3, #0]
                for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
 801b0aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b0ac:	3301      	adds	r3, #1
 801b0ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 801b0b0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 801b0b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801b0b6:	429a      	cmp	r2, r3
 801b0b8:	f6ff aedd 	blt.w	801ae76 <depthwise_conv_s8_generic+0x78>
            for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 801b0bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b0c0:	3301      	adds	r3, #1
 801b0c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801b0c6:	88fb      	ldrh	r3, [r7, #6]
 801b0c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b0cc:	429a      	cmp	r2, r3
 801b0ce:	f6ff aecf 	blt.w	801ae70 <depthwise_conv_s8_generic+0x72>
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801b0d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b0d6:	3301      	adds	r3, #1
 801b0d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801b0dc:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 801b0e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801b0e4:	429a      	cmp	r2, r3
 801b0e6:	f6ff aeb1 	blt.w	801ae4c <depthwise_conv_s8_generic+0x4e>
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801b0ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b0ee:	3301      	adds	r3, #1
 801b0f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801b0f4:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 801b0f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801b0fc:	429a      	cmp	r2, r3
 801b0fe:	f6ff ae93 	blt.w	801ae28 <depthwise_conv_s8_generic+0x2a>
                }
            }
        }
    }
}
 801b102:	bf00      	nop
 801b104:	bf00      	nop
 801b106:	3790      	adds	r7, #144	; 0x90
 801b108:	46bd      	mov	sp, r7
 801b10a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801b10e:	4770      	bx	lr

0801b110 <arm_depthwise_conv_s8>:
                                 const q7_t *kernel,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output)
{
 801b110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b114:	b0a4      	sub	sp, #144	; 0x90
 801b116:	af14      	add	r7, sp, #80	; 0x50
 801b118:	63f8      	str	r0, [r7, #60]	; 0x3c
 801b11a:	63b9      	str	r1, [r7, #56]	; 0x38
 801b11c:	637a      	str	r2, [r7, #52]	; 0x34
 801b11e:	633b      	str	r3, [r7, #48]	; 0x30
    (void)dw_conv_params->dilation;
    (void)bias_dims;
    (void)ctx;

    if (dw_conv_params->ch_mult % 4 == 0)
 801b120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b122:	689b      	ldr	r3, [r3, #8]
 801b124:	f003 0303 	and.w	r3, r3, #3
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d157      	bne.n	801b1dc <arm_depthwise_conv_s8+0xcc>
    {
        depthwise_conv_s8_mult_4(input,
 801b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b12e:	689b      	ldr	r3, [r3, #8]
 801b130:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b134:	685a      	ldr	r2, [r3, #4]
 801b136:	62ba      	str	r2, [r7, #40]	; 0x28
 801b138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b13a:	68d8      	ldr	r0, [r3, #12]
 801b13c:	6278      	str	r0, [r7, #36]	; 0x24
 801b13e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b140:	68de      	ldr	r6, [r3, #12]
 801b142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b144:	689c      	ldr	r4, [r3, #8]
 801b146:	623c      	str	r4, [r7, #32]
 801b148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b14a:	689d      	ldr	r5, [r3, #8]
 801b14c:	61fd      	str	r5, [r7, #28]
 801b14e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b150:	6859      	ldr	r1, [r3, #4]
 801b152:	61b9      	str	r1, [r7, #24]
 801b154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b156:	6958      	ldr	r0, [r3, #20]
 801b158:	6178      	str	r0, [r7, #20]
 801b15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b15c:	699b      	ldr	r3, [r3, #24]
 801b15e:	613b      	str	r3, [r7, #16]
 801b160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b162:	68da      	ldr	r2, [r3, #12]
 801b164:	60fa      	str	r2, [r7, #12]
 801b166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b168:	691c      	ldr	r4, [r3, #16]
 801b16a:	60bc      	str	r4, [r7, #8]
                                 dw_conv_params->padding.h,
                                 dw_conv_params->stride.w,
                                 dw_conv_params->stride.h,
                                 bias,
                                 output,
                                 quant_params->shift,
 801b16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b16e:	685d      	ldr	r5, [r3, #4]
 801b170:	607d      	str	r5, [r7, #4]
                                 quant_params->multiplier,
 801b172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b174:	6819      	ldr	r1, [r3, #0]
 801b176:	6039      	str	r1, [r7, #0]
        depthwise_conv_s8_mult_4(input,
 801b178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b17a:	689d      	ldr	r5, [r3, #8]
 801b17c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b17e:	685c      	ldr	r4, [r3, #4]
 801b180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b182:	6858      	ldr	r0, [r3, #4]
 801b184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b186:	6819      	ldr	r1, [r3, #0]
 801b188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b18a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b18e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b190:	9312      	str	r3, [sp, #72]	; 0x48
 801b192:	9211      	str	r2, [sp, #68]	; 0x44
 801b194:	9110      	str	r1, [sp, #64]	; 0x40
 801b196:	900f      	str	r0, [sp, #60]	; 0x3c
 801b198:	940e      	str	r4, [sp, #56]	; 0x38
 801b19a:	950d      	str	r5, [sp, #52]	; 0x34
 801b19c:	6839      	ldr	r1, [r7, #0]
 801b19e:	910c      	str	r1, [sp, #48]	; 0x30
 801b1a0:	687d      	ldr	r5, [r7, #4]
 801b1a2:	950b      	str	r5, [sp, #44]	; 0x2c
 801b1a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b1a6:	930a      	str	r3, [sp, #40]	; 0x28
 801b1a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b1aa:	9309      	str	r3, [sp, #36]	; 0x24
 801b1ac:	68bc      	ldr	r4, [r7, #8]
 801b1ae:	9408      	str	r4, [sp, #32]
 801b1b0:	68fa      	ldr	r2, [r7, #12]
 801b1b2:	9207      	str	r2, [sp, #28]
 801b1b4:	693b      	ldr	r3, [r7, #16]
 801b1b6:	9306      	str	r3, [sp, #24]
 801b1b8:	6978      	ldr	r0, [r7, #20]
 801b1ba:	9005      	str	r0, [sp, #20]
 801b1bc:	69b9      	ldr	r1, [r7, #24]
 801b1be:	9104      	str	r1, [sp, #16]
 801b1c0:	69fd      	ldr	r5, [r7, #28]
 801b1c2:	9503      	str	r5, [sp, #12]
 801b1c4:	6a3c      	ldr	r4, [r7, #32]
 801b1c6:	9402      	str	r4, [sp, #8]
 801b1c8:	9601      	str	r6, [sp, #4]
 801b1ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b1cc:	9300      	str	r3, [sp, #0]
 801b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b1d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b1d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801b1d6:	f7ff f933 	bl	801a440 <depthwise_conv_s8_mult_4>
 801b1da:	e063      	b.n	801b2a4 <arm_depthwise_conv_s8+0x194>
                                 dw_conv_params->activation.max);
    }
    else
    {
        depthwise_conv_s8_generic(input,
                                  input_dims->w,
 801b1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1de:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801b1e0:	fa1f fc83 	uxth.w	ip, r3
                                  input_dims->h,
 801b1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1e6:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801b1e8:	fa1f fe83 	uxth.w	lr, r3
                                  input_dims->c,
 801b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1ee:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801b1f0:	fa1f f883 	uxth.w	r8, r3
                                  kernel,
                                  output_dims->c,
 801b1f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b1f6:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801b1f8:	b29e      	uxth	r6, r3
                                  dw_conv_params->ch_mult,
 801b1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b1fc:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801b1fe:	b29b      	uxth	r3, r3
 801b200:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  filter_dims->w,
 801b202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b204:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801b206:	b29a      	uxth	r2, r3
 801b208:	62ba      	str	r2, [r7, #40]	; 0x28
                                  filter_dims->h,
 801b20a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b20c:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801b20e:	b299      	uxth	r1, r3
 801b210:	6279      	str	r1, [r7, #36]	; 0x24
                                  dw_conv_params->padding.w,
 801b212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b214:	695b      	ldr	r3, [r3, #20]
        depthwise_conv_s8_generic(input,
 801b216:	b298      	uxth	r0, r3
 801b218:	6238      	str	r0, [r7, #32]
                                  dw_conv_params->padding.h,
 801b21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b21c:	699b      	ldr	r3, [r3, #24]
        depthwise_conv_s8_generic(input,
 801b21e:	b29c      	uxth	r4, r3
 801b220:	61fc      	str	r4, [r7, #28]
                                  dw_conv_params->stride.w,
 801b222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b224:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801b226:	b29d      	uxth	r5, r3
 801b228:	61bd      	str	r5, [r7, #24]
                                  dw_conv_params->stride.h,
 801b22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b22c:	691b      	ldr	r3, [r3, #16]
        depthwise_conv_s8_generic(input,
 801b22e:	b29b      	uxth	r3, r3
 801b230:	617b      	str	r3, [r7, #20]
                                  bias,
                                  output,
                                  quant_params->shift,
 801b232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b234:	685a      	ldr	r2, [r3, #4]
 801b236:	613a      	str	r2, [r7, #16]
                                  quant_params->multiplier,
 801b238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b23a:	6819      	ldr	r1, [r3, #0]
 801b23c:	60f9      	str	r1, [r7, #12]
                                  output_dims->w,
 801b23e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b240:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801b242:	b29d      	uxth	r5, r3
                                  output_dims->h,
 801b244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b246:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801b248:	b29c      	uxth	r4, r3
 801b24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b24c:	6858      	ldr	r0, [r3, #4]
 801b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b250:	6819      	ldr	r1, [r3, #0]
 801b252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b25a:	9312      	str	r3, [sp, #72]	; 0x48
 801b25c:	9211      	str	r2, [sp, #68]	; 0x44
 801b25e:	9110      	str	r1, [sp, #64]	; 0x40
 801b260:	900f      	str	r0, [sp, #60]	; 0x3c
 801b262:	940e      	str	r4, [sp, #56]	; 0x38
 801b264:	950d      	str	r5, [sp, #52]	; 0x34
 801b266:	68f9      	ldr	r1, [r7, #12]
 801b268:	910c      	str	r1, [sp, #48]	; 0x30
 801b26a:	693a      	ldr	r2, [r7, #16]
 801b26c:	920b      	str	r2, [sp, #44]	; 0x2c
 801b26e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b270:	930a      	str	r3, [sp, #40]	; 0x28
 801b272:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b274:	9309      	str	r3, [sp, #36]	; 0x24
 801b276:	697b      	ldr	r3, [r7, #20]
 801b278:	9308      	str	r3, [sp, #32]
 801b27a:	69bd      	ldr	r5, [r7, #24]
 801b27c:	9507      	str	r5, [sp, #28]
 801b27e:	69fc      	ldr	r4, [r7, #28]
 801b280:	9406      	str	r4, [sp, #24]
 801b282:	6a38      	ldr	r0, [r7, #32]
 801b284:	9005      	str	r0, [sp, #20]
 801b286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b288:	9104      	str	r1, [sp, #16]
 801b28a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b28c:	9203      	str	r2, [sp, #12]
 801b28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b290:	9302      	str	r3, [sp, #8]
 801b292:	9601      	str	r6, [sp, #4]
 801b294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b296:	9300      	str	r3, [sp, #0]
 801b298:	4643      	mov	r3, r8
 801b29a:	4672      	mov	r2, lr
 801b29c:	4661      	mov	r1, ip
 801b29e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801b2a0:	f7ff fdad 	bl	801adfe <depthwise_conv_s8_generic>
                                  dw_conv_params->activation.min,
                                  dw_conv_params->activation.max);
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801b2a4:	2300      	movs	r3, #0
}
 801b2a6:	4618      	mov	r0, r3
 801b2a8:	3740      	adds	r7, #64	; 0x40
 801b2aa:	46bd      	mov	sp, r7
 801b2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b2b0 <arm_depthwise_conv_s8_opt>:
                                     const q7_t *kernel,
                                     const cmsis_nn_dims *bias_dims,
                                     const int32_t *bias,
                                     const cmsis_nn_dims *output_dims,
                                     q7_t *output)
{
 801b2b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b2b4:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 801b2be:	6020      	str	r0, [r4, #0]
 801b2c0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801b2c4:	6001      	str	r1, [r0, #0]
 801b2c6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801b2ca:	600a      	str	r2, [r1, #0]
 801b2cc:	f107 0220 	add.w	r2, r7, #32
 801b2d0:	6013      	str	r3, [r2, #0]

    const int32_t input_ch = input_dims->c;
 801b2d2:	f107 0320 	add.w	r3, r7, #32
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	68db      	ldr	r3, [r3, #12]
 801b2da:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
    const int32_t output_ch = output_dims->c;
 801b2de:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801b2e2:	68db      	ldr	r3, [r3, #12]
 801b2e4:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
 801b2e8:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b2ec:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801b2f0:	429a      	cmp	r2, r3
 801b2f2:	d003      	beq.n	801b2fc <arm_depthwise_conv_s8_opt+0x4c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 801b2f4:	f06f 0302 	mvn.w	r3, #2
 801b2f8:	f001 b99b 	b.w	801c632 <arm_depthwise_conv_s8_opt+0x1382>
    }
#ifdef ARM_MATH_DSP
    const int32_t input_x = input_dims->w;
 801b2fc:	f107 0320 	add.w	r3, r7, #32
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	689b      	ldr	r3, [r3, #8]
 801b304:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
    const int32_t input_y = input_dims->h;
 801b308:	f107 0320 	add.w	r3, r7, #32
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	685b      	ldr	r3, [r3, #4]
 801b310:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
    const int32_t kernel_x = filter_dims->w;
 801b314:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 801b318:	689b      	ldr	r3, [r3, #8]
 801b31a:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
    const int32_t kernel_y = filter_dims->h;
 801b31e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 801b322:	685b      	ldr	r3, [r3, #4]
 801b324:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
    const int32_t pad_x = dw_conv_params->padding.w;
 801b328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	695b      	ldr	r3, [r3, #20]
 801b330:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
    const int32_t pad_y = dw_conv_params->padding.h;
 801b334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	699b      	ldr	r3, [r3, #24]
 801b33c:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
    const int32_t stride_x = dw_conv_params->stride.w;
 801b340:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	68db      	ldr	r3, [r3, #12]
 801b348:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
    const int32_t stride_y = dw_conv_params->stride.h;
 801b34c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b350:	681b      	ldr	r3, [r3, #0]
 801b352:	691b      	ldr	r3, [r3, #16]
 801b354:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
    const int32_t *output_shift = quant_params->shift;
 801b358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	685b      	ldr	r3, [r3, #4]
 801b360:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
    const int32_t *output_mult = quant_params->multiplier;
 801b364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
    const int32_t output_x = output_dims->w;
 801b370:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801b374:	689b      	ldr	r3, [r3, #8]
 801b376:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
    const int32_t output_y = output_dims->h;
 801b37a:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801b37e:	685b      	ldr	r3, [r3, #4]
 801b380:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
    const int32_t output_offset = dw_conv_params->output_offset;
 801b384:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b388:	681b      	ldr	r3, [r3, #0]
 801b38a:	685b      	ldr	r3, [r3, #4]
 801b38c:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
    const int32_t input_offset = dw_conv_params->input_offset;
 801b390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
    const int32_t output_activation_min = dw_conv_params->activation.min;
 801b39c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b3a0:	681b      	ldr	r3, [r3, #0]
 801b3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3a4:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
    const int32_t output_activation_max = dw_conv_params->activation.max;
 801b3a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b3b0:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
    q15_t *buffer_a = (q15_t *)ctx->buf;
 801b3b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b3b8:	681b      	ldr	r3, [r3, #0]
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    }

#else // ARM_MATH_DSP
    (void)bias_dims;
    /* Run the following code in cores using DSP extension */
    q15_t *const col_buffer_start = buffer_a;
 801b3c0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801b3c4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    q15_t *col_buffer = col_buffer_start;
 801b3c8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b3cc:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
    const int32_t *const bias_start_pos = bias;
 801b3d0:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801b3d4:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    const q31_t *const out_mult_start_pos = output_mult;
 801b3d8:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801b3dc:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    const q31_t *const out_shift_start_pos = output_shift;
 801b3e0:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801b3e4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    uint16_t row_count;
    uint16_t row_shift;

    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801b3e8:	2300      	movs	r3, #0
 801b3ea:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801b3ee:	f001 b918 	b.w	801c622 <arm_depthwise_conv_s8_opt+0x1372>
    {
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
 801b3f2:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801b3f6:	b29a      	uxth	r2, r3
 801b3f8:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 801b3fc:	b29b      	uxth	r3, r3
 801b3fe:	fb12 f303 	smulbb	r3, r2, r3
 801b402:	b29a      	uxth	r2, r3
 801b404:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 801b408:	b29b      	uxth	r3, r3
 801b40a:	1ad3      	subs	r3, r2, r3
 801b40c:	b29b      	uxth	r3, r3
 801b40e:	f8a7 328a 	strh.w	r3, [r7, #650]	; 0x28a
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801b412:	2300      	movs	r3, #0
 801b414:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 801b418:	f001 b8f7 	b.w	801c60a <arm_depthwise_conv_s8_opt+0x135a>
        {
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
 801b41c:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 801b420:	b29a      	uxth	r2, r3
 801b422:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 801b426:	b29b      	uxth	r3, r3
 801b428:	fb12 f303 	smulbb	r3, r2, r3
 801b42c:	b29a      	uxth	r2, r3
 801b42e:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 801b432:	b29b      	uxth	r3, r3
 801b434:	1ad3      	subs	r3, r2, r3
 801b436:	b29b      	uxth	r3, r3
 801b438:	f8a7 3288 	strh.w	r3, [r7, #648]	; 0x288

            /* Out of bounds is only considered for the y axis as it provides a contiguous zero'ing opportunity than
               along the x axis */
            const int ker_y_start = MAX(0, -base_idx_y);
 801b43c:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 801b440:	2b00      	cmp	r3, #0
 801b442:	dc03      	bgt.n	801b44c <arm_depthwise_conv_s8_opt+0x19c>
 801b444:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 801b448:	425b      	negs	r3, r3
 801b44a:	e000      	b.n	801b44e <arm_depthwise_conv_s8_opt+0x19e>
 801b44c:	2300      	movs	r3, #0
 801b44e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
            /* Condition for kernel end dimension: (base_idx_y + ker_y_end) < input_y */
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
 801b452:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 801b456:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 801b45a:	1ad3      	subs	r3, r2, r3
 801b45c:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801b460:	4293      	cmp	r3, r2
 801b462:	bfa8      	it	ge
 801b464:	4613      	movge	r3, r2
 801b466:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280

            int32_t index = 0;
 801b46a:	2300      	movs	r3, #0
 801b46c:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
            if (ker_y_start != 0)
 801b470:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801b474:	2b00      	cmp	r3, #0
 801b476:	d023      	beq.n	801b4c0 <arm_depthwise_conv_s8_opt+0x210>
            {
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
 801b478:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801b47c:	005b      	lsls	r3, r3, #1
 801b47e:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801b482:	18d0      	adds	r0, r2, r3
 801b484:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b488:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b48c:	fb02 f303 	mul.w	r3, r2, r3
 801b490:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 801b494:	fb02 f303 	mul.w	r3, r2, r3
 801b498:	005b      	lsls	r3, r3, #1
 801b49a:	461a      	mov	r2, r3
 801b49c:	2100      	movs	r1, #0
 801b49e:	f009 ff89 	bl	80253b4 <memset>
                index += (kernel_x * input_ch) * ker_y_start;
 801b4a2:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b4a6:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b4aa:	fb02 f303 	mul.w	r3, r2, r3
 801b4ae:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 801b4b2:	fb02 f303 	mul.w	r3, r2, r3
 801b4b6:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 801b4ba:	4413      	add	r3, r2
 801b4bc:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
            }

            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801b4c0:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801b4c4:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 801b4c8:	e064      	b.n	801b594 <arm_depthwise_conv_s8_opt+0x2e4>
            {
                const int32_t idx_y = base_idx_y + i_ker_y;
 801b4ca:	f9b7 228a 	ldrsh.w	r2, [r7, #650]	; 0x28a
 801b4ce:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801b4d2:	f8d7 1308 	ldr.w	r1, [r7, #776]	; 0x308
 801b4d6:	440a      	add	r2, r1
 801b4d8:	601a      	str	r2, [r3, #0]

                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 801b4da:	2300      	movs	r3, #0
 801b4dc:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801b4e0:	e04d      	b.n	801b57e <arm_depthwise_conv_s8_opt+0x2ce>
                {
                    const int32_t idx_x = base_idx_x + i_ker_x;
 801b4e2:	f9b7 2288 	ldrsh.w	r2, [r7, #648]	; 0x288
 801b4e6:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801b4ea:	f8d7 1304 	ldr.w	r1, [r7, #772]	; 0x304
 801b4ee:	440a      	add	r2, r1
 801b4f0:	601a      	str	r2, [r3, #0]
                    if (idx_x < 0 || idx_x >= input_x)
 801b4f2:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	db06      	blt.n	801b50a <arm_depthwise_conv_s8_opt+0x25a>
 801b4fc:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801b500:	681a      	ldr	r2, [r3, #0]
 801b502:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 801b506:	429a      	cmp	r2, r3
 801b508:	db0d      	blt.n	801b526 <arm_depthwise_conv_s8_opt+0x276>
                    {
                        memset(&col_buffer[index], 0, input_ch * sizeof(q15_t));
 801b50a:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801b50e:	005b      	lsls	r3, r3, #1
 801b510:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801b514:	18d0      	adds	r0, r2, r3
 801b516:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b51a:	005b      	lsls	r3, r3, #1
 801b51c:	461a      	mov	r2, r3
 801b51e:	2100      	movs	r1, #0
 801b520:	f009 ff48 	bl	80253b4 <memset>
 801b524:	e01f      	b.n	801b566 <arm_depthwise_conv_s8_opt+0x2b6>
                    }
                    else
                    {
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
 801b526:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 801b530:	fb02 f203 	mul.w	r2, r2, r3
 801b534:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	4413      	add	r3, r2
 801b53c:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b540:	fb02 f303 	mul.w	r3, r2, r3
 801b544:	461a      	mov	r2, r3
 801b546:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 801b54a:	1898      	adds	r0, r3, r2
                                                  &col_buffer[index],
 801b54c:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801b550:	005b      	lsls	r3, r3, #1
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
 801b552:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801b556:	18d1      	adds	r1, r2, r3
 801b558:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b55c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801b560:	b21b      	sxth	r3, r3
 801b562:	f005 ff22 	bl	80213aa <arm_q7_to_q15_with_offset>
                                                  input_ch,
                                                  input_offset);
                    }
                    index += input_ch;
 801b566:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 801b56a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b56e:	4413      	add	r3, r2
 801b570:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 801b574:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 801b578:	3301      	adds	r3, #1
 801b57a:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801b57e:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 801b582:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b586:	429a      	cmp	r2, r3
 801b588:	dbab      	blt.n	801b4e2 <arm_depthwise_conv_s8_opt+0x232>
            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801b58a:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 801b58e:	3301      	adds	r3, #1
 801b590:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 801b594:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 801b598:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801b59c:	429a      	cmp	r2, r3
 801b59e:	db94      	blt.n	801b4ca <arm_depthwise_conv_s8_opt+0x21a>
                }
            }

            const int diff = kernel_y - ker_y_end;
 801b5a0:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801b5a4:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801b5a8:	1ad3      	subs	r3, r2, r3
 801b5aa:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
            if (diff != 0)
 801b5ae:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d014      	beq.n	801b5e0 <arm_depthwise_conv_s8_opt+0x330>
            {
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * diff * sizeof(q15_t));
 801b5b6:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801b5ba:	005b      	lsls	r3, r3, #1
 801b5bc:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801b5c0:	18d0      	adds	r0, r2, r3
 801b5c2:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b5c6:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b5ca:	fb02 f303 	mul.w	r3, r2, r3
 801b5ce:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 801b5d2:	fb02 f303 	mul.w	r3, r2, r3
 801b5d6:	005b      	lsls	r3, r3, #1
 801b5d8:	461a      	mov	r2, r3
 801b5da:	2100      	movs	r1, #0
 801b5dc:	f009 feea 	bl	80253b4 <memset>
            }

            row_count = output_ch / 4;
 801b5e0:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	da00      	bge.n	801b5ea <arm_depthwise_conv_s8_opt+0x33a>
 801b5e8:	3303      	adds	r3, #3
 801b5ea:	109b      	asrs	r3, r3, #2
 801b5ec:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            row_shift = 0;
 801b5f0:	2300      	movs	r3, #0
 801b5f2:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318
            bias = bias_start_pos;
 801b5f6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 801b5fa:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
            output_mult = out_mult_start_pos;
 801b5fe:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801b602:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
            output_shift = out_shift_start_pos;
 801b606:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b60a:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

            while (row_count)
 801b60e:	f000 bea2 	b.w	801c356 <arm_depthwise_conv_s8_opt+0x10a6>
            {
                q31_t sum = *bias++;
 801b612:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801b616:	1d1a      	adds	r2, r3, #4
 801b618:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                q31_t sum_2 = *bias++;
 801b622:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801b626:	1d1a      	adds	r2, r3, #4
 801b628:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                q31_t sum_3 = *bias++;
 801b632:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801b636:	1d1a      	adds	r2, r3, #4
 801b638:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                q31_t sum_4 = *bias++;
 801b642:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801b646:	1d1a      	adds	r2, r3, #4
 801b648:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                uint16_t col_count = (kernel_x * kernel_y) / 2;
 801b652:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b656:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801b65a:	fb02 f303 	mul.w	r3, r2, r3
 801b65e:	0fda      	lsrs	r2, r3, #31
 801b660:	4413      	add	r3, r2
 801b662:	105b      	asrs	r3, r3, #1
 801b664:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                q15_t *col_pos = col_buffer_start + row_shift;
 801b668:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801b66c:	005b      	lsls	r3, r3, #1
 801b66e:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801b672:	4413      	add	r3, r2
 801b674:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
                const q7_t *row_pos = kernel + row_shift;
 801b678:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801b67c:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 801b680:	4413      	add	r3, r2
 801b682:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                row_shift += 4;
 801b686:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801b68a:	3304      	adds	r3, #4
 801b68c:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318

                while (col_count)
 801b690:	e25b      	b.n	801bb4a <arm_depthwise_conv_s8_opt+0x89a>
 801b692:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801b696:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801b69a:	601a      	str	r2, [r3, #0]
 801b69c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b6a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b6aa:	601a      	str	r2, [r3, #0]
    return (val);
 801b6ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b6b0:	681b      	ldr	r3, [r3, #0]
                    /* General idea is to read 4 + 4 (input, kernel) pair and re-arrange them in the right order to
                    use in a SMLAD instruction . One run of this loop produces 4 partial outputs with 8 MACs. */
                    /* Note: variable names can be improved here to align with rows and columns. */
                    q31_t ip_a1, ip_a2, ip_b1, ip_b2, op_a, op_b, op_c;
                    /* Read 4 weights */
                    ip_b1 = arm_nn_read_q7x4(row_pos);
 801b6b2:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
                    ip_a1 = arm_nn_read_q7x4(row_pos + input_ch);
 801b6b6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b6ba:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801b6be:	441a      	add	r2, r3
 801b6c0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801b6c4:	601a      	str	r2, [r3, #0]
 801b6c6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b6d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b6d4:	601a      	str	r2, [r3, #0]
    return (val);
 801b6d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b6da:	681b      	ldr	r3, [r3, #0]
 801b6dc:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 801b6e0:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801b6e4:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801b6e8:	601a      	str	r2, [r3, #0]
 801b6ea:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801b6f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b6f8:	601a      	str	r2, [r3, #0]
    return (val);
 801b6fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b6fe:	681b      	ldr	r3, [r3, #0]
                    op_a = arm_nn_read_q15x2(col_pos);
 801b700:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = arm_nn_read_q15x2(col_pos + input_ch);
 801b704:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b708:	005b      	lsls	r3, r3, #1
 801b70a:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801b70e:	441a      	add	r2, r3
 801b710:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801b714:	601a      	str	r2, [r3, #0]
 801b716:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801b720:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b724:	601a      	str	r2, [r3, #0]
    return (val);
 801b726:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

                    ip_a2 = __SXTB16(ip_b1);
 801b730:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 801b734:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801b738:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b73a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	fa2f f283 	sxtb16	r2, r3
 801b744:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801b748:	601a      	str	r2, [r3, #0]
  return(result);
 801b74a:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
                    ip_b1 = __SXTB16(__ROR(ip_b1, 8));
 801b754:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 801b758:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801b75c:	601a      	str	r2, [r3, #0]
 801b75e:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801b762:	2208      	movs	r2, #8
 801b764:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801b766:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801b76a:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 801b76e:	6812      	ldr	r2, [r2, #0]
 801b770:	f002 021f 	and.w	r2, r2, #31
 801b774:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801b776:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d103      	bne.n	801b788 <arm_depthwise_conv_s8_opt+0x4d8>
    return op1;
 801b780:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	e007      	b.n	801b798 <arm_depthwise_conv_s8_opt+0x4e8>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b788:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801b78c:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801b790:	6812      	ldr	r2, [r2, #0]
 801b792:	681b      	ldr	r3, [r3, #0]
 801b794:	fa62 f303 	ror.w	r3, r2, r3
 801b798:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 801b79c:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b79e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	fa2f f283 	sxtb16	r2, r3
 801b7a8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801b7ac:	601a      	str	r2, [r3, #0]
  return(result);
 801b7ae:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801b7b2:	681b      	ldr	r3, [r3, #0]
 801b7b4:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c

                    ip_b2 = __SXTB16(ip_a1);
 801b7b8:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801b7bc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801b7c0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b7c2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801b7c6:	681b      	ldr	r3, [r3, #0]
 801b7c8:	fa2f f283 	sxtb16	r2, r3
 801b7cc:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801b7d0:	601a      	str	r2, [r3, #0]
  return(result);
 801b7d2:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
                    ip_a1 = __SXTB16(__ROR(ip_a1, 8));
 801b7dc:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801b7e0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801b7e4:	601a      	str	r2, [r3, #0]
 801b7e6:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801b7ea:	2208      	movs	r2, #8
 801b7ec:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801b7ee:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801b7f2:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801b7f6:	6812      	ldr	r2, [r2, #0]
 801b7f8:	f002 021f 	and.w	r2, r2, #31
 801b7fc:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801b7fe:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801b802:	681b      	ldr	r3, [r3, #0]
 801b804:	2b00      	cmp	r3, #0
 801b806:	d103      	bne.n	801b810 <arm_depthwise_conv_s8_opt+0x560>
    return op1;
 801b808:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801b80c:	681b      	ldr	r3, [r3, #0]
 801b80e:	e007      	b.n	801b820 <arm_depthwise_conv_s8_opt+0x570>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b810:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 801b814:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801b818:	6812      	ldr	r2, [r2, #0]
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	fa62 f303 	ror.w	r3, r2, r3
 801b820:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 801b824:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b826:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	fa2f f283 	sxtb16	r2, r3
 801b830:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801b834:	601a      	str	r2, [r3, #0]
  return(result);
 801b836:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801b83a:	681b      	ldr	r3, [r3, #0]
 801b83c:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268

                    op_c = __PKHBT(op_b, op_a, 16);
 801b840:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801b844:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 801b848:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801b84c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 801b850:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801b854:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801b858:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801b85c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 801b860:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b864:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
                    op_a = __PKHTB(op_b, op_a, 16);
 801b868:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801b86c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 801b870:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801b874:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 801b878:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801b87c:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801b880:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 801b884:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 801b888:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801b88c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = __PKHBT(ip_b2, ip_a2, 16);
 801b890:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801b894:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 801b898:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801b89c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 801b8a0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b8a4:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801b8a8:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801b8ac:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 801b8b0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b8b4:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum = __SMLAD(op_c, op_b, sum);
 801b8b8:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 801b8bc:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801b8c0:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801b8c4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801b8c8:	6018      	str	r0, [r3, #0]
 801b8ca:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801b8ce:	6019      	str	r1, [r3, #0]
 801b8d0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801b8d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b8d6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801b8da:	681b      	ldr	r3, [r3, #0]
 801b8dc:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 801b8e0:	6812      	ldr	r2, [r2, #0]
 801b8e2:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 801b8e6:	6809      	ldr	r1, [r1, #0]
 801b8e8:	fb23 1202 	smlad	r2, r3, r2, r1
 801b8ec:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801b8f0:	601a      	str	r2, [r3, #0]
  return(result);
 801b8f2:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300

                    op_b = __PKHBT(ip_b1, ip_a1, 16);
 801b8fc:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801b900:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 801b904:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801b908:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801b90c:	601a      	str	r2, [r3, #0]
 801b90e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801b912:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801b916:	6812      	ldr	r2, [r2, #0]
 801b918:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 801b91c:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801b920:	601a      	str	r2, [r3, #0]
 801b922:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801b926:	681b      	ldr	r3, [r3, #0]
 801b928:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_2 = __SMLAD(op_a, op_b, sum_2);
 801b92c:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 801b930:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801b934:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801b938:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801b93c:	6018      	str	r0, [r3, #0]
 801b93e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801b942:	6019      	str	r1, [r3, #0]
 801b944:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801b948:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b94a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 801b954:	6812      	ldr	r2, [r2, #0]
 801b956:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 801b95a:	6809      	ldr	r1, [r1, #0]
 801b95c:	fb23 1202 	smlad	r2, r3, r2, r1
 801b960:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801b964:	601a      	str	r2, [r3, #0]
  return(result);
 801b966:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801b96a:	681b      	ldr	r3, [r3, #0]
 801b96c:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc

                    op_a = arm_nn_read_q15x2(col_pos + 2);
 801b970:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801b974:	1d1a      	adds	r2, r3, #4
 801b976:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801b97a:	601a      	str	r2, [r3, #0]
 801b97c:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	681b      	ldr	r3, [r3, #0]
 801b984:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801b986:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b98a:	601a      	str	r2, [r3, #0]
    return (val);
 801b98c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = arm_nn_read_q15x2(col_pos + input_ch + 2);
 801b996:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b99a:	3302      	adds	r3, #2
 801b99c:	005b      	lsls	r3, r3, #1
 801b99e:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801b9a2:	441a      	add	r2, r3
 801b9a4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801b9a8:	601a      	str	r2, [r3, #0]
 801b9aa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801b9b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b9b8:	601a      	str	r2, [r3, #0]
    return (val);
 801b9ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b9be:	681b      	ldr	r3, [r3, #0]
 801b9c0:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

                    op_c = __PKHBT(op_b, op_a, 16);
 801b9c4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801b9c8:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 801b9cc:	601a      	str	r2, [r3, #0]
 801b9ce:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801b9d2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801b9d6:	601a      	str	r2, [r3, #0]
 801b9d8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801b9dc:	681b      	ldr	r3, [r3, #0]
 801b9de:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 801b9e2:	6812      	ldr	r2, [r2, #0]
 801b9e4:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 801b9e8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801b9ec:	601a      	str	r2, [r3, #0]
 801b9ee:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
                    op_a = __PKHTB(op_b, op_a, 16);
 801b9f8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801b9fc:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 801ba00:	601a      	str	r2, [r3, #0]
 801ba02:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801ba06:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801ba0a:	601a      	str	r2, [r3, #0]
 801ba0c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	f507 7204 	add.w	r2, r7, #528	; 0x210
 801ba16:	6812      	ldr	r2, [r2, #0]
 801ba18:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801ba1c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801ba20:	601a      	str	r2, [r3, #0]
 801ba22:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = __PKHTB(ip_a2, ip_b2, 16);
 801ba2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801ba30:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801ba34:	601a      	str	r2, [r3, #0]
 801ba36:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801ba3a:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801ba3e:	601a      	str	r2, [r3, #0]
 801ba40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	f507 7201 	add.w	r2, r7, #516	; 0x204
 801ba4a:	6812      	ldr	r2, [r2, #0]
 801ba4c:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801ba50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801ba54:	601a      	str	r2, [r3, #0]
 801ba56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_3 = __SMLAD(op_c, op_b, sum_3);
 801ba60:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 801ba64:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801ba68:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801ba6c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801ba70:	6018      	str	r0, [r3, #0]
 801ba72:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801ba76:	6019      	str	r1, [r3, #0]
 801ba78:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801ba7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ba7e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 801ba88:	6812      	ldr	r2, [r2, #0]
 801ba8a:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 801ba8e:	6809      	ldr	r1, [r1, #0]
 801ba90:	fb23 1202 	smlad	r2, r3, r2, r1
 801ba94:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801ba98:	601a      	str	r2, [r3, #0]
  return(result);
 801ba9a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8

                    op_b = __PKHTB(ip_a1, ip_b1, 16);
 801baa4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801baa8:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801baac:	601a      	str	r2, [r3, #0]
 801baae:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801bab2:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 801bab6:	601a      	str	r2, [r3, #0]
 801bab8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801babc:	681b      	ldr	r3, [r3, #0]
 801babe:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801bac2:	6812      	ldr	r2, [r2, #0]
 801bac4:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801bac8:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801bacc:	601a      	str	r2, [r3, #0]
 801bace:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801bad2:	681b      	ldr	r3, [r3, #0]
 801bad4:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_4 = __SMLAD(op_a, op_b, sum_4);
 801bad8:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 801badc:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801bae0:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801bae4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801bae8:	6018      	str	r0, [r3, #0]
 801baea:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801baee:	6019      	str	r1, [r3, #0]
 801baf0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801baf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801baf6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 801bb00:	6812      	ldr	r2, [r2, #0]
 801bb02:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 801bb06:	6809      	ldr	r1, [r1, #0]
 801bb08:	fb23 1202 	smlad	r2, r3, r2, r1
 801bb0c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801bb10:	601a      	str	r2, [r3, #0]
  return(result);
 801bb12:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                    row_pos += input_ch << 1;
 801bb1c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801bb20:	005b      	lsls	r3, r3, #1
 801bb22:	461a      	mov	r2, r3
 801bb24:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801bb28:	4413      	add	r3, r2
 801bb2a:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                    col_pos += input_ch << 1;
 801bb2e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801bb32:	005b      	lsls	r3, r3, #1
 801bb34:	005b      	lsls	r3, r3, #1
 801bb36:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801bb3a:	4413      	add	r3, r2
 801bb3c:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
                    col_count--;
 801bb40:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801bb44:	3b01      	subs	r3, #1
 801bb46:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 801bb4a:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	f47f ad9f 	bne.w	801b692 <arm_depthwise_conv_s8_opt+0x3e2>
                }

                col_count = (kernel_x * kernel_y) & 0x1;
 801bb54:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801bb58:	b29a      	uxth	r2, r3
 801bb5a:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801bb5e:	b29b      	uxth	r3, r3
 801bb60:	fb12 f303 	smulbb	r3, r2, r3
 801bb64:	b29b      	uxth	r3, r3
 801bb66:	f003 0301 	and.w	r3, r3, #1
 801bb6a:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 801bb6e:	e059      	b.n	801bc24 <arm_depthwise_conv_s8_opt+0x974>
                {
                    sum += row_pos[0] * col_pos[0];
 801bb70:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801bb74:	f993 3000 	ldrsb.w	r3, [r3]
 801bb78:	461a      	mov	r2, r3
 801bb7a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801bb7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bb82:	fb03 f302 	mul.w	r3, r3, r2
 801bb86:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801bb8a:	4413      	add	r3, r2
 801bb8c:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                    sum_2 += row_pos[1] * col_pos[1];
 801bb90:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801bb94:	3301      	adds	r3, #1
 801bb96:	f993 3000 	ldrsb.w	r3, [r3]
 801bb9a:	461a      	mov	r2, r3
 801bb9c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801bba0:	3302      	adds	r3, #2
 801bba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bba6:	fb03 f302 	mul.w	r3, r3, r2
 801bbaa:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801bbae:	4413      	add	r3, r2
 801bbb0:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                    sum_3 += row_pos[2] * col_pos[2];
 801bbb4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801bbb8:	3302      	adds	r3, #2
 801bbba:	f993 3000 	ldrsb.w	r3, [r3]
 801bbbe:	461a      	mov	r2, r3
 801bbc0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801bbc4:	3304      	adds	r3, #4
 801bbc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bbca:	fb03 f302 	mul.w	r3, r3, r2
 801bbce:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801bbd2:	4413      	add	r3, r2
 801bbd4:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                    sum_4 += row_pos[3] * col_pos[3];
 801bbd8:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801bbdc:	3303      	adds	r3, #3
 801bbde:	f993 3000 	ldrsb.w	r3, [r3]
 801bbe2:	461a      	mov	r2, r3
 801bbe4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801bbe8:	3306      	adds	r3, #6
 801bbea:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bbee:	fb03 f302 	mul.w	r3, r3, r2
 801bbf2:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801bbf6:	4413      	add	r3, r2
 801bbf8:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                    row_pos += input_ch;
 801bbfc:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801bc00:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801bc04:	4413      	add	r3, r2
 801bc06:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                    col_pos += input_ch;
 801bc0a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801bc0e:	005b      	lsls	r3, r3, #1
 801bc10:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801bc14:	4413      	add	r3, r2
 801bc16:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec

                    col_count--;
 801bc1a:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801bc1e:	3b01      	subs	r3, #1
 801bc20:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 801bc24:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d1a1      	bne.n	801bb70 <arm_depthwise_conv_s8_opt+0x8c0>
                }
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
 801bc2c:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801bc30:	1d1a      	adds	r2, r3, #4
 801bc32:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801bc36:	6819      	ldr	r1, [r3, #0]
 801bc38:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801bc3c:	1d1a      	adds	r2, r3, #4
 801bc3e:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801bc42:	681a      	ldr	r2, [r3, #0]
 801bc44:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801bc48:	f8d7 0300 	ldr.w	r0, [r7, #768]	; 0x300
 801bc4c:	6018      	str	r0, [r3, #0]
 801bc4e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801bc52:	6019      	str	r1, [r3, #0]
 801bc54:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801bc58:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bc5a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc64:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801bc68:	6812      	ldr	r2, [r2, #0]
 801bc6a:	409a      	lsls	r2, r3
 801bc6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801bc70:	601a      	str	r2, [r3, #0]
 801bc72:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801bc76:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 801bc7a:	6812      	ldr	r2, [r2, #0]
 801bc7c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801bc7e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801bc82:	2200      	movs	r2, #0
 801bc84:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801bc86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801bc8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801bc8e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801bc90:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801bc94:	2200      	movs	r2, #0
 801bc96:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801bc98:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 801bc9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	4618      	mov	r0, r3
 801bca4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801bca8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	461a      	mov	r2, r3
 801bcb0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801bcb4:	fb02 f501 	mul.w	r5, r2, r1
 801bcb8:	fb00 f403 	mul.w	r4, r0, r3
 801bcbc:	442c      	add	r4, r5
 801bcbe:	fba0 2302 	umull	r2, r3, r0, r2
 801bcc2:	18e1      	adds	r1, r4, r3
 801bcc4:	460b      	mov	r3, r1
 801bcc6:	eb18 0102 	adds.w	r1, r8, r2
 801bcca:	60b9      	str	r1, [r7, #8]
 801bccc:	eb49 0303 	adc.w	r3, r9, r3
 801bcd0:	60fb      	str	r3, [r7, #12]
 801bcd2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801bcd6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    result = (int32_t)(mult.long_long >> 31);
 801bcda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801bcde:	f04f 0200 	mov.w	r2, #0
 801bce2:	f04f 0300 	mov.w	r3, #0
 801bce6:	0fc2      	lsrs	r2, r0, #31
 801bce8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801bcec:	17cb      	asrs	r3, r1, #31
 801bcee:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 801bcf2:	4613      	mov	r3, r2
 801bcf4:	600b      	str	r3, [r1, #0]
    return result;
 801bcf6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801bcfa:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bcfc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	dc04      	bgt.n	801bd10 <arm_depthwise_conv_s8_opt+0xa60>
 801bd06:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	425b      	negs	r3, r3
 801bd0e:	e000      	b.n	801bd12 <arm_depthwise_conv_s8_opt+0xa62>
 801bd10:	2300      	movs	r3, #0
 801bd12:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801bd16:	6011      	str	r1, [r2, #0]
 801bd18:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801bd1c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801bd1e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801bd22:	2200      	movs	r2, #0
 801bd24:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801bd26:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801bd2a:	2201      	movs	r2, #1
 801bd2c:	681b      	ldr	r3, [r3, #0]
 801bd2e:	409a      	lsls	r2, r3
 801bd30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801bd34:	3a01      	subs	r2, #1
 801bd36:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801bd38:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801bd3c:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801bd40:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801bd44:	6809      	ldr	r1, [r1, #0]
 801bd46:	6812      	ldr	r2, [r2, #0]
 801bd48:	400a      	ands	r2, r1
 801bd4a:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801bd4c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801bd50:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801bd54:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801bd58:	6809      	ldr	r1, [r1, #0]
 801bd5a:	6812      	ldr	r2, [r2, #0]
 801bd5c:	fa41 f202 	asr.w	r2, r1, r2
 801bd60:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801bd62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801bd66:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801bd6a:	6812      	ldr	r2, [r2, #0]
 801bd6c:	1052      	asrs	r2, r2, #1
 801bd6e:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801bd70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	da06      	bge.n	801bd88 <arm_depthwise_conv_s8_opt+0xad8>
        threshold++;
 801bd7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801bd7e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 801bd82:	6812      	ldr	r2, [r2, #0]
 801bd84:	3201      	adds	r2, #1
 801bd86:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801bd88:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801bd8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801bd90:	6812      	ldr	r2, [r2, #0]
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	429a      	cmp	r2, r3
 801bd96:	dd06      	ble.n	801bda6 <arm_depthwise_conv_s8_opt+0xaf6>
        result++;
 801bd98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801bd9c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801bda0:	6812      	ldr	r2, [r2, #0]
 801bda2:	3201      	adds	r2, #1
 801bda4:	601a      	str	r2, [r3, #0]
    return result;
 801bda6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801bdaa:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bdac:	bf00      	nop
 801bdae:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum += output_offset;
 801bdb2:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801bdb6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801bdba:	4413      	add	r3, r2
 801bdbc:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum = MAX(sum, output_activation_min);
 801bdc0:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801bdc4:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801bdc8:	4293      	cmp	r3, r2
 801bdca:	bfb8      	it	lt
 801bdcc:	4613      	movlt	r3, r2
 801bdce:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum = MIN(sum, output_activation_max);
 801bdd2:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801bdd6:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801bdda:	4293      	cmp	r3, r2
 801bddc:	bfa8      	it	ge
 801bdde:	4613      	movge	r3, r2
 801bde0:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                *output++ = (q7_t)sum;
 801bde4:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801bde8:	1c5a      	adds	r2, r3, #1
 801bdea:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801bdee:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801bdf2:	b252      	sxtb	r2, r2
 801bdf4:	701a      	strb	r2, [r3, #0]

                sum_2 = arm_nn_requantize(sum_2, *output_mult++, *output_shift++);
 801bdf6:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801bdfa:	1d1a      	adds	r2, r3, #4
 801bdfc:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801be00:	6819      	ldr	r1, [r3, #0]
 801be02:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801be06:	1d1a      	adds	r2, r3, #4
 801be08:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801be0c:	681a      	ldr	r2, [r3, #0]
 801be0e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801be12:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 801be16:	6018      	str	r0, [r3, #0]
 801be18:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801be1c:	6019      	str	r1, [r3, #0]
 801be1e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801be22:	601a      	str	r2, [r3, #0]
 801be24:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801be28:	681b      	ldr	r3, [r3, #0]
 801be2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801be2e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801be32:	6812      	ldr	r2, [r2, #0]
 801be34:	409a      	lsls	r2, r3
 801be36:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801be3a:	601a      	str	r2, [r3, #0]
 801be3c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801be40:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 801be44:	6812      	ldr	r2, [r2, #0]
 801be46:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801be48:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801be4c:	2200      	movs	r2, #0
 801be4e:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801be50:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801be54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801be58:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801be5a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801be5e:	2200      	movs	r2, #0
 801be60:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801be62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801be66:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	4618      	mov	r0, r3
 801be6e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801be72:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801be76:	681b      	ldr	r3, [r3, #0]
 801be78:	461a      	mov	r2, r3
 801be7a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801be7e:	fb02 f501 	mul.w	r5, r2, r1
 801be82:	fb00 f403 	mul.w	r4, r0, r3
 801be86:	442c      	add	r4, r5
 801be88:	fba0 2302 	umull	r2, r3, r0, r2
 801be8c:	18e1      	adds	r1, r4, r3
 801be8e:	460b      	mov	r3, r1
 801be90:	eb18 0102 	adds.w	r1, r8, r2
 801be94:	6139      	str	r1, [r7, #16]
 801be96:	eb49 0303 	adc.w	r3, r9, r3
 801be9a:	617b      	str	r3, [r7, #20]
 801be9c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801bea0:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 801bea4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801bea8:	f04f 0200 	mov.w	r2, #0
 801beac:	f04f 0300 	mov.w	r3, #0
 801beb0:	0fc2      	lsrs	r2, r0, #31
 801beb2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801beb6:	17cb      	asrs	r3, r1, #31
 801beb8:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 801bebc:	4613      	mov	r3, r2
 801bebe:	600b      	str	r3, [r1, #0]
    return result;
 801bec0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801bec4:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bec6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801beca:	681b      	ldr	r3, [r3, #0]
 801becc:	2b00      	cmp	r3, #0
 801bece:	dc04      	bgt.n	801beda <arm_depthwise_conv_s8_opt+0xc2a>
 801bed0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	425b      	negs	r3, r3
 801bed8:	e000      	b.n	801bedc <arm_depthwise_conv_s8_opt+0xc2c>
 801beda:	2300      	movs	r3, #0
 801bedc:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801bee0:	6011      	str	r1, [r2, #0]
 801bee2:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801bee6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801bee8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801beec:	2200      	movs	r2, #0
 801beee:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801bef0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801bef4:	2201      	movs	r2, #1
 801bef6:	681b      	ldr	r3, [r3, #0]
 801bef8:	409a      	lsls	r2, r3
 801befa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801befe:	3a01      	subs	r2, #1
 801bf00:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801bf02:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801bf06:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801bf0a:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801bf0e:	6809      	ldr	r1, [r1, #0]
 801bf10:	6812      	ldr	r2, [r2, #0]
 801bf12:	400a      	ands	r2, r1
 801bf14:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801bf16:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bf1a:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801bf1e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801bf22:	6809      	ldr	r1, [r1, #0]
 801bf24:	6812      	ldr	r2, [r2, #0]
 801bf26:	fa41 f202 	asr.w	r2, r1, r2
 801bf2a:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801bf2c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801bf30:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801bf34:	6812      	ldr	r2, [r2, #0]
 801bf36:	1052      	asrs	r2, r2, #1
 801bf38:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801bf3a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	da06      	bge.n	801bf52 <arm_depthwise_conv_s8_opt+0xca2>
        threshold++;
 801bf44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801bf48:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801bf4c:	6812      	ldr	r2, [r2, #0]
 801bf4e:	3201      	adds	r2, #1
 801bf50:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801bf52:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801bf56:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801bf5a:	6812      	ldr	r2, [r2, #0]
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	429a      	cmp	r2, r3
 801bf60:	dd06      	ble.n	801bf70 <arm_depthwise_conv_s8_opt+0xcc0>
        result++;
 801bf62:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bf66:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801bf6a:	6812      	ldr	r2, [r2, #0]
 801bf6c:	3201      	adds	r2, #1
 801bf6e:	601a      	str	r2, [r3, #0]
    return result;
 801bf70:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bf74:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bf76:	bf00      	nop
 801bf78:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 += output_offset;
 801bf7c:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801bf80:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801bf84:	4413      	add	r3, r2
 801bf86:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 = MAX(sum_2, output_activation_min);
 801bf8a:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801bf8e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801bf92:	4293      	cmp	r3, r2
 801bf94:	bfb8      	it	lt
 801bf96:	4613      	movlt	r3, r2
 801bf98:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 = MIN(sum_2, output_activation_max);
 801bf9c:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801bfa0:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801bfa4:	4293      	cmp	r3, r2
 801bfa6:	bfa8      	it	ge
 801bfa8:	4613      	movge	r3, r2
 801bfaa:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                *output++ = (q7_t)sum_2;
 801bfae:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801bfb2:	1c5a      	adds	r2, r3, #1
 801bfb4:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801bfb8:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801bfbc:	b252      	sxtb	r2, r2
 801bfbe:	701a      	strb	r2, [r3, #0]
                sum_3 = arm_nn_requantize(sum_3, *output_mult++, *output_shift++);
 801bfc0:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801bfc4:	1d1a      	adds	r2, r3, #4
 801bfc6:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801bfca:	6819      	ldr	r1, [r3, #0]
 801bfcc:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801bfd0:	1d1a      	adds	r2, r3, #4
 801bfd2:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801bfd6:	681a      	ldr	r2, [r3, #0]
 801bfd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801bfdc:	f8d7 02f8 	ldr.w	r0, [r7, #760]	; 0x2f8
 801bfe0:	6018      	str	r0, [r3, #0]
 801bfe2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801bfe6:	6019      	str	r1, [r3, #0]
 801bfe8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801bfec:	601a      	str	r2, [r3, #0]
 801bfee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801bff2:	681b      	ldr	r3, [r3, #0]
 801bff4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bff8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801bffc:	6812      	ldr	r2, [r2, #0]
 801bffe:	409a      	lsls	r2, r3
 801c000:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801c004:	601a      	str	r2, [r3, #0]
 801c006:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801c00a:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 801c00e:	6812      	ldr	r2, [r2, #0]
 801c010:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801c012:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801c016:	2200      	movs	r2, #0
 801c018:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801c01a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c01e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c022:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801c024:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c028:	2200      	movs	r2, #0
 801c02a:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c02c:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 801c030:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801c034:	681b      	ldr	r3, [r3, #0]
 801c036:	4618      	mov	r0, r3
 801c038:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801c03c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	461a      	mov	r2, r3
 801c044:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801c048:	fb02 f501 	mul.w	r5, r2, r1
 801c04c:	fb00 f403 	mul.w	r4, r0, r3
 801c050:	442c      	add	r4, r5
 801c052:	fba0 2302 	umull	r2, r3, r0, r2
 801c056:	18e1      	adds	r1, r4, r3
 801c058:	460b      	mov	r3, r1
 801c05a:	eb18 0102 	adds.w	r1, r8, r2
 801c05e:	61b9      	str	r1, [r7, #24]
 801c060:	eb49 0303 	adc.w	r3, r9, r3
 801c064:	61fb      	str	r3, [r7, #28]
 801c066:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801c06a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 801c06e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801c072:	f04f 0200 	mov.w	r2, #0
 801c076:	f04f 0300 	mov.w	r3, #0
 801c07a:	0fc2      	lsrs	r2, r0, #31
 801c07c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801c080:	17cb      	asrs	r3, r1, #31
 801c082:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 801c086:	4613      	mov	r3, r2
 801c088:	600b      	str	r3, [r1, #0]
    return result;
 801c08a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801c08e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c090:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801c094:	681b      	ldr	r3, [r3, #0]
 801c096:	2b00      	cmp	r3, #0
 801c098:	dc04      	bgt.n	801c0a4 <arm_depthwise_conv_s8_opt+0xdf4>
 801c09a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801c09e:	681b      	ldr	r3, [r3, #0]
 801c0a0:	425b      	negs	r3, r3
 801c0a2:	e000      	b.n	801c0a6 <arm_depthwise_conv_s8_opt+0xdf6>
 801c0a4:	2300      	movs	r3, #0
 801c0a6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 801c0aa:	6011      	str	r1, [r2, #0]
 801c0ac:	f507 728a 	add.w	r2, r7, #276	; 0x114
 801c0b0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c0b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c0b6:	2200      	movs	r2, #0
 801c0b8:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c0ba:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801c0be:	2201      	movs	r2, #1
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	409a      	lsls	r2, r3
 801c0c4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801c0c8:	3a01      	subs	r2, #1
 801c0ca:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801c0cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801c0d0:	f507 718c 	add.w	r1, r7, #280	; 0x118
 801c0d4:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801c0d8:	6809      	ldr	r1, [r1, #0]
 801c0da:	6812      	ldr	r2, [r2, #0]
 801c0dc:	400a      	ands	r2, r1
 801c0de:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801c0e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c0e4:	f507 718c 	add.w	r1, r7, #280	; 0x118
 801c0e8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 801c0ec:	6809      	ldr	r1, [r1, #0]
 801c0ee:	6812      	ldr	r2, [r2, #0]
 801c0f0:	fa41 f202 	asr.w	r2, r1, r2
 801c0f4:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801c0f6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801c0fa:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801c0fe:	6812      	ldr	r2, [r2, #0]
 801c100:	1052      	asrs	r2, r2, #1
 801c102:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801c104:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	da06      	bge.n	801c11c <arm_depthwise_conv_s8_opt+0xe6c>
        threshold++;
 801c10e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801c112:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801c116:	6812      	ldr	r2, [r2, #0]
 801c118:	3201      	adds	r2, #1
 801c11a:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801c11c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801c120:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801c124:	6812      	ldr	r2, [r2, #0]
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	429a      	cmp	r2, r3
 801c12a:	dd06      	ble.n	801c13a <arm_depthwise_conv_s8_opt+0xe8a>
        result++;
 801c12c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c130:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801c134:	6812      	ldr	r2, [r2, #0]
 801c136:	3201      	adds	r2, #1
 801c138:	601a      	str	r2, [r3, #0]
    return result;
 801c13a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c13e:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c140:	bf00      	nop
 801c142:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 += output_offset;
 801c146:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801c14a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801c14e:	4413      	add	r3, r2
 801c150:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 = MAX(sum_3, output_activation_min);
 801c154:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801c158:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801c15c:	4293      	cmp	r3, r2
 801c15e:	bfb8      	it	lt
 801c160:	4613      	movlt	r3, r2
 801c162:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 = MIN(sum_3, output_activation_max);
 801c166:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801c16a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801c16e:	4293      	cmp	r3, r2
 801c170:	bfa8      	it	ge
 801c172:	4613      	movge	r3, r2
 801c174:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                *output++ = (q7_t)sum_3;
 801c178:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801c17c:	1c5a      	adds	r2, r3, #1
 801c17e:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801c182:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801c186:	b252      	sxtb	r2, r2
 801c188:	701a      	strb	r2, [r3, #0]

                sum_4 = arm_nn_requantize(sum_4, *output_mult++, *output_shift++);
 801c18a:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801c18e:	1d1a      	adds	r2, r3, #4
 801c190:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801c194:	6819      	ldr	r1, [r3, #0]
 801c196:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801c19a:	1d1a      	adds	r2, r3, #4
 801c19c:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801c1a0:	681a      	ldr	r2, [r3, #0]
 801c1a2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801c1a6:	f8d7 02f4 	ldr.w	r0, [r7, #756]	; 0x2f4
 801c1aa:	6018      	str	r0, [r3, #0]
 801c1ac:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801c1b0:	6019      	str	r1, [r3, #0]
 801c1b2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801c1b6:	601a      	str	r2, [r3, #0]
 801c1b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c1c2:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801c1c6:	6812      	ldr	r2, [r2, #0]
 801c1c8:	409a      	lsls	r2, r3
 801c1ca:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801c1ce:	601a      	str	r2, [r3, #0]
 801c1d0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801c1d4:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 801c1d8:	6812      	ldr	r2, [r2, #0]
 801c1da:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801c1dc:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801c1e0:	2200      	movs	r2, #0
 801c1e2:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801c1e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c1e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c1ec:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801c1ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c1f2:	2200      	movs	r2, #0
 801c1f4:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c1f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 801c1fa:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801c1fe:	681b      	ldr	r3, [r3, #0]
 801c200:	4618      	mov	r0, r3
 801c202:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801c206:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801c20a:	681b      	ldr	r3, [r3, #0]
 801c20c:	461a      	mov	r2, r3
 801c20e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801c212:	fb02 f501 	mul.w	r5, r2, r1
 801c216:	fb00 f403 	mul.w	r4, r0, r3
 801c21a:	442c      	add	r4, r5
 801c21c:	fba0 2302 	umull	r2, r3, r0, r2
 801c220:	18e1      	adds	r1, r4, r3
 801c222:	460b      	mov	r3, r1
 801c224:	eb18 0a02 	adds.w	sl, r8, r2
 801c228:	eb49 0b03 	adc.w	fp, r9, r3
 801c22c:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
    result = (int32_t)(mult.long_long >> 31);
 801c230:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801c234:	f04f 0200 	mov.w	r2, #0
 801c238:	f04f 0300 	mov.w	r3, #0
 801c23c:	0fc2      	lsrs	r2, r0, #31
 801c23e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801c242:	17cb      	asrs	r3, r1, #31
 801c244:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 801c248:	4613      	mov	r3, r2
 801c24a:	600b      	str	r3, [r1, #0]
    return result;
 801c24c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801c250:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c252:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	2b00      	cmp	r3, #0
 801c25a:	dc04      	bgt.n	801c266 <arm_depthwise_conv_s8_opt+0xfb6>
 801c25c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	425b      	negs	r3, r3
 801c264:	e000      	b.n	801c268 <arm_depthwise_conv_s8_opt+0xfb8>
 801c266:	2300      	movs	r3, #0
 801c268:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801c26c:	6011      	str	r1, [r2, #0]
 801c26e:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 801c272:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c274:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801c278:	2200      	movs	r2, #0
 801c27a:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c27c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801c280:	2201      	movs	r2, #1
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	409a      	lsls	r2, r3
 801c286:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801c28a:	3a01      	subs	r2, #1
 801c28c:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801c28e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801c292:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 801c296:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 801c29a:	6809      	ldr	r1, [r1, #0]
 801c29c:	6812      	ldr	r2, [r2, #0]
 801c29e:	400a      	ands	r2, r1
 801c2a0:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801c2a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801c2a6:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 801c2aa:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 801c2ae:	6809      	ldr	r1, [r1, #0]
 801c2b0:	6812      	ldr	r2, [r2, #0]
 801c2b2:	fa41 f202 	asr.w	r2, r1, r2
 801c2b6:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801c2b8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801c2bc:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 801c2c0:	6812      	ldr	r2, [r2, #0]
 801c2c2:	1052      	asrs	r2, r2, #1
 801c2c4:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801c2c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	da06      	bge.n	801c2de <arm_depthwise_conv_s8_opt+0x102e>
        threshold++;
 801c2d0:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801c2d4:	f507 729a 	add.w	r2, r7, #308	; 0x134
 801c2d8:	6812      	ldr	r2, [r2, #0]
 801c2da:	3201      	adds	r2, #1
 801c2dc:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801c2de:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801c2e2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801c2e6:	6812      	ldr	r2, [r2, #0]
 801c2e8:	681b      	ldr	r3, [r3, #0]
 801c2ea:	429a      	cmp	r2, r3
 801c2ec:	dd06      	ble.n	801c2fc <arm_depthwise_conv_s8_opt+0x104c>
        result++;
 801c2ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801c2f2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801c2f6:	6812      	ldr	r2, [r2, #0]
 801c2f8:	3201      	adds	r2, #1
 801c2fa:	601a      	str	r2, [r3, #0]
    return result;
 801c2fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801c300:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c302:	bf00      	nop
 801c304:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 += output_offset;
 801c308:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801c30c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801c310:	4413      	add	r3, r2
 801c312:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 = MAX(sum_4, output_activation_min);
 801c316:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801c31a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801c31e:	4293      	cmp	r3, r2
 801c320:	bfb8      	it	lt
 801c322:	4613      	movlt	r3, r2
 801c324:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 = MIN(sum_4, output_activation_max);
 801c328:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801c32c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801c330:	4293      	cmp	r3, r2
 801c332:	bfa8      	it	ge
 801c334:	4613      	movge	r3, r2
 801c336:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                *output++ = (q7_t)sum_4;
 801c33a:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801c33e:	1c5a      	adds	r2, r3, #1
 801c340:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801c344:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801c348:	b252      	sxtb	r2, r2
 801c34a:	701a      	strb	r2, [r3, #0]

                row_count--;
 801c34c:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801c350:	3b01      	subs	r3, #1
 801c352:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 801c356:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	f47f a959 	bne.w	801b612 <arm_depthwise_conv_s8_opt+0x362>
            }

            row_count = output_ch & 0x3;
 801c360:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801c364:	b29b      	uxth	r3, r3
 801c366:	f003 0303 	and.w	r3, r3, #3
 801c36a:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 801c36e:	e13e      	b.n	801c5ee <arm_depthwise_conv_s8_opt+0x133e>
            {
                q15_t *col_pos = col_buffer_start + row_shift;
 801c370:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801c374:	005b      	lsls	r3, r3, #1
 801c376:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801c37a:	4413      	add	r3, r2
 801c37c:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
                const q7_t *row_pos = kernel + row_shift;
 801c380:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801c384:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 801c388:	4413      	add	r3, r2
 801c38a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
                q31_t sum = *bias++;
 801c38e:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801c392:	1d1a      	adds	r2, r3, #4
 801c394:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                const uint16_t col_count = (kernel_x * kernel_y);
 801c39e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801c3a2:	b29a      	uxth	r2, r3
 801c3a4:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801c3a8:	b29b      	uxth	r3, r3
 801c3aa:	fb12 f303 	smulbb	r3, r2, r3
 801c3ae:	f8a7 3272 	strh.w	r3, [r7, #626]	; 0x272
                row_shift += 1;
 801c3b2:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801c3b6:	3301      	adds	r3, #1
 801c3b8:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318

                for (int i = 0; i < col_count; i++)
 801c3bc:	2300      	movs	r3, #0
 801c3be:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801c3c2:	e024      	b.n	801c40e <arm_depthwise_conv_s8_opt+0x115e>
                {
                    sum += row_pos[i * input_ch] * col_pos[i * input_ch];
 801c3c4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801c3c8:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801c3cc:	fb02 f303 	mul.w	r3, r2, r3
 801c3d0:	461a      	mov	r2, r3
 801c3d2:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801c3d6:	4413      	add	r3, r2
 801c3d8:	f993 3000 	ldrsb.w	r3, [r3]
 801c3dc:	4619      	mov	r1, r3
 801c3de:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801c3e2:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801c3e6:	fb02 f303 	mul.w	r3, r2, r3
 801c3ea:	005b      	lsls	r3, r3, #1
 801c3ec:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 801c3f0:	4413      	add	r3, r2
 801c3f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c3f6:	fb03 f301 	mul.w	r3, r3, r1
 801c3fa:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c3fe:	4413      	add	r3, r2
 801c400:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                for (int i = 0; i < col_count; i++)
 801c404:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801c408:	3301      	adds	r3, #1
 801c40a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801c40e:	f8b7 3272 	ldrh.w	r3, [r7, #626]	; 0x272
 801c412:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 801c416:	429a      	cmp	r2, r3
 801c418:	dbd4      	blt.n	801c3c4 <arm_depthwise_conv_s8_opt+0x1114>
                }
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
 801c41a:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801c41e:	1d1a      	adds	r2, r3, #4
 801c420:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801c424:	6819      	ldr	r1, [r3, #0]
 801c426:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801c42a:	1d1a      	adds	r2, r3, #4
 801c42c:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801c430:	681a      	ldr	r2, [r3, #0]
 801c432:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c436:	f8d7 02e4 	ldr.w	r0, [r7, #740]	; 0x2e4
 801c43a:	6018      	str	r0, [r3, #0]
 801c43c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801c440:	6019      	str	r1, [r3, #0]
 801c442:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c446:	601a      	str	r2, [r3, #0]
 801c448:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c44c:	681b      	ldr	r3, [r3, #0]
 801c44e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c452:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801c456:	6812      	ldr	r2, [r2, #0]
 801c458:	409a      	lsls	r2, r3
 801c45a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801c45e:	601a      	str	r2, [r3, #0]
 801c460:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c464:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801c468:	6812      	ldr	r2, [r2, #0]
 801c46a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801c46c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c470:	2200      	movs	r2, #0
 801c472:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801c474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c47c:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801c47e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c482:	2200      	movs	r2, #0
 801c484:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c486:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 801c48a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	4618      	mov	r0, r3
 801c492:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801c496:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	461a      	mov	r2, r3
 801c49e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801c4a2:	fb02 f501 	mul.w	r5, r2, r1
 801c4a6:	fb00 f403 	mul.w	r4, r0, r3
 801c4aa:	442c      	add	r4, r5
 801c4ac:	fba0 2302 	umull	r2, r3, r0, r2
 801c4b0:	18e1      	adds	r1, r4, r3
 801c4b2:	460b      	mov	r3, r1
 801c4b4:	eb18 0102 	adds.w	r1, r8, r2
 801c4b8:	6039      	str	r1, [r7, #0]
 801c4ba:	eb49 0303 	adc.w	r3, r9, r3
 801c4be:	607b      	str	r3, [r7, #4]
 801c4c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 801c4c4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 801c4c8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801c4cc:	f04f 0200 	mov.w	r2, #0
 801c4d0:	f04f 0300 	mov.w	r3, #0
 801c4d4:	0fc2      	lsrs	r2, r0, #31
 801c4d6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801c4da:	17cb      	asrs	r3, r1, #31
 801c4dc:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801c4e0:	4613      	mov	r3, r2
 801c4e2:	600b      	str	r3, [r1, #0]
    return result;
 801c4e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c4e8:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c4ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	dc04      	bgt.n	801c4fe <arm_depthwise_conv_s8_opt+0x124e>
 801c4f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	425b      	negs	r3, r3
 801c4fc:	e000      	b.n	801c500 <arm_depthwise_conv_s8_opt+0x1250>
 801c4fe:	2300      	movs	r3, #0
 801c500:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801c504:	6011      	str	r1, [r2, #0]
 801c506:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801c50a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c50c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c510:	2200      	movs	r2, #0
 801c512:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c514:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c518:	2201      	movs	r2, #1
 801c51a:	681b      	ldr	r3, [r3, #0]
 801c51c:	409a      	lsls	r2, r3
 801c51e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801c522:	3a01      	subs	r2, #1
 801c524:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801c526:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c52a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801c52e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801c532:	6809      	ldr	r1, [r1, #0]
 801c534:	6812      	ldr	r2, [r2, #0]
 801c536:	400a      	ands	r2, r1
 801c538:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801c53a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c53e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801c542:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801c546:	6809      	ldr	r1, [r1, #0]
 801c548:	6812      	ldr	r2, [r2, #0]
 801c54a:	fa41 f202 	asr.w	r2, r1, r2
 801c54e:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801c550:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801c554:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801c558:	6812      	ldr	r2, [r2, #0]
 801c55a:	1052      	asrs	r2, r2, #1
 801c55c:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801c55e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	2b00      	cmp	r3, #0
 801c566:	da06      	bge.n	801c576 <arm_depthwise_conv_s8_opt+0x12c6>
        threshold++;
 801c568:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801c56c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801c570:	6812      	ldr	r2, [r2, #0]
 801c572:	3201      	adds	r2, #1
 801c574:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801c576:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801c57a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801c57e:	6812      	ldr	r2, [r2, #0]
 801c580:	681b      	ldr	r3, [r3, #0]
 801c582:	429a      	cmp	r2, r3
 801c584:	dd06      	ble.n	801c594 <arm_depthwise_conv_s8_opt+0x12e4>
        result++;
 801c586:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c58a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801c58e:	6812      	ldr	r2, [r2, #0]
 801c590:	3201      	adds	r2, #1
 801c592:	601a      	str	r2, [r3, #0]
    return result;
 801c594:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c598:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c59a:	bf00      	nop
 801c59c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum += output_offset;
 801c5a0:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c5a4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801c5a8:	4413      	add	r3, r2
 801c5aa:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum = MAX(sum, output_activation_min);
 801c5ae:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c5b2:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801c5b6:	4293      	cmp	r3, r2
 801c5b8:	bfb8      	it	lt
 801c5ba:	4613      	movlt	r3, r2
 801c5bc:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum = MIN(sum, output_activation_max);
 801c5c0:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c5c4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801c5c8:	4293      	cmp	r3, r2
 801c5ca:	bfa8      	it	ge
 801c5cc:	4613      	movge	r3, r2
 801c5ce:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                *output++ = (q7_t)sum;
 801c5d2:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801c5d6:	1c5a      	adds	r2, r3, #1
 801c5d8:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801c5dc:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c5e0:	b252      	sxtb	r2, r2
 801c5e2:	701a      	strb	r2, [r3, #0]

                row_count--;
 801c5e4:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801c5e8:	3b01      	subs	r3, #1
 801c5ea:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 801c5ee:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	f47f aebc 	bne.w	801c370 <arm_depthwise_conv_s8_opt+0x10c0>
            }

            // clear counter and pointers
            col_buffer = col_buffer_start;
 801c5f8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c5fc:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801c600:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 801c604:	3301      	adds	r3, #1
 801c606:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 801c60a:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 801c60e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 801c612:	429a      	cmp	r2, r3
 801c614:	f6fe af02 	blt.w	801b41c <arm_depthwise_conv_s8_opt+0x16c>
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801c618:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801c61c:	3301      	adds	r3, #1
 801c61e:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801c622:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 801c626:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 801c62a:	429a      	cmp	r2, r3
 801c62c:	f6fe aee1 	blt.w	801b3f2 <arm_depthwise_conv_s8_opt+0x142>
                                 output_dims,
                                 output);
#endif /* ARM_MATH_MVEI | ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801c630:	2300      	movs	r3, #0
}
 801c632:	4618      	mov	r0, r3
 801c634:	f507 774a 	add.w	r7, r7, #808	; 0x328
 801c638:	46bd      	mov	sp, r7
 801c63a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801c63e <arm_depthwise_conv_s8_opt_get_buffer_size>:

int32_t arm_depthwise_conv_s8_opt_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 801c63e:	b480      	push	{r7}
 801c640:	b083      	sub	sp, #12
 801c642:	af00      	add	r7, sp, #0
 801c644:	6078      	str	r0, [r7, #4]
 801c646:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_MVEI)
    /* The + 4 accounts for out of bounds read of the lhs buffers in the *_nt_t_* functions.  */
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t) + 4;
#elif defined(ARM_MATH_DSP)
    return (input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	68db      	ldr	r3, [r3, #12]
 801c64c:	683a      	ldr	r2, [r7, #0]
 801c64e:	6892      	ldr	r2, [r2, #8]
 801c650:	fb02 f303 	mul.w	r3, r2, r3
 801c654:	683a      	ldr	r2, [r7, #0]
 801c656:	6852      	ldr	r2, [r2, #4]
 801c658:	fb02 f303 	mul.w	r3, r2, r3
 801c65c:	005b      	lsls	r3, r3, #1
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 801c65e:	4618      	mov	r0, r3
 801c660:	370c      	adds	r7, #12
 801c662:	46bd      	mov	sp, r7
 801c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c668:	4770      	bx	lr

0801c66a <arm_depthwise_conv_wrapper_s8>:
                                         const q7_t *filter,
                                         const cmsis_nn_dims *bias_dims,
                                         const int32_t *bias,
                                         const cmsis_nn_dims *output_dims,
                                         q7_t *output)
{
 801c66a:	b580      	push	{r7, lr}
 801c66c:	b08e      	sub	sp, #56	; 0x38
 801c66e:	af08      	add	r7, sp, #32
 801c670:	60f8      	str	r0, [r7, #12]
 801c672:	60b9      	str	r1, [r7, #8]
 801c674:	607a      	str	r2, [r7, #4]
 801c676:	603b      	str	r3, [r7, #0]
    arm_status status = ARM_MATH_SUCCESS;
 801c678:	2300      	movs	r3, #0
 801c67a:	75fb      	strb	r3, [r7, #23]
    if (1 == dw_conv_params->ch_mult)
 801c67c:	68bb      	ldr	r3, [r7, #8]
 801c67e:	689b      	ldr	r3, [r3, #8]
 801c680:	2b01      	cmp	r3, #1
 801c682:	d139      	bne.n	801c6f8 <arm_depthwise_conv_wrapper_s8+0x8e>
    {
#if !defined(ARM_MATH_MVEI)
        if ((filter_dims->w == 3) && (filter_dims->h == 3) && (dw_conv_params->padding.h <= 1))
 801c684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c686:	689b      	ldr	r3, [r3, #8]
 801c688:	2b03      	cmp	r3, #3
 801c68a:	d11e      	bne.n	801c6ca <arm_depthwise_conv_wrapper_s8+0x60>
 801c68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c68e:	685b      	ldr	r3, [r3, #4]
 801c690:	2b03      	cmp	r3, #3
 801c692:	d11a      	bne.n	801c6ca <arm_depthwise_conv_wrapper_s8+0x60>
 801c694:	68bb      	ldr	r3, [r7, #8]
 801c696:	699b      	ldr	r3, [r3, #24]
 801c698:	2b01      	cmp	r3, #1
 801c69a:	dc16      	bgt.n	801c6ca <arm_depthwise_conv_wrapper_s8+0x60>
        {
            status = arm_depthwise_conv_3x3_s8(ctx,
 801c69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c69e:	9306      	str	r3, [sp, #24]
 801c6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c6a2:	9305      	str	r3, [sp, #20]
 801c6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c6a6:	9304      	str	r3, [sp, #16]
 801c6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6aa:	9303      	str	r3, [sp, #12]
 801c6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6ae:	9302      	str	r3, [sp, #8]
 801c6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6b2:	9301      	str	r3, [sp, #4]
 801c6b4:	6a3b      	ldr	r3, [r7, #32]
 801c6b6:	9300      	str	r3, [sp, #0]
 801c6b8:	683b      	ldr	r3, [r7, #0]
 801c6ba:	687a      	ldr	r2, [r7, #4]
 801c6bc:	68b9      	ldr	r1, [r7, #8]
 801c6be:	68f8      	ldr	r0, [r7, #12]
 801c6c0:	f7fc fecf 	bl	8019462 <arm_depthwise_conv_3x3_s8>
 801c6c4:	4603      	mov	r3, r0
 801c6c6:	75fb      	strb	r3, [r7, #23]
 801c6c8:	e02c      	b.n	801c724 <arm_depthwise_conv_wrapper_s8+0xba>
                                               output);
        }
        else
#endif
        {
            status = arm_depthwise_conv_s8_opt(ctx,
 801c6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6cc:	9306      	str	r3, [sp, #24]
 801c6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c6d0:	9305      	str	r3, [sp, #20]
 801c6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c6d4:	9304      	str	r3, [sp, #16]
 801c6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6d8:	9303      	str	r3, [sp, #12]
 801c6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6dc:	9302      	str	r3, [sp, #8]
 801c6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6e0:	9301      	str	r3, [sp, #4]
 801c6e2:	6a3b      	ldr	r3, [r7, #32]
 801c6e4:	9300      	str	r3, [sp, #0]
 801c6e6:	683b      	ldr	r3, [r7, #0]
 801c6e8:	687a      	ldr	r2, [r7, #4]
 801c6ea:	68b9      	ldr	r1, [r7, #8]
 801c6ec:	68f8      	ldr	r0, [r7, #12]
 801c6ee:	f7fe fddf 	bl	801b2b0 <arm_depthwise_conv_s8_opt>
 801c6f2:	4603      	mov	r3, r0
 801c6f4:	75fb      	strb	r3, [r7, #23]
 801c6f6:	e015      	b.n	801c724 <arm_depthwise_conv_wrapper_s8+0xba>
                                               output);
        }
    }
    else
    {
        status = arm_depthwise_conv_s8(ctx,
 801c6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6fa:	9306      	str	r3, [sp, #24]
 801c6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c6fe:	9305      	str	r3, [sp, #20]
 801c700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c702:	9304      	str	r3, [sp, #16]
 801c704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c706:	9303      	str	r3, [sp, #12]
 801c708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c70a:	9302      	str	r3, [sp, #8]
 801c70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c70e:	9301      	str	r3, [sp, #4]
 801c710:	6a3b      	ldr	r3, [r7, #32]
 801c712:	9300      	str	r3, [sp, #0]
 801c714:	683b      	ldr	r3, [r7, #0]
 801c716:	687a      	ldr	r2, [r7, #4]
 801c718:	68b9      	ldr	r1, [r7, #8]
 801c71a:	68f8      	ldr	r0, [r7, #12]
 801c71c:	f7fe fcf8 	bl	801b110 <arm_depthwise_conv_s8>
 801c720:	4603      	mov	r3, r0
 801c722:	75fb      	strb	r3, [r7, #23]
                                       output_dims,
                                       output);
    }

    /* Return to application */
    return status;
 801c724:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c728:	4618      	mov	r0, r3
 801c72a:	3718      	adds	r7, #24
 801c72c:	46bd      	mov	sp, r7
 801c72e:	bd80      	pop	{r7, pc}

0801c730 <arm_depthwise_conv_wrapper_s8_get_buffer_size>:

int32_t arm_depthwise_conv_wrapper_s8_get_buffer_size(const cmsis_nn_dw_conv_params *dw_conv_params,
                                                      const cmsis_nn_dims *input_dims,
                                                      const cmsis_nn_dims *filter_dims,
                                                      const cmsis_nn_dims *output_dims)
{
 801c730:	b580      	push	{r7, lr}
 801c732:	b086      	sub	sp, #24
 801c734:	af00      	add	r7, sp, #0
 801c736:	60f8      	str	r0, [r7, #12]
 801c738:	60b9      	str	r1, [r7, #8]
 801c73a:	607a      	str	r2, [r7, #4]
 801c73c:	603b      	str	r3, [r7, #0]
    (void)dw_conv_params;
    int32_t size = 0;
 801c73e:	2300      	movs	r3, #0
 801c740:	617b      	str	r3, [r7, #20]

    if (input_dims->c == output_dims->c)
 801c742:	68bb      	ldr	r3, [r7, #8]
 801c744:	68da      	ldr	r2, [r3, #12]
 801c746:	683b      	ldr	r3, [r7, #0]
 801c748:	68db      	ldr	r3, [r3, #12]
 801c74a:	429a      	cmp	r2, r3
 801c74c:	d104      	bne.n	801c758 <arm_depthwise_conv_wrapper_s8_get_buffer_size+0x28>
    {
        size = arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims);
 801c74e:	6879      	ldr	r1, [r7, #4]
 801c750:	68b8      	ldr	r0, [r7, #8]
 801c752:	f7ff ff74 	bl	801c63e <arm_depthwise_conv_s8_opt_get_buffer_size>
 801c756:	6178      	str	r0, [r7, #20]
    }

    return size;
 801c758:	697b      	ldr	r3, [r7, #20]
}
 801c75a:	4618      	mov	r0, r3
 801c75c:	3718      	adds	r7, #24
 801c75e:	46bd      	mov	sp, r7
 801c760:	bd80      	pop	{r7, pc}

0801c762 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 801c762:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801c766:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 801c76a:	af00      	add	r7, sp, #0
 801c76c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 801c770:	6020      	str	r0, [r4, #0]
 801c772:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801c776:	6001      	str	r1, [r0, #0]
 801c778:	4611      	mov	r1, r2
 801c77a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801c77e:	6013      	str	r3, [r2, #0]
 801c780:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 801c784:	460b      	mov	r3, r1
 801c786:	8013      	strh	r3, [r2, #0]

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 801c788:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801c78c:	881b      	ldrh	r3, [r3, #0]
 801c78e:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 801c792:	4413      	add	r3, r2
 801c794:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    const int32_t *bias = output_bias;
 801c798:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801c79c:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

    uint16_t row_count = output_ch / 2;
 801c7a0:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801c7a4:	881b      	ldrh	r3, [r3, #0]
 801c7a6:	085b      	lsrs	r3, r3, #1
 801c7a8:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
    const q7_t *ip_a0 = input_a;
 801c7ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c7b0:	681b      	ldr	r3, [r3, #0]
 801c7b2:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
    /* this loop over rows in A */
    while (row_count)
 801c7b6:	f000 bee9 	b.w	801d58c <arm_nn_mat_mult_kernel_s8_s16+0xe2a>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 801c7ba:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801c7be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c7c2:	681b      	ldr	r3, [r3, #0]
 801c7c4:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 801c7c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801c7ca:	681a      	ldr	r2, [r3, #0]
 801c7cc:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801c7d0:	005b      	lsls	r3, r3, #1
 801c7d2:	441a      	add	r2, r3
 801c7d4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c7d8:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 801c7da:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801c7de:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801c7e2:	4413      	add	r3, r2
 801c7e4:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

        /* Init accumulator with bias for channel N and N + 1 */
        q31_t ch_0_out_0 = *bias;
 801c7e8:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801c7ec:	681b      	ldr	r3, [r3, #0]
 801c7ee:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        q31_t ch_0_out_1 = *bias++;
 801c7f2:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801c7f6:	1d1a      	adds	r2, r3, #4
 801c7f8:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        q31_t ch_1_out_0 = *bias;
 801c802:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        q31_t ch_1_out_1 = *bias++;
 801c80c:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801c810:	1d1a      	adds	r2, r3, #4
 801c812:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

        uint16_t col_count = num_col_a / 4;
 801c81c:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801c820:	089b      	lsrs	r3, r3, #2
 801c822:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        /* accumulate over the vector */
        while (col_count)
 801c826:	e2a0      	b.n	801cd6a <arm_nn_mat_mult_kernel_s8_s16+0x608>
 801c828:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801c82c:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801c830:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801c832:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	681b      	ldr	r3, [r3, #0]
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	461a      	mov	r2, r3
 801c83e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c842:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801c844:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	1d1a      	adds	r2, r3, #4
 801c84e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801c852:	681b      	ldr	r3, [r3, #0]
 801c854:	601a      	str	r2, [r3, #0]
    return (val);
 801c856:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c85a:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02, a11, a12;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801c85c:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 801c860:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801c864:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 801c868:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801c86a:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	681b      	ldr	r3, [r3, #0]
 801c874:	461a      	mov	r2, r3
 801c876:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c87a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801c87c:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801c880:	681b      	ldr	r3, [r3, #0]
 801c882:	681b      	ldr	r3, [r3, #0]
 801c884:	1d1a      	adds	r2, r3, #4
 801c886:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801c88a:	681b      	ldr	r3, [r3, #0]
 801c88c:	601a      	str	r2, [r3, #0]
    return (val);
 801c88e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c892:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801c894:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 801c898:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c89c:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801c8a0:	601a      	str	r2, [r3, #0]
 801c8a2:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 801c8a6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801c8aa:	601a      	str	r2, [r3, #0]
 801c8ac:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 801c8b0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 801c8b4:	601a      	str	r2, [r3, #0]
 801c8b6:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801c8ba:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801c8be:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801c8c0:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801c8c4:	681b      	ldr	r3, [r3, #0]
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	681b      	ldr	r3, [r3, #0]
 801c8ca:	461a      	mov	r2, r3
 801c8cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c8d0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c8d2:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	681b      	ldr	r3, [r3, #0]
 801c8da:	1d1a      	adds	r2, r3, #4
 801c8dc:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	601a      	str	r2, [r3, #0]
    return (val);
 801c8e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c8e8:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801c8ea:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801c8ee:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 801c8f0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801c8f4:	681a      	ldr	r2, [r3, #0]
 801c8f6:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801c8fa:	601a      	str	r2, [r3, #0]
 801c8fc:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801c900:	2208      	movs	r2, #8
 801c902:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801c904:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 801c908:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801c90c:	681b      	ldr	r3, [r3, #0]
 801c90e:	f003 031f 	and.w	r3, r3, #31
 801c912:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c914:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801c918:	681b      	ldr	r3, [r3, #0]
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	d103      	bne.n	801c926 <arm_nn_mat_mult_kernel_s8_s16+0x1c4>
    return op1;
 801c91e:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801c922:	681b      	ldr	r3, [r3, #0]
 801c924:	e007      	b.n	801c936 <arm_nn_mat_mult_kernel_s8_s16+0x1d4>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c926:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801c92a:	f507 712e 	add.w	r1, r7, #696	; 0x2b8
 801c92e:	681a      	ldr	r2, [r3, #0]
 801c930:	680b      	ldr	r3, [r1, #0]
 801c932:	fa62 f303 	ror.w	r3, r2, r3
 801c936:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 801c93a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c93c:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	fa2f f283 	sxtb16	r2, r3
 801c946:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801c94a:	601a      	str	r2, [r3, #0]
  return(result);
 801c94c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801c950:	681a      	ldr	r2, [r3, #0]
 801c952:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801c956:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 801c958:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801c95c:	681a      	ldr	r2, [r3, #0]
 801c95e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 801c962:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c964:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	fa2f f283 	sxtb16	r2, r3
 801c96e:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 801c972:	601a      	str	r2, [r3, #0]
  return(result);
 801c974:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 801c978:	681a      	ldr	r2, [r3, #0]
 801c97a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801c97e:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801c980:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 801c984:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801c988:	681b      	ldr	r3, [r3, #0]
 801c98a:	6013      	str	r3, [r2, #0]
 801c98c:	f507 7226 	add.w	r2, r7, #664	; 0x298
 801c990:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	6013      	str	r3, [r2, #0]
 801c998:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 801c99c:	681a      	ldr	r2, [r3, #0]
 801c99e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 801c9a8:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801c9ac:	601a      	str	r2, [r3, #0]
 801c9ae:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801c9b2:	681b      	ldr	r3, [r3, #0]
 801c9b4:	461a      	mov	r2, r3
 801c9b6:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801c9be:	f507 7224 	add.w	r2, r7, #656	; 0x290
 801c9c2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	6013      	str	r3, [r2, #0]
 801c9ca:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 801c9ce:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801c9d2:	681b      	ldr	r3, [r3, #0]
 801c9d4:	6013      	str	r3, [r2, #0]
 801c9d6:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801c9da:	681a      	ldr	r2, [r3, #0]
 801c9dc:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 801c9e6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801c9ea:	601a      	str	r2, [r3, #0]
 801c9ec:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801c9f0:	681b      	ldr	r3, [r3, #0]
 801c9f2:	461a      	mov	r2, r3
 801c9f4:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	601a      	str	r2, [r3, #0]
    return source;
 801c9fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801ca00:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 801ca02:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 801ca06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801ca0a:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 801ca0e:	601a      	str	r2, [r3, #0]
 801ca10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801ca14:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801ca18:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801ca1c:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 801ca20:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801ca24:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
    memcpy(&val, *in_q7, 4);
 801ca28:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	461a      	mov	r2, r3
 801ca32:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ca36:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ca38:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	1d1a      	adds	r2, r3, #4
 801ca40:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801ca44:	601a      	str	r2, [r3, #0]
    return (val);
 801ca46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ca4a:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801ca4c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 801ca50:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 801ca54:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801ca58:	2308      	movs	r3, #8
 801ca5a:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
  op2 %= 32U;
 801ca5e:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801ca62:	f003 031f 	and.w	r3, r3, #31
 801ca66:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
  if (op2 == 0U)
 801ca6a:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d102      	bne.n	801ca78 <arm_nn_mat_mult_kernel_s8_s16+0x316>
    return op1;
 801ca72:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 801ca76:	e005      	b.n	801ca84 <arm_nn_mat_mult_kernel_s8_s16+0x322>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ca78:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 801ca7c:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801ca80:	fa62 f303 	ror.w	r3, r2, r3
 801ca84:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ca88:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 801ca8c:	fa2f f383 	sxtb16	r3, r3
 801ca90:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
  return(result);
 801ca94:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 801ca98:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
    q31_t inAbuf2 = __SXTB16(inA);
 801ca9c:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 801caa0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801caa4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801caa6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	fa2f f283 	sxtb16	r2, r3
 801cab0:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 801cab4:	601a      	str	r2, [r3, #0]
  return(result);
 801cab6:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 801caba:	681a      	ldr	r2, [r3, #0]
 801cabc:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 801cac0:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801cac2:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 801cac6:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801caca:	601a      	str	r2, [r3, #0]
 801cacc:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 801cad0:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	6013      	str	r3, [r2, #0]
 801cad8:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 801cadc:	681a      	ldr	r2, [r3, #0]
 801cade:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 801cae2:	681b      	ldr	r3, [r3, #0]
 801cae4:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 801cae8:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 801caec:	601a      	str	r2, [r3, #0]
 801caee:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 801caf2:	681b      	ldr	r3, [r3, #0]
 801caf4:	461a      	mov	r2, r3
 801caf6:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 801cafa:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801cafc:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801cb00:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 801cb04:	681b      	ldr	r3, [r3, #0]
 801cb06:	6013      	str	r3, [r2, #0]
 801cb08:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 801cb0c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801cb10:	601a      	str	r2, [r3, #0]
 801cb12:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801cb16:	681a      	ldr	r2, [r3, #0]
 801cb18:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 801cb1c:	681b      	ldr	r3, [r3, #0]
 801cb1e:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 801cb22:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 801cb26:	601a      	str	r2, [r3, #0]
 801cb28:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 801cb2c:	681b      	ldr	r3, [r3, #0]
 801cb2e:	461a      	mov	r2, r3
 801cb30:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801cb34:	601a      	str	r2, [r3, #0]
    return source;
 801cb36:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801cb3a:	681b      	ldr	r3, [r3, #0]
            ip_a1 = read_and_pad(ip_a1, &a11, &a12);
 801cb3c:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 801cb40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	4619      	mov	r1, r3
 801cb48:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 801cb4c:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 801cb50:	f8c7 1324 	str.w	r1, [r7, #804]	; 0x324
 801cb54:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801cb58:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cb5c:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 801cb60:	f8d7 1320 	ldr.w	r1, [r7, #800]	; 0x320
 801cb64:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 801cb68:	fb22 3301 	smlad	r3, r2, r1, r3
 801cb6c:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
  return(result);
 801cb70:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 801cb74:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 801cb78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801cb7c:	681b      	ldr	r3, [r3, #0]
 801cb7e:	4619      	mov	r1, r3
 801cb80:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 801cb84:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801cb88:	f8c7 1334 	str.w	r1, [r7, #820]	; 0x334
 801cb8c:	f8c7 2330 	str.w	r2, [r7, #816]	; 0x330
 801cb90:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cb94:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 801cb98:	f8d7 1330 	ldr.w	r1, [r7, #816]	; 0x330
 801cb9c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 801cba0:	fb22 3301 	smlad	r3, r2, r1, r3
 801cba4:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
  return(result);
 801cba8:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 801cbac:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
            ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 801cbb0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	4619      	mov	r1, r3
 801cbb8:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 801cbbc:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 801cbc0:	f8c7 1344 	str.w	r1, [r7, #836]	; 0x344
 801cbc4:	f8c7 2340 	str.w	r2, [r7, #832]	; 0x340
 801cbc8:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cbcc:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 801cbd0:	f8d7 1340 	ldr.w	r1, [r7, #832]	; 0x340
 801cbd4:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 801cbd8:	fb22 3301 	smlad	r3, r2, r1, r3
 801cbdc:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
  return(result);
 801cbe0:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 801cbe4:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
            ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 801cbe8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	4619      	mov	r1, r3
 801cbf0:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 801cbf4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 801cbf8:	f8c7 1354 	str.w	r1, [r7, #852]	; 0x354
 801cbfc:	f8c7 2350 	str.w	r2, [r7, #848]	; 0x350
 801cc00:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cc04:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 801cc08:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 801cc0c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 801cc10:	fb22 3301 	smlad	r3, r2, r1, r3
 801cc14:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
  return(result);
 801cc18:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 801cc1c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 801cc20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801cc24:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
    memcpy(&val, *in_q15, 4);
 801cc28:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801cc2c:	681b      	ldr	r3, [r3, #0]
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	461a      	mov	r2, r3
 801cc32:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801cc36:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801cc38:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801cc3c:	681b      	ldr	r3, [r3, #0]
 801cc3e:	1d1a      	adds	r2, r3, #4
 801cc40:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801cc44:	601a      	str	r2, [r3, #0]
    return (val);
 801cc46:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801cc4a:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801cc4c:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 801cc50:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801cc54:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
    memcpy(&val, *in_q15, 4);
 801cc58:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801cc5c:	681b      	ldr	r3, [r3, #0]
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	461a      	mov	r2, r3
 801cc62:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801cc66:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801cc68:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	1d1a      	adds	r2, r3, #4
 801cc70:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801cc74:	601a      	str	r2, [r3, #0]
    return (val);
 801cc76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801cc7a:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801cc7c:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 801cc80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801cc84:	681b      	ldr	r3, [r3, #0]
 801cc86:	4619      	mov	r1, r3
 801cc88:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 801cc8c:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 801cc90:	f8c7 136c 	str.w	r1, [r7, #876]	; 0x36c
 801cc94:	f8c7 2368 	str.w	r2, [r7, #872]	; 0x368
 801cc98:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cc9c:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 801cca0:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 801cca4:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 801cca8:	fb22 3301 	smlad	r3, r2, r1, r3
 801ccac:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
  return(result);
 801ccb0:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801ccb4:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 801ccb8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	4619      	mov	r1, r3
 801ccc0:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 801ccc4:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801ccc8:	f8c7 137c 	str.w	r1, [r7, #892]	; 0x37c
 801cccc:	f8c7 2378 	str.w	r2, [r7, #888]	; 0x378
 801ccd0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ccd4:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 801ccd8:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 801ccdc:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 801cce0:	fb22 3301 	smlad	r3, r2, r1, r3
 801cce4:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
  return(result);
 801cce8:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 801ccec:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 801ccf0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801ccf4:	681b      	ldr	r3, [r3, #0]
 801ccf6:	4619      	mov	r1, r3
 801ccf8:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 801ccfc:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 801cd00:	f8c7 138c 	str.w	r1, [r7, #908]	; 0x38c
 801cd04:	f8c7 2388 	str.w	r2, [r7, #904]	; 0x388
 801cd08:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cd0c:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 801cd10:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801cd14:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 801cd18:	fb22 3301 	smlad	r3, r2, r1, r3
 801cd1c:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
  return(result);
 801cd20:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 801cd24:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 801cd28:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801cd2c:	681b      	ldr	r3, [r3, #0]
 801cd2e:	4619      	mov	r1, r3
 801cd30:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 801cd34:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 801cd38:	f8c7 139c 	str.w	r1, [r7, #924]	; 0x39c
 801cd3c:	f8c7 2398 	str.w	r2, [r7, #920]	; 0x398
 801cd40:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cd44:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 801cd48:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 801cd4c:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 801cd50:	fb22 3301 	smlad	r3, r2, r1, r3
 801cd54:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
  return(result);
 801cd58:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801cd5c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

            col_count--;
 801cd60:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 801cd64:	3b01      	subs	r3, #1
 801cd66:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        while (col_count)
 801cd6a:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	f47f ad5a 	bne.w	801c828 <arm_nn_mat_mult_kernel_s8_s16+0xc6>
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 801cd74:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801cd78:	f003 0303 	and.w	r3, r3, #3
 801cd7c:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        while (col_count)
 801cd80:	e054      	b.n	801ce2c <arm_nn_mat_mult_kernel_s8_s16+0x6ca>
        {
            q7_t a0 = *ip_a0++;
 801cd82:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 801cd86:	1c5a      	adds	r2, r3, #1
 801cd88:	f8c7 23e0 	str.w	r2, [r7, #992]	; 0x3e0
 801cd8c:	781b      	ldrb	r3, [r3, #0]
 801cd8e:	f887 33af 	strb.w	r3, [r7, #943]	; 0x3af
            q15_t b0 = *ip_b0++;
 801cd92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801cd96:	681a      	ldr	r2, [r3, #0]
 801cd98:	1c91      	adds	r1, r2, #2
 801cd9a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801cd9e:	6019      	str	r1, [r3, #0]
 801cda0:	8813      	ldrh	r3, [r2, #0]
 801cda2:	f8a7 33ac 	strh.w	r3, [r7, #940]	; 0x3ac
            q7_t a1 = *ip_a1++;
 801cda6:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 801cdaa:	1c5a      	adds	r2, r3, #1
 801cdac:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 801cdb0:	781b      	ldrb	r3, [r3, #0]
 801cdb2:	f887 33ab 	strb.w	r3, [r7, #939]	; 0x3ab
            q15_t b1 = *ip_b1++;
 801cdb6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801cdba:	681a      	ldr	r2, [r3, #0]
 801cdbc:	1c91      	adds	r1, r2, #2
 801cdbe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801cdc2:	6019      	str	r1, [r3, #0]
 801cdc4:	8813      	ldrh	r3, [r2, #0]
 801cdc6:	f8a7 33a8 	strh.w	r3, [r7, #936]	; 0x3a8

            ch_0_out_0 += a0 * b0;
 801cdca:	f997 33af 	ldrsb.w	r3, [r7, #943]	; 0x3af
 801cdce:	f9b7 23ac 	ldrsh.w	r2, [r7, #940]	; 0x3ac
 801cdd2:	fb02 f303 	mul.w	r3, r2, r3
 801cdd6:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 801cdda:	4413      	add	r3, r2
 801cddc:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            ch_0_out_1 += a0 * b1;
 801cde0:	f997 33af 	ldrsb.w	r3, [r7, #943]	; 0x3af
 801cde4:	f9b7 23a8 	ldrsh.w	r2, [r7, #936]	; 0x3a8
 801cde8:	fb02 f303 	mul.w	r3, r2, r3
 801cdec:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 801cdf0:	4413      	add	r3, r2
 801cdf2:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
            ch_1_out_0 += a1 * b0;
 801cdf6:	f997 33ab 	ldrsb.w	r3, [r7, #939]	; 0x3ab
 801cdfa:	f9b7 23ac 	ldrsh.w	r2, [r7, #940]	; 0x3ac
 801cdfe:	fb02 f303 	mul.w	r3, r2, r3
 801ce02:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 801ce06:	4413      	add	r3, r2
 801ce08:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
            ch_1_out_1 += a1 * b1;
 801ce0c:	f997 33ab 	ldrsb.w	r3, [r7, #939]	; 0x3ab
 801ce10:	f9b7 23a8 	ldrsh.w	r2, [r7, #936]	; 0x3a8
 801ce14:	fb02 f303 	mul.w	r3, r2, r3
 801ce18:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801ce1c:	4413      	add	r3, r2
 801ce1e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
            col_count--;
 801ce22:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 801ce26:	3b01      	subs	r3, #1
 801ce28:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        while (col_count)
 801ce2c:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d1a6      	bne.n	801cd82 <arm_nn_mat_mult_kernel_s8_s16+0x620>
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 801ce34:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801ce38:	6818      	ldr	r0, [r3, #0]
 801ce3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	6819      	ldr	r1, [r3, #0]
 801ce42:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 801ce46:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 801ce4a:	6013      	str	r3, [r2, #0]
 801ce4c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801ce50:	6018      	str	r0, [r3, #0]
 801ce52:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801ce56:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ce58:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801ce62:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	fa03 f202 	lsl.w	r2, r3, r2
 801ce6c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801ce70:	601a      	str	r2, [r3, #0]
 801ce72:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801ce76:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801ce7e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801ce82:	2200      	movs	r2, #0
 801ce84:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801ce86:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ce8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801ce8e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801ce90:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ce94:	2200      	movs	r2, #0
 801ce96:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801ce98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801ce9c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	4618      	mov	r0, r3
 801cea4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801cea8:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801ceac:	681b      	ldr	r3, [r3, #0]
 801ceae:	461a      	mov	r2, r3
 801ceb0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801ceb4:	fb02 f501 	mul.w	r5, r2, r1
 801ceb8:	fb00 f403 	mul.w	r4, r0, r3
 801cebc:	442c      	add	r4, r5
 801cebe:	fba0 2302 	umull	r2, r3, r0, r2
 801cec2:	18e1      	adds	r1, r4, r3
 801cec4:	460b      	mov	r3, r1
 801cec6:	eb18 0102 	adds.w	r1, r8, r2
 801ceca:	60b9      	str	r1, [r7, #8]
 801cecc:	eb49 0303 	adc.w	r3, r9, r3
 801ced0:	60fb      	str	r3, [r7, #12]
 801ced2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801ced6:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
    result = (int32_t)(mult.long_long >> 31);
 801ceda:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801cede:	f04f 0000 	mov.w	r0, #0
 801cee2:	f04f 0100 	mov.w	r1, #0
 801cee6:	0fd0      	lsrs	r0, r2, #31
 801cee8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801ceec:	17d9      	asrs	r1, r3, #31
 801ceee:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 801cef2:	4603      	mov	r3, r0
 801cef4:	6013      	str	r3, [r2, #0]
    return result;
 801cef6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801cefa:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801cefc:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801cf00:	681b      	ldr	r3, [r3, #0]
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	dc04      	bgt.n	801cf10 <arm_nn_mat_mult_kernel_s8_s16+0x7ae>
 801cf06:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	425a      	negs	r2, r3
 801cf0e:	e000      	b.n	801cf12 <arm_nn_mat_mult_kernel_s8_s16+0x7b0>
 801cf10:	2200      	movs	r2, #0
 801cf12:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801cf16:	6019      	str	r1, [r3, #0]
 801cf18:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801cf1c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801cf1e:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801cf22:	2200      	movs	r2, #0
 801cf24:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801cf26:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801cf2a:	2201      	movs	r2, #1
 801cf2c:	681b      	ldr	r3, [r3, #0]
 801cf2e:	fa02 f303 	lsl.w	r3, r2, r3
 801cf32:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801cf36:	3b01      	subs	r3, #1
 801cf38:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801cf3a:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 801cf3e:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 801cf42:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801cf46:	6812      	ldr	r2, [r2, #0]
 801cf48:	681b      	ldr	r3, [r3, #0]
 801cf4a:	4013      	ands	r3, r2
 801cf4c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801cf4e:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 801cf52:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 801cf56:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801cf5a:	6812      	ldr	r2, [r2, #0]
 801cf5c:	681b      	ldr	r3, [r3, #0]
 801cf5e:	fa42 f303 	asr.w	r3, r2, r3
 801cf62:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801cf64:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801cf68:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	105b      	asrs	r3, r3, #1
 801cf70:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801cf72:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	da06      	bge.n	801cf8a <arm_nn_mat_mult_kernel_s8_s16+0x828>
        threshold++;
 801cf7c:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801cf80:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801cf84:	681b      	ldr	r3, [r3, #0]
 801cf86:	3301      	adds	r3, #1
 801cf88:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801cf8a:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801cf8e:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 801cf92:	681a      	ldr	r2, [r3, #0]
 801cf94:	680b      	ldr	r3, [r1, #0]
 801cf96:	429a      	cmp	r2, r3
 801cf98:	dd06      	ble.n	801cfa8 <arm_nn_mat_mult_kernel_s8_s16+0x846>
        result++;
 801cf9a:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 801cf9e:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801cfa2:	681b      	ldr	r3, [r3, #0]
 801cfa4:	3301      	adds	r3, #1
 801cfa6:	6013      	str	r3, [r2, #0]
    return result;
 801cfa8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801cfac:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801cfae:	bf00      	nop
 801cfb0:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        ch_0_out_0 += out_offset;
 801cfb4:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 801cfb8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801cfbc:	4413      	add	r3, r2
 801cfbe:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 801cfc2:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801cfc6:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 801cfca:	4293      	cmp	r3, r2
 801cfcc:	bfb8      	it	lt
 801cfce:	4613      	movlt	r3, r2
 801cfd0:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 801cfd4:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801cfd8:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 801cfdc:	4293      	cmp	r3, r2
 801cfde:	bfa8      	it	ge
 801cfe0:	4613      	movge	r3, r2
 801cfe2:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        *out_0++ = (q7_t)ch_0_out_0;
 801cfe6:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 801cfea:	1c53      	adds	r3, r2, #1
 801cfec:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 801cff0:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 801cff4:	b25b      	sxtb	r3, r3
 801cff6:	7013      	strb	r3, [r2, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 801cff8:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801cffc:	6818      	ldr	r0, [r3, #0]
 801cffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d002:	681b      	ldr	r3, [r3, #0]
 801d004:	6819      	ldr	r1, [r3, #0]
 801d006:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 801d00a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801d00e:	6013      	str	r3, [r2, #0]
 801d010:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801d014:	6018      	str	r0, [r3, #0]
 801d016:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801d01a:	6019      	str	r1, [r3, #0]
 801d01c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801d020:	681b      	ldr	r3, [r3, #0]
 801d022:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801d026:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801d02a:	681b      	ldr	r3, [r3, #0]
 801d02c:	fa03 f202 	lsl.w	r2, r3, r2
 801d030:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801d034:	601a      	str	r2, [r3, #0]
 801d036:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 801d03a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d042:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801d046:	2200      	movs	r2, #0
 801d048:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801d04a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d04e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d052:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801d054:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d058:	2200      	movs	r2, #0
 801d05a:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d05c:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 801d060:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801d064:	681b      	ldr	r3, [r3, #0]
 801d066:	4618      	mov	r0, r3
 801d068:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d06c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801d070:	681b      	ldr	r3, [r3, #0]
 801d072:	461a      	mov	r2, r3
 801d074:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d078:	fb02 f501 	mul.w	r5, r2, r1
 801d07c:	fb00 f403 	mul.w	r4, r0, r3
 801d080:	442c      	add	r4, r5
 801d082:	fba0 2302 	umull	r2, r3, r0, r2
 801d086:	18e1      	adds	r1, r4, r3
 801d088:	460b      	mov	r3, r1
 801d08a:	eb18 0102 	adds.w	r1, r8, r2
 801d08e:	6139      	str	r1, [r7, #16]
 801d090:	eb49 0303 	adc.w	r3, r9, r3
 801d094:	617b      	str	r3, [r7, #20]
 801d096:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801d09a:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
    result = (int32_t)(mult.long_long >> 31);
 801d09e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801d0a2:	f04f 0000 	mov.w	r0, #0
 801d0a6:	f04f 0100 	mov.w	r1, #0
 801d0aa:	0fd0      	lsrs	r0, r2, #31
 801d0ac:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801d0b0:	17d9      	asrs	r1, r3, #31
 801d0b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801d0b6:	4603      	mov	r3, r0
 801d0b8:	6013      	str	r3, [r2, #0]
    return result;
 801d0ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801d0be:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d0c0:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801d0c4:	681b      	ldr	r3, [r3, #0]
 801d0c6:	2b00      	cmp	r3, #0
 801d0c8:	dc04      	bgt.n	801d0d4 <arm_nn_mat_mult_kernel_s8_s16+0x972>
 801d0ca:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	425a      	negs	r2, r3
 801d0d2:	e000      	b.n	801d0d6 <arm_nn_mat_mult_kernel_s8_s16+0x974>
 801d0d4:	2200      	movs	r2, #0
 801d0d6:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801d0da:	6019      	str	r1, [r3, #0]
 801d0dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801d0e0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d0e2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801d0e6:	2200      	movs	r2, #0
 801d0e8:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d0ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801d0ee:	2201      	movs	r2, #1
 801d0f0:	681b      	ldr	r3, [r3, #0]
 801d0f2:	fa02 f303 	lsl.w	r3, r2, r3
 801d0f6:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801d0fa:	3b01      	subs	r3, #1
 801d0fc:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801d0fe:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 801d102:	f507 7201 	add.w	r2, r7, #516	; 0x204
 801d106:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801d10a:	6812      	ldr	r2, [r2, #0]
 801d10c:	681b      	ldr	r3, [r3, #0]
 801d10e:	4013      	ands	r3, r2
 801d110:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801d112:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 801d116:	f507 7201 	add.w	r2, r7, #516	; 0x204
 801d11a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801d11e:	6812      	ldr	r2, [r2, #0]
 801d120:	681b      	ldr	r3, [r3, #0]
 801d122:	fa42 f303 	asr.w	r3, r2, r3
 801d126:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801d128:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 801d12c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	105b      	asrs	r3, r3, #1
 801d134:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801d136:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	da06      	bge.n	801d14e <arm_nn_mat_mult_kernel_s8_s16+0x9ec>
        threshold++;
 801d140:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 801d144:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	3301      	adds	r3, #1
 801d14c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801d14e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801d152:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 801d156:	681a      	ldr	r2, [r3, #0]
 801d158:	680b      	ldr	r3, [r1, #0]
 801d15a:	429a      	cmp	r2, r3
 801d15c:	dd06      	ble.n	801d16c <arm_nn_mat_mult_kernel_s8_s16+0xa0a>
        result++;
 801d15e:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 801d162:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	3301      	adds	r3, #1
 801d16a:	6013      	str	r3, [r2, #0]
    return result;
 801d16c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801d170:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d172:	bf00      	nop
 801d174:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        ch_0_out_1 += out_offset;
 801d178:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 801d17c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801d180:	4413      	add	r3, r2
 801d182:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801d186:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801d18a:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 801d18e:	4293      	cmp	r3, r2
 801d190:	bfb8      	it	lt
 801d192:	4613      	movlt	r3, r2
 801d194:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801d198:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801d19c:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 801d1a0:	4293      	cmp	r3, r2
 801d1a2:	bfa8      	it	ge
 801d1a4:	4613      	movge	r3, r2
 801d1a6:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        *out_1++ = (q7_t)ch_0_out_1;
 801d1aa:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801d1ae:	1c53      	adds	r3, r2, #1
 801d1b0:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 801d1b4:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801d1b8:	b25b      	sxtb	r3, r3
 801d1ba:	7013      	strb	r3, [r2, #0]
        out_mult++;
 801d1bc:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801d1c0:	3304      	adds	r3, #4
 801d1c2:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
        out_shift++;
 801d1c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d1ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	3304      	adds	r3, #4
 801d1d2:	6013      	str	r3, [r2, #0]

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 801d1d4:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801d1d8:	6818      	ldr	r0, [r3, #0]
 801d1da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	6819      	ldr	r1, [r3, #0]
 801d1e2:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 801d1e6:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 801d1ea:	6013      	str	r3, [r2, #0]
 801d1ec:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801d1f0:	6018      	str	r0, [r3, #0]
 801d1f2:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801d1f6:	6019      	str	r1, [r3, #0]
 801d1f8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801d1fc:	681b      	ldr	r3, [r3, #0]
 801d1fe:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801d202:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 801d206:	681b      	ldr	r3, [r3, #0]
 801d208:	fa03 f202 	lsl.w	r2, r3, r2
 801d20c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801d210:	601a      	str	r2, [r3, #0]
 801d212:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 801d216:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d21e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801d222:	2200      	movs	r2, #0
 801d224:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801d226:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d22a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d22e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801d230:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d234:	2200      	movs	r2, #0
 801d236:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d238:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 801d23c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801d240:	681b      	ldr	r3, [r3, #0]
 801d242:	4618      	mov	r0, r3
 801d244:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d248:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801d24c:	681b      	ldr	r3, [r3, #0]
 801d24e:	461a      	mov	r2, r3
 801d250:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d254:	fb02 f501 	mul.w	r5, r2, r1
 801d258:	fb00 f403 	mul.w	r4, r0, r3
 801d25c:	442c      	add	r4, r5
 801d25e:	fba0 2302 	umull	r2, r3, r0, r2
 801d262:	18e1      	adds	r1, r4, r3
 801d264:	460b      	mov	r3, r1
 801d266:	eb18 0102 	adds.w	r1, r8, r2
 801d26a:	61b9      	str	r1, [r7, #24]
 801d26c:	eb49 0303 	adc.w	r3, r9, r3
 801d270:	61fb      	str	r3, [r7, #28]
 801d272:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801d276:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    result = (int32_t)(mult.long_long >> 31);
 801d27a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801d27e:	f04f 0000 	mov.w	r0, #0
 801d282:	f04f 0100 	mov.w	r1, #0
 801d286:	0fd0      	lsrs	r0, r2, #31
 801d288:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801d28c:	17d9      	asrs	r1, r3, #31
 801d28e:	f507 720e 	add.w	r2, r7, #568	; 0x238
 801d292:	4603      	mov	r3, r0
 801d294:	6013      	str	r3, [r2, #0]
    return result;
 801d296:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801d29a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d29c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801d2a0:	681b      	ldr	r3, [r3, #0]
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	dc04      	bgt.n	801d2b0 <arm_nn_mat_mult_kernel_s8_s16+0xb4e>
 801d2a6:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801d2aa:	681b      	ldr	r3, [r3, #0]
 801d2ac:	425a      	negs	r2, r3
 801d2ae:	e000      	b.n	801d2b2 <arm_nn_mat_mult_kernel_s8_s16+0xb50>
 801d2b0:	2200      	movs	r2, #0
 801d2b2:	f507 730d 	add.w	r3, r7, #564	; 0x234
 801d2b6:	6019      	str	r1, [r3, #0]
 801d2b8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801d2bc:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d2be:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801d2c2:	2200      	movs	r2, #0
 801d2c4:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d2c6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801d2ca:	2201      	movs	r2, #1
 801d2cc:	681b      	ldr	r3, [r3, #0]
 801d2ce:	fa02 f303 	lsl.w	r3, r2, r3
 801d2d2:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801d2d6:	3b01      	subs	r3, #1
 801d2d8:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801d2da:	f507 7109 	add.w	r1, r7, #548	; 0x224
 801d2de:	f507 720d 	add.w	r2, r7, #564	; 0x234
 801d2e2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801d2e6:	6812      	ldr	r2, [r2, #0]
 801d2e8:	681b      	ldr	r3, [r3, #0]
 801d2ea:	4013      	ands	r3, r2
 801d2ec:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801d2ee:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 801d2f2:	f507 720d 	add.w	r2, r7, #564	; 0x234
 801d2f6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801d2fa:	6812      	ldr	r2, [r2, #0]
 801d2fc:	681b      	ldr	r3, [r3, #0]
 801d2fe:	fa42 f303 	asr.w	r3, r2, r3
 801d302:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801d304:	f507 7208 	add.w	r2, r7, #544	; 0x220
 801d308:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801d30c:	681b      	ldr	r3, [r3, #0]
 801d30e:	105b      	asrs	r3, r3, #1
 801d310:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801d312:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	2b00      	cmp	r3, #0
 801d31a:	da06      	bge.n	801d32a <arm_nn_mat_mult_kernel_s8_s16+0xbc8>
        threshold++;
 801d31c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 801d320:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801d324:	681b      	ldr	r3, [r3, #0]
 801d326:	3301      	adds	r3, #1
 801d328:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801d32a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801d32e:	f507 7108 	add.w	r1, r7, #544	; 0x220
 801d332:	681a      	ldr	r2, [r3, #0]
 801d334:	680b      	ldr	r3, [r1, #0]
 801d336:	429a      	cmp	r2, r3
 801d338:	dd06      	ble.n	801d348 <arm_nn_mat_mult_kernel_s8_s16+0xbe6>
        result++;
 801d33a:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 801d33e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801d342:	681b      	ldr	r3, [r3, #0]
 801d344:	3301      	adds	r3, #1
 801d346:	6013      	str	r3, [r2, #0]
    return result;
 801d348:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801d34c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d34e:	bf00      	nop
 801d350:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        ch_1_out_0 += out_offset;
 801d354:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 801d358:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801d35c:	4413      	add	r3, r2
 801d35e:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 801d362:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801d366:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 801d36a:	4293      	cmp	r3, r2
 801d36c:	bfb8      	it	lt
 801d36e:	4613      	movlt	r3, r2
 801d370:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 801d374:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801d378:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 801d37c:	4293      	cmp	r3, r2
 801d37e:	bfa8      	it	ge
 801d380:	4613      	movge	r3, r2
 801d382:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        *out_0++ = (q7_t)ch_1_out_0;
 801d386:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 801d38a:	1c53      	adds	r3, r2, #1
 801d38c:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 801d390:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 801d394:	b25b      	sxtb	r3, r3
 801d396:	7013      	strb	r3, [r2, #0]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 801d398:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801d39c:	6818      	ldr	r0, [r3, #0]
 801d39e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	6819      	ldr	r1, [r3, #0]
 801d3a6:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 801d3aa:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 801d3ae:	6013      	str	r3, [r2, #0]
 801d3b0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801d3b4:	6018      	str	r0, [r3, #0]
 801d3b6:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801d3ba:	6019      	str	r1, [r3, #0]
 801d3bc:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801d3c0:	681b      	ldr	r3, [r3, #0]
 801d3c2:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801d3c6:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 801d3ca:	681b      	ldr	r3, [r3, #0]
 801d3cc:	fa03 f202 	lsl.w	r2, r3, r2
 801d3d0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801d3d4:	601a      	str	r2, [r3, #0]
 801d3d6:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 801d3da:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801d3de:	681b      	ldr	r3, [r3, #0]
 801d3e0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d3e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801d3e6:	2200      	movs	r2, #0
 801d3e8:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801d3ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d3ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d3f2:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801d3f4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d3f8:	2200      	movs	r2, #0
 801d3fa:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d3fc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801d400:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	4618      	mov	r0, r3
 801d408:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d40c:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801d410:	681b      	ldr	r3, [r3, #0]
 801d412:	461a      	mov	r2, r3
 801d414:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d418:	fb02 f501 	mul.w	r5, r2, r1
 801d41c:	fb00 f403 	mul.w	r4, r0, r3
 801d420:	442c      	add	r4, r5
 801d422:	fba0 2302 	umull	r2, r3, r0, r2
 801d426:	18e1      	adds	r1, r4, r3
 801d428:	460b      	mov	r3, r1
 801d42a:	eb18 0102 	adds.w	r1, r8, r2
 801d42e:	6239      	str	r1, [r7, #32]
 801d430:	eb49 0303 	adc.w	r3, r9, r3
 801d434:	627b      	str	r3, [r7, #36]	; 0x24
 801d436:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801d43a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
    result = (int32_t)(mult.long_long >> 31);
 801d43e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 801d442:	f04f 0000 	mov.w	r0, #0
 801d446:	f04f 0100 	mov.w	r1, #0
 801d44a:	0fd0      	lsrs	r0, r2, #31
 801d44c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801d450:	17d9      	asrs	r1, r3, #31
 801d452:	f507 721a 	add.w	r2, r7, #616	; 0x268
 801d456:	4603      	mov	r3, r0
 801d458:	6013      	str	r3, [r2, #0]
    return result;
 801d45a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801d45e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d460:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	2b00      	cmp	r3, #0
 801d468:	dc04      	bgt.n	801d474 <arm_nn_mat_mult_kernel_s8_s16+0xd12>
 801d46a:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801d46e:	681b      	ldr	r3, [r3, #0]
 801d470:	425a      	negs	r2, r3
 801d472:	e000      	b.n	801d476 <arm_nn_mat_mult_kernel_s8_s16+0xd14>
 801d474:	2200      	movs	r2, #0
 801d476:	f507 7319 	add.w	r3, r7, #612	; 0x264
 801d47a:	6019      	str	r1, [r3, #0]
 801d47c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801d480:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d482:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801d486:	2200      	movs	r2, #0
 801d488:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d48a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801d48e:	2201      	movs	r2, #1
 801d490:	681b      	ldr	r3, [r3, #0]
 801d492:	fa02 f303 	lsl.w	r3, r2, r3
 801d496:	f507 7216 	add.w	r2, r7, #600	; 0x258
 801d49a:	3b01      	subs	r3, #1
 801d49c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801d49e:	f507 7115 	add.w	r1, r7, #596	; 0x254
 801d4a2:	f507 7219 	add.w	r2, r7, #612	; 0x264
 801d4a6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801d4aa:	6812      	ldr	r2, [r2, #0]
 801d4ac:	681b      	ldr	r3, [r3, #0]
 801d4ae:	4013      	ands	r3, r2
 801d4b0:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801d4b2:	f507 7117 	add.w	r1, r7, #604	; 0x25c
 801d4b6:	f507 7219 	add.w	r2, r7, #612	; 0x264
 801d4ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801d4be:	6812      	ldr	r2, [r2, #0]
 801d4c0:	681b      	ldr	r3, [r3, #0]
 801d4c2:	fa42 f303 	asr.w	r3, r2, r3
 801d4c6:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801d4c8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801d4cc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801d4d0:	681b      	ldr	r3, [r3, #0]
 801d4d2:	105b      	asrs	r3, r3, #1
 801d4d4:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801d4d6:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	da06      	bge.n	801d4ee <arm_nn_mat_mult_kernel_s8_s16+0xd8c>
        threshold++;
 801d4e0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801d4e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801d4e8:	681b      	ldr	r3, [r3, #0]
 801d4ea:	3301      	adds	r3, #1
 801d4ec:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801d4ee:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801d4f2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 801d4f6:	681a      	ldr	r2, [r3, #0]
 801d4f8:	680b      	ldr	r3, [r1, #0]
 801d4fa:	429a      	cmp	r2, r3
 801d4fc:	dd06      	ble.n	801d50c <arm_nn_mat_mult_kernel_s8_s16+0xdaa>
        result++;
 801d4fe:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 801d502:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	3301      	adds	r3, #1
 801d50a:	6013      	str	r3, [r2, #0]
    return result;
 801d50c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801d510:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d512:	bf00      	nop
 801d514:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        ch_1_out_1 += out_offset;
 801d518:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801d51c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801d520:	4413      	add	r3, r2
 801d522:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 801d526:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801d52a:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801d52e:	4293      	cmp	r3, r2
 801d530:	bfb8      	it	lt
 801d532:	4613      	movlt	r3, r2
 801d534:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 801d538:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801d53c:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801d540:	4293      	cmp	r3, r2
 801d542:	bfa8      	it	ge
 801d544:	4613      	movge	r3, r2
 801d546:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        *out_1++ = (q7_t)ch_1_out_1;
 801d54a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801d54e:	1c53      	adds	r3, r2, #1
 801d550:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 801d554:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 801d558:	b25b      	sxtb	r3, r3
 801d55a:	7013      	strb	r3, [r2, #0]
        out_mult++;
 801d55c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801d560:	3304      	adds	r3, #4
 801d562:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
        out_shift++;
 801d566:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d56a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d56e:	681b      	ldr	r3, [r3, #0]
 801d570:	3304      	adds	r3, #4
 801d572:	6013      	str	r3, [r2, #0]

        /* skip row */
        ip_a0 += num_col_a;
 801d574:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801d578:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801d57c:	4413      	add	r3, r2
 801d57e:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        row_count--;
 801d582:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 801d586:	3b01      	subs	r3, #1
 801d588:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
    while (row_count)
 801d58c:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 801d590:	2b00      	cmp	r3, #0
 801d592:	f47f a912 	bne.w	801c7ba <arm_nn_mat_mult_kernel_s8_s16+0x58>
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 801d596:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801d59a:	881b      	ldrh	r3, [r3, #0]
 801d59c:	f003 0301 	and.w	r3, r3, #1
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	f000 83ed 	beq.w	801dd80 <arm_nn_mat_mult_kernel_s8_s16+0x161e>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 801d5a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801d5aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801d5ae:	6812      	ldr	r2, [r2, #0]
 801d5b0:	601a      	str	r2, [r3, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 801d5b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801d5b6:	681a      	ldr	r2, [r3, #0]
 801d5b8:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801d5bc:	005b      	lsls	r3, r3, #1
 801d5be:	441a      	add	r2, r3
 801d5c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d5c4:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 801d5c6:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801d5ca:	681b      	ldr	r3, [r3, #0]
 801d5cc:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        q31_t ch_0_out_1 = *bias++;
 801d5d0:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801d5d4:	1d1a      	adds	r2, r3, #4
 801d5d6:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 801d5da:	681b      	ldr	r3, [r3, #0]
 801d5dc:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0

        uint16_t col_count = num_col_a >> 2;
 801d5e0:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801d5e4:	089b      	lsrs	r3, r3, #2
 801d5e6:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 801d5ea:	e1bb      	b.n	801d964 <arm_nn_mat_mult_kernel_s8_s16+0x1202>
 801d5ec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d5f0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801d5f4:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801d5f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d5fa:	681b      	ldr	r3, [r3, #0]
 801d5fc:	681b      	ldr	r3, [r3, #0]
 801d5fe:	681b      	ldr	r3, [r3, #0]
 801d600:	461a      	mov	r2, r3
 801d602:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801d606:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d608:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d60c:	681b      	ldr	r3, [r3, #0]
 801d60e:	681b      	ldr	r3, [r3, #0]
 801d610:	1d1a      	adds	r2, r3, #4
 801d612:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	601a      	str	r2, [r3, #0]
    return (val);
 801d61a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801d61e:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801d620:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 801d624:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801d628:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801d62c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801d62e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801d632:	681b      	ldr	r3, [r3, #0]
 801d634:	681b      	ldr	r3, [r3, #0]
 801d636:	681b      	ldr	r3, [r3, #0]
 801d638:	461a      	mov	r2, r3
 801d63a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d63e:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d640:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801d644:	681b      	ldr	r3, [r3, #0]
 801d646:	681b      	ldr	r3, [r3, #0]
 801d648:	1d1a      	adds	r2, r3, #4
 801d64a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801d64e:	681b      	ldr	r3, [r3, #0]
 801d650:	601a      	str	r2, [r3, #0]
    return (val);
 801d652:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d656:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801d658:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 801d65c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d660:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801d664:	601a      	str	r2, [r3, #0]
 801d666:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801d66a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801d66e:	601a      	str	r2, [r3, #0]
 801d670:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801d674:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d678:	601a      	str	r2, [r3, #0]
 801d67a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801d67e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801d682:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801d684:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	681b      	ldr	r3, [r3, #0]
 801d68c:	681b      	ldr	r3, [r3, #0]
 801d68e:	461a      	mov	r2, r3
 801d690:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d694:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801d696:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801d69a:	681b      	ldr	r3, [r3, #0]
 801d69c:	681b      	ldr	r3, [r3, #0]
 801d69e:	1d1a      	adds	r2, r3, #4
 801d6a0:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801d6a4:	681b      	ldr	r3, [r3, #0]
 801d6a6:	601a      	str	r2, [r3, #0]
    return (val);
 801d6a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d6ac:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801d6ae:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801d6b2:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 801d6b4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801d6b8:	681a      	ldr	r2, [r3, #0]
 801d6ba:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801d6be:	601a      	str	r2, [r3, #0]
 801d6c0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801d6c4:	2208      	movs	r2, #8
 801d6c6:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801d6c8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801d6cc:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801d6d0:	6812      	ldr	r2, [r2, #0]
 801d6d2:	f002 021f 	and.w	r2, r2, #31
 801d6d6:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801d6d8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801d6dc:	681b      	ldr	r3, [r3, #0]
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d103      	bne.n	801d6ea <arm_nn_mat_mult_kernel_s8_s16+0xf88>
    return op1;
 801d6e2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801d6e6:	681b      	ldr	r3, [r3, #0]
 801d6e8:	e007      	b.n	801d6fa <arm_nn_mat_mult_kernel_s8_s16+0xf98>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d6ea:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 801d6ee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801d6f2:	6812      	ldr	r2, [r2, #0]
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	fa62 f303 	ror.w	r3, r2, r3
 801d6fa:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 801d6fe:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d700:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801d704:	681b      	ldr	r3, [r3, #0]
 801d706:	fa2f f283 	sxtb16	r2, r3
 801d70a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801d70e:	601a      	str	r2, [r3, #0]
  return(result);
 801d710:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801d714:	681a      	ldr	r2, [r3, #0]
 801d716:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801d71a:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 801d71c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801d720:	681a      	ldr	r2, [r3, #0]
 801d722:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801d726:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d728:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801d72c:	681b      	ldr	r3, [r3, #0]
 801d72e:	fa2f f283 	sxtb16	r2, r3
 801d732:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801d736:	601a      	str	r2, [r3, #0]
  return(result);
 801d738:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801d73c:	681a      	ldr	r2, [r3, #0]
 801d73e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801d742:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801d744:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801d748:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 801d74c:	6812      	ldr	r2, [r2, #0]
 801d74e:	601a      	str	r2, [r3, #0]
 801d750:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801d754:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801d758:	6812      	ldr	r2, [r2, #0]
 801d75a:	601a      	str	r2, [r3, #0]
 801d75c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801d760:	681b      	ldr	r3, [r3, #0]
 801d762:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801d766:	6812      	ldr	r2, [r2, #0]
 801d768:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801d76c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801d770:	601a      	str	r2, [r3, #0]
 801d772:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801d776:	681b      	ldr	r3, [r3, #0]
 801d778:	461a      	mov	r2, r3
 801d77a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801d782:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801d786:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801d78a:	6812      	ldr	r2, [r2, #0]
 801d78c:	601a      	str	r2, [r3, #0]
 801d78e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801d792:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 801d796:	6812      	ldr	r2, [r2, #0]
 801d798:	601a      	str	r2, [r3, #0]
 801d79a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	f507 729a 	add.w	r2, r7, #308	; 0x134
 801d7a4:	6812      	ldr	r2, [r2, #0]
 801d7a6:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 801d7aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d7ae:	601a      	str	r2, [r3, #0]
 801d7b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d7b4:	681b      	ldr	r3, [r3, #0]
 801d7b6:	461a      	mov	r2, r3
 801d7b8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801d7bc:	681b      	ldr	r3, [r3, #0]
 801d7be:	601a      	str	r2, [r3, #0]
    return source;
 801d7c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d7c4:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 801d7c6:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 801d7ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d7ce:	681b      	ldr	r3, [r3, #0]
 801d7d0:	4618      	mov	r0, r3
 801d7d2:	f8d7 13b4 	ldr.w	r1, [r7, #948]	; 0x3b4
 801d7d6:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801d7da:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801d7de:	6018      	str	r0, [r3, #0]
 801d7e0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801d7e4:	6019      	str	r1, [r3, #0]
 801d7e6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801d7ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d7ec:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801d7f0:	681b      	ldr	r3, [r3, #0]
 801d7f2:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 801d7f6:	6812      	ldr	r2, [r2, #0]
 801d7f8:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 801d7fc:	6809      	ldr	r1, [r1, #0]
 801d7fe:	fb23 1202 	smlad	r2, r3, r2, r1
 801d802:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801d806:	601a      	str	r2, [r3, #0]
  return(result);
 801d808:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801d80c:	681b      	ldr	r3, [r3, #0]
 801d80e:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 801d812:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d816:	681b      	ldr	r3, [r3, #0]
 801d818:	4618      	mov	r0, r3
 801d81a:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 801d81e:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801d822:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801d826:	6018      	str	r0, [r3, #0]
 801d828:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801d82c:	6019      	str	r1, [r3, #0]
 801d82e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801d832:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d834:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801d838:	681b      	ldr	r3, [r3, #0]
 801d83a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 801d83e:	6812      	ldr	r2, [r2, #0]
 801d840:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 801d844:	6809      	ldr	r1, [r1, #0]
 801d846:	fb23 1202 	smlad	r2, r3, r2, r1
 801d84a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801d84e:	601a      	str	r2, [r3, #0]
  return(result);
 801d850:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801d854:	681b      	ldr	r3, [r3, #0]
 801d856:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 801d85a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801d85e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801d862:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801d864:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801d868:	681b      	ldr	r3, [r3, #0]
 801d86a:	681b      	ldr	r3, [r3, #0]
 801d86c:	681b      	ldr	r3, [r3, #0]
 801d86e:	461a      	mov	r2, r3
 801d870:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d874:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d876:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801d87a:	681b      	ldr	r3, [r3, #0]
 801d87c:	681b      	ldr	r3, [r3, #0]
 801d87e:	1d1a      	adds	r2, r3, #4
 801d880:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	601a      	str	r2, [r3, #0]
    return (val);
 801d888:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d88c:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801d88e:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 801d892:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801d896:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801d89a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801d89c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801d8a0:	681b      	ldr	r3, [r3, #0]
 801d8a2:	681b      	ldr	r3, [r3, #0]
 801d8a4:	681b      	ldr	r3, [r3, #0]
 801d8a6:	461a      	mov	r2, r3
 801d8a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d8ac:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d8ae:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801d8b2:	681b      	ldr	r3, [r3, #0]
 801d8b4:	681b      	ldr	r3, [r3, #0]
 801d8b6:	1d1a      	adds	r2, r3, #4
 801d8b8:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	601a      	str	r2, [r3, #0]
    return (val);
 801d8c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d8c4:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801d8c6:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 801d8ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d8ce:	681b      	ldr	r3, [r3, #0]
 801d8d0:	4618      	mov	r0, r3
 801d8d2:	f8d7 13b4 	ldr.w	r1, [r7, #948]	; 0x3b4
 801d8d6:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801d8da:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801d8de:	6018      	str	r0, [r3, #0]
 801d8e0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801d8e4:	6019      	str	r1, [r3, #0]
 801d8e6:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801d8ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d8ec:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801d8f0:	681b      	ldr	r3, [r3, #0]
 801d8f2:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 801d8f6:	6812      	ldr	r2, [r2, #0]
 801d8f8:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 801d8fc:	6809      	ldr	r1, [r1, #0]
 801d8fe:	fb23 1202 	smlad	r2, r3, r2, r1
 801d902:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801d906:	601a      	str	r2, [r3, #0]
  return(result);
 801d908:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801d90c:	681b      	ldr	r3, [r3, #0]
 801d90e:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 801d912:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	4618      	mov	r0, r3
 801d91a:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 801d91e:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801d922:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801d926:	6018      	str	r0, [r3, #0]
 801d928:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801d92c:	6019      	str	r1, [r3, #0]
 801d92e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801d932:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d934:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801d938:	681b      	ldr	r3, [r3, #0]
 801d93a:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 801d93e:	6812      	ldr	r2, [r2, #0]
 801d940:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 801d944:	6809      	ldr	r1, [r1, #0]
 801d946:	fb23 1202 	smlad	r2, r3, r2, r1
 801d94a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801d94e:	601a      	str	r2, [r3, #0]
  return(result);
 801d950:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801d954:	681b      	ldr	r3, [r3, #0]
 801d956:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0

            col_count--;
 801d95a:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 801d95e:	3b01      	subs	r3, #1
 801d960:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 801d964:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 801d968:	2b00      	cmp	r3, #0
 801d96a:	f47f ae3f 	bne.w	801d5ec <arm_nn_mat_mult_kernel_s8_s16+0xe8a>
        }
        col_count = num_col_a & 0x3;
 801d96e:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801d972:	f003 0303 	and.w	r3, r3, #3
 801d976:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 801d97a:	e036      	b.n	801d9ea <arm_nn_mat_mult_kernel_s8_s16+0x1288>
        {
            q7_t a0 = *ip_a0++;
 801d97c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 801d980:	1c5a      	adds	r2, r3, #1
 801d982:	f8c7 23e0 	str.w	r2, [r7, #992]	; 0x3e0
 801d986:	781b      	ldrb	r3, [r3, #0]
 801d988:	f887 33bd 	strb.w	r3, [r7, #957]	; 0x3bd
            q15_t b0 = *ip_b0++;
 801d98c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801d990:	681b      	ldr	r3, [r3, #0]
 801d992:	1c99      	adds	r1, r3, #2
 801d994:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801d998:	6011      	str	r1, [r2, #0]
 801d99a:	881b      	ldrh	r3, [r3, #0]
 801d99c:	f8a7 33ba 	strh.w	r3, [r7, #954]	; 0x3ba
            q15_t b1 = *ip_b1++;
 801d9a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d9a4:	681b      	ldr	r3, [r3, #0]
 801d9a6:	1c99      	adds	r1, r3, #2
 801d9a8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801d9ac:	6011      	str	r1, [r2, #0]
 801d9ae:	881b      	ldrh	r3, [r3, #0]
 801d9b0:	f8a7 33b8 	strh.w	r3, [r7, #952]	; 0x3b8

            ch_0_out_0 += a0 * b0;
 801d9b4:	f997 33bd 	ldrsb.w	r3, [r7, #957]	; 0x3bd
 801d9b8:	f9b7 23ba 	ldrsh.w	r2, [r7, #954]	; 0x3ba
 801d9bc:	fb02 f303 	mul.w	r3, r2, r3
 801d9c0:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801d9c4:	4413      	add	r3, r2
 801d9c6:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
            ch_0_out_1 += a0 * b1;
 801d9ca:	f997 33bd 	ldrsb.w	r3, [r7, #957]	; 0x3bd
 801d9ce:	f9b7 23b8 	ldrsh.w	r2, [r7, #952]	; 0x3b8
 801d9d2:	fb02 f303 	mul.w	r3, r2, r3
 801d9d6:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801d9da:	4413      	add	r3, r2
 801d9dc:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
            col_count--;
 801d9e0:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 801d9e4:	3b01      	subs	r3, #1
 801d9e6:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 801d9ea:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 801d9ee:	2b00      	cmp	r3, #0
 801d9f0:	d1c4      	bne.n	801d97c <arm_nn_mat_mult_kernel_s8_s16+0x121a>
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 801d9f2:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801d9f6:	6819      	ldr	r1, [r3, #0]
 801d9f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d9fc:	681b      	ldr	r3, [r3, #0]
 801d9fe:	681a      	ldr	r2, [r3, #0]
 801da00:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801da04:	f8d7 03c4 	ldr.w	r0, [r7, #964]	; 0x3c4
 801da08:	6018      	str	r0, [r3, #0]
 801da0a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801da0e:	6019      	str	r1, [r3, #0]
 801da10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801da14:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801da16:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801da1a:	681b      	ldr	r3, [r3, #0]
 801da1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801da20:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 801da24:	6812      	ldr	r2, [r2, #0]
 801da26:	409a      	lsls	r2, r3
 801da28:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801da2c:	601a      	str	r2, [r3, #0]
 801da2e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801da32:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801da36:	6812      	ldr	r2, [r2, #0]
 801da38:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801da3a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801da3e:	2200      	movs	r2, #0
 801da40:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801da42:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801da46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801da4a:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801da4c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801da50:	2200      	movs	r2, #0
 801da52:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801da54:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801da58:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801da5c:	681b      	ldr	r3, [r3, #0]
 801da5e:	4618      	mov	r0, r3
 801da60:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801da64:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801da68:	681b      	ldr	r3, [r3, #0]
 801da6a:	461a      	mov	r2, r3
 801da6c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801da70:	fb02 fc01 	mul.w	ip, r2, r1
 801da74:	fb00 f603 	mul.w	r6, r0, r3
 801da78:	4466      	add	r6, ip
 801da7a:	fba0 2302 	umull	r2, r3, r0, r2
 801da7e:	18f1      	adds	r1, r6, r3
 801da80:	460b      	mov	r3, r1
 801da82:	18a1      	adds	r1, r4, r2
 801da84:	6039      	str	r1, [r7, #0]
 801da86:	eb45 0303 	adc.w	r3, r5, r3
 801da8a:	607b      	str	r3, [r7, #4]
 801da8c:	e9d7 3400 	ldrd	r3, r4, [r7]
 801da90:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 801da94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801da98:	f04f 0200 	mov.w	r2, #0
 801da9c:	f04f 0300 	mov.w	r3, #0
 801daa0:	0fc2      	lsrs	r2, r0, #31
 801daa2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801daa6:	17cb      	asrs	r3, r1, #31
 801daa8:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 801daac:	4613      	mov	r3, r2
 801daae:	600b      	str	r3, [r1, #0]
    return result;
 801dab0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801dab4:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801dab6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	dc04      	bgt.n	801daca <arm_nn_mat_mult_kernel_s8_s16+0x1368>
 801dac0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801dac4:	681b      	ldr	r3, [r3, #0]
 801dac6:	425b      	negs	r3, r3
 801dac8:	e000      	b.n	801dacc <arm_nn_mat_mult_kernel_s8_s16+0x136a>
 801daca:	2300      	movs	r3, #0
 801dacc:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801dad0:	6011      	str	r1, [r2, #0]
 801dad2:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801dad6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801dad8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801dadc:	2200      	movs	r2, #0
 801dade:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801dae0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801dae4:	2201      	movs	r2, #1
 801dae6:	681b      	ldr	r3, [r3, #0]
 801dae8:	409a      	lsls	r2, r3
 801daea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801daee:	3a01      	subs	r2, #1
 801daf0:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801daf2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801daf6:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 801dafa:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801dafe:	6809      	ldr	r1, [r1, #0]
 801db00:	6812      	ldr	r2, [r2, #0]
 801db02:	400a      	ands	r2, r1
 801db04:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801db06:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801db0a:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 801db0e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801db12:	6809      	ldr	r1, [r1, #0]
 801db14:	6812      	ldr	r2, [r2, #0]
 801db16:	fa41 f202 	asr.w	r2, r1, r2
 801db1a:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801db1c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801db20:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801db24:	6812      	ldr	r2, [r2, #0]
 801db26:	1052      	asrs	r2, r2, #1
 801db28:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801db2a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801db2e:	681b      	ldr	r3, [r3, #0]
 801db30:	2b00      	cmp	r3, #0
 801db32:	da06      	bge.n	801db42 <arm_nn_mat_mult_kernel_s8_s16+0x13e0>
        threshold++;
 801db34:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801db38:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 801db3c:	6812      	ldr	r2, [r2, #0]
 801db3e:	3201      	adds	r2, #1
 801db40:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801db42:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 801db46:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801db4a:	6812      	ldr	r2, [r2, #0]
 801db4c:	681b      	ldr	r3, [r3, #0]
 801db4e:	429a      	cmp	r2, r3
 801db50:	dd06      	ble.n	801db60 <arm_nn_mat_mult_kernel_s8_s16+0x13fe>
        result++;
 801db52:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801db56:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801db5a:	6812      	ldr	r2, [r2, #0]
 801db5c:	3201      	adds	r2, #1
 801db5e:	601a      	str	r2, [r3, #0]
    return result;
 801db60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801db64:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801db66:	bf00      	nop
 801db68:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        ch_0_out_0 += out_offset;
 801db6c:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801db70:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801db74:	4413      	add	r3, r2
 801db76:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 801db7a:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801db7e:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801db82:	4293      	cmp	r3, r2
 801db84:	bfb8      	it	lt
 801db86:	4613      	movlt	r3, r2
 801db88:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 801db8c:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801db90:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801db94:	4293      	cmp	r3, r2
 801db96:	bfa8      	it	ge
 801db98:	4613      	movge	r3, r2
 801db9a:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        *out_0++ = (q7_t)ch_0_out_0;
 801db9e:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 801dba2:	1c5a      	adds	r2, r3, #1
 801dba4:	f8c7 2428 	str.w	r2, [r7, #1064]	; 0x428
 801dba8:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801dbac:	b252      	sxtb	r2, r2
 801dbae:	701a      	strb	r2, [r3, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 801dbb0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801dbb4:	6819      	ldr	r1, [r3, #0]
 801dbb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dbba:	681b      	ldr	r3, [r3, #0]
 801dbbc:	681a      	ldr	r2, [r3, #0]
 801dbbe:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801dbc2:	f8d7 03c0 	ldr.w	r0, [r7, #960]	; 0x3c0
 801dbc6:	6018      	str	r0, [r3, #0]
 801dbc8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801dbcc:	6019      	str	r1, [r3, #0]
 801dbce:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801dbd2:	601a      	str	r2, [r3, #0]
 801dbd4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801dbd8:	681b      	ldr	r3, [r3, #0]
 801dbda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dbde:	f507 7292 	add.w	r2, r7, #292	; 0x124
 801dbe2:	6812      	ldr	r2, [r2, #0]
 801dbe4:	409a      	lsls	r2, r3
 801dbe6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801dbea:	601a      	str	r2, [r3, #0]
 801dbec:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801dbf0:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801dbf4:	6812      	ldr	r2, [r2, #0]
 801dbf6:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801dbf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801dbfc:	2200      	movs	r2, #0
 801dbfe:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801dc00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801dc04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801dc08:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801dc0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801dc0e:	2200      	movs	r2, #0
 801dc10:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801dc12:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801dc16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801dc1a:	681b      	ldr	r3, [r3, #0]
 801dc1c:	4618      	mov	r0, r3
 801dc1e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801dc22:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801dc26:	681b      	ldr	r3, [r3, #0]
 801dc28:	461a      	mov	r2, r3
 801dc2a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801dc2e:	fb02 fc01 	mul.w	ip, r2, r1
 801dc32:	fb00 f603 	mul.w	r6, r0, r3
 801dc36:	4466      	add	r6, ip
 801dc38:	fba0 2302 	umull	r2, r3, r0, r2
 801dc3c:	18f1      	adds	r1, r6, r3
 801dc3e:	460b      	mov	r3, r1
 801dc40:	eb14 0a02 	adds.w	sl, r4, r2
 801dc44:	eb45 0b03 	adc.w	fp, r5, r3
 801dc48:	e9c7 ab16 	strd	sl, fp, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 801dc4c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801dc50:	f04f 0200 	mov.w	r2, #0
 801dc54:	f04f 0300 	mov.w	r3, #0
 801dc58:	0fc2      	lsrs	r2, r0, #31
 801dc5a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801dc5e:	17cb      	asrs	r3, r1, #31
 801dc60:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801dc64:	4613      	mov	r3, r2
 801dc66:	600b      	str	r3, [r1, #0]
    return result;
 801dc68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801dc6c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801dc6e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801dc72:	681b      	ldr	r3, [r3, #0]
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	dc04      	bgt.n	801dc82 <arm_nn_mat_mult_kernel_s8_s16+0x1520>
 801dc78:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801dc7c:	681b      	ldr	r3, [r3, #0]
 801dc7e:	425b      	negs	r3, r3
 801dc80:	e000      	b.n	801dc84 <arm_nn_mat_mult_kernel_s8_s16+0x1522>
 801dc82:	2300      	movs	r3, #0
 801dc84:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801dc88:	6011      	str	r1, [r2, #0]
 801dc8a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801dc8e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801dc90:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801dc94:	2200      	movs	r2, #0
 801dc96:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801dc98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801dc9c:	2201      	movs	r2, #1
 801dc9e:	681b      	ldr	r3, [r3, #0]
 801dca0:	409a      	lsls	r2, r3
 801dca2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801dca6:	3a01      	subs	r2, #1
 801dca8:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801dcaa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801dcae:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 801dcb2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801dcb6:	6809      	ldr	r1, [r1, #0]
 801dcb8:	6812      	ldr	r2, [r2, #0]
 801dcba:	400a      	ands	r2, r1
 801dcbc:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801dcbe:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801dcc2:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 801dcc6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801dcca:	6809      	ldr	r1, [r1, #0]
 801dccc:	6812      	ldr	r2, [r2, #0]
 801dcce:	fa41 f202 	asr.w	r2, r1, r2
 801dcd2:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801dcd4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801dcd8:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801dcdc:	6812      	ldr	r2, [r2, #0]
 801dcde:	1052      	asrs	r2, r2, #1
 801dce0:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801dce2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801dce6:	681b      	ldr	r3, [r3, #0]
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	da06      	bge.n	801dcfa <arm_nn_mat_mult_kernel_s8_s16+0x1598>
        threshold++;
 801dcec:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801dcf0:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801dcf4:	6812      	ldr	r2, [r2, #0]
 801dcf6:	3201      	adds	r2, #1
 801dcf8:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801dcfa:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 801dcfe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801dd02:	6812      	ldr	r2, [r2, #0]
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	429a      	cmp	r2, r3
 801dd08:	dd06      	ble.n	801dd18 <arm_nn_mat_mult_kernel_s8_s16+0x15b6>
        result++;
 801dd0a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801dd0e:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801dd12:	6812      	ldr	r2, [r2, #0]
 801dd14:	3201      	adds	r2, #1
 801dd16:	601a      	str	r2, [r3, #0]
    return result;
 801dd18:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801dd1c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801dd1e:	bf00      	nop
 801dd20:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        ch_0_out_1 += out_offset;
 801dd24:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801dd28:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801dd2c:	4413      	add	r3, r2
 801dd2e:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801dd32:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801dd36:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801dd3a:	4293      	cmp	r3, r2
 801dd3c:	bfb8      	it	lt
 801dd3e:	4613      	movlt	r3, r2
 801dd40:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801dd44:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801dd48:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801dd4c:	4293      	cmp	r3, r2
 801dd4e:	bfa8      	it	ge
 801dd50:	4613      	movge	r3, r2
 801dd52:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        *out_1++ = (q7_t)ch_0_out_1;
 801dd56:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 801dd5a:	1c5a      	adds	r2, r3, #1
 801dd5c:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 801dd60:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801dd64:	b252      	sxtb	r2, r2
 801dd66:	701a      	strb	r2, [r3, #0]
        out_mult++;
 801dd68:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801dd6c:	3304      	adds	r3, #4
 801dd6e:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
        out_shift++;
 801dd72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dd76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801dd7a:	6812      	ldr	r2, [r2, #0]
 801dd7c:	3204      	adds	r2, #4
 801dd7e:	601a      	str	r2, [r3, #0]
    }

    out_0 += output_ch;
 801dd80:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801dd84:	881b      	ldrh	r3, [r3, #0]
 801dd86:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 801dd8a:	4413      	add	r3, r2
 801dd8c:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428

    /* return the new output pointer with offset */
    return out_0;
 801dd90:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 801dd94:	4618      	mov	r0, r3
 801dd96:	f507 777c 	add.w	r7, r7, #1008	; 0x3f0
 801dd9a:	46bd      	mov	sp, r7
 801dd9c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801dda0:	4770      	bx	lr

0801dda2 <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 801dda2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801dda6:	f5ad 6d24 	sub.w	sp, sp, #2624	; 0xa40
 801ddaa:	af00      	add	r7, sp, #0
 801ddac:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801ddb0:	6020      	str	r0, [r4, #0]
 801ddb2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801ddb6:	6001      	str	r1, [r0, #0]
 801ddb8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 801ddbc:	600a      	str	r2, [r1, #0]
 801ddbe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801ddc2:	6013      	str	r3, [r2, #0]
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 801ddc4:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801ddc8:	3b04      	subs	r3, #4
 801ddca:	f8c7 39ec 	str.w	r3, [r7, #2540]	; 0x9ec

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801ddce:	2300      	movs	r3, #0
 801ddd0:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c
 801ddd4:	f003 b977 	b.w	80210c6 <arm_nn_mat_mult_nt_t_s8+0x3324>
    {
        const q7_t *lhs_ptr = &lhs[0];
 801ddd8:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801dddc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801dde0:	681b      	ldr	r3, [r3, #0]
 801dde2:	6013      	str	r3, [r2, #0]
        q7_t *dst_ptr = &dst[0];
 801dde4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38

        q31_t lhs_offset_contribution0 = 0;
 801ddee:	2300      	movs	r3, #0
 801ddf0:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
        q31_t lhs_offset_contribution1 = 0;
 801ddf4:	2300      	movs	r3, #0
 801ddf6:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30

        for (int32_t x = 0; x < rhs_cols; ++x)
 801ddfa:	2300      	movs	r3, #0
 801ddfc:	f8c7 3a2c 	str.w	r3, [r7, #2604]	; 0xa2c
 801de00:	e024      	b.n	801de4c <arm_nn_mat_mult_nt_t_s8+0xaa>
        {
            lhs_offset_contribution0 += rhs[x];
 801de02:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801de06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801de0a:	681b      	ldr	r3, [r3, #0]
 801de0c:	4413      	add	r3, r2
 801de0e:	f993 3000 	ldrsb.w	r3, [r3]
 801de12:	461a      	mov	r2, r3
 801de14:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801de18:	4413      	add	r3, r2
 801de1a:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 801de1e:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801de22:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801de26:	4413      	add	r3, r2
 801de28:	461a      	mov	r2, r3
 801de2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	4413      	add	r3, r2
 801de32:	f993 3000 	ldrsb.w	r3, [r3]
 801de36:	461a      	mov	r2, r3
 801de38:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801de3c:	4413      	add	r3, r2
 801de3e:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        for (int32_t x = 0; x < rhs_cols; ++x)
 801de42:	f8d7 3a2c 	ldr.w	r3, [r7, #2604]	; 0xa2c
 801de46:	3301      	adds	r3, #1
 801de48:	f8c7 3a2c 	str.w	r3, [r7, #2604]	; 0xa2c
 801de4c:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801de50:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801de54:	429a      	cmp	r2, r3
 801de56:	dbd4      	blt.n	801de02 <arm_nn_mat_mult_nt_t_s8+0x60>
        }

        lhs_offset_contribution0 *= lhs_offset;
 801de58:	f8d7 2a34 	ldr.w	r2, [r7, #2612]	; 0xa34
 801de5c:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 801de60:	fb03 f302 	mul.w	r3, r3, r2
 801de64:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
        lhs_offset_contribution1 *= lhs_offset;
 801de68:	f8d7 2a30 	ldr.w	r2, [r7, #2608]	; 0xa30
 801de6c:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 801de70:	fb03 f302 	mul.w	r3, r3, r2
 801de74:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        if (bias)
 801de78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801de7c:	681b      	ldr	r3, [r3, #0]
 801de7e:	2b00      	cmp	r3, #0
 801de80:	d01a      	beq.n	801deb8 <arm_nn_mat_mult_nt_t_s8+0x116>
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 801de82:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801de86:	009a      	lsls	r2, r3, #2
 801de88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801de8c:	681b      	ldr	r3, [r3, #0]
 801de8e:	4413      	add	r3, r2
 801de90:	681a      	ldr	r2, [r3, #0]
 801de92:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801de96:	4413      	add	r3, r2
 801de98:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 801de9c:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801dea0:	3301      	adds	r3, #1
 801dea2:	009a      	lsls	r2, r3, #2
 801dea4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801dea8:	681b      	ldr	r3, [r3, #0]
 801deaa:	4413      	add	r3, r2
 801deac:	681a      	ldr	r2, [r3, #0]
 801deae:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801deb2:	4413      	add	r3, r2
 801deb4:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 801deb8:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 801debc:	105b      	asrs	r3, r3, #1
 801debe:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28

        while (lhs_rows_idx)
 801dec2:	f001 bf48 	b.w	801fd56 <arm_nn_mat_mult_nt_t_s8+0x1fb4>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801dec6:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 801deca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 801ded2:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801ded6:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            q31_t res01 = lhs_offset_contribution1;
 801deda:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801dede:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            q31_t res10 = lhs_offset_contribution0;
 801dee2:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801dee6:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            q31_t res11 = lhs_offset_contribution1;
 801deea:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801deee:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            int32_t rhs_cols_idx = 0;
 801def2:	2300      	movs	r3, #0
 801def4:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14

            q31_t val0, val1, val2, val3, val4, val5;

            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801def8:	f001 baee 	b.w	801f4d8 <arm_nn_mat_mult_nt_t_s8+0x1736>
 801defc:	f207 522c 	addw	r2, r7, #1324	; 0x52c
 801df00:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801df04:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801df06:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801df0a:	681b      	ldr	r3, [r3, #0]
 801df0c:	681b      	ldr	r3, [r3, #0]
 801df0e:	681b      	ldr	r3, [r3, #0]
 801df10:	461a      	mov	r2, r3
 801df12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801df16:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801df18:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801df1c:	681b      	ldr	r3, [r3, #0]
 801df1e:	681b      	ldr	r3, [r3, #0]
 801df20:	1d1a      	adds	r2, r3, #4
 801df22:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801df26:	681b      	ldr	r3, [r3, #0]
 801df28:	601a      	str	r2, [r3, #0]
    return (val);
 801df2a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801df2e:	681b      	ldr	r3, [r3, #0]
            {
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801df30:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val2 = __SXTB16(val1);
 801df34:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801df38:	f207 5334 	addw	r3, r7, #1332	; 0x534
 801df3c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801df3e:	f207 5334 	addw	r3, r7, #1332	; 0x534
 801df42:	681b      	ldr	r3, [r3, #0]
 801df44:	fa2f f283 	sxtb16	r2, r3
 801df48:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 801df4c:	601a      	str	r2, [r3, #0]
  return(result);
 801df4e:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 801df52:	681b      	ldr	r3, [r3, #0]
 801df54:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801df58:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 801df5c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801df60:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801df62:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801df66:	681b      	ldr	r3, [r3, #0]
 801df68:	681b      	ldr	r3, [r3, #0]
 801df6a:	681b      	ldr	r3, [r3, #0]
 801df6c:	461a      	mov	r2, r3
 801df6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801df72:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801df74:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	681b      	ldr	r3, [r3, #0]
 801df7c:	1d1a      	adds	r2, r3, #4
 801df7e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801df82:	681b      	ldr	r3, [r3, #0]
 801df84:	601a      	str	r2, [r3, #0]
    return (val);
 801df86:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801df8a:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801df8c:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801df90:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801df94:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 801df98:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801df9a:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 801df9e:	681b      	ldr	r3, [r3, #0]
 801dfa0:	fa2f f283 	sxtb16	r2, r3
 801dfa4:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 801dfa8:	601a      	str	r2, [r3, #0]
  return(result);
 801dfaa:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 801dfae:	681b      	ldr	r3, [r3, #0]
 801dfb0:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801dfb4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801dfb8:	681a      	ldr	r2, [r3, #0]
 801dfba:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801dfbe:	441a      	add	r2, r3
 801dfc0:	f207 5344 	addw	r3, r7, #1348	; 0x544
 801dfc4:	601a      	str	r2, [r3, #0]
 801dfc6:	f207 5344 	addw	r3, r7, #1348	; 0x544
 801dfca:	681b      	ldr	r3, [r3, #0]
 801dfcc:	681b      	ldr	r3, [r3, #0]
 801dfce:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801dfd0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801dfd4:	601a      	str	r2, [r3, #0]
    return (val);
 801dfd6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val1 = __SXTB16_RORn(val1, 8);
 801dfe0:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801dfe4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 801dfe8:	601a      	str	r2, [r3, #0]
 801dfea:	f207 525c 	addw	r2, r7, #1372	; 0x55c
 801dfee:	2308      	movs	r3, #8
 801dff0:	6013      	str	r3, [r2, #0]
 801dff2:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 801dff6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 801dffa:	681b      	ldr	r3, [r3, #0]
 801dffc:	6013      	str	r3, [r2, #0]
 801dffe:	f207 5254 	addw	r2, r7, #1364	; 0x554
 801e002:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 801e006:	681b      	ldr	r3, [r3, #0]
 801e008:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e00a:	f207 5254 	addw	r2, r7, #1364	; 0x554
 801e00e:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801e012:	681b      	ldr	r3, [r3, #0]
 801e014:	f003 031f 	and.w	r3, r3, #31
 801e018:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e01a:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801e01e:	681b      	ldr	r3, [r3, #0]
 801e020:	2b00      	cmp	r3, #0
 801e022:	d103      	bne.n	801e02c <arm_nn_mat_mult_nt_t_s8+0x28a>
    return op1;
 801e024:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 801e028:	681a      	ldr	r2, [r3, #0]
 801e02a:	e006      	b.n	801e03a <arm_nn_mat_mult_nt_t_s8+0x298>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e02c:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 801e030:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801e034:	6812      	ldr	r2, [r2, #0]
 801e036:	681b      	ldr	r3, [r3, #0]
 801e038:	41da      	rors	r2, r3
 801e03a:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 801e03e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e040:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 801e044:	681b      	ldr	r3, [r3, #0]
 801e046:	fa2f f283 	sxtb16	r2, r3
 801e04a:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 801e04e:	601a      	str	r2, [r3, #0]
  return(result);
 801e050:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 801e054:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e056:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 801e05a:	601a      	str	r2, [r3, #0]
  return result;
 801e05c:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 801e060:	681b      	ldr	r3, [r3, #0]
 801e062:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801e066:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e06a:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 801e06e:	601a      	str	r2, [r3, #0]
 801e070:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 801e074:	2308      	movs	r3, #8
 801e076:	6013      	str	r3, [r2, #0]
 801e078:	f207 5274 	addw	r2, r7, #1396	; 0x574
 801e07c:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	6013      	str	r3, [r2, #0]
 801e084:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 801e088:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 801e08c:	681b      	ldr	r3, [r3, #0]
 801e08e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e090:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 801e094:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801e098:	681b      	ldr	r3, [r3, #0]
 801e09a:	f003 031f 	and.w	r3, r3, #31
 801e09e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e0a0:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801e0a4:	681b      	ldr	r3, [r3, #0]
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	d103      	bne.n	801e0b2 <arm_nn_mat_mult_nt_t_s8+0x310>
    return op1;
 801e0aa:	f207 5374 	addw	r3, r7, #1396	; 0x574
 801e0ae:	681a      	ldr	r2, [r3, #0]
 801e0b0:	e006      	b.n	801e0c0 <arm_nn_mat_mult_nt_t_s8+0x31e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e0b2:	f207 5274 	addw	r2, r7, #1396	; 0x574
 801e0b6:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801e0ba:	6812      	ldr	r2, [r2, #0]
 801e0bc:	681b      	ldr	r3, [r3, #0]
 801e0be:	41da      	rors	r2, r3
 801e0c0:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 801e0c4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e0c6:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 801e0ca:	681b      	ldr	r3, [r3, #0]
 801e0cc:	fa2f f283 	sxtb16	r2, r3
 801e0d0:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 801e0d4:	601a      	str	r2, [r3, #0]
  return(result);
 801e0d6:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 801e0da:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e0dc:	f207 5364 	addw	r3, r7, #1380	; 0x564
 801e0e0:	601a      	str	r2, [r3, #0]
  return result;
 801e0e2:	f207 5364 	addw	r3, r7, #1380	; 0x564
 801e0e6:	681b      	ldr	r3, [r3, #0]
 801e0e8:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801e0ec:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e0f0:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801e0f4:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801e0f8:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 801e0fc:	601a      	str	r2, [r3, #0]
 801e0fe:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 801e102:	6019      	str	r1, [r3, #0]
 801e104:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801e108:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e10a:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 801e10e:	6819      	ldr	r1, [r3, #0]
 801e110:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 801e114:	681a      	ldr	r2, [r3, #0]
 801e116:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801e11a:	681b      	ldr	r3, [r3, #0]
 801e11c:	fb21 3202 	smlad	r2, r1, r2, r3
 801e120:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801e124:	601a      	str	r2, [r3, #0]
  return(result);
 801e126:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801e12a:	681b      	ldr	r3, [r3, #0]
 801e12c:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801e130:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801e134:	f207 5394 	addw	r3, r7, #1428	; 0x594
 801e138:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e13a:	f207 5394 	addw	r3, r7, #1428	; 0x594
 801e13e:	681b      	ldr	r3, [r3, #0]
 801e140:	fa2f f283 	sxtb16	r2, r3
 801e144:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 801e148:	601a      	str	r2, [r3, #0]
  return(result);
 801e14a:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 801e14e:	681b      	ldr	r3, [r3, #0]
 801e150:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801e154:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e158:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801e15c:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801e160:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 801e164:	601a      	str	r2, [r3, #0]
 801e166:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 801e16a:	6019      	str	r1, [r3, #0]
 801e16c:	f207 539c 	addw	r3, r7, #1436	; 0x59c
 801e170:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e172:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 801e176:	6819      	ldr	r1, [r3, #0]
 801e178:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 801e17c:	681a      	ldr	r2, [r3, #0]
 801e17e:	f207 539c 	addw	r3, r7, #1436	; 0x59c
 801e182:	681b      	ldr	r3, [r3, #0]
 801e184:	fb21 3202 	smlad	r2, r1, r2, r3
 801e188:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 801e18c:	601a      	str	r2, [r3, #0]
  return(result);
 801e18e:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 801e192:	681b      	ldr	r3, [r3, #0]
 801e194:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801e198:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801e19c:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 801e1a0:	601a      	str	r2, [r3, #0]
 801e1a2:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 801e1a6:	2308      	movs	r3, #8
 801e1a8:	6013      	str	r3, [r2, #0]
 801e1aa:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 801e1ae:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 801e1b2:	681b      	ldr	r3, [r3, #0]
 801e1b4:	6013      	str	r3, [r2, #0]
 801e1b6:	f207 52b4 	addw	r2, r7, #1460	; 0x5b4
 801e1ba:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 801e1be:	681b      	ldr	r3, [r3, #0]
 801e1c0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e1c2:	f207 52b4 	addw	r2, r7, #1460	; 0x5b4
 801e1c6:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801e1ca:	681b      	ldr	r3, [r3, #0]
 801e1cc:	f003 031f 	and.w	r3, r3, #31
 801e1d0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e1d2:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801e1d6:	681b      	ldr	r3, [r3, #0]
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	d103      	bne.n	801e1e4 <arm_nn_mat_mult_nt_t_s8+0x442>
    return op1;
 801e1dc:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801e1e0:	681a      	ldr	r2, [r3, #0]
 801e1e2:	e006      	b.n	801e1f2 <arm_nn_mat_mult_nt_t_s8+0x450>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e1e4:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 801e1e8:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801e1ec:	6812      	ldr	r2, [r2, #0]
 801e1ee:	681b      	ldr	r3, [r3, #0]
 801e1f0:	41da      	rors	r2, r3
 801e1f2:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 801e1f6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e1f8:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 801e1fc:	681b      	ldr	r3, [r3, #0]
 801e1fe:	fa2f f283 	sxtb16	r2, r3
 801e202:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 801e206:	601a      	str	r2, [r3, #0]
  return(result);
 801e208:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 801e20c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e20e:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 801e212:	601a      	str	r2, [r3, #0]
  return result;
 801e214:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 801e218:	681b      	ldr	r3, [r3, #0]
 801e21a:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801e21e:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e222:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801e226:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801e22a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 801e22e:	601a      	str	r2, [r3, #0]
 801e230:	f207 53cc 	addw	r3, r7, #1484	; 0x5cc
 801e234:	6019      	str	r1, [r3, #0]
 801e236:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 801e23a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e23c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 801e240:	6819      	ldr	r1, [r3, #0]
 801e242:	f207 53cc 	addw	r3, r7, #1484	; 0x5cc
 801e246:	681a      	ldr	r2, [r3, #0]
 801e248:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 801e24c:	681b      	ldr	r3, [r3, #0]
 801e24e:	fb21 3202 	smlad	r2, r1, r2, r3
 801e252:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 801e256:	601a      	str	r2, [r3, #0]
  return(result);
 801e258:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 801e25c:	681b      	ldr	r3, [r3, #0]
 801e25e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801e262:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e266:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801e26a:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801e26e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 801e272:	601a      	str	r2, [r3, #0]
 801e274:	f207 53dc 	addw	r3, r7, #1500	; 0x5dc
 801e278:	6019      	str	r1, [r3, #0]
 801e27a:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 801e27e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e280:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 801e284:	6819      	ldr	r1, [r3, #0]
 801e286:	f207 53dc 	addw	r3, r7, #1500	; 0x5dc
 801e28a:	681a      	ldr	r2, [r3, #0]
 801e28c:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 801e290:	681b      	ldr	r3, [r3, #0]
 801e292:	fb21 3202 	smlad	r2, r1, r2, r3
 801e296:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 801e29a:	601a      	str	r2, [r3, #0]
  return(result);
 801e29c:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 801e2a0:	681b      	ldr	r3, [r3, #0]
 801e2a2:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801e2a6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e2aa:	681a      	ldr	r2, [r3, #0]
 801e2ac:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801e2b0:	441a      	add	r2, r3
 801e2b2:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 801e2b6:	601a      	str	r2, [r3, #0]
 801e2b8:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801e2c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e2c6:	601a      	str	r2, [r3, #0]
    return (val);
 801e2c8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e2cc:	681b      	ldr	r3, [r3, #0]
 801e2ce:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801e2d2:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e2d6:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 801e2da:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e2dc:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	fa2f f283 	sxtb16	r2, r3
 801e2e6:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801e2ea:	601a      	str	r2, [r3, #0]
  return(result);
 801e2ec:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801e2f0:	681b      	ldr	r3, [r3, #0]
 801e2f2:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801e2f6:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e2fa:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 801e2fe:	601a      	str	r2, [r3, #0]
 801e300:	f207 6204 	addw	r2, r7, #1540	; 0x604
 801e304:	2308      	movs	r3, #8
 801e306:	6013      	str	r3, [r2, #0]
 801e308:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801e30c:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 801e310:	681b      	ldr	r3, [r3, #0]
 801e312:	6013      	str	r3, [r2, #0]
 801e314:	f207 52fc 	addw	r2, r7, #1532	; 0x5fc
 801e318:	f207 6304 	addw	r3, r7, #1540	; 0x604
 801e31c:	681b      	ldr	r3, [r3, #0]
 801e31e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e320:	f207 52fc 	addw	r2, r7, #1532	; 0x5fc
 801e324:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	f003 031f 	and.w	r3, r3, #31
 801e32e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e330:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801e334:	681b      	ldr	r3, [r3, #0]
 801e336:	2b00      	cmp	r3, #0
 801e338:	d103      	bne.n	801e342 <arm_nn_mat_mult_nt_t_s8+0x5a0>
    return op1;
 801e33a:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 801e33e:	681a      	ldr	r2, [r3, #0]
 801e340:	e006      	b.n	801e350 <arm_nn_mat_mult_nt_t_s8+0x5ae>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e342:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801e346:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801e34a:	6812      	ldr	r2, [r2, #0]
 801e34c:	681b      	ldr	r3, [r3, #0]
 801e34e:	41da      	rors	r2, r3
 801e350:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 801e354:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e356:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 801e35a:	681b      	ldr	r3, [r3, #0]
 801e35c:	fa2f f283 	sxtb16	r2, r3
 801e360:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 801e364:	601a      	str	r2, [r3, #0]
  return(result);
 801e366:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 801e36a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e36c:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 801e370:	601a      	str	r2, [r3, #0]
  return result;
 801e372:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801e37c:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e380:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801e384:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801e388:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 801e38c:	601a      	str	r2, [r3, #0]
 801e38e:	f207 6314 	addw	r3, r7, #1556	; 0x614
 801e392:	6019      	str	r1, [r3, #0]
 801e394:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801e398:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e39a:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 801e39e:	6819      	ldr	r1, [r3, #0]
 801e3a0:	f207 6314 	addw	r3, r7, #1556	; 0x614
 801e3a4:	681a      	ldr	r2, [r3, #0]
 801e3a6:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801e3aa:	681b      	ldr	r3, [r3, #0]
 801e3ac:	fb21 3202 	smlad	r2, r1, r2, r3
 801e3b0:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 801e3b4:	601a      	str	r2, [r3, #0]
  return(result);
 801e3b6:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801e3c0:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e3c4:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801e3c8:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801e3cc:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 801e3d0:	601a      	str	r2, [r3, #0]
 801e3d2:	f207 6324 	addw	r3, r7, #1572	; 0x624
 801e3d6:	6019      	str	r1, [r3, #0]
 801e3d8:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801e3dc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e3de:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 801e3e2:	6819      	ldr	r1, [r3, #0]
 801e3e4:	f207 6324 	addw	r3, r7, #1572	; 0x624
 801e3e8:	681a      	ldr	r2, [r3, #0]
 801e3ea:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801e3ee:	681b      	ldr	r3, [r3, #0]
 801e3f0:	fb21 3202 	smlad	r2, r1, r2, r3
 801e3f4:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 801e3f8:	601a      	str	r2, [r3, #0]
  return(result);
 801e3fa:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 801e3fe:	681b      	ldr	r3, [r3, #0]
 801e400:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801e404:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e408:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801e40c:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801e410:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 801e414:	601a      	str	r2, [r3, #0]
 801e416:	f207 6334 	addw	r3, r7, #1588	; 0x634
 801e41a:	6019      	str	r1, [r3, #0]
 801e41c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e420:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e422:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 801e426:	6819      	ldr	r1, [r3, #0]
 801e428:	f207 6334 	addw	r3, r7, #1588	; 0x634
 801e42c:	681a      	ldr	r2, [r3, #0]
 801e42e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	fb21 3202 	smlad	r2, r1, r2, r3
 801e438:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 801e43c:	601a      	str	r2, [r3, #0]
  return(result);
 801e43e:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 801e442:	681b      	ldr	r3, [r3, #0]
 801e444:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801e448:	f207 623c 	addw	r2, r7, #1596	; 0x63c
 801e44c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801e450:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e452:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801e456:	681b      	ldr	r3, [r3, #0]
 801e458:	681b      	ldr	r3, [r3, #0]
 801e45a:	681b      	ldr	r3, [r3, #0]
 801e45c:	461a      	mov	r2, r3
 801e45e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801e462:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e464:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801e468:	681b      	ldr	r3, [r3, #0]
 801e46a:	681b      	ldr	r3, [r3, #0]
 801e46c:	1d1a      	adds	r2, r3, #4
 801e46e:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801e472:	681b      	ldr	r3, [r3, #0]
 801e474:	601a      	str	r2, [r3, #0]
    return (val);
 801e476:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801e47a:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801e47c:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801e480:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e484:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801e488:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801e48c:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 801e490:	601a      	str	r2, [r3, #0]
 801e492:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 801e496:	6019      	str	r1, [r3, #0]
 801e498:	f207 6344 	addw	r3, r7, #1604	; 0x644
 801e49c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e49e:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 801e4a2:	6819      	ldr	r1, [r3, #0]
 801e4a4:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 801e4a8:	681a      	ldr	r2, [r3, #0]
 801e4aa:	f207 6344 	addw	r3, r7, #1604	; 0x644
 801e4ae:	681b      	ldr	r3, [r3, #0]
 801e4b0:	fb21 3202 	smlad	r2, r1, r2, r3
 801e4b4:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801e4b8:	601a      	str	r2, [r3, #0]
  return(result);
 801e4ba:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801e4be:	681b      	ldr	r3, [r3, #0]
 801e4c0:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801e4c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801e4c8:	681a      	ldr	r2, [r3, #0]
 801e4ca:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801e4ce:	441a      	add	r2, r3
 801e4d0:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801e4d4:	601a      	str	r2, [r3, #0]
 801e4d6:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801e4da:	681b      	ldr	r3, [r3, #0]
 801e4dc:	681b      	ldr	r3, [r3, #0]
 801e4de:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801e4e0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e4e4:	601a      	str	r2, [r3, #0]
    return (val);
 801e4e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e4ea:	681b      	ldr	r3, [r3, #0]
 801e4ec:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801e4f0:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801e4f4:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 801e4f8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e4fa:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 801e4fe:	681b      	ldr	r3, [r3, #0]
 801e500:	fa2f f283 	sxtb16	r2, r3
 801e504:	f207 6354 	addw	r3, r7, #1620	; 0x654
 801e508:	601a      	str	r2, [r3, #0]
  return(result);
 801e50a:	f207 6354 	addw	r3, r7, #1620	; 0x654
 801e50e:	681b      	ldr	r3, [r3, #0]
 801e510:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801e514:	f207 625c 	addw	r2, r7, #1628	; 0x65c
 801e518:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e51c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e51e:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801e522:	681b      	ldr	r3, [r3, #0]
 801e524:	681b      	ldr	r3, [r3, #0]
 801e526:	681b      	ldr	r3, [r3, #0]
 801e528:	461a      	mov	r2, r3
 801e52a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801e52e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e530:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801e534:	681b      	ldr	r3, [r3, #0]
 801e536:	681b      	ldr	r3, [r3, #0]
 801e538:	1d1a      	adds	r2, r3, #4
 801e53a:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801e53e:	681b      	ldr	r3, [r3, #0]
 801e540:	601a      	str	r2, [r3, #0]
    return (val);
 801e542:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801e546:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801e548:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801e54c:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e550:	f207 6364 	addw	r3, r7, #1636	; 0x664
 801e554:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e556:	f207 6364 	addw	r3, r7, #1636	; 0x664
 801e55a:	681b      	ldr	r3, [r3, #0]
 801e55c:	fa2f f283 	sxtb16	r2, r3
 801e560:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801e564:	601a      	str	r2, [r3, #0]
  return(result);
 801e566:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801e56a:	681b      	ldr	r3, [r3, #0]
 801e56c:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 801e570:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801e574:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 801e578:	601a      	str	r2, [r3, #0]
 801e57a:	f207 627c 	addw	r2, r7, #1660	; 0x67c
 801e57e:	2308      	movs	r3, #8
 801e580:	6013      	str	r3, [r2, #0]
 801e582:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 801e586:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 801e58a:	681b      	ldr	r3, [r3, #0]
 801e58c:	6013      	str	r3, [r2, #0]
 801e58e:	f207 6274 	addw	r2, r7, #1652	; 0x674
 801e592:	f207 637c 	addw	r3, r7, #1660	; 0x67c
 801e596:	681b      	ldr	r3, [r3, #0]
 801e598:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e59a:	f207 6274 	addw	r2, r7, #1652	; 0x674
 801e59e:	f207 6374 	addw	r3, r7, #1652	; 0x674
 801e5a2:	681b      	ldr	r3, [r3, #0]
 801e5a4:	f003 031f 	and.w	r3, r3, #31
 801e5a8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e5aa:	f207 6374 	addw	r3, r7, #1652	; 0x674
 801e5ae:	681b      	ldr	r3, [r3, #0]
 801e5b0:	2b00      	cmp	r3, #0
 801e5b2:	d103      	bne.n	801e5bc <arm_nn_mat_mult_nt_t_s8+0x81a>
    return op1;
 801e5b4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801e5b8:	681a      	ldr	r2, [r3, #0]
 801e5ba:	e006      	b.n	801e5ca <arm_nn_mat_mult_nt_t_s8+0x828>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e5bc:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 801e5c0:	f207 6374 	addw	r3, r7, #1652	; 0x674
 801e5c4:	6812      	ldr	r2, [r2, #0]
 801e5c6:	681b      	ldr	r3, [r3, #0]
 801e5c8:	41da      	rors	r2, r3
 801e5ca:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 801e5ce:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e5d0:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	fa2f f283 	sxtb16	r2, r3
 801e5da:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 801e5de:	601a      	str	r2, [r3, #0]
  return(result);
 801e5e0:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 801e5e4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e5e6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 801e5ea:	601a      	str	r2, [r3, #0]
  return result;
 801e5ec:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 801e5f0:	681b      	ldr	r3, [r3, #0]
 801e5f2:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801e5f6:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e5fa:	f207 639c 	addw	r3, r7, #1692	; 0x69c
 801e5fe:	601a      	str	r2, [r3, #0]
 801e600:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 801e604:	2308      	movs	r3, #8
 801e606:	6013      	str	r3, [r2, #0]
 801e608:	f207 6294 	addw	r2, r7, #1684	; 0x694
 801e60c:	f207 639c 	addw	r3, r7, #1692	; 0x69c
 801e610:	681b      	ldr	r3, [r3, #0]
 801e612:	6013      	str	r3, [r2, #0]
 801e614:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 801e618:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 801e61c:	681b      	ldr	r3, [r3, #0]
 801e61e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e620:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 801e624:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801e628:	681b      	ldr	r3, [r3, #0]
 801e62a:	f003 031f 	and.w	r3, r3, #31
 801e62e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e630:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801e634:	681b      	ldr	r3, [r3, #0]
 801e636:	2b00      	cmp	r3, #0
 801e638:	d103      	bne.n	801e642 <arm_nn_mat_mult_nt_t_s8+0x8a0>
    return op1;
 801e63a:	f207 6394 	addw	r3, r7, #1684	; 0x694
 801e63e:	681a      	ldr	r2, [r3, #0]
 801e640:	e006      	b.n	801e650 <arm_nn_mat_mult_nt_t_s8+0x8ae>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e642:	f207 6294 	addw	r2, r7, #1684	; 0x694
 801e646:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801e64a:	6812      	ldr	r2, [r2, #0]
 801e64c:	681b      	ldr	r3, [r3, #0]
 801e64e:	41da      	rors	r2, r3
 801e650:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 801e654:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e656:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 801e65a:	681b      	ldr	r3, [r3, #0]
 801e65c:	fa2f f283 	sxtb16	r2, r3
 801e660:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 801e664:	601a      	str	r2, [r3, #0]
  return(result);
 801e666:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 801e66a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e66c:	f207 6384 	addw	r3, r7, #1668	; 0x684
 801e670:	601a      	str	r2, [r3, #0]
  return result;
 801e672:	f207 6384 	addw	r3, r7, #1668	; 0x684
 801e676:	681b      	ldr	r3, [r3, #0]
 801e678:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801e67c:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e680:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801e684:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801e688:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 801e68c:	601a      	str	r2, [r3, #0]
 801e68e:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 801e692:	6019      	str	r1, [r3, #0]
 801e694:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 801e698:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e69a:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 801e69e:	6819      	ldr	r1, [r3, #0]
 801e6a0:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 801e6a4:	681a      	ldr	r2, [r3, #0]
 801e6a6:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 801e6aa:	681b      	ldr	r3, [r3, #0]
 801e6ac:	fb21 3202 	smlad	r2, r1, r2, r3
 801e6b0:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801e6b4:	601a      	str	r2, [r3, #0]
  return(result);
 801e6b6:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801e6ba:	681b      	ldr	r3, [r3, #0]
 801e6bc:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801e6c0:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801e6c4:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 801e6c8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e6ca:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 801e6ce:	681b      	ldr	r3, [r3, #0]
 801e6d0:	fa2f f283 	sxtb16	r2, r3
 801e6d4:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801e6d8:	601a      	str	r2, [r3, #0]
  return(result);
 801e6da:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801e6de:	681b      	ldr	r3, [r3, #0]
 801e6e0:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801e6e4:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e6e8:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801e6ec:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801e6f0:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 801e6f4:	601a      	str	r2, [r3, #0]
 801e6f6:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 801e6fa:	6019      	str	r1, [r3, #0]
 801e6fc:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 801e700:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e702:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 801e706:	6819      	ldr	r1, [r3, #0]
 801e708:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 801e70c:	681a      	ldr	r2, [r3, #0]
 801e70e:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 801e712:	681b      	ldr	r3, [r3, #0]
 801e714:	fb21 3202 	smlad	r2, r1, r2, r3
 801e718:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 801e71c:	601a      	str	r2, [r3, #0]
  return(result);
 801e71e:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 801e722:	681b      	ldr	r3, [r3, #0]
 801e724:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801e728:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801e72c:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 801e730:	601a      	str	r2, [r3, #0]
 801e732:	f207 62dc 	addw	r2, r7, #1756	; 0x6dc
 801e736:	2308      	movs	r3, #8
 801e738:	6013      	str	r3, [r2, #0]
 801e73a:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 801e73e:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	6013      	str	r3, [r2, #0]
 801e746:	f207 62d4 	addw	r2, r7, #1748	; 0x6d4
 801e74a:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 801e74e:	681b      	ldr	r3, [r3, #0]
 801e750:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e752:	f207 62d4 	addw	r2, r7, #1748	; 0x6d4
 801e756:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 801e75a:	681b      	ldr	r3, [r3, #0]
 801e75c:	f003 031f 	and.w	r3, r3, #31
 801e760:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e762:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d103      	bne.n	801e774 <arm_nn_mat_mult_nt_t_s8+0x9d2>
    return op1;
 801e76c:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 801e770:	681a      	ldr	r2, [r3, #0]
 801e772:	e006      	b.n	801e782 <arm_nn_mat_mult_nt_t_s8+0x9e0>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e774:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 801e778:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 801e77c:	6812      	ldr	r2, [r2, #0]
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	41da      	rors	r2, r3
 801e782:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 801e786:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e788:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 801e78c:	681b      	ldr	r3, [r3, #0]
 801e78e:	fa2f f283 	sxtb16	r2, r3
 801e792:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 801e796:	601a      	str	r2, [r3, #0]
  return(result);
 801e798:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 801e79c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e79e:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 801e7a2:	601a      	str	r2, [r3, #0]
  return result;
 801e7a4:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801e7ae:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e7b2:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801e7b6:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801e7ba:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801e7be:	601a      	str	r2, [r3, #0]
 801e7c0:	f207 63ec 	addw	r3, r7, #1772	; 0x6ec
 801e7c4:	6019      	str	r1, [r3, #0]
 801e7c6:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 801e7ca:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e7cc:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801e7d0:	6819      	ldr	r1, [r3, #0]
 801e7d2:	f207 63ec 	addw	r3, r7, #1772	; 0x6ec
 801e7d6:	681a      	ldr	r2, [r3, #0]
 801e7d8:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 801e7dc:	681b      	ldr	r3, [r3, #0]
 801e7de:	fb21 3202 	smlad	r2, r1, r2, r3
 801e7e2:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 801e7e6:	601a      	str	r2, [r3, #0]
  return(result);
 801e7e8:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 801e7ec:	681b      	ldr	r3, [r3, #0]
 801e7ee:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801e7f2:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e7f6:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801e7fa:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801e7fe:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 801e802:	601a      	str	r2, [r3, #0]
 801e804:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 801e808:	6019      	str	r1, [r3, #0]
 801e80a:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 801e80e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e810:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 801e814:	6819      	ldr	r1, [r3, #0]
 801e816:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 801e81a:	681a      	ldr	r2, [r3, #0]
 801e81c:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 801e820:	681b      	ldr	r3, [r3, #0]
 801e822:	fb21 3202 	smlad	r2, r1, r2, r3
 801e826:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 801e82a:	601a      	str	r2, [r3, #0]
  return(result);
 801e82c:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 801e830:	681b      	ldr	r3, [r3, #0]
 801e832:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801e836:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e83a:	681a      	ldr	r2, [r3, #0]
 801e83c:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801e840:	441a      	add	r2, r3
 801e842:	f207 7304 	addw	r3, r7, #1796	; 0x704
 801e846:	601a      	str	r2, [r3, #0]
 801e848:	f207 7304 	addw	r3, r7, #1796	; 0x704
 801e84c:	681b      	ldr	r3, [r3, #0]
 801e84e:	681b      	ldr	r3, [r3, #0]
 801e850:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801e852:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e856:	601a      	str	r2, [r3, #0]
    return (val);
 801e858:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e85c:	681b      	ldr	r3, [r3, #0]
 801e85e:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801e862:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e866:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 801e86a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e86c:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 801e870:	681b      	ldr	r3, [r3, #0]
 801e872:	fa2f f283 	sxtb16	r2, r3
 801e876:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 801e87a:	601a      	str	r2, [r3, #0]
  return(result);
 801e87c:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 801e880:	681b      	ldr	r3, [r3, #0]
 801e882:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801e886:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e88a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 801e88e:	601a      	str	r2, [r3, #0]
 801e890:	f207 7224 	addw	r2, r7, #1828	; 0x724
 801e894:	2308      	movs	r3, #8
 801e896:	6013      	str	r3, [r2, #0]
 801e898:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 801e89c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 801e8a0:	681b      	ldr	r3, [r3, #0]
 801e8a2:	6013      	str	r3, [r2, #0]
 801e8a4:	f207 721c 	addw	r2, r7, #1820	; 0x71c
 801e8a8:	f207 7324 	addw	r3, r7, #1828	; 0x724
 801e8ac:	681b      	ldr	r3, [r3, #0]
 801e8ae:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e8b0:	f207 721c 	addw	r2, r7, #1820	; 0x71c
 801e8b4:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 801e8b8:	681b      	ldr	r3, [r3, #0]
 801e8ba:	f003 031f 	and.w	r3, r3, #31
 801e8be:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e8c0:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 801e8c4:	681b      	ldr	r3, [r3, #0]
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	d103      	bne.n	801e8d2 <arm_nn_mat_mult_nt_t_s8+0xb30>
    return op1;
 801e8ca:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801e8ce:	681a      	ldr	r2, [r3, #0]
 801e8d0:	e006      	b.n	801e8e0 <arm_nn_mat_mult_nt_t_s8+0xb3e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e8d2:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 801e8d6:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 801e8da:	6812      	ldr	r2, [r2, #0]
 801e8dc:	681b      	ldr	r3, [r3, #0]
 801e8de:	41da      	rors	r2, r3
 801e8e0:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 801e8e4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e8e6:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 801e8ea:	681b      	ldr	r3, [r3, #0]
 801e8ec:	fa2f f283 	sxtb16	r2, r3
 801e8f0:	f207 7314 	addw	r3, r7, #1812	; 0x714
 801e8f4:	601a      	str	r2, [r3, #0]
  return(result);
 801e8f6:	f207 7314 	addw	r3, r7, #1812	; 0x714
 801e8fa:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e8fc:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 801e900:	601a      	str	r2, [r3, #0]
  return result;
 801e902:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801e90c:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e910:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801e914:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801e918:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 801e91c:	601a      	str	r2, [r3, #0]
 801e91e:	f207 7334 	addw	r3, r7, #1844	; 0x734
 801e922:	6019      	str	r1, [r3, #0]
 801e924:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 801e928:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e92a:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 801e92e:	6819      	ldr	r1, [r3, #0]
 801e930:	f207 7334 	addw	r3, r7, #1844	; 0x734
 801e934:	681a      	ldr	r2, [r3, #0]
 801e936:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 801e93a:	681b      	ldr	r3, [r3, #0]
 801e93c:	fb21 3202 	smlad	r2, r1, r2, r3
 801e940:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 801e944:	601a      	str	r2, [r3, #0]
  return(result);
 801e946:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 801e94a:	681b      	ldr	r3, [r3, #0]
 801e94c:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801e950:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e954:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801e958:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801e95c:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 801e960:	601a      	str	r2, [r3, #0]
 801e962:	f207 7344 	addw	r3, r7, #1860	; 0x744
 801e966:	6019      	str	r1, [r3, #0]
 801e968:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 801e96c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e96e:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 801e972:	6819      	ldr	r1, [r3, #0]
 801e974:	f207 7344 	addw	r3, r7, #1860	; 0x744
 801e978:	681a      	ldr	r2, [r3, #0]
 801e97a:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 801e97e:	681b      	ldr	r3, [r3, #0]
 801e980:	fb21 3202 	smlad	r2, r1, r2, r3
 801e984:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 801e988:	601a      	str	r2, [r3, #0]
  return(result);
 801e98a:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801e994:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e998:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801e99c:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801e9a0:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 801e9a4:	601a      	str	r2, [r3, #0]
 801e9a6:	f207 7354 	addw	r3, r7, #1876	; 0x754
 801e9aa:	6019      	str	r1, [r3, #0]
 801e9ac:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801e9b0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e9b2:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 801e9b6:	6819      	ldr	r1, [r3, #0]
 801e9b8:	f207 7354 	addw	r3, r7, #1876	; 0x754
 801e9bc:	681a      	ldr	r2, [r3, #0]
 801e9be:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801e9c2:	681b      	ldr	r3, [r3, #0]
 801e9c4:	fb21 3202 	smlad	r2, r1, r2, r3
 801e9c8:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 801e9cc:	601a      	str	r2, [r3, #0]
  return(result);
 801e9ce:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 801e9d2:	681b      	ldr	r3, [r3, #0]
 801e9d4:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801e9d8:	f207 725c 	addw	r2, r7, #1884	; 0x75c
 801e9dc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801e9e0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e9e2:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 801e9e6:	681b      	ldr	r3, [r3, #0]
 801e9e8:	681b      	ldr	r3, [r3, #0]
 801e9ea:	681b      	ldr	r3, [r3, #0]
 801e9ec:	461a      	mov	r2, r3
 801e9ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801e9f2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e9f4:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 801e9f8:	681b      	ldr	r3, [r3, #0]
 801e9fa:	681b      	ldr	r3, [r3, #0]
 801e9fc:	1d1a      	adds	r2, r3, #4
 801e9fe:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 801ea02:	681b      	ldr	r3, [r3, #0]
 801ea04:	601a      	str	r2, [r3, #0]
    return (val);
 801ea06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801ea0a:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801ea0c:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801ea10:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ea14:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801ea18:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801ea1c:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 801ea20:	601a      	str	r2, [r3, #0]
 801ea22:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 801ea26:	6019      	str	r1, [r3, #0]
 801ea28:	f207 7364 	addw	r3, r7, #1892	; 0x764
 801ea2c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ea2e:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 801ea32:	6819      	ldr	r1, [r3, #0]
 801ea34:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 801ea38:	681a      	ldr	r2, [r3, #0]
 801ea3a:	f207 7364 	addw	r3, r7, #1892	; 0x764
 801ea3e:	681b      	ldr	r3, [r3, #0]
 801ea40:	fb21 3202 	smlad	r2, r1, r2, r3
 801ea44:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 801ea48:	601a      	str	r2, [r3, #0]
  return(result);
 801ea4a:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 801ea4e:	681b      	ldr	r3, [r3, #0]
 801ea50:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801ea54:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801ea58:	681a      	ldr	r2, [r3, #0]
 801ea5a:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801ea5e:	441a      	add	r2, r3
 801ea60:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 801ea64:	601a      	str	r2, [r3, #0]
 801ea66:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	681b      	ldr	r3, [r3, #0]
 801ea6e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ea70:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ea74:	601a      	str	r2, [r3, #0]
    return (val);
 801ea76:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ea7a:	681b      	ldr	r3, [r3, #0]
 801ea7c:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801ea80:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801ea84:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 801ea88:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ea8a:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 801ea8e:	681b      	ldr	r3, [r3, #0]
 801ea90:	fa2f f283 	sxtb16	r2, r3
 801ea94:	f207 7374 	addw	r3, r7, #1908	; 0x774
 801ea98:	601a      	str	r2, [r3, #0]
  return(result);
 801ea9a:	f207 7374 	addw	r3, r7, #1908	; 0x774
 801ea9e:	681b      	ldr	r3, [r3, #0]
 801eaa0:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801eaa4:	f207 727c 	addw	r2, r7, #1916	; 0x77c
 801eaa8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801eaac:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801eaae:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 801eab2:	681b      	ldr	r3, [r3, #0]
 801eab4:	681b      	ldr	r3, [r3, #0]
 801eab6:	681b      	ldr	r3, [r3, #0]
 801eab8:	461a      	mov	r2, r3
 801eaba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801eabe:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801eac0:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 801eac4:	681b      	ldr	r3, [r3, #0]
 801eac6:	681b      	ldr	r3, [r3, #0]
 801eac8:	1d1a      	adds	r2, r3, #4
 801eaca:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 801eace:	681b      	ldr	r3, [r3, #0]
 801ead0:	601a      	str	r2, [r3, #0]
    return (val);
 801ead2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801ead6:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801ead8:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801eadc:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801eae0:	f207 7384 	addw	r3, r7, #1924	; 0x784
 801eae4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801eae6:	f207 7384 	addw	r3, r7, #1924	; 0x784
 801eaea:	681b      	ldr	r3, [r3, #0]
 801eaec:	fa2f f283 	sxtb16	r2, r3
 801eaf0:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801eaf4:	601a      	str	r2, [r3, #0]
  return(result);
 801eaf6:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801eafa:	681b      	ldr	r3, [r3, #0]
 801eafc:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 801eb00:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801eb04:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801eb08:	601a      	str	r2, [r3, #0]
 801eb0a:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 801eb0e:	2308      	movs	r3, #8
 801eb10:	6013      	str	r3, [r2, #0]
 801eb12:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 801eb16:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	6013      	str	r3, [r2, #0]
 801eb1e:	f207 7294 	addw	r2, r7, #1940	; 0x794
 801eb22:	f207 739c 	addw	r3, r7, #1948	; 0x79c
 801eb26:	681b      	ldr	r3, [r3, #0]
 801eb28:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801eb2a:	f207 7294 	addw	r2, r7, #1940	; 0x794
 801eb2e:	f207 7394 	addw	r3, r7, #1940	; 0x794
 801eb32:	681b      	ldr	r3, [r3, #0]
 801eb34:	f003 031f 	and.w	r3, r3, #31
 801eb38:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801eb3a:	f207 7394 	addw	r3, r7, #1940	; 0x794
 801eb3e:	681b      	ldr	r3, [r3, #0]
 801eb40:	2b00      	cmp	r3, #0
 801eb42:	d103      	bne.n	801eb4c <arm_nn_mat_mult_nt_t_s8+0xdaa>
    return op1;
 801eb44:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 801eb48:	681a      	ldr	r2, [r3, #0]
 801eb4a:	e006      	b.n	801eb5a <arm_nn_mat_mult_nt_t_s8+0xdb8>
  return (op1 >> op2) | (op1 << (32U - op2));
 801eb4c:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 801eb50:	f207 7394 	addw	r3, r7, #1940	; 0x794
 801eb54:	6812      	ldr	r2, [r2, #0]
 801eb56:	681b      	ldr	r3, [r3, #0]
 801eb58:	41da      	rors	r2, r3
 801eb5a:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 801eb5e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801eb60:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 801eb64:	681b      	ldr	r3, [r3, #0]
 801eb66:	fa2f f283 	sxtb16	r2, r3
 801eb6a:	f207 738c 	addw	r3, r7, #1932	; 0x78c
 801eb6e:	601a      	str	r2, [r3, #0]
  return(result);
 801eb70:	f207 738c 	addw	r3, r7, #1932	; 0x78c
 801eb74:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801eb76:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 801eb7a:	601a      	str	r2, [r3, #0]
  return result;
 801eb7c:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 801eb80:	681b      	ldr	r3, [r3, #0]
 801eb82:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801eb86:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801eb8a:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 801eb8e:	601a      	str	r2, [r3, #0]
 801eb90:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 801eb94:	2308      	movs	r3, #8
 801eb96:	6013      	str	r3, [r2, #0]
 801eb98:	f207 72b4 	addw	r2, r7, #1972	; 0x7b4
 801eb9c:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 801eba0:	681b      	ldr	r3, [r3, #0]
 801eba2:	6013      	str	r3, [r2, #0]
 801eba4:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 801eba8:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 801ebac:	681b      	ldr	r3, [r3, #0]
 801ebae:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ebb0:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 801ebb4:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 801ebb8:	681b      	ldr	r3, [r3, #0]
 801ebba:	f003 031f 	and.w	r3, r3, #31
 801ebbe:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ebc0:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 801ebc4:	681b      	ldr	r3, [r3, #0]
 801ebc6:	2b00      	cmp	r3, #0
 801ebc8:	d103      	bne.n	801ebd2 <arm_nn_mat_mult_nt_t_s8+0xe30>
    return op1;
 801ebca:	f207 73b4 	addw	r3, r7, #1972	; 0x7b4
 801ebce:	681a      	ldr	r2, [r3, #0]
 801ebd0:	e006      	b.n	801ebe0 <arm_nn_mat_mult_nt_t_s8+0xe3e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ebd2:	f207 72b4 	addw	r2, r7, #1972	; 0x7b4
 801ebd6:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 801ebda:	6812      	ldr	r2, [r2, #0]
 801ebdc:	681b      	ldr	r3, [r3, #0]
 801ebde:	41da      	rors	r2, r3
 801ebe0:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 801ebe4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ebe6:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 801ebea:	681b      	ldr	r3, [r3, #0]
 801ebec:	fa2f f283 	sxtb16	r2, r3
 801ebf0:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 801ebf4:	601a      	str	r2, [r3, #0]
  return(result);
 801ebf6:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 801ebfa:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ebfc:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 801ec00:	601a      	str	r2, [r3, #0]
  return result;
 801ec02:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 801ec06:	681b      	ldr	r3, [r3, #0]
 801ec08:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801ec0c:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801ec10:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801ec14:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801ec18:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 801ec1c:	601a      	str	r2, [r3, #0]
 801ec1e:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 801ec22:	6019      	str	r1, [r3, #0]
 801ec24:	f207 73c4 	addw	r3, r7, #1988	; 0x7c4
 801ec28:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ec2a:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 801ec2e:	6819      	ldr	r1, [r3, #0]
 801ec30:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 801ec34:	681a      	ldr	r2, [r3, #0]
 801ec36:	f207 73c4 	addw	r3, r7, #1988	; 0x7c4
 801ec3a:	681b      	ldr	r3, [r3, #0]
 801ec3c:	fb21 3202 	smlad	r2, r1, r2, r3
 801ec40:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 801ec44:	601a      	str	r2, [r3, #0]
  return(result);
 801ec46:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 801ec4a:	681b      	ldr	r3, [r3, #0]
 801ec4c:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801ec50:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801ec54:	f207 73d4 	addw	r3, r7, #2004	; 0x7d4
 801ec58:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ec5a:	f207 73d4 	addw	r3, r7, #2004	; 0x7d4
 801ec5e:	681b      	ldr	r3, [r3, #0]
 801ec60:	fa2f f283 	sxtb16	r2, r3
 801ec64:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 801ec68:	601a      	str	r2, [r3, #0]
  return(result);
 801ec6a:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 801ec6e:	681b      	ldr	r3, [r3, #0]
 801ec70:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801ec74:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ec78:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801ec7c:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801ec80:	f207 73e4 	addw	r3, r7, #2020	; 0x7e4
 801ec84:	601a      	str	r2, [r3, #0]
 801ec86:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 801ec8a:	6019      	str	r1, [r3, #0]
 801ec8c:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 801ec90:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ec92:	f207 73e4 	addw	r3, r7, #2020	; 0x7e4
 801ec96:	6819      	ldr	r1, [r3, #0]
 801ec98:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 801ec9c:	681a      	ldr	r2, [r3, #0]
 801ec9e:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 801eca2:	681b      	ldr	r3, [r3, #0]
 801eca4:	fb21 3202 	smlad	r2, r1, r2, r3
 801eca8:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 801ecac:	601a      	str	r2, [r3, #0]
  return(result);
 801ecae:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 801ecb2:	681b      	ldr	r3, [r3, #0]
 801ecb4:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801ecb8:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801ecbc:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 801ecc0:	601a      	str	r2, [r3, #0]
 801ecc2:	f207 72fc 	addw	r2, r7, #2044	; 0x7fc
 801ecc6:	2308      	movs	r3, #8
 801ecc8:	6013      	str	r3, [r2, #0]
 801ecca:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 801ecce:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 801ecd2:	681b      	ldr	r3, [r3, #0]
 801ecd4:	6013      	str	r3, [r2, #0]
 801ecd6:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 801ecda:	f207 73fc 	addw	r3, r7, #2044	; 0x7fc
 801ecde:	681b      	ldr	r3, [r3, #0]
 801ece0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ece2:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 801ece6:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 801ecea:	681b      	ldr	r3, [r3, #0]
 801ecec:	f003 031f 	and.w	r3, r3, #31
 801ecf0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ecf2:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 801ecf6:	681b      	ldr	r3, [r3, #0]
 801ecf8:	2b00      	cmp	r3, #0
 801ecfa:	d103      	bne.n	801ed04 <arm_nn_mat_mult_nt_t_s8+0xf62>
    return op1;
 801ecfc:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 801ed00:	681a      	ldr	r2, [r3, #0]
 801ed02:	e006      	b.n	801ed12 <arm_nn_mat_mult_nt_t_s8+0xf70>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ed04:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 801ed08:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 801ed0c:	6812      	ldr	r2, [r2, #0]
 801ed0e:	681b      	ldr	r3, [r3, #0]
 801ed10:	41da      	rors	r2, r3
 801ed12:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801ed16:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ed18:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801ed1c:	681b      	ldr	r3, [r3, #0]
 801ed1e:	fa2f f283 	sxtb16	r2, r3
 801ed22:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 801ed26:	601a      	str	r2, [r3, #0]
  return(result);
 801ed28:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 801ed2c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ed2e:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 801ed32:	601a      	str	r2, [r3, #0]
  return result;
 801ed34:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801ed3e:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801ed42:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801ed46:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801ed4a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801ed4e:	601a      	str	r2, [r3, #0]
 801ed50:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 801ed54:	6019      	str	r1, [r3, #0]
 801ed56:	f607 0308 	addw	r3, r7, #2056	; 0x808
 801ed5a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ed5c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801ed60:	6819      	ldr	r1, [r3, #0]
 801ed62:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 801ed66:	681a      	ldr	r2, [r3, #0]
 801ed68:	f607 0308 	addw	r3, r7, #2056	; 0x808
 801ed6c:	681b      	ldr	r3, [r3, #0]
 801ed6e:	fb21 3202 	smlad	r2, r1, r2, r3
 801ed72:	f607 0304 	addw	r3, r7, #2052	; 0x804
 801ed76:	601a      	str	r2, [r3, #0]
  return(result);
 801ed78:	f607 0304 	addw	r3, r7, #2052	; 0x804
 801ed7c:	681b      	ldr	r3, [r3, #0]
 801ed7e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801ed82:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ed86:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801ed8a:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801ed8e:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 801ed92:	601a      	str	r2, [r3, #0]
 801ed94:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 801ed98:	6019      	str	r1, [r3, #0]
 801ed9a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801ed9e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801eda0:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 801eda4:	6819      	ldr	r1, [r3, #0]
 801eda6:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 801edaa:	681a      	ldr	r2, [r3, #0]
 801edac:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	fb21 3202 	smlad	r2, r1, r2, r3
 801edb6:	f607 0314 	addw	r3, r7, #2068	; 0x814
 801edba:	601a      	str	r2, [r3, #0]
  return(result);
 801edbc:	f607 0314 	addw	r3, r7, #2068	; 0x814
 801edc0:	681b      	ldr	r3, [r3, #0]
 801edc2:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801edc6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801edca:	681a      	ldr	r2, [r3, #0]
 801edcc:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801edd0:	441a      	add	r2, r3
 801edd2:	f607 0324 	addw	r3, r7, #2084	; 0x824
 801edd6:	601a      	str	r2, [r3, #0]
 801edd8:	f607 0324 	addw	r3, r7, #2084	; 0x824
 801eddc:	681b      	ldr	r3, [r3, #0]
 801edde:	681b      	ldr	r3, [r3, #0]
 801ede0:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ede2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ede6:	601a      	str	r2, [r3, #0]
    return (val);
 801ede8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801edec:	681b      	ldr	r3, [r3, #0]
 801edee:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801edf2:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801edf6:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 801edfa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801edfc:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 801ee00:	681b      	ldr	r3, [r3, #0]
 801ee02:	fa2f f283 	sxtb16	r2, r3
 801ee06:	f607 0328 	addw	r3, r7, #2088	; 0x828
 801ee0a:	601a      	str	r2, [r3, #0]
  return(result);
 801ee0c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 801ee10:	681b      	ldr	r3, [r3, #0]
 801ee12:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801ee16:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ee1a:	f607 0348 	addw	r3, r7, #2120	; 0x848
 801ee1e:	601a      	str	r2, [r3, #0]
 801ee20:	f607 0244 	addw	r2, r7, #2116	; 0x844
 801ee24:	2308      	movs	r3, #8
 801ee26:	6013      	str	r3, [r2, #0]
 801ee28:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 801ee2c:	f607 0348 	addw	r3, r7, #2120	; 0x848
 801ee30:	681b      	ldr	r3, [r3, #0]
 801ee32:	6013      	str	r3, [r2, #0]
 801ee34:	f607 023c 	addw	r2, r7, #2108	; 0x83c
 801ee38:	f607 0344 	addw	r3, r7, #2116	; 0x844
 801ee3c:	681b      	ldr	r3, [r3, #0]
 801ee3e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ee40:	f607 023c 	addw	r2, r7, #2108	; 0x83c
 801ee44:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801ee48:	681b      	ldr	r3, [r3, #0]
 801ee4a:	f003 031f 	and.w	r3, r3, #31
 801ee4e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ee50:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801ee54:	681b      	ldr	r3, [r3, #0]
 801ee56:	2b00      	cmp	r3, #0
 801ee58:	d103      	bne.n	801ee62 <arm_nn_mat_mult_nt_t_s8+0x10c0>
    return op1;
 801ee5a:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 801ee5e:	681a      	ldr	r2, [r3, #0]
 801ee60:	e006      	b.n	801ee70 <arm_nn_mat_mult_nt_t_s8+0x10ce>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ee62:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 801ee66:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801ee6a:	6812      	ldr	r2, [r2, #0]
 801ee6c:	681b      	ldr	r3, [r3, #0]
 801ee6e:	41da      	rors	r2, r3
 801ee70:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801ee74:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ee76:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801ee7a:	681b      	ldr	r3, [r3, #0]
 801ee7c:	fa2f f283 	sxtb16	r2, r3
 801ee80:	f607 0334 	addw	r3, r7, #2100	; 0x834
 801ee84:	601a      	str	r2, [r3, #0]
  return(result);
 801ee86:	f607 0334 	addw	r3, r7, #2100	; 0x834
 801ee8a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ee8c:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 801ee90:	601a      	str	r2, [r3, #0]
  return result;
 801ee92:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 801ee96:	681b      	ldr	r3, [r3, #0]
 801ee98:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801ee9c:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801eea0:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801eea4:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801eea8:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801eeac:	601a      	str	r2, [r3, #0]
 801eeae:	f607 0354 	addw	r3, r7, #2132	; 0x854
 801eeb2:	6019      	str	r1, [r3, #0]
 801eeb4:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801eeb8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801eeba:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801eebe:	6819      	ldr	r1, [r3, #0]
 801eec0:	f607 0354 	addw	r3, r7, #2132	; 0x854
 801eec4:	681a      	ldr	r2, [r3, #0]
 801eec6:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801eeca:	681b      	ldr	r3, [r3, #0]
 801eecc:	fb21 3202 	smlad	r2, r1, r2, r3
 801eed0:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 801eed4:	601a      	str	r2, [r3, #0]
  return(result);
 801eed6:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 801eeda:	681b      	ldr	r3, [r3, #0]
 801eedc:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801eee0:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801eee4:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801eee8:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801eeec:	f607 0368 	addw	r3, r7, #2152	; 0x868
 801eef0:	601a      	str	r2, [r3, #0]
 801eef2:	f607 0364 	addw	r3, r7, #2148	; 0x864
 801eef6:	6019      	str	r1, [r3, #0]
 801eef8:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801eefc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801eefe:	f607 0368 	addw	r3, r7, #2152	; 0x868
 801ef02:	6819      	ldr	r1, [r3, #0]
 801ef04:	f607 0364 	addw	r3, r7, #2148	; 0x864
 801ef08:	681a      	ldr	r2, [r3, #0]
 801ef0a:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801ef0e:	681b      	ldr	r3, [r3, #0]
 801ef10:	fb21 3202 	smlad	r2, r1, r2, r3
 801ef14:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 801ef18:	601a      	str	r2, [r3, #0]
  return(result);
 801ef1a:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 801ef1e:	681b      	ldr	r3, [r3, #0]
 801ef20:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801ef24:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ef28:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801ef2c:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801ef30:	f607 0378 	addw	r3, r7, #2168	; 0x878
 801ef34:	601a      	str	r2, [r3, #0]
 801ef36:	f607 0374 	addw	r3, r7, #2164	; 0x874
 801ef3a:	6019      	str	r1, [r3, #0]
 801ef3c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 801ef40:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ef42:	f607 0378 	addw	r3, r7, #2168	; 0x878
 801ef46:	6819      	ldr	r1, [r3, #0]
 801ef48:	f607 0374 	addw	r3, r7, #2164	; 0x874
 801ef4c:	681a      	ldr	r2, [r3, #0]
 801ef4e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 801ef52:	681b      	ldr	r3, [r3, #0]
 801ef54:	fb21 3202 	smlad	r2, r1, r2, r3
 801ef58:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 801ef5c:	601a      	str	r2, [r3, #0]
  return(result);
 801ef5e:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 801ef62:	681b      	ldr	r3, [r3, #0]
 801ef64:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801ef68:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 801ef6c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801ef70:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801ef72:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 801ef76:	681b      	ldr	r3, [r3, #0]
 801ef78:	681b      	ldr	r3, [r3, #0]
 801ef7a:	681b      	ldr	r3, [r3, #0]
 801ef7c:	461a      	mov	r2, r3
 801ef7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801ef82:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ef84:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 801ef88:	681b      	ldr	r3, [r3, #0]
 801ef8a:	681b      	ldr	r3, [r3, #0]
 801ef8c:	1d1a      	adds	r2, r3, #4
 801ef8e:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 801ef92:	681b      	ldr	r3, [r3, #0]
 801ef94:	601a      	str	r2, [r3, #0]
    return (val);
 801ef96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801ef9a:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801ef9c:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801efa0:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801efa4:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801efa8:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801efac:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 801efb0:	601a      	str	r2, [r3, #0]
 801efb2:	f607 0388 	addw	r3, r7, #2184	; 0x888
 801efb6:	6019      	str	r1, [r3, #0]
 801efb8:	f607 0384 	addw	r3, r7, #2180	; 0x884
 801efbc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801efbe:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 801efc2:	6819      	ldr	r1, [r3, #0]
 801efc4:	f607 0388 	addw	r3, r7, #2184	; 0x888
 801efc8:	681a      	ldr	r2, [r3, #0]
 801efca:	f607 0384 	addw	r3, r7, #2180	; 0x884
 801efce:	681b      	ldr	r3, [r3, #0]
 801efd0:	fb21 3202 	smlad	r2, r1, r2, r3
 801efd4:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 801efd8:	601a      	str	r2, [r3, #0]
  return(result);
 801efda:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 801efde:	681b      	ldr	r3, [r3, #0]
 801efe0:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801efe4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801efe8:	681a      	ldr	r2, [r3, #0]
 801efea:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801efee:	441a      	add	r2, r3
 801eff0:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 801eff4:	601a      	str	r2, [r3, #0]
 801eff6:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 801effa:	681b      	ldr	r3, [r3, #0]
 801effc:	681b      	ldr	r3, [r3, #0]
 801effe:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801f000:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f004:	601a      	str	r2, [r3, #0]
    return (val);
 801f006:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f00a:	681b      	ldr	r3, [r3, #0]
 801f00c:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801f010:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801f014:	f607 0398 	addw	r3, r7, #2200	; 0x898
 801f018:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f01a:	f607 0398 	addw	r3, r7, #2200	; 0x898
 801f01e:	681b      	ldr	r3, [r3, #0]
 801f020:	fa2f f283 	sxtb16	r2, r3
 801f024:	f607 0394 	addw	r3, r7, #2196	; 0x894
 801f028:	601a      	str	r2, [r3, #0]
  return(result);
 801f02a:	f607 0394 	addw	r3, r7, #2196	; 0x894
 801f02e:	681b      	ldr	r3, [r3, #0]
 801f030:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801f034:	f607 029c 	addw	r2, r7, #2204	; 0x89c
 801f038:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f03c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801f03e:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 801f042:	681b      	ldr	r3, [r3, #0]
 801f044:	681b      	ldr	r3, [r3, #0]
 801f046:	681b      	ldr	r3, [r3, #0]
 801f048:	461a      	mov	r2, r3
 801f04a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801f04e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801f050:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 801f054:	681b      	ldr	r3, [r3, #0]
 801f056:	681b      	ldr	r3, [r3, #0]
 801f058:	1d1a      	adds	r2, r3, #4
 801f05a:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 801f05e:	681b      	ldr	r3, [r3, #0]
 801f060:	601a      	str	r2, [r3, #0]
    return (val);
 801f062:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801f066:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801f068:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801f06c:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f070:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 801f074:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f076:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 801f07a:	681b      	ldr	r3, [r3, #0]
 801f07c:	fa2f f283 	sxtb16	r2, r3
 801f080:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 801f084:	601a      	str	r2, [r3, #0]
  return(result);
 801f086:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 801f08a:	681b      	ldr	r3, [r3, #0]
 801f08c:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 801f090:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801f094:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 801f098:	601a      	str	r2, [r3, #0]
 801f09a:	f607 02bc 	addw	r2, r7, #2236	; 0x8bc
 801f09e:	2308      	movs	r3, #8
 801f0a0:	6013      	str	r3, [r2, #0]
 801f0a2:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 801f0a6:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 801f0aa:	681b      	ldr	r3, [r3, #0]
 801f0ac:	6013      	str	r3, [r2, #0]
 801f0ae:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 801f0b2:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 801f0b6:	681b      	ldr	r3, [r3, #0]
 801f0b8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f0ba:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 801f0be:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 801f0c2:	681b      	ldr	r3, [r3, #0]
 801f0c4:	f003 031f 	and.w	r3, r3, #31
 801f0c8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f0ca:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 801f0ce:	681b      	ldr	r3, [r3, #0]
 801f0d0:	2b00      	cmp	r3, #0
 801f0d2:	d103      	bne.n	801f0dc <arm_nn_mat_mult_nt_t_s8+0x133a>
    return op1;
 801f0d4:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 801f0d8:	681a      	ldr	r2, [r3, #0]
 801f0da:	e006      	b.n	801f0ea <arm_nn_mat_mult_nt_t_s8+0x1348>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f0dc:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 801f0e0:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 801f0e4:	6812      	ldr	r2, [r2, #0]
 801f0e6:	681b      	ldr	r3, [r3, #0]
 801f0e8:	41da      	rors	r2, r3
 801f0ea:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 801f0ee:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f0f0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 801f0f4:	681b      	ldr	r3, [r3, #0]
 801f0f6:	fa2f f283 	sxtb16	r2, r3
 801f0fa:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 801f0fe:	601a      	str	r2, [r3, #0]
  return(result);
 801f100:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 801f104:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801f106:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 801f10a:	601a      	str	r2, [r3, #0]
  return result;
 801f10c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 801f110:	681b      	ldr	r3, [r3, #0]
 801f112:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801f116:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f11a:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 801f11e:	601a      	str	r2, [r3, #0]
 801f120:	f607 02d8 	addw	r2, r7, #2264	; 0x8d8
 801f124:	2308      	movs	r3, #8
 801f126:	6013      	str	r3, [r2, #0]
 801f128:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 801f12c:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 801f130:	681b      	ldr	r3, [r3, #0]
 801f132:	6013      	str	r3, [r2, #0]
 801f134:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 801f138:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 801f13c:	681b      	ldr	r3, [r3, #0]
 801f13e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f140:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 801f144:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 801f148:	681b      	ldr	r3, [r3, #0]
 801f14a:	f003 031f 	and.w	r3, r3, #31
 801f14e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f150:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 801f154:	681b      	ldr	r3, [r3, #0]
 801f156:	2b00      	cmp	r3, #0
 801f158:	d103      	bne.n	801f162 <arm_nn_mat_mult_nt_t_s8+0x13c0>
    return op1;
 801f15a:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 801f15e:	681a      	ldr	r2, [r3, #0]
 801f160:	e006      	b.n	801f170 <arm_nn_mat_mult_nt_t_s8+0x13ce>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f162:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 801f166:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 801f16a:	6812      	ldr	r2, [r2, #0]
 801f16c:	681b      	ldr	r3, [r3, #0]
 801f16e:	41da      	rors	r2, r3
 801f170:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 801f174:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f176:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 801f17a:	681b      	ldr	r3, [r3, #0]
 801f17c:	fa2f f283 	sxtb16	r2, r3
 801f180:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 801f184:	601a      	str	r2, [r3, #0]
  return(result);
 801f186:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 801f18a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801f18c:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 801f190:	601a      	str	r2, [r3, #0]
  return result;
 801f192:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 801f196:	681b      	ldr	r3, [r3, #0]
 801f198:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801f19c:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801f1a0:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801f1a4:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801f1a8:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 801f1ac:	601a      	str	r2, [r3, #0]
 801f1ae:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 801f1b2:	6019      	str	r1, [r3, #0]
 801f1b4:	f607 03e4 	addw	r3, r7, #2276	; 0x8e4
 801f1b8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f1ba:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 801f1be:	6819      	ldr	r1, [r3, #0]
 801f1c0:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 801f1c4:	681a      	ldr	r2, [r3, #0]
 801f1c6:	f607 03e4 	addw	r3, r7, #2276	; 0x8e4
 801f1ca:	681b      	ldr	r3, [r3, #0]
 801f1cc:	fb21 3202 	smlad	r2, r1, r2, r3
 801f1d0:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 801f1d4:	601a      	str	r2, [r3, #0]
  return(result);
 801f1d6:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 801f1da:	681b      	ldr	r3, [r3, #0]
 801f1dc:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801f1e0:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801f1e4:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 801f1e8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f1ea:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 801f1ee:	681b      	ldr	r3, [r3, #0]
 801f1f0:	fa2f f283 	sxtb16	r2, r3
 801f1f4:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 801f1f8:	601a      	str	r2, [r3, #0]
  return(result);
 801f1fa:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 801f1fe:	681b      	ldr	r3, [r3, #0]
 801f200:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801f204:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f208:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801f20c:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801f210:	f607 1304 	addw	r3, r7, #2308	; 0x904
 801f214:	601a      	str	r2, [r3, #0]
 801f216:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801f21a:	6019      	str	r1, [r3, #0]
 801f21c:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 801f220:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f222:	f607 1304 	addw	r3, r7, #2308	; 0x904
 801f226:	6819      	ldr	r1, [r3, #0]
 801f228:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801f22c:	681a      	ldr	r2, [r3, #0]
 801f22e:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 801f232:	681b      	ldr	r3, [r3, #0]
 801f234:	fb21 3202 	smlad	r2, r1, r2, r3
 801f238:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 801f23c:	601a      	str	r2, [r3, #0]
  return(result);
 801f23e:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 801f242:	681b      	ldr	r3, [r3, #0]
 801f244:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801f248:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801f24c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 801f250:	601a      	str	r2, [r3, #0]
 801f252:	f607 121c 	addw	r2, r7, #2332	; 0x91c
 801f256:	2308      	movs	r3, #8
 801f258:	6013      	str	r3, [r2, #0]
 801f25a:	f607 1218 	addw	r2, r7, #2328	; 0x918
 801f25e:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 801f262:	681b      	ldr	r3, [r3, #0]
 801f264:	6013      	str	r3, [r2, #0]
 801f266:	f607 1214 	addw	r2, r7, #2324	; 0x914
 801f26a:	f607 131c 	addw	r3, r7, #2332	; 0x91c
 801f26e:	681b      	ldr	r3, [r3, #0]
 801f270:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f272:	f607 1214 	addw	r2, r7, #2324	; 0x914
 801f276:	f607 1314 	addw	r3, r7, #2324	; 0x914
 801f27a:	681b      	ldr	r3, [r3, #0]
 801f27c:	f003 031f 	and.w	r3, r3, #31
 801f280:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f282:	f607 1314 	addw	r3, r7, #2324	; 0x914
 801f286:	681b      	ldr	r3, [r3, #0]
 801f288:	2b00      	cmp	r3, #0
 801f28a:	d103      	bne.n	801f294 <arm_nn_mat_mult_nt_t_s8+0x14f2>
    return op1;
 801f28c:	f607 1318 	addw	r3, r7, #2328	; 0x918
 801f290:	681a      	ldr	r2, [r3, #0]
 801f292:	e006      	b.n	801f2a2 <arm_nn_mat_mult_nt_t_s8+0x1500>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f294:	f607 1218 	addw	r2, r7, #2328	; 0x918
 801f298:	f607 1314 	addw	r3, r7, #2324	; 0x914
 801f29c:	6812      	ldr	r2, [r2, #0]
 801f29e:	681b      	ldr	r3, [r3, #0]
 801f2a0:	41da      	rors	r2, r3
 801f2a2:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 801f2a6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f2a8:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 801f2ac:	681b      	ldr	r3, [r3, #0]
 801f2ae:	fa2f f283 	sxtb16	r2, r3
 801f2b2:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 801f2b6:	601a      	str	r2, [r3, #0]
  return(result);
 801f2b8:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 801f2bc:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801f2be:	f607 1308 	addw	r3, r7, #2312	; 0x908
 801f2c2:	601a      	str	r2, [r3, #0]
  return result;
 801f2c4:	f607 1308 	addw	r3, r7, #2312	; 0x908
 801f2c8:	681b      	ldr	r3, [r3, #0]
 801f2ca:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801f2ce:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801f2d2:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801f2d6:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801f2da:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 801f2de:	601a      	str	r2, [r3, #0]
 801f2e0:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 801f2e4:	6019      	str	r1, [r3, #0]
 801f2e6:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801f2ea:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f2ec:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 801f2f0:	6819      	ldr	r1, [r3, #0]
 801f2f2:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 801f2f6:	681a      	ldr	r2, [r3, #0]
 801f2f8:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801f2fc:	681b      	ldr	r3, [r3, #0]
 801f2fe:	fb21 3202 	smlad	r2, r1, r2, r3
 801f302:	f607 1324 	addw	r3, r7, #2340	; 0x924
 801f306:	601a      	str	r2, [r3, #0]
  return(result);
 801f308:	f607 1324 	addw	r3, r7, #2340	; 0x924
 801f30c:	681b      	ldr	r3, [r3, #0]
 801f30e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801f312:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f316:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801f31a:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801f31e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801f322:	601a      	str	r2, [r3, #0]
 801f324:	f607 133c 	addw	r3, r7, #2364	; 0x93c
 801f328:	6019      	str	r1, [r3, #0]
 801f32a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801f32e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f330:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801f334:	6819      	ldr	r1, [r3, #0]
 801f336:	f607 133c 	addw	r3, r7, #2364	; 0x93c
 801f33a:	681a      	ldr	r2, [r3, #0]
 801f33c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801f340:	681b      	ldr	r3, [r3, #0]
 801f342:	fb21 3202 	smlad	r2, r1, r2, r3
 801f346:	f607 1334 	addw	r3, r7, #2356	; 0x934
 801f34a:	601a      	str	r2, [r3, #0]
  return(result);
 801f34c:	f607 1334 	addw	r3, r7, #2356	; 0x934
 801f350:	681b      	ldr	r3, [r3, #0]
 801f352:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801f356:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f35a:	681a      	ldr	r2, [r3, #0]
 801f35c:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801f360:	4413      	add	r3, r2
 801f362:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 801f366:	f8d7 3944 	ldr.w	r3, [r7, #2372]	; 0x944
 801f36a:	681b      	ldr	r3, [r3, #0]
 801f36c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801f36e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f372:	601a      	str	r2, [r3, #0]
    return (val);
 801f374:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f378:	681b      	ldr	r3, [r3, #0]
 801f37a:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801f37e:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 801f382:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f386:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 801f38a:	fa2f f383 	sxtb16	r3, r3
 801f38e:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
  return(result);
 801f392:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
 801f396:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801f39a:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 801f39e:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
 801f3a2:	2308      	movs	r3, #8
 801f3a4:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801f3a8:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 801f3ac:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 801f3b0:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801f3b4:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
  op2 %= 32U;
 801f3b8:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801f3bc:	f003 031f 	and.w	r3, r3, #31
 801f3c0:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
  if (op2 == 0U)
 801f3c4:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	d102      	bne.n	801f3d2 <arm_nn_mat_mult_nt_t_s8+0x1630>
    return op1;
 801f3cc:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 801f3d0:	e005      	b.n	801f3de <arm_nn_mat_mult_nt_t_s8+0x163c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f3d2:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 801f3d6:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801f3da:	fa62 f303 	ror.w	r3, r2, r3
 801f3de:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f3e2:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801f3e6:	fa2f f383 	sxtb16	r3, r3
 801f3ea:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
  return(result);
 801f3ee:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
    result = __SXTB16(__ROR(op1, rotate)) ;
 801f3f2:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
  return result;
 801f3f6:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 801f3fa:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801f3fe:	f8d7 19b4 	ldr.w	r1, [r7, #2484]	; 0x9b4
 801f402:	f8d7 29bc 	ldr.w	r2, [r7, #2492]	; 0x9bc
 801f406:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801f40a:	f8c7 1978 	str.w	r1, [r7, #2424]	; 0x978
 801f40e:	f8c7 2974 	str.w	r2, [r7, #2420]	; 0x974
 801f412:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f416:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 801f41a:	f8d7 2974 	ldr.w	r2, [r7, #2420]	; 0x974
 801f41e:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 801f422:	fb21 3302 	smlad	r3, r1, r2, r3
 801f426:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
  return(result);
 801f42a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801f42e:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801f432:	f8d7 19b4 	ldr.w	r1, [r7, #2484]	; 0x9b4
 801f436:	f8d7 29ac 	ldr.w	r2, [r7, #2476]	; 0x9ac
 801f43a:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801f43e:	f8c7 1988 	str.w	r1, [r7, #2440]	; 0x988
 801f442:	f8c7 2984 	str.w	r2, [r7, #2436]	; 0x984
 801f446:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f44a:	f8d7 1988 	ldr.w	r1, [r7, #2440]	; 0x988
 801f44e:	f8d7 2984 	ldr.w	r2, [r7, #2436]	; 0x984
 801f452:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 801f456:	fb21 3302 	smlad	r3, r1, r2, r3
 801f45a:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
  return(result);
 801f45e:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 801f462:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801f466:	f8d7 19b8 	ldr.w	r1, [r7, #2488]	; 0x9b8
 801f46a:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801f46e:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801f472:	f8c7 1998 	str.w	r1, [r7, #2456]	; 0x998
 801f476:	f8c7 2994 	str.w	r2, [r7, #2452]	; 0x994
 801f47a:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f47e:	f8d7 1998 	ldr.w	r1, [r7, #2456]	; 0x998
 801f482:	f8d7 2994 	ldr.w	r2, [r7, #2452]	; 0x994
 801f486:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 801f48a:	fb21 3302 	smlad	r3, r1, r2, r3
 801f48e:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
  return(result);
 801f492:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 801f496:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val0, val4, res11);
 801f49a:	f8d7 19b8 	ldr.w	r1, [r7, #2488]	; 0x9b8
 801f49e:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801f4a2:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801f4a6:	f8c7 19a8 	str.w	r1, [r7, #2472]	; 0x9a8
 801f4aa:	f8c7 29a4 	str.w	r2, [r7, #2468]	; 0x9a4
 801f4ae:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f4b2:	f8d7 19a8 	ldr.w	r1, [r7, #2472]	; 0x9a8
 801f4b6:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801f4ba:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 801f4be:	fb21 3302 	smlad	r3, r1, r2, r3
 801f4c2:	f8c7 399c 	str.w	r3, [r7, #2460]	; 0x99c
  return(result);
 801f4c6:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 801f4ca:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801f4ce:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801f4d2:	3310      	adds	r3, #16
 801f4d4:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
 801f4d8:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f4dc:	f1a3 020f 	sub.w	r2, r3, #15
 801f4e0:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801f4e4:	4293      	cmp	r3, r2
 801f4e6:	f6fe ad09 	blt.w	801defc <arm_nn_mat_mult_nt_t_s8+0x15a>
            }

            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801f4ea:	e05c      	b.n	801f5a6 <arm_nn_mat_mult_nt_t_s8+0x1804>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 801f4ec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f4f0:	681b      	ldr	r3, [r3, #0]
 801f4f2:	781b      	ldrb	r3, [r3, #0]
 801f4f4:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 801f4f8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f4fc:	681a      	ldr	r2, [r3, #0]
 801f4fe:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f502:	4413      	add	r3, r2
 801f504:	781b      	ldrb	r3, [r3, #0]
 801f506:	f887 39c6 	strb.w	r3, [r7, #2502]	; 0x9c6
                q7_t lhs_value = lhs_ptr[0];
 801f50a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f50e:	681b      	ldr	r3, [r3, #0]
 801f510:	781b      	ldrb	r3, [r3, #0]
 801f512:	f887 39c5 	strb.w	r3, [r7, #2501]	; 0x9c5

                res00 += lhs_value * rhs_value0;
 801f516:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801f51a:	f997 39c7 	ldrsb.w	r3, [r7, #2503]	; 0x9c7
 801f51e:	fb03 f202 	mul.w	r2, r3, r2
 801f522:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801f526:	4413      	add	r3, r2
 801f528:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                res01 += lhs_value * rhs_value1;
 801f52c:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801f530:	f997 39c6 	ldrsb.w	r3, [r7, #2502]	; 0x9c6
 801f534:	fb03 f202 	mul.w	r2, r3, r2
 801f538:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 801f53c:	4413      	add	r3, r2
 801f53e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                lhs_value = lhs_ptr[rhs_cols];
 801f542:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f546:	681a      	ldr	r2, [r3, #0]
 801f548:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f54c:	4413      	add	r3, r2
 801f54e:	781b      	ldrb	r3, [r3, #0]
 801f550:	f887 39c5 	strb.w	r3, [r7, #2501]	; 0x9c5
                res10 += lhs_value * rhs_value0;
 801f554:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801f558:	f997 39c7 	ldrsb.w	r3, [r7, #2503]	; 0x9c7
 801f55c:	fb03 f202 	mul.w	r2, r3, r2
 801f560:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801f564:	4413      	add	r3, r2
 801f566:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 += lhs_value * rhs_value1;
 801f56a:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801f56e:	f997 39c6 	ldrsb.w	r3, [r7, #2502]	; 0x9c6
 801f572:	fb03 f202 	mul.w	r2, r3, r2
 801f576:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801f57a:	4413      	add	r3, r2
 801f57c:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                ++rhs_ptr;
 801f580:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f584:	681b      	ldr	r3, [r3, #0]
 801f586:	1c5a      	adds	r2, r3, #1
 801f588:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f58c:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 801f58e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f592:	681b      	ldr	r3, [r3, #0]
 801f594:	1c5a      	adds	r2, r3, #1
 801f596:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f59a:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801f59c:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801f5a0:	3301      	adds	r3, #1
 801f5a2:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
 801f5a6:	f8d7 2a14 	ldr.w	r2, [r7, #2580]	; 0xa14
 801f5aa:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f5ae:	429a      	cmp	r2, r3
 801f5b0:	db9c      	blt.n	801f4ec <arm_nn_mat_mult_nt_t_s8+0x174a>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801f5b2:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f5b6:	009a      	lsls	r2, r3, #2
 801f5b8:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801f5bc:	4413      	add	r3, r2
 801f5be:	6818      	ldr	r0, [r3, #0]
 801f5c0:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f5c4:	009a      	lsls	r2, r3, #2
 801f5c6:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801f5ca:	4413      	add	r3, r2
 801f5cc:	6819      	ldr	r1, [r3, #0]
 801f5ce:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 801f5d2:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801f5d6:	6013      	str	r3, [r2, #0]
 801f5d8:	f207 4394 	addw	r3, r7, #1172	; 0x494
 801f5dc:	6018      	str	r0, [r3, #0]
 801f5de:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801f5e2:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f5e4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801f5e8:	681b      	ldr	r3, [r3, #0]
 801f5ea:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801f5ee:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801f5f2:	681b      	ldr	r3, [r3, #0]
 801f5f4:	fa03 f202 	lsl.w	r2, r3, r2
 801f5f8:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 801f5fc:	601a      	str	r2, [r3, #0]
 801f5fe:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 801f602:	f207 4394 	addw	r3, r7, #1172	; 0x494
 801f606:	681b      	ldr	r3, [r3, #0]
 801f608:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f60a:	f207 4284 	addw	r2, r7, #1156	; 0x484
 801f60e:	2300      	movs	r3, #0
 801f610:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801f612:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801f616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f61a:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801f61c:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801f620:	2300      	movs	r3, #0
 801f622:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801f624:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f628:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f62c:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 801f630:	681b      	ldr	r3, [r3, #0]
 801f632:	4618      	mov	r0, r3
 801f634:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801f638:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 801f63c:	681b      	ldr	r3, [r3, #0]
 801f63e:	461a      	mov	r2, r3
 801f640:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f644:	fb02 f501 	mul.w	r5, r2, r1
 801f648:	fb00 f403 	mul.w	r4, r0, r3
 801f64c:	442c      	add	r4, r5
 801f64e:	fba0 2302 	umull	r2, r3, r0, r2
 801f652:	18e1      	adds	r1, r4, r3
 801f654:	460b      	mov	r3, r1
 801f656:	eb18 0102 	adds.w	r1, r8, r2
 801f65a:	6139      	str	r1, [r7, #16]
 801f65c:	eb49 0303 	adc.w	r3, r9, r3
 801f660:	617b      	str	r3, [r7, #20]
 801f662:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f666:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801f66a:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801f66e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f672:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f676:	f04f 0000 	mov.w	r0, #0
 801f67a:	f04f 0100 	mov.w	r1, #0
 801f67e:	0fd0      	lsrs	r0, r2, #31
 801f680:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801f684:	17d9      	asrs	r1, r3, #31
 801f686:	f207 4284 	addw	r2, r7, #1156	; 0x484
 801f68a:	4603      	mov	r3, r0
 801f68c:	6013      	str	r3, [r2, #0]
    return result;
 801f68e:	f207 4384 	addw	r3, r7, #1156	; 0x484
 801f692:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f694:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801f698:	681b      	ldr	r3, [r3, #0]
 801f69a:	2b00      	cmp	r3, #0
 801f69c:	dc04      	bgt.n	801f6a8 <arm_nn_mat_mult_nt_t_s8+0x1906>
 801f69e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801f6a2:	681b      	ldr	r3, [r3, #0]
 801f6a4:	425a      	negs	r2, r3
 801f6a6:	e000      	b.n	801f6aa <arm_nn_mat_mult_nt_t_s8+0x1908>
 801f6a8:	2200      	movs	r2, #0
 801f6aa:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801f6ae:	6019      	str	r1, [r3, #0]
 801f6b0:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 801f6b4:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801f6b6:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 801f6ba:	2300      	movs	r3, #0
 801f6bc:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801f6be:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 801f6c2:	2201      	movs	r2, #1
 801f6c4:	681b      	ldr	r3, [r3, #0]
 801f6c6:	fa02 f303 	lsl.w	r3, r2, r3
 801f6ca:	f207 4274 	addw	r2, r7, #1140	; 0x474
 801f6ce:	3b01      	subs	r3, #1
 801f6d0:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801f6d2:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 801f6d6:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 801f6da:	f207 4374 	addw	r3, r7, #1140	; 0x474
 801f6de:	6812      	ldr	r2, [r2, #0]
 801f6e0:	681b      	ldr	r3, [r3, #0]
 801f6e2:	4013      	ands	r3, r2
 801f6e4:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801f6e6:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 801f6ea:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 801f6ee:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 801f6f2:	6812      	ldr	r2, [r2, #0]
 801f6f4:	681b      	ldr	r3, [r3, #0]
 801f6f6:	fa42 f303 	asr.w	r3, r2, r3
 801f6fa:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801f6fc:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 801f700:	f207 4374 	addw	r3, r7, #1140	; 0x474
 801f704:	681b      	ldr	r3, [r3, #0]
 801f706:	105b      	asrs	r3, r3, #1
 801f708:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801f70a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801f70e:	681b      	ldr	r3, [r3, #0]
 801f710:	2b00      	cmp	r3, #0
 801f712:	da06      	bge.n	801f722 <arm_nn_mat_mult_nt_t_s8+0x1980>
        threshold++;
 801f714:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 801f718:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 801f71c:	681b      	ldr	r3, [r3, #0]
 801f71e:	3301      	adds	r3, #1
 801f720:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801f722:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 801f726:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 801f72a:	6812      	ldr	r2, [r2, #0]
 801f72c:	681b      	ldr	r3, [r3, #0]
 801f72e:	429a      	cmp	r2, r3
 801f730:	dd06      	ble.n	801f740 <arm_nn_mat_mult_nt_t_s8+0x199e>
        result++;
 801f732:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 801f736:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801f73a:	681b      	ldr	r3, [r3, #0]
 801f73c:	3301      	adds	r3, #1
 801f73e:	6013      	str	r3, [r2, #0]
    return result;
 801f740:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801f744:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f746:	bf00      	nop
 801f748:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801f74c:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f750:	3301      	adds	r3, #1
 801f752:	009a      	lsls	r2, r3, #2
 801f754:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801f758:	4413      	add	r3, r2
 801f75a:	6818      	ldr	r0, [r3, #0]
 801f75c:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f760:	3301      	adds	r3, #1
 801f762:	009a      	lsls	r2, r3, #2
 801f764:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801f768:	4413      	add	r3, r2
 801f76a:	6819      	ldr	r1, [r3, #0]
 801f76c:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 801f770:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 801f774:	6013      	str	r3, [r2, #0]
 801f776:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 801f77a:	6018      	str	r0, [r3, #0]
 801f77c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801f780:	6019      	str	r1, [r3, #0]
 801f782:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801f786:	681b      	ldr	r3, [r3, #0]
 801f788:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801f78c:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 801f790:	681b      	ldr	r3, [r3, #0]
 801f792:	fa03 f202 	lsl.w	r2, r3, r2
 801f796:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 801f79a:	601a      	str	r2, [r3, #0]
 801f79c:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 801f7a0:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 801f7a4:	681b      	ldr	r3, [r3, #0]
 801f7a6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f7a8:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 801f7ac:	2300      	movs	r3, #0
 801f7ae:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801f7b0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801f7b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f7b8:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801f7ba:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801f7be:	2300      	movs	r3, #0
 801f7c0:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801f7c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801f7c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f7ca:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 801f7ce:	681b      	ldr	r3, [r3, #0]
 801f7d0:	4618      	mov	r0, r3
 801f7d2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801f7d6:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 801f7da:	681b      	ldr	r3, [r3, #0]
 801f7dc:	461a      	mov	r2, r3
 801f7de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f7e2:	fb02 f501 	mul.w	r5, r2, r1
 801f7e6:	fb00 f403 	mul.w	r4, r0, r3
 801f7ea:	442c      	add	r4, r5
 801f7ec:	fba0 2302 	umull	r2, r3, r0, r2
 801f7f0:	18e1      	adds	r1, r4, r3
 801f7f2:	460b      	mov	r3, r1
 801f7f4:	eb18 0102 	adds.w	r1, r8, r2
 801f7f8:	61b9      	str	r1, [r7, #24]
 801f7fa:	eb49 0303 	adc.w	r3, r9, r3
 801f7fe:	61fb      	str	r3, [r7, #28]
 801f800:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801f804:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801f808:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801f80c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801f810:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f814:	f04f 0000 	mov.w	r0, #0
 801f818:	f04f 0100 	mov.w	r1, #0
 801f81c:	0fd0      	lsrs	r0, r2, #31
 801f81e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801f822:	17d9      	asrs	r1, r3, #31
 801f824:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 801f828:	4603      	mov	r3, r0
 801f82a:	6013      	str	r3, [r2, #0]
    return result;
 801f82c:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 801f830:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f832:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801f836:	681b      	ldr	r3, [r3, #0]
 801f838:	2b00      	cmp	r3, #0
 801f83a:	dc04      	bgt.n	801f846 <arm_nn_mat_mult_nt_t_s8+0x1aa4>
 801f83c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801f840:	681b      	ldr	r3, [r3, #0]
 801f842:	425a      	negs	r2, r3
 801f844:	e000      	b.n	801f848 <arm_nn_mat_mult_nt_t_s8+0x1aa6>
 801f846:	2200      	movs	r2, #0
 801f848:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 801f84c:	6019      	str	r1, [r3, #0]
 801f84e:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 801f852:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801f854:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 801f858:	2300      	movs	r3, #0
 801f85a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801f85c:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 801f860:	2201      	movs	r2, #1
 801f862:	681b      	ldr	r3, [r3, #0]
 801f864:	fa02 f303 	lsl.w	r3, r2, r3
 801f868:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 801f86c:	3b01      	subs	r3, #1
 801f86e:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801f870:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 801f874:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 801f878:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 801f87c:	6812      	ldr	r2, [r2, #0]
 801f87e:	681b      	ldr	r3, [r3, #0]
 801f880:	4013      	ands	r3, r2
 801f882:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801f884:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 801f888:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 801f88c:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 801f890:	6812      	ldr	r2, [r2, #0]
 801f892:	681b      	ldr	r3, [r3, #0]
 801f894:	fa42 f303 	asr.w	r3, r2, r3
 801f898:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801f89a:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 801f89e:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 801f8a2:	681b      	ldr	r3, [r3, #0]
 801f8a4:	105b      	asrs	r3, r3, #1
 801f8a6:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801f8a8:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 801f8ac:	681b      	ldr	r3, [r3, #0]
 801f8ae:	2b00      	cmp	r3, #0
 801f8b0:	da06      	bge.n	801f8c0 <arm_nn_mat_mult_nt_t_s8+0x1b1e>
        threshold++;
 801f8b2:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 801f8b6:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 801f8ba:	681b      	ldr	r3, [r3, #0]
 801f8bc:	3301      	adds	r3, #1
 801f8be:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801f8c0:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 801f8c4:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 801f8c8:	6812      	ldr	r2, [r2, #0]
 801f8ca:	681b      	ldr	r3, [r3, #0]
 801f8cc:	429a      	cmp	r2, r3
 801f8ce:	dd06      	ble.n	801f8de <arm_nn_mat_mult_nt_t_s8+0x1b3c>
        result++;
 801f8d0:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 801f8d4:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 801f8d8:	681b      	ldr	r3, [r3, #0]
 801f8da:	3301      	adds	r3, #1
 801f8dc:	6013      	str	r3, [r2, #0]
    return result;
 801f8de:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 801f8e2:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f8e4:	bf00      	nop
 801f8e6:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801f8ea:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f8ee:	009a      	lsls	r2, r3, #2
 801f8f0:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801f8f4:	4413      	add	r3, r2
 801f8f6:	6818      	ldr	r0, [r3, #0]
 801f8f8:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f8fc:	009a      	lsls	r2, r3, #2
 801f8fe:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801f902:	4413      	add	r3, r2
 801f904:	6819      	ldr	r1, [r3, #0]
 801f906:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 801f90a:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801f90e:	6013      	str	r3, [r2, #0]
 801f910:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 801f914:	6018      	str	r0, [r3, #0]
 801f916:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801f91a:	6019      	str	r1, [r3, #0]
 801f91c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801f920:	681b      	ldr	r3, [r3, #0]
 801f922:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801f926:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 801f92a:	681b      	ldr	r3, [r3, #0]
 801f92c:	fa03 f202 	lsl.w	r2, r3, r2
 801f930:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 801f934:	601a      	str	r2, [r3, #0]
 801f936:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 801f93a:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 801f93e:	681b      	ldr	r3, [r3, #0]
 801f940:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f942:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 801f946:	2300      	movs	r3, #0
 801f948:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801f94a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801f94e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f952:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801f954:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801f958:	2300      	movs	r3, #0
 801f95a:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801f95c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f960:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f964:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 801f968:	681b      	ldr	r3, [r3, #0]
 801f96a:	4618      	mov	r0, r3
 801f96c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801f970:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 801f974:	681b      	ldr	r3, [r3, #0]
 801f976:	461a      	mov	r2, r3
 801f978:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f97c:	fb02 f501 	mul.w	r5, r2, r1
 801f980:	fb00 f403 	mul.w	r4, r0, r3
 801f984:	442c      	add	r4, r5
 801f986:	fba0 2302 	umull	r2, r3, r0, r2
 801f98a:	18e1      	adds	r1, r4, r3
 801f98c:	460b      	mov	r3, r1
 801f98e:	eb18 0102 	adds.w	r1, r8, r2
 801f992:	6239      	str	r1, [r7, #32]
 801f994:	eb49 0303 	adc.w	r3, r9, r3
 801f998:	627b      	str	r3, [r7, #36]	; 0x24
 801f99a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f99e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801f9a2:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801f9a6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9ae:	f04f 0000 	mov.w	r0, #0
 801f9b2:	f04f 0100 	mov.w	r1, #0
 801f9b6:	0fd0      	lsrs	r0, r2, #31
 801f9b8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801f9bc:	17d9      	asrs	r1, r3, #31
 801f9be:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 801f9c2:	4603      	mov	r3, r0
 801f9c4:	6013      	str	r3, [r2, #0]
    return result;
 801f9c6:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 801f9ca:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f9cc:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801f9d0:	681b      	ldr	r3, [r3, #0]
 801f9d2:	2b00      	cmp	r3, #0
 801f9d4:	dc04      	bgt.n	801f9e0 <arm_nn_mat_mult_nt_t_s8+0x1c3e>
 801f9d6:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801f9da:	681b      	ldr	r3, [r3, #0]
 801f9dc:	425a      	negs	r2, r3
 801f9de:	e000      	b.n	801f9e2 <arm_nn_mat_mult_nt_t_s8+0x1c40>
 801f9e0:	2200      	movs	r2, #0
 801f9e2:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 801f9e6:	6019      	str	r1, [r3, #0]
 801f9e8:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 801f9ec:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801f9ee:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 801f9f2:	2300      	movs	r3, #0
 801f9f4:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801f9f6:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 801f9fa:	2201      	movs	r2, #1
 801f9fc:	681b      	ldr	r3, [r3, #0]
 801f9fe:	fa02 f303 	lsl.w	r3, r2, r3
 801fa02:	f207 42d4 	addw	r2, r7, #1236	; 0x4d4
 801fa06:	3b01      	subs	r3, #1
 801fa08:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801fa0a:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 801fa0e:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 801fa12:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 801fa16:	6812      	ldr	r2, [r2, #0]
 801fa18:	681b      	ldr	r3, [r3, #0]
 801fa1a:	4013      	ands	r3, r2
 801fa1c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801fa1e:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 801fa22:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 801fa26:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 801fa2a:	6812      	ldr	r2, [r2, #0]
 801fa2c:	681b      	ldr	r3, [r3, #0]
 801fa2e:	fa42 f303 	asr.w	r3, r2, r3
 801fa32:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801fa34:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 801fa38:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 801fa3c:	681b      	ldr	r3, [r3, #0]
 801fa3e:	105b      	asrs	r3, r3, #1
 801fa40:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801fa42:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801fa46:	681b      	ldr	r3, [r3, #0]
 801fa48:	2b00      	cmp	r3, #0
 801fa4a:	da06      	bge.n	801fa5a <arm_nn_mat_mult_nt_t_s8+0x1cb8>
        threshold++;
 801fa4c:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 801fa50:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 801fa54:	681b      	ldr	r3, [r3, #0]
 801fa56:	3301      	adds	r3, #1
 801fa58:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801fa5a:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 801fa5e:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 801fa62:	6812      	ldr	r2, [r2, #0]
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	429a      	cmp	r2, r3
 801fa68:	dd06      	ble.n	801fa78 <arm_nn_mat_mult_nt_t_s8+0x1cd6>
        result++;
 801fa6a:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 801fa6e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801fa72:	681b      	ldr	r3, [r3, #0]
 801fa74:	3301      	adds	r3, #1
 801fa76:	6013      	str	r3, [r2, #0]
    return result;
 801fa78:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801fa7c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801fa7e:	bf00      	nop
 801fa80:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801fa84:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801fa88:	3301      	adds	r3, #1
 801fa8a:	009a      	lsls	r2, r3, #2
 801fa8c:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801fa90:	4413      	add	r3, r2
 801fa92:	6818      	ldr	r0, [r3, #0]
 801fa94:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801fa98:	3301      	adds	r3, #1
 801fa9a:	009a      	lsls	r2, r3, #2
 801fa9c:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801faa0:	4413      	add	r3, r2
 801faa2:	6819      	ldr	r1, [r3, #0]
 801faa4:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 801faa8:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801faac:	6013      	str	r3, [r2, #0]
 801faae:	f207 5324 	addw	r3, r7, #1316	; 0x524
 801fab2:	6018      	str	r0, [r3, #0]
 801fab4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801fab8:	6019      	str	r1, [r3, #0]
 801faba:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801fabe:	681b      	ldr	r3, [r3, #0]
 801fac0:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801fac4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801fac8:	681b      	ldr	r3, [r3, #0]
 801faca:	fa03 f202 	lsl.w	r2, r3, r2
 801face:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 801fad2:	601a      	str	r2, [r3, #0]
 801fad4:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 801fad8:	f207 5324 	addw	r3, r7, #1316	; 0x524
 801fadc:	681b      	ldr	r3, [r3, #0]
 801fade:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801fae0:	f207 5214 	addw	r2, r7, #1300	; 0x514
 801fae4:	2300      	movs	r3, #0
 801fae6:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801fae8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801faec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801faf0:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801faf2:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801faf6:	2300      	movs	r3, #0
 801faf8:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801fafa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801fafe:	e9d3 8900 	ldrd	r8, r9, [r3]
 801fb02:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 801fb06:	681b      	ldr	r3, [r3, #0]
 801fb08:	4618      	mov	r0, r3
 801fb0a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801fb0e:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 801fb12:	681b      	ldr	r3, [r3, #0]
 801fb14:	461a      	mov	r2, r3
 801fb16:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801fb1a:	fb02 f501 	mul.w	r5, r2, r1
 801fb1e:	fb00 f403 	mul.w	r4, r0, r3
 801fb22:	442c      	add	r4, r5
 801fb24:	fba0 2302 	umull	r2, r3, r0, r2
 801fb28:	18e1      	adds	r1, r4, r3
 801fb2a:	460b      	mov	r3, r1
 801fb2c:	eb18 0102 	adds.w	r1, r8, r2
 801fb30:	62b9      	str	r1, [r7, #40]	; 0x28
 801fb32:	eb49 0303 	adc.w	r3, r9, r3
 801fb36:	62fb      	str	r3, [r7, #44]	; 0x2c
 801fb38:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801fb3c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801fb40:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801fb44:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801fb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb4c:	f04f 0000 	mov.w	r0, #0
 801fb50:	f04f 0100 	mov.w	r1, #0
 801fb54:	0fd0      	lsrs	r0, r2, #31
 801fb56:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801fb5a:	17d9      	asrs	r1, r3, #31
 801fb5c:	f207 5214 	addw	r2, r7, #1300	; 0x514
 801fb60:	4603      	mov	r3, r0
 801fb62:	6013      	str	r3, [r2, #0]
    return result;
 801fb64:	f207 5314 	addw	r3, r7, #1300	; 0x514
 801fb68:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801fb6a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801fb6e:	681b      	ldr	r3, [r3, #0]
 801fb70:	2b00      	cmp	r3, #0
 801fb72:	dc04      	bgt.n	801fb7e <arm_nn_mat_mult_nt_t_s8+0x1ddc>
 801fb74:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801fb78:	681b      	ldr	r3, [r3, #0]
 801fb7a:	425a      	negs	r2, r3
 801fb7c:	e000      	b.n	801fb80 <arm_nn_mat_mult_nt_t_s8+0x1dde>
 801fb7e:	2200      	movs	r2, #0
 801fb80:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 801fb84:	6019      	str	r1, [r3, #0]
 801fb86:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 801fb8a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801fb8c:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 801fb90:	2300      	movs	r3, #0
 801fb92:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801fb94:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 801fb98:	2201      	movs	r2, #1
 801fb9a:	681b      	ldr	r3, [r3, #0]
 801fb9c:	fa02 f303 	lsl.w	r3, r2, r3
 801fba0:	f207 5204 	addw	r2, r7, #1284	; 0x504
 801fba4:	3b01      	subs	r3, #1
 801fba6:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801fba8:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 801fbac:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 801fbb0:	f207 5304 	addw	r3, r7, #1284	; 0x504
 801fbb4:	6812      	ldr	r2, [r2, #0]
 801fbb6:	681b      	ldr	r3, [r3, #0]
 801fbb8:	4013      	ands	r3, r2
 801fbba:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801fbbc:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 801fbc0:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 801fbc4:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 801fbc8:	6812      	ldr	r2, [r2, #0]
 801fbca:	681b      	ldr	r3, [r3, #0]
 801fbcc:	fa42 f303 	asr.w	r3, r2, r3
 801fbd0:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801fbd2:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 801fbd6:	f207 5304 	addw	r3, r7, #1284	; 0x504
 801fbda:	681b      	ldr	r3, [r3, #0]
 801fbdc:	105b      	asrs	r3, r3, #1
 801fbde:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801fbe0:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 801fbe4:	681b      	ldr	r3, [r3, #0]
 801fbe6:	2b00      	cmp	r3, #0
 801fbe8:	da06      	bge.n	801fbf8 <arm_nn_mat_mult_nt_t_s8+0x1e56>
        threshold++;
 801fbea:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 801fbee:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 801fbf2:	681b      	ldr	r3, [r3, #0]
 801fbf4:	3301      	adds	r3, #1
 801fbf6:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801fbf8:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 801fbfc:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 801fc00:	6812      	ldr	r2, [r2, #0]
 801fc02:	681b      	ldr	r3, [r3, #0]
 801fc04:	429a      	cmp	r2, r3
 801fc06:	dd06      	ble.n	801fc16 <arm_nn_mat_mult_nt_t_s8+0x1e74>
        result++;
 801fc08:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 801fc0c:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 801fc10:	681b      	ldr	r3, [r3, #0]
 801fc12:	3301      	adds	r3, #1
 801fc14:	6013      	str	r3, [r2, #0]
    return result;
 801fc16:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 801fc1a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801fc1c:	bf00      	nop
 801fc1e:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            // Add offset
            res00 += dst_offset;
 801fc22:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 801fc26:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801fc2a:	4413      	add	r3, r2
 801fc2c:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 += dst_offset;
 801fc30:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 801fc34:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801fc38:	4413      	add	r3, r2
 801fc3a:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 += dst_offset;
 801fc3e:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 801fc42:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801fc46:	4413      	add	r3, r2
 801fc48:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 += dst_offset;
 801fc4c:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 801fc50:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801fc54:	4413      	add	r3, r2
 801fc56:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801fc5a:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 801fc5e:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801fc62:	4293      	cmp	r3, r2
 801fc64:	bfb8      	it	lt
 801fc66:	4613      	movlt	r3, r2
 801fc68:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res00 = MIN(res00, activation_max);
 801fc6c:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 801fc70:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801fc74:	4293      	cmp	r3, r2
 801fc76:	bfa8      	it	ge
 801fc78:	4613      	movge	r3, r2
 801fc7a:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 = MAX(res01, activation_min);
 801fc7e:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 801fc82:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801fc86:	4293      	cmp	r3, r2
 801fc88:	bfb8      	it	lt
 801fc8a:	4613      	movlt	r3, r2
 801fc8c:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res01 = MIN(res01, activation_max);
 801fc90:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 801fc94:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801fc98:	4293      	cmp	r3, r2
 801fc9a:	bfa8      	it	ge
 801fc9c:	4613      	movge	r3, r2
 801fc9e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 = MAX(res10, activation_min);
 801fca2:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 801fca6:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801fcaa:	4293      	cmp	r3, r2
 801fcac:	bfb8      	it	lt
 801fcae:	4613      	movlt	r3, r2
 801fcb0:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res10 = MIN(res10, activation_max);
 801fcb4:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 801fcb8:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801fcbc:	4293      	cmp	r3, r2
 801fcbe:	bfa8      	it	ge
 801fcc0:	4613      	movge	r3, r2
 801fcc2:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 = MAX(res11, activation_min);
 801fcc6:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 801fcca:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801fcce:	4293      	cmp	r3, r2
 801fcd0:	bfb8      	it	lt
 801fcd2:	4613      	movlt	r3, r2
 801fcd4:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
            res11 = MIN(res11, activation_max);
 801fcd8:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 801fcdc:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801fce0:	4293      	cmp	r3, r2
 801fce2:	bfa8      	it	ge
 801fce4:	4613      	movge	r3, r2
 801fce6:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            dst_ptr[0] = (q7_t)res00;
 801fcea:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801fcee:	b25b      	sxtb	r3, r3
 801fcf0:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 801fcf4:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 801fcf6:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801fcfa:	1c5a      	adds	r2, r3, #1
 801fcfc:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 801fd00:	b25b      	sxtb	r3, r3
 801fd02:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 801fd04:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801fd08:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801fd0c:	4413      	add	r3, r2
 801fd0e:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38
            dst_ptr[0] = (q7_t)res10;
 801fd12:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801fd16:	b25b      	sxtb	r3, r3
 801fd18:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 801fd1c:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res11;
 801fd1e:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801fd22:	1c5a      	adds	r2, r3, #1
 801fd24:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801fd28:	b25b      	sxtb	r3, r3
 801fd2a:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 801fd2c:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801fd30:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801fd34:	4413      	add	r3, r2
 801fd36:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38

            lhs_ptr += rhs_cols;
 801fd3a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fd3e:	681a      	ldr	r2, [r3, #0]
 801fd40:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801fd44:	441a      	add	r2, r3
 801fd46:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fd4a:	601a      	str	r2, [r3, #0]

            lhs_rows_idx--;
 801fd4c:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 801fd50:	3b01      	subs	r3, #1
 801fd52:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
        while (lhs_rows_idx)
 801fd56:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 801fd5a:	2b00      	cmp	r3, #0
 801fd5c:	f47e a8b3 	bne.w	801dec6 <arm_nn_mat_mult_nt_t_s8+0x124>
        }

        // Left-over rows
        if (lhs_rows % 2)
 801fd60:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 801fd64:	f003 0301 	and.w	r3, r3, #1
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	f001 8195 	beq.w	8021098 <arm_nn_mat_mult_nt_t_s8+0x32f6>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801fd6e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 801fd72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801fd76:	681b      	ldr	r3, [r3, #0]
 801fd78:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 801fd7a:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801fd7e:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            q31_t res01 = lhs_offset_contribution1;
 801fd82:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801fd86:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            int32_t rhs_cols_idx = 0;
 801fd8a:	2300      	movs	r3, #0
 801fd8c:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08

            q31_t val0, val1, val2, val3, val4, val5;
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801fd90:	f000 bf59 	b.w	8020c46 <arm_nn_mat_mult_nt_t_s8+0x2ea4>
 801fd94:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 801fd98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801fd9c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801fd9e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801fda2:	681b      	ldr	r3, [r3, #0]
 801fda4:	681b      	ldr	r3, [r3, #0]
 801fda6:	681b      	ldr	r3, [r3, #0]
 801fda8:	461a      	mov	r2, r3
 801fdaa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801fdae:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fdb0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801fdb4:	681b      	ldr	r3, [r3, #0]
 801fdb6:	681b      	ldr	r3, [r3, #0]
 801fdb8:	1d1a      	adds	r2, r3, #4
 801fdba:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801fdbe:	681b      	ldr	r3, [r3, #0]
 801fdc0:	601a      	str	r2, [r3, #0]
    return (val);
 801fdc2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801fdc6:	681b      	ldr	r3, [r3, #0]
            {
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801fdc8:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801fdcc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801fdd0:	681a      	ldr	r2, [r3, #0]
 801fdd2:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801fdd6:	441a      	add	r2, r3
 801fdd8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801fddc:	601a      	str	r2, [r3, #0]
 801fdde:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801fde2:	681b      	ldr	r3, [r3, #0]
 801fde4:	681b      	ldr	r3, [r3, #0]
 801fde6:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801fde8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801fdec:	601a      	str	r2, [r3, #0]
    return (val);
 801fdee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801fdf2:	681b      	ldr	r3, [r3, #0]
 801fdf4:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 801fdf8:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 801fdfc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fe00:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801fe02:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801fe06:	681b      	ldr	r3, [r3, #0]
 801fe08:	681b      	ldr	r3, [r3, #0]
 801fe0a:	681b      	ldr	r3, [r3, #0]
 801fe0c:	461a      	mov	r2, r3
 801fe0e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801fe12:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fe14:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801fe18:	681b      	ldr	r3, [r3, #0]
 801fe1a:	681b      	ldr	r3, [r3, #0]
 801fe1c:	1d1a      	adds	r2, r3, #4
 801fe1e:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801fe22:	681b      	ldr	r3, [r3, #0]
 801fe24:	601a      	str	r2, [r3, #0]
    return (val);
 801fe26:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801fe2a:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801fe2c:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 801fe30:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801fe34:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801fe38:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fe3a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801fe3e:	681b      	ldr	r3, [r3, #0]
 801fe40:	fa2f f283 	sxtb16	r2, r3
 801fe44:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801fe48:	601a      	str	r2, [r3, #0]
  return(result);
 801fe4a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801fe4e:	681b      	ldr	r3, [r3, #0]
 801fe50:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 801fe54:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801fe58:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801fe5c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fe5e:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801fe62:	681b      	ldr	r3, [r3, #0]
 801fe64:	fa2f f283 	sxtb16	r2, r3
 801fe68:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801fe6c:	601a      	str	r2, [r3, #0]
  return(result);
 801fe6e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801fe72:	681b      	ldr	r3, [r3, #0]
 801fe74:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 801fe78:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801fe7c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801fe80:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fe82:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801fe86:	681b      	ldr	r3, [r3, #0]
 801fe88:	fa2f f283 	sxtb16	r2, r3
 801fe8c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801fe90:	601a      	str	r2, [r3, #0]
  return(result);
 801fe92:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801fe96:	681b      	ldr	r3, [r3, #0]
 801fe98:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 801fe9c:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801fea0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801fea4:	601a      	str	r2, [r3, #0]
 801fea6:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 801feaa:	2308      	movs	r3, #8
 801feac:	6013      	str	r3, [r2, #0]
 801feae:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801feb2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801feb6:	681b      	ldr	r3, [r3, #0]
 801feb8:	6013      	str	r3, [r2, #0]
 801feba:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 801febe:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801fec2:	681b      	ldr	r3, [r3, #0]
 801fec4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801fec6:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 801feca:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801fece:	681b      	ldr	r3, [r3, #0]
 801fed0:	f003 031f 	and.w	r3, r3, #31
 801fed4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801fed6:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801feda:	681b      	ldr	r3, [r3, #0]
 801fedc:	2b00      	cmp	r3, #0
 801fede:	d103      	bne.n	801fee8 <arm_nn_mat_mult_nt_t_s8+0x2146>
    return op1;
 801fee0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801fee4:	681a      	ldr	r2, [r3, #0]
 801fee6:	e006      	b.n	801fef6 <arm_nn_mat_mult_nt_t_s8+0x2154>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fee8:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801feec:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801fef0:	6812      	ldr	r2, [r2, #0]
 801fef2:	681b      	ldr	r3, [r3, #0]
 801fef4:	41da      	rors	r2, r3
 801fef6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801fefa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fefc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801ff00:	681b      	ldr	r3, [r3, #0]
 801ff02:	fa2f f283 	sxtb16	r2, r3
 801ff06:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801ff0a:	601a      	str	r2, [r3, #0]
  return(result);
 801ff0c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801ff10:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ff12:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801ff16:	601a      	str	r2, [r3, #0]
  return result;
 801ff18:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801ff1c:	681b      	ldr	r3, [r3, #0]
 801ff1e:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 801ff22:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801ff26:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801ff2a:	601a      	str	r2, [r3, #0]
 801ff2c:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 801ff30:	2308      	movs	r3, #8
 801ff32:	6013      	str	r3, [r2, #0]
 801ff34:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801ff38:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801ff3c:	681b      	ldr	r3, [r3, #0]
 801ff3e:	6013      	str	r3, [r2, #0]
 801ff40:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 801ff44:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801ff48:	681b      	ldr	r3, [r3, #0]
 801ff4a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ff4c:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 801ff50:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801ff54:	681b      	ldr	r3, [r3, #0]
 801ff56:	f003 031f 	and.w	r3, r3, #31
 801ff5a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ff5c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801ff60:	681b      	ldr	r3, [r3, #0]
 801ff62:	2b00      	cmp	r3, #0
 801ff64:	d103      	bne.n	801ff6e <arm_nn_mat_mult_nt_t_s8+0x21cc>
    return op1;
 801ff66:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801ff6a:	681a      	ldr	r2, [r3, #0]
 801ff6c:	e006      	b.n	801ff7c <arm_nn_mat_mult_nt_t_s8+0x21da>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ff6e:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801ff72:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801ff76:	6812      	ldr	r2, [r2, #0]
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	41da      	rors	r2, r3
 801ff7c:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801ff80:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ff82:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801ff86:	681b      	ldr	r3, [r3, #0]
 801ff88:	fa2f f283 	sxtb16	r2, r3
 801ff8c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801ff90:	601a      	str	r2, [r3, #0]
  return(result);
 801ff92:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801ff96:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ff98:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801ff9c:	601a      	str	r2, [r3, #0]
  return result;
 801ff9e:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801ffa2:	681b      	ldr	r3, [r3, #0]
 801ffa4:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 801ffa8:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801ffac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801ffb0:	601a      	str	r2, [r3, #0]
 801ffb2:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 801ffb6:	2308      	movs	r3, #8
 801ffb8:	6013      	str	r3, [r2, #0]
 801ffba:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801ffbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801ffc2:	681b      	ldr	r3, [r3, #0]
 801ffc4:	6013      	str	r3, [r2, #0]
 801ffc6:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 801ffca:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801ffce:	681b      	ldr	r3, [r3, #0]
 801ffd0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ffd2:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 801ffd6:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801ffda:	681b      	ldr	r3, [r3, #0]
 801ffdc:	f003 031f 	and.w	r3, r3, #31
 801ffe0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ffe2:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801ffe6:	681b      	ldr	r3, [r3, #0]
 801ffe8:	2b00      	cmp	r3, #0
 801ffea:	d103      	bne.n	801fff4 <arm_nn_mat_mult_nt_t_s8+0x2252>
    return op1;
 801ffec:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801fff0:	681a      	ldr	r2, [r3, #0]
 801fff2:	e006      	b.n	8020002 <arm_nn_mat_mult_nt_t_s8+0x2260>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fff4:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801fff8:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801fffc:	6812      	ldr	r2, [r2, #0]
 801fffe:	681b      	ldr	r3, [r3, #0]
 8020000:	41da      	rors	r2, r3
 8020002:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8020006:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020008:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 802000c:	681b      	ldr	r3, [r3, #0]
 802000e:	fa2f f283 	sxtb16	r2, r3
 8020012:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8020016:	601a      	str	r2, [r3, #0]
  return(result);
 8020018:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 802001c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 802001e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8020022:	601a      	str	r2, [r3, #0]
  return result;
 8020024:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8020028:	681b      	ldr	r3, [r3, #0]
 802002a:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 802002e:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020032:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 8020036:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 802003a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802003e:	601a      	str	r2, [r3, #0]
 8020040:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8020044:	6019      	str	r1, [r3, #0]
 8020046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 802004a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802004c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8020050:	6819      	ldr	r1, [r3, #0]
 8020052:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8020056:	681a      	ldr	r2, [r3, #0]
 8020058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 802005c:	681b      	ldr	r3, [r3, #0]
 802005e:	fb21 3202 	smlad	r2, r1, r2, r3
 8020062:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8020066:	601a      	str	r2, [r3, #0]
  return(result);
 8020068:	f507 7301 	add.w	r3, r7, #516	; 0x204
 802006c:	681b      	ldr	r3, [r3, #0]
 802006e:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 8020072:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020076:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 802007a:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 802007e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8020082:	601a      	str	r2, [r3, #0]
 8020084:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8020088:	6019      	str	r1, [r3, #0]
 802008a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 802008e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020090:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8020094:	6819      	ldr	r1, [r3, #0]
 8020096:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 802009a:	681a      	ldr	r2, [r3, #0]
 802009c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80200a0:	681b      	ldr	r3, [r3, #0]
 80200a2:	fb21 3202 	smlad	r2, r1, r2, r3
 80200a6:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80200aa:	601a      	str	r2, [r3, #0]
  return(result);
 80200ac:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80200b0:	681b      	ldr	r3, [r3, #0]
 80200b2:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 80200b6:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 80200ba:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 80200be:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 80200c2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80200c6:	601a      	str	r2, [r3, #0]
 80200c8:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80200cc:	6019      	str	r1, [r3, #0]
 80200ce:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80200d2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80200d4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80200d8:	6819      	ldr	r1, [r3, #0]
 80200da:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80200de:	681a      	ldr	r2, [r3, #0]
 80200e0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80200e4:	681b      	ldr	r3, [r3, #0]
 80200e6:	fb21 3202 	smlad	r2, r1, r2, r3
 80200ea:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80200ee:	601a      	str	r2, [r3, #0]
  return(result);
 80200f0:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80200f4:	681b      	ldr	r3, [r3, #0]
 80200f6:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 80200fa:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80200fe:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 8020102:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8020106:	f507 7310 	add.w	r3, r7, #576	; 0x240
 802010a:	601a      	str	r2, [r3, #0]
 802010c:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8020110:	6019      	str	r1, [r3, #0]
 8020112:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8020116:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020118:	f507 7310 	add.w	r3, r7, #576	; 0x240
 802011c:	6819      	ldr	r1, [r3, #0]
 802011e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8020122:	681a      	ldr	r2, [r3, #0]
 8020124:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8020128:	681b      	ldr	r3, [r3, #0]
 802012a:	fb21 3202 	smlad	r2, r1, r2, r3
 802012e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8020132:	601a      	str	r2, [r3, #0]
  return(result);
 8020134:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8020138:	681b      	ldr	r3, [r3, #0]
 802013a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 802013e:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8020142:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020146:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8020148:	f507 7311 	add.w	r3, r7, #580	; 0x244
 802014c:	681b      	ldr	r3, [r3, #0]
 802014e:	681b      	ldr	r3, [r3, #0]
 8020150:	681b      	ldr	r3, [r3, #0]
 8020152:	461a      	mov	r2, r3
 8020154:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8020158:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 802015a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 802015e:	681b      	ldr	r3, [r3, #0]
 8020160:	681b      	ldr	r3, [r3, #0]
 8020162:	1d1a      	adds	r2, r3, #4
 8020164:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8020168:	681b      	ldr	r3, [r3, #0]
 802016a:	601a      	str	r2, [r3, #0]
    return (val);
 802016c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8020170:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8020172:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8020176:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802017a:	681a      	ldr	r2, [r3, #0]
 802017c:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 8020180:	441a      	add	r2, r3
 8020182:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8020186:	601a      	str	r2, [r3, #0]
 8020188:	f507 7312 	add.w	r3, r7, #584	; 0x248
 802018c:	681b      	ldr	r3, [r3, #0]
 802018e:	681b      	ldr	r3, [r3, #0]
 8020190:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8020192:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8020196:	601a      	str	r2, [r3, #0]
    return (val);
 8020198:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802019c:	681b      	ldr	r3, [r3, #0]
 802019e:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 80201a2:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 80201a6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80201aa:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80201ac:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80201b0:	681b      	ldr	r3, [r3, #0]
 80201b2:	681b      	ldr	r3, [r3, #0]
 80201b4:	681b      	ldr	r3, [r3, #0]
 80201b6:	461a      	mov	r2, r3
 80201b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80201bc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80201be:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80201c2:	681b      	ldr	r3, [r3, #0]
 80201c4:	681b      	ldr	r3, [r3, #0]
 80201c6:	1d1a      	adds	r2, r3, #4
 80201c8:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80201cc:	681b      	ldr	r3, [r3, #0]
 80201ce:	601a      	str	r2, [r3, #0]
    return (val);
 80201d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80201d4:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80201d6:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 80201da:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 80201de:	f507 7315 	add.w	r3, r7, #596	; 0x254
 80201e2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80201e4:	f507 7315 	add.w	r3, r7, #596	; 0x254
 80201e8:	681b      	ldr	r3, [r3, #0]
 80201ea:	fa2f f283 	sxtb16	r2, r3
 80201ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80201f2:	601a      	str	r2, [r3, #0]
  return(result);
 80201f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80201f8:	681b      	ldr	r3, [r3, #0]
 80201fa:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 80201fe:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020202:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8020206:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020208:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 802020c:	681b      	ldr	r3, [r3, #0]
 802020e:	fa2f f283 	sxtb16	r2, r3
 8020212:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8020216:	601a      	str	r2, [r3, #0]
  return(result);
 8020218:	f507 7316 	add.w	r3, r7, #600	; 0x258
 802021c:	681b      	ldr	r3, [r3, #0]
 802021e:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 8020222:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8020226:	f507 7319 	add.w	r3, r7, #612	; 0x264
 802022a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802022c:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8020230:	681b      	ldr	r3, [r3, #0]
 8020232:	fa2f f283 	sxtb16	r2, r3
 8020236:	f507 7318 	add.w	r3, r7, #608	; 0x260
 802023a:	601a      	str	r2, [r3, #0]
  return(result);
 802023c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8020240:	681b      	ldr	r3, [r3, #0]
 8020242:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 8020246:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 802024a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 802024e:	601a      	str	r2, [r3, #0]
 8020250:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8020254:	2308      	movs	r3, #8
 8020256:	6013      	str	r3, [r2, #0]
 8020258:	f507 721e 	add.w	r2, r7, #632	; 0x278
 802025c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8020260:	681b      	ldr	r3, [r3, #0]
 8020262:	6013      	str	r3, [r2, #0]
 8020264:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8020268:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 802026c:	681b      	ldr	r3, [r3, #0]
 802026e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020270:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8020274:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8020278:	681b      	ldr	r3, [r3, #0]
 802027a:	f003 031f 	and.w	r3, r3, #31
 802027e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020280:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8020284:	681b      	ldr	r3, [r3, #0]
 8020286:	2b00      	cmp	r3, #0
 8020288:	d103      	bne.n	8020292 <arm_nn_mat_mult_nt_t_s8+0x24f0>
    return op1;
 802028a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 802028e:	681a      	ldr	r2, [r3, #0]
 8020290:	e006      	b.n	80202a0 <arm_nn_mat_mult_nt_t_s8+0x24fe>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020292:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8020296:	f507 731d 	add.w	r3, r7, #628	; 0x274
 802029a:	6812      	ldr	r2, [r2, #0]
 802029c:	681b      	ldr	r3, [r3, #0]
 802029e:	41da      	rors	r2, r3
 80202a0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80202a4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80202a6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80202aa:	681b      	ldr	r3, [r3, #0]
 80202ac:	fa2f f283 	sxtb16	r2, r3
 80202b0:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80202b4:	601a      	str	r2, [r3, #0]
  return(result);
 80202b6:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80202ba:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80202bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80202c0:	601a      	str	r2, [r3, #0]
  return result;
 80202c2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80202c6:	681b      	ldr	r3, [r3, #0]
 80202c8:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 80202cc:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80202d0:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80202d4:	601a      	str	r2, [r3, #0]
 80202d6:	f507 7226 	add.w	r2, r7, #664	; 0x298
 80202da:	2308      	movs	r3, #8
 80202dc:	6013      	str	r3, [r2, #0]
 80202de:	f507 7225 	add.w	r2, r7, #660	; 0x294
 80202e2:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80202e6:	681b      	ldr	r3, [r3, #0]
 80202e8:	6013      	str	r3, [r2, #0]
 80202ea:	f507 7224 	add.w	r2, r7, #656	; 0x290
 80202ee:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80202f2:	681b      	ldr	r3, [r3, #0]
 80202f4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80202f6:	f507 7224 	add.w	r2, r7, #656	; 0x290
 80202fa:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80202fe:	681b      	ldr	r3, [r3, #0]
 8020300:	f003 031f 	and.w	r3, r3, #31
 8020304:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020306:	f507 7324 	add.w	r3, r7, #656	; 0x290
 802030a:	681b      	ldr	r3, [r3, #0]
 802030c:	2b00      	cmp	r3, #0
 802030e:	d103      	bne.n	8020318 <arm_nn_mat_mult_nt_t_s8+0x2576>
    return op1;
 8020310:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8020314:	681a      	ldr	r2, [r3, #0]
 8020316:	e006      	b.n	8020326 <arm_nn_mat_mult_nt_t_s8+0x2584>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020318:	f507 7225 	add.w	r2, r7, #660	; 0x294
 802031c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8020320:	6812      	ldr	r2, [r2, #0]
 8020322:	681b      	ldr	r3, [r3, #0]
 8020324:	41da      	rors	r2, r3
 8020326:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 802032a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802032c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8020330:	681b      	ldr	r3, [r3, #0]
 8020332:	fa2f f283 	sxtb16	r2, r3
 8020336:	f507 7322 	add.w	r3, r7, #648	; 0x288
 802033a:	601a      	str	r2, [r3, #0]
  return(result);
 802033c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8020340:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020342:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8020346:	601a      	str	r2, [r3, #0]
  return result;
 8020348:	f507 7321 	add.w	r3, r7, #644	; 0x284
 802034c:	681b      	ldr	r3, [r3, #0]
 802034e:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 8020352:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8020356:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 802035a:	601a      	str	r2, [r3, #0]
 802035c:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 8020360:	2308      	movs	r3, #8
 8020362:	6013      	str	r3, [r2, #0]
 8020364:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8020368:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 802036c:	681b      	ldr	r3, [r3, #0]
 802036e:	6013      	str	r3, [r2, #0]
 8020370:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 8020374:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8020378:	681b      	ldr	r3, [r3, #0]
 802037a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 802037c:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 8020380:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8020384:	681b      	ldr	r3, [r3, #0]
 8020386:	f003 031f 	and.w	r3, r3, #31
 802038a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 802038c:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8020390:	681b      	ldr	r3, [r3, #0]
 8020392:	2b00      	cmp	r3, #0
 8020394:	d103      	bne.n	802039e <arm_nn_mat_mult_nt_t_s8+0x25fc>
    return op1;
 8020396:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 802039a:	681a      	ldr	r2, [r3, #0]
 802039c:	e006      	b.n	80203ac <arm_nn_mat_mult_nt_t_s8+0x260a>
  return (op1 >> op2) | (op1 << (32U - op2));
 802039e:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 80203a2:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80203a6:	6812      	ldr	r2, [r2, #0]
 80203a8:	681b      	ldr	r3, [r3, #0]
 80203aa:	41da      	rors	r2, r3
 80203ac:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80203b0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80203b2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80203b6:	681b      	ldr	r3, [r3, #0]
 80203b8:	fa2f f283 	sxtb16	r2, r3
 80203bc:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80203c0:	601a      	str	r2, [r3, #0]
  return(result);
 80203c2:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80203c6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80203c8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80203cc:	601a      	str	r2, [r3, #0]
  return result;
 80203ce:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80203d2:	681b      	ldr	r3, [r3, #0]
 80203d4:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 80203d8:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 80203dc:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 80203e0:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 80203e4:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80203e8:	601a      	str	r2, [r3, #0]
 80203ea:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80203ee:	6019      	str	r1, [r3, #0]
 80203f0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80203f4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80203f6:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80203fa:	6819      	ldr	r1, [r3, #0]
 80203fc:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8020400:	681a      	ldr	r2, [r3, #0]
 8020402:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8020406:	681b      	ldr	r3, [r3, #0]
 8020408:	fb21 3202 	smlad	r2, r1, r2, r3
 802040c:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8020410:	601a      	str	r2, [r3, #0]
  return(result);
 8020412:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8020416:	681b      	ldr	r3, [r3, #0]
 8020418:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 802041c:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020420:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 8020424:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8020428:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 802042c:	601a      	str	r2, [r3, #0]
 802042e:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8020432:	6019      	str	r1, [r3, #0]
 8020434:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8020438:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802043a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 802043e:	6819      	ldr	r1, [r3, #0]
 8020440:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8020444:	681a      	ldr	r2, [r3, #0]
 8020446:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 802044a:	681b      	ldr	r3, [r3, #0]
 802044c:	fb21 3202 	smlad	r2, r1, r2, r3
 8020450:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8020454:	601a      	str	r2, [r3, #0]
  return(result);
 8020456:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 802045a:	681b      	ldr	r3, [r3, #0]
 802045c:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 8020460:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020464:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 8020468:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 802046c:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8020470:	601a      	str	r2, [r3, #0]
 8020472:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8020476:	6019      	str	r1, [r3, #0]
 8020478:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 802047c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802047e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8020482:	6819      	ldr	r1, [r3, #0]
 8020484:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8020488:	681a      	ldr	r2, [r3, #0]
 802048a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 802048e:	681b      	ldr	r3, [r3, #0]
 8020490:	fb21 3202 	smlad	r2, r1, r2, r3
 8020494:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8020498:	601a      	str	r2, [r3, #0]
  return(result);
 802049a:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 802049e:	681b      	ldr	r3, [r3, #0]
 80204a0:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 80204a4:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80204a8:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 80204ac:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 80204b0:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80204b4:	601a      	str	r2, [r3, #0]
 80204b6:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 80204ba:	6019      	str	r1, [r3, #0]
 80204bc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80204c0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80204c2:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80204c6:	6819      	ldr	r1, [r3, #0]
 80204c8:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 80204cc:	681a      	ldr	r2, [r3, #0]
 80204ce:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80204d2:	681b      	ldr	r3, [r3, #0]
 80204d4:	fb21 3202 	smlad	r2, r1, r2, r3
 80204d8:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80204dc:	601a      	str	r2, [r3, #0]
  return(result);
 80204de:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80204e2:	681b      	ldr	r3, [r3, #0]
 80204e4:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 80204e8:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 80204ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80204f0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80204f2:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80204f6:	681b      	ldr	r3, [r3, #0]
 80204f8:	681b      	ldr	r3, [r3, #0]
 80204fa:	681b      	ldr	r3, [r3, #0]
 80204fc:	461a      	mov	r2, r3
 80204fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8020502:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020504:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8020508:	681b      	ldr	r3, [r3, #0]
 802050a:	681b      	ldr	r3, [r3, #0]
 802050c:	1d1a      	adds	r2, r3, #4
 802050e:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8020512:	681b      	ldr	r3, [r3, #0]
 8020514:	601a      	str	r2, [r3, #0]
    return (val);
 8020516:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802051a:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 802051c:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8020520:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020524:	681a      	ldr	r2, [r3, #0]
 8020526:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 802052a:	441a      	add	r2, r3
 802052c:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8020530:	601a      	str	r2, [r3, #0]
 8020532:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8020536:	681b      	ldr	r3, [r3, #0]
 8020538:	681b      	ldr	r3, [r3, #0]
 802053a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 802053c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020540:	601a      	str	r2, [r3, #0]
    return (val);
 8020542:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020546:	681b      	ldr	r3, [r3, #0]
 8020548:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 802054c:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8020550:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020554:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8020556:	f507 7341 	add.w	r3, r7, #772	; 0x304
 802055a:	681b      	ldr	r3, [r3, #0]
 802055c:	681b      	ldr	r3, [r3, #0]
 802055e:	681b      	ldr	r3, [r3, #0]
 8020560:	461a      	mov	r2, r3
 8020562:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8020566:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020568:	f507 7341 	add.w	r3, r7, #772	; 0x304
 802056c:	681b      	ldr	r3, [r3, #0]
 802056e:	681b      	ldr	r3, [r3, #0]
 8020570:	1d1a      	adds	r2, r3, #4
 8020572:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8020576:	681b      	ldr	r3, [r3, #0]
 8020578:	601a      	str	r2, [r3, #0]
    return (val);
 802057a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802057e:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8020580:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 8020584:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 8020588:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 802058c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802058e:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8020592:	681b      	ldr	r3, [r3, #0]
 8020594:	fa2f f283 	sxtb16	r2, r3
 8020598:	f507 7342 	add.w	r3, r7, #776	; 0x308
 802059c:	601a      	str	r2, [r3, #0]
  return(result);
 802059e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80205a2:	681b      	ldr	r3, [r3, #0]
 80205a4:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 80205a8:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80205ac:	f507 7345 	add.w	r3, r7, #788	; 0x314
 80205b0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80205b2:	f507 7345 	add.w	r3, r7, #788	; 0x314
 80205b6:	681b      	ldr	r3, [r3, #0]
 80205b8:	fa2f f283 	sxtb16	r2, r3
 80205bc:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80205c0:	601a      	str	r2, [r3, #0]
  return(result);
 80205c2:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80205c6:	681b      	ldr	r3, [r3, #0]
 80205c8:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 80205cc:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 80205d0:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 80205d4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80205d6:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 80205da:	681b      	ldr	r3, [r3, #0]
 80205dc:	fa2f f283 	sxtb16	r2, r3
 80205e0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80205e4:	601a      	str	r2, [r3, #0]
  return(result);
 80205e6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80205ea:	681b      	ldr	r3, [r3, #0]
 80205ec:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 80205f0:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 80205f4:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80205f8:	601a      	str	r2, [r3, #0]
 80205fa:	f507 724d 	add.w	r2, r7, #820	; 0x334
 80205fe:	2308      	movs	r3, #8
 8020600:	6013      	str	r3, [r2, #0]
 8020602:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8020606:	f507 734e 	add.w	r3, r7, #824	; 0x338
 802060a:	681b      	ldr	r3, [r3, #0]
 802060c:	6013      	str	r3, [r2, #0]
 802060e:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 8020612:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8020616:	681b      	ldr	r3, [r3, #0]
 8020618:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 802061a:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 802061e:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8020622:	681b      	ldr	r3, [r3, #0]
 8020624:	f003 031f 	and.w	r3, r3, #31
 8020628:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 802062a:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 802062e:	681b      	ldr	r3, [r3, #0]
 8020630:	2b00      	cmp	r3, #0
 8020632:	d103      	bne.n	802063c <arm_nn_mat_mult_nt_t_s8+0x289a>
    return op1;
 8020634:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8020638:	681a      	ldr	r2, [r3, #0]
 802063a:	e006      	b.n	802064a <arm_nn_mat_mult_nt_t_s8+0x28a8>
  return (op1 >> op2) | (op1 << (32U - op2));
 802063c:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8020640:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8020644:	6812      	ldr	r2, [r2, #0]
 8020646:	681b      	ldr	r3, [r3, #0]
 8020648:	41da      	rors	r2, r3
 802064a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 802064e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020650:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8020654:	681b      	ldr	r3, [r3, #0]
 8020656:	fa2f f283 	sxtb16	r2, r3
 802065a:	f507 7349 	add.w	r3, r7, #804	; 0x324
 802065e:	601a      	str	r2, [r3, #0]
  return(result);
 8020660:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8020664:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020666:	f507 7348 	add.w	r3, r7, #800	; 0x320
 802066a:	601a      	str	r2, [r3, #0]
  return result;
 802066c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8020670:	681b      	ldr	r3, [r3, #0]
 8020672:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 8020676:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 802067a:	f507 7355 	add.w	r3, r7, #852	; 0x354
 802067e:	601a      	str	r2, [r3, #0]
 8020680:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8020684:	2308      	movs	r3, #8
 8020686:	6013      	str	r3, [r2, #0]
 8020688:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 802068c:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8020690:	681b      	ldr	r3, [r3, #0]
 8020692:	6013      	str	r3, [r2, #0]
 8020694:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8020698:	f507 7354 	add.w	r3, r7, #848	; 0x350
 802069c:	681b      	ldr	r3, [r3, #0]
 802069e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80206a0:	f507 7252 	add.w	r2, r7, #840	; 0x348
 80206a4:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80206a8:	681b      	ldr	r3, [r3, #0]
 80206aa:	f003 031f 	and.w	r3, r3, #31
 80206ae:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80206b0:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80206b4:	681b      	ldr	r3, [r3, #0]
 80206b6:	2b00      	cmp	r3, #0
 80206b8:	d103      	bne.n	80206c2 <arm_nn_mat_mult_nt_t_s8+0x2920>
    return op1;
 80206ba:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80206be:	681a      	ldr	r2, [r3, #0]
 80206c0:	e006      	b.n	80206d0 <arm_nn_mat_mult_nt_t_s8+0x292e>
  return (op1 >> op2) | (op1 << (32U - op2));
 80206c2:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 80206c6:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80206ca:	6812      	ldr	r2, [r2, #0]
 80206cc:	681b      	ldr	r3, [r3, #0]
 80206ce:	41da      	rors	r2, r3
 80206d0:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80206d4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80206d6:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80206da:	681b      	ldr	r3, [r3, #0]
 80206dc:	fa2f f283 	sxtb16	r2, r3
 80206e0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80206e4:	601a      	str	r2, [r3, #0]
  return(result);
 80206e6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80206ea:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80206ec:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80206f0:	601a      	str	r2, [r3, #0]
  return result;
 80206f2:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80206f6:	681b      	ldr	r3, [r3, #0]
 80206f8:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 80206fc:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8020700:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8020704:	601a      	str	r2, [r3, #0]
 8020706:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 802070a:	2308      	movs	r3, #8
 802070c:	6013      	str	r3, [r2, #0]
 802070e:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8020712:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8020716:	681b      	ldr	r3, [r3, #0]
 8020718:	6013      	str	r3, [r2, #0]
 802071a:	f507 7259 	add.w	r2, r7, #868	; 0x364
 802071e:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8020722:	681b      	ldr	r3, [r3, #0]
 8020724:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020726:	f507 7259 	add.w	r2, r7, #868	; 0x364
 802072a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802072e:	681b      	ldr	r3, [r3, #0]
 8020730:	f003 031f 	and.w	r3, r3, #31
 8020734:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020736:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802073a:	681b      	ldr	r3, [r3, #0]
 802073c:	2b00      	cmp	r3, #0
 802073e:	d103      	bne.n	8020748 <arm_nn_mat_mult_nt_t_s8+0x29a6>
    return op1;
 8020740:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8020744:	681a      	ldr	r2, [r3, #0]
 8020746:	e006      	b.n	8020756 <arm_nn_mat_mult_nt_t_s8+0x29b4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020748:	f507 725a 	add.w	r2, r7, #872	; 0x368
 802074c:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8020750:	6812      	ldr	r2, [r2, #0]
 8020752:	681b      	ldr	r3, [r3, #0]
 8020754:	41da      	rors	r2, r3
 8020756:	f507 7358 	add.w	r3, r7, #864	; 0x360
 802075a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802075c:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8020760:	681b      	ldr	r3, [r3, #0]
 8020762:	fa2f f283 	sxtb16	r2, r3
 8020766:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 802076a:	601a      	str	r2, [r3, #0]
  return(result);
 802076c:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8020770:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020772:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8020776:	601a      	str	r2, [r3, #0]
  return result;
 8020778:	f507 7356 	add.w	r3, r7, #856	; 0x358
 802077c:	681b      	ldr	r3, [r3, #0]
 802077e:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 8020782:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020786:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 802078a:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 802078e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8020792:	601a      	str	r2, [r3, #0]
 8020794:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8020798:	6019      	str	r1, [r3, #0]
 802079a:	f507 735e 	add.w	r3, r7, #888	; 0x378
 802079e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80207a0:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80207a4:	6819      	ldr	r1, [r3, #0]
 80207a6:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80207aa:	681a      	ldr	r2, [r3, #0]
 80207ac:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80207b0:	681b      	ldr	r3, [r3, #0]
 80207b2:	fb21 3202 	smlad	r2, r1, r2, r3
 80207b6:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80207ba:	601a      	str	r2, [r3, #0]
  return(result);
 80207bc:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80207c0:	681b      	ldr	r3, [r3, #0]
 80207c2:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 80207c6:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80207ca:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 80207ce:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 80207d2:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80207d6:	601a      	str	r2, [r3, #0]
 80207d8:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80207dc:	6019      	str	r1, [r3, #0]
 80207de:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80207e2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80207e4:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80207e8:	6819      	ldr	r1, [r3, #0]
 80207ea:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80207ee:	681a      	ldr	r2, [r3, #0]
 80207f0:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80207f4:	681b      	ldr	r3, [r3, #0]
 80207f6:	fb21 3202 	smlad	r2, r1, r2, r3
 80207fa:	f507 7361 	add.w	r3, r7, #900	; 0x384
 80207fe:	601a      	str	r2, [r3, #0]
  return(result);
 8020800:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8020804:	681b      	ldr	r3, [r3, #0]
 8020806:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 802080a:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 802080e:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 8020812:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8020816:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 802081a:	601a      	str	r2, [r3, #0]
 802081c:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 8020820:	6019      	str	r1, [r3, #0]
 8020822:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8020826:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020828:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 802082c:	6819      	ldr	r1, [r3, #0]
 802082e:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 8020832:	681a      	ldr	r2, [r3, #0]
 8020834:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8020838:	681b      	ldr	r3, [r3, #0]
 802083a:	fb21 3202 	smlad	r2, r1, r2, r3
 802083e:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8020842:	601a      	str	r2, [r3, #0]
  return(result);
 8020844:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8020848:	681b      	ldr	r3, [r3, #0]
 802084a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 802084e:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020852:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 8020856:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 802085a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 802085e:	601a      	str	r2, [r3, #0]
 8020860:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8020864:	6019      	str	r1, [r3, #0]
 8020866:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 802086a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802086c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8020870:	6819      	ldr	r1, [r3, #0]
 8020872:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8020876:	681a      	ldr	r2, [r3, #0]
 8020878:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 802087c:	681b      	ldr	r3, [r3, #0]
 802087e:	fb21 3202 	smlad	r2, r1, r2, r3
 8020882:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8020886:	601a      	str	r2, [r3, #0]
  return(result);
 8020888:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 802088c:	681b      	ldr	r3, [r3, #0]
 802088e:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 8020892:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 8020896:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802089a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 802089c:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 80208a0:	681b      	ldr	r3, [r3, #0]
 80208a2:	681b      	ldr	r3, [r3, #0]
 80208a4:	681b      	ldr	r3, [r3, #0]
 80208a6:	461a      	mov	r2, r3
 80208a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80208ac:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80208ae:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 80208b2:	681b      	ldr	r3, [r3, #0]
 80208b4:	681b      	ldr	r3, [r3, #0]
 80208b6:	1d1a      	adds	r2, r3, #4
 80208b8:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 80208bc:	681b      	ldr	r3, [r3, #0]
 80208be:	601a      	str	r2, [r3, #0]
    return (val);
 80208c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80208c4:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80208c6:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 80208ca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80208ce:	681a      	ldr	r2, [r3, #0]
 80208d0:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 80208d4:	441a      	add	r2, r3
 80208d6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80208da:	601a      	str	r2, [r3, #0]
 80208dc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80208e0:	681b      	ldr	r3, [r3, #0]
 80208e2:	681b      	ldr	r3, [r3, #0]
 80208e4:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80208e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80208ea:	601a      	str	r2, [r3, #0]
    return (val);
 80208ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80208f0:	681b      	ldr	r3, [r3, #0]
 80208f2:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 80208f6:	f507 726f 	add.w	r2, r7, #956	; 0x3bc
 80208fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80208fe:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8020900:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 8020904:	681b      	ldr	r3, [r3, #0]
 8020906:	681b      	ldr	r3, [r3, #0]
 8020908:	681b      	ldr	r3, [r3, #0]
 802090a:	461a      	mov	r2, r3
 802090c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8020910:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020912:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 8020916:	681b      	ldr	r3, [r3, #0]
 8020918:	681b      	ldr	r3, [r3, #0]
 802091a:	1d1a      	adds	r2, r3, #4
 802091c:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 8020920:	681b      	ldr	r3, [r3, #0]
 8020922:	601a      	str	r2, [r3, #0]
    return (val);
 8020924:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8020928:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 802092a:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 802092e:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 8020932:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8020936:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020938:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 802093c:	681b      	ldr	r3, [r3, #0]
 802093e:	fa2f f283 	sxtb16	r2, r3
 8020942:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8020946:	601a      	str	r2, [r3, #0]
  return(result);
 8020948:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 802094c:	681b      	ldr	r3, [r3, #0]
 802094e:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 8020952:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020956:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 802095a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802095c:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8020960:	681b      	ldr	r3, [r3, #0]
 8020962:	fa2f f283 	sxtb16	r2, r3
 8020966:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 802096a:	601a      	str	r2, [r3, #0]
  return(result);
 802096c:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8020970:	681b      	ldr	r3, [r3, #0]
 8020972:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 8020976:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 802097a:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 802097e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020980:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8020984:	681b      	ldr	r3, [r3, #0]
 8020986:	fa2f f283 	sxtb16	r2, r3
 802098a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 802098e:	601a      	str	r2, [r3, #0]
  return(result);
 8020990:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8020994:	681b      	ldr	r3, [r3, #0]
 8020996:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 802099a:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 802099e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80209a2:	601a      	str	r2, [r3, #0]
 80209a4:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 80209a8:	2308      	movs	r3, #8
 80209aa:	6013      	str	r3, [r2, #0]
 80209ac:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 80209b0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80209b4:	681b      	ldr	r3, [r3, #0]
 80209b6:	6013      	str	r3, [r2, #0]
 80209b8:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 80209bc:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80209c0:	681b      	ldr	r3, [r3, #0]
 80209c2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80209c4:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 80209c8:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80209cc:	681b      	ldr	r3, [r3, #0]
 80209ce:	f003 031f 	and.w	r3, r3, #31
 80209d2:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80209d4:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80209d8:	681b      	ldr	r3, [r3, #0]
 80209da:	2b00      	cmp	r3, #0
 80209dc:	d103      	bne.n	80209e6 <arm_nn_mat_mult_nt_t_s8+0x2c44>
    return op1;
 80209de:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80209e2:	681a      	ldr	r2, [r3, #0]
 80209e4:	e006      	b.n	80209f4 <arm_nn_mat_mult_nt_t_s8+0x2c52>
  return (op1 >> op2) | (op1 << (32U - op2));
 80209e6:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 80209ea:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80209ee:	6812      	ldr	r2, [r2, #0]
 80209f0:	681b      	ldr	r3, [r3, #0]
 80209f2:	41da      	rors	r2, r3
 80209f4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80209f8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80209fa:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80209fe:	681b      	ldr	r3, [r3, #0]
 8020a00:	fa2f f283 	sxtb16	r2, r3
 8020a04:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8020a08:	601a      	str	r2, [r3, #0]
  return(result);
 8020a0a:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8020a0e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020a10:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8020a14:	601a      	str	r2, [r3, #0]
  return result;
 8020a16:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8020a1a:	681b      	ldr	r3, [r3, #0]
 8020a1c:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 8020a20:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020a24:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8020a28:	601a      	str	r2, [r3, #0]
 8020a2a:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8020a2e:	2308      	movs	r3, #8
 8020a30:	6013      	str	r3, [r2, #0]
 8020a32:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8020a36:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8020a3a:	681b      	ldr	r3, [r3, #0]
 8020a3c:	6013      	str	r3, [r2, #0]
 8020a3e:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8020a42:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8020a46:	681b      	ldr	r3, [r3, #0]
 8020a48:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020a4a:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8020a4e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8020a52:	681b      	ldr	r3, [r3, #0]
 8020a54:	f003 031f 	and.w	r3, r3, #31
 8020a58:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020a5a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	2b00      	cmp	r3, #0
 8020a62:	d103      	bne.n	8020a6c <arm_nn_mat_mult_nt_t_s8+0x2cca>
    return op1;
 8020a64:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8020a68:	681a      	ldr	r2, [r3, #0]
 8020a6a:	e006      	b.n	8020a7a <arm_nn_mat_mult_nt_t_s8+0x2cd8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020a6c:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8020a70:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8020a74:	6812      	ldr	r2, [r2, #0]
 8020a76:	681b      	ldr	r3, [r3, #0]
 8020a78:	41da      	rors	r2, r3
 8020a7a:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8020a7e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020a80:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8020a84:	681b      	ldr	r3, [r3, #0]
 8020a86:	fa2f f283 	sxtb16	r2, r3
 8020a8a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8020a8e:	601a      	str	r2, [r3, #0]
  return(result);
 8020a90:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8020a94:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020a96:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8020a9a:	601a      	str	r2, [r3, #0]
  return result;
 8020a9c:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8020aa0:	681b      	ldr	r3, [r3, #0]
 8020aa2:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 8020aa6:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8020aaa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8020aae:	601a      	str	r2, [r3, #0]
 8020ab0:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8020ab4:	2308      	movs	r3, #8
 8020ab6:	6013      	str	r3, [r2, #0]
 8020ab8:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8020abc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8020ac0:	681b      	ldr	r3, [r3, #0]
 8020ac2:	6013      	str	r3, [r2, #0]
 8020ac4:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8020ac8:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8020acc:	681b      	ldr	r3, [r3, #0]
 8020ace:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020ad0:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8020ad4:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8020ad8:	681b      	ldr	r3, [r3, #0]
 8020ada:	f003 031f 	and.w	r3, r3, #31
 8020ade:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020ae0:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8020ae4:	681b      	ldr	r3, [r3, #0]
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d103      	bne.n	8020af2 <arm_nn_mat_mult_nt_t_s8+0x2d50>
    return op1;
 8020aea:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8020aee:	681a      	ldr	r2, [r3, #0]
 8020af0:	e006      	b.n	8020b00 <arm_nn_mat_mult_nt_t_s8+0x2d5e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020af2:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8020af6:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8020afa:	6812      	ldr	r2, [r2, #0]
 8020afc:	681b      	ldr	r3, [r3, #0]
 8020afe:	41da      	rors	r2, r3
 8020b00:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8020b04:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020b06:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8020b0a:	681b      	ldr	r3, [r3, #0]
 8020b0c:	fa2f f283 	sxtb16	r2, r3
 8020b10:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8020b14:	601a      	str	r2, [r3, #0]
  return(result);
 8020b16:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8020b1a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020b1c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8020b20:	601a      	str	r2, [r3, #0]
  return result;
 8020b22:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8020b26:	681b      	ldr	r3, [r3, #0]
 8020b28:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 8020b2c:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020b30:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 8020b34:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8020b38:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8020b3c:	601a      	str	r2, [r3, #0]
 8020b3e:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8020b42:	6019      	str	r1, [r3, #0]
 8020b44:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8020b48:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020b4a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8020b4e:	6819      	ldr	r1, [r3, #0]
 8020b50:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8020b54:	681a      	ldr	r2, [r3, #0]
 8020b56:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8020b5a:	681b      	ldr	r3, [r3, #0]
 8020b5c:	fb21 3202 	smlad	r2, r1, r2, r3
 8020b60:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8020b64:	601a      	str	r2, [r3, #0]
  return(result);
 8020b66:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8020b6a:	681b      	ldr	r3, [r3, #0]
 8020b6c:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 8020b70:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020b74:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 8020b78:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8020b7c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8020b80:	601a      	str	r2, [r3, #0]
 8020b82:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8020b86:	6019      	str	r1, [r3, #0]
 8020b88:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8020b8c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020b8e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8020b92:	6819      	ldr	r1, [r3, #0]
 8020b94:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8020b98:	681a      	ldr	r2, [r3, #0]
 8020b9a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8020b9e:	681b      	ldr	r3, [r3, #0]
 8020ba0:	fb21 3202 	smlad	r2, r1, r2, r3
 8020ba4:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8020ba8:	601a      	str	r2, [r3, #0]
  return(result);
 8020baa:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8020bae:	681b      	ldr	r3, [r3, #0]
 8020bb0:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 8020bb4:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020bb8:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 8020bbc:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8020bc0:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8020bc4:	601a      	str	r2, [r3, #0]
 8020bc6:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8020bca:	6019      	str	r1, [r3, #0]
 8020bcc:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8020bd0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020bd2:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8020bd6:	6819      	ldr	r1, [r3, #0]
 8020bd8:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8020bdc:	681a      	ldr	r2, [r3, #0]
 8020bde:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8020be2:	681b      	ldr	r3, [r3, #0]
 8020be4:	fb21 3202 	smlad	r2, r1, r2, r3
 8020be8:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8020bec:	601a      	str	r2, [r3, #0]
  return(result);
 8020bee:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8020bf2:	681b      	ldr	r3, [r3, #0]
 8020bf4:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 8020bf8:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020bfc:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 8020c00:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8020c04:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8020c08:	601a      	str	r2, [r3, #0]
 8020c0a:	f207 4364 	addw	r3, r7, #1124	; 0x464
 8020c0e:	6019      	str	r1, [r3, #0]
 8020c10:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8020c14:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020c16:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8020c1a:	6819      	ldr	r1, [r3, #0]
 8020c1c:	f207 4364 	addw	r3, r7, #1124	; 0x464
 8020c20:	681a      	ldr	r2, [r3, #0]
 8020c22:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8020c26:	681b      	ldr	r3, [r3, #0]
 8020c28:	fb21 3202 	smlad	r2, r1, r2, r3
 8020c2c:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8020c30:	601a      	str	r2, [r3, #0]
  return(result);
 8020c32:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8020c36:	681b      	ldr	r3, [r3, #0]
 8020c38:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8020c3c:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 8020c40:	3310      	adds	r3, #16
 8020c42:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
 8020c46:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8020c4a:	f1a3 020f 	sub.w	r2, r3, #15
 8020c4e:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 8020c52:	4293      	cmp	r3, r2
 8020c54:	f6ff a89e 	blt.w	801fd94 <arm_nn_mat_mult_nt_t_s8+0x1ff2>
            }

            // Left-over accumulations
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8020c58:	e03d      	b.n	8020cd6 <arm_nn_mat_mult_nt_t_s8+0x2f34>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 8020c5a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020c5e:	681b      	ldr	r3, [r3, #0]
 8020c60:	781b      	ldrb	r3, [r3, #0]
 8020c62:	f887 39e3 	strb.w	r3, [r7, #2531]	; 0x9e3
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 8020c66:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020c6a:	681a      	ldr	r2, [r3, #0]
 8020c6c:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8020c70:	4413      	add	r3, r2
 8020c72:	781b      	ldrb	r3, [r3, #0]
 8020c74:	f887 39e2 	strb.w	r3, [r7, #2530]	; 0x9e2
                q7_t lhs_value = lhs_ptr[0];
 8020c78:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020c7c:	681b      	ldr	r3, [r3, #0]
 8020c7e:	781b      	ldrb	r3, [r3, #0]
 8020c80:	f887 39e1 	strb.w	r3, [r7, #2529]	; 0x9e1

                res00 += lhs_value * rhs_value0;
 8020c84:	f997 29e1 	ldrsb.w	r2, [r7, #2529]	; 0x9e1
 8020c88:	f997 39e3 	ldrsb.w	r3, [r7, #2531]	; 0x9e3
 8020c8c:	fb03 f202 	mul.w	r2, r3, r2
 8020c90:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 8020c94:	4413      	add	r3, r2
 8020c96:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 += lhs_value * rhs_value1;
 8020c9a:	f997 29e1 	ldrsb.w	r2, [r7, #2529]	; 0x9e1
 8020c9e:	f997 39e2 	ldrsb.w	r3, [r7, #2530]	; 0x9e2
 8020ca2:	fb03 f202 	mul.w	r2, r3, r2
 8020ca6:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 8020caa:	4413      	add	r3, r2
 8020cac:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

                ++rhs_ptr;
 8020cb0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020cb4:	681b      	ldr	r3, [r3, #0]
 8020cb6:	1c5a      	adds	r2, r3, #1
 8020cb8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020cbc:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 8020cbe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020cc2:	681b      	ldr	r3, [r3, #0]
 8020cc4:	1c5a      	adds	r2, r3, #1
 8020cc6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020cca:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8020ccc:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 8020cd0:	3301      	adds	r3, #1
 8020cd2:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
 8020cd6:	f8d7 2a08 	ldr.w	r2, [r7, #2568]	; 0xa08
 8020cda:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8020cde:	429a      	cmp	r2, r3
 8020ce0:	dbbb      	blt.n	8020c5a <arm_nn_mat_mult_nt_t_s8+0x2eb8>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 8020ce2:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020ce6:	009a      	lsls	r2, r3, #2
 8020ce8:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 8020cec:	4413      	add	r3, r2
 8020cee:	6818      	ldr	r0, [r3, #0]
 8020cf0:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020cf4:	009a      	lsls	r2, r3, #2
 8020cf6:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 8020cfa:	4413      	add	r3, r2
 8020cfc:	6819      	ldr	r1, [r3, #0]
 8020cfe:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8020d02:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 8020d06:	6013      	str	r3, [r2, #0]
 8020d08:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8020d0c:	6018      	str	r0, [r3, #0]
 8020d0e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8020d12:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020d14:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8020d18:	681b      	ldr	r3, [r3, #0]
 8020d1a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8020d1e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8020d22:	681b      	ldr	r3, [r3, #0]
 8020d24:	fa03 f202 	lsl.w	r2, r3, r2
 8020d28:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8020d2c:	601a      	str	r2, [r3, #0]
 8020d2e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8020d32:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8020d36:	681b      	ldr	r3, [r3, #0]
 8020d38:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8020d3a:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8020d3e:	2300      	movs	r3, #0
 8020d40:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8020d42:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8020d46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020d4a:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8020d4c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8020d50:	2300      	movs	r3, #0
 8020d52:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8020d54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020d58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020d5c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8020d60:	681b      	ldr	r3, [r3, #0]
 8020d62:	4618      	mov	r0, r3
 8020d64:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8020d68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8020d6c:	681b      	ldr	r3, [r3, #0]
 8020d6e:	461a      	mov	r2, r3
 8020d70:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8020d74:	fb02 f501 	mul.w	r5, r2, r1
 8020d78:	fb00 f403 	mul.w	r4, r0, r3
 8020d7c:	442c      	add	r4, r5
 8020d7e:	fba0 2302 	umull	r2, r3, r0, r2
 8020d82:	18e1      	adds	r1, r4, r3
 8020d84:	460b      	mov	r3, r1
 8020d86:	eb18 0102 	adds.w	r1, r8, r2
 8020d8a:	6039      	str	r1, [r7, #0]
 8020d8c:	eb49 0303 	adc.w	r3, r9, r3
 8020d90:	607b      	str	r3, [r7, #4]
 8020d92:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020d96:	e9d7 1200 	ldrd	r1, r2, [r7]
 8020d9a:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8020d9e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020da6:	f04f 0000 	mov.w	r0, #0
 8020daa:	f04f 0100 	mov.w	r1, #0
 8020dae:	0fd0      	lsrs	r0, r2, #31
 8020db0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8020db4:	17d9      	asrs	r1, r3, #31
 8020db6:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8020dba:	4603      	mov	r3, r0
 8020dbc:	6013      	str	r3, [r2, #0]
    return result;
 8020dbe:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8020dc2:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020dc4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8020dc8:	681b      	ldr	r3, [r3, #0]
 8020dca:	2b00      	cmp	r3, #0
 8020dcc:	dc04      	bgt.n	8020dd8 <arm_nn_mat_mult_nt_t_s8+0x3036>
 8020dce:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8020dd2:	681b      	ldr	r3, [r3, #0]
 8020dd4:	425a      	negs	r2, r3
 8020dd6:	e000      	b.n	8020dda <arm_nn_mat_mult_nt_t_s8+0x3038>
 8020dd8:	2200      	movs	r2, #0
 8020dda:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8020dde:	6019      	str	r1, [r3, #0]
 8020de0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8020de4:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8020de6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8020dea:	2300      	movs	r3, #0
 8020dec:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8020dee:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8020df2:	2201      	movs	r2, #1
 8020df4:	681b      	ldr	r3, [r3, #0]
 8020df6:	fa02 f303 	lsl.w	r3, r2, r3
 8020dfa:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8020dfe:	3b01      	subs	r3, #1
 8020e00:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8020e02:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8020e06:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8020e0a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8020e0e:	6812      	ldr	r2, [r2, #0]
 8020e10:	681b      	ldr	r3, [r3, #0]
 8020e12:	4013      	ands	r3, r2
 8020e14:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8020e16:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8020e1a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8020e1e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8020e22:	6812      	ldr	r2, [r2, #0]
 8020e24:	681b      	ldr	r3, [r3, #0]
 8020e26:	fa42 f303 	asr.w	r3, r2, r3
 8020e2a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8020e2c:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8020e30:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8020e34:	681b      	ldr	r3, [r3, #0]
 8020e36:	105b      	asrs	r3, r3, #1
 8020e38:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8020e3a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8020e3e:	681b      	ldr	r3, [r3, #0]
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	da06      	bge.n	8020e52 <arm_nn_mat_mult_nt_t_s8+0x30b0>
        threshold++;
 8020e44:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8020e48:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8020e4c:	681b      	ldr	r3, [r3, #0]
 8020e4e:	3301      	adds	r3, #1
 8020e50:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8020e52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020e56:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8020e5a:	6812      	ldr	r2, [r2, #0]
 8020e5c:	681b      	ldr	r3, [r3, #0]
 8020e5e:	429a      	cmp	r2, r3
 8020e60:	dd06      	ble.n	8020e70 <arm_nn_mat_mult_nt_t_s8+0x30ce>
        result++;
 8020e62:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8020e66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8020e6a:	681b      	ldr	r3, [r3, #0]
 8020e6c:	3301      	adds	r3, #1
 8020e6e:	6013      	str	r3, [r2, #0]
    return result;
 8020e70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8020e74:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020e76:	bf00      	nop
 8020e78:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 8020e7c:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020e80:	3301      	adds	r3, #1
 8020e82:	009a      	lsls	r2, r3, #2
 8020e84:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 8020e88:	4413      	add	r3, r2
 8020e8a:	6818      	ldr	r0, [r3, #0]
 8020e8c:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020e90:	3301      	adds	r3, #1
 8020e92:	009a      	lsls	r2, r3, #2
 8020e94:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 8020e98:	4413      	add	r3, r2
 8020e9a:	6819      	ldr	r1, [r3, #0]
 8020e9c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8020ea0:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 8020ea4:	6013      	str	r3, [r2, #0]
 8020ea6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8020eaa:	6018      	str	r0, [r3, #0]
 8020eac:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8020eb0:	6019      	str	r1, [r3, #0]
 8020eb2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8020eb6:	681b      	ldr	r3, [r3, #0]
 8020eb8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8020ebc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8020ec0:	681b      	ldr	r3, [r3, #0]
 8020ec2:	fa03 f202 	lsl.w	r2, r3, r2
 8020ec6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8020eca:	601a      	str	r2, [r3, #0]
 8020ecc:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8020ed0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8020ed4:	681b      	ldr	r3, [r3, #0]
 8020ed6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8020ed8:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8020edc:	2300      	movs	r3, #0
 8020ede:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8020ee0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8020ee4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020ee8:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8020eea:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8020eee:	2300      	movs	r3, #0
 8020ef0:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8020ef2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020ef6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020efa:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8020efe:	681b      	ldr	r3, [r3, #0]
 8020f00:	4618      	mov	r0, r3
 8020f02:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8020f06:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8020f0a:	681b      	ldr	r3, [r3, #0]
 8020f0c:	461a      	mov	r2, r3
 8020f0e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8020f12:	fb02 f501 	mul.w	r5, r2, r1
 8020f16:	fb00 f403 	mul.w	r4, r0, r3
 8020f1a:	442c      	add	r4, r5
 8020f1c:	fba0 2302 	umull	r2, r3, r0, r2
 8020f20:	18e1      	adds	r1, r4, r3
 8020f22:	460b      	mov	r3, r1
 8020f24:	eb18 0102 	adds.w	r1, r8, r2
 8020f28:	60b9      	str	r1, [r7, #8]
 8020f2a:	eb49 0303 	adc.w	r3, r9, r3
 8020f2e:	60fb      	str	r3, [r7, #12]
 8020f30:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020f34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020f38:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8020f3c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f44:	f04f 0000 	mov.w	r0, #0
 8020f48:	f04f 0100 	mov.w	r1, #0
 8020f4c:	0fd0      	lsrs	r0, r2, #31
 8020f4e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8020f52:	17d9      	asrs	r1, r3, #31
 8020f54:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8020f58:	4603      	mov	r3, r0
 8020f5a:	6013      	str	r3, [r2, #0]
    return result;
 8020f5c:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8020f60:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020f62:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8020f66:	681b      	ldr	r3, [r3, #0]
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	dc04      	bgt.n	8020f76 <arm_nn_mat_mult_nt_t_s8+0x31d4>
 8020f6c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8020f70:	681b      	ldr	r3, [r3, #0]
 8020f72:	425a      	negs	r2, r3
 8020f74:	e000      	b.n	8020f78 <arm_nn_mat_mult_nt_t_s8+0x31d6>
 8020f76:	2200      	movs	r2, #0
 8020f78:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8020f7c:	6019      	str	r1, [r3, #0]
 8020f7e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8020f82:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8020f84:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8020f88:	2300      	movs	r3, #0
 8020f8a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8020f8c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8020f90:	2201      	movs	r2, #1
 8020f92:	681b      	ldr	r3, [r3, #0]
 8020f94:	fa02 f303 	lsl.w	r3, r2, r3
 8020f98:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8020f9c:	3b01      	subs	r3, #1
 8020f9e:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8020fa0:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8020fa4:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8020fa8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8020fac:	6812      	ldr	r2, [r2, #0]
 8020fae:	681b      	ldr	r3, [r3, #0]
 8020fb0:	4013      	ands	r3, r2
 8020fb2:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8020fb4:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8020fb8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8020fbc:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8020fc0:	6812      	ldr	r2, [r2, #0]
 8020fc2:	681b      	ldr	r3, [r3, #0]
 8020fc4:	fa42 f303 	asr.w	r3, r2, r3
 8020fc8:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8020fca:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8020fce:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8020fd2:	681b      	ldr	r3, [r3, #0]
 8020fd4:	105b      	asrs	r3, r3, #1
 8020fd6:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8020fd8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8020fdc:	681b      	ldr	r3, [r3, #0]
 8020fde:	2b00      	cmp	r3, #0
 8020fe0:	da06      	bge.n	8020ff0 <arm_nn_mat_mult_nt_t_s8+0x324e>
        threshold++;
 8020fe2:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8020fe6:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8020fea:	681b      	ldr	r3, [r3, #0]
 8020fec:	3301      	adds	r3, #1
 8020fee:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8020ff0:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8020ff4:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8020ff8:	6812      	ldr	r2, [r2, #0]
 8020ffa:	681b      	ldr	r3, [r3, #0]
 8020ffc:	429a      	cmp	r2, r3
 8020ffe:	dd06      	ble.n	802100e <arm_nn_mat_mult_nt_t_s8+0x326c>
        result++;
 8021000:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8021004:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8021008:	681b      	ldr	r3, [r3, #0]
 802100a:	3301      	adds	r3, #1
 802100c:	6013      	str	r3, [r2, #0]
    return result;
 802100e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8021012:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8021014:	bf00      	nop
 8021016:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            // Add offset
            res00 += dst_offset;
 802101a:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 802101e:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8021022:	4413      	add	r3, r2
 8021024:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 += dst_offset;
 8021028:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 802102c:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8021030:	4413      	add	r3, r2
 8021032:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            // Clamp the result
            res00 = MAX(res00, activation_min);
 8021036:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 802103a:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 802103e:	4293      	cmp	r3, r2
 8021040:	bfb8      	it	lt
 8021042:	4613      	movlt	r3, r2
 8021044:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res00 = MIN(res00, activation_max);
 8021048:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 802104c:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8021050:	4293      	cmp	r3, r2
 8021052:	bfa8      	it	ge
 8021054:	4613      	movge	r3, r2
 8021056:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 = MAX(res01, activation_min);
 802105a:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 802105e:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8021062:	4293      	cmp	r3, r2
 8021064:	bfb8      	it	lt
 8021066:	4613      	movlt	r3, r2
 8021068:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
            res01 = MIN(res01, activation_max);
 802106c:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 8021070:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8021074:	4293      	cmp	r3, r2
 8021076:	bfa8      	it	ge
 8021078:	4613      	movge	r3, r2
 802107a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            dst_ptr[0] = (q7_t)res00;
 802107e:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 8021082:	b25b      	sxtb	r3, r3
 8021084:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 8021088:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 802108a:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 802108e:	1c5a      	adds	r2, r3, #1
 8021090:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 8021094:	b25b      	sxtb	r3, r3
 8021096:	7013      	strb	r3, [r2, #0]
        }

        rhs += 2 * rhs_cols;
 8021098:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 802109c:	005b      	lsls	r3, r3, #1
 802109e:	4619      	mov	r1, r3
 80210a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80210a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80210a8:	681b      	ldr	r3, [r3, #0]
 80210aa:	440b      	add	r3, r1
 80210ac:	6013      	str	r3, [r2, #0]
        dst += 2;
 80210ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80210b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80210b6:	681b      	ldr	r3, [r3, #0]
 80210b8:	3302      	adds	r3, #2
 80210ba:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 80210bc:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 80210c0:	3302      	adds	r3, #2
 80210c2:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c
 80210c6:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 80210ca:	1e5a      	subs	r2, r3, #1
 80210cc:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 80210d0:	4293      	cmp	r3, r2
 80210d2:	f6fc ae81 	blt.w	801ddd8 <arm_nn_mat_mult_nt_t_s8+0x36>
    }

    if (rhs_rows % 2)
 80210d6:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 80210da:	f003 0301 	and.w	r3, r3, #1
 80210de:	2b00      	cmp	r3, #0
 80210e0:	f000 815b 	beq.w	802139a <arm_nn_mat_mult_nt_t_s8+0x35f8>
    {
        const q7_t *lhs_ptr = &lhs[0];
 80210e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80210e8:	681b      	ldr	r3, [r3, #0]
 80210ea:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
        q7_t *dst_ptr = &dst[0];
 80210ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80210f2:	681b      	ldr	r3, [r3, #0]
 80210f4:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 80210f8:	2300      	movs	r3, #0
 80210fa:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 80210fe:	e145      	b.n	802138c <arm_nn_mat_mult_nt_t_s8+0x35ea>
        {
            const q7_t *rhs_ptr = &rhs[0];
 8021100:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8021104:	681b      	ldr	r3, [r3, #0]
 8021106:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
            q31_t res00 = 0;
 802110a:	2300      	movs	r3, #0
 802110c:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            if (bias)
 8021110:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8021114:	681b      	ldr	r3, [r3, #0]
 8021116:	2b00      	cmp	r3, #0
 8021118:	d00c      	beq.n	8021134 <arm_nn_mat_mult_nt_t_s8+0x3392>
            {
                res00 = bias[rhs_rows - 1];
 802111a:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 802111e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021122:	3b01      	subs	r3, #1
 8021124:	009b      	lsls	r3, r3, #2
 8021126:	f107 0234 	add.w	r2, r7, #52	; 0x34
 802112a:	6812      	ldr	r2, [r2, #0]
 802112c:	4413      	add	r3, r2
 802112e:	681b      	ldr	r3, [r3, #0]
 8021130:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            }

            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8021134:	2300      	movs	r3, #0
 8021136:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
 802113a:	e029      	b.n	8021190 <arm_nn_mat_mult_nt_t_s8+0x33ee>
            {
                q31_t rhs_value = rhs_ptr[0];
 802113c:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 8021140:	f993 3000 	ldrsb.w	r3, [r3]
 8021144:	f8c7 39e8 	str.w	r3, [r7, #2536]	; 0x9e8
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8021148:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 802114c:	f993 3000 	ldrsb.w	r3, [r3]
 8021150:	461a      	mov	r2, r3
 8021152:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 8021156:	4413      	add	r3, r2
 8021158:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4

                res00 += lhs_value * rhs_value;
 802115c:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 8021160:	f8d7 29e8 	ldr.w	r2, [r7, #2536]	; 0x9e8
 8021164:	fb02 f303 	mul.w	r3, r2, r3
 8021168:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 802116c:	4413      	add	r3, r2
 802116e:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

                ++rhs_ptr;
 8021172:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 8021176:	3301      	adds	r3, #1
 8021178:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
                ++lhs_ptr;
 802117c:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 8021180:	3301      	adds	r3, #1
 8021182:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8021186:	f8d7 39f0 	ldr.w	r3, [r7, #2544]	; 0x9f0
 802118a:	3301      	adds	r3, #1
 802118c:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
 8021190:	f8d7 29f0 	ldr.w	r2, [r7, #2544]	; 0x9f0
 8021194:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8021198:	429a      	cmp	r2, r3
 802119a:	dbcf      	blt.n	802113c <arm_nn_mat_mult_nt_t_s8+0x339a>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 802119c:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 80211a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80211a4:	3b01      	subs	r3, #1
 80211a6:	009b      	lsls	r3, r3, #2
 80211a8:	f8d7 2a60 	ldr.w	r2, [r7, #2656]	; 0xa60
 80211ac:	4413      	add	r3, r2
 80211ae:	6819      	ldr	r1, [r3, #0]
 80211b0:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 80211b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80211b8:	3b01      	subs	r3, #1
 80211ba:	009b      	lsls	r3, r3, #2
 80211bc:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 80211c0:	4413      	add	r3, r2
 80211c2:	681a      	ldr	r2, [r3, #0]
 80211c4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80211c8:	f8d7 09f4 	ldr.w	r0, [r7, #2548]	; 0x9f4
 80211cc:	6018      	str	r0, [r3, #0]
 80211ce:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80211d2:	6019      	str	r1, [r3, #0]
 80211d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80211d8:	601a      	str	r2, [r3, #0]
 80211da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80211de:	681b      	ldr	r3, [r3, #0]
 80211e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80211e4:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80211e8:	6812      	ldr	r2, [r2, #0]
 80211ea:	409a      	lsls	r2, r3
 80211ec:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80211f0:	601a      	str	r2, [r3, #0]
 80211f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80211f6:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80211fa:	6812      	ldr	r2, [r2, #0]
 80211fc:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80211fe:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8021202:	2200      	movs	r2, #0
 8021204:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8021206:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802120a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802120e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8021210:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021214:	2200      	movs	r2, #0
 8021216:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8021218:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802121c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021220:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8021224:	681b      	ldr	r3, [r3, #0]
 8021226:	4618      	mov	r0, r3
 8021228:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802122c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021230:	681b      	ldr	r3, [r3, #0]
 8021232:	461a      	mov	r2, r3
 8021234:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021238:	fb02 fc01 	mul.w	ip, r2, r1
 802123c:	fb00 f603 	mul.w	r6, r0, r3
 8021240:	4466      	add	r6, ip
 8021242:	fba0 2302 	umull	r2, r3, r0, r2
 8021246:	18f1      	adds	r1, r6, r3
 8021248:	460b      	mov	r3, r1
 802124a:	eb14 0a02 	adds.w	sl, r4, r2
 802124e:	eb45 0b03 	adc.w	fp, r5, r3
 8021252:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021256:	e9c3 ab00 	strd	sl, fp, [r3]
    result = (int32_t)(mult.long_long >> 31);
 802125a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802125e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021262:	f04f 0200 	mov.w	r2, #0
 8021266:	f04f 0300 	mov.w	r3, #0
 802126a:	0fc2      	lsrs	r2, r0, #31
 802126c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021270:	17cb      	asrs	r3, r1, #31
 8021272:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8021276:	4613      	mov	r3, r2
 8021278:	600b      	str	r3, [r1, #0]
    return result;
 802127a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 802127e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8021280:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8021284:	681b      	ldr	r3, [r3, #0]
 8021286:	2b00      	cmp	r3, #0
 8021288:	dc04      	bgt.n	8021294 <arm_nn_mat_mult_nt_t_s8+0x34f2>
 802128a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 802128e:	681b      	ldr	r3, [r3, #0]
 8021290:	425b      	negs	r3, r3
 8021292:	e000      	b.n	8021296 <arm_nn_mat_mult_nt_t_s8+0x34f4>
 8021294:	2300      	movs	r3, #0
 8021296:	f507 7288 	add.w	r2, r7, #272	; 0x110
 802129a:	6011      	str	r1, [r2, #0]
 802129c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80212a0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80212a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80212a6:	2200      	movs	r2, #0
 80212a8:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80212aa:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80212ae:	2201      	movs	r2, #1
 80212b0:	681b      	ldr	r3, [r3, #0]
 80212b2:	409a      	lsls	r2, r3
 80212b4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80212b8:	3a01      	subs	r2, #1
 80212ba:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 80212bc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80212c0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80212c4:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80212c8:	6809      	ldr	r1, [r1, #0]
 80212ca:	6812      	ldr	r2, [r2, #0]
 80212cc:	400a      	ands	r2, r1
 80212ce:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80212d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80212d4:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80212d8:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80212dc:	6809      	ldr	r1, [r1, #0]
 80212de:	6812      	ldr	r2, [r2, #0]
 80212e0:	fa41 f202 	asr.w	r2, r1, r2
 80212e4:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80212e6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80212ea:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80212ee:	6812      	ldr	r2, [r2, #0]
 80212f0:	1052      	asrs	r2, r2, #1
 80212f2:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80212f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80212f8:	681b      	ldr	r3, [r3, #0]
 80212fa:	2b00      	cmp	r3, #0
 80212fc:	da06      	bge.n	802130c <arm_nn_mat_mult_nt_t_s8+0x356a>
        threshold++;
 80212fe:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8021302:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8021306:	6812      	ldr	r2, [r2, #0]
 8021308:	3201      	adds	r2, #1
 802130a:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 802130c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8021310:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8021314:	6812      	ldr	r2, [r2, #0]
 8021316:	681b      	ldr	r3, [r3, #0]
 8021318:	429a      	cmp	r2, r3
 802131a:	dd06      	ble.n	802132a <arm_nn_mat_mult_nt_t_s8+0x3588>
        result++;
 802131c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8021320:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8021324:	6812      	ldr	r2, [r2, #0]
 8021326:	3201      	adds	r2, #1
 8021328:	601a      	str	r2, [r3, #0]
    return result;
 802132a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802132e:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8021330:	bf00      	nop
 8021332:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            // Add offset
            res00 += dst_offset;
 8021336:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 802133a:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 802133e:	4413      	add	r3, r2
 8021340:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            // Clamp the result
            res00 = MAX(res00, activation_min);
 8021344:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8021348:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 802134c:	4293      	cmp	r3, r2
 802134e:	bfb8      	it	lt
 8021350:	4613      	movlt	r3, r2
 8021352:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            res00 = MIN(res00, activation_max);
 8021356:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 802135a:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 802135e:	4293      	cmp	r3, r2
 8021360:	bfa8      	it	ge
 8021362:	4613      	movge	r3, r2
 8021364:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            dst_ptr[0] = (q7_t)res00;
 8021368:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 802136c:	b25a      	sxtb	r2, r3
 802136e:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 8021372:	701a      	strb	r2, [r3, #0]
            dst_ptr += rhs_rows;
 8021374:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8021378:	f8d7 2a00 	ldr.w	r2, [r7, #2560]	; 0xa00
 802137c:	4413      	add	r3, r2
 802137e:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 8021382:	f8d7 39fc 	ldr.w	r3, [r7, #2556]	; 0x9fc
 8021386:	3301      	adds	r3, #1
 8021388:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 802138c:	f8d7 29fc 	ldr.w	r2, [r7, #2556]	; 0x9fc
 8021390:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 8021394:	429a      	cmp	r2, r3
 8021396:	f6ff aeb3 	blt.w	8021100 <arm_nn_mat_mult_nt_t_s8+0x335e>
            dst_ptr[0] = (q7_t)res00;
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
 802139a:	2300      	movs	r3, #0
}
 802139c:	4618      	mov	r0, r3
 802139e:	f507 6724 	add.w	r7, r7, #2624	; 0xa40
 80213a2:	46bd      	mov	sp, r7
 80213a4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80213a8:	4770      	bx	lr

080213aa <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
 80213aa:	b480      	push	{r7}
 80213ac:	b0a5      	sub	sp, #148	; 0x94
 80213ae:	af00      	add	r7, sp, #0
 80213b0:	60f8      	str	r0, [r7, #12]
 80213b2:	60b9      	str	r1, [r7, #8]
 80213b4:	607a      	str	r2, [r7, #4]
 80213b6:	807b      	strh	r3, [r7, #2]
    q31_t in_q15x2_2;
    q31_t out_q15x2_1;
    q31_t out_q15x2_2;

    /*loop unrolling */
    block_cnt = block_size >> 2;
 80213b8:	687b      	ldr	r3, [r7, #4]
 80213ba:	089b      	lsrs	r3, r3, #2
 80213bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 80213c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80213c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80213c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80213cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80213d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80213d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80213d8:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 80213dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80213e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80213e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (block_cnt > 0)
 80213e6:	e070      	b.n	80214ca <arm_q7_to_q15_with_offset+0x120>
 80213e8:	f107 030c 	add.w	r3, r7, #12
 80213ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 80213ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213f0:	681b      	ldr	r3, [r3, #0]
 80213f2:	681b      	ldr	r3, [r3, #0]
 80213f4:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 80213f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213f8:	681b      	ldr	r3, [r3, #0]
 80213fa:	1d1a      	adds	r2, r3, #4
 80213fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213fe:	601a      	str	r2, [r3, #0]
    return (val);
 8021400:	693b      	ldr	r3, [r7, #16]
    {
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in_q7x4 = arm_nn_read_q7x4_ia(&src);
 8021402:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
 8021404:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8021406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021408:	637b      	str	r3, [r7, #52]	; 0x34
 802140a:	2308      	movs	r3, #8
 802140c:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 802140e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021410:	f003 031f 	and.w	r3, r3, #31
 8021414:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 8021416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021418:	2b00      	cmp	r3, #0
 802141a:	d101      	bne.n	8021420 <arm_q7_to_q15_with_offset+0x76>
    return op1;
 802141c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802141e:	e003      	b.n	8021428 <arm_q7_to_q15_with_offset+0x7e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8021420:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021424:	fa61 f303 	ror.w	r3, r1, r3
 8021428:	643a      	str	r2, [r7, #64]	; 0x40
 802142a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 802142c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802142e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021430:	fa23 f382 	sxtab16	r3, r3, r2
 8021434:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8021436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021438:	677b      	str	r3, [r7, #116]	; 0x74
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);
 802143a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 802143c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802143e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021440:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8021442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021446:	fa23 f382 	sxtab16	r3, r3, r2
 802144a:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 802144c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802144e:	673b      	str	r3, [r7, #112]	; 0x70

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 8021450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021452:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021454:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021456:	66bb      	str	r3, [r7, #104]	; 0x68
 8021458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802145a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802145c:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8021460:	667b      	str	r3, [r7, #100]	; 0x64
 8021462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021464:	663b      	str	r3, [r7, #96]	; 0x60
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 8021466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021468:	65fb      	str	r3, [r7, #92]	; 0x5c
 802146a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802146c:	65bb      	str	r3, [r7, #88]	; 0x58
 802146e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8021472:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8021476:	657b      	str	r3, [r7, #84]	; 0x54
 8021478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802147a:	653b      	str	r3, [r7, #80]	; 0x50
 802147c:	f107 0308 	add.w	r3, r7, #8
 8021480:	623b      	str	r3, [r7, #32]
 8021482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021484:	61fb      	str	r3, [r7, #28]
  @param[in]     src_q31   Input value to be written.
  @return        none
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;
 8021486:	69fb      	ldr	r3, [r7, #28]
 8021488:	61bb      	str	r3, [r7, #24]

    memcpy(*dest_q15, &val, 4);
 802148a:	6a3b      	ldr	r3, [r7, #32]
 802148c:	681b      	ldr	r3, [r3, #0]
 802148e:	69ba      	ldr	r2, [r7, #24]
 8021490:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 8021492:	6a3b      	ldr	r3, [r7, #32]
 8021494:	681b      	ldr	r3, [r3, #0]
 8021496:	1d1a      	adds	r2, r3, #4
 8021498:	6a3b      	ldr	r3, [r7, #32]
 802149a:	601a      	str	r2, [r3, #0]
}
 802149c:	bf00      	nop
 802149e:	f107 0308 	add.w	r3, r7, #8
 80214a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80214a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80214a6:	627b      	str	r3, [r7, #36]	; 0x24
    q31_t val = src_q31;
 80214a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80214aa:	617b      	str	r3, [r7, #20]
    memcpy(*dest_q15, &val, 4);
 80214ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80214ae:	681b      	ldr	r3, [r3, #0]
 80214b0:	697a      	ldr	r2, [r7, #20]
 80214b2:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 80214b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80214b6:	681b      	ldr	r3, [r3, #0]
 80214b8:	1d1a      	adds	r2, r3, #4
 80214ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80214bc:	601a      	str	r2, [r3, #0]
}
 80214be:	bf00      	nop

        arm_nn_write_q15x2_ia(&dst, out_q15x2_1);
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
 80214c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80214c4:	3b01      	subs	r3, #1
 80214c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 80214ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80214ce:	2b00      	cmp	r3, #0
 80214d0:	dc8a      	bgt.n	80213e8 <arm_q7_to_q15_with_offset+0x3e>
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
 80214d2:	687b      	ldr	r3, [r7, #4]
 80214d4:	f003 0303 	and.w	r3, r3, #3
 80214d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 80214dc:	e012      	b.n	8021504 <arm_q7_to_q15_with_offset+0x15a>
    {
        *dst++ = (q15_t)*src++ + offset;
 80214de:	68fb      	ldr	r3, [r7, #12]
 80214e0:	1c5a      	adds	r2, r3, #1
 80214e2:	60fa      	str	r2, [r7, #12]
 80214e4:	f993 3000 	ldrsb.w	r3, [r3]
 80214e8:	b29a      	uxth	r2, r3
 80214ea:	887b      	ldrh	r3, [r7, #2]
 80214ec:	4413      	add	r3, r2
 80214ee:	b299      	uxth	r1, r3
 80214f0:	68bb      	ldr	r3, [r7, #8]
 80214f2:	1c9a      	adds	r2, r3, #2
 80214f4:	60ba      	str	r2, [r7, #8]
 80214f6:	b20a      	sxth	r2, r1
 80214f8:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        block_cnt--;
 80214fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80214fe:	3b01      	subs	r3, #1
 8021500:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 8021504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021508:	2b00      	cmp	r3, #0
 802150a:	dce8      	bgt.n	80214de <arm_q7_to_q15_with_offset+0x134>
    }
}
 802150c:	bf00      	nop
 802150e:	bf00      	nop
 8021510:	3794      	adds	r7, #148	; 0x94
 8021512:	46bd      	mov	sp, r7
 8021514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021518:	4770      	bx	lr

0802151a <scale_q31_to_q7_and_clamp>:
                                      q7_t *target,
                                      int32_t length,
                                      const int32_t count,
                                      const int act_min,
                                      const int act_max)
{
 802151a:	b480      	push	{r7}
 802151c:	b089      	sub	sp, #36	; 0x24
 802151e:	af00      	add	r7, sp, #0
 8021520:	60f8      	str	r0, [r7, #12]
 8021522:	60b9      	str	r1, [r7, #8]
 8021524:	607a      	str	r2, [r7, #4]
 8021526:	603b      	str	r3, [r7, #0]
    const int half_count = count / 2;
 8021528:	683b      	ldr	r3, [r7, #0]
 802152a:	0fda      	lsrs	r2, r3, #31
 802152c:	4413      	add	r3, r2
 802152e:	105b      	asrs	r3, r3, #1
 8021530:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < length; i++)
 8021532:	2300      	movs	r3, #0
 8021534:	61fb      	str	r3, [r7, #28]
 8021536:	e030      	b.n	802159a <scale_q31_to_q7_and_clamp+0x80>
    {
        int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
 8021538:	69fb      	ldr	r3, [r7, #28]
 802153a:	009b      	lsls	r3, r3, #2
 802153c:	68fa      	ldr	r2, [r7, #12]
 802153e:	4413      	add	r3, r2
 8021540:	681b      	ldr	r3, [r3, #0]
 8021542:	2b00      	cmp	r3, #0
 8021544:	dd07      	ble.n	8021556 <scale_q31_to_q7_and_clamp+0x3c>
 8021546:	69fb      	ldr	r3, [r7, #28]
 8021548:	009b      	lsls	r3, r3, #2
 802154a:	68fa      	ldr	r2, [r7, #12]
 802154c:	4413      	add	r3, r2
 802154e:	681a      	ldr	r2, [r3, #0]
 8021550:	69bb      	ldr	r3, [r7, #24]
 8021552:	4413      	add	r3, r2
 8021554:	e006      	b.n	8021564 <scale_q31_to_q7_and_clamp+0x4a>
 8021556:	69fb      	ldr	r3, [r7, #28]
 8021558:	009b      	lsls	r3, r3, #2
 802155a:	68fa      	ldr	r2, [r7, #12]
 802155c:	4413      	add	r3, r2
 802155e:	681a      	ldr	r2, [r3, #0]
 8021560:	69bb      	ldr	r3, [r7, #24]
 8021562:	1ad3      	subs	r3, r2, r3
 8021564:	617b      	str	r3, [r7, #20]
        sum = sum / count;
 8021566:	697a      	ldr	r2, [r7, #20]
 8021568:	683b      	ldr	r3, [r7, #0]
 802156a:	fb92 f3f3 	sdiv	r3, r2, r3
 802156e:	617b      	str	r3, [r7, #20]
        sum = MAX(sum, act_min);
 8021570:	697a      	ldr	r2, [r7, #20]
 8021572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021574:	4293      	cmp	r3, r2
 8021576:	bfb8      	it	lt
 8021578:	4613      	movlt	r3, r2
 802157a:	617b      	str	r3, [r7, #20]
        sum = MIN(sum, act_max);
 802157c:	697a      	ldr	r2, [r7, #20]
 802157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021580:	4293      	cmp	r3, r2
 8021582:	bfa8      	it	ge
 8021584:	4613      	movge	r3, r2
 8021586:	617b      	str	r3, [r7, #20]

        target[i] = (q7_t)sum;
 8021588:	69fb      	ldr	r3, [r7, #28]
 802158a:	68ba      	ldr	r2, [r7, #8]
 802158c:	4413      	add	r3, r2
 802158e:	697a      	ldr	r2, [r7, #20]
 8021590:	b252      	sxtb	r2, r2
 8021592:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 8021594:	69fb      	ldr	r3, [r7, #28]
 8021596:	3301      	adds	r3, #1
 8021598:	61fb      	str	r3, [r7, #28]
 802159a:	69fa      	ldr	r2, [r7, #28]
 802159c:	687b      	ldr	r3, [r7, #4]
 802159e:	429a      	cmp	r2, r3
 80215a0:	dbca      	blt.n	8021538 <scale_q31_to_q7_and_clamp+0x1e>
    }
}
 80215a2:	bf00      	nop
 80215a4:	bf00      	nop
 80215a6:	3724      	adds	r7, #36	; 0x24
 80215a8:	46bd      	mov	sp, r7
 80215aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215ae:	4770      	bx	lr

080215b0 <arm_avgpool_s8>:
                          const cmsis_nn_dims *input_dims,
                          const q7_t *src,
                          const cmsis_nn_dims *filter_dims,
                          const cmsis_nn_dims *output_dims,
                          q7_t *dst)
{
 80215b0:	b580      	push	{r7, lr}
 80215b2:	b0a6      	sub	sp, #152	; 0x98
 80215b4:	af02      	add	r7, sp, #8
 80215b6:	60f8      	str	r0, [r7, #12]
 80215b8:	60b9      	str	r1, [r7, #8]
 80215ba:	607a      	str	r2, [r7, #4]
 80215bc:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 80215be:	687b      	ldr	r3, [r7, #4]
 80215c0:	685b      	ldr	r3, [r3, #4]
 80215c2:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t input_x = input_dims->w;
 80215c4:	687b      	ldr	r3, [r7, #4]
 80215c6:	689b      	ldr	r3, [r3, #8]
 80215c8:	667b      	str	r3, [r7, #100]	; 0x64
    const int32_t output_y = output_dims->h;
 80215ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80215ce:	685b      	ldr	r3, [r3, #4]
 80215d0:	663b      	str	r3, [r7, #96]	; 0x60
    const int32_t output_x = output_dims->w;
 80215d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80215d6:	689b      	ldr	r3, [r3, #8]
 80215d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    const int32_t stride_y = pool_params->stride.h;
 80215da:	68bb      	ldr	r3, [r7, #8]
 80215dc:	685b      	ldr	r3, [r3, #4]
 80215de:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t stride_x = pool_params->stride.w;
 80215e0:	68bb      	ldr	r3, [r7, #8]
 80215e2:	681b      	ldr	r3, [r3, #0]
 80215e4:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t kernel_y = filter_dims->h;
 80215e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80215ea:	685b      	ldr	r3, [r3, #4]
 80215ec:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t kernel_x = filter_dims->w;
 80215ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80215f2:	689b      	ldr	r3, [r3, #8]
 80215f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t pad_y = pool_params->padding.h;
 80215f6:	68bb      	ldr	r3, [r7, #8]
 80215f8:	68db      	ldr	r3, [r3, #12]
 80215fa:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t pad_x = pool_params->padding.w;
 80215fc:	68bb      	ldr	r3, [r7, #8]
 80215fe:	689b      	ldr	r3, [r3, #8]
 8021600:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t act_min = pool_params->activation.min;
 8021602:	68bb      	ldr	r3, [r7, #8]
 8021604:	691b      	ldr	r3, [r3, #16]
 8021606:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t act_max = pool_params->activation.max;
 8021608:	68bb      	ldr	r3, [r7, #8]
 802160a:	695b      	ldr	r3, [r3, #20]
 802160c:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t ch_src = input_dims->c;
 802160e:	687b      	ldr	r3, [r7, #4]
 8021610:	68db      	ldr	r3, [r3, #12]
 8021612:	63bb      	str	r3, [r7, #56]	; 0x38
    q31_t *buffer = (q31_t *)ctx->buf;
 8021614:	68fb      	ldr	r3, [r7, #12]
 8021616:	681b      	ldr	r3, [r3, #0]
 8021618:	637b      	str	r3, [r7, #52]	; 0x34

#if defined(ARM_MATH_DSP)

    /* Run the following code for CPU's with DSP extension
     */
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 802161a:	2300      	movs	r3, #0
 802161c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8021620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021622:	425b      	negs	r3, r3
 8021624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8021628:	e0c7      	b.n	80217ba <arm_avgpool_s8+0x20a>
    {
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 802162a:	2300      	movs	r3, #0
 802162c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8021630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021632:	425b      	negs	r3, r3
 8021634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8021638:	e0ae      	b.n	8021798 <arm_avgpool_s8+0x1e8>
        {
            /* Condition for kernel start dimension:
                      (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t kernel_y_start = MAX(0, -idx_y);
 802163a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802163e:	2b00      	cmp	r3, #0
 8021640:	dc03      	bgt.n	802164a <arm_avgpool_s8+0x9a>
 8021642:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021646:	425b      	negs	r3, r3
 8021648:	e000      	b.n	802164c <arm_avgpool_s8+0x9c>
 802164a:	2300      	movs	r3, #0
 802164c:	633b      	str	r3, [r7, #48]	; 0x30
            const int32_t kernel_x_start = MAX(0, -idx_x);
 802164e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021652:	2b00      	cmp	r3, #0
 8021654:	dc03      	bgt.n	802165e <arm_avgpool_s8+0xae>
 8021656:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802165a:	425b      	negs	r3, r3
 802165c:	e000      	b.n	8021660 <arm_avgpool_s8+0xb0>
 802165e:	2300      	movs	r3, #0
 8021660:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Condition for kernel end dimension:
                   (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
 8021662:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8021664:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021668:	1ad3      	subs	r3, r2, r3
 802166a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802166c:	4293      	cmp	r3, r2
 802166e:	bfa8      	it	ge
 8021670:	4613      	movge	r3, r2
 8021672:	62bb      	str	r3, [r7, #40]	; 0x28
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
 8021674:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8021676:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802167a:	1ad3      	subs	r3, r2, r3
 802167c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802167e:	4293      	cmp	r3, r2
 8021680:	bfa8      	it	ge
 8021682:	4613      	movge	r3, r2
 8021684:	627b      	str	r3, [r7, #36]	; 0x24

            int count = 0;
 8021686:	2300      	movs	r3, #0
 8021688:	67fb      	str	r3, [r7, #124]	; 0x7c

            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 802168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802168c:	67bb      	str	r3, [r7, #120]	; 0x78
 802168e:	e05d      	b.n	802174c <arm_avgpool_s8+0x19c>
            {
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 8021690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021692:	677b      	str	r3, [r7, #116]	; 0x74
 8021694:	e053      	b.n	802173e <arm_avgpool_s8+0x18e>
                {
                    const q7_t *start = src + ch_src * (k_x + idx_x + (k_y + idx_y) * input_x);
 8021696:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8021698:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802169c:	441a      	add	r2, r3
 802169e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80216a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80216a4:	440b      	add	r3, r1
 80216a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80216a8:	fb01 f303 	mul.w	r3, r1, r3
 80216ac:	4413      	add	r3, r2
 80216ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80216b0:	fb02 f303 	mul.w	r3, r2, r3
 80216b4:	461a      	mov	r2, r3
 80216b6:	683b      	ldr	r3, [r7, #0]
 80216b8:	4413      	add	r3, r2
 80216ba:	623b      	str	r3, [r7, #32]

                    if (count == 0)
 80216bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80216be:	2b00      	cmp	r3, #0
 80216c0:	d115      	bne.n	80216ee <arm_avgpool_s8+0x13e>
                    {
                        for (int i = 0; i < ch_src; i++)
 80216c2:	2300      	movs	r3, #0
 80216c4:	673b      	str	r3, [r7, #112]	; 0x70
 80216c6:	e00d      	b.n	80216e4 <arm_avgpool_s8+0x134>
                        {
                            buffer[i] = start[i];
 80216c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80216ca:	6a3a      	ldr	r2, [r7, #32]
 80216cc:	4413      	add	r3, r2
 80216ce:	f993 1000 	ldrsb.w	r1, [r3]
 80216d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80216d4:	009b      	lsls	r3, r3, #2
 80216d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80216d8:	4413      	add	r3, r2
 80216da:	460a      	mov	r2, r1
 80216dc:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 80216de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80216e0:	3301      	adds	r3, #1
 80216e2:	673b      	str	r3, [r7, #112]	; 0x70
 80216e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80216e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80216e8:	429a      	cmp	r2, r3
 80216ea:	dbed      	blt.n	80216c8 <arm_avgpool_s8+0x118>
 80216ec:	e021      	b.n	8021732 <arm_avgpool_s8+0x182>
                        }
                    }
                    else
                    {
                        for (int i = 0; i < ch_src; i++)
 80216ee:	2300      	movs	r3, #0
 80216f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80216f2:	e01a      	b.n	802172a <arm_avgpool_s8+0x17a>
                        {
                            buffer[i] = __QADD(start[i], buffer[i]);
 80216f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80216f6:	6a3a      	ldr	r2, [r7, #32]
 80216f8:	4413      	add	r3, r2
 80216fa:	f993 3000 	ldrsb.w	r3, [r3]
 80216fe:	4618      	mov	r0, r3
 8021700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021702:	009b      	lsls	r3, r3, #2
 8021704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021706:	4413      	add	r3, r2
 8021708:	681a      	ldr	r2, [r3, #0]
 802170a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802170c:	009b      	lsls	r3, r3, #2
 802170e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021710:	440b      	add	r3, r1
 8021712:	61f8      	str	r0, [r7, #28]
 8021714:	61ba      	str	r2, [r7, #24]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8021716:	69fa      	ldr	r2, [r7, #28]
 8021718:	69b9      	ldr	r1, [r7, #24]
 802171a:	fa81 f282 	qadd	r2, r2, r1
 802171e:	617a      	str	r2, [r7, #20]
  return(result);
 8021720:	697a      	ldr	r2, [r7, #20]
 8021722:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 8021724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021726:	3301      	adds	r3, #1
 8021728:	66fb      	str	r3, [r7, #108]	; 0x6c
 802172a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802172c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802172e:	429a      	cmp	r2, r3
 8021730:	dbe0      	blt.n	80216f4 <arm_avgpool_s8+0x144>
                        }
                    }
                    count++;
 8021732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021734:	3301      	adds	r3, #1
 8021736:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 8021738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802173a:	3301      	adds	r3, #1
 802173c:	677b      	str	r3, [r7, #116]	; 0x74
 802173e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8021740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021742:	429a      	cmp	r2, r3
 8021744:	dba7      	blt.n	8021696 <arm_avgpool_s8+0xe6>
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 8021746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021748:	3301      	adds	r3, #1
 802174a:	67bb      	str	r3, [r7, #120]	; 0x78
 802174c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 802174e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021750:	429a      	cmp	r2, r3
 8021752:	db9d      	blt.n	8021690 <arm_avgpool_s8+0xe0>
                }
            }

            // Prevent static code issue DIVIDE_BY_ZERO.
            if (count == 0)
 8021754:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021756:	2b00      	cmp	r3, #0
 8021758:	d102      	bne.n	8021760 <arm_avgpool_s8+0x1b0>
            {
                return ARM_MATH_ARGUMENT_ERROR;
 802175a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802175e:	e033      	b.n	80217c8 <arm_avgpool_s8+0x218>
            }

            scale_q31_to_q7_and_clamp(buffer, dst, ch_src, count, act_min, act_max);
 8021760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021762:	9301      	str	r3, [sp, #4]
 8021764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021766:	9300      	str	r3, [sp, #0]
 8021768:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802176a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802176c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8021770:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8021772:	f7ff fed2 	bl	802151a <scale_q31_to_q7_and_clamp>
            dst += ch_src;
 8021776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021778:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 802177c:	4413      	add	r3, r2
 802177e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 8021782:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8021786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021788:	4413      	add	r3, r2
 802178a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802178e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8021792:	3301      	adds	r3, #1
 8021794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8021798:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 802179c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802179e:	429a      	cmp	r2, r3
 80217a0:	f6ff af4b 	blt.w	802163a <arm_avgpool_s8+0x8a>
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 80217a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80217a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80217aa:	4413      	add	r3, r2
 80217ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80217b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80217b4:	3301      	adds	r3, #1
 80217b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80217ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80217be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80217c0:	429a      	cmp	r2, r3
 80217c2:	f6ff af32 	blt.w	802162a <arm_avgpool_s8+0x7a>
            }
        }
    }

#endif
    return ARM_MATH_SUCCESS;
 80217c6:	2300      	movs	r3, #0
}
 80217c8:	4618      	mov	r0, r3
 80217ca:	3790      	adds	r7, #144	; 0x90
 80217cc:	46bd      	mov	sp, r7
 80217ce:	bd80      	pop	{r7, pc}

080217d0 <arm_avgpool_s8_get_buffer_size>:

#endif /* ARM_MATH_MVEI */

int32_t arm_avgpool_s8_get_buffer_size(const int output_x, const int ch_src)
{
 80217d0:	b480      	push	{r7}
 80217d2:	b083      	sub	sp, #12
 80217d4:	af00      	add	r7, sp, #0
 80217d6:	6078      	str	r0, [r7, #4]
 80217d8:	6039      	str	r1, [r7, #0]
    (void)output_x;

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (ch_src * sizeof(int32_t));
 80217da:	683b      	ldr	r3, [r7, #0]
 80217dc:	009b      	lsls	r3, r3, #2
#else
    (void)ch_src;
    return 0;
#endif
}
 80217de:	4618      	mov	r0, r3
 80217e0:	370c      	adds	r7, #12
 80217e2:	46bd      	mov	sp, r7
 80217e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217e8:	4770      	bx	lr

080217ea <compare_and_replace_if_larger_q7>:

#include "arm_nnfunctions.h"
#include "arm_nnsupportfunctions.h"

static void compare_and_replace_if_larger_q7(q7_t *base, const q7_t *target, int32_t length)
{
 80217ea:	b480      	push	{r7}
 80217ec:	b091      	sub	sp, #68	; 0x44
 80217ee:	af00      	add	r7, sp, #0
 80217f0:	60f8      	str	r0, [r7, #12]
 80217f2:	60b9      	str	r1, [r7, #8]
 80217f4:	607a      	str	r2, [r7, #4]
        base += 16;
        target += 16;
        length -= 16;
    }
#else
    q7_t *dst = base;
 80217f6:	68fb      	ldr	r3, [r7, #12]
 80217f8:	62bb      	str	r3, [r7, #40]	; 0x28
    const q7_t *src = target;
 80217fa:	68bb      	ldr	r3, [r7, #8]
 80217fc:	627b      	str	r3, [r7, #36]	; 0x24
    union arm_nnword ref_max;
    union arm_nnword comp_max;
    int32_t cnt = length >> 2;
 80217fe:	687b      	ldr	r3, [r7, #4]
 8021800:	109b      	asrs	r3, r3, #2
 8021802:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (cnt > 0l)
 8021804:	e050      	b.n	80218a8 <compare_and_replace_if_larger_q7+0xbe>
    {
        ref_max.word = arm_nn_read_q7x4(dst);
 8021806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021808:	637b      	str	r3, [r7, #52]	; 0x34
 802180a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802180c:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 802180e:	617b      	str	r3, [r7, #20]
    return (val);
 8021810:	697b      	ldr	r3, [r7, #20]
 8021812:	623b      	str	r3, [r7, #32]
 8021814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021818:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&val, *in_q7, 4);
 802181a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802181c:	681b      	ldr	r3, [r3, #0]
 802181e:	681b      	ldr	r3, [r3, #0]
 8021820:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 8021822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021824:	681b      	ldr	r3, [r3, #0]
 8021826:	1d1a      	adds	r2, r3, #4
 8021828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802182a:	601a      	str	r2, [r3, #0]
    return (val);
 802182c:	693b      	ldr	r3, [r7, #16]
        comp_max.word = arm_nn_read_q7x4_ia(&src);
 802182e:	61fb      	str	r3, [r7, #28]

        if (comp_max.bytes[0] > ref_max.bytes[0])
 8021830:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8021834:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8021838:	429a      	cmp	r2, r3
 802183a:	dd03      	ble.n	8021844 <compare_and_replace_if_larger_q7+0x5a>
        {
            ref_max.bytes[0] = comp_max.bytes[0];
 802183c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8021840:	f887 3020 	strb.w	r3, [r7, #32]
        }
        if (comp_max.bytes[1] > ref_max.bytes[1])
 8021844:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8021848:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 802184c:	429a      	cmp	r2, r3
 802184e:	dd03      	ble.n	8021858 <compare_and_replace_if_larger_q7+0x6e>
        {
            ref_max.bytes[1] = comp_max.bytes[1];
 8021850:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8021854:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        }
        if (comp_max.bytes[2] > ref_max.bytes[2])
 8021858:	f997 201e 	ldrsb.w	r2, [r7, #30]
 802185c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8021860:	429a      	cmp	r2, r3
 8021862:	dd03      	ble.n	802186c <compare_and_replace_if_larger_q7+0x82>
        {
            ref_max.bytes[2] = comp_max.bytes[2];
 8021864:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021868:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        }
        if (comp_max.bytes[3] > ref_max.bytes[3])
 802186c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021870:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8021874:	429a      	cmp	r2, r3
 8021876:	dd03      	ble.n	8021880 <compare_and_replace_if_larger_q7+0x96>
        {
            ref_max.bytes[3] = comp_max.bytes[3];
 8021878:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802187c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }

        write_q7x4_ia(&dst, ref_max.word);
 8021880:	6a3b      	ldr	r3, [r7, #32]
 8021882:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8021886:	633a      	str	r2, [r7, #48]	; 0x30
 8021888:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE void write_q7x4_ia (
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
 802188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802188c:	61bb      	str	r3, [r7, #24]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 802188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021890:	681b      	ldr	r3, [r3, #0]
 8021892:	69ba      	ldr	r2, [r7, #24]
 8021894:	601a      	str	r2, [r3, #0]
  (*pQ7)[1] = (val >> 8) & 0x0FF;
  (*pQ7)[2] = (val >> 16) & 0x0FF;
  (*pQ7)[3] = (val >> 24) & 0x0FF;

#endif
  *pQ7 += 4;
 8021896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021898:	681b      	ldr	r3, [r3, #0]
 802189a:	1d1a      	adds	r2, r3, #4
 802189c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802189e:	601a      	str	r2, [r3, #0]
}
 80218a0:	bf00      	nop

        cnt--;
 80218a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80218a4:	3b01      	subs	r3, #1
 80218a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 80218a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80218aa:	2b00      	cmp	r3, #0
 80218ac:	dcab      	bgt.n	8021806 <compare_and_replace_if_larger_q7+0x1c>
    }

    cnt = length & 0x3;
 80218ae:	687b      	ldr	r3, [r7, #4]
 80218b0:	f003 0303 	and.w	r3, r3, #3
 80218b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 80218b6:	e015      	b.n	80218e4 <compare_and_replace_if_larger_q7+0xfa>
    {
        if (*src > *dst)
 80218b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218ba:	f993 2000 	ldrsb.w	r2, [r3]
 80218be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218c0:	f993 3000 	ldrsb.w	r3, [r3]
 80218c4:	429a      	cmp	r2, r3
 80218c6:	dd04      	ble.n	80218d2 <compare_and_replace_if_larger_q7+0xe8>
        {
            *dst = *src;
 80218c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80218ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218cc:	f992 2000 	ldrsb.w	r2, [r2]
 80218d0:	701a      	strb	r2, [r3, #0]
        }
        dst++;
 80218d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218d4:	3301      	adds	r3, #1
 80218d6:	62bb      	str	r3, [r7, #40]	; 0x28
        src++;
 80218d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218da:	3301      	adds	r3, #1
 80218dc:	627b      	str	r3, [r7, #36]	; 0x24
        cnt--;
 80218de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80218e0:	3b01      	subs	r3, #1
 80218e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 80218e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80218e6:	2b00      	cmp	r3, #0
 80218e8:	dce6      	bgt.n	80218b8 <compare_and_replace_if_larger_q7+0xce>
    }
#endif
}
 80218ea:	bf00      	nop
 80218ec:	bf00      	nop
 80218ee:	3744      	adds	r7, #68	; 0x44
 80218f0:	46bd      	mov	sp, r7
 80218f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218f6:	4770      	bx	lr

080218f8 <clamp_output>:

static void clamp_output(q7_t *source, int32_t length, const int32_t act_min, const int32_t act_max)
{
 80218f8:	b480      	push	{r7}
 80218fa:	b08d      	sub	sp, #52	; 0x34
 80218fc:	af00      	add	r7, sp, #0
 80218fe:	60f8      	str	r0, [r7, #12]
 8021900:	60b9      	str	r1, [r7, #8]
 8021902:	607a      	str	r2, [r7, #4]
 8021904:	603b      	str	r3, [r7, #0]
        vstrbq_p_s8(source, res, p);
        source += 16;
    }
#else
    union arm_nnword in;
    int32_t cnt = length >> 2;
 8021906:	68bb      	ldr	r3, [r7, #8]
 8021908:	109b      	asrs	r3, r3, #2
 802190a:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (cnt > 0l)
 802190c:	e062      	b.n	80219d4 <clamp_output+0xdc>
    {
        in.word = arm_nn_read_q7x4(source);
 802190e:	68fb      	ldr	r3, [r7, #12]
 8021910:	61fb      	str	r3, [r7, #28]
 8021912:	69fb      	ldr	r3, [r7, #28]
 8021914:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 8021916:	617b      	str	r3, [r7, #20]
    return (val);
 8021918:	697b      	ldr	r3, [r7, #20]
 802191a:	61bb      	str	r3, [r7, #24]

        in.bytes[0] = MAX(in.bytes[0], act_min);
 802191c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8021920:	461a      	mov	r2, r3
 8021922:	687b      	ldr	r3, [r7, #4]
 8021924:	4293      	cmp	r3, r2
 8021926:	bfb8      	it	lt
 8021928:	4613      	movlt	r3, r2
 802192a:	b25b      	sxtb	r3, r3
 802192c:	763b      	strb	r3, [r7, #24]
        in.bytes[0] = MIN(in.bytes[0], act_max);
 802192e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8021932:	461a      	mov	r2, r3
 8021934:	683b      	ldr	r3, [r7, #0]
 8021936:	4293      	cmp	r3, r2
 8021938:	bfa8      	it	ge
 802193a:	4613      	movge	r3, r2
 802193c:	b25b      	sxtb	r3, r3
 802193e:	763b      	strb	r3, [r7, #24]
        in.bytes[1] = MAX(in.bytes[1], act_min);
 8021940:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8021944:	461a      	mov	r2, r3
 8021946:	687b      	ldr	r3, [r7, #4]
 8021948:	4293      	cmp	r3, r2
 802194a:	bfb8      	it	lt
 802194c:	4613      	movlt	r3, r2
 802194e:	b25b      	sxtb	r3, r3
 8021950:	767b      	strb	r3, [r7, #25]
        in.bytes[1] = MIN(in.bytes[1], act_max);
 8021952:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8021956:	461a      	mov	r2, r3
 8021958:	683b      	ldr	r3, [r7, #0]
 802195a:	4293      	cmp	r3, r2
 802195c:	bfa8      	it	ge
 802195e:	4613      	movge	r3, r2
 8021960:	b25b      	sxtb	r3, r3
 8021962:	767b      	strb	r3, [r7, #25]
        in.bytes[2] = MAX(in.bytes[2], act_min);
 8021964:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8021968:	461a      	mov	r2, r3
 802196a:	687b      	ldr	r3, [r7, #4]
 802196c:	4293      	cmp	r3, r2
 802196e:	bfb8      	it	lt
 8021970:	4613      	movlt	r3, r2
 8021972:	b25b      	sxtb	r3, r3
 8021974:	76bb      	strb	r3, [r7, #26]
        in.bytes[2] = MIN(in.bytes[2], act_max);
 8021976:	f997 301a 	ldrsb.w	r3, [r7, #26]
 802197a:	461a      	mov	r2, r3
 802197c:	683b      	ldr	r3, [r7, #0]
 802197e:	4293      	cmp	r3, r2
 8021980:	bfa8      	it	ge
 8021982:	4613      	movge	r3, r2
 8021984:	b25b      	sxtb	r3, r3
 8021986:	76bb      	strb	r3, [r7, #26]
        in.bytes[3] = MAX(in.bytes[3], act_min);
 8021988:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802198c:	461a      	mov	r2, r3
 802198e:	687b      	ldr	r3, [r7, #4]
 8021990:	4293      	cmp	r3, r2
 8021992:	bfb8      	it	lt
 8021994:	4613      	movlt	r3, r2
 8021996:	b25b      	sxtb	r3, r3
 8021998:	76fb      	strb	r3, [r7, #27]
        in.bytes[3] = MIN(in.bytes[3], act_max);
 802199a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802199e:	461a      	mov	r2, r3
 80219a0:	683b      	ldr	r3, [r7, #0]
 80219a2:	4293      	cmp	r3, r2
 80219a4:	bfa8      	it	ge
 80219a6:	4613      	movge	r3, r2
 80219a8:	b25b      	sxtb	r3, r3
 80219aa:	76fb      	strb	r3, [r7, #27]

        write_q7x4_ia(&source, in.word);
 80219ac:	69bb      	ldr	r3, [r7, #24]
 80219ae:	f107 020c 	add.w	r2, r7, #12
 80219b2:	627a      	str	r2, [r7, #36]	; 0x24
 80219b4:	623b      	str	r3, [r7, #32]
  q31_t val = value;
 80219b6:	6a3b      	ldr	r3, [r7, #32]
 80219b8:	613b      	str	r3, [r7, #16]
  memcpy (*pQ7, &val, 4);
 80219ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219bc:	681b      	ldr	r3, [r3, #0]
 80219be:	693a      	ldr	r2, [r7, #16]
 80219c0:	601a      	str	r2, [r3, #0]
  *pQ7 += 4;
 80219c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219c4:	681b      	ldr	r3, [r3, #0]
 80219c6:	1d1a      	adds	r2, r3, #4
 80219c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219ca:	601a      	str	r2, [r3, #0]
}
 80219cc:	bf00      	nop
        cnt--;
 80219ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219d0:	3b01      	subs	r3, #1
 80219d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 80219d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219d6:	2b00      	cmp	r3, #0
 80219d8:	dc99      	bgt.n	802190e <clamp_output+0x16>
    }

    cnt = length & 0x3;
 80219da:	68bb      	ldr	r3, [r7, #8]
 80219dc:	f003 0303 	and.w	r3, r3, #3
 80219e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 80219e2:	e018      	b.n	8021a16 <clamp_output+0x11e>
    {
        int32_t comp = *source;
 80219e4:	68fb      	ldr	r3, [r7, #12]
 80219e6:	f993 3000 	ldrsb.w	r3, [r3]
 80219ea:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MAX(comp, act_min);
 80219ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80219ee:	687b      	ldr	r3, [r7, #4]
 80219f0:	4293      	cmp	r3, r2
 80219f2:	bfb8      	it	lt
 80219f4:	4613      	movlt	r3, r2
 80219f6:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MIN(comp, act_max);
 80219f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80219fa:	683b      	ldr	r3, [r7, #0]
 80219fc:	4293      	cmp	r3, r2
 80219fe:	bfa8      	it	ge
 8021a00:	4613      	movge	r3, r2
 8021a02:	62bb      	str	r3, [r7, #40]	; 0x28
        *source++ = (int8_t)comp;
 8021a04:	68fb      	ldr	r3, [r7, #12]
 8021a06:	1c5a      	adds	r2, r3, #1
 8021a08:	60fa      	str	r2, [r7, #12]
 8021a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021a0c:	b252      	sxtb	r2, r2
 8021a0e:	701a      	strb	r2, [r3, #0]
        cnt--;
 8021a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a12:	3b01      	subs	r3, #1
 8021a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 8021a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a18:	2b00      	cmp	r3, #0
 8021a1a:	dce3      	bgt.n	80219e4 <clamp_output+0xec>
    }
#endif
}
 8021a1c:	bf00      	nop
 8021a1e:	bf00      	nop
 8021a20:	3734      	adds	r7, #52	; 0x34
 8021a22:	46bd      	mov	sp, r7
 8021a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a28:	4770      	bx	lr

08021a2a <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
 8021a2a:	b580      	push	{r7, lr}
 8021a2c:	b09e      	sub	sp, #120	; 0x78
 8021a2e:	af00      	add	r7, sp, #0
 8021a30:	60f8      	str	r0, [r7, #12]
 8021a32:	60b9      	str	r1, [r7, #8]
 8021a34:	607a      	str	r2, [r7, #4]
 8021a36:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 8021a38:	687b      	ldr	r3, [r7, #4]
 8021a3a:	685b      	ldr	r3, [r3, #4]
 8021a3c:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t input_x = input_dims->w;
 8021a3e:	687b      	ldr	r3, [r7, #4]
 8021a40:	689b      	ldr	r3, [r3, #8]
 8021a42:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t output_y = output_dims->h;
 8021a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8021a48:	685b      	ldr	r3, [r3, #4]
 8021a4a:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t output_x = output_dims->w;
 8021a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8021a50:	689b      	ldr	r3, [r3, #8]
 8021a52:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t stride_y = pool_params->stride.h;
 8021a54:	68bb      	ldr	r3, [r7, #8]
 8021a56:	685b      	ldr	r3, [r3, #4]
 8021a58:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t stride_x = pool_params->stride.w;
 8021a5a:	68bb      	ldr	r3, [r7, #8]
 8021a5c:	681b      	ldr	r3, [r3, #0]
 8021a5e:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t kernel_y = filter_dims->h;
 8021a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021a64:	685b      	ldr	r3, [r3, #4]
 8021a66:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t kernel_x = filter_dims->w;
 8021a68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021a6c:	689b      	ldr	r3, [r3, #8]
 8021a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t pad_y = pool_params->padding.h;
 8021a70:	68bb      	ldr	r3, [r7, #8]
 8021a72:	68db      	ldr	r3, [r3, #12]
 8021a74:	63bb      	str	r3, [r7, #56]	; 0x38
    const int32_t pad_x = pool_params->padding.w;
 8021a76:	68bb      	ldr	r3, [r7, #8]
 8021a78:	689b      	ldr	r3, [r3, #8]
 8021a7a:	637b      	str	r3, [r7, #52]	; 0x34
    const int32_t act_min = pool_params->activation.min;
 8021a7c:	68bb      	ldr	r3, [r7, #8]
 8021a7e:	691b      	ldr	r3, [r3, #16]
 8021a80:	633b      	str	r3, [r7, #48]	; 0x30
    const int32_t act_max = pool_params->activation.max;
 8021a82:	68bb      	ldr	r3, [r7, #8]
 8021a84:	695b      	ldr	r3, [r3, #20]
 8021a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32_t channel_in = input_dims->c;
 8021a88:	687b      	ldr	r3, [r7, #4]
 8021a8a:	68db      	ldr	r3, [r3, #12]
 8021a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)ctx;
    q7_t *dst_base = dst;
 8021a8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021a92:	627b      	str	r3, [r7, #36]	; 0x24

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8021a94:	2300      	movs	r3, #0
 8021a96:	677b      	str	r3, [r7, #116]	; 0x74
 8021a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021a9a:	425b      	negs	r3, r3
 8021a9c:	673b      	str	r3, [r7, #112]	; 0x70
 8021a9e:	e078      	b.n	8021b92 <arm_max_pool_s8+0x168>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 8021aa0:	2300      	movs	r3, #0
 8021aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021aa6:	425b      	negs	r3, r3
 8021aa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8021aaa:	e067      	b.n	8021b7c <arm_max_pool_s8+0x152>
        {
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
 8021aac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021aae:	2b00      	cmp	r3, #0
 8021ab0:	dc02      	bgt.n	8021ab8 <arm_max_pool_s8+0x8e>
 8021ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021ab4:	425b      	negs	r3, r3
 8021ab6:	e000      	b.n	8021aba <arm_max_pool_s8+0x90>
 8021ab8:	2300      	movs	r3, #0
 8021aba:	623b      	str	r3, [r7, #32]
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 8021abc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	dc02      	bgt.n	8021ac8 <arm_max_pool_s8+0x9e>
 8021ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021ac4:	425b      	negs	r3, r3
 8021ac6:	e000      	b.n	8021aca <arm_max_pool_s8+0xa0>
 8021ac8:	2300      	movs	r3, #0
 8021aca:	61fb      	str	r3, [r7, #28]

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 8021acc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8021ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021ad0:	1ad3      	subs	r3, r2, r3
 8021ad2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021ad4:	4293      	cmp	r3, r2
 8021ad6:	bfa8      	it	ge
 8021ad8:	4613      	movge	r3, r2
 8021ada:	61bb      	str	r3, [r7, #24]
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 8021adc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8021ade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021ae0:	1ad3      	subs	r3, r2, r3
 8021ae2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021ae4:	4293      	cmp	r3, r2
 8021ae6:	bfa8      	it	ge
 8021ae8:	4613      	movge	r3, r2
 8021aea:	617b      	str	r3, [r7, #20]

            int count = 0;
 8021aec:	2300      	movs	r3, #0
 8021aee:	667b      	str	r3, [r7, #100]	; 0x64

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 8021af0:	6a3b      	ldr	r3, [r7, #32]
 8021af2:	663b      	str	r3, [r7, #96]	; 0x60
 8021af4:	e031      	b.n	8021b5a <arm_max_pool_s8+0x130>
            {
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 8021af6:	69fb      	ldr	r3, [r7, #28]
 8021af8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021afa:	e027      	b.n	8021b4c <arm_max_pool_s8+0x122>
                {
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 8021afc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8021afe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021b00:	441a      	add	r2, r3
 8021b02:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8021b04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021b06:	440b      	add	r3, r1
 8021b08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8021b0a:	fb01 f303 	mul.w	r3, r1, r3
 8021b0e:	4413      	add	r3, r2
 8021b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021b12:	fb02 f303 	mul.w	r3, r2, r3
 8021b16:	461a      	mov	r2, r3
 8021b18:	683b      	ldr	r3, [r7, #0]
 8021b1a:	4413      	add	r3, r2
 8021b1c:	613b      	str	r3, [r7, #16]

                    if (count == 0)
 8021b1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021b20:	2b00      	cmp	r3, #0
 8021b22:	d10a      	bne.n	8021b3a <arm_max_pool_s8+0x110>
                    {
                        memcpy(dst, start, channel_in);
 8021b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b26:	461a      	mov	r2, r3
 8021b28:	6939      	ldr	r1, [r7, #16]
 8021b2a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8021b2e:	f003 fc19 	bl	8025364 <memcpy>
                        count++;
 8021b32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021b34:	3301      	adds	r3, #1
 8021b36:	667b      	str	r3, [r7, #100]	; 0x64
 8021b38:	e005      	b.n	8021b46 <arm_max_pool_s8+0x11c>
                    }
                    else
                    {
                        compare_and_replace_if_larger_q7(dst, start, channel_in);
 8021b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021b3c:	6939      	ldr	r1, [r7, #16]
 8021b3e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8021b42:	f7ff fe52 	bl	80217ea <compare_and_replace_if_larger_q7>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 8021b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021b48:	3301      	adds	r3, #1
 8021b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021b4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8021b4e:	697b      	ldr	r3, [r7, #20]
 8021b50:	429a      	cmp	r2, r3
 8021b52:	dbd3      	blt.n	8021afc <arm_max_pool_s8+0xd2>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 8021b54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021b56:	3301      	adds	r3, #1
 8021b58:	663b      	str	r3, [r7, #96]	; 0x60
 8021b5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8021b5c:	69bb      	ldr	r3, [r7, #24]
 8021b5e:	429a      	cmp	r2, r3
 8021b60:	dbc9      	blt.n	8021af6 <arm_max_pool_s8+0xcc>
                    }
                }
            }
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
 8021b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b64:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8021b68:	4413      	add	r3, r2
 8021b6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 8021b6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8021b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021b72:	4413      	add	r3, r2
 8021b74:	66bb      	str	r3, [r7, #104]	; 0x68
 8021b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021b78:	3301      	adds	r3, #1
 8021b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021b7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8021b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021b80:	429a      	cmp	r2, r3
 8021b82:	db93      	blt.n	8021aac <arm_max_pool_s8+0x82>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8021b84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8021b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021b88:	4413      	add	r3, r2
 8021b8a:	673b      	str	r3, [r7, #112]	; 0x70
 8021b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021b8e:	3301      	adds	r3, #1
 8021b90:	677b      	str	r3, [r7, #116]	; 0x74
 8021b92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8021b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021b96:	429a      	cmp	r2, r3
 8021b98:	db82      	blt.n	8021aa0 <arm_max_pool_s8+0x76>
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 8021b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021b9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8021b9e:	fb02 f303 	mul.w	r3, r2, r3
 8021ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021ba4:	fb02 f103 	mul.w	r1, r2, r3
 8021ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021bac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021bae:	f7ff fea3 	bl	80218f8 <clamp_output>

    return ARM_MATH_SUCCESS;
 8021bb2:	2300      	movs	r3, #0
}
 8021bb4:	4618      	mov	r0, r3
 8021bb6:	3778      	adds	r7, #120	; 0x78
 8021bb8:	46bd      	mov	sp, r7
 8021bba:	bd80      	pop	{r7, pc}
 8021bbc:	0000      	movs	r0, r0
	...

08021bc0 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 8021bc0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8021bc4:	f5ad 6dbf 	sub.w	sp, sp, #1528	; 0x5f8
 8021bc8:	af00      	add	r7, sp, #0
 8021bca:	f507 740d 	add.w	r4, r7, #564	; 0x234
 8021bce:	6020      	str	r0, [r4, #0]
 8021bd0:	f507 700c 	add.w	r0, r7, #560	; 0x230
 8021bd4:	6001      	str	r1, [r0, #0]
 8021bd6:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8021bda:	600a      	str	r2, [r1, #0]
 8021bdc:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8021be0:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 8021be2:	2201      	movs	r2, #1
 8021be4:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8021be8:	fa02 f303 	lsl.w	r3, r2, r3
 8021bec:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4

    int32_t col = 0;
 8021bf0:	2300      	movs	r3, #0
 8021bf2:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8021bf6:	2300      	movs	r3, #0
 8021bf8:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 8021bfc:	f003 b84a 	b.w	8024c94 <arm_softmax_s8+0x30d4>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 8021c00:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8021c04:	681b      	ldr	r3, [r3, #0]
 8021c06:	781b      	ldrb	r3, [r3, #0]
 8021c08:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef

        for (col = 1; col < row_size; ++col)
 8021c0c:	2301      	movs	r3, #1
 8021c0e:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8021c12:	e013      	b.n	8021c3c <arm_softmax_s8+0x7c>
        {
            max = MAX(max, input[col]);
 8021c14:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8021c18:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8021c1c:	681b      	ldr	r3, [r3, #0]
 8021c1e:	4413      	add	r3, r2
 8021c20:	f993 2000 	ldrsb.w	r2, [r3]
 8021c24:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 8021c28:	4293      	cmp	r3, r2
 8021c2a:	bfb8      	it	lt
 8021c2c:	4613      	movlt	r3, r2
 8021c2e:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef
        for (col = 1; col < row_size; ++col)
 8021c32:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8021c36:	3301      	adds	r3, #1
 8021c38:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8021c3c:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8021c40:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8021c44:	681b      	ldr	r3, [r3, #0]
 8021c46:	429a      	cmp	r2, r3
 8021c48:	dbe4      	blt.n	8021c14 <arm_softmax_s8+0x54>
        }

        int32_t diff = 0;
 8021c4a:	2300      	movs	r3, #0
 8021c4c:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
        int32_t sum = 0;
 8021c50:	2300      	movs	r3, #0
 8021c52:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

        for (col = 0; col < row_size; ++col)
 8021c56:	2300      	movs	r3, #0
 8021c58:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8021c5c:	f001 b8a1 	b.w	8022da2 <arm_softmax_s8+0x11e2>
        {
            diff = input[col] - max;
 8021c60:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8021c64:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8021c68:	681b      	ldr	r3, [r3, #0]
 8021c6a:	4413      	add	r3, r2
 8021c6c:	f993 3000 	ldrsb.w	r3, [r3]
 8021c70:	461a      	mov	r2, r3
 8021c72:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 8021c76:	1ad3      	subs	r3, r2, r3
 8021c78:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
            if (diff >= diff_min)
 8021c7c:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 8021c80:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8021c84:	429a      	cmp	r2, r3
 8021c86:	f2c1 8087 	blt.w	8022d98 <arm_softmax_s8+0x11d8>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 8021c8a:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 8021c8e:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 8021c92:	fb03 f202 	mul.w	r2, r3, r2
 8021c96:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 8021c9a:	601a      	str	r2, [r3, #0]
 8021c9c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8021ca0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8021ca4:	681b      	ldr	r3, [r3, #0]
 8021ca6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8021ca8:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8021cac:	2300      	movs	r3, #0
 8021cae:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8021cb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021cb4:	f04f 0300 	mov.w	r3, #0
 8021cb8:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8021cbc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021cc0:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 8021cc4:	681b      	ldr	r3, [r3, #0]
 8021cc6:	0fdb      	lsrs	r3, r3, #31
 8021cc8:	b2da      	uxtb	r2, r3
 8021cca:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8021cce:	681b      	ldr	r3, [r3, #0]
 8021cd0:	0fdb      	lsrs	r3, r3, #31
 8021cd2:	b2db      	uxtb	r3, r3
 8021cd4:	4053      	eors	r3, r2
 8021cd6:	b2db      	uxtb	r3, r3
 8021cd8:	2b00      	cmp	r3, #0
 8021cda:	d014      	beq.n	8021d06 <arm_softmax_s8+0x146>
        mult = 1 - mult;
 8021cdc:	f04f 0001 	mov.w	r0, #1
 8021ce0:	f04f 0100 	mov.w	r1, #0
 8021ce4:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8021ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cec:	1a84      	subs	r4, r0, r2
 8021cee:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 8021cf2:	eb61 0303 	sbc.w	r3, r1, r3
 8021cf6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8021cfa:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 8021cfe:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8021d02:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021d06:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 8021d0a:	681b      	ldr	r3, [r3, #0]
 8021d0c:	4618      	mov	r0, r3
 8021d0e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8021d12:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8021d16:	681b      	ldr	r3, [r3, #0]
 8021d18:	461a      	mov	r2, r3
 8021d1a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021d1e:	fb02 f501 	mul.w	r5, r2, r1
 8021d22:	fb00 f403 	mul.w	r4, r0, r3
 8021d26:	442c      	add	r4, r5
 8021d28:	fba0 0102 	umull	r0, r1, r0, r2
 8021d2c:	1863      	adds	r3, r4, r1
 8021d2e:	4619      	mov	r1, r3
 8021d30:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8021d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d38:	1814      	adds	r4, r2, r0
 8021d3a:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 8021d3e:	414b      	adcs	r3, r1
 8021d40:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8021d44:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	; 0x218
 8021d48:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8021d4c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021d50:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8021d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d58:	4610      	mov	r0, r2
 8021d5a:	4619      	mov	r1, r3
 8021d5c:	2800      	cmp	r0, #0
 8021d5e:	f171 0300 	sbcs.w	r3, r1, #0
 8021d62:	da06      	bge.n	8021d72 <arm_softmax_s8+0x1b2>
 8021d64:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021d68:	f04f 0300 	mov.w	r3, #0
 8021d6c:	1880      	adds	r0, r0, r2
 8021d6e:	eb43 0101 	adc.w	r1, r3, r1
 8021d72:	f04f 0200 	mov.w	r2, #0
 8021d76:	f04f 0300 	mov.w	r3, #0
 8021d7a:	0fc2      	lsrs	r2, r0, #31
 8021d7c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021d80:	17cb      	asrs	r3, r1, #31
 8021d82:	4610      	mov	r0, r2
 8021d84:	4619      	mov	r1, r3
 8021d86:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8021d8a:	4603      	mov	r3, r0
 8021d8c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8021d8e:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 8021d92:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8021d96:	6812      	ldr	r2, [r2, #0]
 8021d98:	681b      	ldr	r3, [r3, #0]
 8021d9a:	429a      	cmp	r2, r3
 8021d9c:	d10a      	bne.n	8021db4 <arm_softmax_s8+0x1f4>
 8021d9e:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 8021da2:	681b      	ldr	r3, [r3, #0]
 8021da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021da8:	d104      	bne.n	8021db4 <arm_softmax_s8+0x1f4>
        result = Q31_MAX;
 8021daa:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8021dae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021db2:	6013      	str	r3, [r2, #0]
    return result;
 8021db4:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8021db8:	681b      	ldr	r3, [r3, #0]
 8021dba:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
    int32_t mask = 0;
 8021dbe:	2300      	movs	r3, #0
 8021dc0:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
    int32_t shift = 24;
 8021dc4:	2318      	movs	r3, #24
 8021dc6:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8021dca:	2201      	movs	r2, #1
 8021dcc:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 8021dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8021dd4:	1e5a      	subs	r2, r3, #1
 8021dd6:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8021dda:	ea02 0103 	and.w	r1, r2, r3
 8021dde:	2201      	movs	r2, #1
 8021de0:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 8021de4:	fa02 f303 	lsl.w	r3, r2, r3
 8021de8:	1acb      	subs	r3, r1, r3
 8021dea:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
    const int32_t remainder = val_mod_minus_quarter - val;
 8021dee:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 8021df2:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8021df6:	1ad3      	subs	r3, r2, r3
 8021df8:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8021dfc:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8021e00:	015b      	lsls	r3, r3, #5
 8021e02:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8021e06:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8021e0a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8021e0e:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 8021e12:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8021e16:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
    q31_t result = 0;
 8021e1a:	2300      	movs	r3, #0
 8021e1c:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    q63_t mult = 1 << 30;
 8021e20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021e24:	f04f 0300 	mov.w	r3, #0
 8021e28:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8021e2c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021e30:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8021e34:	0fdb      	lsrs	r3, r3, #31
 8021e36:	b2da      	uxtb	r2, r3
 8021e38:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8021e3c:	0fdb      	lsrs	r3, r3, #31
 8021e3e:	b2db      	uxtb	r3, r3
 8021e40:	4053      	eors	r3, r2
 8021e42:	b2db      	uxtb	r3, r3
 8021e44:	2b00      	cmp	r3, #0
 8021e46:	d014      	beq.n	8021e72 <arm_softmax_s8+0x2b2>
        mult = 1 - mult;
 8021e48:	f04f 0001 	mov.w	r0, #1
 8021e4c:	f04f 0100 	mov.w	r1, #0
 8021e50:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8021e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e58:	1a84      	subs	r4, r0, r2
 8021e5a:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 8021e5e:	eb61 0303 	sbc.w	r3, r1, r3
 8021e62:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8021e66:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 8021e6a:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8021e6e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021e72:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8021e76:	4618      	mov	r0, r3
 8021e78:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8021e7c:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8021e80:	461a      	mov	r2, r3
 8021e82:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021e86:	fb02 f501 	mul.w	r5, r2, r1
 8021e8a:	fb00 f403 	mul.w	r4, r0, r3
 8021e8e:	442c      	add	r4, r5
 8021e90:	fba0 0102 	umull	r0, r1, r0, r2
 8021e94:	1863      	adds	r3, r4, r1
 8021e96:	4619      	mov	r1, r3
 8021e98:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8021e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ea0:	1814      	adds	r4, r2, r0
 8021ea2:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 8021ea6:	414b      	adcs	r3, r1
 8021ea8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8021eac:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8021eb0:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8021eb4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021eb8:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8021ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ec0:	4610      	mov	r0, r2
 8021ec2:	4619      	mov	r1, r3
 8021ec4:	2800      	cmp	r0, #0
 8021ec6:	f171 0300 	sbcs.w	r3, r1, #0
 8021eca:	da06      	bge.n	8021eda <arm_softmax_s8+0x31a>
 8021ecc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021ed0:	f04f 0300 	mov.w	r3, #0
 8021ed4:	1880      	adds	r0, r0, r2
 8021ed6:	eb43 0101 	adc.w	r1, r3, r1
 8021eda:	f04f 0200 	mov.w	r2, #0
 8021ede:	f04f 0300 	mov.w	r3, #0
 8021ee2:	0fc2      	lsrs	r2, r0, #31
 8021ee4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021ee8:	17cb      	asrs	r3, r1, #31
 8021eea:	4613      	mov	r3, r2
 8021eec:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8021ef0:	f8d7 25a0 	ldr.w	r2, [r7, #1440]	; 0x5a0
 8021ef4:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8021ef8:	429a      	cmp	r2, r3
 8021efa:	d108      	bne.n	8021f0e <arm_softmax_s8+0x34e>
 8021efc:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8021f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021f04:	d103      	bne.n	8021f0e <arm_softmax_s8+0x34e>
        result = Q31_MAX;
 8021f06:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021f0a:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    return result;
 8021f0e:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
    const int32_t x2 = MUL_SAT(x, x);
 8021f12:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8021f16:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8021f1a:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 8021f1e:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8021f22:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
    q31_t result = 0;
 8021f26:	2300      	movs	r3, #0
 8021f28:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    q63_t mult = 1 << 30;
 8021f2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021f30:	f04f 0300 	mov.w	r3, #0
 8021f34:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8021f38:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021f3c:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8021f40:	0fdb      	lsrs	r3, r3, #31
 8021f42:	b2da      	uxtb	r2, r3
 8021f44:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8021f48:	0fdb      	lsrs	r3, r3, #31
 8021f4a:	b2db      	uxtb	r3, r3
 8021f4c:	4053      	eors	r3, r2
 8021f4e:	b2db      	uxtb	r3, r3
 8021f50:	2b00      	cmp	r3, #0
 8021f52:	d014      	beq.n	8021f7e <arm_softmax_s8+0x3be>
        mult = 1 - mult;
 8021f54:	f04f 0001 	mov.w	r0, #1
 8021f58:	f04f 0100 	mov.w	r1, #0
 8021f5c:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8021f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f64:	1a84      	subs	r4, r0, r2
 8021f66:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8021f6a:	eb61 0303 	sbc.w	r3, r1, r3
 8021f6e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8021f72:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 8021f76:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 8021f7a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021f7e:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8021f82:	4618      	mov	r0, r3
 8021f84:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8021f88:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8021f8c:	461a      	mov	r2, r3
 8021f8e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021f92:	fb02 f501 	mul.w	r5, r2, r1
 8021f96:	fb00 f403 	mul.w	r4, r0, r3
 8021f9a:	442c      	add	r4, r5
 8021f9c:	fba0 0102 	umull	r0, r1, r0, r2
 8021fa0:	1863      	adds	r3, r4, r1
 8021fa2:	4619      	mov	r1, r3
 8021fa4:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8021fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fac:	1814      	adds	r4, r2, r0
 8021fae:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 8021fb2:	414b      	adcs	r3, r1
 8021fb4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8021fb8:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8021fbc:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 8021fc0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021fc4:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8021fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fcc:	4610      	mov	r0, r2
 8021fce:	4619      	mov	r1, r3
 8021fd0:	2800      	cmp	r0, #0
 8021fd2:	f171 0300 	sbcs.w	r3, r1, #0
 8021fd6:	da06      	bge.n	8021fe6 <arm_softmax_s8+0x426>
 8021fd8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021fdc:	f04f 0300 	mov.w	r3, #0
 8021fe0:	1880      	adds	r0, r0, r2
 8021fe2:	eb43 0101 	adc.w	r1, r3, r1
 8021fe6:	f04f 0200 	mov.w	r2, #0
 8021fea:	f04f 0300 	mov.w	r3, #0
 8021fee:	0fc2      	lsrs	r2, r0, #31
 8021ff0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021ff4:	17cb      	asrs	r3, r1, #31
 8021ff6:	4613      	mov	r3, r2
 8021ff8:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8021ffc:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 8022000:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8022004:	429a      	cmp	r2, r3
 8022006:	d108      	bne.n	802201a <arm_softmax_s8+0x45a>
 8022008:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 802200c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022010:	d103      	bne.n	802201a <arm_softmax_s8+0x45a>
        result = Q31_MAX;
 8022012:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022016:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    return result;
 802201a:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 802201e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
    q31_t result = 0;
 8022022:	2300      	movs	r3, #0
 8022024:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    const q31_t remainder_mask = (1 << exponent) - 1;
 8022028:	2304      	movs	r3, #4
 802202a:	3b01      	subs	r3, #1
 802202c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
    int32_t remainder = remainder_mask & dividend;
 8022030:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8022034:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8022038:	4013      	ands	r3, r2
 802203a:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
    result = dividend >> exponent;
 802203e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8022042:	109b      	asrs	r3, r3, #2
 8022044:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    q31_t threshold = remainder_mask >> 1;
 8022048:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 802204c:	105b      	asrs	r3, r3, #1
 802204e:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    if (result < 0)
 8022052:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8022056:	2b00      	cmp	r3, #0
 8022058:	da04      	bge.n	8022064 <arm_softmax_s8+0x4a4>
        threshold++;
 802205a:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 802205e:	3301      	adds	r3, #1
 8022060:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    if (remainder > threshold)
 8022064:	f8d7 2568 	ldr.w	r2, [r7, #1384]	; 0x568
 8022068:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 802206c:	429a      	cmp	r2, r3
 802206e:	dd04      	ble.n	802207a <arm_softmax_s8+0x4ba>
        result++;
 8022070:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8022074:	3301      	adds	r3, #1
 8022076:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    return result;
 802207a:	f8d7 6570 	ldr.w	r6, [r7, #1392]	; 0x570
 802207e:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8022082:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
 8022086:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 802208a:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
    q31_t result = 0;
 802208e:	2300      	movs	r3, #0
 8022090:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    q63_t mult = 1 << 30;
 8022094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022098:	f04f 0300 	mov.w	r3, #0
 802209c:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 80220a0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80220a4:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80220a8:	0fdb      	lsrs	r3, r3, #31
 80220aa:	b2da      	uxtb	r2, r3
 80220ac:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 80220b0:	0fdb      	lsrs	r3, r3, #31
 80220b2:	b2db      	uxtb	r3, r3
 80220b4:	4053      	eors	r3, r2
 80220b6:	b2db      	uxtb	r3, r3
 80220b8:	2b00      	cmp	r3, #0
 80220ba:	d014      	beq.n	80220e6 <arm_softmax_s8+0x526>
        mult = 1 - mult;
 80220bc:	f04f 0001 	mov.w	r0, #1
 80220c0:	f04f 0100 	mov.w	r1, #0
 80220c4:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80220c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220cc:	1a84      	subs	r4, r0, r2
 80220ce:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 80220d2:	eb61 0303 	sbc.w	r3, r1, r3
 80220d6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80220da:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80220de:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 80220e2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80220e6:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80220ea:	4618      	mov	r0, r3
 80220ec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80220f0:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 80220f4:	461a      	mov	r2, r3
 80220f6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80220fa:	fb02 f501 	mul.w	r5, r2, r1
 80220fe:	fb00 f403 	mul.w	r4, r0, r3
 8022102:	442c      	add	r4, r5
 8022104:	fba0 0102 	umull	r0, r1, r0, r2
 8022108:	1863      	adds	r3, r4, r1
 802210a:	4619      	mov	r1, r3
 802210c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8022110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022114:	1814      	adds	r4, r2, r0
 8022116:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 802211a:	414b      	adcs	r3, r1
 802211c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8022120:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8022124:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 8022128:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802212c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8022130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022134:	4610      	mov	r0, r2
 8022136:	4619      	mov	r1, r3
 8022138:	2800      	cmp	r0, #0
 802213a:	f171 0300 	sbcs.w	r3, r1, #0
 802213e:	da06      	bge.n	802214e <arm_softmax_s8+0x58e>
 8022140:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022144:	f04f 0300 	mov.w	r3, #0
 8022148:	1880      	adds	r0, r0, r2
 802214a:	eb43 0101 	adc.w	r1, r3, r1
 802214e:	f04f 0200 	mov.w	r2, #0
 8022152:	f04f 0300 	mov.w	r3, #0
 8022156:	0fc2      	lsrs	r2, r0, #31
 8022158:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802215c:	17cb      	asrs	r3, r1, #31
 802215e:	4613      	mov	r3, r2
 8022160:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022164:	f8d7 2560 	ldr.w	r2, [r7, #1376]	; 0x560
 8022168:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 802216c:	429a      	cmp	r2, r3
 802216e:	d108      	bne.n	8022182 <arm_softmax_s8+0x5c2>
 8022170:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8022174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022178:	d103      	bne.n	8022182 <arm_softmax_s8+0x5c2>
        result = Q31_MAX;
 802217a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802217e:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    return result;
 8022182:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8022186:	4433      	add	r3, r6
 8022188:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
    q31_t result = 0;
 802218c:	2300      	movs	r3, #0
 802218e:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    q63_t mult = 1 << 30;
 8022192:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022196:	f04f 0300 	mov.w	r3, #0
 802219a:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 802219e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80221a2:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 80221a6:	0fdb      	lsrs	r3, r3, #31
 80221a8:	b2da      	uxtb	r2, r3
 80221aa:	2300      	movs	r3, #0
 80221ac:	4053      	eors	r3, r2
 80221ae:	b2db      	uxtb	r3, r3
 80221b0:	2b00      	cmp	r3, #0
 80221b2:	d014      	beq.n	80221de <arm_softmax_s8+0x61e>
        mult = 1 - mult;
 80221b4:	f04f 0001 	mov.w	r0, #1
 80221b8:	f04f 0100 	mov.w	r1, #0
 80221bc:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80221c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221c4:	1a84      	subs	r4, r0, r2
 80221c6:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 80221ca:	eb61 0303 	sbc.w	r3, r1, r3
 80221ce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80221d2:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80221d6:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 80221da:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80221de:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 80221e2:	4618      	mov	r0, r3
 80221e4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80221e8:	a3d2      	add	r3, pc, #840	; (adr r3, 8022534 <arm_softmax_s8+0x974>)
 80221ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221ee:	fb02 f501 	mul.w	r5, r2, r1
 80221f2:	fb00 f403 	mul.w	r4, r0, r3
 80221f6:	442c      	add	r4, r5
 80221f8:	fba0 0102 	umull	r0, r1, r0, r2
 80221fc:	1863      	adds	r3, r4, r1
 80221fe:	4619      	mov	r1, r3
 8022200:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8022204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022208:	1814      	adds	r4, r2, r0
 802220a:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 802220e:	414b      	adcs	r3, r1
 8022210:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8022214:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8022218:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 802221c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022220:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8022224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022228:	4610      	mov	r0, r2
 802222a:	4619      	mov	r1, r3
 802222c:	2800      	cmp	r0, #0
 802222e:	f171 0300 	sbcs.w	r3, r1, #0
 8022232:	da06      	bge.n	8022242 <arm_softmax_s8+0x682>
 8022234:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022238:	f04f 0300 	mov.w	r3, #0
 802223c:	1880      	adds	r0, r0, r2
 802223e:	eb43 0101 	adc.w	r1, r3, r1
 8022242:	f04f 0200 	mov.w	r2, #0
 8022246:	f04f 0300 	mov.w	r3, #0
 802224a:	0fc2      	lsrs	r2, r0, #31
 802224c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022250:	17cb      	asrs	r3, r1, #31
 8022252:	4613      	mov	r3, r2
 8022254:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022258:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 802225c:	4bb2      	ldr	r3, [pc, #712]	; (8022528 <arm_softmax_s8+0x968>)
 802225e:	429a      	cmp	r2, r3
 8022260:	d108      	bne.n	8022274 <arm_softmax_s8+0x6b4>
 8022262:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8022266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802226a:	d103      	bne.n	8022274 <arm_softmax_s8+0x6b4>
        result = Q31_MAX;
 802226c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022270:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    return result;
 8022274:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8022278:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 802227c:	4413      	add	r3, r2
 802227e:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
    q31_t result = 0;
 8022282:	2300      	movs	r3, #0
 8022284:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    const q31_t remainder_mask = (1 << exponent) - 1;
 8022288:	2302      	movs	r3, #2
 802228a:	3b01      	subs	r3, #1
 802228c:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    int32_t remainder = remainder_mask & dividend;
 8022290:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8022294:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8022298:	4013      	ands	r3, r2
 802229a:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
    result = dividend >> exponent;
 802229e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80222a2:	105b      	asrs	r3, r3, #1
 80222a4:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    q31_t threshold = remainder_mask >> 1;
 80222a8:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80222ac:	105b      	asrs	r3, r3, #1
 80222ae:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    if (result < 0)
 80222b2:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 80222b6:	2b00      	cmp	r3, #0
 80222b8:	da04      	bge.n	80222c4 <arm_softmax_s8+0x704>
        threshold++;
 80222ba:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80222be:	3301      	adds	r3, #1
 80222c0:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    if (remainder > threshold)
 80222c4:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 80222c8:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80222cc:	429a      	cmp	r2, r3
 80222ce:	dd04      	ble.n	80222da <arm_softmax_s8+0x71a>
        result++;
 80222d0:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 80222d4:	3301      	adds	r3, #1
 80222d6:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    return result;
 80222da:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80222de:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80222e2:	4413      	add	r3, r2
 80222e4:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
    q31_t result = 0;
 80222e8:	2300      	movs	r3, #0
 80222ea:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    q63_t mult = 1 << 30;
 80222ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80222f2:	f04f 0300 	mov.w	r3, #0
 80222f6:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 80222fa:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80222fe:	2200      	movs	r2, #0
 8022300:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8022304:	0fdb      	lsrs	r3, r3, #31
 8022306:	b2db      	uxtb	r3, r3
 8022308:	4053      	eors	r3, r2
 802230a:	b2db      	uxtb	r3, r3
 802230c:	2b00      	cmp	r3, #0
 802230e:	d014      	beq.n	802233a <arm_softmax_s8+0x77a>
        mult = 1 - mult;
 8022310:	f04f 0001 	mov.w	r0, #1
 8022314:	f04f 0100 	mov.w	r1, #0
 8022318:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 802231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022320:	1a84      	subs	r4, r0, r2
 8022322:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 8022326:	eb61 0303 	sbc.w	r3, r1, r3
 802232a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 802232e:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 8022332:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8022336:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802233a:	a177      	add	r1, pc, #476	; (adr r1, 8022518 <arm_softmax_s8+0x958>)
 802233c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022340:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8022344:	461a      	mov	r2, r3
 8022346:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802234a:	fb02 f501 	mul.w	r5, r2, r1
 802234e:	fb00 f403 	mul.w	r4, r0, r3
 8022352:	442c      	add	r4, r5
 8022354:	fba0 0102 	umull	r0, r1, r0, r2
 8022358:	1863      	adds	r3, r4, r1
 802235a:	4619      	mov	r1, r3
 802235c:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8022360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022364:	1814      	adds	r4, r2, r0
 8022366:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 802236a:	414b      	adcs	r3, r1
 802236c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8022370:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 8022374:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8022378:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802237c:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8022380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022384:	4610      	mov	r0, r2
 8022386:	4619      	mov	r1, r3
 8022388:	2800      	cmp	r0, #0
 802238a:	f171 0300 	sbcs.w	r3, r1, #0
 802238e:	da06      	bge.n	802239e <arm_softmax_s8+0x7de>
 8022390:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022394:	f04f 0300 	mov.w	r3, #0
 8022398:	1880      	adds	r0, r0, r2
 802239a:	eb43 0101 	adc.w	r1, r3, r1
 802239e:	f04f 0200 	mov.w	r2, #0
 80223a2:	f04f 0300 	mov.w	r3, #0
 80223a6:	0fc2      	lsrs	r2, r0, #31
 80223a8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80223ac:	17cb      	asrs	r3, r1, #31
 80223ae:	4613      	mov	r3, r2
 80223b0:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    return result;
 80223b4:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
    int32_t result = 1895147668 +
 80223b8:	4b5c      	ldr	r3, [pc, #368]	; (802252c <arm_softmax_s8+0x96c>)
 80223ba:	4413      	add	r3, r2
 80223bc:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(1672461947)
 80223c0:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 80223c4:	1c53      	adds	r3, r2, #1
 80223c6:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 80223ca:	2301      	movs	r3, #1
 80223cc:	fa03 f202 	lsl.w	r2, r3, r2
 80223d0:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 80223d4:	4013      	ands	r3, r2
 80223d6:	2b00      	cmp	r3, #0
 80223d8:	d002      	beq.n	80223e0 <arm_softmax_s8+0x820>
 80223da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80223de:	e000      	b.n	80223e2 <arm_softmax_s8+0x822>
 80223e0:	2300      	movs	r3, #0
 80223e2:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80223e6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80223ea:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
    q31_t result = 0;
 80223ee:	2300      	movs	r3, #0
 80223f0:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    q63_t mult = 1 << 30;
 80223f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80223f8:	f04f 0300 	mov.w	r3, #0
 80223fc:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8022400:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022404:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8022408:	0fdb      	lsrs	r3, r3, #31
 802240a:	b2da      	uxtb	r2, r3
 802240c:	2300      	movs	r3, #0
 802240e:	4053      	eors	r3, r2
 8022410:	b2db      	uxtb	r3, r3
 8022412:	2b00      	cmp	r3, #0
 8022414:	d014      	beq.n	8022440 <arm_softmax_s8+0x880>
        mult = 1 - mult;
 8022416:	f04f 0001 	mov.w	r0, #1
 802241a:	f04f 0100 	mov.w	r1, #0
 802241e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8022422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022426:	1a84      	subs	r4, r0, r2
 8022428:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 802242c:	eb61 0303 	sbc.w	r3, r1, r3
 8022430:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8022434:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 8022438:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 802243c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022440:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8022444:	4618      	mov	r0, r3
 8022446:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802244a:	a335      	add	r3, pc, #212	; (adr r3, 8022520 <arm_softmax_s8+0x960>)
 802244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022450:	fb02 f501 	mul.w	r5, r2, r1
 8022454:	fb00 f403 	mul.w	r4, r0, r3
 8022458:	442c      	add	r4, r5
 802245a:	fba0 0102 	umull	r0, r1, r0, r2
 802245e:	1863      	adds	r3, r4, r1
 8022460:	4619      	mov	r1, r3
 8022462:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8022466:	e9d3 2300 	ldrd	r2, r3, [r3]
 802246a:	1814      	adds	r4, r2, r0
 802246c:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 8022470:	414b      	adcs	r3, r1
 8022472:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8022476:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 802247a:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 802247e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022482:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8022486:	e9d3 2300 	ldrd	r2, r3, [r3]
 802248a:	4610      	mov	r0, r2
 802248c:	4619      	mov	r1, r3
 802248e:	2800      	cmp	r0, #0
 8022490:	f171 0300 	sbcs.w	r3, r1, #0
 8022494:	da06      	bge.n	80224a4 <arm_softmax_s8+0x8e4>
 8022496:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802249a:	f04f 0300 	mov.w	r3, #0
 802249e:	1880      	adds	r0, r0, r2
 80224a0:	eb43 0101 	adc.w	r1, r3, r1
 80224a4:	f04f 0200 	mov.w	r2, #0
 80224a8:	f04f 0300 	mov.w	r3, #0
 80224ac:	0fc2      	lsrs	r2, r0, #31
 80224ae:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80224b2:	17cb      	asrs	r3, r1, #31
 80224b4:	4613      	mov	r3, r2
 80224b6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80224ba:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 80224be:	4b1c      	ldr	r3, [pc, #112]	; (8022530 <arm_softmax_s8+0x970>)
 80224c0:	429a      	cmp	r2, r3
 80224c2:	d108      	bne.n	80224d6 <arm_softmax_s8+0x916>
 80224c4:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80224c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80224cc:	d103      	bne.n	80224d6 <arm_softmax_s8+0x916>
        result = Q31_MAX;
 80224ce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80224d2:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    return result;
 80224d6:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
    SELECT_IF_NON_ZERO(1672461947)
 80224da:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80224de:	ea02 0103 	and.w	r1, r2, r3
 80224e2:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80224e6:	43da      	mvns	r2, r3
 80224e8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80224ec:	4013      	ands	r3, r2
 80224ee:	404b      	eors	r3, r1
 80224f0:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(1302514674)
 80224f4:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 80224f8:	1c53      	adds	r3, r2, #1
 80224fa:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 80224fe:	2301      	movs	r3, #1
 8022500:	fa03 f202 	lsl.w	r2, r3, r2
 8022504:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8022508:	4013      	ands	r3, r2
 802250a:	2b00      	cmp	r3, #0
 802250c:	d016      	beq.n	802253c <arm_softmax_s8+0x97c>
 802250e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022512:	e014      	b.n	802253e <arm_softmax_s8+0x97e>
 8022514:	f3af 8000 	nop.w
 8022518:	70f5a894 	.word	0x70f5a894
 802251c:	00000000 	.word	0x00000000
 8022520:	63afbe7b 	.word	0x63afbe7b
 8022524:	00000000 	.word	0x00000000
 8022528:	2aaaaaab 	.word	0x2aaaaaab
 802252c:	70f5a894 	.word	0x70f5a894
 8022530:	63afbe7b 	.word	0x63afbe7b
 8022534:	2aaaaaab 	.word	0x2aaaaaab
 8022538:	00000000 	.word	0x00000000
 802253c:	2300      	movs	r3, #0
 802253e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8022542:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022546:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
    q31_t result = 0;
 802254a:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 802254e:	2300      	movs	r3, #0
 8022550:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022552:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022556:	f04f 0300 	mov.w	r3, #0
 802255a:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 802255e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022562:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8022566:	0fdb      	lsrs	r3, r3, #31
 8022568:	b2da      	uxtb	r2, r3
 802256a:	2300      	movs	r3, #0
 802256c:	4053      	eors	r3, r2
 802256e:	b2db      	uxtb	r3, r3
 8022570:	2b00      	cmp	r3, #0
 8022572:	d014      	beq.n	802259e <arm_softmax_s8+0x9de>
        mult = 1 - mult;
 8022574:	f04f 0001 	mov.w	r0, #1
 8022578:	f04f 0100 	mov.w	r1, #0
 802257c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8022580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022584:	1a84      	subs	r4, r0, r2
 8022586:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 802258a:	eb61 0303 	sbc.w	r3, r1, r3
 802258e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8022592:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	; 0x1b0
 8022596:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 802259a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802259e:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 80225a2:	4618      	mov	r0, r3
 80225a4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80225a8:	a3e0      	add	r3, pc, #896	; (adr r3, 802292c <arm_softmax_s8+0xd6c>)
 80225aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225ae:	fb02 f501 	mul.w	r5, r2, r1
 80225b2:	fb00 f403 	mul.w	r4, r0, r3
 80225b6:	442c      	add	r4, r5
 80225b8:	fba0 0102 	umull	r0, r1, r0, r2
 80225bc:	1863      	adds	r3, r4, r1
 80225be:	4619      	mov	r1, r3
 80225c0:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80225c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225c8:	1814      	adds	r4, r2, r0
 80225ca:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 80225ce:	414b      	adcs	r3, r1
 80225d0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80225d4:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 80225d8:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 80225dc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80225e0:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80225e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225e8:	4610      	mov	r0, r2
 80225ea:	4619      	mov	r1, r3
 80225ec:	2800      	cmp	r0, #0
 80225ee:	f171 0300 	sbcs.w	r3, r1, #0
 80225f2:	da06      	bge.n	8022602 <arm_softmax_s8+0xa42>
 80225f4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80225f8:	f04f 0300 	mov.w	r3, #0
 80225fc:	1880      	adds	r0, r0, r2
 80225fe:	eb43 0101 	adc.w	r1, r3, r1
 8022602:	f04f 0200 	mov.w	r2, #0
 8022606:	f04f 0300 	mov.w	r3, #0
 802260a:	0fc2      	lsrs	r2, r0, #31
 802260c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022610:	17cb      	asrs	r3, r1, #31
 8022612:	4610      	mov	r0, r2
 8022614:	4619      	mov	r1, r3
 8022616:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 802261a:	4603      	mov	r3, r0
 802261c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802261e:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 8022622:	4bbf      	ldr	r3, [pc, #764]	; (8022920 <arm_softmax_s8+0xd60>)
 8022624:	429a      	cmp	r2, r3
 8022626:	d109      	bne.n	802263c <arm_softmax_s8+0xa7c>
 8022628:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 802262c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022630:	d104      	bne.n	802263c <arm_softmax_s8+0xa7c>
        result = Q31_MAX;
 8022632:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 8022636:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802263a:	6013      	str	r3, [r2, #0]
    return result;
 802263c:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8022640:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8022642:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022646:	ea02 0103 	and.w	r1, r2, r3
 802264a:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 802264e:	43da      	mvns	r2, r3
 8022650:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022654:	4013      	ands	r3, r2
 8022656:	404b      	eors	r3, r1
 8022658:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(790015084)
 802265c:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8022660:	1c53      	adds	r3, r2, #1
 8022662:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8022666:	2301      	movs	r3, #1
 8022668:	fa03 f202 	lsl.w	r2, r3, r2
 802266c:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8022670:	4013      	ands	r3, r2
 8022672:	2b00      	cmp	r3, #0
 8022674:	d002      	beq.n	802267c <arm_softmax_s8+0xabc>
 8022676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802267a:	e000      	b.n	802267e <arm_softmax_s8+0xabe>
 802267c:	2300      	movs	r3, #0
 802267e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8022682:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8022686:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802268a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802268c:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8022690:	2300      	movs	r3, #0
 8022692:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022694:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022698:	f04f 0300 	mov.w	r3, #0
 802269c:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80226a0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80226a4:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 80226a8:	681b      	ldr	r3, [r3, #0]
 80226aa:	0fdb      	lsrs	r3, r3, #31
 80226ac:	b2da      	uxtb	r2, r3
 80226ae:	2300      	movs	r3, #0
 80226b0:	4053      	eors	r3, r2
 80226b2:	b2db      	uxtb	r3, r3
 80226b4:	2b00      	cmp	r3, #0
 80226b6:	d014      	beq.n	80226e2 <arm_softmax_s8+0xb22>
        mult = 1 - mult;
 80226b8:	f04f 0001 	mov.w	r0, #1
 80226bc:	f04f 0100 	mov.w	r1, #0
 80226c0:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 80226c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226c8:	1a84      	subs	r4, r0, r2
 80226ca:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 80226ce:	eb61 0303 	sbc.w	r3, r1, r3
 80226d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80226d6:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 80226da:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 80226de:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80226e2:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 80226e6:	681b      	ldr	r3, [r3, #0]
 80226e8:	4618      	mov	r0, r3
 80226ea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80226ee:	a388      	add	r3, pc, #544	; (adr r3, 8022910 <arm_softmax_s8+0xd50>)
 80226f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226f4:	fb02 f501 	mul.w	r5, r2, r1
 80226f8:	fb00 f403 	mul.w	r4, r0, r3
 80226fc:	442c      	add	r4, r5
 80226fe:	fba0 0102 	umull	r0, r1, r0, r2
 8022702:	1863      	adds	r3, r4, r1
 8022704:	4619      	mov	r1, r3
 8022706:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 802270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802270e:	1814      	adds	r4, r2, r0
 8022710:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 8022714:	414b      	adcs	r3, r1
 8022716:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 802271a:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 802271e:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8022722:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022726:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 802272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802272e:	4610      	mov	r0, r2
 8022730:	4619      	mov	r1, r3
 8022732:	2800      	cmp	r0, #0
 8022734:	f171 0300 	sbcs.w	r3, r1, #0
 8022738:	da06      	bge.n	8022748 <arm_softmax_s8+0xb88>
 802273a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802273e:	f04f 0300 	mov.w	r3, #0
 8022742:	1880      	adds	r0, r0, r2
 8022744:	eb43 0101 	adc.w	r1, r3, r1
 8022748:	f04f 0200 	mov.w	r2, #0
 802274c:	f04f 0300 	mov.w	r3, #0
 8022750:	0fc2      	lsrs	r2, r0, #31
 8022752:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022756:	17cb      	asrs	r3, r1, #31
 8022758:	4610      	mov	r0, r2
 802275a:	4619      	mov	r1, r3
 802275c:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8022760:	4603      	mov	r3, r0
 8022762:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022764:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8022768:	681a      	ldr	r2, [r3, #0]
 802276a:	4b6e      	ldr	r3, [pc, #440]	; (8022924 <arm_softmax_s8+0xd64>)
 802276c:	429a      	cmp	r2, r3
 802276e:	d10a      	bne.n	8022786 <arm_softmax_s8+0xbc6>
 8022770:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8022774:	681b      	ldr	r3, [r3, #0]
 8022776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802277a:	d104      	bne.n	8022786 <arm_softmax_s8+0xbc6>
        result = Q31_MAX;
 802277c:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8022780:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022784:	6013      	str	r3, [r2, #0]
    return result;
 8022786:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 802278a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 802278c:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022790:	ea02 0103 	and.w	r1, r2, r3
 8022794:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022798:	43da      	mvns	r2, r3
 802279a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802279e:	4013      	ands	r3, r2
 80227a0:	404b      	eors	r3, r1
 80227a2:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(290630308)
 80227a6:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 80227aa:	1c53      	adds	r3, r2, #1
 80227ac:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 80227b0:	2301      	movs	r3, #1
 80227b2:	fa03 f202 	lsl.w	r2, r3, r2
 80227b6:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 80227ba:	4013      	ands	r3, r2
 80227bc:	2b00      	cmp	r3, #0
 80227be:	d002      	beq.n	80227c6 <arm_softmax_s8+0xc06>
 80227c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80227c4:	e000      	b.n	80227c8 <arm_softmax_s8+0xc08>
 80227c6:	2300      	movs	r3, #0
 80227c8:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80227cc:	f207 42dc 	addw	r2, r7, #1244	; 0x4dc
 80227d0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80227d4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80227d6:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 80227da:	2300      	movs	r3, #0
 80227dc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80227de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80227e2:	f04f 0300 	mov.w	r3, #0
 80227e6:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 80227ea:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80227ee:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80227f2:	681b      	ldr	r3, [r3, #0]
 80227f4:	0fdb      	lsrs	r3, r3, #31
 80227f6:	b2da      	uxtb	r2, r3
 80227f8:	2300      	movs	r3, #0
 80227fa:	4053      	eors	r3, r2
 80227fc:	b2db      	uxtb	r3, r3
 80227fe:	2b00      	cmp	r3, #0
 8022800:	d014      	beq.n	802282c <arm_softmax_s8+0xc6c>
        mult = 1 - mult;
 8022802:	f04f 0001 	mov.w	r0, #1
 8022806:	f04f 0100 	mov.w	r1, #0
 802280a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 802280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022812:	1a84      	subs	r4, r0, r2
 8022814:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 8022818:	eb61 0303 	sbc.w	r3, r1, r3
 802281c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8022820:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 8022824:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 8022828:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802282c:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8022830:	681b      	ldr	r3, [r3, #0]
 8022832:	4618      	mov	r0, r3
 8022834:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022838:	a337      	add	r3, pc, #220	; (adr r3, 8022918 <arm_softmax_s8+0xd58>)
 802283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802283e:	fb02 f501 	mul.w	r5, r2, r1
 8022842:	fb00 f403 	mul.w	r4, r0, r3
 8022846:	442c      	add	r4, r5
 8022848:	fba0 0102 	umull	r0, r1, r0, r2
 802284c:	1863      	adds	r3, r4, r1
 802284e:	4619      	mov	r1, r3
 8022850:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8022854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022858:	1814      	adds	r4, r2, r0
 802285a:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 802285e:	414b      	adcs	r3, r1
 8022860:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8022864:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8022868:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 802286c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022870:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8022874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022878:	4610      	mov	r0, r2
 802287a:	4619      	mov	r1, r3
 802287c:	2800      	cmp	r0, #0
 802287e:	f171 0300 	sbcs.w	r3, r1, #0
 8022882:	da06      	bge.n	8022892 <arm_softmax_s8+0xcd2>
 8022884:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022888:	f04f 0300 	mov.w	r3, #0
 802288c:	1880      	adds	r0, r0, r2
 802288e:	eb43 0101 	adc.w	r1, r3, r1
 8022892:	f04f 0200 	mov.w	r2, #0
 8022896:	f04f 0300 	mov.w	r3, #0
 802289a:	0fc2      	lsrs	r2, r0, #31
 802289c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80228a0:	17cb      	asrs	r3, r1, #31
 80228a2:	4610      	mov	r0, r2
 80228a4:	4619      	mov	r1, r3
 80228a6:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 80228aa:	4603      	mov	r3, r0
 80228ac:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80228ae:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80228b2:	681a      	ldr	r2, [r3, #0]
 80228b4:	4b1c      	ldr	r3, [pc, #112]	; (8022928 <arm_softmax_s8+0xd68>)
 80228b6:	429a      	cmp	r2, r3
 80228b8:	d10a      	bne.n	80228d0 <arm_softmax_s8+0xd10>
 80228ba:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80228be:	681b      	ldr	r3, [r3, #0]
 80228c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80228c4:	d104      	bne.n	80228d0 <arm_softmax_s8+0xd10>
        result = Q31_MAX;
 80228c6:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 80228ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80228ce:	6013      	str	r3, [r2, #0]
    return result;
 80228d0:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80228d4:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 80228d6:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80228da:	ea02 0103 	and.w	r1, r2, r3
 80228de:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80228e2:	43da      	mvns	r2, r3
 80228e4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80228e8:	4013      	ands	r3, r2
 80228ea:	404b      	eors	r3, r1
 80228ec:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(39332535)
 80228f0:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 80228f4:	1c53      	adds	r3, r2, #1
 80228f6:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 80228fa:	2301      	movs	r3, #1
 80228fc:	fa03 f202 	lsl.w	r2, r3, r2
 8022900:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8022904:	4013      	ands	r3, r2
 8022906:	2b00      	cmp	r3, #0
 8022908:	d014      	beq.n	8022934 <arm_softmax_s8+0xd74>
 802290a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802290e:	e012      	b.n	8022936 <arm_softmax_s8+0xd76>
 8022910:	2f16ac6c 	.word	0x2f16ac6c
 8022914:	00000000 	.word	0x00000000
 8022918:	1152aaa4 	.word	0x1152aaa4
 802291c:	00000000 	.word	0x00000000
 8022920:	4da2cbf2 	.word	0x4da2cbf2
 8022924:	2f16ac6c 	.word	0x2f16ac6c
 8022928:	1152aaa4 	.word	0x1152aaa4
 802292c:	4da2cbf2 	.word	0x4da2cbf2
 8022930:	00000000 	.word	0x00000000
 8022934:	2300      	movs	r3, #0
 8022936:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 802293a:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 802293e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022942:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022944:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8022948:	2300      	movs	r3, #0
 802294a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802294c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022950:	f04f 0300 	mov.w	r3, #0
 8022954:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8022958:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802295c:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8022960:	681b      	ldr	r3, [r3, #0]
 8022962:	0fdb      	lsrs	r3, r3, #31
 8022964:	b2da      	uxtb	r2, r3
 8022966:	2300      	movs	r3, #0
 8022968:	4053      	eors	r3, r2
 802296a:	b2db      	uxtb	r3, r3
 802296c:	2b00      	cmp	r3, #0
 802296e:	d014      	beq.n	802299a <arm_softmax_s8+0xdda>
        mult = 1 - mult;
 8022970:	f04f 0001 	mov.w	r0, #1
 8022974:	f04f 0100 	mov.w	r1, #0
 8022978:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 802297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022980:	1a84      	subs	r4, r0, r2
 8022982:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 8022986:	eb61 0303 	sbc.w	r3, r1, r3
 802298a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 802298e:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 8022992:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8022996:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802299a:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 802299e:	681b      	ldr	r3, [r3, #0]
 80229a0:	4618      	mov	r0, r3
 80229a2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80229a6:	a3d8      	add	r3, pc, #864	; (adr r3, 8022d08 <arm_softmax_s8+0x1148>)
 80229a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229ac:	fb02 f501 	mul.w	r5, r2, r1
 80229b0:	fb00 f403 	mul.w	r4, r0, r3
 80229b4:	442c      	add	r4, r5
 80229b6:	fba0 0102 	umull	r0, r1, r0, r2
 80229ba:	1863      	adds	r3, r4, r1
 80229bc:	4619      	mov	r1, r3
 80229be:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80229c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229c6:	1814      	adds	r4, r2, r0
 80229c8:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80229cc:	414b      	adcs	r3, r1
 80229ce:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80229d2:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80229d6:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 80229da:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80229de:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80229e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229e6:	4610      	mov	r0, r2
 80229e8:	4619      	mov	r1, r3
 80229ea:	2800      	cmp	r0, #0
 80229ec:	f171 0300 	sbcs.w	r3, r1, #0
 80229f0:	da06      	bge.n	8022a00 <arm_softmax_s8+0xe40>
 80229f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80229f6:	f04f 0300 	mov.w	r3, #0
 80229fa:	1880      	adds	r0, r0, r2
 80229fc:	eb43 0101 	adc.w	r1, r3, r1
 8022a00:	f04f 0200 	mov.w	r2, #0
 8022a04:	f04f 0300 	mov.w	r3, #0
 8022a08:	0fc2      	lsrs	r2, r0, #31
 8022a0a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022a0e:	17cb      	asrs	r3, r1, #31
 8022a10:	4610      	mov	r0, r2
 8022a12:	4619      	mov	r1, r3
 8022a14:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8022a18:	4603      	mov	r3, r0
 8022a1a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022a1c:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8022a20:	681a      	ldr	r2, [r3, #0]
 8022a22:	4bb7      	ldr	r3, [pc, #732]	; (8022d00 <arm_softmax_s8+0x1140>)
 8022a24:	429a      	cmp	r2, r3
 8022a26:	d10a      	bne.n	8022a3e <arm_softmax_s8+0xe7e>
 8022a28:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8022a2c:	681b      	ldr	r3, [r3, #0]
 8022a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022a32:	d104      	bne.n	8022a3e <arm_softmax_s8+0xe7e>
        result = Q31_MAX;
 8022a34:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8022a38:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022a3c:	6013      	str	r3, [r2, #0]
    return result;
 8022a3e:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8022a42:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8022a44:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022a48:	ea02 0103 	and.w	r1, r2, r3
 8022a4c:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022a50:	43da      	mvns	r2, r3
 8022a52:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022a56:	4013      	ands	r3, r2
 8022a58:	404b      	eors	r3, r1
 8022a5a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(720401)
 8022a5e:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8022a62:	1c53      	adds	r3, r2, #1
 8022a64:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8022a68:	2301      	movs	r3, #1
 8022a6a:	fa03 f202 	lsl.w	r2, r3, r2
 8022a6e:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8022a72:	4013      	ands	r3, r2
 8022a74:	2b00      	cmp	r3, #0
 8022a76:	d002      	beq.n	8022a7e <arm_softmax_s8+0xebe>
 8022a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022a7c:	e000      	b.n	8022a80 <arm_softmax_s8+0xec0>
 8022a7e:	2300      	movs	r3, #0
 8022a80:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8022a84:	f207 42bc 	addw	r2, r7, #1212	; 0x4bc
 8022a88:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022a8c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022a8e:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8022a92:	2300      	movs	r3, #0
 8022a94:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022a96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022a9a:	f04f 0300 	mov.w	r3, #0
 8022a9e:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8022aa2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022aa6:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8022aaa:	681b      	ldr	r3, [r3, #0]
 8022aac:	0fdb      	lsrs	r3, r3, #31
 8022aae:	b2da      	uxtb	r2, r3
 8022ab0:	2300      	movs	r3, #0
 8022ab2:	4053      	eors	r3, r2
 8022ab4:	b2db      	uxtb	r3, r3
 8022ab6:	2b00      	cmp	r3, #0
 8022ab8:	d014      	beq.n	8022ae4 <arm_softmax_s8+0xf24>
        mult = 1 - mult;
 8022aba:	f04f 0001 	mov.w	r0, #1
 8022abe:	f04f 0100 	mov.w	r1, #0
 8022ac2:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8022ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022aca:	1a84      	subs	r4, r0, r2
 8022acc:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 8022ad0:	eb61 0303 	sbc.w	r3, r1, r3
 8022ad4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8022ad8:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8022adc:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 8022ae0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022ae4:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8022ae8:	681b      	ldr	r3, [r3, #0]
 8022aea:	4618      	mov	r0, r3
 8022aec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022af0:	4a84      	ldr	r2, [pc, #528]	; (8022d04 <arm_softmax_s8+0x1144>)
 8022af2:	f04f 0300 	mov.w	r3, #0
 8022af6:	fb02 f501 	mul.w	r5, r2, r1
 8022afa:	fb00 f403 	mul.w	r4, r0, r3
 8022afe:	442c      	add	r4, r5
 8022b00:	fba0 0102 	umull	r0, r1, r0, r2
 8022b04:	1863      	adds	r3, r4, r1
 8022b06:	4619      	mov	r1, r3
 8022b08:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8022b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b10:	1814      	adds	r4, r2, r0
 8022b12:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8022b16:	414b      	adcs	r3, r1
 8022b18:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8022b1c:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8022b20:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 8022b24:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022b28:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8022b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b30:	4610      	mov	r0, r2
 8022b32:	4619      	mov	r1, r3
 8022b34:	2800      	cmp	r0, #0
 8022b36:	f171 0300 	sbcs.w	r3, r1, #0
 8022b3a:	da06      	bge.n	8022b4a <arm_softmax_s8+0xf8a>
 8022b3c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022b40:	f04f 0300 	mov.w	r3, #0
 8022b44:	1880      	adds	r0, r0, r2
 8022b46:	eb43 0101 	adc.w	r1, r3, r1
 8022b4a:	f04f 0200 	mov.w	r2, #0
 8022b4e:	f04f 0300 	mov.w	r3, #0
 8022b52:	0fc2      	lsrs	r2, r0, #31
 8022b54:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022b58:	17cb      	asrs	r3, r1, #31
 8022b5a:	4610      	mov	r0, r2
 8022b5c:	4619      	mov	r1, r3
 8022b5e:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8022b62:	4603      	mov	r3, r0
 8022b64:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022b66:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8022b6a:	681a      	ldr	r2, [r3, #0]
 8022b6c:	4b65      	ldr	r3, [pc, #404]	; (8022d04 <arm_softmax_s8+0x1144>)
 8022b6e:	429a      	cmp	r2, r3
 8022b70:	d10a      	bne.n	8022b88 <arm_softmax_s8+0xfc8>
 8022b72:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8022b76:	681b      	ldr	r3, [r3, #0]
 8022b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022b7c:	d104      	bne.n	8022b88 <arm_softmax_s8+0xfc8>
        result = Q31_MAX;
 8022b7e:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8022b82:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022b86:	6013      	str	r3, [r2, #0]
    return result;
 8022b88:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8022b8c:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8022b8e:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022b92:	ea02 0103 	and.w	r1, r2, r3
 8022b96:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022b9a:	43da      	mvns	r2, r3
 8022b9c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022ba0:	4013      	ands	r3, r2
 8022ba2:	404b      	eors	r3, r1
 8022ba4:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(242)
 8022ba8:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8022bac:	1c53      	adds	r3, r2, #1
 8022bae:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8022bb2:	2301      	movs	r3, #1
 8022bb4:	fa03 f202 	lsl.w	r2, r3, r2
 8022bb8:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8022bbc:	4013      	ands	r3, r2
 8022bbe:	2b00      	cmp	r3, #0
 8022bc0:	d002      	beq.n	8022bc8 <arm_softmax_s8+0x1008>
 8022bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022bc6:	e000      	b.n	8022bca <arm_softmax_s8+0x100a>
 8022bc8:	2300      	movs	r3, #0
 8022bca:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8022bce:	f207 42ac 	addw	r2, r7, #1196	; 0x4ac
 8022bd2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022bd6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022bd8:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8022bdc:	2300      	movs	r3, #0
 8022bde:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022be0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022be4:	f04f 0300 	mov.w	r3, #0
 8022be8:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8022bec:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022bf0:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8022bf4:	681b      	ldr	r3, [r3, #0]
 8022bf6:	0fdb      	lsrs	r3, r3, #31
 8022bf8:	b2da      	uxtb	r2, r3
 8022bfa:	2300      	movs	r3, #0
 8022bfc:	4053      	eors	r3, r2
 8022bfe:	b2db      	uxtb	r3, r3
 8022c00:	2b00      	cmp	r3, #0
 8022c02:	d014      	beq.n	8022c2e <arm_softmax_s8+0x106e>
        mult = 1 - mult;
 8022c04:	f04f 0001 	mov.w	r0, #1
 8022c08:	f04f 0100 	mov.w	r1, #0
 8022c0c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8022c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c14:	1a84      	subs	r4, r0, r2
 8022c16:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 8022c1a:	eb61 0303 	sbc.w	r3, r1, r3
 8022c1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8022c22:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 8022c26:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8022c2a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022c2e:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8022c32:	681b      	ldr	r3, [r3, #0]
 8022c34:	4618      	mov	r0, r3
 8022c36:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022c3a:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 8022c3e:	f04f 0300 	mov.w	r3, #0
 8022c42:	fb02 f501 	mul.w	r5, r2, r1
 8022c46:	fb00 f403 	mul.w	r4, r0, r3
 8022c4a:	442c      	add	r4, r5
 8022c4c:	fba0 0102 	umull	r0, r1, r0, r2
 8022c50:	1863      	adds	r3, r4, r1
 8022c52:	4619      	mov	r1, r3
 8022c54:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8022c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c5c:	1814      	adds	r4, r2, r0
 8022c5e:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 8022c62:	414b      	adcs	r3, r1
 8022c64:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8022c68:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 8022c6c:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8022c70:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022c74:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8022c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c7c:	4610      	mov	r0, r2
 8022c7e:	4619      	mov	r1, r3
 8022c80:	2800      	cmp	r0, #0
 8022c82:	f171 0300 	sbcs.w	r3, r1, #0
 8022c86:	da06      	bge.n	8022c96 <arm_softmax_s8+0x10d6>
 8022c88:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022c8c:	f04f 0300 	mov.w	r3, #0
 8022c90:	1880      	adds	r0, r0, r2
 8022c92:	eb43 0101 	adc.w	r1, r3, r1
 8022c96:	f04f 0200 	mov.w	r2, #0
 8022c9a:	f04f 0300 	mov.w	r3, #0
 8022c9e:	0fc2      	lsrs	r2, r0, #31
 8022ca0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022ca4:	17cb      	asrs	r3, r1, #31
 8022ca6:	4610      	mov	r0, r2
 8022ca8:	4619      	mov	r1, r3
 8022caa:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8022cae:	4603      	mov	r3, r0
 8022cb0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022cb2:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8022cb6:	681b      	ldr	r3, [r3, #0]
 8022cb8:	2bf2      	cmp	r3, #242	; 0xf2
 8022cba:	d10a      	bne.n	8022cd2 <arm_softmax_s8+0x1112>
 8022cbc:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8022cc0:	681b      	ldr	r3, [r3, #0]
 8022cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022cc6:	d104      	bne.n	8022cd2 <arm_softmax_s8+0x1112>
        result = Q31_MAX;
 8022cc8:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8022ccc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022cd0:	6013      	str	r3, [r2, #0]
    return result;
 8022cd2:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8022cd6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8022cd8:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022cdc:	ea02 0103 	and.w	r1, r2, r3
 8022ce0:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022ce4:	43da      	mvns	r2, r3
 8022ce6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022cea:	4013      	ands	r3, r2
 8022cec:	404b      	eors	r3, r1
 8022cee:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    mask = MASK_IF_ZERO(val);
 8022cf2:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8022cf6:	2b00      	cmp	r3, #0
 8022cf8:	d10a      	bne.n	8022d10 <arm_softmax_s8+0x1150>
 8022cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022cfe:	e008      	b.n	8022d12 <arm_softmax_s8+0x1152>
 8022d00:	02582ab7 	.word	0x02582ab7
 8022d04:	000afe11 	.word	0x000afe11
 8022d08:	02582ab7 	.word	0x02582ab7
 8022d0c:	00000000 	.word	0x00000000
 8022d10:	2300      	movs	r3, #0
 8022d12:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8022d16:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022d1a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8022d1e:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022d22:	43da      	mvns	r2, r3
 8022d24:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022d28:	4013      	ands	r3, r2
 8022d2a:	404b      	eors	r3, r1
 8022d2c:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
    q31_t result = 0;
 8022d30:	2300      	movs	r3, #0
 8022d32:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    const q31_t remainder_mask = (1 << exponent) - 1;
 8022d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022d3a:	3b01      	subs	r3, #1
 8022d3c:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
    int32_t remainder = remainder_mask & dividend;
 8022d40:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8022d44:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8022d48:	4013      	ands	r3, r2
 8022d4a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    result = dividend >> exponent;
 8022d4e:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 8022d52:	131b      	asrs	r3, r3, #12
 8022d54:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    q31_t threshold = remainder_mask >> 1;
 8022d58:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8022d5c:	105b      	asrs	r3, r3, #1
 8022d5e:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
    if (result < 0)
 8022d62:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 8022d66:	2b00      	cmp	r3, #0
 8022d68:	da04      	bge.n	8022d74 <arm_softmax_s8+0x11b4>
        threshold++;
 8022d6a:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8022d6e:	3301      	adds	r3, #1
 8022d70:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
    if (remainder > threshold)
 8022d74:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8022d78:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8022d7c:	429a      	cmp	r2, r3
 8022d7e:	dd04      	ble.n	8022d8a <arm_softmax_s8+0x11ca>
        result++;
 8022d80:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 8022d84:	3301      	adds	r3, #1
 8022d86:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    return result;
 8022d8a:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8022d8e:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8022d92:	4413      	add	r3, r2
 8022d94:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
        for (col = 0; col < row_size; ++col)
 8022d98:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8022d9c:	3301      	adds	r3, #1
 8022d9e:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8022da2:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8022da6:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8022daa:	681b      	ldr	r3, [r3, #0]
 8022dac:	429a      	cmp	r2, r3
 8022dae:	f6fe af57 	blt.w	8021c60 <arm_softmax_s8+0xa0>
            }
        }

        const int32_t headroom = __CLZ(sum);
 8022db2:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 8022db6:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8022dba:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 8022dbc:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8022dc0:	681b      	ldr	r3, [r3, #0]
 8022dc2:	2b00      	cmp	r3, #0
 8022dc4:	d101      	bne.n	8022dca <arm_softmax_s8+0x120a>
    return 32U;
 8022dc6:	2320      	movs	r3, #32
 8022dc8:	e005      	b.n	8022dd6 <arm_softmax_s8+0x1216>
  return __builtin_clz(value);
 8022dca:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8022dce:	681b      	ldr	r3, [r3, #0]
 8022dd0:	fab3 f383 	clz	r3, r3
 8022dd4:	b2db      	uxtb	r3, r3
 8022dd6:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8022dda:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 8022dde:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8022de2:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
        const int32_t shifted_scale = ONE_OVER1((sum > 0 ? sum << headroom : 0) - (1 << 31));
 8022de6:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8022dea:	2b00      	cmp	r3, #0
 8022dec:	dd08      	ble.n	8022e00 <arm_softmax_s8+0x1240>
 8022dee:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 8022df2:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 8022df6:	fa02 f303 	lsl.w	r3, r2, r3
 8022dfa:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8022dfe:	e001      	b.n	8022e04 <arm_softmax_s8+0x1244>
 8022e00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8022e04:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8022e08:	601a      	str	r2, [r3, #0]
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 8022e0a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8022e0e:	681b      	ldr	r3, [r3, #0]
 8022e10:	4618      	mov	r0, r3
 8022e12:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022e16:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022e1a:	f04f 0300 	mov.w	r3, #0
 8022e1e:	1884      	adds	r4, r0, r2
 8022e20:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8022e24:	eb41 0303 	adc.w	r3, r1, r3
 8022e28:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8022e2c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8022e30:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8022e34:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8022e38:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8022e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e40:	2a00      	cmp	r2, #0
 8022e42:	f173 0300 	sbcs.w	r3, r3, #0
 8022e46:	db04      	blt.n	8022e52 <arm_softmax_s8+0x1292>
 8022e48:	f04f 0001 	mov.w	r0, #1
 8022e4c:	f04f 0100 	mov.w	r1, #0
 8022e50:	e003      	b.n	8022e5a <arm_softmax_s8+0x129a>
 8022e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022e56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022e5a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8022e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e62:	eb10 0a02 	adds.w	sl, r0, r2
 8022e66:	eb41 0b03 	adc.w	fp, r1, r3
 8022e6a:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8022e6e:	461a      	mov	r2, r3
 8022e70:	f04f 0300 	mov.w	r3, #0
 8022e74:	eb12 080a 	adds.w	r8, r2, sl
 8022e78:	eb43 090b 	adc.w	r9, r3, fp
 8022e7c:	f04f 0200 	mov.w	r2, #0
 8022e80:	f04f 0300 	mov.w	r3, #0
 8022e84:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8022e88:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 8022e8c:	ea4f 0369 	mov.w	r3, r9, asr #1
 8022e90:	4610      	mov	r0, r2
 8022e92:	4619      	mov	r1, r3
 8022e94:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8022e98:	4603      	mov	r3, r0
 8022e9a:	6013      	str	r3, [r2, #0]
 8022e9c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8022ea0:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8022ea4:	681b      	ldr	r3, [r3, #0]
 8022ea6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022ea8:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8022eac:	2300      	movs	r3, #0
 8022eae:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022eb4:	f04f 0300 	mov.w	r3, #0
 8022eb8:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8022ebc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022ec0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8022ec4:	681b      	ldr	r3, [r3, #0]
 8022ec6:	0fdb      	lsrs	r3, r3, #31
 8022ec8:	b2da      	uxtb	r2, r3
 8022eca:	2301      	movs	r3, #1
 8022ecc:	4053      	eors	r3, r2
 8022ece:	b2db      	uxtb	r3, r3
 8022ed0:	2b00      	cmp	r3, #0
 8022ed2:	d014      	beq.n	8022efe <arm_softmax_s8+0x133e>
        mult = 1 - mult;
 8022ed4:	f04f 0001 	mov.w	r0, #1
 8022ed8:	f04f 0100 	mov.w	r1, #0
 8022edc:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8022ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ee4:	1a84      	subs	r4, r0, r2
 8022ee6:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 8022eea:	eb61 0303 	sbc.w	r3, r1, r3
 8022eee:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8022ef2:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8022ef6:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8022efa:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022efe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8022f02:	681b      	ldr	r3, [r3, #0]
 8022f04:	4618      	mov	r0, r3
 8022f06:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022f0a:	f60f 2354 	addw	r3, pc, #2644	; 0xa54
 8022f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f12:	fb02 f501 	mul.w	r5, r2, r1
 8022f16:	fb00 f403 	mul.w	r4, r0, r3
 8022f1a:	442c      	add	r4, r5
 8022f1c:	fba0 0102 	umull	r0, r1, r0, r2
 8022f20:	1863      	adds	r3, r4, r1
 8022f22:	4619      	mov	r1, r3
 8022f24:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8022f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f2c:	1814      	adds	r4, r2, r0
 8022f2e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8022f32:	414b      	adcs	r3, r1
 8022f34:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8022f38:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8022f3c:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8022f40:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022f44:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8022f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f4c:	4610      	mov	r0, r2
 8022f4e:	4619      	mov	r1, r3
 8022f50:	2800      	cmp	r0, #0
 8022f52:	f171 0300 	sbcs.w	r3, r1, #0
 8022f56:	da06      	bge.n	8022f66 <arm_softmax_s8+0x13a6>
 8022f58:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022f5c:	f04f 0300 	mov.w	r3, #0
 8022f60:	1880      	adds	r0, r0, r2
 8022f62:	eb43 0101 	adc.w	r1, r3, r1
 8022f66:	f04f 0200 	mov.w	r2, #0
 8022f6a:	f04f 0300 	mov.w	r3, #0
 8022f6e:	0fc2      	lsrs	r2, r0, #31
 8022f70:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022f74:	17cb      	asrs	r3, r1, #31
 8022f76:	4610      	mov	r0, r2
 8022f78:	4619      	mov	r1, r3
 8022f7a:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8022f7e:	4603      	mov	r3, r0
 8022f80:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022f82:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8022f86:	681b      	ldr	r3, [r3, #0]
 8022f88:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 8022f8c:	d10a      	bne.n	8022fa4 <arm_softmax_s8+0x13e4>
 8022f8e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8022f92:	681b      	ldr	r3, [r3, #0]
 8022f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022f98:	d104      	bne.n	8022fa4 <arm_softmax_s8+0x13e4>
        result = Q31_MAX;
 8022f9a:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8022f9e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022fa2:	6013      	str	r3, [r2, #0]
    return result;
 8022fa4:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8022fa8:	681b      	ldr	r3, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8022faa:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8022fae:	f103 335a 	add.w	r3, r3, #1515870810	; 0x5a5a5a5a
 8022fb2:	6013      	str	r3, [r2, #0]
    const int32_t shift = (1 << 29);
 8022fb4:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8022fb8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8022fbc:	6013      	str	r3, [r2, #0]
 8022fbe:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8022fc2:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8022fc6:	681b      	ldr	r3, [r3, #0]
 8022fc8:	6013      	str	r3, [r2, #0]
 8022fca:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8022fce:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8022fd2:	681b      	ldr	r3, [r3, #0]
 8022fd4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022fd6:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8022fda:	2300      	movs	r3, #0
 8022fdc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022fe2:	f04f 0300 	mov.w	r3, #0
 8022fe6:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8022fea:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022fee:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8022ff2:	681b      	ldr	r3, [r3, #0]
 8022ff4:	0fdb      	lsrs	r3, r3, #31
 8022ff6:	b2da      	uxtb	r2, r3
 8022ff8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8022ffc:	681b      	ldr	r3, [r3, #0]
 8022ffe:	0fdb      	lsrs	r3, r3, #31
 8023000:	b2db      	uxtb	r3, r3
 8023002:	4053      	eors	r3, r2
 8023004:	b2db      	uxtb	r3, r3
 8023006:	2b00      	cmp	r3, #0
 8023008:	d014      	beq.n	8023034 <arm_softmax_s8+0x1474>
        mult = 1 - mult;
 802300a:	f04f 0001 	mov.w	r0, #1
 802300e:	f04f 0100 	mov.w	r1, #0
 8023012:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8023016:	e9d3 2300 	ldrd	r2, r3, [r3]
 802301a:	1a84      	subs	r4, r0, r2
 802301c:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8023020:	eb61 0303 	sbc.w	r3, r1, r3
 8023024:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8023028:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 802302c:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8023030:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023034:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8023038:	681b      	ldr	r3, [r3, #0]
 802303a:	4618      	mov	r0, r3
 802303c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023040:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023044:	681b      	ldr	r3, [r3, #0]
 8023046:	461a      	mov	r2, r3
 8023048:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802304c:	fb02 f501 	mul.w	r5, r2, r1
 8023050:	fb00 f403 	mul.w	r4, r0, r3
 8023054:	442c      	add	r4, r5
 8023056:	fba0 0102 	umull	r0, r1, r0, r2
 802305a:	1863      	adds	r3, r4, r1
 802305c:	4619      	mov	r1, r3
 802305e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8023062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023066:	1814      	adds	r4, r2, r0
 8023068:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 802306c:	414b      	adcs	r3, r1
 802306e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8023072:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8023076:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 802307a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802307e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8023082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023086:	4610      	mov	r0, r2
 8023088:	4619      	mov	r1, r3
 802308a:	2800      	cmp	r0, #0
 802308c:	f171 0300 	sbcs.w	r3, r1, #0
 8023090:	da06      	bge.n	80230a0 <arm_softmax_s8+0x14e0>
 8023092:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023096:	f04f 0300 	mov.w	r3, #0
 802309a:	1880      	adds	r0, r0, r2
 802309c:	eb43 0101 	adc.w	r1, r3, r1
 80230a0:	f04f 0200 	mov.w	r2, #0
 80230a4:	f04f 0300 	mov.w	r3, #0
 80230a8:	0fc2      	lsrs	r2, r0, #31
 80230aa:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80230ae:	17cb      	asrs	r3, r1, #31
 80230b0:	4610      	mov	r0, r2
 80230b2:	4619      	mov	r1, r3
 80230b4:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 80230b8:	4603      	mov	r3, r0
 80230ba:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80230bc:	f207 4254 	addw	r2, r7, #1108	; 0x454
 80230c0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80230c4:	6812      	ldr	r2, [r2, #0]
 80230c6:	681b      	ldr	r3, [r3, #0]
 80230c8:	429a      	cmp	r2, r3
 80230ca:	d10a      	bne.n	80230e2 <arm_softmax_s8+0x1522>
 80230cc:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80230d0:	681b      	ldr	r3, [r3, #0]
 80230d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80230d6:	d104      	bne.n	80230e2 <arm_softmax_s8+0x1522>
        result = Q31_MAX;
 80230d8:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 80230dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80230e0:	6013      	str	r3, [r2, #0]
    return result;
 80230e2:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80230e6:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80230e8:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80230ec:	681b      	ldr	r3, [r3, #0]
 80230ee:	1a99      	subs	r1, r3, r2
 80230f0:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80230f4:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80230f8:	681b      	ldr	r3, [r3, #0]
 80230fa:	6013      	str	r3, [r2, #0]
 80230fc:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8023100:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8023102:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8023106:	2300      	movs	r3, #0
 8023108:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802310a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802310e:	f04f 0300 	mov.w	r3, #0
 8023112:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8023116:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802311a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 802311e:	681b      	ldr	r3, [r3, #0]
 8023120:	0fdb      	lsrs	r3, r3, #31
 8023122:	b2da      	uxtb	r2, r3
 8023124:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8023128:	681b      	ldr	r3, [r3, #0]
 802312a:	0fdb      	lsrs	r3, r3, #31
 802312c:	b2db      	uxtb	r3, r3
 802312e:	4053      	eors	r3, r2
 8023130:	b2db      	uxtb	r3, r3
 8023132:	2b00      	cmp	r3, #0
 8023134:	d014      	beq.n	8023160 <arm_softmax_s8+0x15a0>
        mult = 1 - mult;
 8023136:	f04f 0001 	mov.w	r0, #1
 802313a:	f04f 0100 	mov.w	r1, #0
 802313e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8023142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023146:	1a84      	subs	r4, r0, r2
 8023148:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 802314c:	eb61 0303 	sbc.w	r3, r1, r3
 8023150:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8023154:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8023158:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 802315c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023160:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8023164:	681b      	ldr	r3, [r3, #0]
 8023166:	4618      	mov	r0, r3
 8023168:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802316c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8023170:	681b      	ldr	r3, [r3, #0]
 8023172:	461a      	mov	r2, r3
 8023174:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023178:	fb02 f501 	mul.w	r5, r2, r1
 802317c:	fb00 f403 	mul.w	r4, r0, r3
 8023180:	442c      	add	r4, r5
 8023182:	fba0 0102 	umull	r0, r1, r0, r2
 8023186:	1863      	adds	r3, r4, r1
 8023188:	4619      	mov	r1, r3
 802318a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023192:	1814      	adds	r4, r2, r0
 8023194:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8023198:	414b      	adcs	r3, r1
 802319a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 802319e:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80231a2:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80231a6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80231aa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80231ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231b2:	4610      	mov	r0, r2
 80231b4:	4619      	mov	r1, r3
 80231b6:	2800      	cmp	r0, #0
 80231b8:	f171 0300 	sbcs.w	r3, r1, #0
 80231bc:	da06      	bge.n	80231cc <arm_softmax_s8+0x160c>
 80231be:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80231c2:	f04f 0300 	mov.w	r3, #0
 80231c6:	1880      	adds	r0, r0, r2
 80231c8:	eb43 0101 	adc.w	r1, r3, r1
 80231cc:	f04f 0200 	mov.w	r2, #0
 80231d0:	f04f 0300 	mov.w	r3, #0
 80231d4:	0fc2      	lsrs	r2, r0, #31
 80231d6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80231da:	17cb      	asrs	r3, r1, #31
 80231dc:	4610      	mov	r0, r2
 80231de:	4619      	mov	r1, r3
 80231e0:	f207 4234 	addw	r2, r7, #1076	; 0x434
 80231e4:	4603      	mov	r3, r0
 80231e6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80231e8:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80231ec:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80231f0:	6812      	ldr	r2, [r2, #0]
 80231f2:	681b      	ldr	r3, [r3, #0]
 80231f4:	429a      	cmp	r2, r3
 80231f6:	d10a      	bne.n	802320e <arm_softmax_s8+0x164e>
 80231f8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80231fc:	681b      	ldr	r3, [r3, #0]
 80231fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023202:	d104      	bne.n	802320e <arm_softmax_s8+0x164e>
        result = Q31_MAX;
 8023204:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8023208:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802320c:	6013      	str	r3, [r2, #0]
    return result;
 802320e:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8023212:	681a      	ldr	r2, [r3, #0]
 8023214:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8023218:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 802321a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 802321e:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8023222:	3b01      	subs	r3, #1
 8023224:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8023226:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 802322a:	f207 4324 	addw	r3, r7, #1060	; 0x424
 802322e:	681b      	ldr	r3, [r3, #0]
 8023230:	009b      	lsls	r3, r3, #2
 8023232:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8023234:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8023238:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 802323c:	6812      	ldr	r2, [r2, #0]
 802323e:	681b      	ldr	r3, [r3, #0]
 8023240:	429a      	cmp	r2, r3
 8023242:	dd02      	ble.n	802324a <arm_softmax_s8+0x168a>
 8023244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023248:	e000      	b.n	802324c <arm_softmax_s8+0x168c>
 802324a:	2100      	movs	r1, #0
 802324c:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8023250:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8023254:	6812      	ldr	r2, [r2, #0]
 8023256:	681b      	ldr	r3, [r3, #0]
 8023258:	429a      	cmp	r2, r3
 802325a:	dd01      	ble.n	8023260 <arm_softmax_s8+0x16a0>
 802325c:	2200      	movs	r2, #0
 802325e:	e001      	b.n	8023264 <arm_softmax_s8+0x16a4>
 8023260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023264:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8023268:	681b      	ldr	r3, [r3, #0]
 802326a:	4013      	ands	r3, r2
 802326c:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8023270:	404b      	eors	r3, r1
 8023272:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8023274:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8023278:	681b      	ldr	r3, [r3, #0]
 802327a:	425a      	negs	r2, r3
 802327c:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8023280:	681b      	ldr	r3, [r3, #0]
 8023282:	4293      	cmp	r3, r2
 8023284:	da02      	bge.n	802328c <arm_softmax_s8+0x16cc>
 8023286:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802328a:	e000      	b.n	802328e <arm_softmax_s8+0x16ce>
 802328c:	2100      	movs	r1, #0
 802328e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8023292:	681b      	ldr	r3, [r3, #0]
 8023294:	425a      	negs	r2, r3
 8023296:	f207 4324 	addw	r3, r7, #1060	; 0x424
 802329a:	681b      	ldr	r3, [r3, #0]
 802329c:	4293      	cmp	r3, r2
 802329e:	da01      	bge.n	80232a4 <arm_softmax_s8+0x16e4>
 80232a0:	2200      	movs	r2, #0
 80232a2:	e001      	b.n	80232a8 <arm_softmax_s8+0x16e8>
 80232a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80232a8:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80232ac:	681b      	ldr	r3, [r3, #0]
 80232ae:	4013      	ands	r3, r2
 80232b0:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 80232b4:	404b      	eors	r3, r1
 80232b6:	6013      	str	r3, [r2, #0]
    return result;
 80232b8:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80232bc:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80232be:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 80232c2:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80232c6:	681b      	ldr	r3, [r3, #0]
 80232c8:	440b      	add	r3, r1
 80232ca:	6013      	str	r3, [r2, #0]
 80232cc:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 80232d0:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80232d4:	681b      	ldr	r3, [r3, #0]
 80232d6:	6013      	str	r3, [r2, #0]
 80232d8:	f207 4214 	addw	r2, r7, #1044	; 0x414
 80232dc:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80232e0:	681b      	ldr	r3, [r3, #0]
 80232e2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80232e4:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80232e8:	2300      	movs	r3, #0
 80232ea:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80232ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80232f0:	f04f 0300 	mov.w	r3, #0
 80232f4:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80232f8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80232fc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8023300:	681b      	ldr	r3, [r3, #0]
 8023302:	0fdb      	lsrs	r3, r3, #31
 8023304:	b2da      	uxtb	r2, r3
 8023306:	f207 4314 	addw	r3, r7, #1044	; 0x414
 802330a:	681b      	ldr	r3, [r3, #0]
 802330c:	0fdb      	lsrs	r3, r3, #31
 802330e:	b2db      	uxtb	r3, r3
 8023310:	4053      	eors	r3, r2
 8023312:	b2db      	uxtb	r3, r3
 8023314:	2b00      	cmp	r3, #0
 8023316:	d014      	beq.n	8023342 <arm_softmax_s8+0x1782>
        mult = 1 - mult;
 8023318:	f04f 0001 	mov.w	r0, #1
 802331c:	f04f 0100 	mov.w	r1, #0
 8023320:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8023324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023328:	1a84      	subs	r4, r0, r2
 802332a:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 802332e:	eb61 0303 	sbc.w	r3, r1, r3
 8023332:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8023336:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 802333a:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 802333e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023342:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8023346:	681b      	ldr	r3, [r3, #0]
 8023348:	4618      	mov	r0, r3
 802334a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802334e:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8023352:	681b      	ldr	r3, [r3, #0]
 8023354:	461a      	mov	r2, r3
 8023356:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802335a:	fb02 f501 	mul.w	r5, r2, r1
 802335e:	fb00 f403 	mul.w	r4, r0, r3
 8023362:	442c      	add	r4, r5
 8023364:	fba0 0102 	umull	r0, r1, r0, r2
 8023368:	1863      	adds	r3, r4, r1
 802336a:	4619      	mov	r1, r3
 802336c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8023370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023374:	1814      	adds	r4, r2, r0
 8023376:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 802337a:	414b      	adcs	r3, r1
 802337c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8023380:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8023384:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8023388:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802338c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8023390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023394:	4610      	mov	r0, r2
 8023396:	4619      	mov	r1, r3
 8023398:	2800      	cmp	r0, #0
 802339a:	f171 0300 	sbcs.w	r3, r1, #0
 802339e:	da06      	bge.n	80233ae <arm_softmax_s8+0x17ee>
 80233a0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80233a4:	f04f 0300 	mov.w	r3, #0
 80233a8:	1880      	adds	r0, r0, r2
 80233aa:	eb43 0101 	adc.w	r1, r3, r1
 80233ae:	f04f 0200 	mov.w	r2, #0
 80233b2:	f04f 0300 	mov.w	r3, #0
 80233b6:	0fc2      	lsrs	r2, r0, #31
 80233b8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80233bc:	17cb      	asrs	r3, r1, #31
 80233be:	4610      	mov	r0, r2
 80233c0:	4619      	mov	r1, r3
 80233c2:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80233c6:	4603      	mov	r3, r0
 80233c8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80233ca:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 80233ce:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80233d2:	6812      	ldr	r2, [r2, #0]
 80233d4:	681b      	ldr	r3, [r3, #0]
 80233d6:	429a      	cmp	r2, r3
 80233d8:	d10a      	bne.n	80233f0 <arm_softmax_s8+0x1830>
 80233da:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80233de:	681b      	ldr	r3, [r3, #0]
 80233e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80233e4:	d104      	bne.n	80233f0 <arm_softmax_s8+0x1830>
        result = Q31_MAX;
 80233e6:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80233ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80233ee:	6013      	str	r3, [r2, #0]
    return result;
 80233f0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80233f4:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80233f6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80233fa:	681b      	ldr	r3, [r3, #0]
 80233fc:	1a99      	subs	r1, r3, r2
 80233fe:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8023402:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8023406:	681b      	ldr	r3, [r3, #0]
 8023408:	6013      	str	r3, [r2, #0]
 802340a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 802340e:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8023410:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8023414:	2300      	movs	r3, #0
 8023416:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802341c:	f04f 0300 	mov.w	r3, #0
 8023420:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
    if ((m1 < 0) ^ (m2 < 0))
 8023424:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8023428:	681b      	ldr	r3, [r3, #0]
 802342a:	0fdb      	lsrs	r3, r3, #31
 802342c:	b2da      	uxtb	r2, r3
 802342e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8023432:	681b      	ldr	r3, [r3, #0]
 8023434:	0fdb      	lsrs	r3, r3, #31
 8023436:	b2db      	uxtb	r3, r3
 8023438:	4053      	eors	r3, r2
 802343a:	b2db      	uxtb	r3, r3
 802343c:	2b00      	cmp	r3, #0
 802343e:	d010      	beq.n	8023462 <arm_softmax_s8+0x18a2>
        mult = 1 - mult;
 8023440:	f04f 0001 	mov.w	r0, #1
 8023444:	f04f 0100 	mov.w	r1, #0
 8023448:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 802344c:	1a84      	subs	r4, r0, r2
 802344e:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8023452:	eb61 0303 	sbc.w	r3, r1, r3
 8023456:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 802345a:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 802345e:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
    mult = mult + (q63_t)m1 * m2;
 8023462:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8023466:	681b      	ldr	r3, [r3, #0]
 8023468:	4618      	mov	r0, r3
 802346a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802346e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8023472:	681b      	ldr	r3, [r3, #0]
 8023474:	461a      	mov	r2, r3
 8023476:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802347a:	fb02 f501 	mul.w	r5, r2, r1
 802347e:	fb00 f403 	mul.w	r4, r0, r3
 8023482:	442c      	add	r4, r5
 8023484:	fba0 0102 	umull	r0, r1, r0, r2
 8023488:	1863      	adds	r3, r4, r1
 802348a:	4619      	mov	r1, r3
 802348c:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8023490:	1814      	adds	r4, r2, r0
 8023492:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 8023496:	414b      	adcs	r3, r1
 8023498:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 802349c:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80234a0:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
    result = (int32_t)(mult / (1ll << 31));
 80234a4:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 80234a8:	4610      	mov	r0, r2
 80234aa:	4619      	mov	r1, r3
 80234ac:	2800      	cmp	r0, #0
 80234ae:	f171 0300 	sbcs.w	r3, r1, #0
 80234b2:	da06      	bge.n	80234c2 <arm_softmax_s8+0x1902>
 80234b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80234b8:	f04f 0300 	mov.w	r3, #0
 80234bc:	1880      	adds	r0, r0, r2
 80234be:	eb43 0101 	adc.w	r1, r3, r1
 80234c2:	f04f 0200 	mov.w	r2, #0
 80234c6:	f04f 0300 	mov.w	r3, #0
 80234ca:	0fc2      	lsrs	r2, r0, #31
 80234cc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80234d0:	17cb      	asrs	r3, r1, #31
 80234d2:	4610      	mov	r0, r2
 80234d4:	4619      	mov	r1, r3
 80234d6:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 80234da:	4603      	mov	r3, r0
 80234dc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80234de:	f207 4204 	addw	r2, r7, #1028	; 0x404
 80234e2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80234e6:	6812      	ldr	r2, [r2, #0]
 80234e8:	681b      	ldr	r3, [r3, #0]
 80234ea:	429a      	cmp	r2, r3
 80234ec:	d10a      	bne.n	8023504 <arm_softmax_s8+0x1944>
 80234ee:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80234f2:	681b      	ldr	r3, [r3, #0]
 80234f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80234f8:	d104      	bne.n	8023504 <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 80234fa:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 80234fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023502:	6013      	str	r3, [r2, #0]
    return result;
 8023504:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8023508:	681a      	ldr	r2, [r3, #0]
 802350a:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 802350e:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8023510:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8023514:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8023518:	3b01      	subs	r3, #1
 802351a:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 802351c:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8023520:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8023524:	681b      	ldr	r3, [r3, #0]
 8023526:	009b      	lsls	r3, r3, #2
 8023528:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 802352a:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 802352e:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8023532:	6812      	ldr	r2, [r2, #0]
 8023534:	681b      	ldr	r3, [r3, #0]
 8023536:	429a      	cmp	r2, r3
 8023538:	dd02      	ble.n	8023540 <arm_softmax_s8+0x1980>
 802353a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802353e:	e000      	b.n	8023542 <arm_softmax_s8+0x1982>
 8023540:	2100      	movs	r1, #0
 8023542:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8023546:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 802354a:	6812      	ldr	r2, [r2, #0]
 802354c:	681b      	ldr	r3, [r3, #0]
 802354e:	429a      	cmp	r2, r3
 8023550:	dd01      	ble.n	8023556 <arm_softmax_s8+0x1996>
 8023552:	2200      	movs	r2, #0
 8023554:	e001      	b.n	802355a <arm_softmax_s8+0x199a>
 8023556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802355a:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 802355e:	681b      	ldr	r3, [r3, #0]
 8023560:	4013      	ands	r3, r2
 8023562:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8023566:	404b      	eors	r3, r1
 8023568:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 802356a:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 802356e:	681b      	ldr	r3, [r3, #0]
 8023570:	425a      	negs	r2, r3
 8023572:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8023576:	681b      	ldr	r3, [r3, #0]
 8023578:	4293      	cmp	r3, r2
 802357a:	da02      	bge.n	8023582 <arm_softmax_s8+0x19c2>
 802357c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8023580:	e000      	b.n	8023584 <arm_softmax_s8+0x19c4>
 8023582:	2100      	movs	r1, #0
 8023584:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8023588:	681b      	ldr	r3, [r3, #0]
 802358a:	425a      	negs	r2, r3
 802358c:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8023590:	681b      	ldr	r3, [r3, #0]
 8023592:	4293      	cmp	r3, r2
 8023594:	da01      	bge.n	802359a <arm_softmax_s8+0x19da>
 8023596:	2200      	movs	r2, #0
 8023598:	e001      	b.n	802359e <arm_softmax_s8+0x19de>
 802359a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802359e:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80235a2:	681b      	ldr	r3, [r3, #0]
 80235a4:	4013      	ands	r3, r2
 80235a6:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 80235aa:	404b      	eors	r3, r1
 80235ac:	6013      	str	r3, [r2, #0]
    return result;
 80235ae:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80235b2:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80235b4:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 80235b8:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80235bc:	681b      	ldr	r3, [r3, #0]
 80235be:	440b      	add	r3, r1
 80235c0:	6013      	str	r3, [r2, #0]
 80235c2:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80235c6:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80235ca:	681b      	ldr	r3, [r3, #0]
 80235cc:	6013      	str	r3, [r2, #0]
 80235ce:	f507 7277 	add.w	r2, r7, #988	; 0x3dc
 80235d2:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80235d6:	681b      	ldr	r3, [r3, #0]
 80235d8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80235da:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80235de:	2300      	movs	r3, #0
 80235e0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80235e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80235e6:	f04f 0300 	mov.w	r3, #0
 80235ea:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
    if ((m1 < 0) ^ (m2 < 0))
 80235ee:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80235f2:	681b      	ldr	r3, [r3, #0]
 80235f4:	0fdb      	lsrs	r3, r3, #31
 80235f6:	b2da      	uxtb	r2, r3
 80235f8:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80235fc:	681b      	ldr	r3, [r3, #0]
 80235fe:	0fdb      	lsrs	r3, r3, #31
 8023600:	b2db      	uxtb	r3, r3
 8023602:	4053      	eors	r3, r2
 8023604:	b2db      	uxtb	r3, r3
 8023606:	2b00      	cmp	r3, #0
 8023608:	d010      	beq.n	802362c <arm_softmax_s8+0x1a6c>
        mult = 1 - mult;
 802360a:	f04f 0001 	mov.w	r0, #1
 802360e:	f04f 0100 	mov.w	r1, #0
 8023612:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8023616:	1a84      	subs	r4, r0, r2
 8023618:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 802361c:	eb61 0303 	sbc.w	r3, r1, r3
 8023620:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8023624:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8023628:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
    mult = mult + (q63_t)m1 * m2;
 802362c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8023630:	681b      	ldr	r3, [r3, #0]
 8023632:	4618      	mov	r0, r3
 8023634:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023638:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 802363c:	681b      	ldr	r3, [r3, #0]
 802363e:	461a      	mov	r2, r3
 8023640:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023644:	fb02 f501 	mul.w	r5, r2, r1
 8023648:	fb00 f403 	mul.w	r4, r0, r3
 802364c:	442c      	add	r4, r5
 802364e:	fba0 0102 	umull	r0, r1, r0, r2
 8023652:	1863      	adds	r3, r4, r1
 8023654:	4619      	mov	r1, r3
 8023656:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 802365a:	1814      	adds	r4, r2, r0
 802365c:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8023660:	414b      	adcs	r3, r1
 8023662:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8023666:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 802366a:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
    result = (int32_t)(mult / (1ll << 31));
 802366e:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8023672:	4610      	mov	r0, r2
 8023674:	4619      	mov	r1, r3
 8023676:	2800      	cmp	r0, #0
 8023678:	f171 0300 	sbcs.w	r3, r1, #0
 802367c:	da06      	bge.n	802368c <arm_softmax_s8+0x1acc>
 802367e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023682:	f04f 0300 	mov.w	r3, #0
 8023686:	1880      	adds	r0, r0, r2
 8023688:	eb43 0101 	adc.w	r1, r3, r1
 802368c:	f04f 0200 	mov.w	r2, #0
 8023690:	f04f 0300 	mov.w	r3, #0
 8023694:	0fc2      	lsrs	r2, r0, #31
 8023696:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802369a:	17cb      	asrs	r3, r1, #31
 802369c:	4610      	mov	r0, r2
 802369e:	4619      	mov	r1, r3
 80236a0:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80236a4:	4603      	mov	r3, r0
 80236a6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80236a8:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80236ac:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80236b0:	6812      	ldr	r2, [r2, #0]
 80236b2:	681b      	ldr	r3, [r3, #0]
 80236b4:	429a      	cmp	r2, r3
 80236b6:	d10a      	bne.n	80236ce <arm_softmax_s8+0x1b0e>
 80236b8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80236bc:	681b      	ldr	r3, [r3, #0]
 80236be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80236c2:	d104      	bne.n	80236ce <arm_softmax_s8+0x1b0e>
        result = Q31_MAX;
 80236c4:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80236c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80236cc:	6013      	str	r3, [r2, #0]
    return result;
 80236ce:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80236d2:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80236d4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80236d8:	681b      	ldr	r3, [r3, #0]
 80236da:	1a99      	subs	r1, r3, r2
 80236dc:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 80236e0:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80236e4:	681b      	ldr	r3, [r3, #0]
 80236e6:	6013      	str	r3, [r2, #0]
 80236e8:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80236ec:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80236ee:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80236f2:	2300      	movs	r3, #0
 80236f4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80236f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80236fa:	f04f 0300 	mov.w	r3, #0
 80236fe:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
    if ((m1 < 0) ^ (m2 < 0))
 8023702:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8023706:	681b      	ldr	r3, [r3, #0]
 8023708:	0fdb      	lsrs	r3, r3, #31
 802370a:	b2da      	uxtb	r2, r3
 802370c:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8023710:	681b      	ldr	r3, [r3, #0]
 8023712:	0fdb      	lsrs	r3, r3, #31
 8023714:	b2db      	uxtb	r3, r3
 8023716:	4053      	eors	r3, r2
 8023718:	b2db      	uxtb	r3, r3
 802371a:	2b00      	cmp	r3, #0
 802371c:	d010      	beq.n	8023740 <arm_softmax_s8+0x1b80>
        mult = 1 - mult;
 802371e:	f04f 0001 	mov.w	r0, #1
 8023722:	f04f 0100 	mov.w	r1, #0
 8023726:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 802372a:	1a84      	subs	r4, r0, r2
 802372c:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8023730:	eb61 0303 	sbc.w	r3, r1, r3
 8023734:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8023738:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 802373c:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    mult = mult + (q63_t)m1 * m2;
 8023740:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8023744:	681b      	ldr	r3, [r3, #0]
 8023746:	4618      	mov	r0, r3
 8023748:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802374c:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8023750:	681b      	ldr	r3, [r3, #0]
 8023752:	461a      	mov	r2, r3
 8023754:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023758:	fb02 f501 	mul.w	r5, r2, r1
 802375c:	fb00 f403 	mul.w	r4, r0, r3
 8023760:	442c      	add	r4, r5
 8023762:	fba0 0102 	umull	r0, r1, r0, r2
 8023766:	1863      	adds	r3, r4, r1
 8023768:	4619      	mov	r1, r3
 802376a:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 802376e:	1814      	adds	r4, r2, r0
 8023770:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8023774:	414b      	adcs	r3, r1
 8023776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802377a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 802377e:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    result = (int32_t)(mult / (1ll << 31));
 8023782:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8023786:	4610      	mov	r0, r2
 8023788:	4619      	mov	r1, r3
 802378a:	2800      	cmp	r0, #0
 802378c:	f171 0300 	sbcs.w	r3, r1, #0
 8023790:	da06      	bge.n	80237a0 <arm_softmax_s8+0x1be0>
 8023792:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023796:	f04f 0300 	mov.w	r3, #0
 802379a:	1880      	adds	r0, r0, r2
 802379c:	eb43 0101 	adc.w	r1, r3, r1
 80237a0:	f04f 0200 	mov.w	r2, #0
 80237a4:	f04f 0300 	mov.w	r3, #0
 80237a8:	0fc2      	lsrs	r2, r0, #31
 80237aa:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80237ae:	17cb      	asrs	r3, r1, #31
 80237b0:	4610      	mov	r0, r2
 80237b2:	4619      	mov	r1, r3
 80237b4:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80237b8:	4603      	mov	r3, r0
 80237ba:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80237bc:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 80237c0:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80237c4:	6812      	ldr	r2, [r2, #0]
 80237c6:	681b      	ldr	r3, [r3, #0]
 80237c8:	429a      	cmp	r2, r3
 80237ca:	d10a      	bne.n	80237e2 <arm_softmax_s8+0x1c22>
 80237cc:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80237d0:	681b      	ldr	r3, [r3, #0]
 80237d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80237d6:	d104      	bne.n	80237e2 <arm_softmax_s8+0x1c22>
        result = Q31_MAX;
 80237d8:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80237dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80237e0:	6013      	str	r3, [r2, #0]
    return result;
 80237e2:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 80237e6:	681a      	ldr	r2, [r3, #0]
 80237e8:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 80237ec:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80237ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80237f2:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 80237f6:	3b01      	subs	r3, #1
 80237f8:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80237fa:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 80237fe:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8023802:	681b      	ldr	r3, [r3, #0]
 8023804:	009b      	lsls	r3, r3, #2
 8023806:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8023808:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 802380c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8023810:	6812      	ldr	r2, [r2, #0]
 8023812:	681b      	ldr	r3, [r3, #0]
 8023814:	429a      	cmp	r2, r3
 8023816:	dd02      	ble.n	802381e <arm_softmax_s8+0x1c5e>
 8023818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802381c:	e000      	b.n	8023820 <arm_softmax_s8+0x1c60>
 802381e:	2100      	movs	r1, #0
 8023820:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 8023824:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8023828:	6812      	ldr	r2, [r2, #0]
 802382a:	681b      	ldr	r3, [r3, #0]
 802382c:	429a      	cmp	r2, r3
 802382e:	dd01      	ble.n	8023834 <arm_softmax_s8+0x1c74>
 8023830:	2200      	movs	r2, #0
 8023832:	e001      	b.n	8023838 <arm_softmax_s8+0x1c78>
 8023834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023838:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 802383c:	681b      	ldr	r3, [r3, #0]
 802383e:	4013      	ands	r3, r2
 8023840:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8023844:	404b      	eors	r3, r1
 8023846:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8023848:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 802384c:	681b      	ldr	r3, [r3, #0]
 802384e:	425a      	negs	r2, r3
 8023850:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8023854:	681b      	ldr	r3, [r3, #0]
 8023856:	4293      	cmp	r3, r2
 8023858:	da02      	bge.n	8023860 <arm_softmax_s8+0x1ca0>
 802385a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802385e:	e000      	b.n	8023862 <arm_softmax_s8+0x1ca2>
 8023860:	2100      	movs	r1, #0
 8023862:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8023866:	681b      	ldr	r3, [r3, #0]
 8023868:	425a      	negs	r2, r3
 802386a:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 802386e:	681b      	ldr	r3, [r3, #0]
 8023870:	4293      	cmp	r3, r2
 8023872:	da01      	bge.n	8023878 <arm_softmax_s8+0x1cb8>
 8023874:	2200      	movs	r2, #0
 8023876:	e001      	b.n	802387c <arm_softmax_s8+0x1cbc>
 8023878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802387c:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8023880:	681b      	ldr	r3, [r3, #0]
 8023882:	4013      	ands	r3, r2
 8023884:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8023888:	404b      	eors	r3, r1
 802388a:	6013      	str	r3, [r2, #0]
    return result;
 802388c:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8023890:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8023892:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8023896:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 802389a:	681b      	ldr	r3, [r3, #0]
 802389c:	440b      	add	r3, r1
 802389e:	6013      	str	r3, [r2, #0]
 80238a0:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 80238a4:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80238a8:	681b      	ldr	r3, [r3, #0]
 80238aa:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80238ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80238b0:	f507 7269 	add.w	r2, r7, #932	; 0x3a4
 80238b4:	3b01      	subs	r3, #1
 80238b6:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80238b8:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 80238bc:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80238c0:	681b      	ldr	r3, [r3, #0]
 80238c2:	005b      	lsls	r3, r3, #1
 80238c4:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80238c6:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 80238ca:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80238ce:	6812      	ldr	r2, [r2, #0]
 80238d0:	681b      	ldr	r3, [r3, #0]
 80238d2:	429a      	cmp	r2, r3
 80238d4:	dd02      	ble.n	80238dc <arm_softmax_s8+0x1d1c>
 80238d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80238da:	e000      	b.n	80238de <arm_softmax_s8+0x1d1e>
 80238dc:	2100      	movs	r1, #0
 80238de:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 80238e2:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80238e6:	6812      	ldr	r2, [r2, #0]
 80238e8:	681b      	ldr	r3, [r3, #0]
 80238ea:	429a      	cmp	r2, r3
 80238ec:	dd01      	ble.n	80238f2 <arm_softmax_s8+0x1d32>
 80238ee:	2200      	movs	r2, #0
 80238f0:	e001      	b.n	80238f6 <arm_softmax_s8+0x1d36>
 80238f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80238f6:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80238fa:	681b      	ldr	r3, [r3, #0]
 80238fc:	4013      	ands	r3, r2
 80238fe:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 8023902:	404b      	eors	r3, r1
 8023904:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8023906:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 802390a:	681b      	ldr	r3, [r3, #0]
 802390c:	425a      	negs	r2, r3
 802390e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8023912:	681b      	ldr	r3, [r3, #0]
 8023914:	4293      	cmp	r3, r2
 8023916:	da02      	bge.n	802391e <arm_softmax_s8+0x1d5e>
 8023918:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802391c:	e000      	b.n	8023920 <arm_softmax_s8+0x1d60>
 802391e:	2100      	movs	r1, #0
 8023920:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8023924:	681b      	ldr	r3, [r3, #0]
 8023926:	425a      	negs	r2, r3
 8023928:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 802392c:	681b      	ldr	r3, [r3, #0]
 802392e:	4293      	cmp	r3, r2
 8023930:	da01      	bge.n	8023936 <arm_softmax_s8+0x1d76>
 8023932:	2200      	movs	r2, #0
 8023934:	e001      	b.n	802393a <arm_softmax_s8+0x1d7a>
 8023936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802393a:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 802393e:	681b      	ldr	r3, [r3, #0]
 8023940:	4013      	ands	r3, r2
 8023942:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 8023946:	404b      	eors	r3, r1
 8023948:	6013      	str	r3, [r2, #0]
    return result;
 802394a:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 802394e:	681b      	ldr	r3, [r3, #0]
    return MUL_POW2(x, 1);
 8023950:	bf00      	nop
 8023952:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4

        for (col = 0; col < row_size; ++col)
 8023956:	2300      	movs	r3, #0
 8023958:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 802395c:	f001 b97b 	b.w	8024c56 <arm_softmax_s8+0x3096>
 8023960:	c3c3c3c4 	.word	0xc3c3c3c4
 8023964:	ffffffff 	.word	0xffffffff
        {
            diff = input[col] - max;
 8023968:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 802396c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8023970:	681b      	ldr	r3, [r3, #0]
 8023972:	4413      	add	r3, r2
 8023974:	f993 3000 	ldrsb.w	r3, [r3]
 8023978:	461a      	mov	r2, r3
 802397a:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 802397e:	1ad3      	subs	r3, r2, r3
 8023980:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
            if (diff >= diff_min)
 8023984:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 8023988:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 802398c:	429a      	cmp	r2, r3
 802398e:	f2c1 8156 	blt.w	8024c3e <arm_softmax_s8+0x307e>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 8023992:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 8023996:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 802399a:	fb03 f202 	mul.w	r2, r3, r2
 802399e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80239a2:	601a      	str	r2, [r3, #0]
 80239a4:	f507 7212 	add.w	r2, r7, #584	; 0x248
 80239a8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80239ac:	681b      	ldr	r3, [r3, #0]
 80239ae:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80239b0:	f507 7211 	add.w	r2, r7, #580	; 0x244
 80239b4:	2300      	movs	r3, #0
 80239b6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80239b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80239bc:	f04f 0300 	mov.w	r3, #0
 80239c0:	e9c7 238e 	strd	r2, r3, [r7, #568]	; 0x238
    if ((m1 < 0) ^ (m2 < 0))
 80239c4:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80239c8:	681b      	ldr	r3, [r3, #0]
 80239ca:	0fdb      	lsrs	r3, r3, #31
 80239cc:	b2da      	uxtb	r2, r3
 80239ce:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80239d2:	681b      	ldr	r3, [r3, #0]
 80239d4:	0fdb      	lsrs	r3, r3, #31
 80239d6:	b2db      	uxtb	r3, r3
 80239d8:	4053      	eors	r3, r2
 80239da:	b2db      	uxtb	r3, r3
 80239dc:	2b00      	cmp	r3, #0
 80239de:	d010      	beq.n	8023a02 <arm_softmax_s8+0x1e42>
        mult = 1 - mult;
 80239e0:	f04f 0001 	mov.w	r0, #1
 80239e4:	f04f 0100 	mov.w	r1, #0
 80239e8:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80239ec:	1a84      	subs	r4, r0, r2
 80239ee:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 80239f2:	eb61 0303 	sbc.w	r3, r1, r3
 80239f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80239fa:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80239fe:	e9c7 348e 	strd	r3, r4, [r7, #568]	; 0x238
    mult = mult + (q63_t)m1 * m2;
 8023a02:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8023a06:	681b      	ldr	r3, [r3, #0]
 8023a08:	4618      	mov	r0, r3
 8023a0a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023a0e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8023a12:	681b      	ldr	r3, [r3, #0]
 8023a14:	461a      	mov	r2, r3
 8023a16:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023a1a:	fb02 f501 	mul.w	r5, r2, r1
 8023a1e:	fb00 f403 	mul.w	r4, r0, r3
 8023a22:	442c      	add	r4, r5
 8023a24:	fba0 0102 	umull	r0, r1, r0, r2
 8023a28:	1863      	adds	r3, r4, r1
 8023a2a:	4619      	mov	r1, r3
 8023a2c:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8023a30:	1814      	adds	r4, r2, r0
 8023a32:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8023a36:	414b      	adcs	r3, r1
 8023a38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8023a3c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8023a40:	e9c7 348e 	strd	r3, r4, [r7, #568]	; 0x238
    result = (int32_t)(mult / (1ll << 31));
 8023a44:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8023a48:	4610      	mov	r0, r2
 8023a4a:	4619      	mov	r1, r3
 8023a4c:	2800      	cmp	r0, #0
 8023a4e:	f171 0300 	sbcs.w	r3, r1, #0
 8023a52:	da06      	bge.n	8023a62 <arm_softmax_s8+0x1ea2>
 8023a54:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023a58:	f04f 0300 	mov.w	r3, #0
 8023a5c:	1880      	adds	r0, r0, r2
 8023a5e:	eb43 0101 	adc.w	r1, r3, r1
 8023a62:	f04f 0200 	mov.w	r2, #0
 8023a66:	f04f 0300 	mov.w	r3, #0
 8023a6a:	0fc2      	lsrs	r2, r0, #31
 8023a6c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023a70:	17cb      	asrs	r3, r1, #31
 8023a72:	4610      	mov	r0, r2
 8023a74:	4619      	mov	r1, r3
 8023a76:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8023a7a:	4603      	mov	r3, r0
 8023a7c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023a7e:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8023a82:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8023a86:	6812      	ldr	r2, [r2, #0]
 8023a88:	681b      	ldr	r3, [r3, #0]
 8023a8a:	429a      	cmp	r2, r3
 8023a8c:	d10a      	bne.n	8023aa4 <arm_softmax_s8+0x1ee4>
 8023a8e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8023a92:	681b      	ldr	r3, [r3, #0]
 8023a94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023a98:	d104      	bne.n	8023aa4 <arm_softmax_s8+0x1ee4>
        result = Q31_MAX;
 8023a9a:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8023a9e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023aa2:	6013      	str	r3, [r2, #0]
    return result;
 8023aa4:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8023aa8:	681a      	ldr	r2, [r3, #0]
 8023aaa:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8023aae:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 8023ab0:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8023ab4:	2300      	movs	r3, #0
 8023ab6:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 8023ab8:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8023abc:	2318      	movs	r3, #24
 8023abe:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8023ac0:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8023ac4:	2201      	movs	r2, #1
 8023ac6:	681b      	ldr	r3, [r3, #0]
 8023ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8023acc:	1e5a      	subs	r2, r3, #1
 8023ace:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8023ad2:	681b      	ldr	r3, [r3, #0]
 8023ad4:	ea02 0103 	and.w	r1, r2, r3
 8023ad8:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8023adc:	2201      	movs	r2, #1
 8023ade:	681b      	ldr	r3, [r3, #0]
 8023ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8023ae4:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8023ae8:	1acb      	subs	r3, r1, r3
 8023aea:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 8023aec:	f507 7157 	add.w	r1, r7, #860	; 0x35c
 8023af0:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8023af4:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8023af8:	6812      	ldr	r2, [r2, #0]
 8023afa:	681b      	ldr	r3, [r3, #0]
 8023afc:	1ad3      	subs	r3, r2, r3
 8023afe:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8023b00:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8023b04:	681b      	ldr	r3, [r3, #0]
 8023b06:	015b      	lsls	r3, r3, #5
 8023b08:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8023b0c:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8023b10:	6013      	str	r3, [r2, #0]
 8023b12:	f507 7255 	add.w	r2, r7, #852	; 0x354
 8023b16:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8023b1a:	681b      	ldr	r3, [r3, #0]
 8023b1c:	6013      	str	r3, [r2, #0]
 8023b1e:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8023b22:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8023b26:	681b      	ldr	r3, [r3, #0]
 8023b28:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023b2a:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 8023b2e:	2300      	movs	r3, #0
 8023b30:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023b32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023b36:	f04f 0300 	mov.w	r3, #0
 8023b3a:	e9c7 23d0 	strd	r2, r3, [r7, #832]	; 0x340
    if ((m1 < 0) ^ (m2 < 0))
 8023b3e:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8023b42:	681b      	ldr	r3, [r3, #0]
 8023b44:	0fdb      	lsrs	r3, r3, #31
 8023b46:	b2da      	uxtb	r2, r3
 8023b48:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8023b4c:	681b      	ldr	r3, [r3, #0]
 8023b4e:	0fdb      	lsrs	r3, r3, #31
 8023b50:	b2db      	uxtb	r3, r3
 8023b52:	4053      	eors	r3, r2
 8023b54:	b2db      	uxtb	r3, r3
 8023b56:	2b00      	cmp	r3, #0
 8023b58:	d010      	beq.n	8023b7c <arm_softmax_s8+0x1fbc>
        mult = 1 - mult;
 8023b5a:	f04f 0001 	mov.w	r0, #1
 8023b5e:	f04f 0100 	mov.w	r1, #0
 8023b62:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8023b66:	1a84      	subs	r4, r0, r2
 8023b68:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8023b6c:	eb61 0303 	sbc.w	r3, r1, r3
 8023b70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8023b74:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8023b78:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    mult = mult + (q63_t)m1 * m2;
 8023b7c:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8023b80:	681b      	ldr	r3, [r3, #0]
 8023b82:	4618      	mov	r0, r3
 8023b84:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023b88:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8023b8c:	681b      	ldr	r3, [r3, #0]
 8023b8e:	461a      	mov	r2, r3
 8023b90:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023b94:	fb02 f501 	mul.w	r5, r2, r1
 8023b98:	fb00 f403 	mul.w	r4, r0, r3
 8023b9c:	442c      	add	r4, r5
 8023b9e:	fba0 0102 	umull	r0, r1, r0, r2
 8023ba2:	1863      	adds	r3, r4, r1
 8023ba4:	4619      	mov	r1, r3
 8023ba6:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8023baa:	1814      	adds	r4, r2, r0
 8023bac:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8023bb0:	414b      	adcs	r3, r1
 8023bb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8023bb6:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8023bba:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    result = (int32_t)(mult / (1ll << 31));
 8023bbe:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8023bc2:	4610      	mov	r0, r2
 8023bc4:	4619      	mov	r1, r3
 8023bc6:	2800      	cmp	r0, #0
 8023bc8:	f171 0300 	sbcs.w	r3, r1, #0
 8023bcc:	da06      	bge.n	8023bdc <arm_softmax_s8+0x201c>
 8023bce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023bd2:	f04f 0300 	mov.w	r3, #0
 8023bd6:	1880      	adds	r0, r0, r2
 8023bd8:	eb43 0101 	adc.w	r1, r3, r1
 8023bdc:	f04f 0200 	mov.w	r2, #0
 8023be0:	f04f 0300 	mov.w	r3, #0
 8023be4:	0fc2      	lsrs	r2, r0, #31
 8023be6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023bea:	17cb      	asrs	r3, r1, #31
 8023bec:	4610      	mov	r0, r2
 8023bee:	4619      	mov	r1, r3
 8023bf0:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 8023bf4:	4603      	mov	r3, r0
 8023bf6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023bf8:	f507 7255 	add.w	r2, r7, #852	; 0x354
 8023bfc:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8023c00:	6812      	ldr	r2, [r2, #0]
 8023c02:	681b      	ldr	r3, [r3, #0]
 8023c04:	429a      	cmp	r2, r3
 8023c06:	d10a      	bne.n	8023c1e <arm_softmax_s8+0x205e>
 8023c08:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8023c0c:	681b      	ldr	r3, [r3, #0]
 8023c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023c12:	d104      	bne.n	8023c1e <arm_softmax_s8+0x205e>
        result = Q31_MAX;
 8023c14:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 8023c18:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023c1c:	6013      	str	r3, [r2, #0]
    return result;
 8023c1e:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8023c22:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 8023c24:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8023c28:	601a      	str	r2, [r3, #0]
 8023c2a:	f507 724e 	add.w	r2, r7, #824	; 0x338
 8023c2e:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8023c32:	681b      	ldr	r3, [r3, #0]
 8023c34:	6013      	str	r3, [r2, #0]
 8023c36:	f507 724d 	add.w	r2, r7, #820	; 0x334
 8023c3a:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8023c3e:	681b      	ldr	r3, [r3, #0]
 8023c40:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023c42:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8023c46:	2300      	movs	r3, #0
 8023c48:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023c4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023c4e:	f04f 0300 	mov.w	r3, #0
 8023c52:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
    if ((m1 < 0) ^ (m2 < 0))
 8023c56:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8023c5a:	681b      	ldr	r3, [r3, #0]
 8023c5c:	0fdb      	lsrs	r3, r3, #31
 8023c5e:	b2da      	uxtb	r2, r3
 8023c60:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8023c64:	681b      	ldr	r3, [r3, #0]
 8023c66:	0fdb      	lsrs	r3, r3, #31
 8023c68:	b2db      	uxtb	r3, r3
 8023c6a:	4053      	eors	r3, r2
 8023c6c:	b2db      	uxtb	r3, r3
 8023c6e:	2b00      	cmp	r3, #0
 8023c70:	d010      	beq.n	8023c94 <arm_softmax_s8+0x20d4>
        mult = 1 - mult;
 8023c72:	f04f 0001 	mov.w	r0, #1
 8023c76:	f04f 0100 	mov.w	r1, #0
 8023c7a:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8023c7e:	1a84      	subs	r4, r0, r2
 8023c80:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8023c84:	eb61 0303 	sbc.w	r3, r1, r3
 8023c88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8023c8c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8023c90:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    mult = mult + (q63_t)m1 * m2;
 8023c94:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8023c98:	681b      	ldr	r3, [r3, #0]
 8023c9a:	4618      	mov	r0, r3
 8023c9c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023ca0:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8023ca4:	681b      	ldr	r3, [r3, #0]
 8023ca6:	461a      	mov	r2, r3
 8023ca8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023cac:	fb02 f501 	mul.w	r5, r2, r1
 8023cb0:	fb00 f403 	mul.w	r4, r0, r3
 8023cb4:	442c      	add	r4, r5
 8023cb6:	fba0 0102 	umull	r0, r1, r0, r2
 8023cba:	1863      	adds	r3, r4, r1
 8023cbc:	4619      	mov	r1, r3
 8023cbe:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8023cc2:	1814      	adds	r4, r2, r0
 8023cc4:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8023cc8:	414b      	adcs	r3, r1
 8023cca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8023cce:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8023cd2:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    result = (int32_t)(mult / (1ll << 31));
 8023cd6:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8023cda:	4610      	mov	r0, r2
 8023cdc:	4619      	mov	r1, r3
 8023cde:	2800      	cmp	r0, #0
 8023ce0:	f171 0300 	sbcs.w	r3, r1, #0
 8023ce4:	da06      	bge.n	8023cf4 <arm_softmax_s8+0x2134>
 8023ce6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023cea:	f04f 0300 	mov.w	r3, #0
 8023cee:	1880      	adds	r0, r0, r2
 8023cf0:	eb43 0101 	adc.w	r1, r3, r1
 8023cf4:	f04f 0200 	mov.w	r2, #0
 8023cf8:	f04f 0300 	mov.w	r3, #0
 8023cfc:	0fc2      	lsrs	r2, r0, #31
 8023cfe:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023d02:	17cb      	asrs	r3, r1, #31
 8023d04:	4610      	mov	r0, r2
 8023d06:	4619      	mov	r1, r3
 8023d08:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8023d0c:	4603      	mov	r3, r0
 8023d0e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023d10:	f507 724e 	add.w	r2, r7, #824	; 0x338
 8023d14:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8023d18:	6812      	ldr	r2, [r2, #0]
 8023d1a:	681b      	ldr	r3, [r3, #0]
 8023d1c:	429a      	cmp	r2, r3
 8023d1e:	d10a      	bne.n	8023d36 <arm_softmax_s8+0x2176>
 8023d20:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8023d24:	681b      	ldr	r3, [r3, #0]
 8023d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023d2a:	d104      	bne.n	8023d36 <arm_softmax_s8+0x2176>
        result = Q31_MAX;
 8023d2c:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8023d30:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023d34:	6013      	str	r3, [r2, #0]
    return result;
 8023d36:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8023d3a:	681a      	ldr	r2, [r3, #0]
 8023d3c:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8023d40:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8023d42:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8023d46:	2300      	movs	r3, #0
 8023d48:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8023d4a:	2304      	movs	r3, #4
 8023d4c:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8023d50:	3b01      	subs	r3, #1
 8023d52:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8023d54:	f507 7146 	add.w	r1, r7, #792	; 0x318
 8023d58:	f507 7249 	add.w	r2, r7, #804	; 0x324
 8023d5c:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8023d60:	6812      	ldr	r2, [r2, #0]
 8023d62:	681b      	ldr	r3, [r3, #0]
 8023d64:	4013      	ands	r3, r2
 8023d66:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8023d68:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8023d6c:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8023d70:	681b      	ldr	r3, [r3, #0]
 8023d72:	109b      	asrs	r3, r3, #2
 8023d74:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8023d76:	f507 7245 	add.w	r2, r7, #788	; 0x314
 8023d7a:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8023d7e:	681b      	ldr	r3, [r3, #0]
 8023d80:	105b      	asrs	r3, r3, #1
 8023d82:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8023d84:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8023d88:	681b      	ldr	r3, [r3, #0]
 8023d8a:	2b00      	cmp	r3, #0
 8023d8c:	da06      	bge.n	8023d9c <arm_softmax_s8+0x21dc>
        threshold++;
 8023d8e:	f507 7245 	add.w	r2, r7, #788	; 0x314
 8023d92:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8023d96:	681b      	ldr	r3, [r3, #0]
 8023d98:	3301      	adds	r3, #1
 8023d9a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8023d9c:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8023da0:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8023da4:	6812      	ldr	r2, [r2, #0]
 8023da6:	681b      	ldr	r3, [r3, #0]
 8023da8:	429a      	cmp	r2, r3
 8023daa:	dd06      	ble.n	8023dba <arm_softmax_s8+0x21fa>
        result++;
 8023dac:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8023db0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8023db4:	681b      	ldr	r3, [r3, #0]
 8023db6:	3301      	adds	r3, #1
 8023db8:	6013      	str	r3, [r2, #0]
    return result;
 8023dba:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8023dbe:	681e      	ldr	r6, [r3, #0]
 8023dc0:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8023dc4:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8023dc8:	681b      	ldr	r3, [r3, #0]
 8023dca:	6013      	str	r3, [r2, #0]
 8023dcc:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 8023dd0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8023dd4:	681b      	ldr	r3, [r3, #0]
 8023dd6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023dd8:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8023ddc:	2300      	movs	r3, #0
 8023dde:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023de4:	f04f 0300 	mov.w	r3, #0
 8023de8:	e9c7 23c0 	strd	r2, r3, [r7, #768]	; 0x300
    if ((m1 < 0) ^ (m2 < 0))
 8023dec:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8023df0:	681b      	ldr	r3, [r3, #0]
 8023df2:	0fdb      	lsrs	r3, r3, #31
 8023df4:	b2da      	uxtb	r2, r3
 8023df6:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8023dfa:	681b      	ldr	r3, [r3, #0]
 8023dfc:	0fdb      	lsrs	r3, r3, #31
 8023dfe:	b2db      	uxtb	r3, r3
 8023e00:	4053      	eors	r3, r2
 8023e02:	b2db      	uxtb	r3, r3
 8023e04:	2b00      	cmp	r3, #0
 8023e06:	d010      	beq.n	8023e2a <arm_softmax_s8+0x226a>
        mult = 1 - mult;
 8023e08:	f04f 0001 	mov.w	r0, #1
 8023e0c:	f04f 0100 	mov.w	r1, #0
 8023e10:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8023e14:	1a84      	subs	r4, r0, r2
 8023e16:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8023e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8023e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023e22:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8023e26:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    mult = mult + (q63_t)m1 * m2;
 8023e2a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8023e2e:	681b      	ldr	r3, [r3, #0]
 8023e30:	4618      	mov	r0, r3
 8023e32:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023e36:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8023e3a:	681b      	ldr	r3, [r3, #0]
 8023e3c:	461a      	mov	r2, r3
 8023e3e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023e42:	fb02 f501 	mul.w	r5, r2, r1
 8023e46:	fb00 f403 	mul.w	r4, r0, r3
 8023e4a:	442c      	add	r4, r5
 8023e4c:	fba0 0102 	umull	r0, r1, r0, r2
 8023e50:	1863      	adds	r3, r4, r1
 8023e52:	4619      	mov	r1, r3
 8023e54:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8023e58:	1814      	adds	r4, r2, r0
 8023e5a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8023e5e:	414b      	adcs	r3, r1
 8023e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8023e64:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8023e68:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    result = (int32_t)(mult / (1ll << 31));
 8023e6c:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8023e70:	4610      	mov	r0, r2
 8023e72:	4619      	mov	r1, r3
 8023e74:	2800      	cmp	r0, #0
 8023e76:	f171 0300 	sbcs.w	r3, r1, #0
 8023e7a:	da06      	bge.n	8023e8a <arm_softmax_s8+0x22ca>
 8023e7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023e80:	f04f 0300 	mov.w	r3, #0
 8023e84:	1880      	adds	r0, r0, r2
 8023e86:	eb43 0101 	adc.w	r1, r3, r1
 8023e8a:	f04f 0200 	mov.w	r2, #0
 8023e8e:	f04f 0300 	mov.w	r3, #0
 8023e92:	0fc2      	lsrs	r2, r0, #31
 8023e94:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023e98:	17cb      	asrs	r3, r1, #31
 8023e9a:	4610      	mov	r0, r2
 8023e9c:	4619      	mov	r1, r3
 8023e9e:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8023ea2:	4603      	mov	r3, r0
 8023ea4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023ea6:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8023eaa:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8023eae:	6812      	ldr	r2, [r2, #0]
 8023eb0:	681b      	ldr	r3, [r3, #0]
 8023eb2:	429a      	cmp	r2, r3
 8023eb4:	d10a      	bne.n	8023ecc <arm_softmax_s8+0x230c>
 8023eb6:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8023eba:	681b      	ldr	r3, [r3, #0]
 8023ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023ec0:	d104      	bne.n	8023ecc <arm_softmax_s8+0x230c>
        result = Q31_MAX;
 8023ec2:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8023ec6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023eca:	6013      	str	r3, [r2, #0]
    return result;
 8023ecc:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8023ed0:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8023ed2:	18f2      	adds	r2, r6, r3
 8023ed4:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8023ed8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8023eda:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8023ede:	2300      	movs	r3, #0
 8023ee0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023ee2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023ee6:	f04f 0300 	mov.w	r3, #0
 8023eea:	e9c7 23bc 	strd	r2, r3, [r7, #752]	; 0x2f0
    if ((m1 < 0) ^ (m2 < 0))
 8023eee:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8023ef2:	681b      	ldr	r3, [r3, #0]
 8023ef4:	0fdb      	lsrs	r3, r3, #31
 8023ef6:	b2da      	uxtb	r2, r3
 8023ef8:	2300      	movs	r3, #0
 8023efa:	4053      	eors	r3, r2
 8023efc:	b2db      	uxtb	r3, r3
 8023efe:	2b00      	cmp	r3, #0
 8023f00:	d010      	beq.n	8023f24 <arm_softmax_s8+0x2364>
        mult = 1 - mult;
 8023f02:	f04f 0001 	mov.w	r0, #1
 8023f06:	f04f 0100 	mov.w	r1, #0
 8023f0a:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8023f0e:	1a84      	subs	r4, r0, r2
 8023f10:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8023f14:	eb61 0303 	sbc.w	r3, r1, r3
 8023f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8023f1c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8023f20:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    mult = mult + (q63_t)m1 * m2;
 8023f24:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8023f28:	681b      	ldr	r3, [r3, #0]
 8023f2a:	4618      	mov	r0, r3
 8023f2c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023f30:	a3de      	add	r3, pc, #888	; (adr r3, 80242ac <arm_softmax_s8+0x26ec>)
 8023f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f36:	fb02 f501 	mul.w	r5, r2, r1
 8023f3a:	fb00 f403 	mul.w	r4, r0, r3
 8023f3e:	442c      	add	r4, r5
 8023f40:	fba0 0102 	umull	r0, r1, r0, r2
 8023f44:	1863      	adds	r3, r4, r1
 8023f46:	4619      	mov	r1, r3
 8023f48:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8023f4c:	1814      	adds	r4, r2, r0
 8023f4e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8023f52:	414b      	adcs	r3, r1
 8023f54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8023f58:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8023f5c:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    result = (int32_t)(mult / (1ll << 31));
 8023f60:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8023f64:	4610      	mov	r0, r2
 8023f66:	4619      	mov	r1, r3
 8023f68:	2800      	cmp	r0, #0
 8023f6a:	f171 0300 	sbcs.w	r3, r1, #0
 8023f6e:	da06      	bge.n	8023f7e <arm_softmax_s8+0x23be>
 8023f70:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023f74:	f04f 0300 	mov.w	r3, #0
 8023f78:	1880      	adds	r0, r0, r2
 8023f7a:	eb43 0101 	adc.w	r1, r3, r1
 8023f7e:	f04f 0200 	mov.w	r2, #0
 8023f82:	f04f 0300 	mov.w	r3, #0
 8023f86:	0fc2      	lsrs	r2, r0, #31
 8023f88:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023f8c:	17cb      	asrs	r3, r1, #31
 8023f8e:	4610      	mov	r0, r2
 8023f90:	4619      	mov	r1, r3
 8023f92:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8023f96:	4603      	mov	r3, r0
 8023f98:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023f9a:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8023f9e:	681a      	ldr	r2, [r3, #0]
 8023fa0:	4bbf      	ldr	r3, [pc, #764]	; (80242a0 <arm_softmax_s8+0x26e0>)
 8023fa2:	429a      	cmp	r2, r3
 8023fa4:	d10a      	bne.n	8023fbc <arm_softmax_s8+0x23fc>
 8023fa6:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8023faa:	681b      	ldr	r3, [r3, #0]
 8023fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023fb0:	d104      	bne.n	8023fbc <arm_softmax_s8+0x23fc>
        result = Q31_MAX;
 8023fb2:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8023fb6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023fba:	6013      	str	r3, [r2, #0]
    return result;
 8023fbc:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8023fc0:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8023fc2:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8023fc6:	681b      	ldr	r3, [r3, #0]
 8023fc8:	441a      	add	r2, r3
 8023fca:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8023fce:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8023fd0:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8023fd4:	2300      	movs	r3, #0
 8023fd6:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8023fd8:	2302      	movs	r3, #2
 8023fda:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 8023fde:	3b01      	subs	r3, #1
 8023fe0:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8023fe2:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8023fe6:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8023fea:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8023fee:	6812      	ldr	r2, [r2, #0]
 8023ff0:	681b      	ldr	r3, [r3, #0]
 8023ff2:	4013      	ands	r3, r2
 8023ff4:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8023ff6:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8023ffa:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8023ffe:	681b      	ldr	r3, [r3, #0]
 8024000:	105b      	asrs	r3, r3, #1
 8024002:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8024004:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 8024008:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 802400c:	681b      	ldr	r3, [r3, #0]
 802400e:	105b      	asrs	r3, r3, #1
 8024010:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8024012:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8024016:	681b      	ldr	r3, [r3, #0]
 8024018:	2b00      	cmp	r3, #0
 802401a:	da06      	bge.n	802402a <arm_softmax_s8+0x246a>
        threshold++;
 802401c:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 8024020:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8024024:	681b      	ldr	r3, [r3, #0]
 8024026:	3301      	adds	r3, #1
 8024028:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 802402a:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 802402e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8024032:	6812      	ldr	r2, [r2, #0]
 8024034:	681b      	ldr	r3, [r3, #0]
 8024036:	429a      	cmp	r2, r3
 8024038:	dd06      	ble.n	8024048 <arm_softmax_s8+0x2488>
        result++;
 802403a:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 802403e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8024042:	681b      	ldr	r3, [r3, #0]
 8024044:	3301      	adds	r3, #1
 8024046:	6013      	str	r3, [r2, #0]
    return result;
 8024048:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 802404c:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 802404e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8024052:	681b      	ldr	r3, [r3, #0]
 8024054:	441a      	add	r2, r3
 8024056:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 802405a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 802405c:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8024060:	2300      	movs	r3, #0
 8024062:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024064:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024068:	f04f 0300 	mov.w	r3, #0
 802406c:	e9c7 23b2 	strd	r2, r3, [r7, #712]	; 0x2c8
    if ((m1 < 0) ^ (m2 < 0))
 8024070:	2200      	movs	r2, #0
 8024072:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8024076:	681b      	ldr	r3, [r3, #0]
 8024078:	0fdb      	lsrs	r3, r3, #31
 802407a:	b2db      	uxtb	r3, r3
 802407c:	4053      	eors	r3, r2
 802407e:	b2db      	uxtb	r3, r3
 8024080:	2b00      	cmp	r3, #0
 8024082:	d010      	beq.n	80240a6 <arm_softmax_s8+0x24e6>
        mult = 1 - mult;
 8024084:	f04f 0001 	mov.w	r0, #1
 8024088:	f04f 0100 	mov.w	r1, #0
 802408c:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8024090:	1a84      	subs	r4, r0, r2
 8024092:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8024096:	eb61 0303 	sbc.w	r3, r1, r3
 802409a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802409e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80240a2:	e9c7 34b2 	strd	r3, r4, [r7, #712]	; 0x2c8
    mult = mult + (q63_t)m1 * m2;
 80240a6:	a57a      	add	r5, pc, #488	; (adr r5, 8024290 <arm_softmax_s8+0x26d0>)
 80240a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80240ac:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80240b0:	681b      	ldr	r3, [r3, #0]
 80240b2:	461a      	mov	r2, r3
 80240b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80240b8:	fb02 f005 	mul.w	r0, r2, r5
 80240bc:	fb04 f103 	mul.w	r1, r4, r3
 80240c0:	1846      	adds	r6, r0, r1
 80240c2:	fba4 0102 	umull	r0, r1, r4, r2
 80240c6:	1873      	adds	r3, r6, r1
 80240c8:	4619      	mov	r1, r3
 80240ca:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 80240ce:	1814      	adds	r4, r2, r0
 80240d0:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 80240d4:	414b      	adcs	r3, r1
 80240d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80240da:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80240de:	e9c7 34b2 	strd	r3, r4, [r7, #712]	; 0x2c8
    result = (int32_t)(mult / (1ll << 31));
 80240e2:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 80240e6:	4610      	mov	r0, r2
 80240e8:	4619      	mov	r1, r3
 80240ea:	2800      	cmp	r0, #0
 80240ec:	f171 0300 	sbcs.w	r3, r1, #0
 80240f0:	da06      	bge.n	8024100 <arm_softmax_s8+0x2540>
 80240f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80240f6:	f04f 0300 	mov.w	r3, #0
 80240fa:	1880      	adds	r0, r0, r2
 80240fc:	eb43 0101 	adc.w	r1, r3, r1
 8024100:	f04f 0200 	mov.w	r2, #0
 8024104:	f04f 0300 	mov.w	r3, #0
 8024108:	0fc2      	lsrs	r2, r0, #31
 802410a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802410e:	17cb      	asrs	r3, r1, #31
 8024110:	4610      	mov	r0, r2
 8024112:	4619      	mov	r1, r3
 8024114:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8024118:	4603      	mov	r3, r0
 802411a:	6013      	str	r3, [r2, #0]
    return result;
 802411c:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8024120:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 8024122:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8024126:	4b5f      	ldr	r3, [pc, #380]	; (80242a4 <arm_softmax_s8+0x26e4>)
 8024128:	440b      	add	r3, r1
 802412a:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 802412c:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8024130:	6819      	ldr	r1, [r3, #0]
 8024132:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8024136:	1c4b      	adds	r3, r1, #1
 8024138:	6013      	str	r3, [r2, #0]
 802413a:	2301      	movs	r3, #1
 802413c:	fa03 f201 	lsl.w	r2, r3, r1
 8024140:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8024144:	681b      	ldr	r3, [r3, #0]
 8024146:	4013      	ands	r3, r2
 8024148:	2b00      	cmp	r3, #0
 802414a:	d002      	beq.n	8024152 <arm_softmax_s8+0x2592>
 802414c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024150:	e000      	b.n	8024154 <arm_softmax_s8+0x2594>
 8024152:	2200      	movs	r2, #0
 8024154:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024158:	601a      	str	r2, [r3, #0]
 802415a:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 802415e:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024162:	681b      	ldr	r3, [r3, #0]
 8024164:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024166:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 802416a:	2300      	movs	r3, #0
 802416c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802416e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024172:	f04f 0300 	mov.w	r3, #0
 8024176:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    if ((m1 < 0) ^ (m2 < 0))
 802417a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 802417e:	681b      	ldr	r3, [r3, #0]
 8024180:	0fdb      	lsrs	r3, r3, #31
 8024182:	b2da      	uxtb	r2, r3
 8024184:	2300      	movs	r3, #0
 8024186:	4053      	eors	r3, r2
 8024188:	b2db      	uxtb	r3, r3
 802418a:	2b00      	cmp	r3, #0
 802418c:	d00e      	beq.n	80241ac <arm_softmax_s8+0x25ec>
        mult = 1 - mult;
 802418e:	f04f 0001 	mov.w	r0, #1
 8024192:	f04f 0100 	mov.w	r1, #0
 8024196:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 802419a:	1a84      	subs	r4, r0, r2
 802419c:	67bc      	str	r4, [r7, #120]	; 0x78
 802419e:	eb61 0303 	sbc.w	r3, r1, r3
 80241a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80241a4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80241a8:	e9c7 34ac 	strd	r3, r4, [r7, #688]	; 0x2b0
    mult = mult + (q63_t)m1 * m2;
 80241ac:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80241b0:	681b      	ldr	r3, [r3, #0]
 80241b2:	4618      	mov	r0, r3
 80241b4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80241b8:	a337      	add	r3, pc, #220	; (adr r3, 8024298 <arm_softmax_s8+0x26d8>)
 80241ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241be:	fb02 f501 	mul.w	r5, r2, r1
 80241c2:	fb00 f403 	mul.w	r4, r0, r3
 80241c6:	442c      	add	r4, r5
 80241c8:	fba0 0102 	umull	r0, r1, r0, r2
 80241cc:	1863      	adds	r3, r4, r1
 80241ce:	4619      	mov	r1, r3
 80241d0:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 80241d4:	1814      	adds	r4, r2, r0
 80241d6:	673c      	str	r4, [r7, #112]	; 0x70
 80241d8:	414b      	adcs	r3, r1
 80241da:	677b      	str	r3, [r7, #116]	; 0x74
 80241dc:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80241e0:	e9c7 34ac 	strd	r3, r4, [r7, #688]	; 0x2b0
    result = (int32_t)(mult / (1ll << 31));
 80241e4:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 80241e8:	4610      	mov	r0, r2
 80241ea:	4619      	mov	r1, r3
 80241ec:	2800      	cmp	r0, #0
 80241ee:	f171 0300 	sbcs.w	r3, r1, #0
 80241f2:	da06      	bge.n	8024202 <arm_softmax_s8+0x2642>
 80241f4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80241f8:	f04f 0300 	mov.w	r3, #0
 80241fc:	1880      	adds	r0, r0, r2
 80241fe:	eb43 0101 	adc.w	r1, r3, r1
 8024202:	f04f 0200 	mov.w	r2, #0
 8024206:	f04f 0300 	mov.w	r3, #0
 802420a:	0fc2      	lsrs	r2, r0, #31
 802420c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024210:	17cb      	asrs	r3, r1, #31
 8024212:	4610      	mov	r0, r2
 8024214:	4619      	mov	r1, r3
 8024216:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 802421a:	4603      	mov	r3, r0
 802421c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802421e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8024222:	681a      	ldr	r2, [r3, #0]
 8024224:	4b20      	ldr	r3, [pc, #128]	; (80242a8 <arm_softmax_s8+0x26e8>)
 8024226:	429a      	cmp	r2, r3
 8024228:	d10a      	bne.n	8024240 <arm_softmax_s8+0x2680>
 802422a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 802422e:	681b      	ldr	r3, [r3, #0]
 8024230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024234:	d104      	bne.n	8024240 <arm_softmax_s8+0x2680>
        result = Q31_MAX;
 8024236:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 802423a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802423e:	6013      	str	r3, [r2, #0]
    return result;
 8024240:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8024244:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8024246:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802424a:	681b      	ldr	r3, [r3, #0]
 802424c:	ea02 0103 	and.w	r1, r2, r3
 8024250:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024254:	681b      	ldr	r3, [r3, #0]
 8024256:	43da      	mvns	r2, r3
 8024258:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 802425c:	681b      	ldr	r3, [r3, #0]
 802425e:	4013      	ands	r3, r2
 8024260:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8024264:	404b      	eors	r3, r1
 8024266:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8024268:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802426c:	6819      	ldr	r1, [r3, #0]
 802426e:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8024272:	1c4b      	adds	r3, r1, #1
 8024274:	6013      	str	r3, [r2, #0]
 8024276:	2301      	movs	r3, #1
 8024278:	fa03 f201 	lsl.w	r2, r3, r1
 802427c:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8024280:	681b      	ldr	r3, [r3, #0]
 8024282:	4013      	ands	r3, r2
 8024284:	2b00      	cmp	r3, #0
 8024286:	d015      	beq.n	80242b4 <arm_softmax_s8+0x26f4>
 8024288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802428c:	e013      	b.n	80242b6 <arm_softmax_s8+0x26f6>
 802428e:	bf00      	nop
 8024290:	70f5a894 	.word	0x70f5a894
 8024294:	00000000 	.word	0x00000000
 8024298:	63afbe7b 	.word	0x63afbe7b
 802429c:	00000000 	.word	0x00000000
 80242a0:	2aaaaaab 	.word	0x2aaaaaab
 80242a4:	70f5a894 	.word	0x70f5a894
 80242a8:	63afbe7b 	.word	0x63afbe7b
 80242ac:	2aaaaaab 	.word	0x2aaaaaab
 80242b0:	00000000 	.word	0x00000000
 80242b4:	2200      	movs	r2, #0
 80242b6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80242ba:	601a      	str	r2, [r3, #0]
 80242bc:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 80242c0:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80242c4:	681b      	ldr	r3, [r3, #0]
 80242c6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80242c8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80242cc:	2300      	movs	r3, #0
 80242ce:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80242d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80242d4:	f04f 0300 	mov.w	r3, #0
 80242d8:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
    if ((m1 < 0) ^ (m2 < 0))
 80242dc:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80242e0:	681b      	ldr	r3, [r3, #0]
 80242e2:	0fdb      	lsrs	r3, r3, #31
 80242e4:	b2da      	uxtb	r2, r3
 80242e6:	2300      	movs	r3, #0
 80242e8:	4053      	eors	r3, r2
 80242ea:	b2db      	uxtb	r3, r3
 80242ec:	2b00      	cmp	r3, #0
 80242ee:	d00e      	beq.n	802430e <arm_softmax_s8+0x274e>
        mult = 1 - mult;
 80242f0:	f04f 0001 	mov.w	r0, #1
 80242f4:	f04f 0100 	mov.w	r1, #0
 80242f8:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80242fc:	1a84      	subs	r4, r0, r2
 80242fe:	66bc      	str	r4, [r7, #104]	; 0x68
 8024300:	eb61 0303 	sbc.w	r3, r1, r3
 8024304:	66fb      	str	r3, [r7, #108]	; 0x6c
 8024306:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 802430a:	e9c7 34a8 	strd	r3, r4, [r7, #672]	; 0x2a0
    mult = mult + (q63_t)m1 * m2;
 802430e:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8024312:	681b      	ldr	r3, [r3, #0]
 8024314:	4618      	mov	r0, r3
 8024316:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802431a:	a3da      	add	r3, pc, #872	; (adr r3, 8024684 <arm_softmax_s8+0x2ac4>)
 802431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024320:	fb02 f501 	mul.w	r5, r2, r1
 8024324:	fb00 f403 	mul.w	r4, r0, r3
 8024328:	442c      	add	r4, r5
 802432a:	fba0 0102 	umull	r0, r1, r0, r2
 802432e:	1863      	adds	r3, r4, r1
 8024330:	4619      	mov	r1, r3
 8024332:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8024336:	1814      	adds	r4, r2, r0
 8024338:	663c      	str	r4, [r7, #96]	; 0x60
 802433a:	414b      	adcs	r3, r1
 802433c:	667b      	str	r3, [r7, #100]	; 0x64
 802433e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8024342:	e9c7 34a8 	strd	r3, r4, [r7, #672]	; 0x2a0
    result = (int32_t)(mult / (1ll << 31));
 8024346:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 802434a:	4610      	mov	r0, r2
 802434c:	4619      	mov	r1, r3
 802434e:	2800      	cmp	r0, #0
 8024350:	f171 0300 	sbcs.w	r3, r1, #0
 8024354:	da06      	bge.n	8024364 <arm_softmax_s8+0x27a4>
 8024356:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802435a:	f04f 0300 	mov.w	r3, #0
 802435e:	1880      	adds	r0, r0, r2
 8024360:	eb43 0101 	adc.w	r1, r3, r1
 8024364:	f04f 0200 	mov.w	r2, #0
 8024368:	f04f 0300 	mov.w	r3, #0
 802436c:	0fc2      	lsrs	r2, r0, #31
 802436e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024372:	17cb      	asrs	r3, r1, #31
 8024374:	4610      	mov	r0, r2
 8024376:	4619      	mov	r1, r3
 8024378:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802437c:	4603      	mov	r3, r0
 802437e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024380:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8024384:	681a      	ldr	r2, [r3, #0]
 8024386:	4bbc      	ldr	r3, [pc, #752]	; (8024678 <arm_softmax_s8+0x2ab8>)
 8024388:	429a      	cmp	r2, r3
 802438a:	d10a      	bne.n	80243a2 <arm_softmax_s8+0x27e2>
 802438c:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8024390:	681b      	ldr	r3, [r3, #0]
 8024392:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024396:	d104      	bne.n	80243a2 <arm_softmax_s8+0x27e2>
        result = Q31_MAX;
 8024398:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802439c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80243a0:	6013      	str	r3, [r2, #0]
    return result;
 80243a2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80243a6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 80243a8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80243ac:	681b      	ldr	r3, [r3, #0]
 80243ae:	ea02 0103 	and.w	r1, r2, r3
 80243b2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80243b6:	681b      	ldr	r3, [r3, #0]
 80243b8:	43da      	mvns	r2, r3
 80243ba:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80243be:	681b      	ldr	r3, [r3, #0]
 80243c0:	4013      	ands	r3, r2
 80243c2:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80243c6:	404b      	eors	r3, r1
 80243c8:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 80243ca:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80243ce:	6819      	ldr	r1, [r3, #0]
 80243d0:	f507 7259 	add.w	r2, r7, #868	; 0x364
 80243d4:	1c4b      	adds	r3, r1, #1
 80243d6:	6013      	str	r3, [r2, #0]
 80243d8:	2301      	movs	r3, #1
 80243da:	fa03 f201 	lsl.w	r2, r3, r1
 80243de:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80243e2:	681b      	ldr	r3, [r3, #0]
 80243e4:	4013      	ands	r3, r2
 80243e6:	2b00      	cmp	r3, #0
 80243e8:	d002      	beq.n	80243f0 <arm_softmax_s8+0x2830>
 80243ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80243ee:	e000      	b.n	80243f2 <arm_softmax_s8+0x2832>
 80243f0:	2200      	movs	r2, #0
 80243f2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80243f6:	601a      	str	r2, [r3, #0]
 80243f8:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 80243fc:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024400:	681b      	ldr	r3, [r3, #0]
 8024402:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024404:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8024408:	2300      	movs	r3, #0
 802440a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802440c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024410:	f04f 0300 	mov.w	r3, #0
 8024414:	e9c7 23a4 	strd	r2, r3, [r7, #656]	; 0x290
    if ((m1 < 0) ^ (m2 < 0))
 8024418:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 802441c:	681b      	ldr	r3, [r3, #0]
 802441e:	0fdb      	lsrs	r3, r3, #31
 8024420:	b2da      	uxtb	r2, r3
 8024422:	2300      	movs	r3, #0
 8024424:	4053      	eors	r3, r2
 8024426:	b2db      	uxtb	r3, r3
 8024428:	2b00      	cmp	r3, #0
 802442a:	d00e      	beq.n	802444a <arm_softmax_s8+0x288a>
        mult = 1 - mult;
 802442c:	f04f 0001 	mov.w	r0, #1
 8024430:	f04f 0100 	mov.w	r1, #0
 8024434:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8024438:	1a84      	subs	r4, r0, r2
 802443a:	65bc      	str	r4, [r7, #88]	; 0x58
 802443c:	eb61 0303 	sbc.w	r3, r1, r3
 8024440:	65fb      	str	r3, [r7, #92]	; 0x5c
 8024442:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8024446:	e9c7 34a4 	strd	r3, r4, [r7, #656]	; 0x290
    mult = mult + (q63_t)m1 * m2;
 802444a:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 802444e:	681b      	ldr	r3, [r3, #0]
 8024450:	4618      	mov	r0, r3
 8024452:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024456:	a384      	add	r3, pc, #528	; (adr r3, 8024668 <arm_softmax_s8+0x2aa8>)
 8024458:	e9d3 2300 	ldrd	r2, r3, [r3]
 802445c:	fb02 f501 	mul.w	r5, r2, r1
 8024460:	fb00 f403 	mul.w	r4, r0, r3
 8024464:	442c      	add	r4, r5
 8024466:	fba0 0102 	umull	r0, r1, r0, r2
 802446a:	1863      	adds	r3, r4, r1
 802446c:	4619      	mov	r1, r3
 802446e:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8024472:	1814      	adds	r4, r2, r0
 8024474:	653c      	str	r4, [r7, #80]	; 0x50
 8024476:	414b      	adcs	r3, r1
 8024478:	657b      	str	r3, [r7, #84]	; 0x54
 802447a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 802447e:	e9c7 34a4 	strd	r3, r4, [r7, #656]	; 0x290
    result = (int32_t)(mult / (1ll << 31));
 8024482:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8024486:	4610      	mov	r0, r2
 8024488:	4619      	mov	r1, r3
 802448a:	2800      	cmp	r0, #0
 802448c:	f171 0300 	sbcs.w	r3, r1, #0
 8024490:	da06      	bge.n	80244a0 <arm_softmax_s8+0x28e0>
 8024492:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024496:	f04f 0300 	mov.w	r3, #0
 802449a:	1880      	adds	r0, r0, r2
 802449c:	eb43 0101 	adc.w	r1, r3, r1
 80244a0:	f04f 0200 	mov.w	r2, #0
 80244a4:	f04f 0300 	mov.w	r3, #0
 80244a8:	0fc2      	lsrs	r2, r0, #31
 80244aa:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80244ae:	17cb      	asrs	r3, r1, #31
 80244b0:	4610      	mov	r0, r2
 80244b2:	4619      	mov	r1, r3
 80244b4:	f507 7226 	add.w	r2, r7, #664	; 0x298
 80244b8:	4603      	mov	r3, r0
 80244ba:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80244bc:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80244c0:	681a      	ldr	r2, [r3, #0]
 80244c2:	4b6e      	ldr	r3, [pc, #440]	; (802467c <arm_softmax_s8+0x2abc>)
 80244c4:	429a      	cmp	r2, r3
 80244c6:	d10a      	bne.n	80244de <arm_softmax_s8+0x291e>
 80244c8:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80244cc:	681b      	ldr	r3, [r3, #0]
 80244ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80244d2:	d104      	bne.n	80244de <arm_softmax_s8+0x291e>
        result = Q31_MAX;
 80244d4:	f507 7226 	add.w	r2, r7, #664	; 0x298
 80244d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80244dc:	6013      	str	r3, [r2, #0]
    return result;
 80244de:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80244e2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 80244e4:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80244e8:	681b      	ldr	r3, [r3, #0]
 80244ea:	ea02 0103 	and.w	r1, r2, r3
 80244ee:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80244f2:	681b      	ldr	r3, [r3, #0]
 80244f4:	43da      	mvns	r2, r3
 80244f6:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80244fa:	681b      	ldr	r3, [r3, #0]
 80244fc:	4013      	ands	r3, r2
 80244fe:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8024502:	404b      	eors	r3, r1
 8024504:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 8024506:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802450a:	6819      	ldr	r1, [r3, #0]
 802450c:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8024510:	1c4b      	adds	r3, r1, #1
 8024512:	6013      	str	r3, [r2, #0]
 8024514:	2301      	movs	r3, #1
 8024516:	fa03 f201 	lsl.w	r2, r3, r1
 802451a:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 802451e:	681b      	ldr	r3, [r3, #0]
 8024520:	4013      	ands	r3, r2
 8024522:	2b00      	cmp	r3, #0
 8024524:	d002      	beq.n	802452c <arm_softmax_s8+0x296c>
 8024526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802452a:	e000      	b.n	802452e <arm_softmax_s8+0x296e>
 802452c:	2200      	movs	r2, #0
 802452e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024532:	601a      	str	r2, [r3, #0]
 8024534:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8024538:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 802453c:	681b      	ldr	r3, [r3, #0]
 802453e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024540:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8024544:	2300      	movs	r3, #0
 8024546:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802454c:	f04f 0300 	mov.w	r3, #0
 8024550:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
    if ((m1 < 0) ^ (m2 < 0))
 8024554:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8024558:	681b      	ldr	r3, [r3, #0]
 802455a:	0fdb      	lsrs	r3, r3, #31
 802455c:	b2da      	uxtb	r2, r3
 802455e:	2300      	movs	r3, #0
 8024560:	4053      	eors	r3, r2
 8024562:	b2db      	uxtb	r3, r3
 8024564:	2b00      	cmp	r3, #0
 8024566:	d00e      	beq.n	8024586 <arm_softmax_s8+0x29c6>
        mult = 1 - mult;
 8024568:	f04f 0001 	mov.w	r0, #1
 802456c:	f04f 0100 	mov.w	r1, #0
 8024570:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8024574:	1a84      	subs	r4, r0, r2
 8024576:	64bc      	str	r4, [r7, #72]	; 0x48
 8024578:	eb61 0303 	sbc.w	r3, r1, r3
 802457c:	64fb      	str	r3, [r7, #76]	; 0x4c
 802457e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8024582:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    mult = mult + (q63_t)m1 * m2;
 8024586:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 802458a:	681b      	ldr	r3, [r3, #0]
 802458c:	4618      	mov	r0, r3
 802458e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024592:	a337      	add	r3, pc, #220	; (adr r3, 8024670 <arm_softmax_s8+0x2ab0>)
 8024594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024598:	fb02 f501 	mul.w	r5, r2, r1
 802459c:	fb00 f403 	mul.w	r4, r0, r3
 80245a0:	442c      	add	r4, r5
 80245a2:	fba0 0102 	umull	r0, r1, r0, r2
 80245a6:	1863      	adds	r3, r4, r1
 80245a8:	4619      	mov	r1, r3
 80245aa:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80245ae:	1814      	adds	r4, r2, r0
 80245b0:	643c      	str	r4, [r7, #64]	; 0x40
 80245b2:	414b      	adcs	r3, r1
 80245b4:	647b      	str	r3, [r7, #68]	; 0x44
 80245b6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80245ba:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    result = (int32_t)(mult / (1ll << 31));
 80245be:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80245c2:	4610      	mov	r0, r2
 80245c4:	4619      	mov	r1, r3
 80245c6:	2800      	cmp	r0, #0
 80245c8:	f171 0300 	sbcs.w	r3, r1, #0
 80245cc:	da06      	bge.n	80245dc <arm_softmax_s8+0x2a1c>
 80245ce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80245d2:	f04f 0300 	mov.w	r3, #0
 80245d6:	1880      	adds	r0, r0, r2
 80245d8:	eb43 0101 	adc.w	r1, r3, r1
 80245dc:	f04f 0200 	mov.w	r2, #0
 80245e0:	f04f 0300 	mov.w	r3, #0
 80245e4:	0fc2      	lsrs	r2, r0, #31
 80245e6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80245ea:	17cb      	asrs	r3, r1, #31
 80245ec:	4610      	mov	r0, r2
 80245ee:	4619      	mov	r1, r3
 80245f0:	f507 7222 	add.w	r2, r7, #648	; 0x288
 80245f4:	4603      	mov	r3, r0
 80245f6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80245f8:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80245fc:	681a      	ldr	r2, [r3, #0]
 80245fe:	4b20      	ldr	r3, [pc, #128]	; (8024680 <arm_softmax_s8+0x2ac0>)
 8024600:	429a      	cmp	r2, r3
 8024602:	d10a      	bne.n	802461a <arm_softmax_s8+0x2a5a>
 8024604:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8024608:	681b      	ldr	r3, [r3, #0]
 802460a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802460e:	d104      	bne.n	802461a <arm_softmax_s8+0x2a5a>
        result = Q31_MAX;
 8024610:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8024614:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024618:	6013      	str	r3, [r2, #0]
    return result;
 802461a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 802461e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8024620:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024624:	681b      	ldr	r3, [r3, #0]
 8024626:	ea02 0103 	and.w	r1, r2, r3
 802462a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802462e:	681b      	ldr	r3, [r3, #0]
 8024630:	43da      	mvns	r2, r3
 8024632:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024636:	681b      	ldr	r3, [r3, #0]
 8024638:	4013      	ands	r3, r2
 802463a:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 802463e:	404b      	eors	r3, r1
 8024640:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 8024642:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8024646:	6819      	ldr	r1, [r3, #0]
 8024648:	f507 7259 	add.w	r2, r7, #868	; 0x364
 802464c:	1c4b      	adds	r3, r1, #1
 802464e:	6013      	str	r3, [r2, #0]
 8024650:	2301      	movs	r3, #1
 8024652:	fa03 f201 	lsl.w	r2, r3, r1
 8024656:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 802465a:	681b      	ldr	r3, [r3, #0]
 802465c:	4013      	ands	r3, r2
 802465e:	2b00      	cmp	r3, #0
 8024660:	d014      	beq.n	802468c <arm_softmax_s8+0x2acc>
 8024662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024666:	e012      	b.n	802468e <arm_softmax_s8+0x2ace>
 8024668:	2f16ac6c 	.word	0x2f16ac6c
 802466c:	00000000 	.word	0x00000000
 8024670:	1152aaa4 	.word	0x1152aaa4
 8024674:	00000000 	.word	0x00000000
 8024678:	4da2cbf2 	.word	0x4da2cbf2
 802467c:	2f16ac6c 	.word	0x2f16ac6c
 8024680:	1152aaa4 	.word	0x1152aaa4
 8024684:	4da2cbf2 	.word	0x4da2cbf2
 8024688:	00000000 	.word	0x00000000
 802468c:	2200      	movs	r2, #0
 802468e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024692:	601a      	str	r2, [r3, #0]
 8024694:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8024698:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 802469c:	681b      	ldr	r3, [r3, #0]
 802469e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80246a0:	f507 721e 	add.w	r2, r7, #632	; 0x278
 80246a4:	2300      	movs	r3, #0
 80246a6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80246a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80246ac:	f04f 0300 	mov.w	r3, #0
 80246b0:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
    if ((m1 < 0) ^ (m2 < 0))
 80246b4:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80246b8:	681b      	ldr	r3, [r3, #0]
 80246ba:	0fdb      	lsrs	r3, r3, #31
 80246bc:	b2da      	uxtb	r2, r3
 80246be:	2300      	movs	r3, #0
 80246c0:	4053      	eors	r3, r2
 80246c2:	b2db      	uxtb	r3, r3
 80246c4:	2b00      	cmp	r3, #0
 80246c6:	d00e      	beq.n	80246e6 <arm_softmax_s8+0x2b26>
        mult = 1 - mult;
 80246c8:	f04f 0001 	mov.w	r0, #1
 80246cc:	f04f 0100 	mov.w	r1, #0
 80246d0:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80246d4:	1a84      	subs	r4, r0, r2
 80246d6:	63bc      	str	r4, [r7, #56]	; 0x38
 80246d8:	eb61 0303 	sbc.w	r3, r1, r3
 80246dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80246de:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80246e2:	e9c7 349c 	strd	r3, r4, [r7, #624]	; 0x270
    mult = mult + (q63_t)m1 * m2;
 80246e6:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80246ea:	681b      	ldr	r3, [r3, #0]
 80246ec:	4618      	mov	r0, r3
 80246ee:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80246f2:	a3d1      	add	r3, pc, #836	; (adr r3, 8024a38 <arm_softmax_s8+0x2e78>)
 80246f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246f8:	fb02 f501 	mul.w	r5, r2, r1
 80246fc:	fb00 f403 	mul.w	r4, r0, r3
 8024700:	442c      	add	r4, r5
 8024702:	fba0 0102 	umull	r0, r1, r0, r2
 8024706:	1863      	adds	r3, r4, r1
 8024708:	4619      	mov	r1, r3
 802470a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 802470e:	1814      	adds	r4, r2, r0
 8024710:	633c      	str	r4, [r7, #48]	; 0x30
 8024712:	414b      	adcs	r3, r1
 8024714:	637b      	str	r3, [r7, #52]	; 0x34
 8024716:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 802471a:	e9c7 349c 	strd	r3, r4, [r7, #624]	; 0x270
    result = (int32_t)(mult / (1ll << 31));
 802471e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8024722:	4610      	mov	r0, r2
 8024724:	4619      	mov	r1, r3
 8024726:	2800      	cmp	r0, #0
 8024728:	f171 0300 	sbcs.w	r3, r1, #0
 802472c:	da06      	bge.n	802473c <arm_softmax_s8+0x2b7c>
 802472e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024732:	f04f 0300 	mov.w	r3, #0
 8024736:	1880      	adds	r0, r0, r2
 8024738:	eb43 0101 	adc.w	r1, r3, r1
 802473c:	f04f 0200 	mov.w	r2, #0
 8024740:	f04f 0300 	mov.w	r3, #0
 8024744:	0fc2      	lsrs	r2, r0, #31
 8024746:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802474a:	17cb      	asrs	r3, r1, #31
 802474c:	4610      	mov	r0, r2
 802474e:	4619      	mov	r1, r3
 8024750:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8024754:	4603      	mov	r3, r0
 8024756:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024758:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 802475c:	681a      	ldr	r2, [r3, #0]
 802475e:	4bb4      	ldr	r3, [pc, #720]	; (8024a30 <arm_softmax_s8+0x2e70>)
 8024760:	429a      	cmp	r2, r3
 8024762:	d10a      	bne.n	802477a <arm_softmax_s8+0x2bba>
 8024764:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8024768:	681b      	ldr	r3, [r3, #0]
 802476a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802476e:	d104      	bne.n	802477a <arm_softmax_s8+0x2bba>
        result = Q31_MAX;
 8024770:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8024774:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024778:	6013      	str	r3, [r2, #0]
    return result;
 802477a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 802477e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8024780:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024784:	681b      	ldr	r3, [r3, #0]
 8024786:	ea02 0103 	and.w	r1, r2, r3
 802478a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802478e:	681b      	ldr	r3, [r3, #0]
 8024790:	43da      	mvns	r2, r3
 8024792:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024796:	681b      	ldr	r3, [r3, #0]
 8024798:	4013      	ands	r3, r2
 802479a:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 802479e:	404b      	eors	r3, r1
 80247a0:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 80247a2:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80247a6:	6819      	ldr	r1, [r3, #0]
 80247a8:	f507 7259 	add.w	r2, r7, #868	; 0x364
 80247ac:	1c4b      	adds	r3, r1, #1
 80247ae:	6013      	str	r3, [r2, #0]
 80247b0:	2301      	movs	r3, #1
 80247b2:	fa03 f201 	lsl.w	r2, r3, r1
 80247b6:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80247ba:	681b      	ldr	r3, [r3, #0]
 80247bc:	4013      	ands	r3, r2
 80247be:	2b00      	cmp	r3, #0
 80247c0:	d002      	beq.n	80247c8 <arm_softmax_s8+0x2c08>
 80247c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80247c6:	e000      	b.n	80247ca <arm_softmax_s8+0x2c0a>
 80247c8:	2200      	movs	r2, #0
 80247ca:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80247ce:	601a      	str	r2, [r3, #0]
 80247d0:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 80247d4:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80247d8:	681b      	ldr	r3, [r3, #0]
 80247da:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80247dc:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80247e0:	2300      	movs	r3, #0
 80247e2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80247e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80247e8:	f04f 0300 	mov.w	r3, #0
 80247ec:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
    if ((m1 < 0) ^ (m2 < 0))
 80247f0:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80247f4:	681b      	ldr	r3, [r3, #0]
 80247f6:	0fdb      	lsrs	r3, r3, #31
 80247f8:	b2da      	uxtb	r2, r3
 80247fa:	2300      	movs	r3, #0
 80247fc:	4053      	eors	r3, r2
 80247fe:	b2db      	uxtb	r3, r3
 8024800:	2b00      	cmp	r3, #0
 8024802:	d00e      	beq.n	8024822 <arm_softmax_s8+0x2c62>
        mult = 1 - mult;
 8024804:	f04f 0001 	mov.w	r0, #1
 8024808:	f04f 0100 	mov.w	r1, #0
 802480c:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8024810:	1a84      	subs	r4, r0, r2
 8024812:	62bc      	str	r4, [r7, #40]	; 0x28
 8024814:	eb61 0303 	sbc.w	r3, r1, r3
 8024818:	62fb      	str	r3, [r7, #44]	; 0x2c
 802481a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 802481e:	e9c7 3498 	strd	r3, r4, [r7, #608]	; 0x260
    mult = mult + (q63_t)m1 * m2;
 8024822:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8024826:	681b      	ldr	r3, [r3, #0]
 8024828:	4618      	mov	r0, r3
 802482a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802482e:	4a81      	ldr	r2, [pc, #516]	; (8024a34 <arm_softmax_s8+0x2e74>)
 8024830:	f04f 0300 	mov.w	r3, #0
 8024834:	fb02 f501 	mul.w	r5, r2, r1
 8024838:	fb00 f403 	mul.w	r4, r0, r3
 802483c:	442c      	add	r4, r5
 802483e:	fba0 0102 	umull	r0, r1, r0, r2
 8024842:	1863      	adds	r3, r4, r1
 8024844:	4619      	mov	r1, r3
 8024846:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 802484a:	1814      	adds	r4, r2, r0
 802484c:	623c      	str	r4, [r7, #32]
 802484e:	414b      	adcs	r3, r1
 8024850:	627b      	str	r3, [r7, #36]	; 0x24
 8024852:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8024856:	e9c7 3498 	strd	r3, r4, [r7, #608]	; 0x260
    result = (int32_t)(mult / (1ll << 31));
 802485a:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 802485e:	4610      	mov	r0, r2
 8024860:	4619      	mov	r1, r3
 8024862:	2800      	cmp	r0, #0
 8024864:	f171 0300 	sbcs.w	r3, r1, #0
 8024868:	da06      	bge.n	8024878 <arm_softmax_s8+0x2cb8>
 802486a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802486e:	f04f 0300 	mov.w	r3, #0
 8024872:	1880      	adds	r0, r0, r2
 8024874:	eb43 0101 	adc.w	r1, r3, r1
 8024878:	f04f 0200 	mov.w	r2, #0
 802487c:	f04f 0300 	mov.w	r3, #0
 8024880:	0fc2      	lsrs	r2, r0, #31
 8024882:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024886:	17cb      	asrs	r3, r1, #31
 8024888:	4610      	mov	r0, r2
 802488a:	4619      	mov	r1, r3
 802488c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8024890:	4603      	mov	r3, r0
 8024892:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024894:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8024898:	681a      	ldr	r2, [r3, #0]
 802489a:	4b66      	ldr	r3, [pc, #408]	; (8024a34 <arm_softmax_s8+0x2e74>)
 802489c:	429a      	cmp	r2, r3
 802489e:	d10a      	bne.n	80248b6 <arm_softmax_s8+0x2cf6>
 80248a0:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80248a4:	681b      	ldr	r3, [r3, #0]
 80248a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80248aa:	d104      	bne.n	80248b6 <arm_softmax_s8+0x2cf6>
        result = Q31_MAX;
 80248ac:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80248b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80248b4:	6013      	str	r3, [r2, #0]
    return result;
 80248b6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80248ba:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 80248bc:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80248c0:	681b      	ldr	r3, [r3, #0]
 80248c2:	ea02 0103 	and.w	r1, r2, r3
 80248c6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80248ca:	681b      	ldr	r3, [r3, #0]
 80248cc:	43da      	mvns	r2, r3
 80248ce:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80248d2:	681b      	ldr	r3, [r3, #0]
 80248d4:	4013      	ands	r3, r2
 80248d6:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80248da:	404b      	eors	r3, r1
 80248dc:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 80248de:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80248e2:	6819      	ldr	r1, [r3, #0]
 80248e4:	f507 7259 	add.w	r2, r7, #868	; 0x364
 80248e8:	1c4b      	adds	r3, r1, #1
 80248ea:	6013      	str	r3, [r2, #0]
 80248ec:	2301      	movs	r3, #1
 80248ee:	fa03 f201 	lsl.w	r2, r3, r1
 80248f2:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80248f6:	681b      	ldr	r3, [r3, #0]
 80248f8:	4013      	ands	r3, r2
 80248fa:	2b00      	cmp	r3, #0
 80248fc:	d002      	beq.n	8024904 <arm_softmax_s8+0x2d44>
 80248fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024902:	e000      	b.n	8024906 <arm_softmax_s8+0x2d46>
 8024904:	2200      	movs	r2, #0
 8024906:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802490a:	601a      	str	r2, [r3, #0]
 802490c:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8024910:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024914:	681b      	ldr	r3, [r3, #0]
 8024916:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024918:	f507 7216 	add.w	r2, r7, #600	; 0x258
 802491c:	2300      	movs	r3, #0
 802491e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024924:	f04f 0300 	mov.w	r3, #0
 8024928:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
    if ((m1 < 0) ^ (m2 < 0))
 802492c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8024930:	681b      	ldr	r3, [r3, #0]
 8024932:	0fdb      	lsrs	r3, r3, #31
 8024934:	b2da      	uxtb	r2, r3
 8024936:	2300      	movs	r3, #0
 8024938:	4053      	eors	r3, r2
 802493a:	b2db      	uxtb	r3, r3
 802493c:	2b00      	cmp	r3, #0
 802493e:	d00e      	beq.n	802495e <arm_softmax_s8+0x2d9e>
        mult = 1 - mult;
 8024940:	f04f 0001 	mov.w	r0, #1
 8024944:	f04f 0100 	mov.w	r1, #0
 8024948:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 802494c:	1a84      	subs	r4, r0, r2
 802494e:	61bc      	str	r4, [r7, #24]
 8024950:	eb61 0303 	sbc.w	r3, r1, r3
 8024954:	61fb      	str	r3, [r7, #28]
 8024956:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 802495a:	e9c7 3494 	strd	r3, r4, [r7, #592]	; 0x250
    mult = mult + (q63_t)m1 * m2;
 802495e:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8024962:	681b      	ldr	r3, [r3, #0]
 8024964:	4618      	mov	r0, r3
 8024966:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802496a:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 802496e:	f04f 0300 	mov.w	r3, #0
 8024972:	fb02 f501 	mul.w	r5, r2, r1
 8024976:	fb00 f403 	mul.w	r4, r0, r3
 802497a:	442c      	add	r4, r5
 802497c:	fba0 0102 	umull	r0, r1, r0, r2
 8024980:	1863      	adds	r3, r4, r1
 8024982:	4619      	mov	r1, r3
 8024984:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8024988:	1814      	adds	r4, r2, r0
 802498a:	613c      	str	r4, [r7, #16]
 802498c:	414b      	adcs	r3, r1
 802498e:	617b      	str	r3, [r7, #20]
 8024990:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8024994:	e9c7 3494 	strd	r3, r4, [r7, #592]	; 0x250
    result = (int32_t)(mult / (1ll << 31));
 8024998:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 802499c:	4610      	mov	r0, r2
 802499e:	4619      	mov	r1, r3
 80249a0:	2800      	cmp	r0, #0
 80249a2:	f171 0300 	sbcs.w	r3, r1, #0
 80249a6:	da06      	bge.n	80249b6 <arm_softmax_s8+0x2df6>
 80249a8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80249ac:	f04f 0300 	mov.w	r3, #0
 80249b0:	1880      	adds	r0, r0, r2
 80249b2:	eb43 0101 	adc.w	r1, r3, r1
 80249b6:	f04f 0200 	mov.w	r2, #0
 80249ba:	f04f 0300 	mov.w	r3, #0
 80249be:	0fc2      	lsrs	r2, r0, #31
 80249c0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80249c4:	17cb      	asrs	r3, r1, #31
 80249c6:	4610      	mov	r0, r2
 80249c8:	4619      	mov	r1, r3
 80249ca:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80249ce:	4603      	mov	r3, r0
 80249d0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80249d2:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80249d6:	681b      	ldr	r3, [r3, #0]
 80249d8:	2bf2      	cmp	r3, #242	; 0xf2
 80249da:	d10a      	bne.n	80249f2 <arm_softmax_s8+0x2e32>
 80249dc:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80249e0:	681b      	ldr	r3, [r3, #0]
 80249e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80249e6:	d104      	bne.n	80249f2 <arm_softmax_s8+0x2e32>
        result = Q31_MAX;
 80249e8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80249ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80249f0:	6013      	str	r3, [r2, #0]
    return result;
 80249f2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80249f6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 80249f8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80249fc:	681b      	ldr	r3, [r3, #0]
 80249fe:	ea02 0103 	and.w	r1, r2, r3
 8024a02:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024a06:	681b      	ldr	r3, [r3, #0]
 8024a08:	43da      	mvns	r2, r3
 8024a0a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024a0e:	681b      	ldr	r3, [r3, #0]
 8024a10:	4013      	ands	r3, r2
 8024a12:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8024a16:	404b      	eors	r3, r1
 8024a18:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 8024a1a:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8024a1e:	681b      	ldr	r3, [r3, #0]
 8024a20:	2b00      	cmp	r3, #0
 8024a22:	d10d      	bne.n	8024a40 <arm_softmax_s8+0x2e80>
 8024a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024a28:	e00b      	b.n	8024a42 <arm_softmax_s8+0x2e82>
 8024a2a:	bf00      	nop
 8024a2c:	f3af 8000 	nop.w
 8024a30:	02582ab7 	.word	0x02582ab7
 8024a34:	000afe11 	.word	0x000afe11
 8024a38:	02582ab7 	.word	0x02582ab7
 8024a3c:	00000000 	.word	0x00000000
 8024a40:	2200      	movs	r2, #0
 8024a42:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024a46:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8024a48:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024a4c:	681b      	ldr	r3, [r3, #0]
 8024a4e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8024a52:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024a56:	681b      	ldr	r3, [r3, #0]
 8024a58:	43da      	mvns	r2, r3
 8024a5a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024a5e:	681b      	ldr	r3, [r3, #0]
 8024a60:	4013      	ands	r3, r2
 8024a62:	4059      	eors	r1, r3
 8024a64:	f507 7261 	add.w	r2, r7, #900	; 0x384
 8024a68:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8024a6c:	6013      	str	r3, [r2, #0]
 8024a6e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8024a72:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8024a74:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8024a78:	2300      	movs	r3, #0
 8024a7a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024a7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024a80:	f04f 0300 	mov.w	r3, #0
 8024a84:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
    if ((m1 < 0) ^ (m2 < 0))
 8024a88:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8024a8c:	681b      	ldr	r3, [r3, #0]
 8024a8e:	0fdb      	lsrs	r3, r3, #31
 8024a90:	b2da      	uxtb	r2, r3
 8024a92:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8024a96:	681b      	ldr	r3, [r3, #0]
 8024a98:	0fdb      	lsrs	r3, r3, #31
 8024a9a:	b2db      	uxtb	r3, r3
 8024a9c:	4053      	eors	r3, r2
 8024a9e:	b2db      	uxtb	r3, r3
 8024aa0:	2b00      	cmp	r3, #0
 8024aa2:	d00e      	beq.n	8024ac2 <arm_softmax_s8+0x2f02>
        mult = 1 - mult;
 8024aa4:	f04f 0001 	mov.w	r0, #1
 8024aa8:	f04f 0100 	mov.w	r1, #0
 8024aac:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8024ab0:	1a84      	subs	r4, r0, r2
 8024ab2:	60bc      	str	r4, [r7, #8]
 8024ab4:	eb61 0303 	sbc.w	r3, r1, r3
 8024ab8:	60fb      	str	r3, [r7, #12]
 8024aba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8024abe:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    mult = mult + (q63_t)m1 * m2;
 8024ac2:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8024ac6:	681b      	ldr	r3, [r3, #0]
 8024ac8:	4618      	mov	r0, r3
 8024aca:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024ace:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8024ad2:	681b      	ldr	r3, [r3, #0]
 8024ad4:	461a      	mov	r2, r3
 8024ad6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024ada:	fb02 f501 	mul.w	r5, r2, r1
 8024ade:	fb00 f403 	mul.w	r4, r0, r3
 8024ae2:	442c      	add	r4, r5
 8024ae4:	fba0 0102 	umull	r0, r1, r0, r2
 8024ae8:	1863      	adds	r3, r4, r1
 8024aea:	4619      	mov	r1, r3
 8024aec:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8024af0:	1814      	adds	r4, r2, r0
 8024af2:	603c      	str	r4, [r7, #0]
 8024af4:	414b      	adcs	r3, r1
 8024af6:	607b      	str	r3, [r7, #4]
 8024af8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8024afc:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    result = (int32_t)(mult / (1ll << 31));
 8024b00:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8024b04:	4610      	mov	r0, r2
 8024b06:	4619      	mov	r1, r3
 8024b08:	2800      	cmp	r0, #0
 8024b0a:	f171 0300 	sbcs.w	r3, r1, #0
 8024b0e:	da06      	bge.n	8024b1e <arm_softmax_s8+0x2f5e>
 8024b10:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024b14:	f04f 0300 	mov.w	r3, #0
 8024b18:	1880      	adds	r0, r0, r2
 8024b1a:	eb43 0101 	adc.w	r1, r3, r1
 8024b1e:	f04f 0200 	mov.w	r2, #0
 8024b22:	f04f 0300 	mov.w	r3, #0
 8024b26:	0fc2      	lsrs	r2, r0, #31
 8024b28:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024b2c:	17cb      	asrs	r3, r1, #31
 8024b2e:	4610      	mov	r0, r2
 8024b30:	4619      	mov	r1, r3
 8024b32:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8024b36:	4603      	mov	r3, r0
 8024b38:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024b3a:	f507 7261 	add.w	r2, r7, #900	; 0x384
 8024b3e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8024b42:	6812      	ldr	r2, [r2, #0]
 8024b44:	681b      	ldr	r3, [r3, #0]
 8024b46:	429a      	cmp	r2, r3
 8024b48:	d10a      	bne.n	8024b60 <arm_softmax_s8+0x2fa0>
 8024b4a:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8024b4e:	681b      	ldr	r3, [r3, #0]
 8024b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024b54:	d104      	bne.n	8024b60 <arm_softmax_s8+0x2fa0>
        result = Q31_MAX;
 8024b56:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8024b5a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024b5e:	6013      	str	r3, [r2, #0]
    return result;
 8024b60:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8024b64:	681a      	ldr	r2, [r3, #0]
 8024b66:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 8024b6a:	601a      	str	r2, [r3, #0]
 8024b6c:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8024b70:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 8024b74:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024b76:	f507 7265 	add.w	r2, r7, #916	; 0x394
 8024b7a:	2300      	movs	r3, #0
 8024b7c:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8024b7e:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8024b82:	2201      	movs	r2, #1
 8024b84:	681b      	ldr	r3, [r3, #0]
 8024b86:	fa02 f303 	lsl.w	r3, r2, r3
 8024b8a:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8024b8e:	3b01      	subs	r3, #1
 8024b90:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8024b92:	f507 7163 	add.w	r1, r7, #908	; 0x38c
 8024b96:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 8024b9a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8024b9e:	6812      	ldr	r2, [r2, #0]
 8024ba0:	681b      	ldr	r3, [r3, #0]
 8024ba2:	4013      	ands	r3, r2
 8024ba4:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8024ba6:	f507 7165 	add.w	r1, r7, #916	; 0x394
 8024baa:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 8024bae:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8024bb2:	6812      	ldr	r2, [r2, #0]
 8024bb4:	681b      	ldr	r3, [r3, #0]
 8024bb6:	fa42 f303 	asr.w	r3, r2, r3
 8024bba:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8024bbc:	f507 7262 	add.w	r2, r7, #904	; 0x388
 8024bc0:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8024bc4:	681b      	ldr	r3, [r3, #0]
 8024bc6:	105b      	asrs	r3, r3, #1
 8024bc8:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8024bca:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8024bce:	681b      	ldr	r3, [r3, #0]
 8024bd0:	2b00      	cmp	r3, #0
 8024bd2:	da06      	bge.n	8024be2 <arm_softmax_s8+0x3022>
        threshold++;
 8024bd4:	f507 7262 	add.w	r2, r7, #904	; 0x388
 8024bd8:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8024bdc:	681b      	ldr	r3, [r3, #0]
 8024bde:	3301      	adds	r3, #1
 8024be0:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8024be2:	f507 7263 	add.w	r2, r7, #908	; 0x38c
 8024be6:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8024bea:	6812      	ldr	r2, [r2, #0]
 8024bec:	681b      	ldr	r3, [r3, #0]
 8024bee:	429a      	cmp	r2, r3
 8024bf0:	dd06      	ble.n	8024c00 <arm_softmax_s8+0x3040>
        result++;
 8024bf2:	f507 7265 	add.w	r2, r7, #916	; 0x394
 8024bf6:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8024bfa:	681b      	ldr	r3, [r3, #0]
 8024bfc:	3301      	adds	r3, #1
 8024bfe:	6013      	str	r3, [r2, #0]
    return result;
 8024c00:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8024c04:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 8024c06:	3b80      	subs	r3, #128	; 0x80
 8024c08:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 8024c0c:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 8024c10:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8024c14:	db09      	blt.n	8024c2a <arm_softmax_s8+0x306a>
 8024c16:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 8024c1a:	2b7e      	cmp	r3, #126	; 0x7e
 8024c1c:	dc03      	bgt.n	8024c26 <arm_softmax_s8+0x3066>
 8024c1e:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 8024c22:	b259      	sxtb	r1, r3
 8024c24:	e003      	b.n	8024c2e <arm_softmax_s8+0x306e>
 8024c26:	217f      	movs	r1, #127	; 0x7f
 8024c28:	e001      	b.n	8024c2e <arm_softmax_s8+0x306e>
 8024c2a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8024c2e:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8024c32:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8024c36:	441a      	add	r2, r3
 8024c38:	460b      	mov	r3, r1
 8024c3a:	7013      	strb	r3, [r2, #0]
 8024c3c:	e006      	b.n	8024c4c <arm_softmax_s8+0x308c>
            }
            else
            {
                output[col] = -128;
 8024c3e:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8024c42:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8024c46:	441a      	add	r2, r3
 8024c48:	2380      	movs	r3, #128	; 0x80
 8024c4a:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 8024c4c:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8024c50:	3301      	adds	r3, #1
 8024c52:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8024c56:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8024c5a:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8024c5e:	681b      	ldr	r3, [r3, #0]
 8024c60:	429a      	cmp	r2, r3
 8024c62:	f6fe ae81 	blt.w	8023968 <arm_softmax_s8+0x1da8>
            }
        }
        input += row_size;
 8024c66:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8024c6a:	6819      	ldr	r1, [r3, #0]
 8024c6c:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8024c70:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8024c74:	681b      	ldr	r3, [r3, #0]
 8024c76:	440b      	add	r3, r1
 8024c78:	6013      	str	r3, [r2, #0]
        output += row_size;
 8024c7a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8024c7e:	681a      	ldr	r2, [r3, #0]
 8024c80:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8024c84:	4413      	add	r3, r2
 8024c86:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8024c8a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8024c8e:	3301      	adds	r3, #1
 8024c90:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 8024c94:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8024c98:	f8d7 25f0 	ldr.w	r2, [r7, #1520]	; 0x5f0
 8024c9c:	681b      	ldr	r3, [r3, #0]
 8024c9e:	429a      	cmp	r2, r3
 8024ca0:	f6fc afae 	blt.w	8021c00 <arm_softmax_s8+0x40>
    }

#endif
}
 8024ca4:	bf00      	nop
 8024ca6:	bf00      	nop
 8024ca8:	f507 67bf 	add.w	r7, r7, #1528	; 0x5f8
 8024cac:	46bd      	mov	sp, r7
 8024cae:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8024cb2:	4770      	bx	lr

08024cb4 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 8024cb4:	b580      	push	{r7, lr}
 8024cb6:	b082      	sub	sp, #8
 8024cb8:	af00      	add	r7, sp, #0
 8024cba:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 8024cbc:	687b      	ldr	r3, [r7, #4]
 8024cbe:	2200      	movs	r2, #0
 8024cc0:	2104      	movs	r1, #4
 8024cc2:	4618      	mov	r0, r3
 8024cc4:	f7e4 fce6 	bl	8009694 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8024cc8:	4603      	mov	r3, r0
  }
 8024cca:	4618      	mov	r0, r3
 8024ccc:	3708      	adds	r7, #8
 8024cce:	46bd      	mov	sp, r7
 8024cd0:	bd80      	pop	{r7, pc}

08024cd2 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 8024cd2:	b580      	push	{r7, lr}
 8024cd4:	b082      	sub	sp, #8
 8024cd6:	af00      	add	r7, sp, #0
 8024cd8:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 8024cda:	687b      	ldr	r3, [r7, #4]
 8024cdc:	2200      	movs	r2, #0
 8024cde:	210a      	movs	r1, #10
 8024ce0:	4618      	mov	r0, r3
 8024ce2:	f7e4 fca9 	bl	8009638 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8024ce6:	4603      	mov	r3, r0
 8024ce8:	b2db      	uxtb	r3, r3
  }
 8024cea:	4618      	mov	r0, r3
 8024cec:	3708      	adds	r7, #8
 8024cee:	46bd      	mov	sp, r7
 8024cf0:	bd80      	pop	{r7, pc}

08024cf2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 8024cf2:	b580      	push	{r7, lr}
 8024cf4:	b084      	sub	sp, #16
 8024cf6:	af00      	add	r7, sp, #0
 8024cf8:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 8024cfa:	687b      	ldr	r3, [r7, #4]
 8024cfc:	2b00      	cmp	r3, #0
 8024cfe:	d101      	bne.n	8024d04 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 8024d00:	f000 fab5 	bl	802526e <abort>

  return std::max(
      op_code->builtin_code(),
 8024d04:	6878      	ldr	r0, [r7, #4]
 8024d06:	f7ff ffe4 	bl	8024cd2 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 8024d0a:	4603      	mov	r3, r0
 8024d0c:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 8024d0e:	6878      	ldr	r0, [r7, #4]
 8024d10:	f7ff ffd0 	bl	8024cb4 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 8024d14:	4603      	mov	r3, r0
 8024d16:	b2db      	uxtb	r3, r3
 8024d18:	73fb      	strb	r3, [r7, #15]
 8024d1a:	f107 020f 	add.w	r2, r7, #15
 8024d1e:	f107 030e 	add.w	r3, r7, #14
 8024d22:	4611      	mov	r1, r2
 8024d24:	4618      	mov	r0, r3
 8024d26:	f000 f806 	bl	8024d36 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 8024d2a:	4603      	mov	r3, r0
 8024d2c:	781b      	ldrb	r3, [r3, #0]
}
 8024d2e:	4618      	mov	r0, r3
 8024d30:	3710      	adds	r7, #16
 8024d32:	46bd      	mov	sp, r7
 8024d34:	bd80      	pop	{r7, pc}

08024d36 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 8024d36:	b480      	push	{r7}
 8024d38:	b083      	sub	sp, #12
 8024d3a:	af00      	add	r7, sp, #0
 8024d3c:	6078      	str	r0, [r7, #4]
 8024d3e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	781a      	ldrb	r2, [r3, #0]
 8024d44:	683b      	ldr	r3, [r7, #0]
 8024d46:	781b      	ldrb	r3, [r3, #0]
 8024d48:	429a      	cmp	r2, r3
 8024d4a:	d201      	bcs.n	8024d50 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 8024d4c:	683b      	ldr	r3, [r7, #0]
 8024d4e:	e000      	b.n	8024d52 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 8024d50:	687b      	ldr	r3, [r7, #4]
    }
 8024d52:	4618      	mov	r0, r3
 8024d54:	370c      	adds	r7, #12
 8024d56:	46bd      	mov	sp, r7
 8024d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d5c:	4770      	bx	lr

08024d5e <_ZdlPv>:
 8024d5e:	f000 baf9 	b.w	8025354 <free>

08024d62 <_ZdlPvj>:
 8024d62:	f7ff bffc 	b.w	8024d5e <_ZdlPv>

08024d66 <_ZdaPv>:
 8024d66:	f7ff bffa 	b.w	8024d5e <_ZdlPv>

08024d6a <__cxa_guard_acquire>:
 8024d6a:	6803      	ldr	r3, [r0, #0]
 8024d6c:	07db      	lsls	r3, r3, #31
 8024d6e:	d406      	bmi.n	8024d7e <__cxa_guard_acquire+0x14>
 8024d70:	7843      	ldrb	r3, [r0, #1]
 8024d72:	b103      	cbz	r3, 8024d76 <__cxa_guard_acquire+0xc>
 8024d74:	deff      	udf	#255	; 0xff
 8024d76:	2301      	movs	r3, #1
 8024d78:	7043      	strb	r3, [r0, #1]
 8024d7a:	4618      	mov	r0, r3
 8024d7c:	4770      	bx	lr
 8024d7e:	2000      	movs	r0, #0
 8024d80:	4770      	bx	lr

08024d82 <__cxa_guard_release>:
 8024d82:	2301      	movs	r3, #1
 8024d84:	6003      	str	r3, [r0, #0]
 8024d86:	4770      	bx	lr

08024d88 <_Znwj>:
 8024d88:	2801      	cmp	r0, #1
 8024d8a:	bf38      	it	cc
 8024d8c:	2001      	movcc	r0, #1
 8024d8e:	b510      	push	{r4, lr}
 8024d90:	4604      	mov	r4, r0
 8024d92:	4620      	mov	r0, r4
 8024d94:	f000 fad6 	bl	8025344 <malloc>
 8024d98:	b930      	cbnz	r0, 8024da8 <_Znwj+0x20>
 8024d9a:	f000 f81d 	bl	8024dd8 <_ZSt15get_new_handlerv>
 8024d9e:	b908      	cbnz	r0, 8024da4 <_Znwj+0x1c>
 8024da0:	f000 fa65 	bl	802526e <abort>
 8024da4:	4780      	blx	r0
 8024da6:	e7f4      	b.n	8024d92 <_Znwj+0xa>
 8024da8:	bd10      	pop	{r4, pc}

08024daa <_Znaj>:
 8024daa:	f7ff bfed 	b.w	8024d88 <_Znwj>

08024dae <__cxa_pure_virtual>:
 8024dae:	b508      	push	{r3, lr}
 8024db0:	f000 f80c 	bl	8024dcc <_ZSt9terminatev>

08024db4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024db4:	b508      	push	{r3, lr}
 8024db6:	4780      	blx	r0
 8024db8:	f000 fa59 	bl	802526e <abort>

08024dbc <_ZSt13get_terminatev>:
 8024dbc:	4b02      	ldr	r3, [pc, #8]	; (8024dc8 <_ZSt13get_terminatev+0xc>)
 8024dbe:	6818      	ldr	r0, [r3, #0]
 8024dc0:	f3bf 8f5b 	dmb	ish
 8024dc4:	4770      	bx	lr
 8024dc6:	bf00      	nop
 8024dc8:	20000014 	.word	0x20000014

08024dcc <_ZSt9terminatev>:
 8024dcc:	b508      	push	{r3, lr}
 8024dce:	f7ff fff5 	bl	8024dbc <_ZSt13get_terminatev>
 8024dd2:	f7ff ffef 	bl	8024db4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08024dd8 <_ZSt15get_new_handlerv>:
 8024dd8:	4b02      	ldr	r3, [pc, #8]	; (8024de4 <_ZSt15get_new_handlerv+0xc>)
 8024dda:	6818      	ldr	r0, [r3, #0]
 8024ddc:	f3bf 8f5b 	dmb	ish
 8024de0:	4770      	bx	lr
 8024de2:	bf00      	nop
 8024de4:	2004a1cc 	.word	0x2004a1cc

08024de8 <floor>:
 8024de8:	ec51 0b10 	vmov	r0, r1, d0
 8024dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024df0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8024df4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8024df8:	2e13      	cmp	r6, #19
 8024dfa:	ee10 5a10 	vmov	r5, s0
 8024dfe:	ee10 8a10 	vmov	r8, s0
 8024e02:	460c      	mov	r4, r1
 8024e04:	dc32      	bgt.n	8024e6c <floor+0x84>
 8024e06:	2e00      	cmp	r6, #0
 8024e08:	da14      	bge.n	8024e34 <floor+0x4c>
 8024e0a:	a333      	add	r3, pc, #204	; (adr r3, 8024ed8 <floor+0xf0>)
 8024e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e10:	f7db fa6e 	bl	80002f0 <__adddf3>
 8024e14:	2200      	movs	r2, #0
 8024e16:	2300      	movs	r3, #0
 8024e18:	f7db feb0 	bl	8000b7c <__aeabi_dcmpgt>
 8024e1c:	b138      	cbz	r0, 8024e2e <floor+0x46>
 8024e1e:	2c00      	cmp	r4, #0
 8024e20:	da57      	bge.n	8024ed2 <floor+0xea>
 8024e22:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8024e26:	431d      	orrs	r5, r3
 8024e28:	d001      	beq.n	8024e2e <floor+0x46>
 8024e2a:	4c2d      	ldr	r4, [pc, #180]	; (8024ee0 <floor+0xf8>)
 8024e2c:	2500      	movs	r5, #0
 8024e2e:	4621      	mov	r1, r4
 8024e30:	4628      	mov	r0, r5
 8024e32:	e025      	b.n	8024e80 <floor+0x98>
 8024e34:	4f2b      	ldr	r7, [pc, #172]	; (8024ee4 <floor+0xfc>)
 8024e36:	4137      	asrs	r7, r6
 8024e38:	ea01 0307 	and.w	r3, r1, r7
 8024e3c:	4303      	orrs	r3, r0
 8024e3e:	d01f      	beq.n	8024e80 <floor+0x98>
 8024e40:	a325      	add	r3, pc, #148	; (adr r3, 8024ed8 <floor+0xf0>)
 8024e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e46:	f7db fa53 	bl	80002f0 <__adddf3>
 8024e4a:	2200      	movs	r2, #0
 8024e4c:	2300      	movs	r3, #0
 8024e4e:	f7db fe95 	bl	8000b7c <__aeabi_dcmpgt>
 8024e52:	2800      	cmp	r0, #0
 8024e54:	d0eb      	beq.n	8024e2e <floor+0x46>
 8024e56:	2c00      	cmp	r4, #0
 8024e58:	bfbe      	ittt	lt
 8024e5a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8024e5e:	fa43 f606 	asrlt.w	r6, r3, r6
 8024e62:	19a4      	addlt	r4, r4, r6
 8024e64:	ea24 0407 	bic.w	r4, r4, r7
 8024e68:	2500      	movs	r5, #0
 8024e6a:	e7e0      	b.n	8024e2e <floor+0x46>
 8024e6c:	2e33      	cmp	r6, #51	; 0x33
 8024e6e:	dd0b      	ble.n	8024e88 <floor+0xa0>
 8024e70:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024e74:	d104      	bne.n	8024e80 <floor+0x98>
 8024e76:	ee10 2a10 	vmov	r2, s0
 8024e7a:	460b      	mov	r3, r1
 8024e7c:	f7db fa38 	bl	80002f0 <__adddf3>
 8024e80:	ec41 0b10 	vmov	d0, r0, r1
 8024e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024e88:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8024e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8024e90:	fa23 f707 	lsr.w	r7, r3, r7
 8024e94:	4207      	tst	r7, r0
 8024e96:	d0f3      	beq.n	8024e80 <floor+0x98>
 8024e98:	a30f      	add	r3, pc, #60	; (adr r3, 8024ed8 <floor+0xf0>)
 8024e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e9e:	f7db fa27 	bl	80002f0 <__adddf3>
 8024ea2:	2200      	movs	r2, #0
 8024ea4:	2300      	movs	r3, #0
 8024ea6:	f7db fe69 	bl	8000b7c <__aeabi_dcmpgt>
 8024eaa:	2800      	cmp	r0, #0
 8024eac:	d0bf      	beq.n	8024e2e <floor+0x46>
 8024eae:	2c00      	cmp	r4, #0
 8024eb0:	da02      	bge.n	8024eb8 <floor+0xd0>
 8024eb2:	2e14      	cmp	r6, #20
 8024eb4:	d103      	bne.n	8024ebe <floor+0xd6>
 8024eb6:	3401      	adds	r4, #1
 8024eb8:	ea25 0507 	bic.w	r5, r5, r7
 8024ebc:	e7b7      	b.n	8024e2e <floor+0x46>
 8024ebe:	2301      	movs	r3, #1
 8024ec0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8024ec4:	fa03 f606 	lsl.w	r6, r3, r6
 8024ec8:	4435      	add	r5, r6
 8024eca:	4545      	cmp	r5, r8
 8024ecc:	bf38      	it	cc
 8024ece:	18e4      	addcc	r4, r4, r3
 8024ed0:	e7f2      	b.n	8024eb8 <floor+0xd0>
 8024ed2:	2500      	movs	r5, #0
 8024ed4:	462c      	mov	r4, r5
 8024ed6:	e7aa      	b.n	8024e2e <floor+0x46>
 8024ed8:	8800759c 	.word	0x8800759c
 8024edc:	7e37e43c 	.word	0x7e37e43c
 8024ee0:	bff00000 	.word	0xbff00000
 8024ee4:	000fffff 	.word	0x000fffff

08024ee8 <frexp>:
 8024ee8:	b570      	push	{r4, r5, r6, lr}
 8024eea:	2100      	movs	r1, #0
 8024eec:	ec55 4b10 	vmov	r4, r5, d0
 8024ef0:	6001      	str	r1, [r0, #0]
 8024ef2:	4916      	ldr	r1, [pc, #88]	; (8024f4c <frexp+0x64>)
 8024ef4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8024ef8:	428a      	cmp	r2, r1
 8024efa:	4606      	mov	r6, r0
 8024efc:	462b      	mov	r3, r5
 8024efe:	dc22      	bgt.n	8024f46 <frexp+0x5e>
 8024f00:	ee10 1a10 	vmov	r1, s0
 8024f04:	4311      	orrs	r1, r2
 8024f06:	d01e      	beq.n	8024f46 <frexp+0x5e>
 8024f08:	4911      	ldr	r1, [pc, #68]	; (8024f50 <frexp+0x68>)
 8024f0a:	4029      	ands	r1, r5
 8024f0c:	b969      	cbnz	r1, 8024f2a <frexp+0x42>
 8024f0e:	4b11      	ldr	r3, [pc, #68]	; (8024f54 <frexp+0x6c>)
 8024f10:	2200      	movs	r2, #0
 8024f12:	ee10 0a10 	vmov	r0, s0
 8024f16:	4629      	mov	r1, r5
 8024f18:	f7db fba0 	bl	800065c <__aeabi_dmul>
 8024f1c:	460b      	mov	r3, r1
 8024f1e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8024f22:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8024f26:	4604      	mov	r4, r0
 8024f28:	6031      	str	r1, [r6, #0]
 8024f2a:	6831      	ldr	r1, [r6, #0]
 8024f2c:	1512      	asrs	r2, r2, #20
 8024f2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024f32:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8024f36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024f3a:	440a      	add	r2, r1
 8024f3c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8024f40:	6032      	str	r2, [r6, #0]
 8024f42:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8024f46:	ec45 4b10 	vmov	d0, r4, r5
 8024f4a:	bd70      	pop	{r4, r5, r6, pc}
 8024f4c:	7fefffff 	.word	0x7fefffff
 8024f50:	7ff00000 	.word	0x7ff00000
 8024f54:	43500000 	.word	0x43500000

08024f58 <round>:
 8024f58:	ec51 0b10 	vmov	r0, r1, d0
 8024f5c:	b570      	push	{r4, r5, r6, lr}
 8024f5e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8024f62:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8024f66:	2c13      	cmp	r4, #19
 8024f68:	ee10 2a10 	vmov	r2, s0
 8024f6c:	460b      	mov	r3, r1
 8024f6e:	dc19      	bgt.n	8024fa4 <round+0x4c>
 8024f70:	2c00      	cmp	r4, #0
 8024f72:	da09      	bge.n	8024f88 <round+0x30>
 8024f74:	3401      	adds	r4, #1
 8024f76:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8024f7a:	d103      	bne.n	8024f84 <round+0x2c>
 8024f7c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8024f80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8024f84:	2100      	movs	r1, #0
 8024f86:	e028      	b.n	8024fda <round+0x82>
 8024f88:	4d15      	ldr	r5, [pc, #84]	; (8024fe0 <round+0x88>)
 8024f8a:	4125      	asrs	r5, r4
 8024f8c:	ea01 0605 	and.w	r6, r1, r5
 8024f90:	4332      	orrs	r2, r6
 8024f92:	d00e      	beq.n	8024fb2 <round+0x5a>
 8024f94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8024f98:	fa42 f404 	asr.w	r4, r2, r4
 8024f9c:	4423      	add	r3, r4
 8024f9e:	ea23 0305 	bic.w	r3, r3, r5
 8024fa2:	e7ef      	b.n	8024f84 <round+0x2c>
 8024fa4:	2c33      	cmp	r4, #51	; 0x33
 8024fa6:	dd07      	ble.n	8024fb8 <round+0x60>
 8024fa8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8024fac:	d101      	bne.n	8024fb2 <round+0x5a>
 8024fae:	f7db f99f 	bl	80002f0 <__adddf3>
 8024fb2:	ec41 0b10 	vmov	d0, r0, r1
 8024fb6:	bd70      	pop	{r4, r5, r6, pc}
 8024fb8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8024fbc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8024fc0:	40f5      	lsrs	r5, r6
 8024fc2:	4228      	tst	r0, r5
 8024fc4:	d0f5      	beq.n	8024fb2 <round+0x5a>
 8024fc6:	2101      	movs	r1, #1
 8024fc8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8024fcc:	fa01 f404 	lsl.w	r4, r1, r4
 8024fd0:	1912      	adds	r2, r2, r4
 8024fd2:	bf28      	it	cs
 8024fd4:	185b      	addcs	r3, r3, r1
 8024fd6:	ea22 0105 	bic.w	r1, r2, r5
 8024fda:	4608      	mov	r0, r1
 8024fdc:	4619      	mov	r1, r3
 8024fde:	e7e8      	b.n	8024fb2 <round+0x5a>
 8024fe0:	000fffff 	.word	0x000fffff

08024fe4 <roundf>:
 8024fe4:	ee10 0a10 	vmov	r0, s0
 8024fe8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8024fec:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8024ff0:	2a16      	cmp	r2, #22
 8024ff2:	dc15      	bgt.n	8025020 <roundf+0x3c>
 8024ff4:	2a00      	cmp	r2, #0
 8024ff6:	da08      	bge.n	802500a <roundf+0x26>
 8024ff8:	3201      	adds	r2, #1
 8024ffa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8024ffe:	d101      	bne.n	8025004 <roundf+0x20>
 8025000:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8025004:	ee00 3a10 	vmov	s0, r3
 8025008:	4770      	bx	lr
 802500a:	4908      	ldr	r1, [pc, #32]	; (802502c <roundf+0x48>)
 802500c:	4111      	asrs	r1, r2
 802500e:	4208      	tst	r0, r1
 8025010:	d0fa      	beq.n	8025008 <roundf+0x24>
 8025012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8025016:	4113      	asrs	r3, r2
 8025018:	4403      	add	r3, r0
 802501a:	ea23 0301 	bic.w	r3, r3, r1
 802501e:	e7f1      	b.n	8025004 <roundf+0x20>
 8025020:	2a80      	cmp	r2, #128	; 0x80
 8025022:	d1f1      	bne.n	8025008 <roundf+0x24>
 8025024:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025028:	4770      	bx	lr
 802502a:	bf00      	nop
 802502c:	007fffff 	.word	0x007fffff

08025030 <expf>:
 8025030:	b508      	push	{r3, lr}
 8025032:	ed2d 8b02 	vpush	{d8}
 8025036:	eef0 8a40 	vmov.f32	s17, s0
 802503a:	f000 f837 	bl	80250ac <__ieee754_expf>
 802503e:	4b16      	ldr	r3, [pc, #88]	; (8025098 <expf+0x68>)
 8025040:	f993 3000 	ldrsb.w	r3, [r3]
 8025044:	3301      	adds	r3, #1
 8025046:	eeb0 8a40 	vmov.f32	s16, s0
 802504a:	d011      	beq.n	8025070 <expf+0x40>
 802504c:	eeb0 0a68 	vmov.f32	s0, s17
 8025050:	f000 f900 	bl	8025254 <finitef>
 8025054:	b160      	cbz	r0, 8025070 <expf+0x40>
 8025056:	eddf 7a11 	vldr	s15, [pc, #68]	; 802509c <expf+0x6c>
 802505a:	eef4 8ae7 	vcmpe.f32	s17, s15
 802505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025062:	dd0a      	ble.n	802507a <expf+0x4a>
 8025064:	f000 f92e 	bl	80252c4 <__errno>
 8025068:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 80250a0 <expf+0x70>
 802506c:	2322      	movs	r3, #34	; 0x22
 802506e:	6003      	str	r3, [r0, #0]
 8025070:	eeb0 0a48 	vmov.f32	s0, s16
 8025074:	ecbd 8b02 	vpop	{d8}
 8025078:	bd08      	pop	{r3, pc}
 802507a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80250a4 <expf+0x74>
 802507e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8025082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025086:	d5f3      	bpl.n	8025070 <expf+0x40>
 8025088:	f000 f91c 	bl	80252c4 <__errno>
 802508c:	2322      	movs	r3, #34	; 0x22
 802508e:	ed9f 8a06 	vldr	s16, [pc, #24]	; 80250a8 <expf+0x78>
 8025092:	6003      	str	r3, [r0, #0]
 8025094:	e7ec      	b.n	8025070 <expf+0x40>
 8025096:	bf00      	nop
 8025098:	20000018 	.word	0x20000018
 802509c:	42b17180 	.word	0x42b17180
 80250a0:	7f800000 	.word	0x7f800000
 80250a4:	c2cff1b5 	.word	0xc2cff1b5
 80250a8:	00000000 	.word	0x00000000

080250ac <__ieee754_expf>:
 80250ac:	ee10 2a10 	vmov	r2, s0
 80250b0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80250b4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80250b8:	d902      	bls.n	80250c0 <__ieee754_expf+0x14>
 80250ba:	ee30 0a00 	vadd.f32	s0, s0, s0
 80250be:	4770      	bx	lr
 80250c0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80250c4:	d106      	bne.n	80250d4 <__ieee754_expf+0x28>
 80250c6:	eddf 7a51 	vldr	s15, [pc, #324]	; 802520c <__ieee754_expf+0x160>
 80250ca:	2b00      	cmp	r3, #0
 80250cc:	bf18      	it	ne
 80250ce:	eeb0 0a67 	vmovne.f32	s0, s15
 80250d2:	4770      	bx	lr
 80250d4:	484e      	ldr	r0, [pc, #312]	; (8025210 <__ieee754_expf+0x164>)
 80250d6:	4282      	cmp	r2, r0
 80250d8:	dd04      	ble.n	80250e4 <__ieee754_expf+0x38>
 80250da:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8025214 <__ieee754_expf+0x168>
 80250de:	ee20 0a00 	vmul.f32	s0, s0, s0
 80250e2:	4770      	bx	lr
 80250e4:	2a00      	cmp	r2, #0
 80250e6:	da03      	bge.n	80250f0 <__ieee754_expf+0x44>
 80250e8:	4a4b      	ldr	r2, [pc, #300]	; (8025218 <__ieee754_expf+0x16c>)
 80250ea:	4291      	cmp	r1, r2
 80250ec:	f200 808a 	bhi.w	8025204 <__ieee754_expf+0x158>
 80250f0:	4a4a      	ldr	r2, [pc, #296]	; (802521c <__ieee754_expf+0x170>)
 80250f2:	4291      	cmp	r1, r2
 80250f4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80250f8:	d954      	bls.n	80251a4 <__ieee754_expf+0xf8>
 80250fa:	4a49      	ldr	r2, [pc, #292]	; (8025220 <__ieee754_expf+0x174>)
 80250fc:	4291      	cmp	r1, r2
 80250fe:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8025102:	d836      	bhi.n	8025172 <__ieee754_expf+0xc6>
 8025104:	4947      	ldr	r1, [pc, #284]	; (8025224 <__ieee754_expf+0x178>)
 8025106:	4411      	add	r1, r2
 8025108:	ed91 7a00 	vldr	s14, [r1]
 802510c:	4946      	ldr	r1, [pc, #280]	; (8025228 <__ieee754_expf+0x17c>)
 802510e:	440a      	add	r2, r1
 8025110:	edd2 7a00 	vldr	s15, [r2]
 8025114:	ee30 7a47 	vsub.f32	s14, s0, s14
 8025118:	f1c3 0201 	rsb	r2, r3, #1
 802511c:	1ad2      	subs	r2, r2, r3
 802511e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8025122:	ee60 6a00 	vmul.f32	s13, s0, s0
 8025126:	eddf 5a41 	vldr	s11, [pc, #260]	; 802522c <__ieee754_expf+0x180>
 802512a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8025230 <__ieee754_expf+0x184>
 802512e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8025132:	eddf 5a40 	vldr	s11, [pc, #256]	; 8025234 <__ieee754_expf+0x188>
 8025136:	eee5 5a26 	vfma.f32	s11, s10, s13
 802513a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8025238 <__ieee754_expf+0x18c>
 802513e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8025142:	eddf 5a3e 	vldr	s11, [pc, #248]	; 802523c <__ieee754_expf+0x190>
 8025146:	eee5 5a26 	vfma.f32	s11, s10, s13
 802514a:	eeb0 5a40 	vmov.f32	s10, s0
 802514e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8025152:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8025156:	eef0 6a45 	vmov.f32	s13, s10
 802515a:	ee20 5a05 	vmul.f32	s10, s0, s10
 802515e:	bb92      	cbnz	r2, 80251c6 <__ieee754_expf+0x11a>
 8025160:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8025164:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8025168:	ee37 0ac0 	vsub.f32	s0, s15, s0
 802516c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8025170:	4770      	bx	lr
 8025172:	4b33      	ldr	r3, [pc, #204]	; (8025240 <__ieee754_expf+0x194>)
 8025174:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8025244 <__ieee754_expf+0x198>
 8025178:	4413      	add	r3, r2
 802517a:	edd3 7a00 	vldr	s15, [r3]
 802517e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8025182:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8025248 <__ieee754_expf+0x19c>
 8025186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802518a:	ee17 2a90 	vmov	r2, s15
 802518e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025192:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8025196:	eeb0 7a40 	vmov.f32	s14, s0
 802519a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 802524c <__ieee754_expf+0x1a0>
 802519e:	ee67 7a80 	vmul.f32	s15, s15, s0
 80251a2:	e7bc      	b.n	802511e <__ieee754_expf+0x72>
 80251a4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 80251a8:	d20b      	bcs.n	80251c2 <__ieee754_expf+0x116>
 80251aa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8025214 <__ieee754_expf+0x168>
 80251ae:	ee70 6a26 	vadd.f32	s13, s0, s13
 80251b2:	eef4 6ac6 	vcmpe.f32	s13, s12
 80251b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80251ba:	dd02      	ble.n	80251c2 <__ieee754_expf+0x116>
 80251bc:	ee30 0a06 	vadd.f32	s0, s0, s12
 80251c0:	4770      	bx	lr
 80251c2:	2200      	movs	r2, #0
 80251c4:	e7ad      	b.n	8025122 <__ieee754_expf+0x76>
 80251c6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80251ca:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80251ce:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80251d2:	bfb8      	it	lt
 80251d4:	3264      	addlt	r2, #100	; 0x64
 80251d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80251da:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80251de:	ee76 7a40 	vsub.f32	s15, s12, s0
 80251e2:	ee17 3a90 	vmov	r3, s15
 80251e6:	bfab      	itete	ge
 80251e8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80251ec:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80251f0:	ee00 3a10 	vmovge	s0, r3
 80251f4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8025250 <__ieee754_expf+0x1a4>
 80251f8:	bfbc      	itt	lt
 80251fa:	ee00 3a10 	vmovlt	s0, r3
 80251fe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8025202:	4770      	bx	lr
 8025204:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802520c <__ieee754_expf+0x160>
 8025208:	4770      	bx	lr
 802520a:	bf00      	nop
 802520c:	00000000 	.word	0x00000000
 8025210:	42b17217 	.word	0x42b17217
 8025214:	7149f2ca 	.word	0x7149f2ca
 8025218:	42cff1b5 	.word	0x42cff1b5
 802521c:	3eb17218 	.word	0x3eb17218
 8025220:	3f851591 	.word	0x3f851591
 8025224:	08075c38 	.word	0x08075c38
 8025228:	08075c40 	.word	0x08075c40
 802522c:	3331bb4c 	.word	0x3331bb4c
 8025230:	b5ddea0e 	.word	0xb5ddea0e
 8025234:	388ab355 	.word	0x388ab355
 8025238:	bb360b61 	.word	0xbb360b61
 802523c:	3e2aaaab 	.word	0x3e2aaaab
 8025240:	08075c30 	.word	0x08075c30
 8025244:	3fb8aa3b 	.word	0x3fb8aa3b
 8025248:	3f317180 	.word	0x3f317180
 802524c:	3717f7d1 	.word	0x3717f7d1
 8025250:	0d800000 	.word	0x0d800000

08025254 <finitef>:
 8025254:	b082      	sub	sp, #8
 8025256:	ed8d 0a01 	vstr	s0, [sp, #4]
 802525a:	9801      	ldr	r0, [sp, #4]
 802525c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8025260:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8025264:	bfac      	ite	ge
 8025266:	2000      	movge	r0, #0
 8025268:	2001      	movlt	r0, #1
 802526a:	b002      	add	sp, #8
 802526c:	4770      	bx	lr

0802526e <abort>:
 802526e:	b508      	push	{r3, lr}
 8025270:	2006      	movs	r0, #6
 8025272:	f000 fc77 	bl	8025b64 <raise>
 8025276:	2001      	movs	r0, #1
 8025278:	f7dd fb26 	bl	80028c8 <_exit>

0802527c <__assert_func>:
 802527c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802527e:	4614      	mov	r4, r2
 8025280:	461a      	mov	r2, r3
 8025282:	4b09      	ldr	r3, [pc, #36]	; (80252a8 <__assert_func+0x2c>)
 8025284:	681b      	ldr	r3, [r3, #0]
 8025286:	4605      	mov	r5, r0
 8025288:	68d8      	ldr	r0, [r3, #12]
 802528a:	b14c      	cbz	r4, 80252a0 <__assert_func+0x24>
 802528c:	4b07      	ldr	r3, [pc, #28]	; (80252ac <__assert_func+0x30>)
 802528e:	9100      	str	r1, [sp, #0]
 8025290:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025294:	4906      	ldr	r1, [pc, #24]	; (80252b0 <__assert_func+0x34>)
 8025296:	462b      	mov	r3, r5
 8025298:	f000 f81a 	bl	80252d0 <fiprintf>
 802529c:	f7ff ffe7 	bl	802526e <abort>
 80252a0:	4b04      	ldr	r3, [pc, #16]	; (80252b4 <__assert_func+0x38>)
 80252a2:	461c      	mov	r4, r3
 80252a4:	e7f3      	b.n	802528e <__assert_func+0x12>
 80252a6:	bf00      	nop
 80252a8:	2000001c 	.word	0x2000001c
 80252ac:	08075c48 	.word	0x08075c48
 80252b0:	08075c55 	.word	0x08075c55
 80252b4:	08075c83 	.word	0x08075c83

080252b8 <atexit>:
 80252b8:	2300      	movs	r3, #0
 80252ba:	4601      	mov	r1, r0
 80252bc:	461a      	mov	r2, r3
 80252be:	4618      	mov	r0, r3
 80252c0:	f000 bd7a 	b.w	8025db8 <__register_exitproc>

080252c4 <__errno>:
 80252c4:	4b01      	ldr	r3, [pc, #4]	; (80252cc <__errno+0x8>)
 80252c6:	6818      	ldr	r0, [r3, #0]
 80252c8:	4770      	bx	lr
 80252ca:	bf00      	nop
 80252cc:	2000001c 	.word	0x2000001c

080252d0 <fiprintf>:
 80252d0:	b40e      	push	{r1, r2, r3}
 80252d2:	b503      	push	{r0, r1, lr}
 80252d4:	4601      	mov	r1, r0
 80252d6:	ab03      	add	r3, sp, #12
 80252d8:	4805      	ldr	r0, [pc, #20]	; (80252f0 <fiprintf+0x20>)
 80252da:	f853 2b04 	ldr.w	r2, [r3], #4
 80252de:	6800      	ldr	r0, [r0, #0]
 80252e0:	9301      	str	r3, [sp, #4]
 80252e2:	f000 f943 	bl	802556c <_vfiprintf_r>
 80252e6:	b002      	add	sp, #8
 80252e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80252ec:	b003      	add	sp, #12
 80252ee:	4770      	bx	lr
 80252f0:	2000001c 	.word	0x2000001c

080252f4 <__libc_init_array>:
 80252f4:	b570      	push	{r4, r5, r6, lr}
 80252f6:	4d0d      	ldr	r5, [pc, #52]	; (802532c <__libc_init_array+0x38>)
 80252f8:	4c0d      	ldr	r4, [pc, #52]	; (8025330 <__libc_init_array+0x3c>)
 80252fa:	1b64      	subs	r4, r4, r5
 80252fc:	10a4      	asrs	r4, r4, #2
 80252fe:	2600      	movs	r6, #0
 8025300:	42a6      	cmp	r6, r4
 8025302:	d109      	bne.n	8025318 <__libc_init_array+0x24>
 8025304:	4d0b      	ldr	r5, [pc, #44]	; (8025334 <__libc_init_array+0x40>)
 8025306:	4c0c      	ldr	r4, [pc, #48]	; (8025338 <__libc_init_array+0x44>)
 8025308:	f001 fa16 	bl	8026738 <_init>
 802530c:	1b64      	subs	r4, r4, r5
 802530e:	10a4      	asrs	r4, r4, #2
 8025310:	2600      	movs	r6, #0
 8025312:	42a6      	cmp	r6, r4
 8025314:	d105      	bne.n	8025322 <__libc_init_array+0x2e>
 8025316:	bd70      	pop	{r4, r5, r6, pc}
 8025318:	f855 3b04 	ldr.w	r3, [r5], #4
 802531c:	4798      	blx	r3
 802531e:	3601      	adds	r6, #1
 8025320:	e7ee      	b.n	8025300 <__libc_init_array+0xc>
 8025322:	f855 3b04 	ldr.w	r3, [r5], #4
 8025326:	4798      	blx	r3
 8025328:	3601      	adds	r6, #1
 802532a:	e7f2      	b.n	8025312 <__libc_init_array+0x1e>
 802532c:	08075d24 	.word	0x08075d24
 8025330:	08075d24 	.word	0x08075d24
 8025334:	08075d24 	.word	0x08075d24
 8025338:	08075d28 	.word	0x08075d28

0802533c <__retarget_lock_init_recursive>:
 802533c:	4770      	bx	lr

0802533e <__retarget_lock_acquire_recursive>:
 802533e:	4770      	bx	lr

08025340 <__retarget_lock_release>:
 8025340:	4770      	bx	lr

08025342 <__retarget_lock_release_recursive>:
 8025342:	4770      	bx	lr

08025344 <malloc>:
 8025344:	4b02      	ldr	r3, [pc, #8]	; (8025350 <malloc+0xc>)
 8025346:	4601      	mov	r1, r0
 8025348:	6818      	ldr	r0, [r3, #0]
 802534a:	f000 b88b 	b.w	8025464 <_malloc_r>
 802534e:	bf00      	nop
 8025350:	2000001c 	.word	0x2000001c

08025354 <free>:
 8025354:	4b02      	ldr	r3, [pc, #8]	; (8025360 <free+0xc>)
 8025356:	4601      	mov	r1, r0
 8025358:	6818      	ldr	r0, [r3, #0]
 802535a:	f000 b833 	b.w	80253c4 <_free_r>
 802535e:	bf00      	nop
 8025360:	2000001c 	.word	0x2000001c

08025364 <memcpy>:
 8025364:	440a      	add	r2, r1
 8025366:	4291      	cmp	r1, r2
 8025368:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 802536c:	d100      	bne.n	8025370 <memcpy+0xc>
 802536e:	4770      	bx	lr
 8025370:	b510      	push	{r4, lr}
 8025372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025376:	f803 4f01 	strb.w	r4, [r3, #1]!
 802537a:	4291      	cmp	r1, r2
 802537c:	d1f9      	bne.n	8025372 <memcpy+0xe>
 802537e:	bd10      	pop	{r4, pc}

08025380 <memmove>:
 8025380:	4288      	cmp	r0, r1
 8025382:	b510      	push	{r4, lr}
 8025384:	eb01 0402 	add.w	r4, r1, r2
 8025388:	d902      	bls.n	8025390 <memmove+0x10>
 802538a:	4284      	cmp	r4, r0
 802538c:	4623      	mov	r3, r4
 802538e:	d807      	bhi.n	80253a0 <memmove+0x20>
 8025390:	1e43      	subs	r3, r0, #1
 8025392:	42a1      	cmp	r1, r4
 8025394:	d008      	beq.n	80253a8 <memmove+0x28>
 8025396:	f811 2b01 	ldrb.w	r2, [r1], #1
 802539a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802539e:	e7f8      	b.n	8025392 <memmove+0x12>
 80253a0:	4402      	add	r2, r0
 80253a2:	4601      	mov	r1, r0
 80253a4:	428a      	cmp	r2, r1
 80253a6:	d100      	bne.n	80253aa <memmove+0x2a>
 80253a8:	bd10      	pop	{r4, pc}
 80253aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80253ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80253b2:	e7f7      	b.n	80253a4 <memmove+0x24>

080253b4 <memset>:
 80253b4:	4402      	add	r2, r0
 80253b6:	4603      	mov	r3, r0
 80253b8:	4293      	cmp	r3, r2
 80253ba:	d100      	bne.n	80253be <memset+0xa>
 80253bc:	4770      	bx	lr
 80253be:	f803 1b01 	strb.w	r1, [r3], #1
 80253c2:	e7f9      	b.n	80253b8 <memset+0x4>

080253c4 <_free_r>:
 80253c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80253c6:	2900      	cmp	r1, #0
 80253c8:	d048      	beq.n	802545c <_free_r+0x98>
 80253ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80253ce:	9001      	str	r0, [sp, #4]
 80253d0:	2b00      	cmp	r3, #0
 80253d2:	f1a1 0404 	sub.w	r4, r1, #4
 80253d6:	bfb8      	it	lt
 80253d8:	18e4      	addlt	r4, r4, r3
 80253da:	f000 ff6b 	bl	80262b4 <__malloc_lock>
 80253de:	4a20      	ldr	r2, [pc, #128]	; (8025460 <_free_r+0x9c>)
 80253e0:	9801      	ldr	r0, [sp, #4]
 80253e2:	6813      	ldr	r3, [r2, #0]
 80253e4:	4615      	mov	r5, r2
 80253e6:	b933      	cbnz	r3, 80253f6 <_free_r+0x32>
 80253e8:	6063      	str	r3, [r4, #4]
 80253ea:	6014      	str	r4, [r2, #0]
 80253ec:	b003      	add	sp, #12
 80253ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80253f2:	f000 bf65 	b.w	80262c0 <__malloc_unlock>
 80253f6:	42a3      	cmp	r3, r4
 80253f8:	d90b      	bls.n	8025412 <_free_r+0x4e>
 80253fa:	6821      	ldr	r1, [r4, #0]
 80253fc:	1862      	adds	r2, r4, r1
 80253fe:	4293      	cmp	r3, r2
 8025400:	bf04      	itt	eq
 8025402:	681a      	ldreq	r2, [r3, #0]
 8025404:	685b      	ldreq	r3, [r3, #4]
 8025406:	6063      	str	r3, [r4, #4]
 8025408:	bf04      	itt	eq
 802540a:	1852      	addeq	r2, r2, r1
 802540c:	6022      	streq	r2, [r4, #0]
 802540e:	602c      	str	r4, [r5, #0]
 8025410:	e7ec      	b.n	80253ec <_free_r+0x28>
 8025412:	461a      	mov	r2, r3
 8025414:	685b      	ldr	r3, [r3, #4]
 8025416:	b10b      	cbz	r3, 802541c <_free_r+0x58>
 8025418:	42a3      	cmp	r3, r4
 802541a:	d9fa      	bls.n	8025412 <_free_r+0x4e>
 802541c:	6811      	ldr	r1, [r2, #0]
 802541e:	1855      	adds	r5, r2, r1
 8025420:	42a5      	cmp	r5, r4
 8025422:	d10b      	bne.n	802543c <_free_r+0x78>
 8025424:	6824      	ldr	r4, [r4, #0]
 8025426:	4421      	add	r1, r4
 8025428:	1854      	adds	r4, r2, r1
 802542a:	42a3      	cmp	r3, r4
 802542c:	6011      	str	r1, [r2, #0]
 802542e:	d1dd      	bne.n	80253ec <_free_r+0x28>
 8025430:	681c      	ldr	r4, [r3, #0]
 8025432:	685b      	ldr	r3, [r3, #4]
 8025434:	6053      	str	r3, [r2, #4]
 8025436:	4421      	add	r1, r4
 8025438:	6011      	str	r1, [r2, #0]
 802543a:	e7d7      	b.n	80253ec <_free_r+0x28>
 802543c:	d902      	bls.n	8025444 <_free_r+0x80>
 802543e:	230c      	movs	r3, #12
 8025440:	6003      	str	r3, [r0, #0]
 8025442:	e7d3      	b.n	80253ec <_free_r+0x28>
 8025444:	6825      	ldr	r5, [r4, #0]
 8025446:	1961      	adds	r1, r4, r5
 8025448:	428b      	cmp	r3, r1
 802544a:	bf04      	itt	eq
 802544c:	6819      	ldreq	r1, [r3, #0]
 802544e:	685b      	ldreq	r3, [r3, #4]
 8025450:	6063      	str	r3, [r4, #4]
 8025452:	bf04      	itt	eq
 8025454:	1949      	addeq	r1, r1, r5
 8025456:	6021      	streq	r1, [r4, #0]
 8025458:	6054      	str	r4, [r2, #4]
 802545a:	e7c7      	b.n	80253ec <_free_r+0x28>
 802545c:	b003      	add	sp, #12
 802545e:	bd30      	pop	{r4, r5, pc}
 8025460:	2004a1d0 	.word	0x2004a1d0

08025464 <_malloc_r>:
 8025464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025466:	1ccd      	adds	r5, r1, #3
 8025468:	f025 0503 	bic.w	r5, r5, #3
 802546c:	3508      	adds	r5, #8
 802546e:	2d0c      	cmp	r5, #12
 8025470:	bf38      	it	cc
 8025472:	250c      	movcc	r5, #12
 8025474:	2d00      	cmp	r5, #0
 8025476:	4606      	mov	r6, r0
 8025478:	db01      	blt.n	802547e <_malloc_r+0x1a>
 802547a:	42a9      	cmp	r1, r5
 802547c:	d903      	bls.n	8025486 <_malloc_r+0x22>
 802547e:	230c      	movs	r3, #12
 8025480:	6033      	str	r3, [r6, #0]
 8025482:	2000      	movs	r0, #0
 8025484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025486:	f000 ff15 	bl	80262b4 <__malloc_lock>
 802548a:	4921      	ldr	r1, [pc, #132]	; (8025510 <_malloc_r+0xac>)
 802548c:	680a      	ldr	r2, [r1, #0]
 802548e:	4614      	mov	r4, r2
 8025490:	b99c      	cbnz	r4, 80254ba <_malloc_r+0x56>
 8025492:	4f20      	ldr	r7, [pc, #128]	; (8025514 <_malloc_r+0xb0>)
 8025494:	683b      	ldr	r3, [r7, #0]
 8025496:	b923      	cbnz	r3, 80254a2 <_malloc_r+0x3e>
 8025498:	4621      	mov	r1, r4
 802549a:	4630      	mov	r0, r6
 802549c:	f000 fb2a 	bl	8025af4 <_sbrk_r>
 80254a0:	6038      	str	r0, [r7, #0]
 80254a2:	4629      	mov	r1, r5
 80254a4:	4630      	mov	r0, r6
 80254a6:	f000 fb25 	bl	8025af4 <_sbrk_r>
 80254aa:	1c43      	adds	r3, r0, #1
 80254ac:	d123      	bne.n	80254f6 <_malloc_r+0x92>
 80254ae:	230c      	movs	r3, #12
 80254b0:	6033      	str	r3, [r6, #0]
 80254b2:	4630      	mov	r0, r6
 80254b4:	f000 ff04 	bl	80262c0 <__malloc_unlock>
 80254b8:	e7e3      	b.n	8025482 <_malloc_r+0x1e>
 80254ba:	6823      	ldr	r3, [r4, #0]
 80254bc:	1b5b      	subs	r3, r3, r5
 80254be:	d417      	bmi.n	80254f0 <_malloc_r+0x8c>
 80254c0:	2b0b      	cmp	r3, #11
 80254c2:	d903      	bls.n	80254cc <_malloc_r+0x68>
 80254c4:	6023      	str	r3, [r4, #0]
 80254c6:	441c      	add	r4, r3
 80254c8:	6025      	str	r5, [r4, #0]
 80254ca:	e004      	b.n	80254d6 <_malloc_r+0x72>
 80254cc:	6863      	ldr	r3, [r4, #4]
 80254ce:	42a2      	cmp	r2, r4
 80254d0:	bf0c      	ite	eq
 80254d2:	600b      	streq	r3, [r1, #0]
 80254d4:	6053      	strne	r3, [r2, #4]
 80254d6:	4630      	mov	r0, r6
 80254d8:	f000 fef2 	bl	80262c0 <__malloc_unlock>
 80254dc:	f104 000b 	add.w	r0, r4, #11
 80254e0:	1d23      	adds	r3, r4, #4
 80254e2:	f020 0007 	bic.w	r0, r0, #7
 80254e6:	1ac2      	subs	r2, r0, r3
 80254e8:	d0cc      	beq.n	8025484 <_malloc_r+0x20>
 80254ea:	1a1b      	subs	r3, r3, r0
 80254ec:	50a3      	str	r3, [r4, r2]
 80254ee:	e7c9      	b.n	8025484 <_malloc_r+0x20>
 80254f0:	4622      	mov	r2, r4
 80254f2:	6864      	ldr	r4, [r4, #4]
 80254f4:	e7cc      	b.n	8025490 <_malloc_r+0x2c>
 80254f6:	1cc4      	adds	r4, r0, #3
 80254f8:	f024 0403 	bic.w	r4, r4, #3
 80254fc:	42a0      	cmp	r0, r4
 80254fe:	d0e3      	beq.n	80254c8 <_malloc_r+0x64>
 8025500:	1a21      	subs	r1, r4, r0
 8025502:	4630      	mov	r0, r6
 8025504:	f000 faf6 	bl	8025af4 <_sbrk_r>
 8025508:	3001      	adds	r0, #1
 802550a:	d1dd      	bne.n	80254c8 <_malloc_r+0x64>
 802550c:	e7cf      	b.n	80254ae <_malloc_r+0x4a>
 802550e:	bf00      	nop
 8025510:	2004a1d0 	.word	0x2004a1d0
 8025514:	2004a1d4 	.word	0x2004a1d4

08025518 <__sfputc_r>:
 8025518:	6893      	ldr	r3, [r2, #8]
 802551a:	3b01      	subs	r3, #1
 802551c:	2b00      	cmp	r3, #0
 802551e:	b410      	push	{r4}
 8025520:	6093      	str	r3, [r2, #8]
 8025522:	da08      	bge.n	8025536 <__sfputc_r+0x1e>
 8025524:	6994      	ldr	r4, [r2, #24]
 8025526:	42a3      	cmp	r3, r4
 8025528:	db01      	blt.n	802552e <__sfputc_r+0x16>
 802552a:	290a      	cmp	r1, #10
 802552c:	d103      	bne.n	8025536 <__sfputc_r+0x1e>
 802552e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025532:	f000 bb81 	b.w	8025c38 <__swbuf_r>
 8025536:	6813      	ldr	r3, [r2, #0]
 8025538:	1c58      	adds	r0, r3, #1
 802553a:	6010      	str	r0, [r2, #0]
 802553c:	7019      	strb	r1, [r3, #0]
 802553e:	4608      	mov	r0, r1
 8025540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025544:	4770      	bx	lr

08025546 <__sfputs_r>:
 8025546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025548:	4606      	mov	r6, r0
 802554a:	460f      	mov	r7, r1
 802554c:	4614      	mov	r4, r2
 802554e:	18d5      	adds	r5, r2, r3
 8025550:	42ac      	cmp	r4, r5
 8025552:	d101      	bne.n	8025558 <__sfputs_r+0x12>
 8025554:	2000      	movs	r0, #0
 8025556:	e007      	b.n	8025568 <__sfputs_r+0x22>
 8025558:	f814 1b01 	ldrb.w	r1, [r4], #1
 802555c:	463a      	mov	r2, r7
 802555e:	4630      	mov	r0, r6
 8025560:	f7ff ffda 	bl	8025518 <__sfputc_r>
 8025564:	1c43      	adds	r3, r0, #1
 8025566:	d1f3      	bne.n	8025550 <__sfputs_r+0xa>
 8025568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802556c <_vfiprintf_r>:
 802556c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025570:	460d      	mov	r5, r1
 8025572:	b09d      	sub	sp, #116	; 0x74
 8025574:	4614      	mov	r4, r2
 8025576:	4698      	mov	r8, r3
 8025578:	4606      	mov	r6, r0
 802557a:	b118      	cbz	r0, 8025584 <_vfiprintf_r+0x18>
 802557c:	6983      	ldr	r3, [r0, #24]
 802557e:	b90b      	cbnz	r3, 8025584 <_vfiprintf_r+0x18>
 8025580:	f000 fd96 	bl	80260b0 <__sinit>
 8025584:	4b89      	ldr	r3, [pc, #548]	; (80257ac <_vfiprintf_r+0x240>)
 8025586:	429d      	cmp	r5, r3
 8025588:	d11b      	bne.n	80255c2 <_vfiprintf_r+0x56>
 802558a:	6875      	ldr	r5, [r6, #4]
 802558c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802558e:	07d9      	lsls	r1, r3, #31
 8025590:	d405      	bmi.n	802559e <_vfiprintf_r+0x32>
 8025592:	89ab      	ldrh	r3, [r5, #12]
 8025594:	059a      	lsls	r2, r3, #22
 8025596:	d402      	bmi.n	802559e <_vfiprintf_r+0x32>
 8025598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802559a:	f7ff fed0 	bl	802533e <__retarget_lock_acquire_recursive>
 802559e:	89ab      	ldrh	r3, [r5, #12]
 80255a0:	071b      	lsls	r3, r3, #28
 80255a2:	d501      	bpl.n	80255a8 <_vfiprintf_r+0x3c>
 80255a4:	692b      	ldr	r3, [r5, #16]
 80255a6:	b9eb      	cbnz	r3, 80255e4 <_vfiprintf_r+0x78>
 80255a8:	4629      	mov	r1, r5
 80255aa:	4630      	mov	r0, r6
 80255ac:	f000 fb96 	bl	8025cdc <__swsetup_r>
 80255b0:	b1c0      	cbz	r0, 80255e4 <_vfiprintf_r+0x78>
 80255b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80255b4:	07dc      	lsls	r4, r3, #31
 80255b6:	d50e      	bpl.n	80255d6 <_vfiprintf_r+0x6a>
 80255b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80255bc:	b01d      	add	sp, #116	; 0x74
 80255be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255c2:	4b7b      	ldr	r3, [pc, #492]	; (80257b0 <_vfiprintf_r+0x244>)
 80255c4:	429d      	cmp	r5, r3
 80255c6:	d101      	bne.n	80255cc <_vfiprintf_r+0x60>
 80255c8:	68b5      	ldr	r5, [r6, #8]
 80255ca:	e7df      	b.n	802558c <_vfiprintf_r+0x20>
 80255cc:	4b79      	ldr	r3, [pc, #484]	; (80257b4 <_vfiprintf_r+0x248>)
 80255ce:	429d      	cmp	r5, r3
 80255d0:	bf08      	it	eq
 80255d2:	68f5      	ldreq	r5, [r6, #12]
 80255d4:	e7da      	b.n	802558c <_vfiprintf_r+0x20>
 80255d6:	89ab      	ldrh	r3, [r5, #12]
 80255d8:	0598      	lsls	r0, r3, #22
 80255da:	d4ed      	bmi.n	80255b8 <_vfiprintf_r+0x4c>
 80255dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80255de:	f7ff feb0 	bl	8025342 <__retarget_lock_release_recursive>
 80255e2:	e7e9      	b.n	80255b8 <_vfiprintf_r+0x4c>
 80255e4:	2300      	movs	r3, #0
 80255e6:	9309      	str	r3, [sp, #36]	; 0x24
 80255e8:	2320      	movs	r3, #32
 80255ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80255ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80255f2:	2330      	movs	r3, #48	; 0x30
 80255f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80257b8 <_vfiprintf_r+0x24c>
 80255f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80255fc:	f04f 0901 	mov.w	r9, #1
 8025600:	4623      	mov	r3, r4
 8025602:	469a      	mov	sl, r3
 8025604:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025608:	b10a      	cbz	r2, 802560e <_vfiprintf_r+0xa2>
 802560a:	2a25      	cmp	r2, #37	; 0x25
 802560c:	d1f9      	bne.n	8025602 <_vfiprintf_r+0x96>
 802560e:	ebba 0b04 	subs.w	fp, sl, r4
 8025612:	d00b      	beq.n	802562c <_vfiprintf_r+0xc0>
 8025614:	465b      	mov	r3, fp
 8025616:	4622      	mov	r2, r4
 8025618:	4629      	mov	r1, r5
 802561a:	4630      	mov	r0, r6
 802561c:	f7ff ff93 	bl	8025546 <__sfputs_r>
 8025620:	3001      	adds	r0, #1
 8025622:	f000 80aa 	beq.w	802577a <_vfiprintf_r+0x20e>
 8025626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025628:	445a      	add	r2, fp
 802562a:	9209      	str	r2, [sp, #36]	; 0x24
 802562c:	f89a 3000 	ldrb.w	r3, [sl]
 8025630:	2b00      	cmp	r3, #0
 8025632:	f000 80a2 	beq.w	802577a <_vfiprintf_r+0x20e>
 8025636:	2300      	movs	r3, #0
 8025638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802563c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025640:	f10a 0a01 	add.w	sl, sl, #1
 8025644:	9304      	str	r3, [sp, #16]
 8025646:	9307      	str	r3, [sp, #28]
 8025648:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802564c:	931a      	str	r3, [sp, #104]	; 0x68
 802564e:	4654      	mov	r4, sl
 8025650:	2205      	movs	r2, #5
 8025652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025656:	4858      	ldr	r0, [pc, #352]	; (80257b8 <_vfiprintf_r+0x24c>)
 8025658:	f7da fde2 	bl	8000220 <memchr>
 802565c:	9a04      	ldr	r2, [sp, #16]
 802565e:	b9d8      	cbnz	r0, 8025698 <_vfiprintf_r+0x12c>
 8025660:	06d1      	lsls	r1, r2, #27
 8025662:	bf44      	itt	mi
 8025664:	2320      	movmi	r3, #32
 8025666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802566a:	0713      	lsls	r3, r2, #28
 802566c:	bf44      	itt	mi
 802566e:	232b      	movmi	r3, #43	; 0x2b
 8025670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025674:	f89a 3000 	ldrb.w	r3, [sl]
 8025678:	2b2a      	cmp	r3, #42	; 0x2a
 802567a:	d015      	beq.n	80256a8 <_vfiprintf_r+0x13c>
 802567c:	9a07      	ldr	r2, [sp, #28]
 802567e:	4654      	mov	r4, sl
 8025680:	2000      	movs	r0, #0
 8025682:	f04f 0c0a 	mov.w	ip, #10
 8025686:	4621      	mov	r1, r4
 8025688:	f811 3b01 	ldrb.w	r3, [r1], #1
 802568c:	3b30      	subs	r3, #48	; 0x30
 802568e:	2b09      	cmp	r3, #9
 8025690:	d94e      	bls.n	8025730 <_vfiprintf_r+0x1c4>
 8025692:	b1b0      	cbz	r0, 80256c2 <_vfiprintf_r+0x156>
 8025694:	9207      	str	r2, [sp, #28]
 8025696:	e014      	b.n	80256c2 <_vfiprintf_r+0x156>
 8025698:	eba0 0308 	sub.w	r3, r0, r8
 802569c:	fa09 f303 	lsl.w	r3, r9, r3
 80256a0:	4313      	orrs	r3, r2
 80256a2:	9304      	str	r3, [sp, #16]
 80256a4:	46a2      	mov	sl, r4
 80256a6:	e7d2      	b.n	802564e <_vfiprintf_r+0xe2>
 80256a8:	9b03      	ldr	r3, [sp, #12]
 80256aa:	1d19      	adds	r1, r3, #4
 80256ac:	681b      	ldr	r3, [r3, #0]
 80256ae:	9103      	str	r1, [sp, #12]
 80256b0:	2b00      	cmp	r3, #0
 80256b2:	bfbb      	ittet	lt
 80256b4:	425b      	neglt	r3, r3
 80256b6:	f042 0202 	orrlt.w	r2, r2, #2
 80256ba:	9307      	strge	r3, [sp, #28]
 80256bc:	9307      	strlt	r3, [sp, #28]
 80256be:	bfb8      	it	lt
 80256c0:	9204      	strlt	r2, [sp, #16]
 80256c2:	7823      	ldrb	r3, [r4, #0]
 80256c4:	2b2e      	cmp	r3, #46	; 0x2e
 80256c6:	d10c      	bne.n	80256e2 <_vfiprintf_r+0x176>
 80256c8:	7863      	ldrb	r3, [r4, #1]
 80256ca:	2b2a      	cmp	r3, #42	; 0x2a
 80256cc:	d135      	bne.n	802573a <_vfiprintf_r+0x1ce>
 80256ce:	9b03      	ldr	r3, [sp, #12]
 80256d0:	1d1a      	adds	r2, r3, #4
 80256d2:	681b      	ldr	r3, [r3, #0]
 80256d4:	9203      	str	r2, [sp, #12]
 80256d6:	2b00      	cmp	r3, #0
 80256d8:	bfb8      	it	lt
 80256da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80256de:	3402      	adds	r4, #2
 80256e0:	9305      	str	r3, [sp, #20]
 80256e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80257c8 <_vfiprintf_r+0x25c>
 80256e6:	7821      	ldrb	r1, [r4, #0]
 80256e8:	2203      	movs	r2, #3
 80256ea:	4650      	mov	r0, sl
 80256ec:	f7da fd98 	bl	8000220 <memchr>
 80256f0:	b140      	cbz	r0, 8025704 <_vfiprintf_r+0x198>
 80256f2:	2340      	movs	r3, #64	; 0x40
 80256f4:	eba0 000a 	sub.w	r0, r0, sl
 80256f8:	fa03 f000 	lsl.w	r0, r3, r0
 80256fc:	9b04      	ldr	r3, [sp, #16]
 80256fe:	4303      	orrs	r3, r0
 8025700:	3401      	adds	r4, #1
 8025702:	9304      	str	r3, [sp, #16]
 8025704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025708:	482c      	ldr	r0, [pc, #176]	; (80257bc <_vfiprintf_r+0x250>)
 802570a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802570e:	2206      	movs	r2, #6
 8025710:	f7da fd86 	bl	8000220 <memchr>
 8025714:	2800      	cmp	r0, #0
 8025716:	d03f      	beq.n	8025798 <_vfiprintf_r+0x22c>
 8025718:	4b29      	ldr	r3, [pc, #164]	; (80257c0 <_vfiprintf_r+0x254>)
 802571a:	bb1b      	cbnz	r3, 8025764 <_vfiprintf_r+0x1f8>
 802571c:	9b03      	ldr	r3, [sp, #12]
 802571e:	3307      	adds	r3, #7
 8025720:	f023 0307 	bic.w	r3, r3, #7
 8025724:	3308      	adds	r3, #8
 8025726:	9303      	str	r3, [sp, #12]
 8025728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802572a:	443b      	add	r3, r7
 802572c:	9309      	str	r3, [sp, #36]	; 0x24
 802572e:	e767      	b.n	8025600 <_vfiprintf_r+0x94>
 8025730:	fb0c 3202 	mla	r2, ip, r2, r3
 8025734:	460c      	mov	r4, r1
 8025736:	2001      	movs	r0, #1
 8025738:	e7a5      	b.n	8025686 <_vfiprintf_r+0x11a>
 802573a:	2300      	movs	r3, #0
 802573c:	3401      	adds	r4, #1
 802573e:	9305      	str	r3, [sp, #20]
 8025740:	4619      	mov	r1, r3
 8025742:	f04f 0c0a 	mov.w	ip, #10
 8025746:	4620      	mov	r0, r4
 8025748:	f810 2b01 	ldrb.w	r2, [r0], #1
 802574c:	3a30      	subs	r2, #48	; 0x30
 802574e:	2a09      	cmp	r2, #9
 8025750:	d903      	bls.n	802575a <_vfiprintf_r+0x1ee>
 8025752:	2b00      	cmp	r3, #0
 8025754:	d0c5      	beq.n	80256e2 <_vfiprintf_r+0x176>
 8025756:	9105      	str	r1, [sp, #20]
 8025758:	e7c3      	b.n	80256e2 <_vfiprintf_r+0x176>
 802575a:	fb0c 2101 	mla	r1, ip, r1, r2
 802575e:	4604      	mov	r4, r0
 8025760:	2301      	movs	r3, #1
 8025762:	e7f0      	b.n	8025746 <_vfiprintf_r+0x1da>
 8025764:	ab03      	add	r3, sp, #12
 8025766:	9300      	str	r3, [sp, #0]
 8025768:	462a      	mov	r2, r5
 802576a:	4b16      	ldr	r3, [pc, #88]	; (80257c4 <_vfiprintf_r+0x258>)
 802576c:	a904      	add	r1, sp, #16
 802576e:	4630      	mov	r0, r6
 8025770:	f3af 8000 	nop.w
 8025774:	4607      	mov	r7, r0
 8025776:	1c78      	adds	r0, r7, #1
 8025778:	d1d6      	bne.n	8025728 <_vfiprintf_r+0x1bc>
 802577a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802577c:	07d9      	lsls	r1, r3, #31
 802577e:	d405      	bmi.n	802578c <_vfiprintf_r+0x220>
 8025780:	89ab      	ldrh	r3, [r5, #12]
 8025782:	059a      	lsls	r2, r3, #22
 8025784:	d402      	bmi.n	802578c <_vfiprintf_r+0x220>
 8025786:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025788:	f7ff fddb 	bl	8025342 <__retarget_lock_release_recursive>
 802578c:	89ab      	ldrh	r3, [r5, #12]
 802578e:	065b      	lsls	r3, r3, #25
 8025790:	f53f af12 	bmi.w	80255b8 <_vfiprintf_r+0x4c>
 8025794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025796:	e711      	b.n	80255bc <_vfiprintf_r+0x50>
 8025798:	ab03      	add	r3, sp, #12
 802579a:	9300      	str	r3, [sp, #0]
 802579c:	462a      	mov	r2, r5
 802579e:	4b09      	ldr	r3, [pc, #36]	; (80257c4 <_vfiprintf_r+0x258>)
 80257a0:	a904      	add	r1, sp, #16
 80257a2:	4630      	mov	r0, r6
 80257a4:	f000 f880 	bl	80258a8 <_printf_i>
 80257a8:	e7e4      	b.n	8025774 <_vfiprintf_r+0x208>
 80257aa:	bf00      	nop
 80257ac:	08075cdc 	.word	0x08075cdc
 80257b0:	08075cfc 	.word	0x08075cfc
 80257b4:	08075cbc 	.word	0x08075cbc
 80257b8:	08075c88 	.word	0x08075c88
 80257bc:	08075c92 	.word	0x08075c92
 80257c0:	00000000 	.word	0x00000000
 80257c4:	08025547 	.word	0x08025547
 80257c8:	08075c8e 	.word	0x08075c8e

080257cc <_printf_common>:
 80257cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80257d0:	4616      	mov	r6, r2
 80257d2:	4699      	mov	r9, r3
 80257d4:	688a      	ldr	r2, [r1, #8]
 80257d6:	690b      	ldr	r3, [r1, #16]
 80257d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80257dc:	4293      	cmp	r3, r2
 80257de:	bfb8      	it	lt
 80257e0:	4613      	movlt	r3, r2
 80257e2:	6033      	str	r3, [r6, #0]
 80257e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80257e8:	4607      	mov	r7, r0
 80257ea:	460c      	mov	r4, r1
 80257ec:	b10a      	cbz	r2, 80257f2 <_printf_common+0x26>
 80257ee:	3301      	adds	r3, #1
 80257f0:	6033      	str	r3, [r6, #0]
 80257f2:	6823      	ldr	r3, [r4, #0]
 80257f4:	0699      	lsls	r1, r3, #26
 80257f6:	bf42      	ittt	mi
 80257f8:	6833      	ldrmi	r3, [r6, #0]
 80257fa:	3302      	addmi	r3, #2
 80257fc:	6033      	strmi	r3, [r6, #0]
 80257fe:	6825      	ldr	r5, [r4, #0]
 8025800:	f015 0506 	ands.w	r5, r5, #6
 8025804:	d106      	bne.n	8025814 <_printf_common+0x48>
 8025806:	f104 0a19 	add.w	sl, r4, #25
 802580a:	68e3      	ldr	r3, [r4, #12]
 802580c:	6832      	ldr	r2, [r6, #0]
 802580e:	1a9b      	subs	r3, r3, r2
 8025810:	42ab      	cmp	r3, r5
 8025812:	dc26      	bgt.n	8025862 <_printf_common+0x96>
 8025814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025818:	1e13      	subs	r3, r2, #0
 802581a:	6822      	ldr	r2, [r4, #0]
 802581c:	bf18      	it	ne
 802581e:	2301      	movne	r3, #1
 8025820:	0692      	lsls	r2, r2, #26
 8025822:	d42b      	bmi.n	802587c <_printf_common+0xb0>
 8025824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025828:	4649      	mov	r1, r9
 802582a:	4638      	mov	r0, r7
 802582c:	47c0      	blx	r8
 802582e:	3001      	adds	r0, #1
 8025830:	d01e      	beq.n	8025870 <_printf_common+0xa4>
 8025832:	6823      	ldr	r3, [r4, #0]
 8025834:	68e5      	ldr	r5, [r4, #12]
 8025836:	6832      	ldr	r2, [r6, #0]
 8025838:	f003 0306 	and.w	r3, r3, #6
 802583c:	2b04      	cmp	r3, #4
 802583e:	bf08      	it	eq
 8025840:	1aad      	subeq	r5, r5, r2
 8025842:	68a3      	ldr	r3, [r4, #8]
 8025844:	6922      	ldr	r2, [r4, #16]
 8025846:	bf0c      	ite	eq
 8025848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802584c:	2500      	movne	r5, #0
 802584e:	4293      	cmp	r3, r2
 8025850:	bfc4      	itt	gt
 8025852:	1a9b      	subgt	r3, r3, r2
 8025854:	18ed      	addgt	r5, r5, r3
 8025856:	2600      	movs	r6, #0
 8025858:	341a      	adds	r4, #26
 802585a:	42b5      	cmp	r5, r6
 802585c:	d11a      	bne.n	8025894 <_printf_common+0xc8>
 802585e:	2000      	movs	r0, #0
 8025860:	e008      	b.n	8025874 <_printf_common+0xa8>
 8025862:	2301      	movs	r3, #1
 8025864:	4652      	mov	r2, sl
 8025866:	4649      	mov	r1, r9
 8025868:	4638      	mov	r0, r7
 802586a:	47c0      	blx	r8
 802586c:	3001      	adds	r0, #1
 802586e:	d103      	bne.n	8025878 <_printf_common+0xac>
 8025870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025878:	3501      	adds	r5, #1
 802587a:	e7c6      	b.n	802580a <_printf_common+0x3e>
 802587c:	18e1      	adds	r1, r4, r3
 802587e:	1c5a      	adds	r2, r3, #1
 8025880:	2030      	movs	r0, #48	; 0x30
 8025882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025886:	4422      	add	r2, r4
 8025888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802588c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025890:	3302      	adds	r3, #2
 8025892:	e7c7      	b.n	8025824 <_printf_common+0x58>
 8025894:	2301      	movs	r3, #1
 8025896:	4622      	mov	r2, r4
 8025898:	4649      	mov	r1, r9
 802589a:	4638      	mov	r0, r7
 802589c:	47c0      	blx	r8
 802589e:	3001      	adds	r0, #1
 80258a0:	d0e6      	beq.n	8025870 <_printf_common+0xa4>
 80258a2:	3601      	adds	r6, #1
 80258a4:	e7d9      	b.n	802585a <_printf_common+0x8e>
	...

080258a8 <_printf_i>:
 80258a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80258ac:	460c      	mov	r4, r1
 80258ae:	4691      	mov	r9, r2
 80258b0:	7e27      	ldrb	r7, [r4, #24]
 80258b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80258b4:	2f78      	cmp	r7, #120	; 0x78
 80258b6:	4680      	mov	r8, r0
 80258b8:	469a      	mov	sl, r3
 80258ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80258be:	d807      	bhi.n	80258d0 <_printf_i+0x28>
 80258c0:	2f62      	cmp	r7, #98	; 0x62
 80258c2:	d80a      	bhi.n	80258da <_printf_i+0x32>
 80258c4:	2f00      	cmp	r7, #0
 80258c6:	f000 80d8 	beq.w	8025a7a <_printf_i+0x1d2>
 80258ca:	2f58      	cmp	r7, #88	; 0x58
 80258cc:	f000 80a3 	beq.w	8025a16 <_printf_i+0x16e>
 80258d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80258d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80258d8:	e03a      	b.n	8025950 <_printf_i+0xa8>
 80258da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80258de:	2b15      	cmp	r3, #21
 80258e0:	d8f6      	bhi.n	80258d0 <_printf_i+0x28>
 80258e2:	a001      	add	r0, pc, #4	; (adr r0, 80258e8 <_printf_i+0x40>)
 80258e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80258e8:	08025941 	.word	0x08025941
 80258ec:	08025955 	.word	0x08025955
 80258f0:	080258d1 	.word	0x080258d1
 80258f4:	080258d1 	.word	0x080258d1
 80258f8:	080258d1 	.word	0x080258d1
 80258fc:	080258d1 	.word	0x080258d1
 8025900:	08025955 	.word	0x08025955
 8025904:	080258d1 	.word	0x080258d1
 8025908:	080258d1 	.word	0x080258d1
 802590c:	080258d1 	.word	0x080258d1
 8025910:	080258d1 	.word	0x080258d1
 8025914:	08025a61 	.word	0x08025a61
 8025918:	08025985 	.word	0x08025985
 802591c:	08025a43 	.word	0x08025a43
 8025920:	080258d1 	.word	0x080258d1
 8025924:	080258d1 	.word	0x080258d1
 8025928:	08025a83 	.word	0x08025a83
 802592c:	080258d1 	.word	0x080258d1
 8025930:	08025985 	.word	0x08025985
 8025934:	080258d1 	.word	0x080258d1
 8025938:	080258d1 	.word	0x080258d1
 802593c:	08025a4b 	.word	0x08025a4b
 8025940:	680b      	ldr	r3, [r1, #0]
 8025942:	1d1a      	adds	r2, r3, #4
 8025944:	681b      	ldr	r3, [r3, #0]
 8025946:	600a      	str	r2, [r1, #0]
 8025948:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802594c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025950:	2301      	movs	r3, #1
 8025952:	e0a3      	b.n	8025a9c <_printf_i+0x1f4>
 8025954:	6825      	ldr	r5, [r4, #0]
 8025956:	6808      	ldr	r0, [r1, #0]
 8025958:	062e      	lsls	r6, r5, #24
 802595a:	f100 0304 	add.w	r3, r0, #4
 802595e:	d50a      	bpl.n	8025976 <_printf_i+0xce>
 8025960:	6805      	ldr	r5, [r0, #0]
 8025962:	600b      	str	r3, [r1, #0]
 8025964:	2d00      	cmp	r5, #0
 8025966:	da03      	bge.n	8025970 <_printf_i+0xc8>
 8025968:	232d      	movs	r3, #45	; 0x2d
 802596a:	426d      	negs	r5, r5
 802596c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025970:	485e      	ldr	r0, [pc, #376]	; (8025aec <_printf_i+0x244>)
 8025972:	230a      	movs	r3, #10
 8025974:	e019      	b.n	80259aa <_printf_i+0x102>
 8025976:	f015 0f40 	tst.w	r5, #64	; 0x40
 802597a:	6805      	ldr	r5, [r0, #0]
 802597c:	600b      	str	r3, [r1, #0]
 802597e:	bf18      	it	ne
 8025980:	b22d      	sxthne	r5, r5
 8025982:	e7ef      	b.n	8025964 <_printf_i+0xbc>
 8025984:	680b      	ldr	r3, [r1, #0]
 8025986:	6825      	ldr	r5, [r4, #0]
 8025988:	1d18      	adds	r0, r3, #4
 802598a:	6008      	str	r0, [r1, #0]
 802598c:	0628      	lsls	r0, r5, #24
 802598e:	d501      	bpl.n	8025994 <_printf_i+0xec>
 8025990:	681d      	ldr	r5, [r3, #0]
 8025992:	e002      	b.n	802599a <_printf_i+0xf2>
 8025994:	0669      	lsls	r1, r5, #25
 8025996:	d5fb      	bpl.n	8025990 <_printf_i+0xe8>
 8025998:	881d      	ldrh	r5, [r3, #0]
 802599a:	4854      	ldr	r0, [pc, #336]	; (8025aec <_printf_i+0x244>)
 802599c:	2f6f      	cmp	r7, #111	; 0x6f
 802599e:	bf0c      	ite	eq
 80259a0:	2308      	moveq	r3, #8
 80259a2:	230a      	movne	r3, #10
 80259a4:	2100      	movs	r1, #0
 80259a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80259aa:	6866      	ldr	r6, [r4, #4]
 80259ac:	60a6      	str	r6, [r4, #8]
 80259ae:	2e00      	cmp	r6, #0
 80259b0:	bfa2      	ittt	ge
 80259b2:	6821      	ldrge	r1, [r4, #0]
 80259b4:	f021 0104 	bicge.w	r1, r1, #4
 80259b8:	6021      	strge	r1, [r4, #0]
 80259ba:	b90d      	cbnz	r5, 80259c0 <_printf_i+0x118>
 80259bc:	2e00      	cmp	r6, #0
 80259be:	d04d      	beq.n	8025a5c <_printf_i+0x1b4>
 80259c0:	4616      	mov	r6, r2
 80259c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80259c6:	fb03 5711 	mls	r7, r3, r1, r5
 80259ca:	5dc7      	ldrb	r7, [r0, r7]
 80259cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80259d0:	462f      	mov	r7, r5
 80259d2:	42bb      	cmp	r3, r7
 80259d4:	460d      	mov	r5, r1
 80259d6:	d9f4      	bls.n	80259c2 <_printf_i+0x11a>
 80259d8:	2b08      	cmp	r3, #8
 80259da:	d10b      	bne.n	80259f4 <_printf_i+0x14c>
 80259dc:	6823      	ldr	r3, [r4, #0]
 80259de:	07df      	lsls	r7, r3, #31
 80259e0:	d508      	bpl.n	80259f4 <_printf_i+0x14c>
 80259e2:	6923      	ldr	r3, [r4, #16]
 80259e4:	6861      	ldr	r1, [r4, #4]
 80259e6:	4299      	cmp	r1, r3
 80259e8:	bfde      	ittt	le
 80259ea:	2330      	movle	r3, #48	; 0x30
 80259ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80259f0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80259f4:	1b92      	subs	r2, r2, r6
 80259f6:	6122      	str	r2, [r4, #16]
 80259f8:	f8cd a000 	str.w	sl, [sp]
 80259fc:	464b      	mov	r3, r9
 80259fe:	aa03      	add	r2, sp, #12
 8025a00:	4621      	mov	r1, r4
 8025a02:	4640      	mov	r0, r8
 8025a04:	f7ff fee2 	bl	80257cc <_printf_common>
 8025a08:	3001      	adds	r0, #1
 8025a0a:	d14c      	bne.n	8025aa6 <_printf_i+0x1fe>
 8025a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025a10:	b004      	add	sp, #16
 8025a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025a16:	4835      	ldr	r0, [pc, #212]	; (8025aec <_printf_i+0x244>)
 8025a18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8025a1c:	6823      	ldr	r3, [r4, #0]
 8025a1e:	680e      	ldr	r6, [r1, #0]
 8025a20:	061f      	lsls	r7, r3, #24
 8025a22:	f856 5b04 	ldr.w	r5, [r6], #4
 8025a26:	600e      	str	r6, [r1, #0]
 8025a28:	d514      	bpl.n	8025a54 <_printf_i+0x1ac>
 8025a2a:	07d9      	lsls	r1, r3, #31
 8025a2c:	bf44      	itt	mi
 8025a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8025a32:	6023      	strmi	r3, [r4, #0]
 8025a34:	b91d      	cbnz	r5, 8025a3e <_printf_i+0x196>
 8025a36:	6823      	ldr	r3, [r4, #0]
 8025a38:	f023 0320 	bic.w	r3, r3, #32
 8025a3c:	6023      	str	r3, [r4, #0]
 8025a3e:	2310      	movs	r3, #16
 8025a40:	e7b0      	b.n	80259a4 <_printf_i+0xfc>
 8025a42:	6823      	ldr	r3, [r4, #0]
 8025a44:	f043 0320 	orr.w	r3, r3, #32
 8025a48:	6023      	str	r3, [r4, #0]
 8025a4a:	2378      	movs	r3, #120	; 0x78
 8025a4c:	4828      	ldr	r0, [pc, #160]	; (8025af0 <_printf_i+0x248>)
 8025a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025a52:	e7e3      	b.n	8025a1c <_printf_i+0x174>
 8025a54:	065e      	lsls	r6, r3, #25
 8025a56:	bf48      	it	mi
 8025a58:	b2ad      	uxthmi	r5, r5
 8025a5a:	e7e6      	b.n	8025a2a <_printf_i+0x182>
 8025a5c:	4616      	mov	r6, r2
 8025a5e:	e7bb      	b.n	80259d8 <_printf_i+0x130>
 8025a60:	680b      	ldr	r3, [r1, #0]
 8025a62:	6826      	ldr	r6, [r4, #0]
 8025a64:	6960      	ldr	r0, [r4, #20]
 8025a66:	1d1d      	adds	r5, r3, #4
 8025a68:	600d      	str	r5, [r1, #0]
 8025a6a:	0635      	lsls	r5, r6, #24
 8025a6c:	681b      	ldr	r3, [r3, #0]
 8025a6e:	d501      	bpl.n	8025a74 <_printf_i+0x1cc>
 8025a70:	6018      	str	r0, [r3, #0]
 8025a72:	e002      	b.n	8025a7a <_printf_i+0x1d2>
 8025a74:	0671      	lsls	r1, r6, #25
 8025a76:	d5fb      	bpl.n	8025a70 <_printf_i+0x1c8>
 8025a78:	8018      	strh	r0, [r3, #0]
 8025a7a:	2300      	movs	r3, #0
 8025a7c:	6123      	str	r3, [r4, #16]
 8025a7e:	4616      	mov	r6, r2
 8025a80:	e7ba      	b.n	80259f8 <_printf_i+0x150>
 8025a82:	680b      	ldr	r3, [r1, #0]
 8025a84:	1d1a      	adds	r2, r3, #4
 8025a86:	600a      	str	r2, [r1, #0]
 8025a88:	681e      	ldr	r6, [r3, #0]
 8025a8a:	6862      	ldr	r2, [r4, #4]
 8025a8c:	2100      	movs	r1, #0
 8025a8e:	4630      	mov	r0, r6
 8025a90:	f7da fbc6 	bl	8000220 <memchr>
 8025a94:	b108      	cbz	r0, 8025a9a <_printf_i+0x1f2>
 8025a96:	1b80      	subs	r0, r0, r6
 8025a98:	6060      	str	r0, [r4, #4]
 8025a9a:	6863      	ldr	r3, [r4, #4]
 8025a9c:	6123      	str	r3, [r4, #16]
 8025a9e:	2300      	movs	r3, #0
 8025aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025aa4:	e7a8      	b.n	80259f8 <_printf_i+0x150>
 8025aa6:	6923      	ldr	r3, [r4, #16]
 8025aa8:	4632      	mov	r2, r6
 8025aaa:	4649      	mov	r1, r9
 8025aac:	4640      	mov	r0, r8
 8025aae:	47d0      	blx	sl
 8025ab0:	3001      	adds	r0, #1
 8025ab2:	d0ab      	beq.n	8025a0c <_printf_i+0x164>
 8025ab4:	6823      	ldr	r3, [r4, #0]
 8025ab6:	079b      	lsls	r3, r3, #30
 8025ab8:	d413      	bmi.n	8025ae2 <_printf_i+0x23a>
 8025aba:	68e0      	ldr	r0, [r4, #12]
 8025abc:	9b03      	ldr	r3, [sp, #12]
 8025abe:	4298      	cmp	r0, r3
 8025ac0:	bfb8      	it	lt
 8025ac2:	4618      	movlt	r0, r3
 8025ac4:	e7a4      	b.n	8025a10 <_printf_i+0x168>
 8025ac6:	2301      	movs	r3, #1
 8025ac8:	4632      	mov	r2, r6
 8025aca:	4649      	mov	r1, r9
 8025acc:	4640      	mov	r0, r8
 8025ace:	47d0      	blx	sl
 8025ad0:	3001      	adds	r0, #1
 8025ad2:	d09b      	beq.n	8025a0c <_printf_i+0x164>
 8025ad4:	3501      	adds	r5, #1
 8025ad6:	68e3      	ldr	r3, [r4, #12]
 8025ad8:	9903      	ldr	r1, [sp, #12]
 8025ada:	1a5b      	subs	r3, r3, r1
 8025adc:	42ab      	cmp	r3, r5
 8025ade:	dcf2      	bgt.n	8025ac6 <_printf_i+0x21e>
 8025ae0:	e7eb      	b.n	8025aba <_printf_i+0x212>
 8025ae2:	2500      	movs	r5, #0
 8025ae4:	f104 0619 	add.w	r6, r4, #25
 8025ae8:	e7f5      	b.n	8025ad6 <_printf_i+0x22e>
 8025aea:	bf00      	nop
 8025aec:	08075c99 	.word	0x08075c99
 8025af0:	08075caa 	.word	0x08075caa

08025af4 <_sbrk_r>:
 8025af4:	b538      	push	{r3, r4, r5, lr}
 8025af6:	4d06      	ldr	r5, [pc, #24]	; (8025b10 <_sbrk_r+0x1c>)
 8025af8:	2300      	movs	r3, #0
 8025afa:	4604      	mov	r4, r0
 8025afc:	4608      	mov	r0, r1
 8025afe:	602b      	str	r3, [r5, #0]
 8025b00:	f7dc ff5a 	bl	80029b8 <_sbrk>
 8025b04:	1c43      	adds	r3, r0, #1
 8025b06:	d102      	bne.n	8025b0e <_sbrk_r+0x1a>
 8025b08:	682b      	ldr	r3, [r5, #0]
 8025b0a:	b103      	cbz	r3, 8025b0e <_sbrk_r+0x1a>
 8025b0c:	6023      	str	r3, [r4, #0]
 8025b0e:	bd38      	pop	{r3, r4, r5, pc}
 8025b10:	2004a53c 	.word	0x2004a53c

08025b14 <_raise_r>:
 8025b14:	291f      	cmp	r1, #31
 8025b16:	b538      	push	{r3, r4, r5, lr}
 8025b18:	4604      	mov	r4, r0
 8025b1a:	460d      	mov	r5, r1
 8025b1c:	d904      	bls.n	8025b28 <_raise_r+0x14>
 8025b1e:	2316      	movs	r3, #22
 8025b20:	6003      	str	r3, [r0, #0]
 8025b22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025b26:	bd38      	pop	{r3, r4, r5, pc}
 8025b28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025b2a:	b112      	cbz	r2, 8025b32 <_raise_r+0x1e>
 8025b2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025b30:	b94b      	cbnz	r3, 8025b46 <_raise_r+0x32>
 8025b32:	4620      	mov	r0, r4
 8025b34:	f000 f830 	bl	8025b98 <_getpid_r>
 8025b38:	462a      	mov	r2, r5
 8025b3a:	4601      	mov	r1, r0
 8025b3c:	4620      	mov	r0, r4
 8025b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025b42:	f000 b817 	b.w	8025b74 <_kill_r>
 8025b46:	2b01      	cmp	r3, #1
 8025b48:	d00a      	beq.n	8025b60 <_raise_r+0x4c>
 8025b4a:	1c59      	adds	r1, r3, #1
 8025b4c:	d103      	bne.n	8025b56 <_raise_r+0x42>
 8025b4e:	2316      	movs	r3, #22
 8025b50:	6003      	str	r3, [r0, #0]
 8025b52:	2001      	movs	r0, #1
 8025b54:	e7e7      	b.n	8025b26 <_raise_r+0x12>
 8025b56:	2400      	movs	r4, #0
 8025b58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025b5c:	4628      	mov	r0, r5
 8025b5e:	4798      	blx	r3
 8025b60:	2000      	movs	r0, #0
 8025b62:	e7e0      	b.n	8025b26 <_raise_r+0x12>

08025b64 <raise>:
 8025b64:	4b02      	ldr	r3, [pc, #8]	; (8025b70 <raise+0xc>)
 8025b66:	4601      	mov	r1, r0
 8025b68:	6818      	ldr	r0, [r3, #0]
 8025b6a:	f7ff bfd3 	b.w	8025b14 <_raise_r>
 8025b6e:	bf00      	nop
 8025b70:	2000001c 	.word	0x2000001c

08025b74 <_kill_r>:
 8025b74:	b538      	push	{r3, r4, r5, lr}
 8025b76:	4d07      	ldr	r5, [pc, #28]	; (8025b94 <_kill_r+0x20>)
 8025b78:	2300      	movs	r3, #0
 8025b7a:	4604      	mov	r4, r0
 8025b7c:	4608      	mov	r0, r1
 8025b7e:	4611      	mov	r1, r2
 8025b80:	602b      	str	r3, [r5, #0]
 8025b82:	f7dc fe91 	bl	80028a8 <_kill>
 8025b86:	1c43      	adds	r3, r0, #1
 8025b88:	d102      	bne.n	8025b90 <_kill_r+0x1c>
 8025b8a:	682b      	ldr	r3, [r5, #0]
 8025b8c:	b103      	cbz	r3, 8025b90 <_kill_r+0x1c>
 8025b8e:	6023      	str	r3, [r4, #0]
 8025b90:	bd38      	pop	{r3, r4, r5, pc}
 8025b92:	bf00      	nop
 8025b94:	2004a53c 	.word	0x2004a53c

08025b98 <_getpid_r>:
 8025b98:	f7dc be7e 	b.w	8002898 <_getpid>

08025b9c <siprintf>:
 8025b9c:	b40e      	push	{r1, r2, r3}
 8025b9e:	b500      	push	{lr}
 8025ba0:	b09c      	sub	sp, #112	; 0x70
 8025ba2:	ab1d      	add	r3, sp, #116	; 0x74
 8025ba4:	9002      	str	r0, [sp, #8]
 8025ba6:	9006      	str	r0, [sp, #24]
 8025ba8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025bac:	4809      	ldr	r0, [pc, #36]	; (8025bd4 <siprintf+0x38>)
 8025bae:	9107      	str	r1, [sp, #28]
 8025bb0:	9104      	str	r1, [sp, #16]
 8025bb2:	4909      	ldr	r1, [pc, #36]	; (8025bd8 <siprintf+0x3c>)
 8025bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8025bb8:	9105      	str	r1, [sp, #20]
 8025bba:	6800      	ldr	r0, [r0, #0]
 8025bbc:	9301      	str	r3, [sp, #4]
 8025bbe:	a902      	add	r1, sp, #8
 8025bc0:	f000 fc06 	bl	80263d0 <_svfiprintf_r>
 8025bc4:	9b02      	ldr	r3, [sp, #8]
 8025bc6:	2200      	movs	r2, #0
 8025bc8:	701a      	strb	r2, [r3, #0]
 8025bca:	b01c      	add	sp, #112	; 0x70
 8025bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8025bd0:	b003      	add	sp, #12
 8025bd2:	4770      	bx	lr
 8025bd4:	2000001c 	.word	0x2000001c
 8025bd8:	ffff0208 	.word	0xffff0208

08025bdc <strcpy>:
 8025bdc:	4603      	mov	r3, r0
 8025bde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025be2:	f803 2b01 	strb.w	r2, [r3], #1
 8025be6:	2a00      	cmp	r2, #0
 8025be8:	d1f9      	bne.n	8025bde <strcpy+0x2>
 8025bea:	4770      	bx	lr

08025bec <strncmp>:
 8025bec:	b510      	push	{r4, lr}
 8025bee:	b16a      	cbz	r2, 8025c0c <strncmp+0x20>
 8025bf0:	3901      	subs	r1, #1
 8025bf2:	1884      	adds	r4, r0, r2
 8025bf4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8025bf8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8025bfc:	4293      	cmp	r3, r2
 8025bfe:	d103      	bne.n	8025c08 <strncmp+0x1c>
 8025c00:	42a0      	cmp	r0, r4
 8025c02:	d001      	beq.n	8025c08 <strncmp+0x1c>
 8025c04:	2b00      	cmp	r3, #0
 8025c06:	d1f5      	bne.n	8025bf4 <strncmp+0x8>
 8025c08:	1a98      	subs	r0, r3, r2
 8025c0a:	bd10      	pop	{r4, pc}
 8025c0c:	4610      	mov	r0, r2
 8025c0e:	e7fc      	b.n	8025c0a <strncmp+0x1e>

08025c10 <strncpy>:
 8025c10:	b510      	push	{r4, lr}
 8025c12:	3901      	subs	r1, #1
 8025c14:	4603      	mov	r3, r0
 8025c16:	b132      	cbz	r2, 8025c26 <strncpy+0x16>
 8025c18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025c1c:	f803 4b01 	strb.w	r4, [r3], #1
 8025c20:	3a01      	subs	r2, #1
 8025c22:	2c00      	cmp	r4, #0
 8025c24:	d1f7      	bne.n	8025c16 <strncpy+0x6>
 8025c26:	441a      	add	r2, r3
 8025c28:	2100      	movs	r1, #0
 8025c2a:	4293      	cmp	r3, r2
 8025c2c:	d100      	bne.n	8025c30 <strncpy+0x20>
 8025c2e:	bd10      	pop	{r4, pc}
 8025c30:	f803 1b01 	strb.w	r1, [r3], #1
 8025c34:	e7f9      	b.n	8025c2a <strncpy+0x1a>
	...

08025c38 <__swbuf_r>:
 8025c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c3a:	460e      	mov	r6, r1
 8025c3c:	4614      	mov	r4, r2
 8025c3e:	4605      	mov	r5, r0
 8025c40:	b118      	cbz	r0, 8025c4a <__swbuf_r+0x12>
 8025c42:	6983      	ldr	r3, [r0, #24]
 8025c44:	b90b      	cbnz	r3, 8025c4a <__swbuf_r+0x12>
 8025c46:	f000 fa33 	bl	80260b0 <__sinit>
 8025c4a:	4b21      	ldr	r3, [pc, #132]	; (8025cd0 <__swbuf_r+0x98>)
 8025c4c:	429c      	cmp	r4, r3
 8025c4e:	d12b      	bne.n	8025ca8 <__swbuf_r+0x70>
 8025c50:	686c      	ldr	r4, [r5, #4]
 8025c52:	69a3      	ldr	r3, [r4, #24]
 8025c54:	60a3      	str	r3, [r4, #8]
 8025c56:	89a3      	ldrh	r3, [r4, #12]
 8025c58:	071a      	lsls	r2, r3, #28
 8025c5a:	d52f      	bpl.n	8025cbc <__swbuf_r+0x84>
 8025c5c:	6923      	ldr	r3, [r4, #16]
 8025c5e:	b36b      	cbz	r3, 8025cbc <__swbuf_r+0x84>
 8025c60:	6923      	ldr	r3, [r4, #16]
 8025c62:	6820      	ldr	r0, [r4, #0]
 8025c64:	1ac0      	subs	r0, r0, r3
 8025c66:	6963      	ldr	r3, [r4, #20]
 8025c68:	b2f6      	uxtb	r6, r6
 8025c6a:	4283      	cmp	r3, r0
 8025c6c:	4637      	mov	r7, r6
 8025c6e:	dc04      	bgt.n	8025c7a <__swbuf_r+0x42>
 8025c70:	4621      	mov	r1, r4
 8025c72:	4628      	mov	r0, r5
 8025c74:	f000 f988 	bl	8025f88 <_fflush_r>
 8025c78:	bb30      	cbnz	r0, 8025cc8 <__swbuf_r+0x90>
 8025c7a:	68a3      	ldr	r3, [r4, #8]
 8025c7c:	3b01      	subs	r3, #1
 8025c7e:	60a3      	str	r3, [r4, #8]
 8025c80:	6823      	ldr	r3, [r4, #0]
 8025c82:	1c5a      	adds	r2, r3, #1
 8025c84:	6022      	str	r2, [r4, #0]
 8025c86:	701e      	strb	r6, [r3, #0]
 8025c88:	6963      	ldr	r3, [r4, #20]
 8025c8a:	3001      	adds	r0, #1
 8025c8c:	4283      	cmp	r3, r0
 8025c8e:	d004      	beq.n	8025c9a <__swbuf_r+0x62>
 8025c90:	89a3      	ldrh	r3, [r4, #12]
 8025c92:	07db      	lsls	r3, r3, #31
 8025c94:	d506      	bpl.n	8025ca4 <__swbuf_r+0x6c>
 8025c96:	2e0a      	cmp	r6, #10
 8025c98:	d104      	bne.n	8025ca4 <__swbuf_r+0x6c>
 8025c9a:	4621      	mov	r1, r4
 8025c9c:	4628      	mov	r0, r5
 8025c9e:	f000 f973 	bl	8025f88 <_fflush_r>
 8025ca2:	b988      	cbnz	r0, 8025cc8 <__swbuf_r+0x90>
 8025ca4:	4638      	mov	r0, r7
 8025ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025ca8:	4b0a      	ldr	r3, [pc, #40]	; (8025cd4 <__swbuf_r+0x9c>)
 8025caa:	429c      	cmp	r4, r3
 8025cac:	d101      	bne.n	8025cb2 <__swbuf_r+0x7a>
 8025cae:	68ac      	ldr	r4, [r5, #8]
 8025cb0:	e7cf      	b.n	8025c52 <__swbuf_r+0x1a>
 8025cb2:	4b09      	ldr	r3, [pc, #36]	; (8025cd8 <__swbuf_r+0xa0>)
 8025cb4:	429c      	cmp	r4, r3
 8025cb6:	bf08      	it	eq
 8025cb8:	68ec      	ldreq	r4, [r5, #12]
 8025cba:	e7ca      	b.n	8025c52 <__swbuf_r+0x1a>
 8025cbc:	4621      	mov	r1, r4
 8025cbe:	4628      	mov	r0, r5
 8025cc0:	f000 f80c 	bl	8025cdc <__swsetup_r>
 8025cc4:	2800      	cmp	r0, #0
 8025cc6:	d0cb      	beq.n	8025c60 <__swbuf_r+0x28>
 8025cc8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8025ccc:	e7ea      	b.n	8025ca4 <__swbuf_r+0x6c>
 8025cce:	bf00      	nop
 8025cd0:	08075cdc 	.word	0x08075cdc
 8025cd4:	08075cfc 	.word	0x08075cfc
 8025cd8:	08075cbc 	.word	0x08075cbc

08025cdc <__swsetup_r>:
 8025cdc:	4b32      	ldr	r3, [pc, #200]	; (8025da8 <__swsetup_r+0xcc>)
 8025cde:	b570      	push	{r4, r5, r6, lr}
 8025ce0:	681d      	ldr	r5, [r3, #0]
 8025ce2:	4606      	mov	r6, r0
 8025ce4:	460c      	mov	r4, r1
 8025ce6:	b125      	cbz	r5, 8025cf2 <__swsetup_r+0x16>
 8025ce8:	69ab      	ldr	r3, [r5, #24]
 8025cea:	b913      	cbnz	r3, 8025cf2 <__swsetup_r+0x16>
 8025cec:	4628      	mov	r0, r5
 8025cee:	f000 f9df 	bl	80260b0 <__sinit>
 8025cf2:	4b2e      	ldr	r3, [pc, #184]	; (8025dac <__swsetup_r+0xd0>)
 8025cf4:	429c      	cmp	r4, r3
 8025cf6:	d10f      	bne.n	8025d18 <__swsetup_r+0x3c>
 8025cf8:	686c      	ldr	r4, [r5, #4]
 8025cfa:	89a3      	ldrh	r3, [r4, #12]
 8025cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025d00:	0719      	lsls	r1, r3, #28
 8025d02:	d42c      	bmi.n	8025d5e <__swsetup_r+0x82>
 8025d04:	06dd      	lsls	r5, r3, #27
 8025d06:	d411      	bmi.n	8025d2c <__swsetup_r+0x50>
 8025d08:	2309      	movs	r3, #9
 8025d0a:	6033      	str	r3, [r6, #0]
 8025d0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025d10:	81a3      	strh	r3, [r4, #12]
 8025d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025d16:	e03e      	b.n	8025d96 <__swsetup_r+0xba>
 8025d18:	4b25      	ldr	r3, [pc, #148]	; (8025db0 <__swsetup_r+0xd4>)
 8025d1a:	429c      	cmp	r4, r3
 8025d1c:	d101      	bne.n	8025d22 <__swsetup_r+0x46>
 8025d1e:	68ac      	ldr	r4, [r5, #8]
 8025d20:	e7eb      	b.n	8025cfa <__swsetup_r+0x1e>
 8025d22:	4b24      	ldr	r3, [pc, #144]	; (8025db4 <__swsetup_r+0xd8>)
 8025d24:	429c      	cmp	r4, r3
 8025d26:	bf08      	it	eq
 8025d28:	68ec      	ldreq	r4, [r5, #12]
 8025d2a:	e7e6      	b.n	8025cfa <__swsetup_r+0x1e>
 8025d2c:	0758      	lsls	r0, r3, #29
 8025d2e:	d512      	bpl.n	8025d56 <__swsetup_r+0x7a>
 8025d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025d32:	b141      	cbz	r1, 8025d46 <__swsetup_r+0x6a>
 8025d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025d38:	4299      	cmp	r1, r3
 8025d3a:	d002      	beq.n	8025d42 <__swsetup_r+0x66>
 8025d3c:	4630      	mov	r0, r6
 8025d3e:	f7ff fb41 	bl	80253c4 <_free_r>
 8025d42:	2300      	movs	r3, #0
 8025d44:	6363      	str	r3, [r4, #52]	; 0x34
 8025d46:	89a3      	ldrh	r3, [r4, #12]
 8025d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025d4c:	81a3      	strh	r3, [r4, #12]
 8025d4e:	2300      	movs	r3, #0
 8025d50:	6063      	str	r3, [r4, #4]
 8025d52:	6923      	ldr	r3, [r4, #16]
 8025d54:	6023      	str	r3, [r4, #0]
 8025d56:	89a3      	ldrh	r3, [r4, #12]
 8025d58:	f043 0308 	orr.w	r3, r3, #8
 8025d5c:	81a3      	strh	r3, [r4, #12]
 8025d5e:	6923      	ldr	r3, [r4, #16]
 8025d60:	b94b      	cbnz	r3, 8025d76 <__swsetup_r+0x9a>
 8025d62:	89a3      	ldrh	r3, [r4, #12]
 8025d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025d6c:	d003      	beq.n	8025d76 <__swsetup_r+0x9a>
 8025d6e:	4621      	mov	r1, r4
 8025d70:	4630      	mov	r0, r6
 8025d72:	f000 fa5f 	bl	8026234 <__smakebuf_r>
 8025d76:	89a0      	ldrh	r0, [r4, #12]
 8025d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025d7c:	f010 0301 	ands.w	r3, r0, #1
 8025d80:	d00a      	beq.n	8025d98 <__swsetup_r+0xbc>
 8025d82:	2300      	movs	r3, #0
 8025d84:	60a3      	str	r3, [r4, #8]
 8025d86:	6963      	ldr	r3, [r4, #20]
 8025d88:	425b      	negs	r3, r3
 8025d8a:	61a3      	str	r3, [r4, #24]
 8025d8c:	6923      	ldr	r3, [r4, #16]
 8025d8e:	b943      	cbnz	r3, 8025da2 <__swsetup_r+0xc6>
 8025d90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025d94:	d1ba      	bne.n	8025d0c <__swsetup_r+0x30>
 8025d96:	bd70      	pop	{r4, r5, r6, pc}
 8025d98:	0781      	lsls	r1, r0, #30
 8025d9a:	bf58      	it	pl
 8025d9c:	6963      	ldrpl	r3, [r4, #20]
 8025d9e:	60a3      	str	r3, [r4, #8]
 8025da0:	e7f4      	b.n	8025d8c <__swsetup_r+0xb0>
 8025da2:	2000      	movs	r0, #0
 8025da4:	e7f7      	b.n	8025d96 <__swsetup_r+0xba>
 8025da6:	bf00      	nop
 8025da8:	2000001c 	.word	0x2000001c
 8025dac:	08075cdc 	.word	0x08075cdc
 8025db0:	08075cfc 	.word	0x08075cfc
 8025db4:	08075cbc 	.word	0x08075cbc

08025db8 <__register_exitproc>:
 8025db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025dbc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8025e78 <__register_exitproc+0xc0>
 8025dc0:	4606      	mov	r6, r0
 8025dc2:	f8d8 0000 	ldr.w	r0, [r8]
 8025dc6:	461f      	mov	r7, r3
 8025dc8:	460d      	mov	r5, r1
 8025dca:	4691      	mov	r9, r2
 8025dcc:	f7ff fab7 	bl	802533e <__retarget_lock_acquire_recursive>
 8025dd0:	4b25      	ldr	r3, [pc, #148]	; (8025e68 <__register_exitproc+0xb0>)
 8025dd2:	681c      	ldr	r4, [r3, #0]
 8025dd4:	b934      	cbnz	r4, 8025de4 <__register_exitproc+0x2c>
 8025dd6:	4c25      	ldr	r4, [pc, #148]	; (8025e6c <__register_exitproc+0xb4>)
 8025dd8:	601c      	str	r4, [r3, #0]
 8025dda:	4b25      	ldr	r3, [pc, #148]	; (8025e70 <__register_exitproc+0xb8>)
 8025ddc:	b113      	cbz	r3, 8025de4 <__register_exitproc+0x2c>
 8025dde:	681b      	ldr	r3, [r3, #0]
 8025de0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025de4:	6863      	ldr	r3, [r4, #4]
 8025de6:	2b1f      	cmp	r3, #31
 8025de8:	dd07      	ble.n	8025dfa <__register_exitproc+0x42>
 8025dea:	f8d8 0000 	ldr.w	r0, [r8]
 8025dee:	f7ff faa8 	bl	8025342 <__retarget_lock_release_recursive>
 8025df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025dfa:	b34e      	cbz	r6, 8025e50 <__register_exitproc+0x98>
 8025dfc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8025e00:	b988      	cbnz	r0, 8025e26 <__register_exitproc+0x6e>
 8025e02:	4b1c      	ldr	r3, [pc, #112]	; (8025e74 <__register_exitproc+0xbc>)
 8025e04:	b923      	cbnz	r3, 8025e10 <__register_exitproc+0x58>
 8025e06:	f8d8 0000 	ldr.w	r0, [r8]
 8025e0a:	f7ff fa99 	bl	8025340 <__retarget_lock_release>
 8025e0e:	e7f0      	b.n	8025df2 <__register_exitproc+0x3a>
 8025e10:	f44f 7084 	mov.w	r0, #264	; 0x108
 8025e14:	f7ff fa96 	bl	8025344 <malloc>
 8025e18:	2800      	cmp	r0, #0
 8025e1a:	d0f4      	beq.n	8025e06 <__register_exitproc+0x4e>
 8025e1c:	2300      	movs	r3, #0
 8025e1e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8025e22:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025e26:	6863      	ldr	r3, [r4, #4]
 8025e28:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025e2c:	2201      	movs	r2, #1
 8025e2e:	409a      	lsls	r2, r3
 8025e30:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8025e34:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8025e38:	4313      	orrs	r3, r2
 8025e3a:	2e02      	cmp	r6, #2
 8025e3c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025e40:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8025e44:	bf02      	ittt	eq
 8025e46:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8025e4a:	431a      	orreq	r2, r3
 8025e4c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8025e50:	6863      	ldr	r3, [r4, #4]
 8025e52:	f8d8 0000 	ldr.w	r0, [r8]
 8025e56:	1c5a      	adds	r2, r3, #1
 8025e58:	3302      	adds	r3, #2
 8025e5a:	6062      	str	r2, [r4, #4]
 8025e5c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8025e60:	f7ff fa6f 	bl	8025342 <__retarget_lock_release_recursive>
 8025e64:	2000      	movs	r0, #0
 8025e66:	e7c6      	b.n	8025df6 <__register_exitproc+0x3e>
 8025e68:	2004a264 	.word	0x2004a264
 8025e6c:	2004a1d8 	.word	0x2004a1d8
 8025e70:	00000000 	.word	0x00000000
 8025e74:	08025345 	.word	0x08025345
 8025e78:	20000080 	.word	0x20000080

08025e7c <__sflush_r>:
 8025e7c:	898a      	ldrh	r2, [r1, #12]
 8025e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e82:	4605      	mov	r5, r0
 8025e84:	0710      	lsls	r0, r2, #28
 8025e86:	460c      	mov	r4, r1
 8025e88:	d458      	bmi.n	8025f3c <__sflush_r+0xc0>
 8025e8a:	684b      	ldr	r3, [r1, #4]
 8025e8c:	2b00      	cmp	r3, #0
 8025e8e:	dc05      	bgt.n	8025e9c <__sflush_r+0x20>
 8025e90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025e92:	2b00      	cmp	r3, #0
 8025e94:	dc02      	bgt.n	8025e9c <__sflush_r+0x20>
 8025e96:	2000      	movs	r0, #0
 8025e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025e9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025e9e:	2e00      	cmp	r6, #0
 8025ea0:	d0f9      	beq.n	8025e96 <__sflush_r+0x1a>
 8025ea2:	2300      	movs	r3, #0
 8025ea4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025ea8:	682f      	ldr	r7, [r5, #0]
 8025eaa:	602b      	str	r3, [r5, #0]
 8025eac:	d032      	beq.n	8025f14 <__sflush_r+0x98>
 8025eae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025eb0:	89a3      	ldrh	r3, [r4, #12]
 8025eb2:	075a      	lsls	r2, r3, #29
 8025eb4:	d505      	bpl.n	8025ec2 <__sflush_r+0x46>
 8025eb6:	6863      	ldr	r3, [r4, #4]
 8025eb8:	1ac0      	subs	r0, r0, r3
 8025eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025ebc:	b10b      	cbz	r3, 8025ec2 <__sflush_r+0x46>
 8025ebe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025ec0:	1ac0      	subs	r0, r0, r3
 8025ec2:	2300      	movs	r3, #0
 8025ec4:	4602      	mov	r2, r0
 8025ec6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025ec8:	6a21      	ldr	r1, [r4, #32]
 8025eca:	4628      	mov	r0, r5
 8025ecc:	47b0      	blx	r6
 8025ece:	1c43      	adds	r3, r0, #1
 8025ed0:	89a3      	ldrh	r3, [r4, #12]
 8025ed2:	d106      	bne.n	8025ee2 <__sflush_r+0x66>
 8025ed4:	6829      	ldr	r1, [r5, #0]
 8025ed6:	291d      	cmp	r1, #29
 8025ed8:	d82c      	bhi.n	8025f34 <__sflush_r+0xb8>
 8025eda:	4a2a      	ldr	r2, [pc, #168]	; (8025f84 <__sflush_r+0x108>)
 8025edc:	40ca      	lsrs	r2, r1
 8025ede:	07d6      	lsls	r6, r2, #31
 8025ee0:	d528      	bpl.n	8025f34 <__sflush_r+0xb8>
 8025ee2:	2200      	movs	r2, #0
 8025ee4:	6062      	str	r2, [r4, #4]
 8025ee6:	04d9      	lsls	r1, r3, #19
 8025ee8:	6922      	ldr	r2, [r4, #16]
 8025eea:	6022      	str	r2, [r4, #0]
 8025eec:	d504      	bpl.n	8025ef8 <__sflush_r+0x7c>
 8025eee:	1c42      	adds	r2, r0, #1
 8025ef0:	d101      	bne.n	8025ef6 <__sflush_r+0x7a>
 8025ef2:	682b      	ldr	r3, [r5, #0]
 8025ef4:	b903      	cbnz	r3, 8025ef8 <__sflush_r+0x7c>
 8025ef6:	6560      	str	r0, [r4, #84]	; 0x54
 8025ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025efa:	602f      	str	r7, [r5, #0]
 8025efc:	2900      	cmp	r1, #0
 8025efe:	d0ca      	beq.n	8025e96 <__sflush_r+0x1a>
 8025f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025f04:	4299      	cmp	r1, r3
 8025f06:	d002      	beq.n	8025f0e <__sflush_r+0x92>
 8025f08:	4628      	mov	r0, r5
 8025f0a:	f7ff fa5b 	bl	80253c4 <_free_r>
 8025f0e:	2000      	movs	r0, #0
 8025f10:	6360      	str	r0, [r4, #52]	; 0x34
 8025f12:	e7c1      	b.n	8025e98 <__sflush_r+0x1c>
 8025f14:	6a21      	ldr	r1, [r4, #32]
 8025f16:	2301      	movs	r3, #1
 8025f18:	4628      	mov	r0, r5
 8025f1a:	47b0      	blx	r6
 8025f1c:	1c41      	adds	r1, r0, #1
 8025f1e:	d1c7      	bne.n	8025eb0 <__sflush_r+0x34>
 8025f20:	682b      	ldr	r3, [r5, #0]
 8025f22:	2b00      	cmp	r3, #0
 8025f24:	d0c4      	beq.n	8025eb0 <__sflush_r+0x34>
 8025f26:	2b1d      	cmp	r3, #29
 8025f28:	d001      	beq.n	8025f2e <__sflush_r+0xb2>
 8025f2a:	2b16      	cmp	r3, #22
 8025f2c:	d101      	bne.n	8025f32 <__sflush_r+0xb6>
 8025f2e:	602f      	str	r7, [r5, #0]
 8025f30:	e7b1      	b.n	8025e96 <__sflush_r+0x1a>
 8025f32:	89a3      	ldrh	r3, [r4, #12]
 8025f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025f38:	81a3      	strh	r3, [r4, #12]
 8025f3a:	e7ad      	b.n	8025e98 <__sflush_r+0x1c>
 8025f3c:	690f      	ldr	r7, [r1, #16]
 8025f3e:	2f00      	cmp	r7, #0
 8025f40:	d0a9      	beq.n	8025e96 <__sflush_r+0x1a>
 8025f42:	0793      	lsls	r3, r2, #30
 8025f44:	680e      	ldr	r6, [r1, #0]
 8025f46:	bf08      	it	eq
 8025f48:	694b      	ldreq	r3, [r1, #20]
 8025f4a:	600f      	str	r7, [r1, #0]
 8025f4c:	bf18      	it	ne
 8025f4e:	2300      	movne	r3, #0
 8025f50:	eba6 0807 	sub.w	r8, r6, r7
 8025f54:	608b      	str	r3, [r1, #8]
 8025f56:	f1b8 0f00 	cmp.w	r8, #0
 8025f5a:	dd9c      	ble.n	8025e96 <__sflush_r+0x1a>
 8025f5c:	6a21      	ldr	r1, [r4, #32]
 8025f5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025f60:	4643      	mov	r3, r8
 8025f62:	463a      	mov	r2, r7
 8025f64:	4628      	mov	r0, r5
 8025f66:	47b0      	blx	r6
 8025f68:	2800      	cmp	r0, #0
 8025f6a:	dc06      	bgt.n	8025f7a <__sflush_r+0xfe>
 8025f6c:	89a3      	ldrh	r3, [r4, #12]
 8025f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025f72:	81a3      	strh	r3, [r4, #12]
 8025f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025f78:	e78e      	b.n	8025e98 <__sflush_r+0x1c>
 8025f7a:	4407      	add	r7, r0
 8025f7c:	eba8 0800 	sub.w	r8, r8, r0
 8025f80:	e7e9      	b.n	8025f56 <__sflush_r+0xda>
 8025f82:	bf00      	nop
 8025f84:	20400001 	.word	0x20400001

08025f88 <_fflush_r>:
 8025f88:	b538      	push	{r3, r4, r5, lr}
 8025f8a:	690b      	ldr	r3, [r1, #16]
 8025f8c:	4605      	mov	r5, r0
 8025f8e:	460c      	mov	r4, r1
 8025f90:	b913      	cbnz	r3, 8025f98 <_fflush_r+0x10>
 8025f92:	2500      	movs	r5, #0
 8025f94:	4628      	mov	r0, r5
 8025f96:	bd38      	pop	{r3, r4, r5, pc}
 8025f98:	b118      	cbz	r0, 8025fa2 <_fflush_r+0x1a>
 8025f9a:	6983      	ldr	r3, [r0, #24]
 8025f9c:	b90b      	cbnz	r3, 8025fa2 <_fflush_r+0x1a>
 8025f9e:	f000 f887 	bl	80260b0 <__sinit>
 8025fa2:	4b14      	ldr	r3, [pc, #80]	; (8025ff4 <_fflush_r+0x6c>)
 8025fa4:	429c      	cmp	r4, r3
 8025fa6:	d11b      	bne.n	8025fe0 <_fflush_r+0x58>
 8025fa8:	686c      	ldr	r4, [r5, #4]
 8025faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025fae:	2b00      	cmp	r3, #0
 8025fb0:	d0ef      	beq.n	8025f92 <_fflush_r+0xa>
 8025fb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025fb4:	07d0      	lsls	r0, r2, #31
 8025fb6:	d404      	bmi.n	8025fc2 <_fflush_r+0x3a>
 8025fb8:	0599      	lsls	r1, r3, #22
 8025fba:	d402      	bmi.n	8025fc2 <_fflush_r+0x3a>
 8025fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025fbe:	f7ff f9be 	bl	802533e <__retarget_lock_acquire_recursive>
 8025fc2:	4628      	mov	r0, r5
 8025fc4:	4621      	mov	r1, r4
 8025fc6:	f7ff ff59 	bl	8025e7c <__sflush_r>
 8025fca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025fcc:	07da      	lsls	r2, r3, #31
 8025fce:	4605      	mov	r5, r0
 8025fd0:	d4e0      	bmi.n	8025f94 <_fflush_r+0xc>
 8025fd2:	89a3      	ldrh	r3, [r4, #12]
 8025fd4:	059b      	lsls	r3, r3, #22
 8025fd6:	d4dd      	bmi.n	8025f94 <_fflush_r+0xc>
 8025fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025fda:	f7ff f9b2 	bl	8025342 <__retarget_lock_release_recursive>
 8025fde:	e7d9      	b.n	8025f94 <_fflush_r+0xc>
 8025fe0:	4b05      	ldr	r3, [pc, #20]	; (8025ff8 <_fflush_r+0x70>)
 8025fe2:	429c      	cmp	r4, r3
 8025fe4:	d101      	bne.n	8025fea <_fflush_r+0x62>
 8025fe6:	68ac      	ldr	r4, [r5, #8]
 8025fe8:	e7df      	b.n	8025faa <_fflush_r+0x22>
 8025fea:	4b04      	ldr	r3, [pc, #16]	; (8025ffc <_fflush_r+0x74>)
 8025fec:	429c      	cmp	r4, r3
 8025fee:	bf08      	it	eq
 8025ff0:	68ec      	ldreq	r4, [r5, #12]
 8025ff2:	e7da      	b.n	8025faa <_fflush_r+0x22>
 8025ff4:	08075cdc 	.word	0x08075cdc
 8025ff8:	08075cfc 	.word	0x08075cfc
 8025ffc:	08075cbc 	.word	0x08075cbc

08026000 <std>:
 8026000:	2300      	movs	r3, #0
 8026002:	b510      	push	{r4, lr}
 8026004:	4604      	mov	r4, r0
 8026006:	e9c0 3300 	strd	r3, r3, [r0]
 802600a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802600e:	6083      	str	r3, [r0, #8]
 8026010:	8181      	strh	r1, [r0, #12]
 8026012:	6643      	str	r3, [r0, #100]	; 0x64
 8026014:	81c2      	strh	r2, [r0, #14]
 8026016:	6183      	str	r3, [r0, #24]
 8026018:	4619      	mov	r1, r3
 802601a:	2208      	movs	r2, #8
 802601c:	305c      	adds	r0, #92	; 0x5c
 802601e:	f7ff f9c9 	bl	80253b4 <memset>
 8026022:	4b05      	ldr	r3, [pc, #20]	; (8026038 <std+0x38>)
 8026024:	6263      	str	r3, [r4, #36]	; 0x24
 8026026:	4b05      	ldr	r3, [pc, #20]	; (802603c <std+0x3c>)
 8026028:	62a3      	str	r3, [r4, #40]	; 0x28
 802602a:	4b05      	ldr	r3, [pc, #20]	; (8026040 <std+0x40>)
 802602c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802602e:	4b05      	ldr	r3, [pc, #20]	; (8026044 <std+0x44>)
 8026030:	6224      	str	r4, [r4, #32]
 8026032:	6323      	str	r3, [r4, #48]	; 0x30
 8026034:	bd10      	pop	{r4, pc}
 8026036:	bf00      	nop
 8026038:	080265d1 	.word	0x080265d1
 802603c:	080265f3 	.word	0x080265f3
 8026040:	0802662b 	.word	0x0802662b
 8026044:	0802664f 	.word	0x0802664f

08026048 <_cleanup_r>:
 8026048:	4901      	ldr	r1, [pc, #4]	; (8026050 <_cleanup_r+0x8>)
 802604a:	f000 b8af 	b.w	80261ac <_fwalk_reent>
 802604e:	bf00      	nop
 8026050:	08025f89 	.word	0x08025f89

08026054 <__sfmoreglue>:
 8026054:	b570      	push	{r4, r5, r6, lr}
 8026056:	1e4a      	subs	r2, r1, #1
 8026058:	2568      	movs	r5, #104	; 0x68
 802605a:	4355      	muls	r5, r2
 802605c:	460e      	mov	r6, r1
 802605e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026062:	f7ff f9ff 	bl	8025464 <_malloc_r>
 8026066:	4604      	mov	r4, r0
 8026068:	b140      	cbz	r0, 802607c <__sfmoreglue+0x28>
 802606a:	2100      	movs	r1, #0
 802606c:	e9c0 1600 	strd	r1, r6, [r0]
 8026070:	300c      	adds	r0, #12
 8026072:	60a0      	str	r0, [r4, #8]
 8026074:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026078:	f7ff f99c 	bl	80253b4 <memset>
 802607c:	4620      	mov	r0, r4
 802607e:	bd70      	pop	{r4, r5, r6, pc}

08026080 <__sfp_lock_acquire>:
 8026080:	4801      	ldr	r0, [pc, #4]	; (8026088 <__sfp_lock_acquire+0x8>)
 8026082:	f7ff b95c 	b.w	802533e <__retarget_lock_acquire_recursive>
 8026086:	bf00      	nop
 8026088:	2004a534 	.word	0x2004a534

0802608c <__sfp_lock_release>:
 802608c:	4801      	ldr	r0, [pc, #4]	; (8026094 <__sfp_lock_release+0x8>)
 802608e:	f7ff b958 	b.w	8025342 <__retarget_lock_release_recursive>
 8026092:	bf00      	nop
 8026094:	2004a534 	.word	0x2004a534

08026098 <__sinit_lock_acquire>:
 8026098:	4801      	ldr	r0, [pc, #4]	; (80260a0 <__sinit_lock_acquire+0x8>)
 802609a:	f7ff b950 	b.w	802533e <__retarget_lock_acquire_recursive>
 802609e:	bf00      	nop
 80260a0:	2004a533 	.word	0x2004a533

080260a4 <__sinit_lock_release>:
 80260a4:	4801      	ldr	r0, [pc, #4]	; (80260ac <__sinit_lock_release+0x8>)
 80260a6:	f7ff b94c 	b.w	8025342 <__retarget_lock_release_recursive>
 80260aa:	bf00      	nop
 80260ac:	2004a533 	.word	0x2004a533

080260b0 <__sinit>:
 80260b0:	b510      	push	{r4, lr}
 80260b2:	4604      	mov	r4, r0
 80260b4:	f7ff fff0 	bl	8026098 <__sinit_lock_acquire>
 80260b8:	69a3      	ldr	r3, [r4, #24]
 80260ba:	b11b      	cbz	r3, 80260c4 <__sinit+0x14>
 80260bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80260c0:	f7ff bff0 	b.w	80260a4 <__sinit_lock_release>
 80260c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80260c8:	6523      	str	r3, [r4, #80]	; 0x50
 80260ca:	4b13      	ldr	r3, [pc, #76]	; (8026118 <__sinit+0x68>)
 80260cc:	4a13      	ldr	r2, [pc, #76]	; (802611c <__sinit+0x6c>)
 80260ce:	681b      	ldr	r3, [r3, #0]
 80260d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80260d2:	42a3      	cmp	r3, r4
 80260d4:	bf04      	itt	eq
 80260d6:	2301      	moveq	r3, #1
 80260d8:	61a3      	streq	r3, [r4, #24]
 80260da:	4620      	mov	r0, r4
 80260dc:	f000 f820 	bl	8026120 <__sfp>
 80260e0:	6060      	str	r0, [r4, #4]
 80260e2:	4620      	mov	r0, r4
 80260e4:	f000 f81c 	bl	8026120 <__sfp>
 80260e8:	60a0      	str	r0, [r4, #8]
 80260ea:	4620      	mov	r0, r4
 80260ec:	f000 f818 	bl	8026120 <__sfp>
 80260f0:	2200      	movs	r2, #0
 80260f2:	60e0      	str	r0, [r4, #12]
 80260f4:	2104      	movs	r1, #4
 80260f6:	6860      	ldr	r0, [r4, #4]
 80260f8:	f7ff ff82 	bl	8026000 <std>
 80260fc:	68a0      	ldr	r0, [r4, #8]
 80260fe:	2201      	movs	r2, #1
 8026100:	2109      	movs	r1, #9
 8026102:	f7ff ff7d 	bl	8026000 <std>
 8026106:	68e0      	ldr	r0, [r4, #12]
 8026108:	2202      	movs	r2, #2
 802610a:	2112      	movs	r1, #18
 802610c:	f7ff ff78 	bl	8026000 <std>
 8026110:	2301      	movs	r3, #1
 8026112:	61a3      	str	r3, [r4, #24]
 8026114:	e7d2      	b.n	80260bc <__sinit+0xc>
 8026116:	bf00      	nop
 8026118:	08075c84 	.word	0x08075c84
 802611c:	08026049 	.word	0x08026049

08026120 <__sfp>:
 8026120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026122:	4607      	mov	r7, r0
 8026124:	f7ff ffac 	bl	8026080 <__sfp_lock_acquire>
 8026128:	4b1e      	ldr	r3, [pc, #120]	; (80261a4 <__sfp+0x84>)
 802612a:	681e      	ldr	r6, [r3, #0]
 802612c:	69b3      	ldr	r3, [r6, #24]
 802612e:	b913      	cbnz	r3, 8026136 <__sfp+0x16>
 8026130:	4630      	mov	r0, r6
 8026132:	f7ff ffbd 	bl	80260b0 <__sinit>
 8026136:	3648      	adds	r6, #72	; 0x48
 8026138:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802613c:	3b01      	subs	r3, #1
 802613e:	d503      	bpl.n	8026148 <__sfp+0x28>
 8026140:	6833      	ldr	r3, [r6, #0]
 8026142:	b30b      	cbz	r3, 8026188 <__sfp+0x68>
 8026144:	6836      	ldr	r6, [r6, #0]
 8026146:	e7f7      	b.n	8026138 <__sfp+0x18>
 8026148:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802614c:	b9d5      	cbnz	r5, 8026184 <__sfp+0x64>
 802614e:	4b16      	ldr	r3, [pc, #88]	; (80261a8 <__sfp+0x88>)
 8026150:	60e3      	str	r3, [r4, #12]
 8026152:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026156:	6665      	str	r5, [r4, #100]	; 0x64
 8026158:	f7ff f8f0 	bl	802533c <__retarget_lock_init_recursive>
 802615c:	f7ff ff96 	bl	802608c <__sfp_lock_release>
 8026160:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8026164:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8026168:	6025      	str	r5, [r4, #0]
 802616a:	61a5      	str	r5, [r4, #24]
 802616c:	2208      	movs	r2, #8
 802616e:	4629      	mov	r1, r5
 8026170:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026174:	f7ff f91e 	bl	80253b4 <memset>
 8026178:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802617c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026180:	4620      	mov	r0, r4
 8026182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026184:	3468      	adds	r4, #104	; 0x68
 8026186:	e7d9      	b.n	802613c <__sfp+0x1c>
 8026188:	2104      	movs	r1, #4
 802618a:	4638      	mov	r0, r7
 802618c:	f7ff ff62 	bl	8026054 <__sfmoreglue>
 8026190:	4604      	mov	r4, r0
 8026192:	6030      	str	r0, [r6, #0]
 8026194:	2800      	cmp	r0, #0
 8026196:	d1d5      	bne.n	8026144 <__sfp+0x24>
 8026198:	f7ff ff78 	bl	802608c <__sfp_lock_release>
 802619c:	230c      	movs	r3, #12
 802619e:	603b      	str	r3, [r7, #0]
 80261a0:	e7ee      	b.n	8026180 <__sfp+0x60>
 80261a2:	bf00      	nop
 80261a4:	08075c84 	.word	0x08075c84
 80261a8:	ffff0001 	.word	0xffff0001

080261ac <_fwalk_reent>:
 80261ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80261b0:	4606      	mov	r6, r0
 80261b2:	4688      	mov	r8, r1
 80261b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80261b8:	2700      	movs	r7, #0
 80261ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80261be:	f1b9 0901 	subs.w	r9, r9, #1
 80261c2:	d505      	bpl.n	80261d0 <_fwalk_reent+0x24>
 80261c4:	6824      	ldr	r4, [r4, #0]
 80261c6:	2c00      	cmp	r4, #0
 80261c8:	d1f7      	bne.n	80261ba <_fwalk_reent+0xe>
 80261ca:	4638      	mov	r0, r7
 80261cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80261d0:	89ab      	ldrh	r3, [r5, #12]
 80261d2:	2b01      	cmp	r3, #1
 80261d4:	d907      	bls.n	80261e6 <_fwalk_reent+0x3a>
 80261d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80261da:	3301      	adds	r3, #1
 80261dc:	d003      	beq.n	80261e6 <_fwalk_reent+0x3a>
 80261de:	4629      	mov	r1, r5
 80261e0:	4630      	mov	r0, r6
 80261e2:	47c0      	blx	r8
 80261e4:	4307      	orrs	r7, r0
 80261e6:	3568      	adds	r5, #104	; 0x68
 80261e8:	e7e9      	b.n	80261be <_fwalk_reent+0x12>

080261ea <__swhatbuf_r>:
 80261ea:	b570      	push	{r4, r5, r6, lr}
 80261ec:	460e      	mov	r6, r1
 80261ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80261f2:	2900      	cmp	r1, #0
 80261f4:	b096      	sub	sp, #88	; 0x58
 80261f6:	4614      	mov	r4, r2
 80261f8:	461d      	mov	r5, r3
 80261fa:	da07      	bge.n	802620c <__swhatbuf_r+0x22>
 80261fc:	2300      	movs	r3, #0
 80261fe:	602b      	str	r3, [r5, #0]
 8026200:	89b3      	ldrh	r3, [r6, #12]
 8026202:	061a      	lsls	r2, r3, #24
 8026204:	d410      	bmi.n	8026228 <__swhatbuf_r+0x3e>
 8026206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802620a:	e00e      	b.n	802622a <__swhatbuf_r+0x40>
 802620c:	466a      	mov	r2, sp
 802620e:	f000 fa45 	bl	802669c <_fstat_r>
 8026212:	2800      	cmp	r0, #0
 8026214:	dbf2      	blt.n	80261fc <__swhatbuf_r+0x12>
 8026216:	9a01      	ldr	r2, [sp, #4]
 8026218:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802621c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026220:	425a      	negs	r2, r3
 8026222:	415a      	adcs	r2, r3
 8026224:	602a      	str	r2, [r5, #0]
 8026226:	e7ee      	b.n	8026206 <__swhatbuf_r+0x1c>
 8026228:	2340      	movs	r3, #64	; 0x40
 802622a:	2000      	movs	r0, #0
 802622c:	6023      	str	r3, [r4, #0]
 802622e:	b016      	add	sp, #88	; 0x58
 8026230:	bd70      	pop	{r4, r5, r6, pc}
	...

08026234 <__smakebuf_r>:
 8026234:	898b      	ldrh	r3, [r1, #12]
 8026236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026238:	079d      	lsls	r5, r3, #30
 802623a:	4606      	mov	r6, r0
 802623c:	460c      	mov	r4, r1
 802623e:	d507      	bpl.n	8026250 <__smakebuf_r+0x1c>
 8026240:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026244:	6023      	str	r3, [r4, #0]
 8026246:	6123      	str	r3, [r4, #16]
 8026248:	2301      	movs	r3, #1
 802624a:	6163      	str	r3, [r4, #20]
 802624c:	b002      	add	sp, #8
 802624e:	bd70      	pop	{r4, r5, r6, pc}
 8026250:	ab01      	add	r3, sp, #4
 8026252:	466a      	mov	r2, sp
 8026254:	f7ff ffc9 	bl	80261ea <__swhatbuf_r>
 8026258:	9900      	ldr	r1, [sp, #0]
 802625a:	4605      	mov	r5, r0
 802625c:	4630      	mov	r0, r6
 802625e:	f7ff f901 	bl	8025464 <_malloc_r>
 8026262:	b948      	cbnz	r0, 8026278 <__smakebuf_r+0x44>
 8026264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026268:	059a      	lsls	r2, r3, #22
 802626a:	d4ef      	bmi.n	802624c <__smakebuf_r+0x18>
 802626c:	f023 0303 	bic.w	r3, r3, #3
 8026270:	f043 0302 	orr.w	r3, r3, #2
 8026274:	81a3      	strh	r3, [r4, #12]
 8026276:	e7e3      	b.n	8026240 <__smakebuf_r+0xc>
 8026278:	4b0d      	ldr	r3, [pc, #52]	; (80262b0 <__smakebuf_r+0x7c>)
 802627a:	62b3      	str	r3, [r6, #40]	; 0x28
 802627c:	89a3      	ldrh	r3, [r4, #12]
 802627e:	6020      	str	r0, [r4, #0]
 8026280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026284:	81a3      	strh	r3, [r4, #12]
 8026286:	9b00      	ldr	r3, [sp, #0]
 8026288:	6163      	str	r3, [r4, #20]
 802628a:	9b01      	ldr	r3, [sp, #4]
 802628c:	6120      	str	r0, [r4, #16]
 802628e:	b15b      	cbz	r3, 80262a8 <__smakebuf_r+0x74>
 8026290:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026294:	4630      	mov	r0, r6
 8026296:	f000 fa13 	bl	80266c0 <_isatty_r>
 802629a:	b128      	cbz	r0, 80262a8 <__smakebuf_r+0x74>
 802629c:	89a3      	ldrh	r3, [r4, #12]
 802629e:	f023 0303 	bic.w	r3, r3, #3
 80262a2:	f043 0301 	orr.w	r3, r3, #1
 80262a6:	81a3      	strh	r3, [r4, #12]
 80262a8:	89a0      	ldrh	r0, [r4, #12]
 80262aa:	4305      	orrs	r5, r0
 80262ac:	81a5      	strh	r5, [r4, #12]
 80262ae:	e7cd      	b.n	802624c <__smakebuf_r+0x18>
 80262b0:	08026049 	.word	0x08026049

080262b4 <__malloc_lock>:
 80262b4:	4801      	ldr	r0, [pc, #4]	; (80262bc <__malloc_lock+0x8>)
 80262b6:	f7ff b842 	b.w	802533e <__retarget_lock_acquire_recursive>
 80262ba:	bf00      	nop
 80262bc:	2004a530 	.word	0x2004a530

080262c0 <__malloc_unlock>:
 80262c0:	4801      	ldr	r0, [pc, #4]	; (80262c8 <__malloc_unlock+0x8>)
 80262c2:	f7ff b83e 	b.w	8025342 <__retarget_lock_release_recursive>
 80262c6:	bf00      	nop
 80262c8:	2004a530 	.word	0x2004a530

080262cc <_realloc_r>:
 80262cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80262ce:	4607      	mov	r7, r0
 80262d0:	4614      	mov	r4, r2
 80262d2:	460e      	mov	r6, r1
 80262d4:	b921      	cbnz	r1, 80262e0 <_realloc_r+0x14>
 80262d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80262da:	4611      	mov	r1, r2
 80262dc:	f7ff b8c2 	b.w	8025464 <_malloc_r>
 80262e0:	b922      	cbnz	r2, 80262ec <_realloc_r+0x20>
 80262e2:	f7ff f86f 	bl	80253c4 <_free_r>
 80262e6:	4625      	mov	r5, r4
 80262e8:	4628      	mov	r0, r5
 80262ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80262ec:	f000 fa0a 	bl	8026704 <_malloc_usable_size_r>
 80262f0:	42a0      	cmp	r0, r4
 80262f2:	d20f      	bcs.n	8026314 <_realloc_r+0x48>
 80262f4:	4621      	mov	r1, r4
 80262f6:	4638      	mov	r0, r7
 80262f8:	f7ff f8b4 	bl	8025464 <_malloc_r>
 80262fc:	4605      	mov	r5, r0
 80262fe:	2800      	cmp	r0, #0
 8026300:	d0f2      	beq.n	80262e8 <_realloc_r+0x1c>
 8026302:	4631      	mov	r1, r6
 8026304:	4622      	mov	r2, r4
 8026306:	f7ff f82d 	bl	8025364 <memcpy>
 802630a:	4631      	mov	r1, r6
 802630c:	4638      	mov	r0, r7
 802630e:	f7ff f859 	bl	80253c4 <_free_r>
 8026312:	e7e9      	b.n	80262e8 <_realloc_r+0x1c>
 8026314:	4635      	mov	r5, r6
 8026316:	e7e7      	b.n	80262e8 <_realloc_r+0x1c>

08026318 <__ssputs_r>:
 8026318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802631c:	688e      	ldr	r6, [r1, #8]
 802631e:	429e      	cmp	r6, r3
 8026320:	4682      	mov	sl, r0
 8026322:	460c      	mov	r4, r1
 8026324:	4690      	mov	r8, r2
 8026326:	461f      	mov	r7, r3
 8026328:	d838      	bhi.n	802639c <__ssputs_r+0x84>
 802632a:	898a      	ldrh	r2, [r1, #12]
 802632c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8026330:	d032      	beq.n	8026398 <__ssputs_r+0x80>
 8026332:	6825      	ldr	r5, [r4, #0]
 8026334:	6909      	ldr	r1, [r1, #16]
 8026336:	eba5 0901 	sub.w	r9, r5, r1
 802633a:	6965      	ldr	r5, [r4, #20]
 802633c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026340:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8026344:	3301      	adds	r3, #1
 8026346:	444b      	add	r3, r9
 8026348:	106d      	asrs	r5, r5, #1
 802634a:	429d      	cmp	r5, r3
 802634c:	bf38      	it	cc
 802634e:	461d      	movcc	r5, r3
 8026350:	0553      	lsls	r3, r2, #21
 8026352:	d531      	bpl.n	80263b8 <__ssputs_r+0xa0>
 8026354:	4629      	mov	r1, r5
 8026356:	f7ff f885 	bl	8025464 <_malloc_r>
 802635a:	4606      	mov	r6, r0
 802635c:	b950      	cbnz	r0, 8026374 <__ssputs_r+0x5c>
 802635e:	230c      	movs	r3, #12
 8026360:	f8ca 3000 	str.w	r3, [sl]
 8026364:	89a3      	ldrh	r3, [r4, #12]
 8026366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802636a:	81a3      	strh	r3, [r4, #12]
 802636c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026374:	6921      	ldr	r1, [r4, #16]
 8026376:	464a      	mov	r2, r9
 8026378:	f7fe fff4 	bl	8025364 <memcpy>
 802637c:	89a3      	ldrh	r3, [r4, #12]
 802637e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8026382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026386:	81a3      	strh	r3, [r4, #12]
 8026388:	6126      	str	r6, [r4, #16]
 802638a:	6165      	str	r5, [r4, #20]
 802638c:	444e      	add	r6, r9
 802638e:	eba5 0509 	sub.w	r5, r5, r9
 8026392:	6026      	str	r6, [r4, #0]
 8026394:	60a5      	str	r5, [r4, #8]
 8026396:	463e      	mov	r6, r7
 8026398:	42be      	cmp	r6, r7
 802639a:	d900      	bls.n	802639e <__ssputs_r+0x86>
 802639c:	463e      	mov	r6, r7
 802639e:	4632      	mov	r2, r6
 80263a0:	6820      	ldr	r0, [r4, #0]
 80263a2:	4641      	mov	r1, r8
 80263a4:	f7fe ffec 	bl	8025380 <memmove>
 80263a8:	68a3      	ldr	r3, [r4, #8]
 80263aa:	6822      	ldr	r2, [r4, #0]
 80263ac:	1b9b      	subs	r3, r3, r6
 80263ae:	4432      	add	r2, r6
 80263b0:	60a3      	str	r3, [r4, #8]
 80263b2:	6022      	str	r2, [r4, #0]
 80263b4:	2000      	movs	r0, #0
 80263b6:	e7db      	b.n	8026370 <__ssputs_r+0x58>
 80263b8:	462a      	mov	r2, r5
 80263ba:	f7ff ff87 	bl	80262cc <_realloc_r>
 80263be:	4606      	mov	r6, r0
 80263c0:	2800      	cmp	r0, #0
 80263c2:	d1e1      	bne.n	8026388 <__ssputs_r+0x70>
 80263c4:	6921      	ldr	r1, [r4, #16]
 80263c6:	4650      	mov	r0, sl
 80263c8:	f7fe fffc 	bl	80253c4 <_free_r>
 80263cc:	e7c7      	b.n	802635e <__ssputs_r+0x46>
	...

080263d0 <_svfiprintf_r>:
 80263d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80263d4:	4698      	mov	r8, r3
 80263d6:	898b      	ldrh	r3, [r1, #12]
 80263d8:	061b      	lsls	r3, r3, #24
 80263da:	b09d      	sub	sp, #116	; 0x74
 80263dc:	4607      	mov	r7, r0
 80263de:	460d      	mov	r5, r1
 80263e0:	4614      	mov	r4, r2
 80263e2:	d50e      	bpl.n	8026402 <_svfiprintf_r+0x32>
 80263e4:	690b      	ldr	r3, [r1, #16]
 80263e6:	b963      	cbnz	r3, 8026402 <_svfiprintf_r+0x32>
 80263e8:	2140      	movs	r1, #64	; 0x40
 80263ea:	f7ff f83b 	bl	8025464 <_malloc_r>
 80263ee:	6028      	str	r0, [r5, #0]
 80263f0:	6128      	str	r0, [r5, #16]
 80263f2:	b920      	cbnz	r0, 80263fe <_svfiprintf_r+0x2e>
 80263f4:	230c      	movs	r3, #12
 80263f6:	603b      	str	r3, [r7, #0]
 80263f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80263fc:	e0d1      	b.n	80265a2 <_svfiprintf_r+0x1d2>
 80263fe:	2340      	movs	r3, #64	; 0x40
 8026400:	616b      	str	r3, [r5, #20]
 8026402:	2300      	movs	r3, #0
 8026404:	9309      	str	r3, [sp, #36]	; 0x24
 8026406:	2320      	movs	r3, #32
 8026408:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802640c:	f8cd 800c 	str.w	r8, [sp, #12]
 8026410:	2330      	movs	r3, #48	; 0x30
 8026412:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80265bc <_svfiprintf_r+0x1ec>
 8026416:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802641a:	f04f 0901 	mov.w	r9, #1
 802641e:	4623      	mov	r3, r4
 8026420:	469a      	mov	sl, r3
 8026422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026426:	b10a      	cbz	r2, 802642c <_svfiprintf_r+0x5c>
 8026428:	2a25      	cmp	r2, #37	; 0x25
 802642a:	d1f9      	bne.n	8026420 <_svfiprintf_r+0x50>
 802642c:	ebba 0b04 	subs.w	fp, sl, r4
 8026430:	d00b      	beq.n	802644a <_svfiprintf_r+0x7a>
 8026432:	465b      	mov	r3, fp
 8026434:	4622      	mov	r2, r4
 8026436:	4629      	mov	r1, r5
 8026438:	4638      	mov	r0, r7
 802643a:	f7ff ff6d 	bl	8026318 <__ssputs_r>
 802643e:	3001      	adds	r0, #1
 8026440:	f000 80aa 	beq.w	8026598 <_svfiprintf_r+0x1c8>
 8026444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026446:	445a      	add	r2, fp
 8026448:	9209      	str	r2, [sp, #36]	; 0x24
 802644a:	f89a 3000 	ldrb.w	r3, [sl]
 802644e:	2b00      	cmp	r3, #0
 8026450:	f000 80a2 	beq.w	8026598 <_svfiprintf_r+0x1c8>
 8026454:	2300      	movs	r3, #0
 8026456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802645a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802645e:	f10a 0a01 	add.w	sl, sl, #1
 8026462:	9304      	str	r3, [sp, #16]
 8026464:	9307      	str	r3, [sp, #28]
 8026466:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802646a:	931a      	str	r3, [sp, #104]	; 0x68
 802646c:	4654      	mov	r4, sl
 802646e:	2205      	movs	r2, #5
 8026470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026474:	4851      	ldr	r0, [pc, #324]	; (80265bc <_svfiprintf_r+0x1ec>)
 8026476:	f7d9 fed3 	bl	8000220 <memchr>
 802647a:	9a04      	ldr	r2, [sp, #16]
 802647c:	b9d8      	cbnz	r0, 80264b6 <_svfiprintf_r+0xe6>
 802647e:	06d0      	lsls	r0, r2, #27
 8026480:	bf44      	itt	mi
 8026482:	2320      	movmi	r3, #32
 8026484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026488:	0711      	lsls	r1, r2, #28
 802648a:	bf44      	itt	mi
 802648c:	232b      	movmi	r3, #43	; 0x2b
 802648e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026492:	f89a 3000 	ldrb.w	r3, [sl]
 8026496:	2b2a      	cmp	r3, #42	; 0x2a
 8026498:	d015      	beq.n	80264c6 <_svfiprintf_r+0xf6>
 802649a:	9a07      	ldr	r2, [sp, #28]
 802649c:	4654      	mov	r4, sl
 802649e:	2000      	movs	r0, #0
 80264a0:	f04f 0c0a 	mov.w	ip, #10
 80264a4:	4621      	mov	r1, r4
 80264a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80264aa:	3b30      	subs	r3, #48	; 0x30
 80264ac:	2b09      	cmp	r3, #9
 80264ae:	d94e      	bls.n	802654e <_svfiprintf_r+0x17e>
 80264b0:	b1b0      	cbz	r0, 80264e0 <_svfiprintf_r+0x110>
 80264b2:	9207      	str	r2, [sp, #28]
 80264b4:	e014      	b.n	80264e0 <_svfiprintf_r+0x110>
 80264b6:	eba0 0308 	sub.w	r3, r0, r8
 80264ba:	fa09 f303 	lsl.w	r3, r9, r3
 80264be:	4313      	orrs	r3, r2
 80264c0:	9304      	str	r3, [sp, #16]
 80264c2:	46a2      	mov	sl, r4
 80264c4:	e7d2      	b.n	802646c <_svfiprintf_r+0x9c>
 80264c6:	9b03      	ldr	r3, [sp, #12]
 80264c8:	1d19      	adds	r1, r3, #4
 80264ca:	681b      	ldr	r3, [r3, #0]
 80264cc:	9103      	str	r1, [sp, #12]
 80264ce:	2b00      	cmp	r3, #0
 80264d0:	bfbb      	ittet	lt
 80264d2:	425b      	neglt	r3, r3
 80264d4:	f042 0202 	orrlt.w	r2, r2, #2
 80264d8:	9307      	strge	r3, [sp, #28]
 80264da:	9307      	strlt	r3, [sp, #28]
 80264dc:	bfb8      	it	lt
 80264de:	9204      	strlt	r2, [sp, #16]
 80264e0:	7823      	ldrb	r3, [r4, #0]
 80264e2:	2b2e      	cmp	r3, #46	; 0x2e
 80264e4:	d10c      	bne.n	8026500 <_svfiprintf_r+0x130>
 80264e6:	7863      	ldrb	r3, [r4, #1]
 80264e8:	2b2a      	cmp	r3, #42	; 0x2a
 80264ea:	d135      	bne.n	8026558 <_svfiprintf_r+0x188>
 80264ec:	9b03      	ldr	r3, [sp, #12]
 80264ee:	1d1a      	adds	r2, r3, #4
 80264f0:	681b      	ldr	r3, [r3, #0]
 80264f2:	9203      	str	r2, [sp, #12]
 80264f4:	2b00      	cmp	r3, #0
 80264f6:	bfb8      	it	lt
 80264f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80264fc:	3402      	adds	r4, #2
 80264fe:	9305      	str	r3, [sp, #20]
 8026500:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80265cc <_svfiprintf_r+0x1fc>
 8026504:	7821      	ldrb	r1, [r4, #0]
 8026506:	2203      	movs	r2, #3
 8026508:	4650      	mov	r0, sl
 802650a:	f7d9 fe89 	bl	8000220 <memchr>
 802650e:	b140      	cbz	r0, 8026522 <_svfiprintf_r+0x152>
 8026510:	2340      	movs	r3, #64	; 0x40
 8026512:	eba0 000a 	sub.w	r0, r0, sl
 8026516:	fa03 f000 	lsl.w	r0, r3, r0
 802651a:	9b04      	ldr	r3, [sp, #16]
 802651c:	4303      	orrs	r3, r0
 802651e:	3401      	adds	r4, #1
 8026520:	9304      	str	r3, [sp, #16]
 8026522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026526:	4826      	ldr	r0, [pc, #152]	; (80265c0 <_svfiprintf_r+0x1f0>)
 8026528:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802652c:	2206      	movs	r2, #6
 802652e:	f7d9 fe77 	bl	8000220 <memchr>
 8026532:	2800      	cmp	r0, #0
 8026534:	d038      	beq.n	80265a8 <_svfiprintf_r+0x1d8>
 8026536:	4b23      	ldr	r3, [pc, #140]	; (80265c4 <_svfiprintf_r+0x1f4>)
 8026538:	bb1b      	cbnz	r3, 8026582 <_svfiprintf_r+0x1b2>
 802653a:	9b03      	ldr	r3, [sp, #12]
 802653c:	3307      	adds	r3, #7
 802653e:	f023 0307 	bic.w	r3, r3, #7
 8026542:	3308      	adds	r3, #8
 8026544:	9303      	str	r3, [sp, #12]
 8026546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026548:	4433      	add	r3, r6
 802654a:	9309      	str	r3, [sp, #36]	; 0x24
 802654c:	e767      	b.n	802641e <_svfiprintf_r+0x4e>
 802654e:	fb0c 3202 	mla	r2, ip, r2, r3
 8026552:	460c      	mov	r4, r1
 8026554:	2001      	movs	r0, #1
 8026556:	e7a5      	b.n	80264a4 <_svfiprintf_r+0xd4>
 8026558:	2300      	movs	r3, #0
 802655a:	3401      	adds	r4, #1
 802655c:	9305      	str	r3, [sp, #20]
 802655e:	4619      	mov	r1, r3
 8026560:	f04f 0c0a 	mov.w	ip, #10
 8026564:	4620      	mov	r0, r4
 8026566:	f810 2b01 	ldrb.w	r2, [r0], #1
 802656a:	3a30      	subs	r2, #48	; 0x30
 802656c:	2a09      	cmp	r2, #9
 802656e:	d903      	bls.n	8026578 <_svfiprintf_r+0x1a8>
 8026570:	2b00      	cmp	r3, #0
 8026572:	d0c5      	beq.n	8026500 <_svfiprintf_r+0x130>
 8026574:	9105      	str	r1, [sp, #20]
 8026576:	e7c3      	b.n	8026500 <_svfiprintf_r+0x130>
 8026578:	fb0c 2101 	mla	r1, ip, r1, r2
 802657c:	4604      	mov	r4, r0
 802657e:	2301      	movs	r3, #1
 8026580:	e7f0      	b.n	8026564 <_svfiprintf_r+0x194>
 8026582:	ab03      	add	r3, sp, #12
 8026584:	9300      	str	r3, [sp, #0]
 8026586:	462a      	mov	r2, r5
 8026588:	4b0f      	ldr	r3, [pc, #60]	; (80265c8 <_svfiprintf_r+0x1f8>)
 802658a:	a904      	add	r1, sp, #16
 802658c:	4638      	mov	r0, r7
 802658e:	f3af 8000 	nop.w
 8026592:	1c42      	adds	r2, r0, #1
 8026594:	4606      	mov	r6, r0
 8026596:	d1d6      	bne.n	8026546 <_svfiprintf_r+0x176>
 8026598:	89ab      	ldrh	r3, [r5, #12]
 802659a:	065b      	lsls	r3, r3, #25
 802659c:	f53f af2c 	bmi.w	80263f8 <_svfiprintf_r+0x28>
 80265a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80265a2:	b01d      	add	sp, #116	; 0x74
 80265a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80265a8:	ab03      	add	r3, sp, #12
 80265aa:	9300      	str	r3, [sp, #0]
 80265ac:	462a      	mov	r2, r5
 80265ae:	4b06      	ldr	r3, [pc, #24]	; (80265c8 <_svfiprintf_r+0x1f8>)
 80265b0:	a904      	add	r1, sp, #16
 80265b2:	4638      	mov	r0, r7
 80265b4:	f7ff f978 	bl	80258a8 <_printf_i>
 80265b8:	e7eb      	b.n	8026592 <_svfiprintf_r+0x1c2>
 80265ba:	bf00      	nop
 80265bc:	08075c88 	.word	0x08075c88
 80265c0:	08075c92 	.word	0x08075c92
 80265c4:	00000000 	.word	0x00000000
 80265c8:	08026319 	.word	0x08026319
 80265cc:	08075c8e 	.word	0x08075c8e

080265d0 <__sread>:
 80265d0:	b510      	push	{r4, lr}
 80265d2:	460c      	mov	r4, r1
 80265d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80265d8:	f000 f89c 	bl	8026714 <_read_r>
 80265dc:	2800      	cmp	r0, #0
 80265de:	bfab      	itete	ge
 80265e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80265e2:	89a3      	ldrhlt	r3, [r4, #12]
 80265e4:	181b      	addge	r3, r3, r0
 80265e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80265ea:	bfac      	ite	ge
 80265ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80265ee:	81a3      	strhlt	r3, [r4, #12]
 80265f0:	bd10      	pop	{r4, pc}

080265f2 <__swrite>:
 80265f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80265f6:	461f      	mov	r7, r3
 80265f8:	898b      	ldrh	r3, [r1, #12]
 80265fa:	05db      	lsls	r3, r3, #23
 80265fc:	4605      	mov	r5, r0
 80265fe:	460c      	mov	r4, r1
 8026600:	4616      	mov	r6, r2
 8026602:	d505      	bpl.n	8026610 <__swrite+0x1e>
 8026604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026608:	2302      	movs	r3, #2
 802660a:	2200      	movs	r2, #0
 802660c:	f000 f868 	bl	80266e0 <_lseek_r>
 8026610:	89a3      	ldrh	r3, [r4, #12]
 8026612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802661a:	81a3      	strh	r3, [r4, #12]
 802661c:	4632      	mov	r2, r6
 802661e:	463b      	mov	r3, r7
 8026620:	4628      	mov	r0, r5
 8026622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026626:	f000 b817 	b.w	8026658 <_write_r>

0802662a <__sseek>:
 802662a:	b510      	push	{r4, lr}
 802662c:	460c      	mov	r4, r1
 802662e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026632:	f000 f855 	bl	80266e0 <_lseek_r>
 8026636:	1c43      	adds	r3, r0, #1
 8026638:	89a3      	ldrh	r3, [r4, #12]
 802663a:	bf15      	itete	ne
 802663c:	6560      	strne	r0, [r4, #84]	; 0x54
 802663e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026646:	81a3      	strheq	r3, [r4, #12]
 8026648:	bf18      	it	ne
 802664a:	81a3      	strhne	r3, [r4, #12]
 802664c:	bd10      	pop	{r4, pc}

0802664e <__sclose>:
 802664e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026652:	f000 b813 	b.w	802667c <_close_r>
	...

08026658 <_write_r>:
 8026658:	b538      	push	{r3, r4, r5, lr}
 802665a:	4d07      	ldr	r5, [pc, #28]	; (8026678 <_write_r+0x20>)
 802665c:	4604      	mov	r4, r0
 802665e:	4608      	mov	r0, r1
 8026660:	4611      	mov	r1, r2
 8026662:	2200      	movs	r2, #0
 8026664:	602a      	str	r2, [r5, #0]
 8026666:	461a      	mov	r2, r3
 8026668:	f7dc f955 	bl	8002916 <_write>
 802666c:	1c43      	adds	r3, r0, #1
 802666e:	d102      	bne.n	8026676 <_write_r+0x1e>
 8026670:	682b      	ldr	r3, [r5, #0]
 8026672:	b103      	cbz	r3, 8026676 <_write_r+0x1e>
 8026674:	6023      	str	r3, [r4, #0]
 8026676:	bd38      	pop	{r3, r4, r5, pc}
 8026678:	2004a53c 	.word	0x2004a53c

0802667c <_close_r>:
 802667c:	b538      	push	{r3, r4, r5, lr}
 802667e:	4d06      	ldr	r5, [pc, #24]	; (8026698 <_close_r+0x1c>)
 8026680:	2300      	movs	r3, #0
 8026682:	4604      	mov	r4, r0
 8026684:	4608      	mov	r0, r1
 8026686:	602b      	str	r3, [r5, #0]
 8026688:	f7dc f961 	bl	800294e <_close>
 802668c:	1c43      	adds	r3, r0, #1
 802668e:	d102      	bne.n	8026696 <_close_r+0x1a>
 8026690:	682b      	ldr	r3, [r5, #0]
 8026692:	b103      	cbz	r3, 8026696 <_close_r+0x1a>
 8026694:	6023      	str	r3, [r4, #0]
 8026696:	bd38      	pop	{r3, r4, r5, pc}
 8026698:	2004a53c 	.word	0x2004a53c

0802669c <_fstat_r>:
 802669c:	b538      	push	{r3, r4, r5, lr}
 802669e:	4d07      	ldr	r5, [pc, #28]	; (80266bc <_fstat_r+0x20>)
 80266a0:	2300      	movs	r3, #0
 80266a2:	4604      	mov	r4, r0
 80266a4:	4608      	mov	r0, r1
 80266a6:	4611      	mov	r1, r2
 80266a8:	602b      	str	r3, [r5, #0]
 80266aa:	f7dc f95c 	bl	8002966 <_fstat>
 80266ae:	1c43      	adds	r3, r0, #1
 80266b0:	d102      	bne.n	80266b8 <_fstat_r+0x1c>
 80266b2:	682b      	ldr	r3, [r5, #0]
 80266b4:	b103      	cbz	r3, 80266b8 <_fstat_r+0x1c>
 80266b6:	6023      	str	r3, [r4, #0]
 80266b8:	bd38      	pop	{r3, r4, r5, pc}
 80266ba:	bf00      	nop
 80266bc:	2004a53c 	.word	0x2004a53c

080266c0 <_isatty_r>:
 80266c0:	b538      	push	{r3, r4, r5, lr}
 80266c2:	4d06      	ldr	r5, [pc, #24]	; (80266dc <_isatty_r+0x1c>)
 80266c4:	2300      	movs	r3, #0
 80266c6:	4604      	mov	r4, r0
 80266c8:	4608      	mov	r0, r1
 80266ca:	602b      	str	r3, [r5, #0]
 80266cc:	f7dc f95b 	bl	8002986 <_isatty>
 80266d0:	1c43      	adds	r3, r0, #1
 80266d2:	d102      	bne.n	80266da <_isatty_r+0x1a>
 80266d4:	682b      	ldr	r3, [r5, #0]
 80266d6:	b103      	cbz	r3, 80266da <_isatty_r+0x1a>
 80266d8:	6023      	str	r3, [r4, #0]
 80266da:	bd38      	pop	{r3, r4, r5, pc}
 80266dc:	2004a53c 	.word	0x2004a53c

080266e0 <_lseek_r>:
 80266e0:	b538      	push	{r3, r4, r5, lr}
 80266e2:	4d07      	ldr	r5, [pc, #28]	; (8026700 <_lseek_r+0x20>)
 80266e4:	4604      	mov	r4, r0
 80266e6:	4608      	mov	r0, r1
 80266e8:	4611      	mov	r1, r2
 80266ea:	2200      	movs	r2, #0
 80266ec:	602a      	str	r2, [r5, #0]
 80266ee:	461a      	mov	r2, r3
 80266f0:	f7dc f954 	bl	800299c <_lseek>
 80266f4:	1c43      	adds	r3, r0, #1
 80266f6:	d102      	bne.n	80266fe <_lseek_r+0x1e>
 80266f8:	682b      	ldr	r3, [r5, #0]
 80266fa:	b103      	cbz	r3, 80266fe <_lseek_r+0x1e>
 80266fc:	6023      	str	r3, [r4, #0]
 80266fe:	bd38      	pop	{r3, r4, r5, pc}
 8026700:	2004a53c 	.word	0x2004a53c

08026704 <_malloc_usable_size_r>:
 8026704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026708:	1f18      	subs	r0, r3, #4
 802670a:	2b00      	cmp	r3, #0
 802670c:	bfbc      	itt	lt
 802670e:	580b      	ldrlt	r3, [r1, r0]
 8026710:	18c0      	addlt	r0, r0, r3
 8026712:	4770      	bx	lr

08026714 <_read_r>:
 8026714:	b538      	push	{r3, r4, r5, lr}
 8026716:	4d07      	ldr	r5, [pc, #28]	; (8026734 <_read_r+0x20>)
 8026718:	4604      	mov	r4, r0
 802671a:	4608      	mov	r0, r1
 802671c:	4611      	mov	r1, r2
 802671e:	2200      	movs	r2, #0
 8026720:	602a      	str	r2, [r5, #0]
 8026722:	461a      	mov	r2, r3
 8026724:	f7dc f8da 	bl	80028dc <_read>
 8026728:	1c43      	adds	r3, r0, #1
 802672a:	d102      	bne.n	8026732 <_read_r+0x1e>
 802672c:	682b      	ldr	r3, [r5, #0]
 802672e:	b103      	cbz	r3, 8026732 <_read_r+0x1e>
 8026730:	6023      	str	r3, [r4, #0]
 8026732:	bd38      	pop	{r3, r4, r5, pc}
 8026734:	2004a53c 	.word	0x2004a53c

08026738 <_init>:
 8026738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802673a:	bf00      	nop
 802673c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802673e:	bc08      	pop	{r3}
 8026740:	469e      	mov	lr, r3
 8026742:	4770      	bx	lr

08026744 <_fini>:
 8026744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026746:	bf00      	nop
 8026748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802674a:	bc08      	pop	{r3}
 802674c:	469e      	mov	lr, r3
 802674e:	4770      	bx	lr
